1705851856.989189433: src/main/tools/linux-sandbox.cc:152: calling pipe(2)...
1705851856.989322315: src/main/tools/linux-sandbox.cc:171: calling clone(2)...
1705851856.989635139: src/main/tools/linux-sandbox.cc:180: linux-sandbox-pid1 has PID 337357
1705851856.989679182: src/main/tools/linux-sandbox-pid1.cc:650: Pid1Main started
1705851856.989792492: src/main/tools/linux-sandbox.cc:197: done manipulating pipes
1705851856.989904648: src/main/tools/linux-sandbox-pid1.cc:269: working dir: /home/rmartine/.cache/bazel/_bazel_rmartine/4e0fce1d7533a173497e9e40c7131c44/sandbox/linux-sandbox/3093/execroot/ml_metadata
1705851856.989928500: src/main/tools/linux-sandbox-pid1.cc:301: writable: /home/rmartine/.cache/bazel/_bazel_rmartine/4e0fce1d7533a173497e9e40c7131c44/sandbox/linux-sandbox/3093/execroot/ml_metadata
1705851856.989940988: src/main/tools/linux-sandbox-pid1.cc:301: writable: /tmp
1705851856.989949594: src/main/tools/linux-sandbox-pid1.cc:301: writable: /dev/shm
1705851856.990039773: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /
1705851856.990049916: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /dev
1705851856.990057214: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /dev/shm
1705851856.990065404: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /dev/pts
1705851856.990073040: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /dev/hugepages
1705851856.990080600: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /dev/mqueue
1705851856.990087353: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys
1705851856.990094051: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/kernel/security
1705851856.990105231: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/cgroup
1705851856.990113066: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/pstore
1705851856.990120464: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/firmware/efi/efivars
1705851856.990156896: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/bpf
1705851856.990164778: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/kernel/config
1705851856.990172372: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/selinux
1705851856.990179769: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/kernel/debug
1705851856.990186926: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/kernel/tracing
1705851856.990194618: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/fuse/connections
1705851856.990202565: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /proc
1705851856.990209768: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /proc/sys/fs/binfmt_misc
1705851856.990219444: src/main/tools/linux-sandbox-pid1.cc:391: remount(nullptr, /proc/sys/fs/binfmt_misc, nullptr, 2101281, nullptr) failure (Operation not permitted) ignored
1705851856.990230275: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /proc/sys/fs/binfmt_misc
1705851856.990251064: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run
1705851856.990260558: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run/user/1000
1705851856.990269644: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run/user/1000/gvfs
1705851856.990312808: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run/user/1000/doc
1705851856.990321374: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run/media/rmartine/TOSHIBA EXT
1705851856.990331366: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /home
1705851856.990337369: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /boot
1705851856.990344666: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /boot/efi
1705851856.990352098: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /tmp
1705851856.990357970: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /var/lib/nfs/rpc_pipefs
1705851856.990368957: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /mnt/WdMyCloud
1705851856.990385686: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /home/rmartine/.cache/bazel/_bazel_rmartine/4e0fce1d7533a173497e9e40c7131c44/sandbox/linux-sandbox/3093/execroot/ml_metadata
1705851856.990410576: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /home/rmartine/.cache/bazel/_bazel_rmartine/4e0fce1d7533a173497e9e40c7131c44/sandbox/linux-sandbox/3093/execroot/ml_metadata
1705851856.990421726: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /tmp
1705851856.990428074: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /dev/shm
1705851856.990488075: src/main/tools/linux-sandbox-pid1.cc:460: calling fork...
1705851856.990660452: src/main/tools/linux-sandbox-pid1.cc:490: child started with PID 2
In file included from external/com_google_zetasql/zetasql/analyzer/column_cycle_detector.h:22,
                 from external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:32:
external/com_google_zetasql/zetasql/public/id_string.h: In member function 'const zetasql::IdString::Shared* zetasql::IdStringPool::MakeShared(absl::lts_20230802::string_view)':
external/com_google_zetasql/zetasql/public/id_string.h:462:23: warning: comparison of integer expressions of different signedness: 'int' and 'std::basic_string_view<char>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
  462 |     for (int i = 0; i < str.size(); ++i) {
      |                     ~~^~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/public/types/type_factory.h:35,
                 from external/com_google_zetasql/zetasql/public/type.h:26,
                 from external/com_google_zetasql/zetasql/analyzer/name_scope.h:28,
                 from external/com_google_zetasql/zetasql/analyzer/expr_resolver_helper.h:26,
                 from external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:33:
external/com_google_zetasql/zetasql/public/types/proto_type.h: In member function 'absl::lts_20230802::Status zetasql::ProtoType::GetFieldTypeByTagNumber(int, zetasql::TypeFactory*, const zetasql::Type**, std::string*) const':
external/com_google_zetasql/zetasql/public/types/proto_type.h:117:35: warning: 'absl::lts_20230802::Status zetasql::ProtoType::GetFieldTypeByTagNumber(int, zetasql::TypeFactory*, bool, const zetasql::Type**, std::string*) const' is deprecated: Use overload without 'use_obsolete_timestamp' argument. [-Wdeprecated-declarations]
  117 |     return GetFieldTypeByTagNumber(
      |            ~~~~~~~~~~~~~~~~~~~~~~~^
  118 |         number, factory, /*use_obsolete_timestamp=*/false, type, name);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h:130:16: note: declared here
  130 |   absl::Status GetFieldTypeByTagNumber(int number, TypeFactory* factory,
      |                ^~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h: In member function 'absl::lts_20230802::Status zetasql::ProtoType::GetFieldTypeByName(const std::string&, zetasql::TypeFactory*, const zetasql::Type**, int*) const':
external/com_google_zetasql/zetasql/public/types/proto_type.h:123:30: warning: 'absl::lts_20230802::Status zetasql::ProtoType::GetFieldTypeByName(const std::string&, zetasql::TypeFactory*, bool, const zetasql::Type**, int*) const' is deprecated: Use overload without 'use_obsolete_timestamp' argument. [-Wdeprecated-declarations]
  123 |     return GetFieldTypeByName(name, factory,
      |            ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
  124 |                               /*use_obsolete_timestamp=*/false, type, number);
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h:135:16: note: declared here
  135 |   absl::Status GetFieldTypeByName(const std::string& name, TypeFactory* factory,
      |                ^~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h: In static member function 'static absl::lts_20230802::Status zetasql::ProtoType::FieldDescriptorToTypeKindBase(bool, const google::protobuf::FieldDescriptor*, zetasql::TypeKind*)':
external/com_google_zetasql/zetasql/public/types/proto_type.h:172:42: warning: 'static absl::lts_20230802::Status zetasql::ProtoType::GetTypeKindFromFieldDescriptor(const google::protobuf::FieldDescriptor*, bool, bool, zetasql::TypeKind*)' is deprecated: Use overload without 'use_obsolete_timestamp' argument. [-Wdeprecated-declarations]
  172 |     return GetTypeKindFromFieldDescriptor(field, ignore_annotations,
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
  173 |                                           /*use_obsolete_timestamp=*/false,
      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  174 |                                           kind);
      |                                           ~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h:315:23: note: declared here
  315 |   static absl::Status GetTypeKindFromFieldDescriptor(
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h: In static member function 'static absl::lts_20230802::Status zetasql::ProtoType::FieldDescriptorToTypeKindBase(const google::protobuf::FieldDescriptor*, bool, zetasql::TypeKind*)':
external/com_google_zetasql/zetasql/public/types/proto_type.h:188:42: warning: 'static absl::lts_20230802::Status zetasql::ProtoType::GetTypeKindFromFieldDescriptor(const google::protobuf::FieldDescriptor*, bool, bool, zetasql::TypeKind*)' is deprecated: Use overload without 'use_obsolete_timestamp' argument. [-Wdeprecated-declarations]
  188 |     return GetTypeKindFromFieldDescriptor(field,
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
  189 |                                           /*ignore_format_annotations=*/false,
      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  190 |                                           use_obsolete_timestamp, kind);
      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h:315:23: note: declared here
  315 |   static absl::Status GetTypeKindFromFieldDescriptor(
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/type_factory.h: In member function 'absl::lts_20230802::Status zetasql::TypeFactory::MakeUnwrappedTypeFromProto(const google::protobuf::Descriptor*, const zetasql::Type**)':
external/com_google_zetasql/zetasql/public/types/type_factory.h:272:38: warning: 'absl::lts_20230802::Status zetasql::TypeFactory::MakeUnwrappedTypeFromProto(const google::protobuf::Descriptor*, bool, const zetasql::Type**)' is deprecated: Obsolete timestamp types are deprecated [-Wdeprecated-declarations]
  272 |     return MakeUnwrappedTypeFromProto(message, /*use_obsolete_timestamp=*/false,
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  273 |                                       result_type);
      |                                       ~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/type_factory.h:278:16: note: declared here
  278 |   absl::Status MakeUnwrappedTypeFromProto(const google::protobuf::Descriptor* message,
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/type_factory.h: In member function 'absl::lts_20230802::Status zetasql::TypeFactory::UnwrapTypeIfAnnotatedProto(const zetasql::Type*, const zetasql::Type**)':
external/com_google_zetasql/zetasql/public/types/type_factory.h:286:38: warning: 'absl::lts_20230802::Status zetasql::TypeFactory::UnwrapTypeIfAnnotatedProto(const zetasql::Type*, bool, const zetasql::Type**)' is deprecated: Obsolete timestamp types are deprecated [-Wdeprecated-declarations]
  286 |     return UnwrapTypeIfAnnotatedProto(
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~^
  287 |         input_type, /*use_obsolete_timestamp=*/false, result_type);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/type_factory.h:292:16: note: declared here
  292 |   absl::Status UnwrapTypeIfAnnotatedProto(const Type* input_type,
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/public/value.h:1110,
                 from external/com_google_zetasql/zetasql/public/evaluator_table_iterator.h:26,
                 from external/com_google_zetasql/zetasql/public/catalog.h:28,
                 from external/com_google_zetasql/zetasql/resolved_ast/resolved_node.h:27,
                 from external/com_google_zetasql/zetasql/resolved_ast/resolved_column.h:28,
                 from external/com_google_zetasql/zetasql/analyzer/name_scope.h:29:
external/com_google_zetasql/zetasql/public/value_inl.h: In constructor 'constexpr zetasql::Value::Metadata::Metadata(zetasql::TypeKind, bool, bool, int32_t)':
external/com_google_zetasql/zetasql/public/value_inl.h:788:11: warning: call to non-'constexpr' function 'zetasql::Value::Metadata::Content* zetasql::Value::Metadata::content()' [-Winvalid-constexpr]
  788 |   *content() = Content(kind, is_null, preserves_order, value_extended_content);
      |    ~~~~~~~^~
external/com_google_zetasql/zetasql/public/value.h:962:14: note: 'zetasql::Value::Metadata::Content* zetasql::Value::Metadata::content()' declared here
  962 |     Content* content();
      |              ^~~~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::Struct(const zetasql::StructType*, absl::lts_20230802::Span<const zetasql::Value>)':
external/com_google_zetasql/zetasql/public/value_inl.h:850:23: warning: 'static zetasql::Value zetasql::Value::Struct(const zetasql::StructType*, absl::lts_20230802::Span<const zetasql::Value>)' is deprecated: Please use MakeStruct() instead. [-Wdeprecated-declarations]
  850 |   return Value::Struct(type, values);
      |          ~~~~~~~~~~~~~^~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:581:16: note: declared here
  581 |   static Value Struct(const StructType* type, absl::Span<const Value> values) {
      |                ^~~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::UnsafeStruct(const zetasql::StructType*, std::vector<zetasql::Value>&&)':
external/com_google_zetasql/zetasql/public/value_inl.h:853:29: warning: 'static zetasql::Value zetasql::Value::UnsafeStruct(const zetasql::StructType*, std::vector<zetasql::Value>&&)' is deprecated: Please use MakeStructFromValidatedInputs() instead. [-Wdeprecated-declarations]
  853 |   return Value::UnsafeStruct(type, std::move(values));
      |          ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:592:16: note: declared here
  592 |   static Value UnsafeStruct(const StructType* type,
      |                ^~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::EmptyArray(const zetasql::ArrayType*)':
external/com_google_zetasql/zetasql/public/value_inl.h:865:22: warning: 'static zetasql::Value zetasql::Value::Array(const zetasql::ArrayType*, absl::lts_20230802::Span<const zetasql::Value>)' is deprecated: Please use MakeArray() instead. [-Wdeprecated-declarations]
  865 |   return Value::Array(type, {});
      |          ~~~~~~~~~~~~^~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:632:16: note: declared here
  632 |   static Value Array(const ArrayType* array_type,
      |                ^~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::Array(const zetasql::ArrayType*, absl::lts_20230802::Span<const zetasql::Value>)':
external/com_google_zetasql/zetasql/public/value_inl.h:868:22: warning: 'static zetasql::Value zetasql::Value::Array(const zetasql::ArrayType*, absl::lts_20230802::Span<const zetasql::Value>)' is deprecated: Please use MakeArray() instead. [-Wdeprecated-declarations]
  868 |   return Value::Array(type, values);
      |          ~~~~~~~~~~~~^~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:632:16: note: declared here
  632 |   static Value Array(const ArrayType* array_type,
      |                ^~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::UnsafeArray(const zetasql::ArrayType*, std::vector<zetasql::Value>&&)':
external/com_google_zetasql/zetasql/public/value_inl.h:871:28: warning: 'static zetasql::Value zetasql::Value::UnsafeArray(const zetasql::ArrayType*, std::vector<zetasql::Value>&&)' is deprecated: Please use MakeArrayFromValidatedInputs() instead. [-Wdeprecated-declarations]
  871 |   return Value::UnsafeArray(type, std::move(values));
      |          ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:644:16: note: declared here
  644 |   static Value UnsafeArray(const ArrayType* array_type,
      |                ^~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/parser/parse_tree.h:27,
                 from external/com_google_zetasql/zetasql/analyzer/expr_resolver_helper.h:27:
external/com_google_zetasql/zetasql/parser/ast_node.h: In member function 'int zetasql::ASTNode::find_child_index(zetasql::ASTNodeKind) const':
external/com_google_zetasql/zetasql/parser/ast_node.h:105:23: warning: comparison of integer expressions of different signedness: 'int' and 'absl::lts_20230802::InlinedVector<zetasql::ASTNode*, 4>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
  105 |     for (int i = 0; i < children_.size(); i++) {
      |                     ~~^~~~~~~~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/analyzer/resolver.h:39,
                 from external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:39:
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h: In member function 'void zetasql::AnalyzerOutputProperties::MarkRelevant(zetasql::ResolvedASTRewrite)':
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:50:7: warning: 'zetasql::AnalyzerOutputProperties::has_flatten' is deprecated: Client code should consider this struct internal. It doesn't mean what you think it means. [-Wdeprecated-declarations]
   50 |       has_flatten = true;
      |       ^~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:33:8: note: declared here
   33 |   bool has_flatten = false;  // NOLINT
      |        ^~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:50:7: warning: 'zetasql::AnalyzerOutputProperties::has_flatten' is deprecated: Client code should consider this struct internal. It doesn't mean what you think it means. [-Wdeprecated-declarations]
   50 |       has_flatten = true;
      |       ^~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:33:8: note: declared here
   33 |   bool has_flatten = false;  // NOLINT
      |        ^~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:53:7: warning: 'zetasql::AnalyzerOutputProperties::has_anonymization' is deprecated: Client code should consider this struct internal. It doesn't mean what you think it means. [-Wdeprecated-declarations]
   53 |       has_anonymization = true;
      |       ^~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:39:8: note: declared here
   39 |   bool has_anonymization = false;  // NOLINT
      |        ^~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:53:7: warning: 'zetasql::AnalyzerOutputProperties::has_anonymization' is deprecated: Client code should consider this struct internal. It doesn't mean what you think it means. [-Wdeprecated-declarations]
   53 |       has_anonymization = true;
      |       ^~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:39:8: note: declared here
   39 |   bool has_anonymization = false;  // NOLINT
      |        ^~~~~~~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/base/ret_check.h:47,
                 from external/com_google_zetasql/zetasql/public/parse_location.h:32,
                 from external/com_google_zetasql/zetasql/common/errors.h:67,
                 from external/com_google_zetasql/zetasql/public/interval_value.h:24,
                 from external/com_google_zetasql/zetasql/public/types/value_representations.h:28,
                 from external/com_google_zetasql/zetasql/public/types/simple_value.h:25,
                 from external/com_google_zetasql/zetasql/public/types/annotation.h:41,
                 from external/com_google_zetasql/zetasql/public/type.h:24:
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveGeneratedColumnInfo(const zetasql::ASTGeneratedColumnInfo*, const zetasql::NameList&, const zetasql::Type*, std::unique_ptr<zetasql::ResolvedGeneratedColumnInfo>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:906:25: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, absl::lts_20230802::string_view, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
  906 |         CoerceExprToType(ast_generated_column, opt_type, kImplicitAssignment,
      |         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  907 |                          "Generated column expression has type $1 which cannot "
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  908 |                          "be assigned to column type $0",
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  909 |                          &resolved_expression));
      |                          ~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:243:16: note: declared here
  243 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveColumnDefaultExpression(const zetasql::ASTExpression*, const zetasql::Type*, bool, std::unique_ptr<zetasql::ResolvedColumnDefaultValue>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:936:25: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, absl::lts_20230802::string_view, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
  936 |         CoerceExprToType(ast_column_default, opt_type, kImplicitAssignment,
      |         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  937 |                          "Column default expression has type $1 "
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  938 |                          "which cannot be assigned to column type $0",
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  939 |                          &resolved_expression));
      |                          ~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:243:16: note: declared here
  243 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveForeignKeys(absl::lts_20230802::Span<const zetasql::ASTTableElement* const>, const ColumnIndexMap&, const std::vector<std::unique_ptr<const zetasql::ResolvedColumnDefinition> >&, std::set<std::__cxx11::basic_string<char>, zetasql_base::CaseLess>*, std::vector<std::unique_ptr<const zetasql::ResolvedForeignKey> >*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:1495:23: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<std::unique_ptr<zetasql::ResolvedForeignKey> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 1495 |     for (int i = 0; i < foreign_keys.size(); i++) {
      |                     ~~^~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveForeignKeyReference(const ColumnIndexMap&, const std::vector<const zetasql::Type*>&, absl::lts_20230802::Span<const zetasql::ASTIdentifier* const>, const zetasql::ASTForeignKeyReference*, zetasql::ResolvedForeignKey*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:1631:21: warning: comparison of integer expressions of different signedness: 'int' and 'absl::lts_20230802::Span<const zetasql::ASTIdentifier* const>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 1631 |   for (int i = 0; i < ast_referencing_column_identifiers.size(); i++) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from external/com_google_absl/absl/base/port.h:23,
                 from external/com_google_absl/absl/base/internal/low_level_alloc.h:56,
                 from external/com_google_absl/absl/synchronization/mutex.h:69,
                 from external/com_google_zetasql/zetasql/base/arena.h:266,
                 from external/com_google_zetasql/zetasql/public/id_string.h:35:
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:1658:50: warning: comparison of integer expressions of different signedness: 'const int' and 'std::vector<const zetasql::Type*>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 1658 |     ZETASQL_RET_CHECK(*referencing_column_offset < column_types.size());
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
external/com_google_absl/absl/base/optimization.h:177:59: note: in definition of macro 'ABSL_PREDICT_FALSE'
  177 | #define ABSL_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
      |                                                           ^
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:1658:5: note: in expansion of macro 'ZETASQL_RET_CHECK'
 1658 |     ZETASQL_RET_CHECK(*referencing_column_offset < column_types.size());
      |     ^~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveQueryAndOutputColumns(const zetasql::ASTQuery*, absl::lts_20230802::string_view, bool, const std::vector<zetasql::IdString>&, zetasql::IdString, const zetasql::ASTColumnList*, std::unique_ptr<const zetasql::ResolvedScan>*, bool*, std::vector<std::unique_ptr<const zetasql::ResolvedOutputColumn> >*, std::vector<std::unique_ptr<const zetasql::ResolvedColumnDefinition> >*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:2801:52: warning: comparison of integer expressions of different signedness: 'absl::lts_20230802::Span<const zetasql::ASTIdentifier* const>::size_type' {aka 'long unsigned int'} and 'const int' [-Wsign-compare]
 2801 |     if (explicit_column_list->identifiers().size() != num_output_columns) {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveAndAdaptQueryAndOutputColumns(const zetasql::ASTQuery*, const zetasql::ASTPathExpression*, const zetasql::ASTTableElementList*, absl::lts_20230802::Span<const zetasql::ASTColumnDefinition* const>, std::vector<std::unique_ptr<const zetasql::ResolvedColumnDefinition> >&, std::unique_ptr<const zetasql::ResolvedScan>*, std::vector<std::unique_ptr<const zetasql::ResolvedOutputColumn> >*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:2928:28: warning: comparison of integer expressions of different signedness: 'const int' and 'std::vector<std::unique_ptr<const zetasql::ResolvedColumnDefinition> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 2928 |     if (num_output_columns != column_definition_list.size()) {
      |         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:2940:28: warning: comparison of integer expressions of different signedness: 'const int' and 'std::vector<std::unique_ptr<const zetasql::ResolvedColumnDefinition> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 2940 |     if (num_output_columns != column_definition_list.size()) {
      |         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveCreateFunctionStatement(const zetasql::ASTCreateFunctionStatement*, std::unique_ptr<zetasql::ResolvedStatement>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:3499:47: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, absl::lts_20230802::string_view, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 3499 |       ZETASQL_RETURN_IF_ERROR(CoerceExprToType(
      |                               ~~~~~~~~~~~~~~~~^
 3500 |           sql_function_body->expression(), return_type, kImplicitCoercion,
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 3501 |           "Function declared to return $0 but the function body produces "
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 3502 |           "incompatible type $1",
      |           ~~~~~~~~~~~~~~~~~~~~~~~              
 3503 |           &resolved_expr));
      |           ~~~~~~~~~~~~~~~                      
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:243:16: note: declared here
  243 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::CheckSQLBodyReturnTypesAndCoerceIfNeeded(const zetasql::ASTNode*, const zetasql::TVFRelation&, const zetasql::NameList*, std::unique_ptr<const zetasql::ResolvedScan>*, std::vector<std::unique_ptr<const zetasql::ResolvedOutputColumn> >*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4000:28: warning: 'bool zetasql::Coercer::CoercesTo(const zetasql::InputArgumentType&, const zetasql::Type*, bool, zetasql::SignatureMatchResult*) const' is deprecated: use CoercesTo(from_argument, to_type, is_explicit, result, extended_conversion) instead [-Wdeprecated-declarations]
 4000 |     if (!coercer_.CoercesTo(InputArgumentType(provided_col_type),
      |          ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 4001 |                             required_col_type, /*is_explicit=*/false,
      |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 4002 |                             &signature_match_result)) {
      |                             ~~~~~~~~~~~~~~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/analyzer/function_signature_matcher.h:25,
                 from external/com_google_zetasql/zetasql/analyzer/function_resolver.h:26,
                 from external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:34:
external/com_google_zetasql/zetasql/public/coercer.h:116:8: note: declared here
  116 |   bool CoercesTo(const InputArgumentType& from_argument, const Type* to_type,
      |        ^~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveFunctionParameters(const zetasql::ASTFunctionParameters*, ResolveFunctionDeclarationType, zetasql::FunctionArgumentInfo*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4454:29: warning: 'static zetasql::Value zetasql::Value::Array(const zetasql::ArrayType*, absl::lts_20230802::Span<const zetasql::Value>)' is deprecated: Please use MakeArray() instead. [-Wdeprecated-declarations]
 4454 |                 Value::Array(resolved_type->AsArray(), /*values=*/{});
      |                 ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:632:16: note: declared here
  632 |   static Value Array(const ArrayType* array_type,
      |                ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveAlterPrivilegeRestrictionStatement(const zetasql::ASTAlterPrivilegeRestrictionStatement*, std::unique_ptr<zetasql::ResolvedStatement>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4762:63: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTRestrictToClause]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 4762 |         auto* restrict_to = action->GetAs<ASTRestrictToClause>();
      |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4779:76: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTAddToRestricteeListClause]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 4779 |         auto* add_restrictees = action->GetAs<ASTAddToRestricteeListClause>();
      |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4798:61: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTRemoveFromRestricteeListClause]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 4798 |             action->GetAs<ASTRemoveFromRestricteeListClause>();
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveAlterRowAccessPolicyStatement(const zetasql::ASTAlterRowAccessPolicyStatement*, std::unique_ptr<zetasql::ResolvedStatement>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4879:57: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTGrantToClause]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 4879 |         auto* grant_to = action->GetAs<ASTGrantToClause>();
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4891:65: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTFilterUsingClause]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 4891 |         auto* filter_using = action->GetAs<ASTFilterUsingClause>();
      |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4906:63: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTRevokeFromClause]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 4906 |         auto* revoke_from = action->GetAs<ASTRevokeFromClause>();
      |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4928:59: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTRenameToClause]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 4928 |         auto* rename_to = action->GetAs<ASTRenameToClause>();
      |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveAlterAllRowAccessPoliciesStatement(const zetasql::ASTAlterAllRowAccessPoliciesStatement*, std::unique_ptr<zetasql::ResolvedStatement>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4979:64: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTRevokeFromClause]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 4979 |       ast_statement->alter_action()->GetAs<ASTRevokeFromClause>();
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveCloneDataStatement(const zetasql::ASTCloneDataStatement*, std::unique_ptr<zetasql::ResolvedStatement>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:5047:23: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::ResolvedColumn>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 5047 |     for (int i = 0; i < scan->column_list().size(); i++) {
      |                     ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveCallStatement(const zetasql::ASTCallStatement*, std::unique_ptr<zetasql::ResolvedStatement>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:5222:45: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 5222 |     ZETASQL_RETURN_IF_ERROR(CoerceExprToType(ast_call->arguments()[i], target_type,
      |                             ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 5223 |                                      kExplicitCoercion,
      |                                      ~~~~~~~~~~~~~~~~~~
 5224 |                                      &resolved_args_exprs[i]));
      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:259:16: note: declared here
  259 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveExecuteImmediateStatement(const zetasql::ASTExecuteImmediateStatement*, std::unique_ptr<zetasql::ResolvedStatement>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:5954:43: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, absl::lts_20230802::string_view, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 5954 |   ZETASQL_RETURN_IF_ERROR(CoerceExprToType(
      |                           ~~~~~~~~~~~~~~~~^
 5955 |       ast_statement->sql(), type_factory_->get_string(), kImplicitCoercion,
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 5956 |       "Dynamic SQL should return type $0, but returns $1", &sql));
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:243:16: note: declared here
  243 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveSystemVariableAssignment(const zetasql::ASTSystemVariableAssignment*, std::unique_ptr<zetasql::ResolvedStatement>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:6061:43: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 6061 |   ZETASQL_RETURN_IF_ERROR(CoerceExprToType(ast_statement->expression(), target->type(),
      |                           ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6062 |                                    kImplicitAssignment, &resolved_expr));
      |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:259:16: note: declared here
  259 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:30:
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_EQImpl(const T1&, const T2&, const char*) [with T1 = long unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/public/numeric_value.h:1462:3:   required from here
external/com_google_zetasql/zetasql/base/logging.h:186:32: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  186 | DEFINE_CHECK_OP_IMPL(Check_EQ, ==)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_LEImpl(const T1&, const T2&, const char*) [with T1 = int; T2 = long unsigned int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/public/parse_resume_location.h:134:5:   required from here
external/com_google_zetasql/zetasql/base/logging.h:188:32: warning: comparison of integer expressions of different signedness: 'const int' and 'const long unsigned int' [-Wsign-compare]
  188 | DEFINE_CHECK_OP_IMPL(Check_LE, <=)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_GEImpl(const T1&, const T2&, const char*) [with T1 = long unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:945:3:   required from here
external/com_google_zetasql/zetasql/base/logging.h:190:32: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  190 | DEFINE_CHECK_OP_IMPL(Check_GE, >=)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_GTImpl(const T1&, const T2&, const char*) [with T1 = long unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:5021:3:   required from here
external/com_google_zetasql/zetasql/base/logging.h:191:32: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  191 | DEFINE_CHECK_OP_IMPL(Check_GT, >)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_LEImpl(const T1&, const T2&, const char*) [with T1 = long unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:5738:7:   required from here
external/com_google_zetasql/zetasql/base/logging.h:188:32: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  188 | DEFINE_CHECK_OP_IMPL(Check_LE, <=)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/common/multiprecision_int_impl.h: In instantiation of 'void zetasql::multiprecision_int_impl::ShiftRight(Filler, Word*, int, uint) [with Filler = long unsigned int; Word = long unsigned int; uint = unsigned int]':
external/com_google_zetasql/zetasql/common/multiprecision_int.h:321:42:   required from 'zetasql::FixedUint<kNumBitsPerWord, kNumWords>& zetasql::FixedUint<kNumBitsPerWord, kNumWords>::operator>>=(uint) [with int kNumBitsPerWord = 64; int kNumWords = 3; uint = unsigned int]'
external/com_google_zetasql/zetasql/public/numeric_value.h:1467:23:   required from here
external/com_google_zetasql/zetasql/common/multiprecision_int_impl.h:209:31: warning: comparison of integer expressions of different signedness: 'uint' {aka 'unsigned int'} and 'int' [-Wsign-compare]
  209 |   if (ABSL_PREDICT_FALSE(bits >= num_words * kNumBitsPerWord)) {
external/com_google_absl/absl/base/optimization.h:177:59: note: in definition of macro 'ABSL_PREDICT_FALSE'
  177 | #define ABSL_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
      |                                                           ^
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_GTImpl(const T1&, const T2&, const char*) [with T1 = unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/common/multiprecision_int_impl.h:197:3:   required from 'void zetasql::multiprecision_int_impl::ShiftRightFast(Word*, int, uint) [with LastWord = long unsigned int; Word = long unsigned int; uint = unsigned int]'
external/com_google_zetasql/zetasql/common/multiprecision_int.h:317:54:   required from 'zetasql::FixedUint<kNumBitsPerWord, kNumWords>& zetasql::FixedUint<kNumBitsPerWord, kNumWords>::operator>>=(uint) [with int kNumBitsPerWord = 64; int kNumWords = 3; uint = unsigned int]'
external/com_google_zetasql/zetasql/public/numeric_value.h:1467:23:   required from here
external/com_google_zetasql/zetasql/base/logging.h:191:32: warning: comparison of integer expressions of different signedness: 'const unsigned int' and 'const int' [-Wsign-compare]
  191 | DEFINE_CHECK_OP_IMPL(Check_GT, >)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_LTImpl(const T1&, const T2&, const char*) [with T1 = unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/common/multiprecision_int_impl.h:198:3:   required from 'void zetasql::multiprecision_int_impl::ShiftRightFast(Word*, int, uint) [with LastWord = long unsigned int; Word = long unsigned int; uint = unsigned int]'
external/com_google_zetasql/zetasql/common/multiprecision_int.h:317:54:   required from 'zetasql::FixedUint<kNumBitsPerWord, kNumWords>& zetasql::FixedUint<kNumBitsPerWord, kNumWords>::operator>>=(uint) [with int kNumBitsPerWord = 64; int kNumWords = 3; uint = unsigned int]'
external/com_google_zetasql/zetasql/public/numeric_value.h:1467:23:   required from here
external/com_google_zetasql/zetasql/base/logging.h:189:32: warning: comparison of integer expressions of different signedness: 'const unsigned int' and 'const int' [-Wsign-compare]
  189 | DEFINE_CHECK_OP_IMPL(Check_LT, <)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In function 'zetasql::ResolvedCreateStatement::CreateScope zetasql::ToResolvedCreateScope(ASTCreateStatement::Scope)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:762:1: warning: control reaches end of non-void function [-Wreturn-type]
  762 | }
      | ^
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In function 'zetasql::ResolvedGeneratedColumnInfoEnums::StoredMode zetasql::ConvertStoredMode(ASTGeneratedColumnInfo::StoredMode)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:881:1: warning: control reaches end of non-void function [-Wreturn-type]
  881 | }
      | ^
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In function 'zetasql::ResolvedForeignKey::MatchMode zetasql::GetForeignKeyMatchMode(ASTForeignKeyReference::Match)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:1586:1: warning: control reaches end of non-void function [-Wreturn-type]
 1586 | }
      | ^
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In function 'zetasql::ResolvedForeignKey::ActionOperation zetasql::GetForeignKeyActionOperation(ASTForeignKeyActions::Action)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:1600:1: warning: control reaches end of non-void function [-Wreturn-type]
 1600 | }
      | ^
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In function 'std::string zetasql::CreateScopeErrorString(ResolvedCreateStatement::CreateScope)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:3317:1: warning: control reaches end of non-void function [-Wreturn-type]
 3317 | }
      | ^
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In function 'zetasql::ResolvedCreateStatementEnums::DeterminismLevel zetasql::ConvertDeterminismLevel(ASTCreateFunctionStmtBase::DeterminismLevel)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:3358:1: warning: control reaches end of non-void function [-Wreturn-type]
 3358 | }
      | ^
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In function 'zetasql::FunctionEnums::ProcedureArgumentMode zetasql::GetProcedureArgumentMode(ASTFunctionParameter::ProcedureParameterMode)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:4268:1: warning: control reaches end of non-void function [-Wreturn-type]
 4268 | }
      | ^
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In function 'zetasql::ResolvedDropStmtEnums::DropMode zetasql::ConvertDropMode(ASTDropStatement::DropMode)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:5411:1: warning: control reaches end of non-void function [-Wreturn-type]
 5411 | }
      | ^
In file included from external/com_google_zetasql/zetasql/analyzer/expr_resolver_helper.h:29:
In constructor 'zetasql::ResolvedImportStmt::ResolvedImportStmt(ImportKind, const std::vector<std::__cxx11::basic_string<char> >&, const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&, std::vector<std::unique_ptr<const zetasql::ResolvedOption> >, zetasql::ResolvedNode::ConstructorOverload)',
    inlined from 'std::unique_ptr<zetasql::ResolvedImportStmt> zetasql::MakeResolvedImportStmt(ResolvedImportStmt::ImportKind, const std::vector<std::__cxx11::basic_string<char> >&, const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&, std::vector<std::unique_ptr<const ResolvedOption> >)' at bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/resolved_ast/resolved_ast.h:35055:44,
    inlined from 'absl::lts_20230802::Status zetasql::Resolver::ResolveImportStatement(const zetasql::ASTImportStatement*, std::unique_ptr<zetasql::ResolvedStatement>*)' at external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:5785:29:
bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/resolved_ast/resolved_ast.h:35014:7: warning: 'kind' may be used uninitialized [-Wmaybe-uninitialized]
35014 |       import_kind_(import_kind),
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveImportStatement(const zetasql::ASTImportStatement*, std::unique_ptr<zetasql::ResolvedStatement>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_stmt.cc:5705:34: note: 'kind' was declared here
 5705 |   ResolvedImportStmt::ImportKind kind;
      |                                  ^~~~
1705857014.657975887: src/main/tools/linux-sandbox-pid1.cc:507: wait returned pid=2, status=0x00
1705857014.658046727: src/main/tools/linux-sandbox-pid1.cc:525: child exited normally with code 0
1705857014.658314698: src/main/tools/linux-sandbox.cc:233: child exited normally with code 0
