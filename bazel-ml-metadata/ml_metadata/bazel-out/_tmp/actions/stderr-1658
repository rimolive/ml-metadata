1705851806.285513490: src/main/tools/linux-sandbox.cc:152: calling pipe(2)...
1705851806.285575060: src/main/tools/linux-sandbox.cc:171: calling clone(2)...
1705851806.286045518: src/main/tools/linux-sandbox.cc:180: linux-sandbox-pid1 has PID 337101
1705851806.286106086: src/main/tools/linux-sandbox-pid1.cc:650: Pid1Main started
1705851806.286283585: src/main/tools/linux-sandbox.cc:197: done manipulating pipes
1705851806.286433544: src/main/tools/linux-sandbox-pid1.cc:269: working dir: /home/rmartine/.cache/bazel/_bazel_rmartine/4e0fce1d7533a173497e9e40c7131c44/sandbox/linux-sandbox/3086/execroot/ml_metadata
1705851806.286477222: src/main/tools/linux-sandbox-pid1.cc:301: writable: /home/rmartine/.cache/bazel/_bazel_rmartine/4e0fce1d7533a173497e9e40c7131c44/sandbox/linux-sandbox/3086/execroot/ml_metadata
1705851806.286501225: src/main/tools/linux-sandbox-pid1.cc:301: writable: /tmp
1705851806.286516775: src/main/tools/linux-sandbox-pid1.cc:301: writable: /dev/shm
1705851806.286653792: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /
1705851806.286670268: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /dev
1705851806.286683670: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /dev/shm
1705851806.286697305: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /dev/pts
1705851806.286709938: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /dev/hugepages
1705851806.286721930: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /dev/mqueue
1705851806.286733486: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys
1705851806.286745275: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/kernel/security
1705851806.286761218: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/cgroup
1705851806.286774477: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/pstore
1705851806.286788148: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/firmware/efi/efivars
1705851806.286847533: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/bpf
1705851806.286861635: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/kernel/config
1705851806.286879949: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/selinux
1705851806.286890744: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/kernel/debug
1705851806.286903077: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/kernel/tracing
1705851806.286916797: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /sys/fs/fuse/connections
1705851806.286931236: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /proc
1705851806.286944504: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /proc/sys/fs/binfmt_misc
1705851806.286961239: src/main/tools/linux-sandbox-pid1.cc:391: remount(nullptr, /proc/sys/fs/binfmt_misc, nullptr, 2101281, nullptr) failure (Operation not permitted) ignored
1705851806.286979789: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /proc/sys/fs/binfmt_misc
1705851806.286992991: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run
1705851806.287005189: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run/user/1000
1705851806.287019730: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run/user/1000/gvfs
1705851806.287087900: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run/user/1000/doc
1705851806.287101905: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /run/media/rmartine/TOSHIBA EXT
1705851806.287118274: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /home
1705851806.287129619: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /boot
1705851806.287140960: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /boot/efi
1705851806.287154007: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /tmp
1705851806.287165641: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /var/lib/nfs/rpc_pipefs
1705851806.287184702: src/main/tools/linux-sandbox-pid1.cc:371: remount ro: /mnt/WdMyCloud
1705851806.287213861: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /home/rmartine/.cache/bazel/_bazel_rmartine/4e0fce1d7533a173497e9e40c7131c44/sandbox/linux-sandbox/3086/execroot/ml_metadata
1705851806.287273374: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /home/rmartine/.cache/bazel/_bazel_rmartine/4e0fce1d7533a173497e9e40c7131c44/sandbox/linux-sandbox/3086/execroot/ml_metadata
1705851806.287294841: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /tmp
1705851806.287306139: src/main/tools/linux-sandbox-pid1.cc:371: remount rw: /dev/shm
1705851806.287406389: src/main/tools/linux-sandbox-pid1.cc:460: calling fork...
1705851806.287658421: src/main/tools/linux-sandbox-pid1.cc:490: child started with PID 2
In file included from external/com_google_zetasql/zetasql/parser/parse_tree.h:27,
                 from external/com_google_zetasql/zetasql/analyzer/analytic_function_resolver.h:25,
                 from external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:38:
external/com_google_zetasql/zetasql/parser/ast_node.h: In member function 'int zetasql::ASTNode::find_child_index(zetasql::ASTNodeKind) const':
external/com_google_zetasql/zetasql/parser/ast_node.h:105:23: warning: comparison of integer expressions of different signedness: 'int' and 'absl::lts_20230802::InlinedVector<zetasql::ASTNode*, 4>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
  105 |     for (int i = 0; i < children_.size(); i++) {
      |                     ~~^~~~~~~~~~~~~~~~~~
In file included from bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/parse_tree_generated.h:27,
                 from external/com_google_zetasql/zetasql/parser/parse_tree.h:28:
external/com_google_zetasql/zetasql/public/id_string.h: In member function 'const zetasql::IdString::Shared* zetasql::IdStringPool::MakeShared(absl::lts_20230802::string_view)':
external/com_google_zetasql/zetasql/public/id_string.h:462:23: warning: comparison of integer expressions of different signedness: 'int' and 'std::basic_string_view<char>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
  462 |     for (int i = 0; i < str.size(); ++i) {
      |                     ~~^~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/public/types/type_factory.h:35,
                 from external/com_google_zetasql/zetasql/public/type.h:26,
                 from external/com_google_zetasql/zetasql/analyzer/analytic_function_resolver.h:27:
external/com_google_zetasql/zetasql/public/types/proto_type.h: In member function 'absl::lts_20230802::Status zetasql::ProtoType::GetFieldTypeByTagNumber(int, zetasql::TypeFactory*, const zetasql::Type**, std::string*) const':
external/com_google_zetasql/zetasql/public/types/proto_type.h:117:35: warning: 'absl::lts_20230802::Status zetasql::ProtoType::GetFieldTypeByTagNumber(int, zetasql::TypeFactory*, bool, const zetasql::Type**, std::string*) const' is deprecated: Use overload without 'use_obsolete_timestamp' argument. [-Wdeprecated-declarations]
  117 |     return GetFieldTypeByTagNumber(
      |            ~~~~~~~~~~~~~~~~~~~~~~~^
  118 |         number, factory, /*use_obsolete_timestamp=*/false, type, name);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h:130:16: note: declared here
  130 |   absl::Status GetFieldTypeByTagNumber(int number, TypeFactory* factory,
      |                ^~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h: In member function 'absl::lts_20230802::Status zetasql::ProtoType::GetFieldTypeByName(const std::string&, zetasql::TypeFactory*, const zetasql::Type**, int*) const':
external/com_google_zetasql/zetasql/public/types/proto_type.h:123:30: warning: 'absl::lts_20230802::Status zetasql::ProtoType::GetFieldTypeByName(const std::string&, zetasql::TypeFactory*, bool, const zetasql::Type**, int*) const' is deprecated: Use overload without 'use_obsolete_timestamp' argument. [-Wdeprecated-declarations]
  123 |     return GetFieldTypeByName(name, factory,
      |            ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
  124 |                               /*use_obsolete_timestamp=*/false, type, number);
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h:135:16: note: declared here
  135 |   absl::Status GetFieldTypeByName(const std::string& name, TypeFactory* factory,
      |                ^~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h: In static member function 'static absl::lts_20230802::Status zetasql::ProtoType::FieldDescriptorToTypeKindBase(bool, const google::protobuf::FieldDescriptor*, zetasql::TypeKind*)':
external/com_google_zetasql/zetasql/public/types/proto_type.h:172:42: warning: 'static absl::lts_20230802::Status zetasql::ProtoType::GetTypeKindFromFieldDescriptor(const google::protobuf::FieldDescriptor*, bool, bool, zetasql::TypeKind*)' is deprecated: Use overload without 'use_obsolete_timestamp' argument. [-Wdeprecated-declarations]
  172 |     return GetTypeKindFromFieldDescriptor(field, ignore_annotations,
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
  173 |                                           /*use_obsolete_timestamp=*/false,
      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  174 |                                           kind);
      |                                           ~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h:315:23: note: declared here
  315 |   static absl::Status GetTypeKindFromFieldDescriptor(
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h: In static member function 'static absl::lts_20230802::Status zetasql::ProtoType::FieldDescriptorToTypeKindBase(const google::protobuf::FieldDescriptor*, bool, zetasql::TypeKind*)':
external/com_google_zetasql/zetasql/public/types/proto_type.h:188:42: warning: 'static absl::lts_20230802::Status zetasql::ProtoType::GetTypeKindFromFieldDescriptor(const google::protobuf::FieldDescriptor*, bool, bool, zetasql::TypeKind*)' is deprecated: Use overload without 'use_obsolete_timestamp' argument. [-Wdeprecated-declarations]
  188 |     return GetTypeKindFromFieldDescriptor(field,
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
  189 |                                           /*ignore_format_annotations=*/false,
      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  190 |                                           use_obsolete_timestamp, kind);
      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/proto_type.h:315:23: note: declared here
  315 |   static absl::Status GetTypeKindFromFieldDescriptor(
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/type_factory.h: In member function 'absl::lts_20230802::Status zetasql::TypeFactory::MakeUnwrappedTypeFromProto(const google::protobuf::Descriptor*, const zetasql::Type**)':
external/com_google_zetasql/zetasql/public/types/type_factory.h:272:38: warning: 'absl::lts_20230802::Status zetasql::TypeFactory::MakeUnwrappedTypeFromProto(const google::protobuf::Descriptor*, bool, const zetasql::Type**)' is deprecated: Obsolete timestamp types are deprecated [-Wdeprecated-declarations]
  272 |     return MakeUnwrappedTypeFromProto(message, /*use_obsolete_timestamp=*/false,
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  273 |                                       result_type);
      |                                       ~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/type_factory.h:278:16: note: declared here
  278 |   absl::Status MakeUnwrappedTypeFromProto(const google::protobuf::Descriptor* message,
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/type_factory.h: In member function 'absl::lts_20230802::Status zetasql::TypeFactory::UnwrapTypeIfAnnotatedProto(const zetasql::Type*, const zetasql::Type**)':
external/com_google_zetasql/zetasql/public/types/type_factory.h:286:38: warning: 'absl::lts_20230802::Status zetasql::TypeFactory::UnwrapTypeIfAnnotatedProto(const zetasql::Type*, bool, const zetasql::Type**)' is deprecated: Obsolete timestamp types are deprecated [-Wdeprecated-declarations]
  286 |     return UnwrapTypeIfAnnotatedProto(
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~^
  287 |         input_type, /*use_obsolete_timestamp=*/false, result_type);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/types/type_factory.h:292:16: note: declared here
  292 |   absl::Status UnwrapTypeIfAnnotatedProto(const Type* input_type,
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/public/value.h:1110,
                 from external/com_google_zetasql/zetasql/public/evaluator_table_iterator.h:26,
                 from external/com_google_zetasql/zetasql/public/catalog.h:28,
                 from bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/resolved_ast/resolved_ast.h:26,
                 from external/com_google_zetasql/zetasql/analyzer/analytic_function_resolver.h:28:
external/com_google_zetasql/zetasql/public/value_inl.h: In constructor 'constexpr zetasql::Value::Metadata::Metadata(zetasql::TypeKind, bool, bool, int32_t)':
external/com_google_zetasql/zetasql/public/value_inl.h:788:11: warning: call to non-'constexpr' function 'zetasql::Value::Metadata::Content* zetasql::Value::Metadata::content()' [-Winvalid-constexpr]
  788 |   *content() = Content(kind, is_null, preserves_order, value_extended_content);
      |    ~~~~~~~^~
external/com_google_zetasql/zetasql/public/value.h:962:14: note: 'zetasql::Value::Metadata::Content* zetasql::Value::Metadata::content()' declared here
  962 |     Content* content();
      |              ^~~~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::Struct(const zetasql::StructType*, absl::lts_20230802::Span<const zetasql::Value>)':
external/com_google_zetasql/zetasql/public/value_inl.h:850:23: warning: 'static zetasql::Value zetasql::Value::Struct(const zetasql::StructType*, absl::lts_20230802::Span<const zetasql::Value>)' is deprecated: Please use MakeStruct() instead. [-Wdeprecated-declarations]
  850 |   return Value::Struct(type, values);
      |          ~~~~~~~~~~~~~^~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:581:16: note: declared here
  581 |   static Value Struct(const StructType* type, absl::Span<const Value> values) {
      |                ^~~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::UnsafeStruct(const zetasql::StructType*, std::vector<zetasql::Value>&&)':
external/com_google_zetasql/zetasql/public/value_inl.h:853:29: warning: 'static zetasql::Value zetasql::Value::UnsafeStruct(const zetasql::StructType*, std::vector<zetasql::Value>&&)' is deprecated: Please use MakeStructFromValidatedInputs() instead. [-Wdeprecated-declarations]
  853 |   return Value::UnsafeStruct(type, std::move(values));
      |          ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:592:16: note: declared here
  592 |   static Value UnsafeStruct(const StructType* type,
      |                ^~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::EmptyArray(const zetasql::ArrayType*)':
external/com_google_zetasql/zetasql/public/value_inl.h:865:22: warning: 'static zetasql::Value zetasql::Value::Array(const zetasql::ArrayType*, absl::lts_20230802::Span<const zetasql::Value>)' is deprecated: Please use MakeArray() instead. [-Wdeprecated-declarations]
  865 |   return Value::Array(type, {});
      |          ~~~~~~~~~~~~^~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:632:16: note: declared here
  632 |   static Value Array(const ArrayType* array_type,
      |                ^~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::Array(const zetasql::ArrayType*, absl::lts_20230802::Span<const zetasql::Value>)':
external/com_google_zetasql/zetasql/public/value_inl.h:868:22: warning: 'static zetasql::Value zetasql::Value::Array(const zetasql::ArrayType*, absl::lts_20230802::Span<const zetasql::Value>)' is deprecated: Please use MakeArray() instead. [-Wdeprecated-declarations]
  868 |   return Value::Array(type, values);
      |          ~~~~~~~~~~~~^~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:632:16: note: declared here
  632 |   static Value Array(const ArrayType* array_type,
      |                ^~~~~
external/com_google_zetasql/zetasql/public/value_inl.h: In function 'zetasql::Value zetasql::values::UnsafeArray(const zetasql::ArrayType*, std::vector<zetasql::Value>&&)':
external/com_google_zetasql/zetasql/public/value_inl.h:871:28: warning: 'static zetasql::Value zetasql::Value::UnsafeArray(const zetasql::ArrayType*, std::vector<zetasql::Value>&&)' is deprecated: Please use MakeArrayFromValidatedInputs() instead. [-Wdeprecated-declarations]
  871 |   return Value::UnsafeArray(type, std::move(values));
      |          ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:644:16: note: declared here
  644 |   static Value UnsafeArray(const ArrayType* array_type,
      |                ^~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/analyzer/resolver.h:39,
                 from external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:47:
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h: In member function 'void zetasql::AnalyzerOutputProperties::MarkRelevant(zetasql::ResolvedASTRewrite)':
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:50:7: warning: 'zetasql::AnalyzerOutputProperties::has_flatten' is deprecated: Client code should consider this struct internal. It doesn't mean what you think it means. [-Wdeprecated-declarations]
   50 |       has_flatten = true;
      |       ^~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:33:8: note: declared here
   33 |   bool has_flatten = false;  // NOLINT
      |        ^~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:50:7: warning: 'zetasql::AnalyzerOutputProperties::has_flatten' is deprecated: Client code should consider this struct internal. It doesn't mean what you think it means. [-Wdeprecated-declarations]
   50 |       has_flatten = true;
      |       ^~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:33:8: note: declared here
   33 |   bool has_flatten = false;  // NOLINT
      |        ^~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:53:7: warning: 'zetasql::AnalyzerOutputProperties::has_anonymization' is deprecated: Client code should consider this struct internal. It doesn't mean what you think it means. [-Wdeprecated-declarations]
   53 |       has_anonymization = true;
      |       ^~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:39:8: note: declared here
   39 |   bool has_anonymization = false;  // NOLINT
      |        ^~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:53:7: warning: 'zetasql::AnalyzerOutputProperties::has_anonymization' is deprecated: Client code should consider this struct internal. It doesn't mean what you think it means. [-Wdeprecated-declarations]
   53 |       has_anonymization = true;
      |       ^~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/analyzer_output_properties.h:39:8: note: declared here
   39 |   bool has_anonymization = false;  // NOLINT
      |        ^~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'void zetasql::Resolver::AddColumnsForOrderByExprs(zetasql::IdString, std::vector<zetasql::OrderByItemInfo>*, std::vector<std::unique_ptr<const zetasql::ResolvedComputedColumn> >*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:833:53: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::OrderByItemInfo>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
  833 |   for (int order_by_item_idx = 0; order_by_item_idx < order_by_info->size();
      |                                   ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveOrderByItems(const zetasql::ASTOrderBy*, const std::vector<zetasql::ResolvedColumn>&, const std::vector<zetasql::OrderByItemInfo>&, std::vector<std::unique_ptr<const zetasql::ResolvedOrderByItem> >*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:943:21: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::OrderByItemInfo>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
  943 |   for (int i = 0; i < order_by_info.size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:949:39: warning: comparison of integer expressions of different signedness: 'const int64_t' {aka 'const long int'} and 'std::vector<zetasql::ResolvedColumn>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
  949 |           item_info.select_list_index >= output_column_list.size()) {
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveModelTransformSelectList(const zetasql::NameScope*, const zetasql::ASTSelectList*, const std::shared_ptr<const zetasql::NameList>&, std::vector<std::unique_ptr<const zetasql::ResolvedComputedColumn> >*, std::vector<std::unique_ptr<const zetasql::ResolvedOutputColumn> >*, std::vector<std::unique_ptr<const zetasql::ResolvedAnalyticFunctionGroup> >*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:1467:21: warning: comparison of integer expressions of different signedness: 'int' and 'absl::lts_20230802::Span<const zetasql::ASTSelectColumn* const>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 1467 |   for (int i = 0; i < select_list->columns().size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:1481:10: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<std::unique_ptr<zetasql::SelectColumnState> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 1481 |        i <
      |        ~~^
 1482 |        query_info.select_column_state_list()->select_column_state_list().size();
      |        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::AnalyzeSelectColumnsToPrecomputeBeforeAggregation(zetasql::QueryResolutionInfo*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:1681:25: warning: comparison of integer expressions of different signedness: 'int' and 'size_t' {aka 'long unsigned int'} [-Wsign-compare]
 1681 |   for (int idx = 0; idx < select_column_state_list->Size(); ++idx) {
      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::AddNameListToSelectList(const zetasql::ASTExpression*, const std::shared_ptr<const zetasql::NameList>&, const zetasql::CorrelatedColumnsSetList&, bool, zetasql::SelectColumnStateList*, zetasql::ColumnReplacements*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:2070:24: warning: comparison of integer expressions of different signedness: 'const int' and 'size_t' {aka 'long unsigned int'} [-Wsign-compare]
 2070 |   if (orig_num_columns == select_column_state_list->Size()) {
      |       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveSelectDotStar(const zetasql::ASTExpression*, const zetasql::NameScope*, zetasql::QueryResolutionInfo*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:2592:24: warning: comparison of integer expressions of different signedness: 'const int' and 'size_t' {aka 'long unsigned int'} [-Wsign-compare]
 2592 |   if (orig_num_columns ==
      |       ~~~~~~~~~~~~~~~~~^~
 2593 |       query_resolution_info->select_column_state_list()->Size()) {
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveSelectListExprsFirstPass(const zetasql::ASTSelectList*, const zetasql::NameScope*, bool, const std::shared_ptr<const zetasql::NameList>&, zetasql::QueryResolutionInfo*, const zetasql::Type*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:2775:21: warning: comparison of integer expressions of different signedness: 'int' and 'absl::lts_20230802::Span<const zetasql::ASTSelectColumn* const>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 2775 |   for (int i = 0; i < select_list->columns().size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::SetOperationResolver::Resolve(const zetasql::NameScope*, const zetasql::Type*, std::unique_ptr<const zetasql::ResolvedScan>*, std::shared_ptr<const zetasql::NameList>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:3627:25: warning: comparison of integer expressions of different signedness: 'int' and 'absl::lts_20230802::Span<const zetasql::ASTQueryExpression* const>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 3627 |   for (int idx = 0; idx < set_operation_->inputs().size(); ++idx) {
      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::SetOperationResolver::ResolveRecursive(const zetasql::NameScope*, const std::vector<zetasql::IdString>&, const zetasql::IdString&, std::unique_ptr<const zetasql::ResolvedScan>*, std::shared_ptr<const zetasql::NameList>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4010:57: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<std::vector<zetasql::InputArgumentType> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 4010 |   if (resolved_recursive_input.name_list->num_columns() !=
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
 4011 |       column_type_lists.size()) {
      |       ~~~~~~~~~~~~~~~~~~~~~~~~                           
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4032:21: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::ResolvedColumn>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 4032 |   for (int i = 0; i < column_list.size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4034:39: warning: 'bool zetasql::Coercer::CoercesTo(const zetasql::InputArgumentType&, const zetasql::Type*, bool, zetasql::SignatureMatchResult*) const' is deprecated: use CoercesTo(from_argument, to_type, is_explicit, result, extended_conversion) instead [-Wdeprecated-declarations]
 4034 |     if (!resolver_->coercer_.CoercesTo(recursive_column_type_lists.at(i).at(0),
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 4035 |                                        column_list.at(i).type(),
      |                                        ~~~~~~~~~~~~~~~~~~~~~~~~~
 4036 |                                        /*is_explicit=*/false, &result)) {
      |                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/analyzer/function_signature_matcher.h:25,
                 from external/com_google_zetasql/zetasql/analyzer/function_resolver.h:26,
                 from external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:41:
external/com_google_zetasql/zetasql/public/coercer.h:116:8: note: declared here
  116 |   bool CoercesTo(const InputArgumentType& from_argument, const Type* to_type,
      |        ^~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::StatusOr<std::vector<std::vector<zetasql::InputArgumentType> > > zetasql::Resolver::SetOperationResolver::BuildColumnTypeLists(absl::lts_20230802::Span<ResolvedInputResult>) const':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4129:25: warning: comparison of integer expressions of different signedness: 'int' and 'absl::lts_20230802::Span<zetasql::Resolver::SetOperationResolver::ResolvedInputResult>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 4129 |   for (int idx = 0; idx < resolved_inputs.size(); ++idx) {
      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4133:38: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<std::vector<zetasql::InputArgumentType> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 4133 |     if (curr_name_list.num_columns() != column_type_lists.size()) {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::StatusOr<std::vector<zetasql::ResolvedColumn> > zetasql::Resolver::SetOperationResolver::BuildColumnLists(const std::vector<std::vector<zetasql::InputArgumentType> >&, const zetasql::NameList&) const':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4171:21: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<std::vector<zetasql::InputArgumentType> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 4171 |   for (int i = 0; i < column_type_lists.size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::SetOperationResolver::CreateWrapperScansWithCasts(const zetasql::ResolvedColumnList&, absl::lts_20230802::Span<std::unique_ptr<zetasql::ResolvedSetOperationItem> >) const':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4221:25: warning: comparison of integer expressions of different signedness: 'int' and 'absl::lts_20230802::Span<std::unique_ptr<zetasql::ResolvedSetOperationItem> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 4221 |   for (int idx = 0; idx < resolved_inputs.size(); ++idx) {
      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::StatusOr<std::shared_ptr<const zetasql::NameList> > zetasql::Resolver::SetOperationResolver::BuildFinalNameList(const zetasql::NameList&, const zetasql::ResolvedColumnList&) const':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4244:21: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::ResolvedColumn>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 4244 |   for (int i = 0; i < final_column_list.size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/base/ret_check.h:47,
                 from external/com_google_zetasql/zetasql/public/parse_location.h:32,
                 from external/com_google_zetasql/zetasql/parser/ast_node.h:31:
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ValidateParameterOrLiteralAndCoerceToInt64IfNeeded(const char*, const zetasql::ASTNode*, std::unique_ptr<const zetasql::ResolvedExpr>*) const':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4298:43: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 4298 |   ZETASQL_RETURN_IF_ERROR(CoerceExprToType(ast_location, type_factory_->get_int64(),
      |                           ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 4299 |                                    kExplicitCoercion, expr));
      |                                    ~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:259:16: note: declared here
  259 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In function 'const zetasql::ASTNode* zetasql::GetASTNodeForColumn(const ASTNode*, int, int)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4408:39: warning: comparison of integer expressions of different signedness: 'absl::lts_20230802::Span<const zetasql::ASTSelectColumn* const>::size_type' {aka 'long unsigned int'} and 'int' [-Wsign-compare]
 4408 |     if (select_list->columns().size() == num_columns) {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::CreateWrapperScanWithCasts(const zetasql::ASTQueryExpression*, const zetasql::ResolvedColumnList&, zetasql::IdString, std::unique_ptr<const zetasql::ResolvedScan>*, zetasql::ResolvedColumnList*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4427:21: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::ResolvedColumn>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 4427 |   for (int i = 0; i < target_column_list.size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4437:23: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::ResolvedColumn>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 4437 |     for (int i = 0; i < target_column_list.size(); ++i) {
      |                     ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4453:76: warning: 'absl::lts_20230802::Status zetasql::FunctionResolver::AddCastOrConvertLiteral(const zetasql::ASTNode*, const zetasql::Type*, std::unique_ptr<const zetasql::ResolvedExpr>, std::unique_ptr<const zetasql::ResolvedExpr>, const zetasql::TypeParameters&, const zetasql::ResolvedScan*, bool, bool, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use AddCastOrConvertLiteral function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 4453 |         ZETASQL_RETURN_IF_ERROR(function_resolver_->AddCastOrConvertLiteral(
      |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
 4454 |             ast_location, target_type, /*format=*/nullptr,
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                  
 4455 |             /*time_zone=*/nullptr, TypeParameters(), scan->get(),
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 4456 |             /*set_has_explicit_type=*/false, /*return_null_on_error=*/false,
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 4457 |             &casted_expr));
      |             ~~~~~~~~~~~~~                                                   
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/function_resolver.h:174:16: note: declared here
  174 |   absl::Status AddCastOrConvertLiteral(
      |                ^~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In function 'std::optional<zetasql::Value> zetasql::GetStructPivotValue(const ResolvedMakeStruct*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4788:29: warning: 'static zetasql::Value zetasql::Value::UnsafeStruct(const zetasql::StructType*, std::vector<zetasql::Value>&&)' is deprecated: Please use MakeStructFromValidatedInputs() instead. [-Wdeprecated-declarations]
 4788 |   return Value::UnsafeStruct(struct_type, std::move(fields));
      |          ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/public/value.h:592:16: note: declared here
  592 |   static Value UnsafeStruct(const StructType* type,
      |                ^~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveInClauseInPivotClause(const zetasql::ASTPivotValueList*, const zetasql::NameScope*, const zetasql::Type*, std::vector<std::unique_ptr<const zetasql::ResolvedExpr> >*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4955:45: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, absl::lts_20230802::string_view, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 4955 |     ZETASQL_RETURN_IF_ERROR(CoerceExprToType(ast_pivot_value->value(), for_expr_type,
      |                             ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 4956 |                                      kImplicitCoercion,
      |                                      ~~~~~~~~~~~~~~~~~~
 4957 |                                      "PIVOT IN list item must be type $0 to "
      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 4958 |                                      "match the PIVOT FOR expression; found $1",
      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 4959 |                                      &resolved_in_expr));
      |                                      ~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:243:16: note: declared here
  243 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolvePivotClause(std::unique_ptr<const zetasql::ResolvedScan>, std::shared_ptr<const zetasql::NameList>, const zetasql::NameScope*, bool, const zetasql::ASTPivotClause*, std::unique_ptr<const zetasql::ResolvedScan>*, std::shared_ptr<const zetasql::NameList>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:5067:21: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<std::unique_ptr<const zetasql::ResolvedExpr> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 5067 |   for (int i = 0; i < resolved_in_exprs.size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:5068:23: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<std::unique_ptr<const zetasql::ResolvedExpr> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 5068 |     for (int j = 0; j < pivot_expr_columns.size(); ++j) {
      |                     ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveUnpivotInClause(const zetasql::ASTUnpivotInItemList*, std::vector<std::unique_ptr<const zetasql::ResolvedUnpivotArg> >*, const std::vector<zetasql::ResolvedColumn>*, absl::lts_20230802::flat_hash_set<zetasql::ResolvedColumn>*, std::vector<const zetasql::Type*>*, const zetasql::Type**, std::vector<std::unique_ptr<const zetasql::ResolvedLiteral> >*, const zetasql::ASTUnpivotClause*, const zetasql::NameScope*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:5187:76: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTExpression]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 5187 |       const ASTExpression* in_column_expr = in_column->GetAs<ASTExpression>();
      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveUnpivotClause(std::unique_ptr<const zetasql::ResolvedScan>, std::shared_ptr<const zetasql::NameList>, const zetasql::NameScope*, const zetasql::ASTUnpivotClause*, std::unique_ptr<const zetasql::ResolvedScan>*, std::shared_ptr<const zetasql::NameList>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:5371:21: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::ResolvedColumn>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 5371 |   for (int i = 0; i < unpivot_value_columns.size(); i++) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveNamedSubqueryRef(const zetasql::ASTPathExpression*, const zetasql::ASTHint*, std::unique_ptr<const zetasql::ResolvedScan>*, std::shared_ptr<const zetasql::NameList>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:5832:21: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::ResolvedColumn>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 5832 |   for (int i = 0; i < named_subquery->column_list.size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveTVF(const zetasql::ASTTVF*, const zetasql::NameScope*, const zetasql::NameScope*, std::unique_ptr<const zetasql::ResolvedScan>*, std::shared_ptr<const zetasql::NameList>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6564:33: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::ResolvedTVFArg>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 6564 |   for (int arg_idx = 0; arg_idx < resolved_tvf_args.size(); ++arg_idx) {
      |                         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6572:43: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTNamedArgument]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 6572 |         ast = ast->GetAs<ASTNamedArgument>()->expr();
      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6576:27: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 6576 |           CoerceExprToType(ast, target_type, kExplicitCoercion, &expr));
      |           ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:259:16: note: declared here
  259 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6596:21: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::ResolvedTVFArg>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 6596 |   for (int i = 0; i < resolved_tvf_args.size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6748:34: warning: 'std::unique_ptr<zetasql::ResolvedFunctionArgument> zetasql::MakeResolvedTVFArgument(std::unique_ptr<const ResolvedExpr>, std::unique_ptr<const ResolvedScan>, std::unique_ptr<const ResolvedModel>, std::unique_ptr<const ResolvedConnection>, std::unique_ptr<const ResolvedDescriptor>, const std::vector<ResolvedColumn>&)' is deprecated: use MakeResolvedFunctionArgument [-Wdeprecated-declarations]
 6748 |           MakeResolvedTVFArgument(std::move(expr), /*scan=*/nullptr,
      |           ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6749 |                                   /*model=*/nullptr, /*connection=*/nullptr,
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6750 |                                   /*descriptor_arg=*/nullptr,
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6751 |                                   /*argument_column_list=*/{})
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/resolved_ast/resolved_ast.h:39599:45: note: declared here
39599 | inline std::unique_ptr<ResolvedTVFArgument> MakeResolvedTVFArgument(
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6759:34: warning: 'std::unique_ptr<zetasql::ResolvedFunctionArgument> zetasql::MakeResolvedTVFArgument(std::unique_ptr<const ResolvedExpr>, std::unique_ptr<const ResolvedScan>, std::unique_ptr<const ResolvedModel>, std::unique_ptr<const ResolvedConnection>, std::unique_ptr<const ResolvedDescriptor>, const std::vector<ResolvedColumn>&)' is deprecated: use MakeResolvedFunctionArgument [-Wdeprecated-declarations]
 6759 |           MakeResolvedTVFArgument(/*expr=*/nullptr, std::move(scan),
      |           ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6760 |                                   /*model=*/nullptr, /*connection=*/nullptr,
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6761 |                                   /*descriptor_arg=*/nullptr,
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6762 |                                   name_list->GetResolvedColumns())
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/resolved_ast/resolved_ast.h:39599:45: note: declared here
39599 | inline std::unique_ptr<ResolvedTVFArgument> MakeResolvedTVFArgument(
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6768:34: warning: 'std::unique_ptr<zetasql::ResolvedFunctionArgument> zetasql::MakeResolvedTVFArgument(std::unique_ptr<const ResolvedExpr>, std::unique_ptr<const ResolvedScan>, std::unique_ptr<const ResolvedModel>, std::unique_ptr<const ResolvedConnection>, std::unique_ptr<const ResolvedDescriptor>, const std::vector<ResolvedColumn>&)' is deprecated: use MakeResolvedFunctionArgument [-Wdeprecated-declarations]
 6768 |           MakeResolvedTVFArgument(/*expr=*/nullptr, /*scan=*/nullptr,
      |           ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6769 |                                   /*model=*/nullptr, std::move(connection),
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6770 |                                   /*descriptor_arg=*/nullptr,
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6771 |                                   /*argument_column_list=*/{})
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/resolved_ast/resolved_ast.h:39599:45: note: declared here
39599 | inline std::unique_ptr<ResolvedTVFArgument> MakeResolvedTVFArgument(
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6777:34: warning: 'std::unique_ptr<zetasql::ResolvedFunctionArgument> zetasql::MakeResolvedTVFArgument(std::unique_ptr<const ResolvedExpr>, std::unique_ptr<const ResolvedScan>, std::unique_ptr<const ResolvedModel>, std::unique_ptr<const ResolvedConnection>, std::unique_ptr<const ResolvedDescriptor>, const std::vector<ResolvedColumn>&)' is deprecated: use MakeResolvedFunctionArgument [-Wdeprecated-declarations]
 6777 |           MakeResolvedTVFArgument(/*expr=*/nullptr, /*scan=*/nullptr,
      |           ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6778 |                                   /*model=*/nullptr, /*connection=*/nullptr,
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6779 |                                   /*descriptor_arg=*/std::move(descriptor),
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6780 |                                   /*argument_column_list=*/{})
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/resolved_ast/resolved_ast.h:39599:45: note: declared here
39599 | inline std::unique_ptr<ResolvedTVFArgument> MakeResolvedTVFArgument(
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6787:34: warning: 'std::unique_ptr<zetasql::ResolvedFunctionArgument> zetasql::MakeResolvedTVFArgument(std::unique_ptr<const ResolvedExpr>, std::unique_ptr<const ResolvedScan>, std::unique_ptr<const ResolvedModel>, std::unique_ptr<const ResolvedConnection>, std::unique_ptr<const ResolvedDescriptor>, const std::vector<ResolvedColumn>&)' is deprecated: use MakeResolvedFunctionArgument [-Wdeprecated-declarations]
 6787 |           MakeResolvedTVFArgument(/*expr=*/nullptr, /*scan=*/nullptr,
      |           ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6788 |                                   std::move(model), /*connection=*/nullptr,
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6789 |                                   /*descriptor_arg=*/nullptr,
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6790 |                                   /*argument_column_list=*/{})
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/resolved_ast/resolved_ast.h:39599:45: note: declared here
39599 | inline std::unique_ptr<ResolvedTVFArgument> MakeResolvedTVFArgument(
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::StatusOr<int> zetasql::Resolver::MatchTVFSignature(const zetasql::ASTTVF*, const zetasql::TableValuedFunction*, const zetasql::NameScope*, const zetasql::NameScope*, const zetasql::FunctionResolver&, std::unique_ptr<zetasql::FunctionSignature>*, std::vector<const zetasql::ASTNode*>*, std::vector<zetasql::ResolvedTVFArg>*, zetasql::SignatureMatchResult*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6913:78: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTNamedArgument]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 6913 |         const ASTNamedArgument* named_arg = ast_expr->GetAs<ASTNamedArgument>();
      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6919:27: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::FunctionArgumentType>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 6919 |         for (int j = 0; j < function_signature.arguments().size(); ++j) {
      |                         ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6937:19: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::FunctionArgumentType>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 6937 |         arg_index < function_signature.arguments().size()
      |         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6957:15: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<zetasql::FunctionArgumentType>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 6957 |             i < function_signature.arguments().size()
      |             ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::StatusOr<zetasql::ResolvedTVFArg> zetasql::Resolver::ResolveTVFArg(const zetasql::ASTTVFArgument*, const zetasql::NameScope*, const zetasql::NameScope*, const zetasql::FunctionArgumentType*, const zetasql::TableValuedFunction*, int, std::unordered_map<int, std::unique_ptr<const zetasql::NameScope> >*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:7136:51: warning: 'const NodeType* zetasql::ASTNode::GetAs() const [with NodeType = zetasql::ASTNamedArgument]' is deprecated: Use GetAsOrDie or GetAsOrNull [-Wdeprecated-declarations]
 7136 |       ast_expr = ast_expr->GetAs<ASTNamedArgument>()->expr();
      |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
external/com_google_zetasql/zetasql/parser/ast_node.h:124:19: note: declared here
  124 |   const NodeType* GetAs() const {
      |                   ^~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::FinishResolvingDescriptor(const zetasql::ASTTVFArgument*, const std::unique_ptr<const zetasql::NameScope>&, int, std::unique_ptr<const zetasql::ResolvedDescriptor>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:7925:10: warning: comparison of integer expressions of different signedness: 'int' and 'std::vector<std::__cxx11::basic_string<char> >::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 7925 |        i < resolved_descriptor->get()->descriptor_column_name_list().size();
      |        ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveForSystemTimeExpr(const zetasql::ASTForSystemTime*, std::unique_ptr<const zetasql::ResolvedExpr>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:8165:21: warning: 'absl::lts_20230802::Status zetasql::Resolver::CoerceExprToType(const zetasql::ASTNode*, const zetasql::Type*, CoercionMode, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use CoerceExprToType function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 8165 |     CoerceExprToType(for_system_time, type_factory_->get_timestamp(),
      |     ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 8166 |                      kExplicitCoercion, resolved)
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver.h:259:16: note: declared here
  259 |   absl::Status CoerceExprToType(
      |                ^~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::CoerceQueryStatementResultToTypes(const zetasql::ASTNode*, absl::lts_20230802::Span<const zetasql::Type* const>, std::unique_ptr<const zetasql::ResolvedScan>*, std::shared_ptr<const zetasql::NameList>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:8213:21: warning: comparison of integer expressions of different signedness: 'int' and 'absl::lts_20230802::Span<const zetasql::Type* const>::size_type' {aka 'long unsigned int'} [-Wsign-compare]
 8213 |   for (int i = 0; i < types.size(); ++i) {
      |                   ~~^~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:8269:74: warning: 'absl::lts_20230802::Status zetasql::FunctionResolver::AddCastOrConvertLiteral(const zetasql::ASTNode*, const zetasql::Type*, std::unique_ptr<const zetasql::ResolvedExpr>, std::unique_ptr<const zetasql::ResolvedExpr>, const zetasql::TypeParameters&, const zetasql::ResolvedScan*, bool, bool, std::unique_ptr<const zetasql::ResolvedExpr>*) const' is deprecated: Use AddCastOrConvertLiteral function with <annotated_target_type> argument. [-Wdeprecated-declarations]
 8269 |       ZETASQL_RETURN_IF_ERROR(function_resolver_->AddCastOrConvertLiteral(
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
 8270 |           ast_location, target_type, /*format=*/nullptr,
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                  
 8271 |           /*time_zone=*/nullptr, TypeParameters(), &**scan,
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
 8272 |           /* set_has_explicit_type =*/false,
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                              
 8273 |           /* return_null_on_error =*/false, &casted_expr));
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                 
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/function_resolver.h:174:16: note: declared here
  174 |   absl::Status AddCastOrConvertLiteral(
      |                ^~~~~~~~~~~~~~~~~~~~~~~
In file included from external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:36:
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_EQImpl(const T1&, const T2&, const char*) [with T1 = long unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/public/numeric_value.h:1462:3:   required from here
external/com_google_zetasql/zetasql/base/logging.h:186:32: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  186 | DEFINE_CHECK_OP_IMPL(Check_EQ, ==)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_LEImpl(const T1&, const T2&, const char*) [with T1 = int; T2 = long unsigned int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/public/parse_resume_location.h:134:5:   required from here
external/com_google_zetasql/zetasql/base/logging.h:188:32: warning: comparison of integer expressions of different signedness: 'const int' and 'const long unsigned int' [-Wsign-compare]
  188 | DEFINE_CHECK_OP_IMPL(Check_LE, <=)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_GTImpl(const T1&, const T2&, const char*) [with T1 = long unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:1233:5:   required from here
external/com_google_zetasql/zetasql/base/logging.h:191:32: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  191 | DEFINE_CHECK_OP_IMPL(Check_GT, >)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_GEImpl(const T1&, const T2&, const char*) [with T1 = long unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:3621:3:   required from here
external/com_google_zetasql/zetasql/base/logging.h:190:32: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  190 | DEFINE_CHECK_OP_IMPL(Check_GE, >=)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_LTImpl(const T1&, const T2&, const char*) [with T1 = int; T2 = long unsigned int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4107:3:   required from here
external/com_google_zetasql/zetasql/base/logging.h:189:32: warning: comparison of integer expressions of different signedness: 'const int' and 'const long unsigned int' [-Wsign-compare]
  189 | DEFINE_CHECK_OP_IMPL(Check_LT, <)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_EQImpl(const T1&, const T2&, const char*) [with T1 = int; T2 = long unsigned int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6631:9:   required from here
external/com_google_zetasql/zetasql/base/logging.h:186:32: warning: comparison of integer expressions of different signedness: 'const int' and 'const long unsigned int' [-Wsign-compare]
  186 | DEFINE_CHECK_OP_IMPL(Check_EQ, ==)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_LEImpl(const T1&, const T2&, const char*) [with T1 = long unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6989:3:   required from here
external/com_google_zetasql/zetasql/base/logging.h:188:32: warning: comparison of integer expressions of different signedness: 'const long unsigned int' and 'const int' [-Wsign-compare]
  188 | DEFINE_CHECK_OP_IMPL(Check_LE, <=)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
In file included from external/com_google_absl/absl/base/macros.h:36,
                 from external/com_google_zetasql/zetasql/base/arena_allocator.h:56,
                 from external/com_google_zetasql/zetasql/parser/ast_node.h:28:
external/com_google_zetasql/zetasql/common/multiprecision_int_impl.h: In instantiation of 'void zetasql::multiprecision_int_impl::ShiftRight(Filler, Word*, int, uint) [with Filler = long unsigned int; Word = long unsigned int; uint = unsigned int]':
external/com_google_zetasql/zetasql/common/multiprecision_int.h:321:42:   required from 'zetasql::FixedUint<kNumBitsPerWord, kNumWords>& zetasql::FixedUint<kNumBitsPerWord, kNumWords>::operator>>=(uint) [with int kNumBitsPerWord = 64; int kNumWords = 3; uint = unsigned int]'
external/com_google_zetasql/zetasql/public/numeric_value.h:1467:23:   required from here
external/com_google_zetasql/zetasql/common/multiprecision_int_impl.h:209:31: warning: comparison of integer expressions of different signedness: 'uint' {aka 'unsigned int'} and 'int' [-Wsign-compare]
  209 |   if (ABSL_PREDICT_FALSE(bits >= num_words * kNumBitsPerWord)) {
external/com_google_absl/absl/base/optimization.h:177:59: note: in definition of macro 'ABSL_PREDICT_FALSE'
  177 | #define ABSL_PREDICT_FALSE(x) (__builtin_expect(false || (x), false))
      |                                                           ^
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_GTImpl(const T1&, const T2&, const char*) [with T1 = unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/common/multiprecision_int_impl.h:197:3:   required from 'void zetasql::multiprecision_int_impl::ShiftRightFast(Word*, int, uint) [with LastWord = long unsigned int; Word = long unsigned int; uint = unsigned int]'
external/com_google_zetasql/zetasql/common/multiprecision_int.h:317:54:   required from 'zetasql::FixedUint<kNumBitsPerWord, kNumWords>& zetasql::FixedUint<kNumBitsPerWord, kNumWords>::operator>>=(uint) [with int kNumBitsPerWord = 64; int kNumWords = 3; uint = unsigned int]'
external/com_google_zetasql/zetasql/public/numeric_value.h:1467:23:   required from here
external/com_google_zetasql/zetasql/base/logging.h:191:32: warning: comparison of integer expressions of different signedness: 'const unsigned int' and 'const int' [-Wsign-compare]
  191 | DEFINE_CHECK_OP_IMPL(Check_GT, >)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/base/logging.h: In instantiation of 'std::string* zetasql_base::Check_LTImpl(const T1&, const T2&, const char*) [with T1 = unsigned int; T2 = int; std::string = std::__cxx11::basic_string<char>]':
external/com_google_zetasql/zetasql/common/multiprecision_int_impl.h:198:3:   required from 'void zetasql::multiprecision_int_impl::ShiftRightFast(Word*, int, uint) [with LastWord = long unsigned int; Word = long unsigned int; uint = unsigned int]'
external/com_google_zetasql/zetasql/common/multiprecision_int.h:317:54:   required from 'zetasql::FixedUint<kNumBitsPerWord, kNumWords>& zetasql::FixedUint<kNumBitsPerWord, kNumWords>::operator>>=(uint) [with int kNumBitsPerWord = 64; int kNumWords = 3; uint = unsigned int]'
external/com_google_zetasql/zetasql/public/numeric_value.h:1467:23:   required from here
external/com_google_zetasql/zetasql/base/logging.h:189:32: warning: comparison of integer expressions of different signedness: 'const unsigned int' and 'const int' [-Wsign-compare]
  189 | DEFINE_CHECK_OP_IMPL(Check_LT, <)
      |                                ^
external/com_google_zetasql/zetasql/base/logging.h:174:12: note: in definition of macro 'DEFINE_CHECK_OP_IMPL'
  174 |     if (v1 op v2) return nullptr;                                        \
      |            ^~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'int* zetasql::Resolver::ValidateRecursiveTermVisitor::GetJoinCountField(zetasql::ResolvedJoinScan::JoinType, bool)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:3794:1: warning: control reaches end of non-void function [-Wreturn-type]
 3794 | }
      | ^
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::ResolveJoin(const zetasql::ASTJoin*, const zetasql::NameScope*, const zetasql::NameScope*, std::unique_ptr<const zetasql::ResolvedScan>*, std::shared_ptr<const zetasql::NameList>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6291:5: warning: 'expect_join_condition' may be used uninitialized [-Wmaybe-uninitialized]
 6291 |     if (!expect_join_condition) {
      |     ^~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6248:8: note: 'expect_join_condition' was declared here
 6248 |   bool expect_join_condition;
      |        ^~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6322:41: warning: 'resolved_join_type' may be used uninitialized [-Wmaybe-uninitialized]
 6322 |     ZETASQL_RETURN_IF_ERROR(ResolveUsing(join->using_clause(), *name_list_lhs,
external/com_google_zetasql/zetasql/base/status_macros.h:61:45: note: in definition of macro 'ZETASQL_RETURN_IF_ERROR'
   61 |           status_macro_internal_adaptor = {(expr), ZETASQL_LOC}) {  \
      |                                             ^~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:6251:30: note: 'resolved_join_type' was declared here
 6251 |   ResolvedJoinScan::JoinType resolved_join_type;
      |                              ^~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc: In member function 'absl::lts_20230802::Status zetasql::Resolver::SetOperationResolver::ResolveRecursive(const zetasql::NameScope*, const std::vector<zetasql::IdString>&, const zetasql::IdString&, std::unique_ptr<const zetasql::ResolvedScan>*, std::shared_ptr<const zetasql::NameList>*)':
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:4084:47: warning: 'recursive_op_type' may be used uninitialized [-Wmaybe-uninitialized]
 4084 |     recursive_scan = MakeResolvedRecursiveScan(
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~^
 4085 |         column_list, recursive_op_type, std::move(non_recursive_operand),
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 4086 |         std::move(resolved_recursive_input.node));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
external/com_google_zetasql/zetasql/analyzer/resolver_query.cc:3935:52: note: 'recursive_op_type' was declared here
 3935 |   ResolvedRecursiveScan::RecursiveSetOperationType recursive_op_type;
      |                                                    ^~~~~~~~~~~~~~~~~
1705851862.258073424: src/main/tools/linux-sandbox-pid1.cc:507: wait returned pid=2, status=0x00
1705851862.258109091: src/main/tools/linux-sandbox-pid1.cc:525: child exited normally with code 0
1705851862.258731690: src/main/tools/linux-sandbox.cc:233: child exited normally with code 0
