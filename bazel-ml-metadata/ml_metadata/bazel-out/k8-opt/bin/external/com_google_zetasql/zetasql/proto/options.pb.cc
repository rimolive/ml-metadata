// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/proto/options.proto

#include "zetasql/proto/options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR ZetaSQLBuiltinFunctionOptionsProto::ZetaSQLBuiltinFunctionOptionsProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.include_function_ids_)*/{}
  , /*decltype(_impl_.exclude_function_ids_)*/{}
  , /*decltype(_impl_.language_options_)*/nullptr} {}
struct ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal() {}
  union {
    ZetaSQLBuiltinFunctionOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal _ZetaSQLBuiltinFunctionOptionsProto_default_instance_;
PROTOBUF_CONSTEXPR LanguageOptionsProto::LanguageOptionsProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enabled_language_features_)*/{}
  , /*decltype(_impl_.supported_statement_kinds_)*/{}
  , /*decltype(_impl_.supported_generic_entity_types_)*/{}
  , /*decltype(_impl_.reserved_keywords_)*/{}
  , /*decltype(_impl_.supported_generic_sub_entity_types_)*/{}
  , /*decltype(_impl_.name_resolution_mode_)*/0
  , /*decltype(_impl_.product_mode_)*/0
  , /*decltype(_impl_.error_on_deprecated_syntax_)*/false} {}
struct LanguageOptionsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LanguageOptionsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LanguageOptionsProtoDefaultTypeInternal() {}
  union {
    LanguageOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LanguageOptionsProtoDefaultTypeInternal _LanguageOptionsProto_default_instance_;
PROTOBUF_CONSTEXPR AllowedHintsAndOptionsProto_HintProto::AllowedHintsAndOptionsProto_HintProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.qualifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.allow_unqualified_)*/false} {}
struct AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal() {}
  union {
    AllowedHintsAndOptionsProto_HintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_HintProto_default_instance_;
PROTOBUF_CONSTEXPR AllowedHintsAndOptionsProto_OptionProto::AllowedHintsAndOptionsProto_OptionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/nullptr} {}
struct AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal() {}
  union {
    AllowedHintsAndOptionsProto_OptionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_OptionProto_default_instance_;
PROTOBUF_CONSTEXPR AllowedHintsAndOptionsProto::AllowedHintsAndOptionsProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.disallow_unknown_hints_with_qualifier_)*/{}
  , /*decltype(_impl_.hint_)*/{}
  , /*decltype(_impl_.option_)*/{}
  , /*decltype(_impl_.disallow_unknown_options_)*/false} {}
struct AllowedHintsAndOptionsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowedHintsAndOptionsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowedHintsAndOptionsProtoDefaultTypeInternal() {}
  union {
    AllowedHintsAndOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowedHintsAndOptionsProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_default_instance_;
PROTOBUF_CONSTEXPR AnalyzerOptionsProto_QueryParameterProto::AnalyzerOptionsProto_QueryParameterProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/nullptr} {}
struct AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal() {}
  union {
    AnalyzerOptionsProto_QueryParameterProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal _AnalyzerOptionsProto_QueryParameterProto_default_instance_;
PROTOBUF_CONSTEXPR AnalyzerOptionsProto_SystemVariableProto::AnalyzerOptionsProto_SystemVariableProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.type_)*/nullptr} {}
struct AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal() {}
  union {
    AnalyzerOptionsProto_SystemVariableProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal _AnalyzerOptionsProto_SystemVariableProto_default_instance_;
PROTOBUF_CONSTEXPR AnalyzerOptionsProto::AnalyzerOptionsProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_parameters_)*/{}
  , /*decltype(_impl_.expression_columns_)*/{}
  , /*decltype(_impl_.positional_query_parameters_)*/{}
  , /*decltype(_impl_.ddl_pseudo_columns_)*/{}
  , /*decltype(_impl_.system_variables_)*/{}
  , /*decltype(_impl_.target_column_types_)*/{}
  , /*decltype(_impl_.enabled_rewrites_)*/{}
  , /*decltype(_impl_.default_timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_anon_function_report_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_options_)*/nullptr
  , /*decltype(_impl_.in_scope_expression_column_)*/nullptr
  , /*decltype(_impl_.allowed_hints_and_options_)*/nullptr
  , /*decltype(_impl_.error_message_mode_)*/0
  , /*decltype(_impl_.parameter_mode_)*/0
  , /*decltype(_impl_.statement_context_)*/0
  , /*decltype(_impl_.create_new_column_for_each_projected_output_)*/false
  , /*decltype(_impl_.prune_unused_columns_)*/false
  , /*decltype(_impl_.allow_undeclared_parameters_)*/false
  , /*decltype(_impl_.preserve_column_aliases_)*/false
  , /*decltype(_impl_.parse_location_record_type_)*/0
  , /*decltype(_impl_.preserve_unnecessary_cast_)*/false
  , /*decltype(_impl_.default_anon_kappa_value_)*/int64_t{0}} {}
struct AnalyzerOptionsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalyzerOptionsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalyzerOptionsProtoDefaultTypeInternal() {}
  union {
    AnalyzerOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalyzerOptionsProtoDefaultTypeInternal _AnalyzerOptionsProto_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fproto_2foptions_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fproto_2foptions_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fproto_2foptions_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fproto_2foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, _impl_.language_options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, _impl_.include_function_ids_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, _impl_.exclude_function_ids_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _impl_.name_resolution_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _impl_.product_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _impl_.error_on_deprecated_syntax_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _impl_.enabled_language_features_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _impl_.supported_statement_kinds_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _impl_.supported_generic_entity_types_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _impl_.reserved_keywords_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _impl_.supported_generic_sub_entity_types_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, _impl_.qualifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, _impl_.allow_unqualified_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_OptionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_OptionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_OptionProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_OptionProto, _impl_.type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, _impl_.disallow_unknown_options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, _impl_.disallow_unknown_hints_with_qualifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, _impl_.hint_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, _impl_.option_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_QueryParameterProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_QueryParameterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_QueryParameterProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_QueryParameterProto, _impl_.type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_SystemVariableProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_SystemVariableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_SystemVariableProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_SystemVariableProto, _impl_.type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.language_options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.query_parameters_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.positional_query_parameters_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.expression_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.in_scope_expression_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.ddl_pseudo_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.error_message_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.default_timezone_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.create_new_column_for_each_projected_output_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.prune_unused_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.allow_undeclared_parameters_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.parameter_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.allowed_hints_and_options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.statement_context_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.preserve_column_aliases_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.system_variables_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.target_column_types_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.enabled_rewrites_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.parse_location_record_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.preserve_unnecessary_cast_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.default_anon_function_report_format_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _impl_.default_anon_kappa_value_),
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  5,
  0,
  8,
  9,
  10,
  6,
  4,
  7,
  11,
  ~0u,
  ~0u,
  ~0u,
  12,
  13,
  1,
  14,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::zetasql::ZetaSQLBuiltinFunctionOptionsProto)},
  { 12, 26, -1, sizeof(::zetasql::LanguageOptionsProto)},
  { 34, 44, -1, sizeof(::zetasql::AllowedHintsAndOptionsProto_HintProto)},
  { 48, 56, -1, sizeof(::zetasql::AllowedHintsAndOptionsProto_OptionProto)},
  { 58, 68, -1, sizeof(::zetasql::AllowedHintsAndOptionsProto)},
  { 72, 80, -1, sizeof(::zetasql::AnalyzerOptionsProto_QueryParameterProto)},
  { 82, 90, -1, sizeof(::zetasql::AnalyzerOptionsProto_SystemVariableProto)},
  { 92, 120, -1, sizeof(::zetasql::AnalyzerOptionsProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_ZetaSQLBuiltinFunctionOptionsProto_default_instance_._instance,
  &::zetasql::_LanguageOptionsProto_default_instance_._instance,
  &::zetasql::_AllowedHintsAndOptionsProto_HintProto_default_instance_._instance,
  &::zetasql::_AllowedHintsAndOptionsProto_OptionProto_default_instance_._instance,
  &::zetasql::_AllowedHintsAndOptionsProto_default_instance_._instance,
  &::zetasql::_AnalyzerOptionsProto_QueryParameterProto_default_instance_._instance,
  &::zetasql::_AnalyzerOptionsProto_SystemVariableProto_default_instance_._instance,
  &::zetasql::_AnalyzerOptionsProto_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fproto_2foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033zetasql/proto/options.proto\022\007zetasql\032%"
  "zetasql/public/builtin_function.proto\032\034z"
  "etasql/public/options.proto\032\031zetasql/pub"
  "lic/type.proto\032-zetasql/resolved_ast/res"
  "olved_node_kind.proto\"\325\001\n\"ZetaSQLBuiltin"
  "FunctionOptionsProto\0227\n\020language_options"
  "\030\001 \001(\0132\035.zetasql.LanguageOptionsProto\022:\n"
  "\024include_function_ids\030\002 \003(\0162\034.zetasql.Fu"
  "nctionSignatureId\022:\n\024exclude_function_id"
  "s\030\003 \003(\0162\034.zetasql.FunctionSignatureId\"\221\003"
  "\n\024LanguageOptionsProto\0229\n\024name_resolutio"
  "n_mode\030\002 \001(\0162\033.zetasql.NameResolutionMod"
  "e\022*\n\014product_mode\030\003 \001(\0162\024.zetasql.Produc"
  "tMode\022\"\n\032error_on_deprecated_syntax\030\004 \001("
  "\010\022;\n\031enabled_language_features\030\005 \003(\0162\030.z"
  "etasql.LanguageFeature\022<\n\031supported_stat"
  "ement_kinds\030\006 \003(\0162\031.zetasql.ResolvedNode"
  "Kind\022&\n\036supported_generic_entity_types\030\007"
  " \003(\t\022\031\n\021reserved_keywords\030\010 \003(\t\022*\n\"suppo"
  "rted_generic_sub_entity_types\030\t \003(\tJ\004\010\001\020"
  "\002\"\230\003\n\033AllowedHintsAndOptionsProto\022 \n\030dis"
  "allow_unknown_options\030\001 \001(\010\022-\n%disallow_"
  "unknown_hints_with_qualifier\030\002 \003(\t\022<\n\004hi"
  "nt\030\003 \003(\0132..zetasql.AllowedHintsAndOption"
  "sProto.HintProto\022@\n\006option\030\004 \003(\01320.zetas"
  "ql.AllowedHintsAndOptionsProto.OptionPro"
  "to\032i\n\tHintProto\022\021\n\tqualifier\030\001 \001(\t\022\014\n\004na"
  "me\030\002 \001(\t\022 \n\004type\030\003 \001(\0132\022.zetasql.TypePro"
  "to\022\031\n\021allow_unqualified\030\004 \001(\010\032=\n\013OptionP"
  "roto\022\014\n\004name\030\001 \001(\t\022 \n\004type\030\002 \001(\0132\022.zetas"
  "ql.TypeProto\"\365\n\n\024AnalyzerOptionsProto\0227\n"
  "\020language_options\030\001 \001(\0132\035.zetasql.Langua"
  "geOptionsProto\022K\n\020query_parameters\030\002 \003(\013"
  "21.zetasql.AnalyzerOptionsProto.QueryPar"
  "ameterProto\0227\n\033positional_query_paramete"
  "rs\030\014 \003(\0132\022.zetasql.TypeProto\022M\n\022expressi"
  "on_columns\030\003 \003(\01321.zetasql.AnalyzerOptio"
  "nsProto.QueryParameterProto\022U\n\032in_scope_"
  "expression_column\030\004 \001(\01321.zetasql.Analyz"
  "erOptionsProto.QueryParameterProto\022M\n\022dd"
  "l_pseudo_columns\030\017 \003(\01321.zetasql.Analyze"
  "rOptionsProto.QueryParameterProto\0225\n\022err"
  "or_message_mode\030\006 \001(\0162\031.zetasql.ErrorMes"
  "sageMode\022\030\n\020default_timezone\030\007 \001(\t\0223\n+cr"
  "eate_new_column_for_each_projected_outpu"
  "t\030\024 \001(\010\022\034\n\024prune_unused_columns\030\t \001(\010\022#\n"
  "\033allow_undeclared_parameters\030\n \001(\010\022.\n\016pa"
  "rameter_mode\030\r \001(\0162\026.zetasql.ParameterMo"
  "de\022G\n\031allowed_hints_and_options\030\013 \001(\0132$."
  "zetasql.AllowedHintsAndOptionsProto\0224\n\021s"
  "tatement_context\030\016 \001(\0162\031.zetasql.Stateme"
  "ntContext\022\037\n\027preserve_column_aliases\030\021 \001"
  "(\010\022K\n\020system_variables\030\022 \003(\01321.zetasql.A"
  "nalyzerOptionsProto.SystemVariableProto\022"
  "/\n\023target_column_types\030\023 \003(\0132\022.zetasql.T"
  "ypeProto\0225\n\020enabled_rewrites\030\025 \003(\0162\033.zet"
  "asql.ResolvedASTRewrite\022D\n\032parse_locatio"
  "n_record_type\030\027 \001(\0162 .zetasql.ParseLocat"
  "ionRecordType\022!\n\031preserve_unnecessary_ca"
  "st\030\030 \001(\010\022+\n#default_anon_function_report"
  "_format\030\031 \001(\t\022 \n\030default_anon_kappa_valu"
  "e\030\032 \001(\003\032E\n\023QueryParameterProto\022\014\n\004name\030\001"
  " \001(\t\022 \n\004type\030\002 \001(\0132\022.zetasql.TypeProto\032J"
  "\n\023SystemVariableProto\022\021\n\tname_path\030\001 \003(\t"
  "\022 \n\004type\030\002 \001(\0132\022.zetasql.TypeProtoJ\004\010\010\020\t"
  "J\004\010\026\020\027J\004\010\020\020\021B)\n\022com.google.zetasqlB\023Zeta"
  "SQLOptionsProto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zetasql_2fproto_2foptions_2eproto_deps[4] = {
  &::descriptor_table_zetasql_2fpublic_2fbuiltin_5ffunction_2eproto,
  &::descriptor_table_zetasql_2fpublic_2foptions_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_2eproto,
  &::descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto,
};
static ::_pbi::once_flag descriptor_table_zetasql_2fproto_2foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fproto_2foptions_2eproto = {
    false, false, 2655, descriptor_table_protodef_zetasql_2fproto_2foptions_2eproto,
    "zetasql/proto/options.proto",
    &descriptor_table_zetasql_2fproto_2foptions_2eproto_once, descriptor_table_zetasql_2fproto_2foptions_2eproto_deps, 4, 8,
    schemas, file_default_instances, TableStruct_zetasql_2fproto_2foptions_2eproto::offsets,
    file_level_metadata_zetasql_2fproto_2foptions_2eproto, file_level_enum_descriptors_zetasql_2fproto_2foptions_2eproto,
    file_level_service_descriptors_zetasql_2fproto_2foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fproto_2foptions_2eproto_getter() {
  return &descriptor_table_zetasql_2fproto_2foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fproto_2foptions_2eproto(&descriptor_table_zetasql_2fproto_2foptions_2eproto);
namespace zetasql {

// ===================================================================

class ZetaSQLBuiltinFunctionOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ZetaSQLBuiltinFunctionOptionsProto>()._impl_._has_bits_);
  static const ::zetasql::LanguageOptionsProto& language_options(const ZetaSQLBuiltinFunctionOptionsProto* msg);
  static void set_has_language_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::LanguageOptionsProto&
ZetaSQLBuiltinFunctionOptionsProto::_Internal::language_options(const ZetaSQLBuiltinFunctionOptionsProto* msg) {
  return *msg->_impl_.language_options_;
}
ZetaSQLBuiltinFunctionOptionsProto::ZetaSQLBuiltinFunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
}
ZetaSQLBuiltinFunctionOptionsProto::ZetaSQLBuiltinFunctionOptionsProto(const ZetaSQLBuiltinFunctionOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZetaSQLBuiltinFunctionOptionsProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.include_function_ids_){from._impl_.include_function_ids_}
    , decltype(_impl_.exclude_function_ids_){from._impl_.exclude_function_ids_}
    , decltype(_impl_.language_options_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_language_options()) {
    _this->_impl_.language_options_ = new ::zetasql::LanguageOptionsProto(*from._impl_.language_options_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
}

inline void ZetaSQLBuiltinFunctionOptionsProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.include_function_ids_){arena}
    , decltype(_impl_.exclude_function_ids_){arena}
    , decltype(_impl_.language_options_){nullptr}
  };
}

ZetaSQLBuiltinFunctionOptionsProto::~ZetaSQLBuiltinFunctionOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZetaSQLBuiltinFunctionOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.include_function_ids_.~RepeatedField();
  _impl_.exclude_function_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.language_options_;
}

void ZetaSQLBuiltinFunctionOptionsProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZetaSQLBuiltinFunctionOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.include_function_ids_.Clear();
  _impl_.exclude_function_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.language_options_ != nullptr);
    _impl_.language_options_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZetaSQLBuiltinFunctionOptionsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.LanguageOptionsProto language_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_language_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.FunctionSignatureId include_function_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionSignatureId_IsValid(val))) {
              _internal_add_include_function_ids(static_cast<::zetasql::FunctionSignatureId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_include_function_ids(), ptr, ctx, ::zetasql::FunctionSignatureId_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionSignatureId_IsValid(val))) {
              _internal_add_exclude_function_ids(static_cast<::zetasql::FunctionSignatureId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_exclude_function_ids(), ptr, ctx, ::zetasql::FunctionSignatureId_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZetaSQLBuiltinFunctionOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.LanguageOptionsProto language_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::language_options(this),
        _Internal::language_options(this).GetCachedSize(), target, stream);
  }

  // repeated .zetasql.FunctionSignatureId include_function_ids = 2;
  for (int i = 0, n = this->_internal_include_function_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_include_function_ids(i), target);
  }

  // repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
  for (int i = 0, n = this->_internal_exclude_function_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_exclude_function_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  return target;
}

size_t ZetaSQLBuiltinFunctionOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.FunctionSignatureId include_function_ids = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_include_function_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_include_function_ids(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_exclude_function_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_exclude_function_ids(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .zetasql.LanguageOptionsProto language_options = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.language_options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZetaSQLBuiltinFunctionOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZetaSQLBuiltinFunctionOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZetaSQLBuiltinFunctionOptionsProto::GetClassData() const { return &_class_data_; }


void ZetaSQLBuiltinFunctionOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZetaSQLBuiltinFunctionOptionsProto*>(&to_msg);
  auto& from = static_cast<const ZetaSQLBuiltinFunctionOptionsProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.include_function_ids_.MergeFrom(from._impl_.include_function_ids_);
  _this->_impl_.exclude_function_ids_.MergeFrom(from._impl_.exclude_function_ids_);
  if (from._internal_has_language_options()) {
    _this->_internal_mutable_language_options()->::zetasql::LanguageOptionsProto::MergeFrom(
        from._internal_language_options());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZetaSQLBuiltinFunctionOptionsProto::CopyFrom(const ZetaSQLBuiltinFunctionOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZetaSQLBuiltinFunctionOptionsProto::IsInitialized() const {
  return true;
}

void ZetaSQLBuiltinFunctionOptionsProto::InternalSwap(ZetaSQLBuiltinFunctionOptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.include_function_ids_.InternalSwap(&other->_impl_.include_function_ids_);
  _impl_.exclude_function_ids_.InternalSwap(&other->_impl_.exclude_function_ids_);
  swap(_impl_.language_options_, other->_impl_.language_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZetaSQLBuiltinFunctionOptionsProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[0]);
}

// ===================================================================

class LanguageOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LanguageOptionsProto>()._impl_._has_bits_);
  static void set_has_name_resolution_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_product_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_on_deprecated_syntax(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LanguageOptionsProto::LanguageOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.LanguageOptionsProto)
}
LanguageOptionsProto::LanguageOptionsProto(const LanguageOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LanguageOptionsProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_language_features_){from._impl_.enabled_language_features_}
    , decltype(_impl_.supported_statement_kinds_){from._impl_.supported_statement_kinds_}
    , decltype(_impl_.supported_generic_entity_types_){from._impl_.supported_generic_entity_types_}
    , decltype(_impl_.reserved_keywords_){from._impl_.reserved_keywords_}
    , decltype(_impl_.supported_generic_sub_entity_types_){from._impl_.supported_generic_sub_entity_types_}
    , decltype(_impl_.name_resolution_mode_){}
    , decltype(_impl_.product_mode_){}
    , decltype(_impl_.error_on_deprecated_syntax_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.name_resolution_mode_, &from._impl_.name_resolution_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_on_deprecated_syntax_) -
    reinterpret_cast<char*>(&_impl_.name_resolution_mode_)) + sizeof(_impl_.error_on_deprecated_syntax_));
  // @@protoc_insertion_point(copy_constructor:zetasql.LanguageOptionsProto)
}

inline void LanguageOptionsProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_language_features_){arena}
    , decltype(_impl_.supported_statement_kinds_){arena}
    , decltype(_impl_.supported_generic_entity_types_){arena}
    , decltype(_impl_.reserved_keywords_){arena}
    , decltype(_impl_.supported_generic_sub_entity_types_){arena}
    , decltype(_impl_.name_resolution_mode_){0}
    , decltype(_impl_.product_mode_){0}
    , decltype(_impl_.error_on_deprecated_syntax_){false}
  };
}

LanguageOptionsProto::~LanguageOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.LanguageOptionsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LanguageOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enabled_language_features_.~RepeatedField();
  _impl_.supported_statement_kinds_.~RepeatedField();
  _impl_.supported_generic_entity_types_.~RepeatedPtrField();
  _impl_.reserved_keywords_.~RepeatedPtrField();
  _impl_.supported_generic_sub_entity_types_.~RepeatedPtrField();
}

void LanguageOptionsProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LanguageOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.LanguageOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_language_features_.Clear();
  _impl_.supported_statement_kinds_.Clear();
  _impl_.supported_generic_entity_types_.Clear();
  _impl_.reserved_keywords_.Clear();
  _impl_.supported_generic_sub_entity_types_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.name_resolution_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.error_on_deprecated_syntax_) -
        reinterpret_cast<char*>(&_impl_.name_resolution_mode_)) + sizeof(_impl_.error_on_deprecated_syntax_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanguageOptionsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.NameResolutionMode name_resolution_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::NameResolutionMode_IsValid(val))) {
            _internal_set_name_resolution_mode(static_cast<::zetasql::NameResolutionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ProductMode product_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::ProductMode_IsValid(val))) {
            _internal_set_product_mode(static_cast<::zetasql::ProductMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool error_on_deprecated_syntax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_error_on_deprecated_syntax(&has_bits);
          _impl_.error_on_deprecated_syntax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.LanguageFeature enabled_language_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::LanguageFeature_IsValid(val))) {
              _internal_add_enabled_language_features(static_cast<::zetasql::LanguageFeature>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_enabled_language_features(), ptr, ctx, ::zetasql::LanguageFeature_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::ResolvedNodeKind_IsValid(val))) {
              _internal_add_supported_statement_kinds(static_cast<::zetasql::ResolvedNodeKind>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_supported_statement_kinds(), ptr, ctx, ::zetasql::ResolvedNodeKind_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_generic_entity_types = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_generic_entity_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "zetasql.LanguageOptionsProto.supported_generic_entity_types");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string reserved_keywords = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reserved_keywords();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "zetasql.LanguageOptionsProto.reserved_keywords");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_generic_sub_entity_types = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_generic_sub_entity_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "zetasql.LanguageOptionsProto.supported_generic_sub_entity_types");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LanguageOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.LanguageOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.NameResolutionMode name_resolution_mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_name_resolution_mode(), target);
  }

  // optional .zetasql.ProductMode product_mode = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_product_mode(), target);
  }

  // optional bool error_on_deprecated_syntax = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_error_on_deprecated_syntax(), target);
  }

  // repeated .zetasql.LanguageFeature enabled_language_features = 5;
  for (int i = 0, n = this->_internal_enabled_language_features_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_enabled_language_features(i), target);
  }

  // repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
  for (int i = 0, n = this->_internal_supported_statement_kinds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_supported_statement_kinds(i), target);
  }

  // repeated string supported_generic_entity_types = 7;
  for (int i = 0, n = this->_internal_supported_generic_entity_types_size(); i < n; i++) {
    const auto& s = this->_internal_supported_generic_entity_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.LanguageOptionsProto.supported_generic_entity_types");
    target = stream->WriteString(7, s, target);
  }

  // repeated string reserved_keywords = 8;
  for (int i = 0, n = this->_internal_reserved_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_reserved_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.LanguageOptionsProto.reserved_keywords");
    target = stream->WriteString(8, s, target);
  }

  // repeated string supported_generic_sub_entity_types = 9;
  for (int i = 0, n = this->_internal_supported_generic_sub_entity_types_size(); i < n; i++) {
    const auto& s = this->_internal_supported_generic_sub_entity_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.LanguageOptionsProto.supported_generic_sub_entity_types");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.LanguageOptionsProto)
  return target;
}

size_t LanguageOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.LanguageOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.LanguageFeature enabled_language_features = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enabled_language_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_enabled_language_features(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_statement_kinds_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_supported_statement_kinds(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string supported_generic_entity_types = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.supported_generic_entity_types_.size());
  for (int i = 0, n = _impl_.supported_generic_entity_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.supported_generic_entity_types_.Get(i));
  }

  // repeated string reserved_keywords = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.reserved_keywords_.size());
  for (int i = 0, n = _impl_.reserved_keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.reserved_keywords_.Get(i));
  }

  // repeated string supported_generic_sub_entity_types = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.supported_generic_sub_entity_types_.size());
  for (int i = 0, n = _impl_.supported_generic_sub_entity_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.supported_generic_sub_entity_types_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .zetasql.NameResolutionMode name_resolution_mode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_name_resolution_mode());
    }

    // optional .zetasql.ProductMode product_mode = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_product_mode());
    }

    // optional bool error_on_deprecated_syntax = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LanguageOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LanguageOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LanguageOptionsProto::GetClassData() const { return &_class_data_; }


void LanguageOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LanguageOptionsProto*>(&to_msg);
  auto& from = static_cast<const LanguageOptionsProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.LanguageOptionsProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enabled_language_features_.MergeFrom(from._impl_.enabled_language_features_);
  _this->_impl_.supported_statement_kinds_.MergeFrom(from._impl_.supported_statement_kinds_);
  _this->_impl_.supported_generic_entity_types_.MergeFrom(from._impl_.supported_generic_entity_types_);
  _this->_impl_.reserved_keywords_.MergeFrom(from._impl_.reserved_keywords_);
  _this->_impl_.supported_generic_sub_entity_types_.MergeFrom(from._impl_.supported_generic_sub_entity_types_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.name_resolution_mode_ = from._impl_.name_resolution_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.product_mode_ = from._impl_.product_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.error_on_deprecated_syntax_ = from._impl_.error_on_deprecated_syntax_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LanguageOptionsProto::CopyFrom(const LanguageOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.LanguageOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanguageOptionsProto::IsInitialized() const {
  return true;
}

void LanguageOptionsProto::InternalSwap(LanguageOptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.enabled_language_features_.InternalSwap(&other->_impl_.enabled_language_features_);
  _impl_.supported_statement_kinds_.InternalSwap(&other->_impl_.supported_statement_kinds_);
  _impl_.supported_generic_entity_types_.InternalSwap(&other->_impl_.supported_generic_entity_types_);
  _impl_.reserved_keywords_.InternalSwap(&other->_impl_.reserved_keywords_);
  _impl_.supported_generic_sub_entity_types_.InternalSwap(&other->_impl_.supported_generic_sub_entity_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LanguageOptionsProto, _impl_.error_on_deprecated_syntax_)
      + sizeof(LanguageOptionsProto::_impl_.error_on_deprecated_syntax_)
      - PROTOBUF_FIELD_OFFSET(LanguageOptionsProto, _impl_.name_resolution_mode_)>(
          reinterpret_cast<char*>(&_impl_.name_resolution_mode_),
          reinterpret_cast<char*>(&other->_impl_.name_resolution_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LanguageOptionsProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[1]);
}

// ===================================================================

class AllowedHintsAndOptionsProto_HintProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowedHintsAndOptionsProto_HintProto>()._impl_._has_bits_);
  static void set_has_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TypeProto& type(const AllowedHintsAndOptionsProto_HintProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allow_unqualified(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::TypeProto&
AllowedHintsAndOptionsProto_HintProto::_Internal::type(const AllowedHintsAndOptionsProto_HintProto* msg) {
  return *msg->_impl_.type_;
}
void AllowedHintsAndOptionsProto_HintProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AllowedHintsAndOptionsProto_HintProto::AllowedHintsAndOptionsProto_HintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AllowedHintsAndOptionsProto.HintProto)
}
AllowedHintsAndOptionsProto_HintProto::AllowedHintsAndOptionsProto_HintProto(const AllowedHintsAndOptionsProto_HintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllowedHintsAndOptionsProto_HintProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qualifier_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.allow_unqualified_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.qualifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qualifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_qualifier()) {
    _this->_impl_.qualifier_.Set(from._internal_qualifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  _this->_impl_.allow_unqualified_ = from._impl_.allow_unqualified_;
  // @@protoc_insertion_point(copy_constructor:zetasql.AllowedHintsAndOptionsProto.HintProto)
}

inline void AllowedHintsAndOptionsProto_HintProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qualifier_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.allow_unqualified_){false}
  };
  _impl_.qualifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qualifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllowedHintsAndOptionsProto_HintProto::~AllowedHintsAndOptionsProto_HintProto() {
  // @@protoc_insertion_point(destructor:zetasql.AllowedHintsAndOptionsProto.HintProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllowedHintsAndOptionsProto_HintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qualifier_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_;
}

void AllowedHintsAndOptionsProto_HintProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllowedHintsAndOptionsProto_HintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.qualifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.type_ != nullptr);
      _impl_.type_->Clear();
    }
  }
  _impl_.allow_unqualified_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedHintsAndOptionsProto_HintProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string qualifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_qualifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.AllowedHintsAndOptionsProto.HintProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_unqualified = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_allow_unqualified(&has_bits);
          _impl_.allow_unqualified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllowedHintsAndOptionsProto_HintProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string qualifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_qualifier().data(), static_cast<int>(this->_internal_qualifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_qualifier(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AllowedHintsAndOptionsProto.HintProto.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .zetasql.TypeProto type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // optional bool allow_unqualified = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_unqualified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AllowedHintsAndOptionsProto.HintProto)
  return target;
}

size_t AllowedHintsAndOptionsProto_HintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string qualifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_qualifier());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .zetasql.TypeProto type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_);
    }

    // optional bool allow_unqualified = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedHintsAndOptionsProto_HintProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllowedHintsAndOptionsProto_HintProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedHintsAndOptionsProto_HintProto::GetClassData() const { return &_class_data_; }


void AllowedHintsAndOptionsProto_HintProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllowedHintsAndOptionsProto_HintProto*>(&to_msg);
  auto& from = static_cast<const AllowedHintsAndOptionsProto_HintProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_qualifier(from._internal_qualifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type()->::zetasql::TypeProto::MergeFrom(
          from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.allow_unqualified_ = from._impl_.allow_unqualified_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedHintsAndOptionsProto_HintProto::CopyFrom(const AllowedHintsAndOptionsProto_HintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedHintsAndOptionsProto_HintProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!_impl_.type_->IsInitialized()) return false;
  }
  return true;
}

void AllowedHintsAndOptionsProto_HintProto::InternalSwap(AllowedHintsAndOptionsProto_HintProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.qualifier_, lhs_arena,
      &other->_impl_.qualifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllowedHintsAndOptionsProto_HintProto, _impl_.allow_unqualified_)
      + sizeof(AllowedHintsAndOptionsProto_HintProto::_impl_.allow_unqualified_)
      - PROTOBUF_FIELD_OFFSET(AllowedHintsAndOptionsProto_HintProto, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedHintsAndOptionsProto_HintProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[2]);
}

// ===================================================================

class AllowedHintsAndOptionsProto_OptionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowedHintsAndOptionsProto_OptionProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const AllowedHintsAndOptionsProto_OptionProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TypeProto&
AllowedHintsAndOptionsProto_OptionProto::_Internal::type(const AllowedHintsAndOptionsProto_OptionProto* msg) {
  return *msg->_impl_.type_;
}
void AllowedHintsAndOptionsProto_OptionProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AllowedHintsAndOptionsProto_OptionProto::AllowedHintsAndOptionsProto_OptionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AllowedHintsAndOptionsProto.OptionProto)
}
AllowedHintsAndOptionsProto_OptionProto::AllowedHintsAndOptionsProto_OptionProto(const AllowedHintsAndOptionsProto_OptionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllowedHintsAndOptionsProto_OptionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AllowedHintsAndOptionsProto.OptionProto)
}

inline void AllowedHintsAndOptionsProto_OptionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllowedHintsAndOptionsProto_OptionProto::~AllowedHintsAndOptionsProto_OptionProto() {
  // @@protoc_insertion_point(destructor:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllowedHintsAndOptionsProto_OptionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_;
}

void AllowedHintsAndOptionsProto_OptionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllowedHintsAndOptionsProto_OptionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.type_ != nullptr);
      _impl_.type_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedHintsAndOptionsProto_OptionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.AllowedHintsAndOptionsProto.OptionProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllowedHintsAndOptionsProto_OptionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AllowedHintsAndOptionsProto.OptionProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  return target;
}

size_t AllowedHintsAndOptionsProto_OptionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .zetasql.TypeProto type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedHintsAndOptionsProto_OptionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllowedHintsAndOptionsProto_OptionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedHintsAndOptionsProto_OptionProto::GetClassData() const { return &_class_data_; }


void AllowedHintsAndOptionsProto_OptionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllowedHintsAndOptionsProto_OptionProto*>(&to_msg);
  auto& from = static_cast<const AllowedHintsAndOptionsProto_OptionProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_type()->::zetasql::TypeProto::MergeFrom(
          from._internal_type());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedHintsAndOptionsProto_OptionProto::CopyFrom(const AllowedHintsAndOptionsProto_OptionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedHintsAndOptionsProto_OptionProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!_impl_.type_->IsInitialized()) return false;
  }
  return true;
}

void AllowedHintsAndOptionsProto_OptionProto::InternalSwap(AllowedHintsAndOptionsProto_OptionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedHintsAndOptionsProto_OptionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[3]);
}

// ===================================================================

class AllowedHintsAndOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowedHintsAndOptionsProto>()._impl_._has_bits_);
  static void set_has_disallow_unknown_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllowedHintsAndOptionsProto::AllowedHintsAndOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AllowedHintsAndOptionsProto)
}
AllowedHintsAndOptionsProto::AllowedHintsAndOptionsProto(const AllowedHintsAndOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllowedHintsAndOptionsProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disallow_unknown_hints_with_qualifier_){from._impl_.disallow_unknown_hints_with_qualifier_}
    , decltype(_impl_.hint_){from._impl_.hint_}
    , decltype(_impl_.option_){from._impl_.option_}
    , decltype(_impl_.disallow_unknown_options_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.disallow_unknown_options_ = from._impl_.disallow_unknown_options_;
  // @@protoc_insertion_point(copy_constructor:zetasql.AllowedHintsAndOptionsProto)
}

inline void AllowedHintsAndOptionsProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disallow_unknown_hints_with_qualifier_){arena}
    , decltype(_impl_.hint_){arena}
    , decltype(_impl_.option_){arena}
    , decltype(_impl_.disallow_unknown_options_){false}
  };
}

AllowedHintsAndOptionsProto::~AllowedHintsAndOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.AllowedHintsAndOptionsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllowedHintsAndOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.disallow_unknown_hints_with_qualifier_.~RepeatedPtrField();
  _impl_.hint_.~RepeatedPtrField();
  _impl_.option_.~RepeatedPtrField();
}

void AllowedHintsAndOptionsProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllowedHintsAndOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AllowedHintsAndOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.disallow_unknown_hints_with_qualifier_.Clear();
  _impl_.hint_.Clear();
  _impl_.option_.Clear();
  _impl_.disallow_unknown_options_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedHintsAndOptionsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool disallow_unknown_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_disallow_unknown_options(&has_bits);
          _impl_.disallow_unknown_options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string disallow_unknown_hints_with_qualifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_disallow_unknown_hints_with_qualifier();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_option(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllowedHintsAndOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AllowedHintsAndOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool disallow_unknown_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_disallow_unknown_options(), target);
  }

  // repeated string disallow_unknown_hints_with_qualifier = 2;
  for (int i = 0, n = this->_internal_disallow_unknown_hints_with_qualifier_size(); i < n; i++) {
    const auto& s = this->_internal_disallow_unknown_hints_with_qualifier(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier");
    target = stream->WriteString(2, s, target);
  }

  // repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hint_size()); i < n; i++) {
    const auto& repfield = this->_internal_hint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_option_size()); i < n; i++) {
    const auto& repfield = this->_internal_option(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AllowedHintsAndOptionsProto)
  return target;
}

size_t AllowedHintsAndOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AllowedHintsAndOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string disallow_unknown_hints_with_qualifier = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.disallow_unknown_hints_with_qualifier_.size());
  for (int i = 0, n = _impl_.disallow_unknown_hints_with_qualifier_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.disallow_unknown_hints_with_qualifier_.Get(i));
  }

  // repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
  total_size += 1UL * this->_internal_hint_size();
  for (const auto& msg : this->_impl_.hint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
  total_size += 1UL * this->_internal_option_size();
  for (const auto& msg : this->_impl_.option_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool disallow_unknown_options = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedHintsAndOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllowedHintsAndOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedHintsAndOptionsProto::GetClassData() const { return &_class_data_; }


void AllowedHintsAndOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllowedHintsAndOptionsProto*>(&to_msg);
  auto& from = static_cast<const AllowedHintsAndOptionsProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AllowedHintsAndOptionsProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.disallow_unknown_hints_with_qualifier_.MergeFrom(from._impl_.disallow_unknown_hints_with_qualifier_);
  _this->_impl_.hint_.MergeFrom(from._impl_.hint_);
  _this->_impl_.option_.MergeFrom(from._impl_.option_);
  if (from._internal_has_disallow_unknown_options()) {
    _this->_internal_set_disallow_unknown_options(from._internal_disallow_unknown_options());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedHintsAndOptionsProto::CopyFrom(const AllowedHintsAndOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AllowedHintsAndOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedHintsAndOptionsProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.hint_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.option_))
    return false;
  return true;
}

void AllowedHintsAndOptionsProto::InternalSwap(AllowedHintsAndOptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.disallow_unknown_hints_with_qualifier_.InternalSwap(&other->_impl_.disallow_unknown_hints_with_qualifier_);
  _impl_.hint_.InternalSwap(&other->_impl_.hint_);
  _impl_.option_.InternalSwap(&other->_impl_.option_);
  swap(_impl_.disallow_unknown_options_, other->_impl_.disallow_unknown_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedHintsAndOptionsProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[4]);
}

// ===================================================================

class AnalyzerOptionsProto_QueryParameterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AnalyzerOptionsProto_QueryParameterProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const AnalyzerOptionsProto_QueryParameterProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TypeProto&
AnalyzerOptionsProto_QueryParameterProto::_Internal::type(const AnalyzerOptionsProto_QueryParameterProto* msg) {
  return *msg->_impl_.type_;
}
void AnalyzerOptionsProto_QueryParameterProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AnalyzerOptionsProto_QueryParameterProto::AnalyzerOptionsProto_QueryParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnalyzerOptionsProto.QueryParameterProto)
}
AnalyzerOptionsProto_QueryParameterProto::AnalyzerOptionsProto_QueryParameterProto(const AnalyzerOptionsProto_QueryParameterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnalyzerOptionsProto_QueryParameterProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnalyzerOptionsProto.QueryParameterProto)
}

inline void AnalyzerOptionsProto_QueryParameterProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnalyzerOptionsProto_QueryParameterProto::~AnalyzerOptionsProto_QueryParameterProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnalyzerOptionsProto_QueryParameterProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_;
}

void AnalyzerOptionsProto_QueryParameterProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnalyzerOptionsProto_QueryParameterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.type_ != nullptr);
      _impl_.type_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalyzerOptionsProto_QueryParameterProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.AnalyzerOptionsProto.QueryParameterProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnalyzerOptionsProto_QueryParameterProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AnalyzerOptionsProto.QueryParameterProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  return target;
}

size_t AnalyzerOptionsProto_QueryParameterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .zetasql.TypeProto type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalyzerOptionsProto_QueryParameterProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnalyzerOptionsProto_QueryParameterProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalyzerOptionsProto_QueryParameterProto::GetClassData() const { return &_class_data_; }


void AnalyzerOptionsProto_QueryParameterProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnalyzerOptionsProto_QueryParameterProto*>(&to_msg);
  auto& from = static_cast<const AnalyzerOptionsProto_QueryParameterProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_type()->::zetasql::TypeProto::MergeFrom(
          from._internal_type());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalyzerOptionsProto_QueryParameterProto::CopyFrom(const AnalyzerOptionsProto_QueryParameterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzerOptionsProto_QueryParameterProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!_impl_.type_->IsInitialized()) return false;
  }
  return true;
}

void AnalyzerOptionsProto_QueryParameterProto::InternalSwap(AnalyzerOptionsProto_QueryParameterProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalyzerOptionsProto_QueryParameterProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[5]);
}

// ===================================================================

class AnalyzerOptionsProto_SystemVariableProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AnalyzerOptionsProto_SystemVariableProto>()._impl_._has_bits_);
  static const ::zetasql::TypeProto& type(const AnalyzerOptionsProto_SystemVariableProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::TypeProto&
AnalyzerOptionsProto_SystemVariableProto::_Internal::type(const AnalyzerOptionsProto_SystemVariableProto* msg) {
  return *msg->_impl_.type_;
}
void AnalyzerOptionsProto_SystemVariableProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AnalyzerOptionsProto_SystemVariableProto::AnalyzerOptionsProto_SystemVariableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnalyzerOptionsProto.SystemVariableProto)
}
AnalyzerOptionsProto_SystemVariableProto::AnalyzerOptionsProto_SystemVariableProto(const AnalyzerOptionsProto_SystemVariableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnalyzerOptionsProto_SystemVariableProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnalyzerOptionsProto.SystemVariableProto)
}

inline void AnalyzerOptionsProto_SystemVariableProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.type_){nullptr}
  };
}

AnalyzerOptionsProto_SystemVariableProto::~AnalyzerOptionsProto_SystemVariableProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnalyzerOptionsProto_SystemVariableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.type_;
}

void AnalyzerOptionsProto_SystemVariableProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnalyzerOptionsProto_SystemVariableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_path_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.type_ != nullptr);
    _impl_.type_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalyzerOptionsProto_SystemVariableProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string name_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_path();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnalyzerOptionsProto_SystemVariableProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name_path = 1;
  for (int i = 0, n = this->_internal_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  return target;
}

size_t AnalyzerOptionsProto_SystemVariableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.name_path_.size());
  for (int i = 0, n = _impl_.name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.name_path_.Get(i));
  }

  // optional .zetasql.TypeProto type = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalyzerOptionsProto_SystemVariableProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnalyzerOptionsProto_SystemVariableProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalyzerOptionsProto_SystemVariableProto::GetClassData() const { return &_class_data_; }


void AnalyzerOptionsProto_SystemVariableProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnalyzerOptionsProto_SystemVariableProto*>(&to_msg);
  auto& from = static_cast<const AnalyzerOptionsProto_SystemVariableProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_path_.MergeFrom(from._impl_.name_path_);
  if (from._internal_has_type()) {
    _this->_internal_mutable_type()->::zetasql::TypeProto::MergeFrom(
        from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalyzerOptionsProto_SystemVariableProto::CopyFrom(const AnalyzerOptionsProto_SystemVariableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzerOptionsProto_SystemVariableProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!_impl_.type_->IsInitialized()) return false;
  }
  return true;
}

void AnalyzerOptionsProto_SystemVariableProto::InternalSwap(AnalyzerOptionsProto_SystemVariableProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_path_.InternalSwap(&other->_impl_.name_path_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalyzerOptionsProto_SystemVariableProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[6]);
}

// ===================================================================

class AnalyzerOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AnalyzerOptionsProto>()._impl_._has_bits_);
  static const ::zetasql::LanguageOptionsProto& language_options(const AnalyzerOptionsProto* msg);
  static void set_has_language_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& in_scope_expression_column(const AnalyzerOptionsProto* msg);
  static void set_has_in_scope_expression_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_message_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_create_new_column_for_each_projected_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_prune_unused_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_allow_undeclared_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_parameter_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::AllowedHintsAndOptionsProto& allowed_hints_and_options(const AnalyzerOptionsProto* msg);
  static void set_has_allowed_hints_and_options(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_statement_context(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_preserve_column_aliases(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_parse_location_record_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_preserve_unnecessary_cast(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_default_anon_function_report_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_anon_kappa_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::zetasql::LanguageOptionsProto&
AnalyzerOptionsProto::_Internal::language_options(const AnalyzerOptionsProto* msg) {
  return *msg->_impl_.language_options_;
}
const ::zetasql::AnalyzerOptionsProto_QueryParameterProto&
AnalyzerOptionsProto::_Internal::in_scope_expression_column(const AnalyzerOptionsProto* msg) {
  return *msg->_impl_.in_scope_expression_column_;
}
const ::zetasql::AllowedHintsAndOptionsProto&
AnalyzerOptionsProto::_Internal::allowed_hints_and_options(const AnalyzerOptionsProto* msg) {
  return *msg->_impl_.allowed_hints_and_options_;
}
void AnalyzerOptionsProto::clear_positional_query_parameters() {
  _impl_.positional_query_parameters_.Clear();
}
void AnalyzerOptionsProto::clear_target_column_types() {
  _impl_.target_column_types_.Clear();
}
AnalyzerOptionsProto::AnalyzerOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnalyzerOptionsProto)
}
AnalyzerOptionsProto::AnalyzerOptionsProto(const AnalyzerOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnalyzerOptionsProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_parameters_){from._impl_.query_parameters_}
    , decltype(_impl_.expression_columns_){from._impl_.expression_columns_}
    , decltype(_impl_.positional_query_parameters_){from._impl_.positional_query_parameters_}
    , decltype(_impl_.ddl_pseudo_columns_){from._impl_.ddl_pseudo_columns_}
    , decltype(_impl_.system_variables_){from._impl_.system_variables_}
    , decltype(_impl_.target_column_types_){from._impl_.target_column_types_}
    , decltype(_impl_.enabled_rewrites_){from._impl_.enabled_rewrites_}
    , decltype(_impl_.default_timezone_){}
    , decltype(_impl_.default_anon_function_report_format_){}
    , decltype(_impl_.language_options_){nullptr}
    , decltype(_impl_.in_scope_expression_column_){nullptr}
    , decltype(_impl_.allowed_hints_and_options_){nullptr}
    , decltype(_impl_.error_message_mode_){}
    , decltype(_impl_.parameter_mode_){}
    , decltype(_impl_.statement_context_){}
    , decltype(_impl_.create_new_column_for_each_projected_output_){}
    , decltype(_impl_.prune_unused_columns_){}
    , decltype(_impl_.allow_undeclared_parameters_){}
    , decltype(_impl_.preserve_column_aliases_){}
    , decltype(_impl_.parse_location_record_type_){}
    , decltype(_impl_.preserve_unnecessary_cast_){}
    , decltype(_impl_.default_anon_kappa_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.default_timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_default_timezone()) {
    _this->_impl_.default_timezone_.Set(from._internal_default_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.default_anon_function_report_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_anon_function_report_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_default_anon_function_report_format()) {
    _this->_impl_.default_anon_function_report_format_.Set(from._internal_default_anon_function_report_format(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_language_options()) {
    _this->_impl_.language_options_ = new ::zetasql::LanguageOptionsProto(*from._impl_.language_options_);
  }
  if (from._internal_has_in_scope_expression_column()) {
    _this->_impl_.in_scope_expression_column_ = new ::zetasql::AnalyzerOptionsProto_QueryParameterProto(*from._impl_.in_scope_expression_column_);
  }
  if (from._internal_has_allowed_hints_and_options()) {
    _this->_impl_.allowed_hints_and_options_ = new ::zetasql::AllowedHintsAndOptionsProto(*from._impl_.allowed_hints_and_options_);
  }
  ::memcpy(&_impl_.error_message_mode_, &from._impl_.error_message_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.default_anon_kappa_value_) -
    reinterpret_cast<char*>(&_impl_.error_message_mode_)) + sizeof(_impl_.default_anon_kappa_value_));
  // @@protoc_insertion_point(copy_constructor:zetasql.AnalyzerOptionsProto)
}

inline void AnalyzerOptionsProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_parameters_){arena}
    , decltype(_impl_.expression_columns_){arena}
    , decltype(_impl_.positional_query_parameters_){arena}
    , decltype(_impl_.ddl_pseudo_columns_){arena}
    , decltype(_impl_.system_variables_){arena}
    , decltype(_impl_.target_column_types_){arena}
    , decltype(_impl_.enabled_rewrites_){arena}
    , decltype(_impl_.default_timezone_){}
    , decltype(_impl_.default_anon_function_report_format_){}
    , decltype(_impl_.language_options_){nullptr}
    , decltype(_impl_.in_scope_expression_column_){nullptr}
    , decltype(_impl_.allowed_hints_and_options_){nullptr}
    , decltype(_impl_.error_message_mode_){0}
    , decltype(_impl_.parameter_mode_){0}
    , decltype(_impl_.statement_context_){0}
    , decltype(_impl_.create_new_column_for_each_projected_output_){false}
    , decltype(_impl_.prune_unused_columns_){false}
    , decltype(_impl_.allow_undeclared_parameters_){false}
    , decltype(_impl_.preserve_column_aliases_){false}
    , decltype(_impl_.parse_location_record_type_){0}
    , decltype(_impl_.preserve_unnecessary_cast_){false}
    , decltype(_impl_.default_anon_kappa_value_){int64_t{0}}
  };
  _impl_.default_timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.default_anon_function_report_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_anon_function_report_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnalyzerOptionsProto::~AnalyzerOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnalyzerOptionsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnalyzerOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_parameters_.~RepeatedPtrField();
  _impl_.expression_columns_.~RepeatedPtrField();
  _impl_.positional_query_parameters_.~RepeatedPtrField();
  _impl_.ddl_pseudo_columns_.~RepeatedPtrField();
  _impl_.system_variables_.~RepeatedPtrField();
  _impl_.target_column_types_.~RepeatedPtrField();
  _impl_.enabled_rewrites_.~RepeatedField();
  _impl_.default_timezone_.Destroy();
  _impl_.default_anon_function_report_format_.Destroy();
  if (this != internal_default_instance()) delete _impl_.language_options_;
  if (this != internal_default_instance()) delete _impl_.in_scope_expression_column_;
  if (this != internal_default_instance()) delete _impl_.allowed_hints_and_options_;
}

void AnalyzerOptionsProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnalyzerOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AnalyzerOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_parameters_.Clear();
  _impl_.expression_columns_.Clear();
  _impl_.positional_query_parameters_.Clear();
  _impl_.ddl_pseudo_columns_.Clear();
  _impl_.system_variables_.Clear();
  _impl_.target_column_types_.Clear();
  _impl_.enabled_rewrites_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.default_timezone_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.default_anon_function_report_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.language_options_ != nullptr);
      _impl_.language_options_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.in_scope_expression_column_ != nullptr);
      _impl_.in_scope_expression_column_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.allowed_hints_and_options_ != nullptr);
      _impl_.allowed_hints_and_options_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.error_message_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.statement_context_) -
        reinterpret_cast<char*>(&_impl_.error_message_mode_)) + sizeof(_impl_.statement_context_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.create_new_column_for_each_projected_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.default_anon_kappa_value_) -
        reinterpret_cast<char*>(&_impl_.create_new_column_for_each_projected_output_)) + sizeof(_impl_.default_anon_kappa_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalyzerOptionsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.LanguageOptionsProto language_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_language_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_query_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expression_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_scope_expression_column(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ErrorMessageMode error_message_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::ErrorMessageMode_IsValid(val))) {
            _internal_set_error_message_mode(static_cast<::zetasql::ErrorMessageMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string default_timezone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_default_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.AnalyzerOptionsProto.default_timezone");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool prune_unused_columns = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_prune_unused_columns(&has_bits);
          _impl_.prune_unused_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_undeclared_parameters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_allow_undeclared_parameters(&has_bits);
          _impl_.allow_undeclared_parameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowed_hints_and_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.TypeProto positional_query_parameters = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positional_query_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParameterMode parameter_mode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::ParameterMode_IsValid(val))) {
            _internal_set_parameter_mode(static_cast<::zetasql::ParameterMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.StatementContext statement_context = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::StatementContext_IsValid(val))) {
            _internal_set_statement_context(static_cast<::zetasql::StatementContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ddl_pseudo_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_column_aliases = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_preserve_column_aliases(&has_bits);
          _impl_.preserve_column_aliases_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_system_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.TypeProto target_column_types = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_target_column_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool create_new_column_for_each_projected_output = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_create_new_column_for_each_projected_output(&has_bits);
          _impl_.create_new_column_for_each_projected_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::ResolvedASTRewrite_IsValid(val))) {
              _internal_add_enabled_rewrites(static_cast<::zetasql::ResolvedASTRewrite>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_enabled_rewrites(), ptr, ctx, ::zetasql::ResolvedASTRewrite_IsValid, &_internal_metadata_, 21);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::ParseLocationRecordType_IsValid(val))) {
            _internal_set_parse_location_record_type(static_cast<::zetasql::ParseLocationRecordType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_unnecessary_cast = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_preserve_unnecessary_cast(&has_bits);
          _impl_.preserve_unnecessary_cast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string default_anon_function_report_format = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_default_anon_function_report_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.AnalyzerOptionsProto.default_anon_function_report_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 default_anon_kappa_value = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_default_anon_kappa_value(&has_bits);
          _impl_.default_anon_kappa_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnalyzerOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AnalyzerOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.LanguageOptionsProto language_options = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::language_options(this),
        _Internal::language_options(this).GetCachedSize(), target, stream);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_query_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_query_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_expression_columns_size()); i < n; i++) {
    const auto& repfield = this->_internal_expression_columns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::in_scope_expression_column(this),
        _Internal::in_scope_expression_column(this).GetCachedSize(), target, stream);
  }

  // optional .zetasql.ErrorMessageMode error_message_mode = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_error_message_mode(), target);
  }

  // optional string default_timezone = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_timezone().data(), static_cast<int>(this->_internal_default_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AnalyzerOptionsProto.default_timezone");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_default_timezone(), target);
  }

  // optional bool prune_unused_columns = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_prune_unused_columns(), target);
  }

  // optional bool allow_undeclared_parameters = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_allow_undeclared_parameters(), target);
  }

  // optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::allowed_hints_and_options(this),
        _Internal::allowed_hints_and_options(this).GetCachedSize(), target, stream);
  }

  // repeated .zetasql.TypeProto positional_query_parameters = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_positional_query_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_positional_query_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .zetasql.ParameterMode parameter_mode = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_parameter_mode(), target);
  }

  // optional .zetasql.StatementContext statement_context = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_statement_context(), target);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ddl_pseudo_columns_size()); i < n; i++) {
    const auto& repfield = this->_internal_ddl_pseudo_columns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool preserve_column_aliases = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_preserve_column_aliases(), target);
  }

  // repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_system_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_system_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .zetasql.TypeProto target_column_types = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_target_column_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_target_column_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool create_new_column_for_each_projected_output = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_create_new_column_for_each_projected_output(), target);
  }

  // repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
  for (int i = 0, n = this->_internal_enabled_rewrites_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        21, this->_internal_enabled_rewrites(i), target);
  }

  // optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_parse_location_record_type(), target);
  }

  // optional bool preserve_unnecessary_cast = 24;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_preserve_unnecessary_cast(), target);
  }

  // optional string default_anon_function_report_format = 25;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_anon_function_report_format().data(), static_cast<int>(this->_internal_default_anon_function_report_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AnalyzerOptionsProto.default_anon_function_report_format");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_default_anon_function_report_format(), target);
  }

  // optional int64 default_anon_kappa_value = 26;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_default_anon_kappa_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AnalyzerOptionsProto)
  return target;
}

size_t AnalyzerOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AnalyzerOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
  total_size += 1UL * this->_internal_query_parameters_size();
  for (const auto& msg : this->_impl_.query_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
  total_size += 1UL * this->_internal_expression_columns_size();
  for (const auto& msg : this->_impl_.expression_columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.TypeProto positional_query_parameters = 12;
  total_size += 1UL * this->_internal_positional_query_parameters_size();
  for (const auto& msg : this->_impl_.positional_query_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
  total_size += 1UL * this->_internal_ddl_pseudo_columns_size();
  for (const auto& msg : this->_impl_.ddl_pseudo_columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
  total_size += 2UL * this->_internal_system_variables_size();
  for (const auto& msg : this->_impl_.system_variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.TypeProto target_column_types = 19;
  total_size += 2UL * this->_internal_target_column_types_size();
  for (const auto& msg : this->_impl_.target_column_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enabled_rewrites_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_enabled_rewrites(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string default_timezone = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_timezone());
    }

    // optional string default_anon_function_report_format = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_anon_function_report_format());
    }

    // optional .zetasql.LanguageOptionsProto language_options = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.language_options_);
    }

    // optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.in_scope_expression_column_);
    }

    // optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.allowed_hints_and_options_);
    }

    // optional .zetasql.ErrorMessageMode error_message_mode = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error_message_mode());
    }

    // optional .zetasql.ParameterMode parameter_mode = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_parameter_mode());
    }

    // optional .zetasql.StatementContext statement_context = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_statement_context());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool create_new_column_for_each_projected_output = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool prune_unused_columns = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool allow_undeclared_parameters = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_column_aliases = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_parse_location_record_type());
    }

    // optional bool preserve_unnecessary_cast = 24;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional int64 default_anon_kappa_value = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_default_anon_kappa_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalyzerOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnalyzerOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalyzerOptionsProto::GetClassData() const { return &_class_data_; }


void AnalyzerOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnalyzerOptionsProto*>(&to_msg);
  auto& from = static_cast<const AnalyzerOptionsProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AnalyzerOptionsProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.query_parameters_.MergeFrom(from._impl_.query_parameters_);
  _this->_impl_.expression_columns_.MergeFrom(from._impl_.expression_columns_);
  _this->_impl_.positional_query_parameters_.MergeFrom(from._impl_.positional_query_parameters_);
  _this->_impl_.ddl_pseudo_columns_.MergeFrom(from._impl_.ddl_pseudo_columns_);
  _this->_impl_.system_variables_.MergeFrom(from._impl_.system_variables_);
  _this->_impl_.target_column_types_.MergeFrom(from._impl_.target_column_types_);
  _this->_impl_.enabled_rewrites_.MergeFrom(from._impl_.enabled_rewrites_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_default_timezone(from._internal_default_timezone());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_default_anon_function_report_format(from._internal_default_anon_function_report_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_language_options()->::zetasql::LanguageOptionsProto::MergeFrom(
          from._internal_language_options());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_in_scope_expression_column()->::zetasql::AnalyzerOptionsProto_QueryParameterProto::MergeFrom(
          from._internal_in_scope_expression_column());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_allowed_hints_and_options()->::zetasql::AllowedHintsAndOptionsProto::MergeFrom(
          from._internal_allowed_hints_and_options());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.error_message_mode_ = from._impl_.error_message_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.parameter_mode_ = from._impl_.parameter_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.statement_context_ = from._impl_.statement_context_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.create_new_column_for_each_projected_output_ = from._impl_.create_new_column_for_each_projected_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.prune_unused_columns_ = from._impl_.prune_unused_columns_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.allow_undeclared_parameters_ = from._impl_.allow_undeclared_parameters_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.preserve_column_aliases_ = from._impl_.preserve_column_aliases_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.parse_location_record_type_ = from._impl_.parse_location_record_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.preserve_unnecessary_cast_ = from._impl_.preserve_unnecessary_cast_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.default_anon_kappa_value_ = from._impl_.default_anon_kappa_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalyzerOptionsProto::CopyFrom(const AnalyzerOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AnalyzerOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzerOptionsProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.query_parameters_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.expression_columns_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.positional_query_parameters_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ddl_pseudo_columns_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.system_variables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.target_column_types_))
    return false;
  if (_internal_has_in_scope_expression_column()) {
    if (!_impl_.in_scope_expression_column_->IsInitialized()) return false;
  }
  if (_internal_has_allowed_hints_and_options()) {
    if (!_impl_.allowed_hints_and_options_->IsInitialized()) return false;
  }
  return true;
}

void AnalyzerOptionsProto::InternalSwap(AnalyzerOptionsProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.query_parameters_.InternalSwap(&other->_impl_.query_parameters_);
  _impl_.expression_columns_.InternalSwap(&other->_impl_.expression_columns_);
  _impl_.positional_query_parameters_.InternalSwap(&other->_impl_.positional_query_parameters_);
  _impl_.ddl_pseudo_columns_.InternalSwap(&other->_impl_.ddl_pseudo_columns_);
  _impl_.system_variables_.InternalSwap(&other->_impl_.system_variables_);
  _impl_.target_column_types_.InternalSwap(&other->_impl_.target_column_types_);
  _impl_.enabled_rewrites_.InternalSwap(&other->_impl_.enabled_rewrites_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_timezone_, lhs_arena,
      &other->_impl_.default_timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_anon_function_report_format_, lhs_arena,
      &other->_impl_.default_anon_function_report_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalyzerOptionsProto, _impl_.default_anon_kappa_value_)
      + sizeof(AnalyzerOptionsProto::_impl_.default_anon_kappa_value_)
      - PROTOBUF_FIELD_OFFSET(AnalyzerOptionsProto, _impl_.language_options_)>(
          reinterpret_cast<char*>(&_impl_.language_options_),
          reinterpret_cast<char*>(&other->_impl_.language_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalyzerOptionsProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::ZetaSQLBuiltinFunctionOptionsProto*
Arena::CreateMaybeMessage< ::zetasql::ZetaSQLBuiltinFunctionOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ZetaSQLBuiltinFunctionOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::LanguageOptionsProto*
Arena::CreateMaybeMessage< ::zetasql::LanguageOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::LanguageOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AllowedHintsAndOptionsProto_HintProto*
Arena::CreateMaybeMessage< ::zetasql::AllowedHintsAndOptionsProto_HintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AllowedHintsAndOptionsProto_HintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AllowedHintsAndOptionsProto_OptionProto*
Arena::CreateMaybeMessage< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AllowedHintsAndOptionsProto*
Arena::CreateMaybeMessage< ::zetasql::AllowedHintsAndOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AllowedHintsAndOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnalyzerOptionsProto_QueryParameterProto*
Arena::CreateMaybeMessage< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnalyzerOptionsProto_SystemVariableProto*
Arena::CreateMaybeMessage< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnalyzerOptionsProto*
Arena::CreateMaybeMessage< ::zetasql::AnalyzerOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnalyzerOptionsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
