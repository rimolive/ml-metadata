// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/resolved_ast/serialization.proto

#include "zetasql/resolved_ast/serialization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR ResolvedColumnProto::ResolvedColumnProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.annotation_map_)*/nullptr
  , /*decltype(_impl_.column_id_)*/int64_t{0}} {}
struct ResolvedColumnProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedColumnProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedColumnProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedColumnProtoDefaultTypeInternal _ResolvedColumnProto_default_instance_;
PROTOBUF_CONSTEXPR ValueWithTypeProto::ValueWithTypeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr} {}
struct ValueWithTypeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueWithTypeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueWithTypeProtoDefaultTypeInternal() {}
  union {
    ValueWithTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueWithTypeProtoDefaultTypeInternal _ValueWithTypeProto_default_instance_;
PROTOBUF_CONSTEXPR TableRefProto::TableRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serialization_id_)*/int64_t{0}} {}
struct TableRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableRefProtoDefaultTypeInternal() {}
  union {
    TableRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableRefProtoDefaultTypeInternal _TableRefProto_default_instance_;
PROTOBUF_CONSTEXPR ModelRefProto::ModelRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serialization_id_)*/int64_t{0}} {}
struct ModelRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelRefProtoDefaultTypeInternal() {}
  union {
    ModelRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelRefProtoDefaultTypeInternal _ModelRefProto_default_instance_;
PROTOBUF_CONSTEXPR ConnectionRefProto::ConnectionRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ConnectionRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionRefProtoDefaultTypeInternal() {}
  union {
    ConnectionRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionRefProtoDefaultTypeInternal _ConnectionRefProto_default_instance_;
PROTOBUF_CONSTEXPR ConstantRefProto::ConstantRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ConstantRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConstantRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConstantRefProtoDefaultTypeInternal() {}
  union {
    ConstantRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConstantRefProtoDefaultTypeInternal _ConstantRefProto_default_instance_;
PROTOBUF_CONSTEXPR FunctionRefProto::FunctionRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FunctionRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionRefProtoDefaultTypeInternal() {}
  union {
    FunctionRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionRefProtoDefaultTypeInternal _FunctionRefProto_default_instance_;
PROTOBUF_CONSTEXPR TableValuedFunctionRefProto::TableValuedFunctionRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TableValuedFunctionRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableValuedFunctionRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableValuedFunctionRefProtoDefaultTypeInternal() {}
  union {
    TableValuedFunctionRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableValuedFunctionRefProtoDefaultTypeInternal _TableValuedFunctionRefProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedNodeProto::ResolvedNodeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parse_location_range_)*/nullptr} {}
struct ResolvedNodeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedNodeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedNodeProtoDefaultTypeInternal() {}
  union {
    ResolvedNodeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedNodeProtoDefaultTypeInternal _ResolvedNodeProto_default_instance_;
PROTOBUF_CONSTEXPR FieldDescriptorRefProto::FieldDescriptorRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.containing_proto_)*/nullptr
  , /*decltype(_impl_.number_)*/0} {}
struct FieldDescriptorRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldDescriptorRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldDescriptorRefProtoDefaultTypeInternal() {}
  union {
    FieldDescriptorRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldDescriptorRefProtoDefaultTypeInternal _FieldDescriptorRefProto_default_instance_;
PROTOBUF_CONSTEXPR OneofDescriptorRefProto::OneofDescriptorRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.containing_proto_)*/nullptr
  , /*decltype(_impl_.index_)*/0} {}
struct OneofDescriptorRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneofDescriptorRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneofDescriptorRefProtoDefaultTypeInternal() {}
  union {
    OneofDescriptorRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneofDescriptorRefProtoDefaultTypeInternal _OneofDescriptorRefProto_default_instance_;
PROTOBUF_CONSTEXPR ProcedureRefProto::ProcedureRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ProcedureRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcedureRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcedureRefProtoDefaultTypeInternal() {}
  union {
    ProcedureRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcedureRefProtoDefaultTypeInternal _ProcedureRefProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCollationProto::ResolvedCollationProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.child_list_)*/{}
  , /*decltype(_impl_.collation_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ResolvedCollationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCollationProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCollationProtoDefaultTypeInternal() {}
  union {
    ResolvedCollationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCollationProtoDefaultTypeInternal _ResolvedCollationProto_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fresolved_5fast_2fserialization_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fresolved_5fast_2fserialization_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fresolved_5fast_2fserialization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnProto, _impl_.column_id_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnProto, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnProto, _impl_.annotation_map_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ValueWithTypeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ValueWithTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ValueWithTypeProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ValueWithTypeProto, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::TableRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TableRefProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableRefProto, _impl_.serialization_id_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableRefProto, _impl_.full_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ModelRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ModelRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ModelRefProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ModelRefProto, _impl_.serialization_id_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ModelRefProto, _impl_.full_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ConnectionRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ConnectionRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ConnectionRefProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ConnectionRefProto, _impl_.full_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ConstantRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ConstantRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ConstantRefProto, _impl_.name_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionRefProto, _impl_.name_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionRefProto, _impl_.name_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNodeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNodeProto, _impl_.parse_location_range_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::FieldDescriptorRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FieldDescriptorRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::FieldDescriptorRefProto, _impl_.containing_proto_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FieldDescriptorRefProto, _impl_.number_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::OneofDescriptorRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::OneofDescriptorRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::OneofDescriptorRefProto, _impl_.containing_proto_),
  PROTOBUF_FIELD_OFFSET(::zetasql::OneofDescriptorRefProto, _impl_.index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ProcedureRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProcedureRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ProcedureRefProto, _impl_.name_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCollationProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCollationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCollationProto, _impl_.collation_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCollationProto, _impl_.child_list_),
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::zetasql::ResolvedColumnProto)},
  { 16, 24, -1, sizeof(::zetasql::ValueWithTypeProto)},
  { 26, 35, -1, sizeof(::zetasql::TableRefProto)},
  { 38, 47, -1, sizeof(::zetasql::ModelRefProto)},
  { 50, 58, -1, sizeof(::zetasql::ConnectionRefProto)},
  { 60, 67, -1, sizeof(::zetasql::ConstantRefProto)},
  { 68, 75, -1, sizeof(::zetasql::FunctionRefProto)},
  { 76, 83, -1, sizeof(::zetasql::TableValuedFunctionRefProto)},
  { 84, 91, -1, sizeof(::zetasql::ResolvedNodeProto)},
  { 92, 100, -1, sizeof(::zetasql::FieldDescriptorRefProto)},
  { 102, 110, -1, sizeof(::zetasql::OneofDescriptorRefProto)},
  { 112, 119, -1, sizeof(::zetasql::ProcedureRefProto)},
  { 120, 128, -1, sizeof(::zetasql::ResolvedCollationProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_ResolvedColumnProto_default_instance_._instance,
  &::zetasql::_ValueWithTypeProto_default_instance_._instance,
  &::zetasql::_TableRefProto_default_instance_._instance,
  &::zetasql::_ModelRefProto_default_instance_._instance,
  &::zetasql::_ConnectionRefProto_default_instance_._instance,
  &::zetasql::_ConstantRefProto_default_instance_._instance,
  &::zetasql::_FunctionRefProto_default_instance_._instance,
  &::zetasql::_TableValuedFunctionRefProto_default_instance_._instance,
  &::zetasql::_ResolvedNodeProto_default_instance_._instance,
  &::zetasql::_FieldDescriptorRefProto_default_instance_._instance,
  &::zetasql::_OneofDescriptorRefProto_default_instance_._instance,
  &::zetasql::_ProcedureRefProto_default_instance_._instance,
  &::zetasql::_ResolvedCollationProto_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fresolved_5fast_2fserialization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(zetasql/resolved_ast/serialization.pro"
  "to\022\007zetasql\032\037zetasql/public/annotation.p"
  "roto\032)zetasql/public/parse_location_rang"
  "e.proto\032\031zetasql/public/type.proto\032\032zeta"
  "sql/public/value.proto\"\241\001\n\023ResolvedColum"
  "nProto\022\021\n\tcolumn_id\030\001 \001(\003\022\022\n\ntable_name\030"
  "\002 \001(\t\022\014\n\004name\030\003 \001(\t\022 \n\004type\030\004 \001(\0132\022.zeta"
  "sql.TypeProto\0223\n\016annotation_map\030\005 \001(\0132\033."
  "zetasql.AnnotationMapProto\"Z\n\022ValueWithT"
  "ypeProto\022 \n\004type\030\001 \001(\0132\022.zetasql.TypePro"
  "to\022\"\n\005value\030\002 \001(\0132\023.zetasql.ValueProto\"J"
  "\n\rTableRefProto\022\014\n\004name\030\001 \001(\t\022\030\n\020seriali"
  "zation_id\030\002 \001(\003\022\021\n\tfull_name\030\003 \001(\t\"J\n\rMo"
  "delRefProto\022\014\n\004name\030\001 \001(\t\022\030\n\020serializati"
  "on_id\030\002 \001(\003\022\021\n\tfull_name\030\003 \001(\t\"5\n\022Connec"
  "tionRefProto\022\014\n\004name\030\001 \001(\t\022\021\n\tfull_name\030"
  "\003 \001(\t\" \n\020ConstantRefProto\022\014\n\004name\030\001 \001(\t\""
  " \n\020FunctionRefProto\022\014\n\004name\030\001 \001(\t\"+\n\033Tab"
  "leValuedFunctionRefProto\022\014\n\004name\030\001 \001(\t\"S"
  "\n\021ResolvedNodeProto\022>\n\024parse_location_ra"
  "nge\030\001 \001(\0132 .zetasql.ParseLocationRangePr"
  "oto\"\\\n\027FieldDescriptorRefProto\0221\n\020contai"
  "ning_proto\030\001 \001(\0132\027.zetasql.ProtoTypeProt"
  "o\022\016\n\006number\030\002 \001(\005\"[\n\027OneofDescriptorRefP"
  "roto\0221\n\020containing_proto\030\001 \001(\0132\027.zetasql"
  ".ProtoTypeProto\022\r\n\005index\030\002 \001(\005\"!\n\021Proced"
  "ureRefProto\022\014\n\004name\030\001 \001(\t\"e\n\026ResolvedCol"
  "lationProto\022\026\n\016collation_name\030\001 \001(\t\0223\n\nc"
  "hild_list\030\002 \003(\0132\037.zetasql.ResolvedCollat"
  "ionProtoB,\n\022com.google.zetasqlB\024ZetaSQLS"
  "erializationP\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_deps[4] = {
  &::descriptor_table_zetasql_2fpublic_2fannotation_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fvalue_2eproto,
};
static ::_pbi::once_flag descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto = {
    false, false, 1214, descriptor_table_protodef_zetasql_2fresolved_5fast_2fserialization_2eproto,
    "zetasql/resolved_ast/serialization.proto",
    &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once, descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_deps, 4, 13,
    schemas, file_default_instances, TableStruct_zetasql_2fresolved_5fast_2fserialization_2eproto::offsets,
    file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto, file_level_enum_descriptors_zetasql_2fresolved_5fast_2fserialization_2eproto,
    file_level_service_descriptors_zetasql_2fresolved_5fast_2fserialization_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter() {
  return &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fresolved_5fast_2fserialization_2eproto(&descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto);
namespace zetasql {

// ===================================================================

class ResolvedColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnProto>()._impl_._has_bits_);
  static void set_has_column_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TypeProto& type(const ResolvedColumnProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnnotationMapProto& annotation_map(const ResolvedColumnProto* msg);
  static void set_has_annotation_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::TypeProto&
ResolvedColumnProto::_Internal::type(const ResolvedColumnProto* msg) {
  return *msg->_impl_.type_;
}
const ::zetasql::AnnotationMapProto&
ResolvedColumnProto::_Internal::annotation_map(const ResolvedColumnProto* msg) {
  return *msg->_impl_.annotation_map_;
}
void ResolvedColumnProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ResolvedColumnProto::clear_annotation_map() {
  if (_impl_.annotation_map_ != nullptr) _impl_.annotation_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ResolvedColumnProto::ResolvedColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnProto)
}
ResolvedColumnProto::ResolvedColumnProto(const ResolvedColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedColumnProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.annotation_map_){nullptr}
    , decltype(_impl_.column_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_table_name()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  if (from._internal_has_annotation_map()) {
    _this->_impl_.annotation_map_ = new ::zetasql::AnnotationMapProto(*from._impl_.annotation_map_);
  }
  _this->_impl_.column_id_ = from._impl_.column_id_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnProto)
}

inline void ResolvedColumnProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.annotation_map_){nullptr}
    , decltype(_impl_.column_id_){int64_t{0}}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedColumnProto::~ResolvedColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_;
  if (this != internal_default_instance()) delete _impl_.annotation_map_;
}

void ResolvedColumnProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedColumnProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ResolvedColumnProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.type_ != nullptr);
      _impl_.type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.annotation_map_ != nullptr);
      _impl_.annotation_map_->Clear();
    }
  }
  _impl_.column_id_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolvedColumnProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 column_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column_id(&has_bits);
          _impl_.column_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ResolvedColumnProto.table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ResolvedColumnProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.AnnotationMapProto annotation_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResolvedColumnProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ResolvedColumnProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 column_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_column_id(), target);
  }

  // optional string table_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ResolvedColumnProto.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ResolvedColumnProto.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional .zetasql.TypeProto type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // optional .zetasql.AnnotationMapProto annotation_map = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::annotation_map(this),
        _Internal::annotation_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ResolvedColumnProto)
  return target;
}

size_t ResolvedColumnProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ResolvedColumnProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string table_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_table_name());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .zetasql.TypeProto type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_);
    }

    // optional .zetasql.AnnotationMapProto annotation_map = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.annotation_map_);
    }

    // optional int64 column_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_column_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResolvedColumnProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResolvedColumnProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResolvedColumnProto::GetClassData() const { return &_class_data_; }


void ResolvedColumnProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResolvedColumnProto*>(&to_msg);
  auto& from = static_cast<const ResolvedColumnProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ResolvedColumnProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_table_name(from._internal_table_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type()->::zetasql::TypeProto::MergeFrom(
          from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_annotation_map()->::zetasql::AnnotationMapProto::MergeFrom(
          from._internal_annotation_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.column_id_ = from._impl_.column_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResolvedColumnProto::CopyFrom(const ResolvedColumnProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ResolvedColumnProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedColumnProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!_impl_.type_->IsInitialized()) return false;
  }
  return true;
}

void ResolvedColumnProto::InternalSwap(ResolvedColumnProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResolvedColumnProto, _impl_.column_id_)
      + sizeof(ResolvedColumnProto::_impl_.column_id_)
      - PROTOBUF_FIELD_OFFSET(ResolvedColumnProto, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[0]);
}

// ===================================================================

class ValueWithTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ValueWithTypeProto>()._impl_._has_bits_);
  static const ::zetasql::TypeProto& type(const ValueWithTypeProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ValueProto& value(const ValueWithTypeProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TypeProto&
ValueWithTypeProto::_Internal::type(const ValueWithTypeProto* msg) {
  return *msg->_impl_.type_;
}
const ::zetasql::ValueProto&
ValueWithTypeProto::_Internal::value(const ValueWithTypeProto* msg) {
  return *msg->_impl_.value_;
}
void ValueWithTypeProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ValueWithTypeProto::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ValueWithTypeProto::ValueWithTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ValueWithTypeProto)
}
ValueWithTypeProto::ValueWithTypeProto(const ValueWithTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueWithTypeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::zetasql::ValueProto(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ValueWithTypeProto)
}

inline void ValueWithTypeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.value_){nullptr}
  };
}

ValueWithTypeProto::~ValueWithTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ValueWithTypeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueWithTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.type_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void ValueWithTypeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueWithTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ValueWithTypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.type_ != nullptr);
      _impl_.type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueWithTypeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.TypeProto type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ValueProto value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueWithTypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ValueWithTypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.TypeProto type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // optional .zetasql.ValueProto value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ValueWithTypeProto)
  return target;
}

size_t ValueWithTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ValueWithTypeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .zetasql.TypeProto type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_);
    }

    // optional .zetasql.ValueProto value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueWithTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueWithTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueWithTypeProto::GetClassData() const { return &_class_data_; }


void ValueWithTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueWithTypeProto*>(&to_msg);
  auto& from = static_cast<const ValueWithTypeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ValueWithTypeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_type()->::zetasql::TypeProto::MergeFrom(
          from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::zetasql::ValueProto::MergeFrom(
          from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueWithTypeProto::CopyFrom(const ValueWithTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ValueWithTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueWithTypeProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!_impl_.type_->IsInitialized()) return false;
  }
  return true;
}

void ValueWithTypeProto::InternalSwap(ValueWithTypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValueWithTypeProto, _impl_.value_)
      + sizeof(ValueWithTypeProto::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(ValueWithTypeProto, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueWithTypeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[1]);
}

// ===================================================================

class TableRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TableRefProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialization_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TableRefProto::TableRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.TableRefProto)
}
TableRefProto::TableRefProto(const TableRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.full_name_){}
    , decltype(_impl_.serialization_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_name()) {
    _this->_impl_.full_name_.Set(from._internal_full_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.serialization_id_ = from._impl_.serialization_id_;
  // @@protoc_insertion_point(copy_constructor:zetasql.TableRefProto)
}

inline void TableRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.full_name_){}
    , decltype(_impl_.serialization_id_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableRefProto::~TableRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.TableRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.full_name_.Destroy();
}

void TableRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableRefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TableRefProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.full_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.serialization_id_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableRefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.TableRefProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 serialization_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_serialization_id(&has_bits);
          _impl_.serialization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string full_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_full_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.TableRefProto.full_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableRefProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TableRefProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TableRefProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int64 serialization_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_serialization_id(), target);
  }

  // optional string full_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TableRefProto.full_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TableRefProto)
  return target;
}

size_t TableRefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TableRefProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string full_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

    // optional int64 serialization_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_serialization_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableRefProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableRefProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableRefProto::GetClassData() const { return &_class_data_; }


void TableRefProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableRefProto*>(&to_msg);
  auto& from = static_cast<const TableRefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TableRefProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_full_name(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.serialization_id_ = from._impl_.serialization_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableRefProto::CopyFrom(const TableRefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TableRefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRefProto::IsInitialized() const {
  return true;
}

void TableRefProto::InternalSwap(TableRefProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_name_, lhs_arena,
      &other->_impl_.full_name_, rhs_arena
  );
  swap(_impl_.serialization_id_, other->_impl_.serialization_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[2]);
}

// ===================================================================

class ModelRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelRefProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialization_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ModelRefProto::ModelRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ModelRefProto)
}
ModelRefProto::ModelRefProto(const ModelRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.full_name_){}
    , decltype(_impl_.serialization_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_name()) {
    _this->_impl_.full_name_.Set(from._internal_full_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.serialization_id_ = from._impl_.serialization_id_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ModelRefProto)
}

inline void ModelRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.full_name_){}
    , decltype(_impl_.serialization_id_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelRefProto::~ModelRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ModelRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.full_name_.Destroy();
}

void ModelRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelRefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ModelRefProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.full_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.serialization_id_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ModelRefProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 serialization_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_serialization_id(&has_bits);
          _impl_.serialization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string full_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_full_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ModelRefProto.full_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelRefProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ModelRefProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ModelRefProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int64 serialization_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_serialization_id(), target);
  }

  // optional string full_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ModelRefProto.full_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ModelRefProto)
  return target;
}

size_t ModelRefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ModelRefProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string full_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

    // optional int64 serialization_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_serialization_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelRefProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelRefProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelRefProto::GetClassData() const { return &_class_data_; }


void ModelRefProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelRefProto*>(&to_msg);
  auto& from = static_cast<const ModelRefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ModelRefProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_full_name(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.serialization_id_ = from._impl_.serialization_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelRefProto::CopyFrom(const ModelRefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ModelRefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRefProto::IsInitialized() const {
  return true;
}

void ModelRefProto::InternalSwap(ModelRefProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_name_, lhs_arena,
      &other->_impl_.full_name_, rhs_arena
  );
  swap(_impl_.serialization_id_, other->_impl_.serialization_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[3]);
}

// ===================================================================

class ConnectionRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionRefProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConnectionRefProto::ConnectionRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ConnectionRefProto)
}
ConnectionRefProto::ConnectionRefProto(const ConnectionRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.full_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_name()) {
    _this->_impl_.full_name_.Set(from._internal_full_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ConnectionRefProto)
}

inline void ConnectionRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.full_name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionRefProto::~ConnectionRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ConnectionRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.full_name_.Destroy();
}

void ConnectionRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionRefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ConnectionRefProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.full_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionRefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ConnectionRefProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string full_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_full_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ConnectionRefProto.full_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionRefProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ConnectionRefProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ConnectionRefProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string full_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ConnectionRefProto.full_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ConnectionRefProto)
  return target;
}

size_t ConnectionRefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ConnectionRefProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string full_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionRefProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionRefProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionRefProto::GetClassData() const { return &_class_data_; }


void ConnectionRefProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionRefProto*>(&to_msg);
  auto& from = static_cast<const ConnectionRefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ConnectionRefProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_full_name(from._internal_full_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionRefProto::CopyFrom(const ConnectionRefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ConnectionRefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRefProto::IsInitialized() const {
  return true;
}

void ConnectionRefProto::InternalSwap(ConnectionRefProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_name_, lhs_arena,
      &other->_impl_.full_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[4]);
}

// ===================================================================

class ConstantRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ConstantRefProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConstantRefProto::ConstantRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ConstantRefProto)
}
ConstantRefProto::ConstantRefProto(const ConstantRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConstantRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ConstantRefProto)
}

inline void ConstantRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConstantRefProto::~ConstantRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ConstantRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConstantRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ConstantRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConstantRefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ConstantRefProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstantRefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ConstantRefProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConstantRefProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ConstantRefProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ConstantRefProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ConstantRefProto)
  return target;
}

size_t ConstantRefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ConstantRefProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConstantRefProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConstantRefProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConstantRefProto::GetClassData() const { return &_class_data_; }


void ConstantRefProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConstantRefProto*>(&to_msg);
  auto& from = static_cast<const ConstantRefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ConstantRefProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConstantRefProto::CopyFrom(const ConstantRefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ConstantRefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantRefProto::IsInitialized() const {
  return true;
}

void ConstantRefProto::InternalSwap(ConstantRefProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[5]);
}

// ===================================================================

class FunctionRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRefProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FunctionRefProto::FunctionRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.FunctionRefProto)
}
FunctionRefProto::FunctionRefProto(const FunctionRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.FunctionRefProto)
}

inline void FunctionRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FunctionRefProto::~FunctionRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.FunctionRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void FunctionRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionRefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.FunctionRefProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.FunctionRefProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRefProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.FunctionRefProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.FunctionRefProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.FunctionRefProto)
  return target;
}

size_t FunctionRefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.FunctionRefProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRefProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionRefProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRefProto::GetClassData() const { return &_class_data_; }


void FunctionRefProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionRefProto*>(&to_msg);
  auto& from = static_cast<const FunctionRefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.FunctionRefProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRefProto::CopyFrom(const FunctionRefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.FunctionRefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRefProto::IsInitialized() const {
  return true;
}

void FunctionRefProto::InternalSwap(FunctionRefProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[6]);
}

// ===================================================================

class TableValuedFunctionRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TableValuedFunctionRefProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TableValuedFunctionRefProto::TableValuedFunctionRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.TableValuedFunctionRefProto)
}
TableValuedFunctionRefProto::TableValuedFunctionRefProto(const TableValuedFunctionRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableValuedFunctionRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.TableValuedFunctionRefProto)
}

inline void TableValuedFunctionRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableValuedFunctionRefProto::~TableValuedFunctionRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.TableValuedFunctionRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableValuedFunctionRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void TableValuedFunctionRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableValuedFunctionRefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TableValuedFunctionRefProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableValuedFunctionRefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.TableValuedFunctionRefProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableValuedFunctionRefProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TableValuedFunctionRefProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TableValuedFunctionRefProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TableValuedFunctionRefProto)
  return target;
}

size_t TableValuedFunctionRefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TableValuedFunctionRefProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableValuedFunctionRefProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableValuedFunctionRefProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableValuedFunctionRefProto::GetClassData() const { return &_class_data_; }


void TableValuedFunctionRefProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableValuedFunctionRefProto*>(&to_msg);
  auto& from = static_cast<const TableValuedFunctionRefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TableValuedFunctionRefProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableValuedFunctionRefProto::CopyFrom(const TableValuedFunctionRefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TableValuedFunctionRefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableValuedFunctionRefProto::IsInitialized() const {
  return true;
}

void TableValuedFunctionRefProto::InternalSwap(TableValuedFunctionRefProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TableValuedFunctionRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[7]);
}

// ===================================================================

class ResolvedNodeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedNodeProto>()._impl_._has_bits_);
  static const ::zetasql::ParseLocationRangeProto& parse_location_range(const ResolvedNodeProto* msg);
  static void set_has_parse_location_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ParseLocationRangeProto&
ResolvedNodeProto::_Internal::parse_location_range(const ResolvedNodeProto* msg) {
  return *msg->_impl_.parse_location_range_;
}
void ResolvedNodeProto::clear_parse_location_range() {
  if (_impl_.parse_location_range_ != nullptr) _impl_.parse_location_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ResolvedNodeProto::ResolvedNodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedNodeProto)
}
ResolvedNodeProto::ResolvedNodeProto(const ResolvedNodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedNodeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parse_location_range_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parse_location_range()) {
    _this->_impl_.parse_location_range_ = new ::zetasql::ParseLocationRangeProto(*from._impl_.parse_location_range_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedNodeProto)
}

inline void ResolvedNodeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parse_location_range_){nullptr}
  };
}

ResolvedNodeProto::~ResolvedNodeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedNodeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedNodeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parse_location_range_;
}

void ResolvedNodeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedNodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ResolvedNodeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.parse_location_range_ != nullptr);
    _impl_.parse_location_range_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolvedNodeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.ParseLocationRangeProto parse_location_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parse_location_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResolvedNodeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ResolvedNodeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.ParseLocationRangeProto parse_location_range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parse_location_range(this),
        _Internal::parse_location_range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ResolvedNodeProto)
  return target;
}

size_t ResolvedNodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ResolvedNodeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zetasql.ParseLocationRangeProto parse_location_range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parse_location_range_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResolvedNodeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResolvedNodeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResolvedNodeProto::GetClassData() const { return &_class_data_; }


void ResolvedNodeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResolvedNodeProto*>(&to_msg);
  auto& from = static_cast<const ResolvedNodeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ResolvedNodeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_parse_location_range()) {
    _this->_internal_mutable_parse_location_range()->::zetasql::ParseLocationRangeProto::MergeFrom(
        from._internal_parse_location_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResolvedNodeProto::CopyFrom(const ResolvedNodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ResolvedNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedNodeProto::IsInitialized() const {
  return true;
}

void ResolvedNodeProto::InternalSwap(ResolvedNodeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.parse_location_range_, other->_impl_.parse_location_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedNodeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[8]);
}

// ===================================================================

class FieldDescriptorRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldDescriptorRefProto>()._impl_._has_bits_);
  static const ::zetasql::ProtoTypeProto& containing_proto(const FieldDescriptorRefProto* msg);
  static void set_has_containing_proto(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ProtoTypeProto&
FieldDescriptorRefProto::_Internal::containing_proto(const FieldDescriptorRefProto* msg) {
  return *msg->_impl_.containing_proto_;
}
void FieldDescriptorRefProto::clear_containing_proto() {
  if (_impl_.containing_proto_ != nullptr) _impl_.containing_proto_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FieldDescriptorRefProto::FieldDescriptorRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.FieldDescriptorRefProto)
}
FieldDescriptorRefProto::FieldDescriptorRefProto(const FieldDescriptorRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldDescriptorRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containing_proto_){nullptr}
    , decltype(_impl_.number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_containing_proto()) {
    _this->_impl_.containing_proto_ = new ::zetasql::ProtoTypeProto(*from._impl_.containing_proto_);
  }
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:zetasql.FieldDescriptorRefProto)
}

inline void FieldDescriptorRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containing_proto_){nullptr}
    , decltype(_impl_.number_){0}
  };
}

FieldDescriptorRefProto::~FieldDescriptorRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.FieldDescriptorRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldDescriptorRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.containing_proto_;
}

void FieldDescriptorRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldDescriptorRefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.FieldDescriptorRefProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.containing_proto_ != nullptr);
    _impl_.containing_proto_->Clear();
  }
  _impl_.number_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldDescriptorRefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.ProtoTypeProto containing_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_containing_proto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_number(&has_bits);
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldDescriptorRefProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.FieldDescriptorRefProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.ProtoTypeProto containing_proto = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::containing_proto(this),
        _Internal::containing_proto(this).GetCachedSize(), target, stream);
  }

  // optional int32 number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.FieldDescriptorRefProto)
  return target;
}

size_t FieldDescriptorRefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.FieldDescriptorRefProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .zetasql.ProtoTypeProto containing_proto = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.containing_proto_);
    }

    // optional int32 number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldDescriptorRefProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldDescriptorRefProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldDescriptorRefProto::GetClassData() const { return &_class_data_; }


void FieldDescriptorRefProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldDescriptorRefProto*>(&to_msg);
  auto& from = static_cast<const FieldDescriptorRefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.FieldDescriptorRefProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_containing_proto()->::zetasql::ProtoTypeProto::MergeFrom(
          from._internal_containing_proto());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.number_ = from._impl_.number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldDescriptorRefProto::CopyFrom(const FieldDescriptorRefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.FieldDescriptorRefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldDescriptorRefProto::IsInitialized() const {
  return true;
}

void FieldDescriptorRefProto::InternalSwap(FieldDescriptorRefProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldDescriptorRefProto, _impl_.number_)
      + sizeof(FieldDescriptorRefProto::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(FieldDescriptorRefProto, _impl_.containing_proto_)>(
          reinterpret_cast<char*>(&_impl_.containing_proto_),
          reinterpret_cast<char*>(&other->_impl_.containing_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldDescriptorRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[9]);
}

// ===================================================================

class OneofDescriptorRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OneofDescriptorRefProto>()._impl_._has_bits_);
  static const ::zetasql::ProtoTypeProto& containing_proto(const OneofDescriptorRefProto* msg);
  static void set_has_containing_proto(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ProtoTypeProto&
OneofDescriptorRefProto::_Internal::containing_proto(const OneofDescriptorRefProto* msg) {
  return *msg->_impl_.containing_proto_;
}
void OneofDescriptorRefProto::clear_containing_proto() {
  if (_impl_.containing_proto_ != nullptr) _impl_.containing_proto_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OneofDescriptorRefProto::OneofDescriptorRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.OneofDescriptorRefProto)
}
OneofDescriptorRefProto::OneofDescriptorRefProto(const OneofDescriptorRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OneofDescriptorRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containing_proto_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_containing_proto()) {
    _this->_impl_.containing_proto_ = new ::zetasql::ProtoTypeProto(*from._impl_.containing_proto_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:zetasql.OneofDescriptorRefProto)
}

inline void OneofDescriptorRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containing_proto_){nullptr}
    , decltype(_impl_.index_){0}
  };
}

OneofDescriptorRefProto::~OneofDescriptorRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.OneofDescriptorRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OneofDescriptorRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.containing_proto_;
}

void OneofDescriptorRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OneofDescriptorRefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.OneofDescriptorRefProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.containing_proto_ != nullptr);
    _impl_.containing_proto_->Clear();
  }
  _impl_.index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneofDescriptorRefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.ProtoTypeProto containing_proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_containing_proto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneofDescriptorRefProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.OneofDescriptorRefProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.ProtoTypeProto containing_proto = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::containing_proto(this),
        _Internal::containing_proto(this).GetCachedSize(), target, stream);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.OneofDescriptorRefProto)
  return target;
}

size_t OneofDescriptorRefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.OneofDescriptorRefProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .zetasql.ProtoTypeProto containing_proto = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.containing_proto_);
    }

    // optional int32 index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneofDescriptorRefProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OneofDescriptorRefProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneofDescriptorRefProto::GetClassData() const { return &_class_data_; }


void OneofDescriptorRefProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OneofDescriptorRefProto*>(&to_msg);
  auto& from = static_cast<const OneofDescriptorRefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.OneofDescriptorRefProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_containing_proto()->::zetasql::ProtoTypeProto::MergeFrom(
          from._internal_containing_proto());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneofDescriptorRefProto::CopyFrom(const OneofDescriptorRefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.OneofDescriptorRefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneofDescriptorRefProto::IsInitialized() const {
  return true;
}

void OneofDescriptorRefProto::InternalSwap(OneofDescriptorRefProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OneofDescriptorRefProto, _impl_.index_)
      + sizeof(OneofDescriptorRefProto::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(OneofDescriptorRefProto, _impl_.containing_proto_)>(
          reinterpret_cast<char*>(&_impl_.containing_proto_),
          reinterpret_cast<char*>(&other->_impl_.containing_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OneofDescriptorRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[10]);
}

// ===================================================================

class ProcedureRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcedureRefProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcedureRefProto::ProcedureRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ProcedureRefProto)
}
ProcedureRefProto::ProcedureRefProto(const ProcedureRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcedureRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ProcedureRefProto)
}

inline void ProcedureRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcedureRefProto::~ProcedureRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ProcedureRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcedureRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ProcedureRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcedureRefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ProcedureRefProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcedureRefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ProcedureRefProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcedureRefProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ProcedureRefProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ProcedureRefProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ProcedureRefProto)
  return target;
}

size_t ProcedureRefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ProcedureRefProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcedureRefProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcedureRefProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcedureRefProto::GetClassData() const { return &_class_data_; }


void ProcedureRefProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcedureRefProto*>(&to_msg);
  auto& from = static_cast<const ProcedureRefProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ProcedureRefProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcedureRefProto::CopyFrom(const ProcedureRefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ProcedureRefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcedureRefProto::IsInitialized() const {
  return true;
}

void ProcedureRefProto::InternalSwap(ProcedureRefProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcedureRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[11]);
}

// ===================================================================

class ResolvedCollationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCollationProto>()._impl_._has_bits_);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResolvedCollationProto::ResolvedCollationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCollationProto)
}
ResolvedCollationProto::ResolvedCollationProto(const ResolvedCollationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCollationProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.child_list_){from._impl_.child_list_}
    , decltype(_impl_.collation_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_collation_name()) {
    _this->_impl_.collation_name_.Set(from._internal_collation_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCollationProto)
}

inline void ResolvedCollationProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.child_list_){arena}
    , decltype(_impl_.collation_name_){}
  };
  _impl_.collation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedCollationProto::~ResolvedCollationProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCollationProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCollationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.child_list_.~RepeatedPtrField();
  _impl_.collation_name_.Destroy();
}

void ResolvedCollationProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCollationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ResolvedCollationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.child_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.collation_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolvedCollationProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string collation_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_collation_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ResolvedCollationProto.collation_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.ResolvedCollationProto child_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResolvedCollationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ResolvedCollationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string collation_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collation_name().data(), static_cast<int>(this->_internal_collation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ResolvedCollationProto.collation_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collation_name(), target);
  }

  // repeated .zetasql.ResolvedCollationProto child_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_child_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_child_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ResolvedCollationProto)
  return target;
}

size_t ResolvedCollationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ResolvedCollationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.ResolvedCollationProto child_list = 2;
  total_size += 1UL * this->_internal_child_list_size();
  for (const auto& msg : this->_impl_.child_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string collation_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collation_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResolvedCollationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResolvedCollationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResolvedCollationProto::GetClassData() const { return &_class_data_; }


void ResolvedCollationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResolvedCollationProto*>(&to_msg);
  auto& from = static_cast<const ResolvedCollationProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ResolvedCollationProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.child_list_.MergeFrom(from._impl_.child_list_);
  if (from._internal_has_collation_name()) {
    _this->_internal_set_collation_name(from._internal_collation_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResolvedCollationProto::CopyFrom(const ResolvedCollationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ResolvedCollationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedCollationProto::IsInitialized() const {
  return true;
}

void ResolvedCollationProto::InternalSwap(ResolvedCollationProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.child_list_.InternalSwap(&other->_impl_.child_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collation_name_, lhs_arena,
      &other->_impl_.collation_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCollationProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fserialization_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ValueWithTypeProto*
Arena::CreateMaybeMessage< ::zetasql::ValueWithTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ValueWithTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TableRefProto*
Arena::CreateMaybeMessage< ::zetasql::TableRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TableRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ModelRefProto*
Arena::CreateMaybeMessage< ::zetasql::ModelRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ModelRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ConnectionRefProto*
Arena::CreateMaybeMessage< ::zetasql::ConnectionRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ConnectionRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ConstantRefProto*
Arena::CreateMaybeMessage< ::zetasql::ConstantRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ConstantRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::FunctionRefProto*
Arena::CreateMaybeMessage< ::zetasql::FunctionRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FunctionRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TableValuedFunctionRefProto*
Arena::CreateMaybeMessage< ::zetasql::TableValuedFunctionRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TableValuedFunctionRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedNodeProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedNodeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedNodeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::FieldDescriptorRefProto*
Arena::CreateMaybeMessage< ::zetasql::FieldDescriptorRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FieldDescriptorRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::OneofDescriptorRefProto*
Arena::CreateMaybeMessage< ::zetasql::OneofDescriptorRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::OneofDescriptorRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ProcedureRefProto*
Arena::CreateMaybeMessage< ::zetasql::ProcedureRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ProcedureRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCollationProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCollationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCollationProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
