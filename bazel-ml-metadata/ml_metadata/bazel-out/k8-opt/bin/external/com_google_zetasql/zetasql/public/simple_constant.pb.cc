// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/simple_constant.proto

#include "zetasql/public/simple_constant.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR SimpleConstantProto::SimpleConstantProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr} {}
struct SimpleConstantProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleConstantProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleConstantProtoDefaultTypeInternal() {}
  union {
    SimpleConstantProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleConstantProtoDefaultTypeInternal _SimpleConstantProto_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fpublic_2fsimple_5fconstant_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fpublic_2fsimple_5fconstant_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2fsimple_5fconstant_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2fsimple_5fconstant_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleConstantProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleConstantProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleConstantProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleConstantProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleConstantProto, _impl_.value_),
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::zetasql::SimpleConstantProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_SimpleConstantProto_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fpublic_2fsimple_5fconstant_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$zetasql/public/simple_constant.proto\022\007"
  "zetasql\032\031zetasql/public/type.proto\032\032zeta"
  "sql/public/value.proto\"n\n\023SimpleConstant"
  "Proto\022\021\n\tname_path\030\001 \003(\t\022 \n\004type\030\002 \001(\0132\022"
  ".zetasql.TypeProto\022\"\n\005value\030\003 \001(\0132\023.zeta"
  "sql.ValueProtoB*\n\022com.google.zetasqlB\024Si"
  "mpleConstantProtos"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto_deps[2] = {
  &::descriptor_table_zetasql_2fpublic_2ftype_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fvalue_2eproto,
};
static ::_pbi::once_flag descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto = {
    false, false, 258, descriptor_table_protodef_zetasql_2fpublic_2fsimple_5fconstant_2eproto,
    "zetasql/public/simple_constant.proto",
    &descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto_once, descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_zetasql_2fpublic_2fsimple_5fconstant_2eproto::offsets,
    file_level_metadata_zetasql_2fpublic_2fsimple_5fconstant_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2fsimple_5fconstant_2eproto,
    file_level_service_descriptors_zetasql_2fpublic_2fsimple_5fconstant_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2fsimple_5fconstant_2eproto(&descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto);
namespace zetasql {

// ===================================================================

class SimpleConstantProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleConstantProto>()._impl_._has_bits_);
  static const ::zetasql::TypeProto& type(const SimpleConstantProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ValueProto& value(const SimpleConstantProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TypeProto&
SimpleConstantProto::_Internal::type(const SimpleConstantProto* msg) {
  return *msg->_impl_.type_;
}
const ::zetasql::ValueProto&
SimpleConstantProto::_Internal::value(const SimpleConstantProto* msg) {
  return *msg->_impl_.value_;
}
void SimpleConstantProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SimpleConstantProto::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SimpleConstantProto::SimpleConstantProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.SimpleConstantProto)
}
SimpleConstantProto::SimpleConstantProto(const SimpleConstantProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleConstantProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::zetasql::ValueProto(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.SimpleConstantProto)
}

inline void SimpleConstantProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.value_){nullptr}
  };
}

SimpleConstantProto::~SimpleConstantProto() {
  // @@protoc_insertion_point(destructor:zetasql.SimpleConstantProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleConstantProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.type_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void SimpleConstantProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleConstantProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.SimpleConstantProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_path_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.type_ != nullptr);
      _impl_.type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleConstantProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string name_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_path();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "zetasql.SimpleConstantProto.name_path");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ValueProto value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleConstantProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.SimpleConstantProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name_path = 1;
  for (int i = 0, n = this->_internal_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.SimpleConstantProto.name_path");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // optional .zetasql.ValueProto value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.SimpleConstantProto)
  return target;
}

size_t SimpleConstantProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.SimpleConstantProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.name_path_.size());
  for (int i = 0, n = _impl_.name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.name_path_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .zetasql.TypeProto type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_);
    }

    // optional .zetasql.ValueProto value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleConstantProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleConstantProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleConstantProto::GetClassData() const { return &_class_data_; }


void SimpleConstantProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleConstantProto*>(&to_msg);
  auto& from = static_cast<const SimpleConstantProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.SimpleConstantProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_path_.MergeFrom(from._impl_.name_path_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_type()->::zetasql::TypeProto::MergeFrom(
          from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::zetasql::ValueProto::MergeFrom(
          from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleConstantProto::CopyFrom(const SimpleConstantProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.SimpleConstantProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleConstantProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!_impl_.type_->IsInitialized()) return false;
  }
  return true;
}

void SimpleConstantProto::InternalSwap(SimpleConstantProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_path_.InternalSwap(&other->_impl_.name_path_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleConstantProto, _impl_.value_)
      + sizeof(SimpleConstantProto::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(SimpleConstantProto, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleConstantProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto_getter, &descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2fsimple_5fconstant_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::SimpleConstantProto*
Arena::CreateMaybeMessage< ::zetasql::SimpleConstantProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::SimpleConstantProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
