// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/simple_constant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5fconstant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5fconstant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/type.pb.h"
#include "zetasql/public/value.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2fsimple_5fconstant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2fsimple_5fconstant_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2fsimple_5fconstant_2eproto;
namespace zetasql {
class SimpleConstantProto;
struct SimpleConstantProtoDefaultTypeInternal;
extern SimpleConstantProtoDefaultTypeInternal _SimpleConstantProto_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::SimpleConstantProto* Arena::CreateMaybeMessage<::zetasql::SimpleConstantProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class SimpleConstantProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleConstantProto) */ {
 public:
  inline SimpleConstantProto() : SimpleConstantProto(nullptr) {}
  ~SimpleConstantProto() override;
  explicit PROTOBUF_CONSTEXPR SimpleConstantProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleConstantProto(const SimpleConstantProto& from);
  SimpleConstantProto(SimpleConstantProto&& from) noexcept
    : SimpleConstantProto() {
    *this = ::std::move(from);
  }

  inline SimpleConstantProto& operator=(const SimpleConstantProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleConstantProto& operator=(SimpleConstantProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleConstantProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleConstantProto* internal_default_instance() {
    return reinterpret_cast<const SimpleConstantProto*>(
               &_SimpleConstantProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimpleConstantProto& a, SimpleConstantProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleConstantProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleConstantProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleConstantProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleConstantProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleConstantProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleConstantProto& from) {
    SimpleConstantProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleConstantProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.SimpleConstantProto";
  }
  protected:
  explicit SimpleConstantProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamePathFieldNumber = 1,
    kTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // repeated string name_path = 1;
  int name_path_size() const;
  private:
  int _internal_name_path_size() const;
  public:
  void clear_name_path();
  const std::string& name_path(int index) const;
  std::string* mutable_name_path(int index);
  void set_name_path(int index, const std::string& value);
  void set_name_path(int index, std::string&& value);
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  std::string* add_name_path();
  void add_name_path(const std::string& value);
  void add_name_path(std::string&& value);
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_path();
  private:
  const std::string& _internal_name_path(int index) const;
  std::string* _internal_add_name_path();
  public:

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zetasql::TypeProto& type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  ::zetasql::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // optional .zetasql.ValueProto value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::zetasql::ValueProto& value() const;
  PROTOBUF_NODISCARD ::zetasql::ValueProto* release_value();
  ::zetasql::ValueProto* mutable_value();
  void set_allocated_value(::zetasql::ValueProto* value);
  private:
  const ::zetasql::ValueProto& _internal_value() const;
  ::zetasql::ValueProto* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::zetasql::ValueProto* value);
  ::zetasql::ValueProto* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:zetasql.SimpleConstantProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_path_;
    ::zetasql::TypeProto* type_;
    ::zetasql::ValueProto* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fsimple_5fconstant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleConstantProto

// repeated string name_path = 1;
inline int SimpleConstantProto::_internal_name_path_size() const {
  return _impl_.name_path_.size();
}
inline int SimpleConstantProto::name_path_size() const {
  return _internal_name_path_size();
}
inline void SimpleConstantProto::clear_name_path() {
  _impl_.name_path_.Clear();
}
inline std::string* SimpleConstantProto::add_name_path() {
  std::string* _s = _internal_add_name_path();
  // @@protoc_insertion_point(field_add_mutable:zetasql.SimpleConstantProto.name_path)
  return _s;
}
inline const std::string& SimpleConstantProto::_internal_name_path(int index) const {
  return _impl_.name_path_.Get(index);
}
inline const std::string& SimpleConstantProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleConstantProto.name_path)
  return _internal_name_path(index);
}
inline std::string* SimpleConstantProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleConstantProto.name_path)
  return _impl_.name_path_.Mutable(index);
}
inline void SimpleConstantProto::set_name_path(int index, const std::string& value) {
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleConstantProto.name_path)
}
inline void SimpleConstantProto::set_name_path(int index, std::string&& value) {
  _impl_.name_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.SimpleConstantProto.name_path)
}
inline void SimpleConstantProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleConstantProto.name_path)
}
inline void SimpleConstantProto::set_name_path(int index, const char* value, size_t size) {
  _impl_.name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleConstantProto.name_path)
}
inline std::string* SimpleConstantProto::_internal_add_name_path() {
  return _impl_.name_path_.Add();
}
inline void SimpleConstantProto::add_name_path(const std::string& value) {
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.SimpleConstantProto.name_path)
}
inline void SimpleConstantProto::add_name_path(std::string&& value) {
  _impl_.name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.SimpleConstantProto.name_path)
}
inline void SimpleConstantProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.SimpleConstantProto.name_path)
}
inline void SimpleConstantProto::add_name_path(const char* value, size_t size) {
  _impl_.name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.SimpleConstantProto.name_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SimpleConstantProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleConstantProto.name_path)
  return _impl_.name_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SimpleConstantProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleConstantProto.name_path)
  return &_impl_.name_path_;
}

// optional .zetasql.TypeProto type = 2;
inline bool SimpleConstantProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool SimpleConstantProto::has_type() const {
  return _internal_has_type();
}
inline const ::zetasql::TypeProto& SimpleConstantProto::_internal_type() const {
  const ::zetasql::TypeProto* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& SimpleConstantProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleConstantProto.type)
  return _internal_type();
}
inline void SimpleConstantProto::unsafe_arena_set_allocated_type(
    ::zetasql::TypeProto* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.SimpleConstantProto.type)
}
inline ::zetasql::TypeProto* SimpleConstantProto::release_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* SimpleConstantProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleConstantProto.type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* SimpleConstantProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::zetasql::TypeProto* SimpleConstantProto::mutable_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleConstantProto.type)
  return _msg;
}
inline void SimpleConstantProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleConstantProto.type)
}

// optional .zetasql.ValueProto value = 3;
inline bool SimpleConstantProto::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool SimpleConstantProto::has_value() const {
  return _internal_has_value();
}
inline const ::zetasql::ValueProto& SimpleConstantProto::_internal_value() const {
  const ::zetasql::ValueProto* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ValueProto&>(
      ::zetasql::_ValueProto_default_instance_);
}
inline const ::zetasql::ValueProto& SimpleConstantProto::value() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleConstantProto.value)
  return _internal_value();
}
inline void SimpleConstantProto::unsafe_arena_set_allocated_value(
    ::zetasql::ValueProto* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.SimpleConstantProto.value)
}
inline ::zetasql::ValueProto* SimpleConstantProto::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ValueProto* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ValueProto* SimpleConstantProto::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleConstantProto.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ValueProto* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::zetasql::ValueProto* SimpleConstantProto::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ValueProto>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::zetasql::ValueProto* SimpleConstantProto::mutable_value() {
  ::zetasql::ValueProto* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleConstantProto.value)
  return _msg;
}
inline void SimpleConstantProto::set_allocated_value(::zetasql::ValueProto* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleConstantProto.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5fconstant_2eproto
