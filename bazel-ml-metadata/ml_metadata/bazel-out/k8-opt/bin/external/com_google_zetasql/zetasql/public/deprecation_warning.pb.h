// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/deprecation_warning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/error_location.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto;
namespace zetasql {
class DeprecationWarning;
struct DeprecationWarningDefaultTypeInternal;
extern DeprecationWarningDefaultTypeInternal _DeprecationWarning_default_instance_;
class FreestandingDeprecationWarning;
struct FreestandingDeprecationWarningDefaultTypeInternal;
extern FreestandingDeprecationWarningDefaultTypeInternal _FreestandingDeprecationWarning_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::DeprecationWarning* Arena::CreateMaybeMessage<::zetasql::DeprecationWarning>(Arena*);
template<> ::zetasql::FreestandingDeprecationWarning* Arena::CreateMaybeMessage<::zetasql::FreestandingDeprecationWarning>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

enum DeprecationWarning_Kind : int {
  DeprecationWarning_Kind___Kind__switch_must_have_a_default__ = -1,
  DeprecationWarning_Kind_UNKNOWN = 0,
  DeprecationWarning_Kind_DEPRECATED_FUNCTION = 1,
  DeprecationWarning_Kind_DEPRECATED_FUNCTION_SIGNATURE = 2,
  DeprecationWarning_Kind_PROTO3_FIELD_PRESENCE = 3
};
bool DeprecationWarning_Kind_IsValid(int value);
constexpr DeprecationWarning_Kind DeprecationWarning_Kind_Kind_MIN = DeprecationWarning_Kind___Kind__switch_must_have_a_default__;
constexpr DeprecationWarning_Kind DeprecationWarning_Kind_Kind_MAX = DeprecationWarning_Kind_PROTO3_FIELD_PRESENCE;
constexpr int DeprecationWarning_Kind_Kind_ARRAYSIZE = DeprecationWarning_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeprecationWarning_Kind_descriptor();
template<typename T>
inline const std::string& DeprecationWarning_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeprecationWarning_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeprecationWarning_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeprecationWarning_Kind_descriptor(), enum_t_value);
}
inline bool DeprecationWarning_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeprecationWarning_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeprecationWarning_Kind>(
    DeprecationWarning_Kind_descriptor(), name, value);
}
// ===================================================================

class DeprecationWarning final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.DeprecationWarning) */ {
 public:
  inline DeprecationWarning() : DeprecationWarning(nullptr) {}
  ~DeprecationWarning() override;
  explicit PROTOBUF_CONSTEXPR DeprecationWarning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeprecationWarning(const DeprecationWarning& from);
  DeprecationWarning(DeprecationWarning&& from) noexcept
    : DeprecationWarning() {
    *this = ::std::move(from);
  }

  inline DeprecationWarning& operator=(const DeprecationWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeprecationWarning& operator=(DeprecationWarning&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeprecationWarning& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeprecationWarning* internal_default_instance() {
    return reinterpret_cast<const DeprecationWarning*>(
               &_DeprecationWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeprecationWarning& a, DeprecationWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(DeprecationWarning* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeprecationWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeprecationWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeprecationWarning>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeprecationWarning& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeprecationWarning& from) {
    DeprecationWarning::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeprecationWarning* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.DeprecationWarning";
  }
  protected:
  explicit DeprecationWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeprecationWarning_Kind Kind;
  static constexpr Kind __Kind__switch_must_have_a_default__ =
    DeprecationWarning_Kind___Kind__switch_must_have_a_default__;
  static constexpr Kind UNKNOWN =
    DeprecationWarning_Kind_UNKNOWN;
  static constexpr Kind DEPRECATED_FUNCTION =
    DeprecationWarning_Kind_DEPRECATED_FUNCTION;
  static constexpr Kind DEPRECATED_FUNCTION_SIGNATURE =
    DeprecationWarning_Kind_DEPRECATED_FUNCTION_SIGNATURE;
  static constexpr Kind PROTO3_FIELD_PRESENCE =
    DeprecationWarning_Kind_PROTO3_FIELD_PRESENCE;
  static inline bool Kind_IsValid(int value) {
    return DeprecationWarning_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    DeprecationWarning_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    DeprecationWarning_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    DeprecationWarning_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return DeprecationWarning_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return DeprecationWarning_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return DeprecationWarning_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKindFieldNumber = 1,
  };
  // optional .zetasql.DeprecationWarning.Kind kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::zetasql::DeprecationWarning_Kind kind() const;
  void set_kind(::zetasql::DeprecationWarning_Kind value);
  private:
  ::zetasql::DeprecationWarning_Kind _internal_kind() const;
  void _internal_set_kind(::zetasql::DeprecationWarning_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.DeprecationWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int kind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class FreestandingDeprecationWarning final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.FreestandingDeprecationWarning) */ {
 public:
  inline FreestandingDeprecationWarning() : FreestandingDeprecationWarning(nullptr) {}
  ~FreestandingDeprecationWarning() override;
  explicit PROTOBUF_CONSTEXPR FreestandingDeprecationWarning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FreestandingDeprecationWarning(const FreestandingDeprecationWarning& from);
  FreestandingDeprecationWarning(FreestandingDeprecationWarning&& from) noexcept
    : FreestandingDeprecationWarning() {
    *this = ::std::move(from);
  }

  inline FreestandingDeprecationWarning& operator=(const FreestandingDeprecationWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreestandingDeprecationWarning& operator=(FreestandingDeprecationWarning&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FreestandingDeprecationWarning& default_instance() {
    return *internal_default_instance();
  }
  static inline const FreestandingDeprecationWarning* internal_default_instance() {
    return reinterpret_cast<const FreestandingDeprecationWarning*>(
               &_FreestandingDeprecationWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FreestandingDeprecationWarning& a, FreestandingDeprecationWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(FreestandingDeprecationWarning* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreestandingDeprecationWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FreestandingDeprecationWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FreestandingDeprecationWarning>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FreestandingDeprecationWarning& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FreestandingDeprecationWarning& from) {
    FreestandingDeprecationWarning::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreestandingDeprecationWarning* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.FreestandingDeprecationWarning";
  }
  protected:
  explicit FreestandingDeprecationWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kCaretStringFieldNumber = 2,
    kErrorLocationFieldNumber = 3,
    kDeprecationWarningFieldNumber = 4,
  };
  // optional string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string caret_string = 2;
  bool has_caret_string() const;
  private:
  bool _internal_has_caret_string() const;
  public:
  void clear_caret_string();
  const std::string& caret_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_caret_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_caret_string();
  PROTOBUF_NODISCARD std::string* release_caret_string();
  void set_allocated_caret_string(std::string* caret_string);
  private:
  const std::string& _internal_caret_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_caret_string(const std::string& value);
  std::string* _internal_mutable_caret_string();
  public:

  // optional .zetasql.ErrorLocation error_location = 3;
  bool has_error_location() const;
  private:
  bool _internal_has_error_location() const;
  public:
  void clear_error_location();
  const ::zetasql::ErrorLocation& error_location() const;
  PROTOBUF_NODISCARD ::zetasql::ErrorLocation* release_error_location();
  ::zetasql::ErrorLocation* mutable_error_location();
  void set_allocated_error_location(::zetasql::ErrorLocation* error_location);
  private:
  const ::zetasql::ErrorLocation& _internal_error_location() const;
  ::zetasql::ErrorLocation* _internal_mutable_error_location();
  public:
  void unsafe_arena_set_allocated_error_location(
      ::zetasql::ErrorLocation* error_location);
  ::zetasql::ErrorLocation* unsafe_arena_release_error_location();

  // optional .zetasql.DeprecationWarning deprecation_warning = 4;
  bool has_deprecation_warning() const;
  private:
  bool _internal_has_deprecation_warning() const;
  public:
  void clear_deprecation_warning();
  const ::zetasql::DeprecationWarning& deprecation_warning() const;
  PROTOBUF_NODISCARD ::zetasql::DeprecationWarning* release_deprecation_warning();
  ::zetasql::DeprecationWarning* mutable_deprecation_warning();
  void set_allocated_deprecation_warning(::zetasql::DeprecationWarning* deprecation_warning);
  private:
  const ::zetasql::DeprecationWarning& _internal_deprecation_warning() const;
  ::zetasql::DeprecationWarning* _internal_mutable_deprecation_warning();
  public:
  void unsafe_arena_set_allocated_deprecation_warning(
      ::zetasql::DeprecationWarning* deprecation_warning);
  ::zetasql::DeprecationWarning* unsafe_arena_release_deprecation_warning();

  // @@protoc_insertion_point(class_scope:zetasql.FreestandingDeprecationWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caret_string_;
    ::zetasql::ErrorLocation* error_location_;
    ::zetasql::DeprecationWarning* deprecation_warning_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeprecationWarning

// optional .zetasql.DeprecationWarning.Kind kind = 1;
inline bool DeprecationWarning::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeprecationWarning::has_kind() const {
  return _internal_has_kind();
}
inline void DeprecationWarning::clear_kind() {
  _impl_.kind_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::zetasql::DeprecationWarning_Kind DeprecationWarning::_internal_kind() const {
  return static_cast< ::zetasql::DeprecationWarning_Kind >(_impl_.kind_);
}
inline ::zetasql::DeprecationWarning_Kind DeprecationWarning::kind() const {
  // @@protoc_insertion_point(field_get:zetasql.DeprecationWarning.kind)
  return _internal_kind();
}
inline void DeprecationWarning::_internal_set_kind(::zetasql::DeprecationWarning_Kind value) {
  assert(::zetasql::DeprecationWarning_Kind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kind_ = value;
}
inline void DeprecationWarning::set_kind(::zetasql::DeprecationWarning_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:zetasql.DeprecationWarning.kind)
}

// -------------------------------------------------------------------

// FreestandingDeprecationWarning

// optional string message = 1;
inline bool FreestandingDeprecationWarning::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FreestandingDeprecationWarning::has_message() const {
  return _internal_has_message();
}
inline void FreestandingDeprecationWarning::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FreestandingDeprecationWarning::message() const {
  // @@protoc_insertion_point(field_get:zetasql.FreestandingDeprecationWarning.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FreestandingDeprecationWarning::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.FreestandingDeprecationWarning.message)
}
inline std::string* FreestandingDeprecationWarning::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:zetasql.FreestandingDeprecationWarning.message)
  return _s;
}
inline const std::string& FreestandingDeprecationWarning::_internal_message() const {
  return _impl_.message_.Get();
}
inline void FreestandingDeprecationWarning::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* FreestandingDeprecationWarning::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* FreestandingDeprecationWarning::release_message() {
  // @@protoc_insertion_point(field_release:zetasql.FreestandingDeprecationWarning.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FreestandingDeprecationWarning::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.FreestandingDeprecationWarning.message)
}

// optional string caret_string = 2;
inline bool FreestandingDeprecationWarning::_internal_has_caret_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FreestandingDeprecationWarning::has_caret_string() const {
  return _internal_has_caret_string();
}
inline void FreestandingDeprecationWarning::clear_caret_string() {
  _impl_.caret_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FreestandingDeprecationWarning::caret_string() const {
  // @@protoc_insertion_point(field_get:zetasql.FreestandingDeprecationWarning.caret_string)
  return _internal_caret_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FreestandingDeprecationWarning::set_caret_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.caret_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.FreestandingDeprecationWarning.caret_string)
}
inline std::string* FreestandingDeprecationWarning::mutable_caret_string() {
  std::string* _s = _internal_mutable_caret_string();
  // @@protoc_insertion_point(field_mutable:zetasql.FreestandingDeprecationWarning.caret_string)
  return _s;
}
inline const std::string& FreestandingDeprecationWarning::_internal_caret_string() const {
  return _impl_.caret_string_.Get();
}
inline void FreestandingDeprecationWarning::_internal_set_caret_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.caret_string_.Set(value, GetArenaForAllocation());
}
inline std::string* FreestandingDeprecationWarning::_internal_mutable_caret_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.caret_string_.Mutable(GetArenaForAllocation());
}
inline std::string* FreestandingDeprecationWarning::release_caret_string() {
  // @@protoc_insertion_point(field_release:zetasql.FreestandingDeprecationWarning.caret_string)
  if (!_internal_has_caret_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.caret_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.caret_string_.IsDefault()) {
    _impl_.caret_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FreestandingDeprecationWarning::set_allocated_caret_string(std::string* caret_string) {
  if (caret_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.caret_string_.SetAllocated(caret_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.caret_string_.IsDefault()) {
    _impl_.caret_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.FreestandingDeprecationWarning.caret_string)
}

// optional .zetasql.ErrorLocation error_location = 3;
inline bool FreestandingDeprecationWarning::_internal_has_error_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_location_ != nullptr);
  return value;
}
inline bool FreestandingDeprecationWarning::has_error_location() const {
  return _internal_has_error_location();
}
inline const ::zetasql::ErrorLocation& FreestandingDeprecationWarning::_internal_error_location() const {
  const ::zetasql::ErrorLocation* p = _impl_.error_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ErrorLocation&>(
      ::zetasql::_ErrorLocation_default_instance_);
}
inline const ::zetasql::ErrorLocation& FreestandingDeprecationWarning::error_location() const {
  // @@protoc_insertion_point(field_get:zetasql.FreestandingDeprecationWarning.error_location)
  return _internal_error_location();
}
inline void FreestandingDeprecationWarning::unsafe_arena_set_allocated_error_location(
    ::zetasql::ErrorLocation* error_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_location_);
  }
  _impl_.error_location_ = error_location;
  if (error_location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FreestandingDeprecationWarning.error_location)
}
inline ::zetasql::ErrorLocation* FreestandingDeprecationWarning::release_error_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ErrorLocation* temp = _impl_.error_location_;
  _impl_.error_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ErrorLocation* FreestandingDeprecationWarning::unsafe_arena_release_error_location() {
  // @@protoc_insertion_point(field_release:zetasql.FreestandingDeprecationWarning.error_location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ErrorLocation* temp = _impl_.error_location_;
  _impl_.error_location_ = nullptr;
  return temp;
}
inline ::zetasql::ErrorLocation* FreestandingDeprecationWarning::_internal_mutable_error_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.error_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ErrorLocation>(GetArenaForAllocation());
    _impl_.error_location_ = p;
  }
  return _impl_.error_location_;
}
inline ::zetasql::ErrorLocation* FreestandingDeprecationWarning::mutable_error_location() {
  ::zetasql::ErrorLocation* _msg = _internal_mutable_error_location();
  // @@protoc_insertion_point(field_mutable:zetasql.FreestandingDeprecationWarning.error_location)
  return _msg;
}
inline void FreestandingDeprecationWarning::set_allocated_error_location(::zetasql::ErrorLocation* error_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_location_);
  }
  if (error_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_location));
    if (message_arena != submessage_arena) {
      error_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.error_location_ = error_location;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FreestandingDeprecationWarning.error_location)
}

// optional .zetasql.DeprecationWarning deprecation_warning = 4;
inline bool FreestandingDeprecationWarning::_internal_has_deprecation_warning() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deprecation_warning_ != nullptr);
  return value;
}
inline bool FreestandingDeprecationWarning::has_deprecation_warning() const {
  return _internal_has_deprecation_warning();
}
inline void FreestandingDeprecationWarning::clear_deprecation_warning() {
  if (_impl_.deprecation_warning_ != nullptr) _impl_.deprecation_warning_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::DeprecationWarning& FreestandingDeprecationWarning::_internal_deprecation_warning() const {
  const ::zetasql::DeprecationWarning* p = _impl_.deprecation_warning_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::DeprecationWarning&>(
      ::zetasql::_DeprecationWarning_default_instance_);
}
inline const ::zetasql::DeprecationWarning& FreestandingDeprecationWarning::deprecation_warning() const {
  // @@protoc_insertion_point(field_get:zetasql.FreestandingDeprecationWarning.deprecation_warning)
  return _internal_deprecation_warning();
}
inline void FreestandingDeprecationWarning::unsafe_arena_set_allocated_deprecation_warning(
    ::zetasql::DeprecationWarning* deprecation_warning) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deprecation_warning_);
  }
  _impl_.deprecation_warning_ = deprecation_warning;
  if (deprecation_warning) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FreestandingDeprecationWarning.deprecation_warning)
}
inline ::zetasql::DeprecationWarning* FreestandingDeprecationWarning::release_deprecation_warning() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::DeprecationWarning* temp = _impl_.deprecation_warning_;
  _impl_.deprecation_warning_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::DeprecationWarning* FreestandingDeprecationWarning::unsafe_arena_release_deprecation_warning() {
  // @@protoc_insertion_point(field_release:zetasql.FreestandingDeprecationWarning.deprecation_warning)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::DeprecationWarning* temp = _impl_.deprecation_warning_;
  _impl_.deprecation_warning_ = nullptr;
  return temp;
}
inline ::zetasql::DeprecationWarning* FreestandingDeprecationWarning::_internal_mutable_deprecation_warning() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.deprecation_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::DeprecationWarning>(GetArenaForAllocation());
    _impl_.deprecation_warning_ = p;
  }
  return _impl_.deprecation_warning_;
}
inline ::zetasql::DeprecationWarning* FreestandingDeprecationWarning::mutable_deprecation_warning() {
  ::zetasql::DeprecationWarning* _msg = _internal_mutable_deprecation_warning();
  // @@protoc_insertion_point(field_mutable:zetasql.FreestandingDeprecationWarning.deprecation_warning)
  return _msg;
}
inline void FreestandingDeprecationWarning::set_allocated_deprecation_warning(::zetasql::DeprecationWarning* deprecation_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.deprecation_warning_;
  }
  if (deprecation_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deprecation_warning);
    if (message_arena != submessage_arena) {
      deprecation_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecation_warning, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.deprecation_warning_ = deprecation_warning;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FreestandingDeprecationWarning.deprecation_warning)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zetasql::DeprecationWarning_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::DeprecationWarning_Kind>() {
  return ::zetasql::DeprecationWarning_Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto
