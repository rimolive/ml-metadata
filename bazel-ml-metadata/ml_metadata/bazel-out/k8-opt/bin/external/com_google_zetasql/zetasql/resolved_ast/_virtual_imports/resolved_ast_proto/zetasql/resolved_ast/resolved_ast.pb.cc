// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/resolved_ast/resolved_ast.proto

#include "zetasql/resolved_ast/resolved_ast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR AnyResolvedNodeProto::AnyResolvedNodeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedNodeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedNodeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedNodeProtoDefaultTypeInternal() {}
  union {
    AnyResolvedNodeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedNodeProtoDefaultTypeInternal _AnyResolvedNodeProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedArgumentProto::AnyResolvedArgumentProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedArgumentProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedArgumentProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedArgumentProtoDefaultTypeInternal() {}
  union {
    AnyResolvedArgumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedArgumentProtoDefaultTypeInternal _AnyResolvedArgumentProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedArgumentProto::ResolvedArgumentProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedArgumentProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedArgumentProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedArgumentProtoDefaultTypeInternal() {}
  union {
    ResolvedArgumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedArgumentProtoDefaultTypeInternal _ResolvedArgumentProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedExprProto::AnyResolvedExprProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedExprProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedExprProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedExprProtoDefaultTypeInternal() {}
  union {
    AnyResolvedExprProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedExprProtoDefaultTypeInternal _AnyResolvedExprProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedExprProto::ResolvedExprProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.type_annotation_map_)*/nullptr} {}
struct ResolvedExprProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedExprProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedExprProtoDefaultTypeInternal() {}
  union {
    ResolvedExprProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedExprProtoDefaultTypeInternal _ResolvedExprProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedLiteralProto::ResolvedLiteralProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.float_literal_id_)*/int64_t{0}
  , /*decltype(_impl_.has_explicit_type_)*/false
  , /*decltype(_impl_.preserve_in_literal_remover_)*/false} {}
struct ResolvedLiteralProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedLiteralProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedLiteralProtoDefaultTypeInternal() {}
  union {
    ResolvedLiteralProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedLiteralProtoDefaultTypeInternal _ResolvedLiteralProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedParameterProto::ResolvedParameterProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.position_)*/int64_t{0}
  , /*decltype(_impl_.is_untyped_)*/false} {}
struct ResolvedParameterProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedParameterProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedParameterProtoDefaultTypeInternal() {}
  union {
    ResolvedParameterProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedParameterProtoDefaultTypeInternal _ResolvedParameterProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedExpressionColumnProto::ResolvedExpressionColumnProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedExpressionColumnProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedExpressionColumnProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedExpressionColumnProtoDefaultTypeInternal() {}
  union {
    ResolvedExpressionColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedExpressionColumnProtoDefaultTypeInternal _ResolvedExpressionColumnProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedColumnRefProto::ResolvedColumnRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.column_)*/nullptr
  , /*decltype(_impl_.is_correlated_)*/false} {}
struct ResolvedColumnRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedColumnRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedColumnRefProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedColumnRefProtoDefaultTypeInternal _ResolvedColumnRefProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedConstantProto::ResolvedConstantProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.constant_)*/nullptr} {}
struct ResolvedConstantProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedConstantProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedConstantProtoDefaultTypeInternal() {}
  union {
    ResolvedConstantProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedConstantProtoDefaultTypeInternal _ResolvedConstantProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSystemVariableProto::ResolvedSystemVariableProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedSystemVariableProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSystemVariableProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSystemVariableProtoDefaultTypeInternal() {}
  union {
    ResolvedSystemVariableProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSystemVariableProtoDefaultTypeInternal _ResolvedSystemVariableProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedInlineLambdaProto::ResolvedInlineLambdaProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.argument_list_)*/{}
  , /*decltype(_impl_.parameter_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.body_)*/nullptr} {}
struct ResolvedInlineLambdaProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedInlineLambdaProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedInlineLambdaProtoDefaultTypeInternal() {}
  union {
    ResolvedInlineLambdaProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedInlineLambdaProtoDefaultTypeInternal _ResolvedInlineLambdaProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFilterFieldArgProto::ResolvedFilterFieldArgProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_descriptor_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.include_)*/false} {}
struct ResolvedFilterFieldArgProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFilterFieldArgProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFilterFieldArgProtoDefaultTypeInternal() {}
  union {
    ResolvedFilterFieldArgProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFilterFieldArgProtoDefaultTypeInternal _ResolvedFilterFieldArgProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFilterFieldProto::ResolvedFilterFieldProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filter_field_arg_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr
  , /*decltype(_impl_.reset_cleared_required_fields_)*/false} {}
struct ResolvedFilterFieldProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFilterFieldProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFilterFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedFilterFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFilterFieldProtoDefaultTypeInternal _ResolvedFilterFieldProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedFunctionCallBaseProto::AnyResolvedFunctionCallBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedFunctionCallBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedFunctionCallBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedFunctionCallBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedFunctionCallBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedFunctionCallBaseProtoDefaultTypeInternal _AnyResolvedFunctionCallBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFunctionCallBaseProto::ResolvedFunctionCallBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.argument_list_)*/{}
  , /*decltype(_impl_.generic_argument_list_)*/{}
  , /*decltype(_impl_.hint_list_)*/{}
  , /*decltype(_impl_.collation_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.function_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.error_mode_)*/0} {}
struct ResolvedFunctionCallBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFunctionCallBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFunctionCallBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedFunctionCallBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFunctionCallBaseProtoDefaultTypeInternal _ResolvedFunctionCallBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFunctionCallProto::ResolvedFunctionCallProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.function_call_info_)*/nullptr} {}
struct ResolvedFunctionCallProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFunctionCallProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFunctionCallProtoDefaultTypeInternal() {}
  union {
    ResolvedFunctionCallProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFunctionCallProtoDefaultTypeInternal _ResolvedFunctionCallProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedNonScalarFunctionCallBaseProto::AnyResolvedNonScalarFunctionCallBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedNonScalarFunctionCallBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal _AnyResolvedNonScalarFunctionCallBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedNonScalarFunctionCallBaseProto::ResolvedNonScalarFunctionCallBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.with_group_rows_parameter_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.with_group_rows_subquery_)*/nullptr
  , /*decltype(_impl_.distinct_)*/false
  , /*decltype(_impl_.null_handling_modifier_)*/0} {}
struct ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedNonScalarFunctionCallBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal _ResolvedNonScalarFunctionCallBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAggregateFunctionCallProto::ResolvedAggregateFunctionCallProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_by_item_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.limit_)*/nullptr
  , /*decltype(_impl_.having_modifier_)*/nullptr
  , /*decltype(_impl_.function_call_info_)*/nullptr} {}
struct ResolvedAggregateFunctionCallProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAggregateFunctionCallProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAggregateFunctionCallProtoDefaultTypeInternal() {}
  union {
    ResolvedAggregateFunctionCallProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAggregateFunctionCallProtoDefaultTypeInternal _ResolvedAggregateFunctionCallProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAnalyticFunctionCallProto::ResolvedAnalyticFunctionCallProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.window_frame_)*/nullptr} {}
struct ResolvedAnalyticFunctionCallProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAnalyticFunctionCallProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAnalyticFunctionCallProtoDefaultTypeInternal() {}
  union {
    ResolvedAnalyticFunctionCallProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAnalyticFunctionCallProtoDefaultTypeInternal _ResolvedAnalyticFunctionCallProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedExtendedCastElementProto::ResolvedExtendedCastElementProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.from_type_)*/nullptr
  , /*decltype(_impl_.to_type_)*/nullptr
  , /*decltype(_impl_.function_)*/nullptr} {}
struct ResolvedExtendedCastElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedExtendedCastElementProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedExtendedCastElementProtoDefaultTypeInternal() {}
  union {
    ResolvedExtendedCastElementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedExtendedCastElementProtoDefaultTypeInternal _ResolvedExtendedCastElementProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedExtendedCastProto::ResolvedExtendedCastProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedExtendedCastProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedExtendedCastProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedExtendedCastProtoDefaultTypeInternal() {}
  union {
    ResolvedExtendedCastProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedExtendedCastProtoDefaultTypeInternal _ResolvedExtendedCastProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCastProto::ResolvedCastProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr
  , /*decltype(_impl_.extended_cast_)*/nullptr
  , /*decltype(_impl_.format_)*/nullptr
  , /*decltype(_impl_.time_zone_)*/nullptr
  , /*decltype(_impl_.type_parameters_)*/nullptr
  , /*decltype(_impl_.return_null_on_error_)*/false} {}
struct ResolvedCastProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCastProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCastProtoDefaultTypeInternal() {}
  union {
    ResolvedCastProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCastProtoDefaultTypeInternal _ResolvedCastProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedMakeStructProto::ResolvedMakeStructProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedMakeStructProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedMakeStructProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedMakeStructProtoDefaultTypeInternal() {}
  union {
    ResolvedMakeStructProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedMakeStructProtoDefaultTypeInternal _ResolvedMakeStructProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedMakeProtoProto::ResolvedMakeProtoProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedMakeProtoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedMakeProtoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedMakeProtoProtoDefaultTypeInternal() {}
  union {
    ResolvedMakeProtoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedMakeProtoProtoDefaultTypeInternal _ResolvedMakeProtoProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedMakeProtoFieldProto::ResolvedMakeProtoFieldProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.field_descriptor_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr
  , /*decltype(_impl_.format_)*/0} {}
struct ResolvedMakeProtoFieldProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedMakeProtoFieldProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedMakeProtoFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedMakeProtoFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedMakeProtoFieldProtoDefaultTypeInternal _ResolvedMakeProtoFieldProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedGetStructFieldProto::ResolvedGetStructFieldProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr
  , /*decltype(_impl_.field_idx_)*/int64_t{0}} {}
struct ResolvedGetStructFieldProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedGetStructFieldProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedGetStructFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedGetStructFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedGetStructFieldProtoDefaultTypeInternal _ResolvedGetStructFieldProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedGetProtoFieldProto::ResolvedGetProtoFieldProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr
  , /*decltype(_impl_.field_descriptor_)*/nullptr
  , /*decltype(_impl_.default_value_)*/nullptr
  , /*decltype(_impl_.format_)*/0
  , /*decltype(_impl_.get_has_bit_)*/false
  , /*decltype(_impl_.return_default_value_when_unset_)*/false} {}
struct ResolvedGetProtoFieldProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedGetProtoFieldProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedGetProtoFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedGetProtoFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedGetProtoFieldProtoDefaultTypeInternal _ResolvedGetProtoFieldProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedGetJsonFieldProto::ResolvedGetJsonFieldProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr} {}
struct ResolvedGetJsonFieldProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedGetJsonFieldProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedGetJsonFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedGetJsonFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedGetJsonFieldProtoDefaultTypeInternal _ResolvedGetJsonFieldProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFlattenProto::ResolvedFlattenProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.get_field_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr} {}
struct ResolvedFlattenProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFlattenProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFlattenProtoDefaultTypeInternal() {}
  union {
    ResolvedFlattenProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFlattenProtoDefaultTypeInternal _ResolvedFlattenProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFlattenedArgProto::ResolvedFlattenedArgProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedFlattenedArgProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFlattenedArgProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFlattenedArgProtoDefaultTypeInternal() {}
  union {
    ResolvedFlattenedArgProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFlattenedArgProtoDefaultTypeInternal _ResolvedFlattenedArgProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedReplaceFieldItemProto::ResolvedReplaceFieldItemProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.struct_index_path_)*/{}
  , /*decltype(_impl_.proto_field_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr} {}
struct ResolvedReplaceFieldItemProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedReplaceFieldItemProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedReplaceFieldItemProtoDefaultTypeInternal() {}
  union {
    ResolvedReplaceFieldItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedReplaceFieldItemProtoDefaultTypeInternal _ResolvedReplaceFieldItemProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedReplaceFieldProto::ResolvedReplaceFieldProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.replace_field_item_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr} {}
struct ResolvedReplaceFieldProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedReplaceFieldProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedReplaceFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedReplaceFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedReplaceFieldProtoDefaultTypeInternal _ResolvedReplaceFieldProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSubqueryExprProto::ResolvedSubqueryExprProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parameter_list_)*/{}
  , /*decltype(_impl_.hint_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.in_expr_)*/nullptr
  , /*decltype(_impl_.subquery_)*/nullptr
  , /*decltype(_impl_.in_collation_)*/nullptr
  , /*decltype(_impl_.subquery_type_)*/0} {}
struct ResolvedSubqueryExprProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSubqueryExprProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSubqueryExprProtoDefaultTypeInternal() {}
  union {
    ResolvedSubqueryExprProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSubqueryExprProtoDefaultTypeInternal _ResolvedSubqueryExprProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedWithExprProto::ResolvedWithExprProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.assignment_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr} {}
struct ResolvedWithExprProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedWithExprProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedWithExprProtoDefaultTypeInternal() {}
  union {
    ResolvedWithExprProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedWithExprProtoDefaultTypeInternal _ResolvedWithExprProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedScanProto::AnyResolvedScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedScanProtoDefaultTypeInternal() {}
  union {
    AnyResolvedScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedScanProtoDefaultTypeInternal _AnyResolvedScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedScanProto::ResolvedScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_list_)*/{}
  , /*decltype(_impl_.hint_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_ordered_)*/false} {}
struct ResolvedScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedScanProtoDefaultTypeInternal() {}
  union {
    ResolvedScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedScanProtoDefaultTypeInternal _ResolvedScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedModelProto::ResolvedModelProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.model_)*/nullptr} {}
struct ResolvedModelProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedModelProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedModelProtoDefaultTypeInternal() {}
  union {
    ResolvedModelProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedModelProtoDefaultTypeInternal _ResolvedModelProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedConnectionProto::ResolvedConnectionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.connection_)*/nullptr} {}
struct ResolvedConnectionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedConnectionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedConnectionProtoDefaultTypeInternal() {}
  union {
    ResolvedConnectionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedConnectionProtoDefaultTypeInternal _ResolvedConnectionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDescriptorProto::ResolvedDescriptorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.descriptor_column_list_)*/{}
  , /*decltype(_impl_.descriptor_column_name_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedDescriptorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDescriptorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDescriptorProtoDefaultTypeInternal() {}
  union {
    ResolvedDescriptorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDescriptorProtoDefaultTypeInternal _ResolvedDescriptorProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSingleRowScanProto::ResolvedSingleRowScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedSingleRowScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSingleRowScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSingleRowScanProtoDefaultTypeInternal() {}
  union {
    ResolvedSingleRowScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSingleRowScanProtoDefaultTypeInternal _ResolvedSingleRowScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedTableScanProto::ResolvedTableScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_index_list_)*/{}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_)*/nullptr
  , /*decltype(_impl_.for_system_time_expr_)*/nullptr} {}
struct ResolvedTableScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedTableScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedTableScanProtoDefaultTypeInternal() {}
  union {
    ResolvedTableScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedTableScanProtoDefaultTypeInternal _ResolvedTableScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedJoinScanProto::ResolvedJoinScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.left_scan_)*/nullptr
  , /*decltype(_impl_.right_scan_)*/nullptr
  , /*decltype(_impl_.join_expr_)*/nullptr
  , /*decltype(_impl_.join_type_)*/0} {}
struct ResolvedJoinScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedJoinScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedJoinScanProtoDefaultTypeInternal() {}
  union {
    ResolvedJoinScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedJoinScanProtoDefaultTypeInternal _ResolvedJoinScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedArrayScanProto::ResolvedArrayScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr
  , /*decltype(_impl_.array_expr_)*/nullptr
  , /*decltype(_impl_.element_column_)*/nullptr
  , /*decltype(_impl_.array_offset_column_)*/nullptr
  , /*decltype(_impl_.join_expr_)*/nullptr
  , /*decltype(_impl_.is_outer_)*/false} {}
struct ResolvedArrayScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedArrayScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedArrayScanProtoDefaultTypeInternal() {}
  union {
    ResolvedArrayScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedArrayScanProtoDefaultTypeInternal _ResolvedArrayScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedColumnHolderProto::ResolvedColumnHolderProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.column_)*/nullptr} {}
struct ResolvedColumnHolderProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedColumnHolderProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedColumnHolderProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnHolderProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedColumnHolderProtoDefaultTypeInternal _ResolvedColumnHolderProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFilterScanProto::ResolvedFilterScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr
  , /*decltype(_impl_.filter_expr_)*/nullptr} {}
struct ResolvedFilterScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFilterScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFilterScanProtoDefaultTypeInternal() {}
  union {
    ResolvedFilterScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFilterScanProtoDefaultTypeInternal _ResolvedFilterScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedGroupingSetProto::ResolvedGroupingSetProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_by_column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedGroupingSetProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedGroupingSetProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedGroupingSetProtoDefaultTypeInternal() {}
  union {
    ResolvedGroupingSetProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedGroupingSetProtoDefaultTypeInternal _ResolvedGroupingSetProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedAggregateScanBaseProto::AnyResolvedAggregateScanBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedAggregateScanBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedAggregateScanBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedAggregateScanBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedAggregateScanBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedAggregateScanBaseProtoDefaultTypeInternal _AnyResolvedAggregateScanBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAggregateScanBaseProto::ResolvedAggregateScanBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_by_list_)*/{}
  , /*decltype(_impl_.aggregate_list_)*/{}
  , /*decltype(_impl_.collation_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr} {}
struct ResolvedAggregateScanBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAggregateScanBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAggregateScanBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedAggregateScanBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAggregateScanBaseProtoDefaultTypeInternal _ResolvedAggregateScanBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAggregateScanProto::ResolvedAggregateScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.grouping_set_list_)*/{}
  , /*decltype(_impl_.rollup_column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAggregateScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAggregateScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAggregateScanProtoDefaultTypeInternal() {}
  union {
    ResolvedAggregateScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAggregateScanProtoDefaultTypeInternal _ResolvedAggregateScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAnonymizedAggregateScanProto::ResolvedAnonymizedAggregateScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.anonymization_option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.k_threshold_expr_)*/nullptr} {}
struct ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal() {}
  union {
    ResolvedAnonymizedAggregateScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal _ResolvedAnonymizedAggregateScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSetOperationItemProto::ResolvedSetOperationItemProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.scan_)*/nullptr} {}
struct ResolvedSetOperationItemProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSetOperationItemProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSetOperationItemProtoDefaultTypeInternal() {}
  union {
    ResolvedSetOperationItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSetOperationItemProtoDefaultTypeInternal _ResolvedSetOperationItemProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSetOperationScanProto::ResolvedSetOperationScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_item_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.op_type_)*/0} {}
struct ResolvedSetOperationScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSetOperationScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSetOperationScanProtoDefaultTypeInternal() {}
  union {
    ResolvedSetOperationScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSetOperationScanProtoDefaultTypeInternal _ResolvedSetOperationScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedOrderByScanProto::ResolvedOrderByScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_by_item_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr} {}
struct ResolvedOrderByScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedOrderByScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedOrderByScanProtoDefaultTypeInternal() {}
  union {
    ResolvedOrderByScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedOrderByScanProtoDefaultTypeInternal _ResolvedOrderByScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedLimitOffsetScanProto::ResolvedLimitOffsetScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr
  , /*decltype(_impl_.limit_)*/nullptr
  , /*decltype(_impl_.offset_)*/nullptr} {}
struct ResolvedLimitOffsetScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedLimitOffsetScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedLimitOffsetScanProtoDefaultTypeInternal() {}
  union {
    ResolvedLimitOffsetScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedLimitOffsetScanProtoDefaultTypeInternal _ResolvedLimitOffsetScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedWithRefScanProto::ResolvedWithRefScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.with_query_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedWithRefScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedWithRefScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedWithRefScanProtoDefaultTypeInternal() {}
  union {
    ResolvedWithRefScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedWithRefScanProtoDefaultTypeInternal _ResolvedWithRefScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAnalyticScanProto::ResolvedAnalyticScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.function_group_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr} {}
struct ResolvedAnalyticScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAnalyticScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAnalyticScanProtoDefaultTypeInternal() {}
  union {
    ResolvedAnalyticScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAnalyticScanProtoDefaultTypeInternal _ResolvedAnalyticScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSampleScanProto::ResolvedSampleScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.partition_by_list_)*/{}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.repeatable_argument_)*/nullptr
  , /*decltype(_impl_.weight_column_)*/nullptr
  , /*decltype(_impl_.unit_)*/0} {}
struct ResolvedSampleScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSampleScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSampleScanProtoDefaultTypeInternal() {}
  union {
    ResolvedSampleScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSampleScanProtoDefaultTypeInternal _ResolvedSampleScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedComputedColumnProto::ResolvedComputedColumnProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.column_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr} {}
struct ResolvedComputedColumnProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedComputedColumnProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedComputedColumnProtoDefaultTypeInternal() {}
  union {
    ResolvedComputedColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedComputedColumnProtoDefaultTypeInternal _ResolvedComputedColumnProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedOrderByItemProto::ResolvedOrderByItemProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.column_ref_)*/nullptr
  , /*decltype(_impl_.collation_name_)*/nullptr
  , /*decltype(_impl_.collation_)*/nullptr
  , /*decltype(_impl_.is_descending_)*/false
  , /*decltype(_impl_.null_order_)*/0} {}
struct ResolvedOrderByItemProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedOrderByItemProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedOrderByItemProtoDefaultTypeInternal() {}
  union {
    ResolvedOrderByItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedOrderByItemProtoDefaultTypeInternal _ResolvedOrderByItemProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedColumnAnnotationsProto::ResolvedColumnAnnotationsProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.child_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.type_parameters_)*/nullptr
  , /*decltype(_impl_.collation_name_)*/nullptr
  , /*decltype(_impl_.not_null_)*/false} {}
struct ResolvedColumnAnnotationsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedColumnAnnotationsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedColumnAnnotationsProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnAnnotationsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedColumnAnnotationsProtoDefaultTypeInternal _ResolvedColumnAnnotationsProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedGeneratedColumnInfoProto::ResolvedGeneratedColumnInfoProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expression_)*/nullptr
  , /*decltype(_impl_.stored_mode_)*/0} {}
struct ResolvedGeneratedColumnInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedGeneratedColumnInfoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedGeneratedColumnInfoProtoDefaultTypeInternal() {}
  union {
    ResolvedGeneratedColumnInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedGeneratedColumnInfoProtoDefaultTypeInternal _ResolvedGeneratedColumnInfoProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedColumnDefaultValueProto::ResolvedColumnDefaultValueProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sql_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expression_)*/nullptr} {}
struct ResolvedColumnDefaultValueProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedColumnDefaultValueProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedColumnDefaultValueProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnDefaultValueProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedColumnDefaultValueProtoDefaultTypeInternal _ResolvedColumnDefaultValueProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedColumnDefinitionProto::ResolvedColumnDefinitionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.annotations_)*/nullptr
  , /*decltype(_impl_.column_)*/nullptr
  , /*decltype(_impl_.generated_column_info_)*/nullptr
  , /*decltype(_impl_.default_value_)*/nullptr
  , /*decltype(_impl_.is_hidden_)*/false} {}
struct ResolvedColumnDefinitionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedColumnDefinitionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedColumnDefinitionProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnDefinitionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedColumnDefinitionProtoDefaultTypeInternal _ResolvedColumnDefinitionProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedConstraintProto::AnyResolvedConstraintProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedConstraintProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedConstraintProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedConstraintProtoDefaultTypeInternal() {}
  union {
    AnyResolvedConstraintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedConstraintProtoDefaultTypeInternal _AnyResolvedConstraintProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedConstraintProto::ResolvedConstraintProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedConstraintProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedConstraintProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedConstraintProtoDefaultTypeInternal() {}
  union {
    ResolvedConstraintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedConstraintProtoDefaultTypeInternal _ResolvedConstraintProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedPrimaryKeyProto::ResolvedPrimaryKeyProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_offset_list_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.column_name_list_)*/{}
  , /*decltype(_impl_.constraint_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.unenforced_)*/false} {}
struct ResolvedPrimaryKeyProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedPrimaryKeyProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedPrimaryKeyProtoDefaultTypeInternal() {}
  union {
    ResolvedPrimaryKeyProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedPrimaryKeyProtoDefaultTypeInternal _ResolvedPrimaryKeyProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedForeignKeyProto::ResolvedForeignKeyProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.referencing_column_offset_list_)*/{}
  , /*decltype(_impl_.referenced_column_offset_list_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.referencing_column_list_)*/{}
  , /*decltype(_impl_.constraint_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.referenced_table_)*/nullptr
  , /*decltype(_impl_.match_mode_)*/0
  , /*decltype(_impl_.update_action_)*/0
  , /*decltype(_impl_.delete_action_)*/0
  , /*decltype(_impl_.enforced_)*/false} {}
struct ResolvedForeignKeyProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedForeignKeyProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedForeignKeyProtoDefaultTypeInternal() {}
  union {
    ResolvedForeignKeyProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedForeignKeyProtoDefaultTypeInternal _ResolvedForeignKeyProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCheckConstraintProto::ResolvedCheckConstraintProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.constraint_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expression_)*/nullptr
  , /*decltype(_impl_.enforced_)*/false} {}
struct ResolvedCheckConstraintProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCheckConstraintProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCheckConstraintProtoDefaultTypeInternal() {}
  union {
    ResolvedCheckConstraintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCheckConstraintProtoDefaultTypeInternal _ResolvedCheckConstraintProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedOutputColumnProto::ResolvedOutputColumnProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.column_)*/nullptr} {}
struct ResolvedOutputColumnProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedOutputColumnProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedOutputColumnProtoDefaultTypeInternal() {}
  union {
    ResolvedOutputColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedOutputColumnProtoDefaultTypeInternal _ResolvedOutputColumnProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedProjectScanProto::ResolvedProjectScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expr_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr} {}
struct ResolvedProjectScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedProjectScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedProjectScanProtoDefaultTypeInternal() {}
  union {
    ResolvedProjectScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedProjectScanProtoDefaultTypeInternal _ResolvedProjectScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedTVFScanProto::ResolvedTVFScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.argument_list_)*/{}
  , /*decltype(_impl_.column_index_list_)*/{}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.tvf_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.function_call_signature_)*/nullptr} {}
struct ResolvedTVFScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedTVFScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedTVFScanProtoDefaultTypeInternal() {}
  union {
    ResolvedTVFScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedTVFScanProtoDefaultTypeInternal _ResolvedTVFScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedGroupRowsScanProto::ResolvedGroupRowsScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_column_list_)*/{}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedGroupRowsScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedGroupRowsScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedGroupRowsScanProtoDefaultTypeInternal() {}
  union {
    ResolvedGroupRowsScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedGroupRowsScanProtoDefaultTypeInternal _ResolvedGroupRowsScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFunctionArgumentProto::ResolvedFunctionArgumentProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.argument_column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr
  , /*decltype(_impl_.scan_)*/nullptr
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_.connection_)*/nullptr
  , /*decltype(_impl_.descriptor_arg_)*/nullptr
  , /*decltype(_impl_.inline_lambda_)*/nullptr} {}
struct ResolvedFunctionArgumentProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFunctionArgumentProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFunctionArgumentProtoDefaultTypeInternal() {}
  union {
    ResolvedFunctionArgumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFunctionArgumentProtoDefaultTypeInternal _ResolvedFunctionArgumentProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedStatementProto::AnyResolvedStatementProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedStatementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedStatementProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedStatementProtoDefaultTypeInternal() {}
  union {
    AnyResolvedStatementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedStatementProtoDefaultTypeInternal _AnyResolvedStatementProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedStatementProto::ResolvedStatementProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hint_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedStatementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedStatementProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedStatementProtoDefaultTypeInternal() {}
  union {
    ResolvedStatementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedStatementProtoDefaultTypeInternal _ResolvedStatementProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedExplainStmtProto::ResolvedExplainStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.statement_)*/nullptr} {}
struct ResolvedExplainStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedExplainStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedExplainStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedExplainStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedExplainStmtProtoDefaultTypeInternal _ResolvedExplainStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedQueryStmtProto::ResolvedQueryStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.is_value_table_)*/false} {}
struct ResolvedQueryStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedQueryStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedQueryStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedQueryStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedQueryStmtProtoDefaultTypeInternal _ResolvedQueryStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateDatabaseStmtProto::ResolvedCreateDatabaseStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedCreateDatabaseStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateDatabaseStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateDatabaseStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateDatabaseStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateDatabaseStmtProtoDefaultTypeInternal _ResolvedCreateDatabaseStmtProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedCreateStatementProto::AnyResolvedCreateStatementProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedCreateStatementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedCreateStatementProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedCreateStatementProtoDefaultTypeInternal() {}
  union {
    AnyResolvedCreateStatementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedCreateStatementProtoDefaultTypeInternal _AnyResolvedCreateStatementProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateStatementProto::ResolvedCreateStatementProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.create_mode_)*/0
  , /*decltype(_impl_.create_scope_)*/0} {}
struct ResolvedCreateStatementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateStatementProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateStatementProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateStatementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateStatementProtoDefaultTypeInternal _ResolvedCreateStatementProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedIndexItemProto::ResolvedIndexItemProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.column_ref_)*/nullptr
  , /*decltype(_impl_.descending_)*/false} {}
struct ResolvedIndexItemProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedIndexItemProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedIndexItemProtoDefaultTypeInternal() {}
  union {
    ResolvedIndexItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedIndexItemProtoDefaultTypeInternal _ResolvedIndexItemProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedUnnestItemProto::ResolvedUnnestItemProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.array_expr_)*/nullptr
  , /*decltype(_impl_.element_column_)*/nullptr
  , /*decltype(_impl_.array_offset_column_)*/nullptr} {}
struct ResolvedUnnestItemProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedUnnestItemProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedUnnestItemProtoDefaultTypeInternal() {}
  union {
    ResolvedUnnestItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedUnnestItemProtoDefaultTypeInternal _ResolvedUnnestItemProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateIndexStmtProto::ResolvedCreateIndexStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_name_path_)*/{}
  , /*decltype(_impl_.index_item_list_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.computed_columns_list_)*/{}
  , /*decltype(_impl_.unnest_expressions_list_)*/{}
  , /*decltype(_impl_.storing_expression_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_scan_)*/nullptr
  , /*decltype(_impl_.is_unique_)*/false
  , /*decltype(_impl_.is_search_)*/false
  , /*decltype(_impl_.index_all_columns_)*/false} {}
struct ResolvedCreateIndexStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateIndexStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateIndexStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateIndexStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateIndexStmtProtoDefaultTypeInternal _ResolvedCreateIndexStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateSchemaStmtProto::ResolvedCreateSchemaStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.collation_name_)*/nullptr} {}
struct ResolvedCreateSchemaStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateSchemaStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateSchemaStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateSchemaStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateSchemaStmtProtoDefaultTypeInternal _ResolvedCreateSchemaStmtProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedCreateTableStmtBaseProto::AnyResolvedCreateTableStmtBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedCreateTableStmtBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal _AnyResolvedCreateTableStmtBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateTableStmtBaseProto::ResolvedCreateTableStmtBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.column_definition_list_)*/{}
  , /*decltype(_impl_.pseudo_column_list_)*/{}
  , /*decltype(_impl_.foreign_key_list_)*/{}
  , /*decltype(_impl_.check_constraint_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.primary_key_)*/nullptr
  , /*decltype(_impl_.like_table_)*/nullptr
  , /*decltype(_impl_.collation_name_)*/nullptr
  , /*decltype(_impl_.is_value_table_)*/false} {}
struct ResolvedCreateTableStmtBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateTableStmtBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateTableStmtBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateTableStmtBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateTableStmtBaseProtoDefaultTypeInternal _ResolvedCreateTableStmtBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateTableStmtProto::ResolvedCreateTableStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.partition_by_list_)*/{}
  , /*decltype(_impl_.cluster_by_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.clone_from_)*/nullptr
  , /*decltype(_impl_.copy_from_)*/nullptr} {}
struct ResolvedCreateTableStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateTableStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateTableStmtProtoDefaultTypeInternal _ResolvedCreateTableStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateTableAsSelectStmtProto::ResolvedCreateTableAsSelectStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_column_list_)*/{}
  , /*decltype(_impl_.partition_by_list_)*/{}
  , /*decltype(_impl_.cluster_by_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr} {}
struct ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateTableAsSelectStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal _ResolvedCreateTableAsSelectStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateModelStmtProto::ResolvedCreateModelStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.output_column_list_)*/{}
  , /*decltype(_impl_.transform_list_)*/{}
  , /*decltype(_impl_.transform_output_column_list_)*/{}
  , /*decltype(_impl_.transform_analytic_function_group_list_)*/{}
  , /*decltype(_impl_.transform_input_column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr} {}
struct ResolvedCreateModelStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateModelStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateModelStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateModelStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateModelStmtProtoDefaultTypeInternal _ResolvedCreateModelStmtProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedCreateViewBaseProto::AnyResolvedCreateViewBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedCreateViewBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedCreateViewBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedCreateViewBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedCreateViewBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedCreateViewBaseProtoDefaultTypeInternal _AnyResolvedCreateViewBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateViewBaseProto::ResolvedCreateViewBaseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.output_column_list_)*/{}
  , /*decltype(_impl_.sql_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.sql_security_)*/0
  , /*decltype(_impl_.has_explicit_columns_)*/false
  , /*decltype(_impl_.is_value_table_)*/false
  , /*decltype(_impl_.recursive_)*/false} {}
struct ResolvedCreateViewBaseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateViewBaseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateViewBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateViewBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateViewBaseProtoDefaultTypeInternal _ResolvedCreateViewBaseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateViewStmtProto::ResolvedCreateViewStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedCreateViewStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateViewStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateViewStmtProtoDefaultTypeInternal _ResolvedCreateViewStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedWithPartitionColumnsProto::ResolvedWithPartitionColumnsProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_definition_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedWithPartitionColumnsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedWithPartitionColumnsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedWithPartitionColumnsProtoDefaultTypeInternal() {}
  union {
    ResolvedWithPartitionColumnsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedWithPartitionColumnsProtoDefaultTypeInternal _ResolvedWithPartitionColumnsProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateSnapshotTableStmtProto::ResolvedCreateSnapshotTableStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.clone_from_)*/nullptr} {}
struct ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateSnapshotTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal _ResolvedCreateSnapshotTableStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateExternalTableStmtProto::ResolvedCreateExternalTableStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.with_partition_columns_)*/nullptr
  , /*decltype(_impl_.connection_)*/nullptr} {}
struct ResolvedCreateExternalTableStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateExternalTableStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateExternalTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateExternalTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateExternalTableStmtProtoDefaultTypeInternal _ResolvedCreateExternalTableStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedExportModelStmtProto::ResolvedExportModelStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.model_name_path_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.connection_)*/nullptr} {}
struct ResolvedExportModelStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedExportModelStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedExportModelStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedExportModelStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedExportModelStmtProtoDefaultTypeInternal _ResolvedExportModelStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedExportDataStmtProto::ResolvedExportDataStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.output_column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.connection_)*/nullptr
  , /*decltype(_impl_.is_value_table_)*/false} {}
struct ResolvedExportDataStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedExportDataStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedExportDataStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedExportDataStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedExportDataStmtProtoDefaultTypeInternal _ResolvedExportDataStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDefineTableStmtProto::ResolvedDefineTableStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedDefineTableStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDefineTableStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDefineTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDefineTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDefineTableStmtProtoDefaultTypeInternal _ResolvedDefineTableStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDescribeStmtProto::ResolvedDescribeStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.from_name_path_)*/{}
  , /*decltype(_impl_.object_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedDescribeStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDescribeStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDescribeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDescribeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDescribeStmtProtoDefaultTypeInternal _ResolvedDescribeStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedShowStmtProto::ResolvedShowStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.like_expr_)*/nullptr} {}
struct ResolvedShowStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedShowStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedShowStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedShowStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedShowStmtProtoDefaultTypeInternal _ResolvedShowStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedBeginStmtProto::ResolvedBeginStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.isolation_level_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.read_write_mode_)*/0} {}
struct ResolvedBeginStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedBeginStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedBeginStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedBeginStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedBeginStmtProtoDefaultTypeInternal _ResolvedBeginStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSetTransactionStmtProto::ResolvedSetTransactionStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.isolation_level_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.read_write_mode_)*/0} {}
struct ResolvedSetTransactionStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSetTransactionStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSetTransactionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedSetTransactionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSetTransactionStmtProtoDefaultTypeInternal _ResolvedSetTransactionStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCommitStmtProto::ResolvedCommitStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedCommitStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCommitStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCommitStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCommitStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCommitStmtProtoDefaultTypeInternal _ResolvedCommitStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRollbackStmtProto::ResolvedRollbackStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedRollbackStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRollbackStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRollbackStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedRollbackStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRollbackStmtProtoDefaultTypeInternal _ResolvedRollbackStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedStartBatchStmtProto::ResolvedStartBatchStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.batch_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedStartBatchStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedStartBatchStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedStartBatchStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedStartBatchStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedStartBatchStmtProtoDefaultTypeInternal _ResolvedStartBatchStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRunBatchStmtProto::ResolvedRunBatchStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedRunBatchStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRunBatchStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRunBatchStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedRunBatchStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRunBatchStmtProtoDefaultTypeInternal _ResolvedRunBatchStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAbortBatchStmtProto::ResolvedAbortBatchStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAbortBatchStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAbortBatchStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAbortBatchStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAbortBatchStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAbortBatchStmtProtoDefaultTypeInternal _ResolvedAbortBatchStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropStmtProto::ResolvedDropStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.object_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false
  , /*decltype(_impl_.drop_mode_)*/0} {}
struct ResolvedDropStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropStmtProtoDefaultTypeInternal _ResolvedDropStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropMaterializedViewStmtProto::ResolvedDropMaterializedViewStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropMaterializedViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal _ResolvedDropMaterializedViewStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropSnapshotTableStmtProto::ResolvedDropSnapshotTableStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropSnapshotTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal _ResolvedDropSnapshotTableStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRecursiveRefScanProto::ResolvedRecursiveRefScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedRecursiveRefScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRecursiveRefScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRecursiveRefScanProtoDefaultTypeInternal() {}
  union {
    ResolvedRecursiveRefScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRecursiveRefScanProtoDefaultTypeInternal _ResolvedRecursiveRefScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRecursiveScanProto::ResolvedRecursiveScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.non_recursive_term_)*/nullptr
  , /*decltype(_impl_.recursive_term_)*/nullptr
  , /*decltype(_impl_.op_type_)*/0} {}
struct ResolvedRecursiveScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRecursiveScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRecursiveScanProtoDefaultTypeInternal() {}
  union {
    ResolvedRecursiveScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRecursiveScanProtoDefaultTypeInternal _ResolvedRecursiveScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedWithScanProto::ResolvedWithScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.with_entry_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.recursive_)*/false} {}
struct ResolvedWithScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedWithScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedWithScanProtoDefaultTypeInternal() {}
  union {
    ResolvedWithScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedWithScanProtoDefaultTypeInternal _ResolvedWithScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedWithEntryProto::ResolvedWithEntryProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.with_query_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.with_subquery_)*/nullptr} {}
struct ResolvedWithEntryProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedWithEntryProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedWithEntryProtoDefaultTypeInternal() {}
  union {
    ResolvedWithEntryProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedWithEntryProtoDefaultTypeInternal _ResolvedWithEntryProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedOptionProto::ResolvedOptionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.qualifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr} {}
struct ResolvedOptionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedOptionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedOptionProtoDefaultTypeInternal() {}
  union {
    ResolvedOptionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedOptionProtoDefaultTypeInternal _ResolvedOptionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedWindowPartitioningProto::ResolvedWindowPartitioningProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.partition_by_list_)*/{}
  , /*decltype(_impl_.hint_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedWindowPartitioningProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedWindowPartitioningProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedWindowPartitioningProtoDefaultTypeInternal() {}
  union {
    ResolvedWindowPartitioningProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedWindowPartitioningProtoDefaultTypeInternal _ResolvedWindowPartitioningProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedWindowOrderingProto::ResolvedWindowOrderingProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_by_item_list_)*/{}
  , /*decltype(_impl_.hint_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedWindowOrderingProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedWindowOrderingProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedWindowOrderingProtoDefaultTypeInternal() {}
  union {
    ResolvedWindowOrderingProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedWindowOrderingProtoDefaultTypeInternal _ResolvedWindowOrderingProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedWindowFrameProto::ResolvedWindowFrameProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.start_expr_)*/nullptr
  , /*decltype(_impl_.end_expr_)*/nullptr
  , /*decltype(_impl_.frame_unit_)*/0} {}
struct ResolvedWindowFrameProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedWindowFrameProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedWindowFrameProtoDefaultTypeInternal() {}
  union {
    ResolvedWindowFrameProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedWindowFrameProtoDefaultTypeInternal _ResolvedWindowFrameProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAnalyticFunctionGroupProto::ResolvedAnalyticFunctionGroupProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.analytic_function_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.partition_by_)*/nullptr
  , /*decltype(_impl_.order_by_)*/nullptr} {}
struct ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal() {}
  union {
    ResolvedAnalyticFunctionGroupProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal _ResolvedAnalyticFunctionGroupProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedWindowFrameExprProto::ResolvedWindowFrameExprProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expression_)*/nullptr
  , /*decltype(_impl_.boundary_type_)*/0} {}
struct ResolvedWindowFrameExprProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedWindowFrameExprProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedWindowFrameExprProtoDefaultTypeInternal() {}
  union {
    ResolvedWindowFrameExprProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedWindowFrameExprProtoDefaultTypeInternal _ResolvedWindowFrameExprProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDMLValueProto::ResolvedDMLValueProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr} {}
struct ResolvedDMLValueProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDMLValueProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDMLValueProtoDefaultTypeInternal() {}
  union {
    ResolvedDMLValueProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDMLValueProtoDefaultTypeInternal _ResolvedDMLValueProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDMLDefaultProto::ResolvedDMLDefaultProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedDMLDefaultProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDMLDefaultProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDMLDefaultProtoDefaultTypeInternal() {}
  union {
    ResolvedDMLDefaultProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDMLDefaultProtoDefaultTypeInternal _ResolvedDMLDefaultProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAssertStmtProto::ResolvedAssertStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expression_)*/nullptr} {}
struct ResolvedAssertStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAssertStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAssertStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAssertStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAssertStmtProtoDefaultTypeInternal _ResolvedAssertStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAssertRowsModifiedProto::ResolvedAssertRowsModifiedProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.rows_)*/nullptr} {}
struct ResolvedAssertRowsModifiedProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAssertRowsModifiedProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAssertRowsModifiedProtoDefaultTypeInternal() {}
  union {
    ResolvedAssertRowsModifiedProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAssertRowsModifiedProtoDefaultTypeInternal _ResolvedAssertRowsModifiedProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedInsertRowProto::ResolvedInsertRowProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedInsertRowProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedInsertRowProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedInsertRowProtoDefaultTypeInternal() {}
  union {
    ResolvedInsertRowProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedInsertRowProtoDefaultTypeInternal _ResolvedInsertRowProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedInsertStmtProto::ResolvedInsertStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.insert_column_list_)*/{}
  , /*decltype(_impl_.row_list_)*/{}
  , /*decltype(_impl_.query_output_column_list_)*/{}
  , /*decltype(_impl_.query_parameter_list_)*/{}
  , /*decltype(_impl_.column_access_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_scan_)*/nullptr
  , /*decltype(_impl_.assert_rows_modified_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.returning_)*/nullptr
  , /*decltype(_impl_.insert_mode_)*/0} {}
struct ResolvedInsertStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedInsertStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedInsertStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedInsertStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedInsertStmtProtoDefaultTypeInternal _ResolvedInsertStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDeleteStmtProto::ResolvedDeleteStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_access_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_scan_)*/nullptr
  , /*decltype(_impl_.assert_rows_modified_)*/nullptr
  , /*decltype(_impl_.where_expr_)*/nullptr
  , /*decltype(_impl_.array_offset_column_)*/nullptr
  , /*decltype(_impl_.returning_)*/nullptr} {}
struct ResolvedDeleteStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDeleteStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDeleteStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDeleteStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDeleteStmtProtoDefaultTypeInternal _ResolvedDeleteStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedUpdateItemProto::ResolvedUpdateItemProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delete_list_)*/{}
  , /*decltype(_impl_.update_list_)*/{}
  , /*decltype(_impl_.insert_list_)*/{}
  , /*decltype(_impl_.array_update_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.set_value_)*/nullptr
  , /*decltype(_impl_.element_column_)*/nullptr} {}
struct ResolvedUpdateItemProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedUpdateItemProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedUpdateItemProtoDefaultTypeInternal() {}
  union {
    ResolvedUpdateItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedUpdateItemProtoDefaultTypeInternal _ResolvedUpdateItemProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedUpdateArrayItemProto::ResolvedUpdateArrayItemProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.offset_)*/nullptr
  , /*decltype(_impl_.update_item_)*/nullptr} {}
struct ResolvedUpdateArrayItemProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedUpdateArrayItemProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedUpdateArrayItemProtoDefaultTypeInternal() {}
  union {
    ResolvedUpdateArrayItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedUpdateArrayItemProtoDefaultTypeInternal _ResolvedUpdateArrayItemProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedUpdateStmtProto::ResolvedUpdateStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.update_item_list_)*/{}
  , /*decltype(_impl_.column_access_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_scan_)*/nullptr
  , /*decltype(_impl_.assert_rows_modified_)*/nullptr
  , /*decltype(_impl_.where_expr_)*/nullptr
  , /*decltype(_impl_.from_scan_)*/nullptr
  , /*decltype(_impl_.array_offset_column_)*/nullptr
  , /*decltype(_impl_.returning_)*/nullptr} {}
struct ResolvedUpdateStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedUpdateStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedUpdateStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedUpdateStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedUpdateStmtProtoDefaultTypeInternal _ResolvedUpdateStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedMergeWhenProto::ResolvedMergeWhenProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.insert_column_list_)*/{}
  , /*decltype(_impl_.update_item_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.match_expr_)*/nullptr
  , /*decltype(_impl_.insert_row_)*/nullptr
  , /*decltype(_impl_.match_type_)*/0
  , /*decltype(_impl_.action_type_)*/0} {}
struct ResolvedMergeWhenProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedMergeWhenProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedMergeWhenProtoDefaultTypeInternal() {}
  union {
    ResolvedMergeWhenProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedMergeWhenProtoDefaultTypeInternal _ResolvedMergeWhenProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedMergeStmtProto::ResolvedMergeStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.when_clause_list_)*/{}
  , /*decltype(_impl_.column_access_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_scan_)*/nullptr
  , /*decltype(_impl_.from_scan_)*/nullptr
  , /*decltype(_impl_.merge_expr_)*/nullptr} {}
struct ResolvedMergeStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedMergeStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedMergeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedMergeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedMergeStmtProtoDefaultTypeInternal _ResolvedMergeStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedTruncateStmtProto::ResolvedTruncateStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_scan_)*/nullptr
  , /*decltype(_impl_.where_expr_)*/nullptr} {}
struct ResolvedTruncateStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedTruncateStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedTruncateStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedTruncateStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedTruncateStmtProtoDefaultTypeInternal _ResolvedTruncateStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedObjectUnitProto::ResolvedObjectUnitProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedObjectUnitProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedObjectUnitProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedObjectUnitProtoDefaultTypeInternal() {}
  union {
    ResolvedObjectUnitProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedObjectUnitProtoDefaultTypeInternal _ResolvedObjectUnitProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedPrivilegeProto::ResolvedPrivilegeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unit_list_)*/{}
  , /*decltype(_impl_.action_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedPrivilegeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedPrivilegeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedPrivilegeProtoDefaultTypeInternal() {}
  union {
    ResolvedPrivilegeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedPrivilegeProtoDefaultTypeInternal _ResolvedPrivilegeProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedGrantOrRevokeStmtProto::AnyResolvedGrantOrRevokeStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal() {}
  union {
    AnyResolvedGrantOrRevokeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal _AnyResolvedGrantOrRevokeStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedGrantOrRevokeStmtProto::ResolvedGrantOrRevokeStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.privilege_list_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.grantee_list_)*/{}
  , /*decltype(_impl_.grantee_expr_list_)*/{}
  , /*decltype(_impl_.object_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedGrantOrRevokeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal _ResolvedGrantOrRevokeStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedGrantStmtProto::ResolvedGrantStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedGrantStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedGrantStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedGrantStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedGrantStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedGrantStmtProtoDefaultTypeInternal _ResolvedGrantStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRevokeStmtProto::ResolvedRevokeStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedRevokeStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRevokeStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRevokeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedRevokeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRevokeStmtProtoDefaultTypeInternal _ResolvedRevokeStmtProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedAlterObjectStmtProto::AnyResolvedAlterObjectStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedAlterObjectStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedAlterObjectStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedAlterObjectStmtProtoDefaultTypeInternal() {}
  union {
    AnyResolvedAlterObjectStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedAlterObjectStmtProtoDefaultTypeInternal _AnyResolvedAlterObjectStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterObjectStmtProto::ResolvedAlterObjectStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.alter_action_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedAlterObjectStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterObjectStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterObjectStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterObjectStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterObjectStmtProtoDefaultTypeInternal _ResolvedAlterObjectStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterDatabaseStmtProto::ResolvedAlterDatabaseStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterDatabaseStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterDatabaseStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterDatabaseStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterDatabaseStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterDatabaseStmtProtoDefaultTypeInternal _ResolvedAlterDatabaseStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterMaterializedViewStmtProto::ResolvedAlterMaterializedViewStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterMaterializedViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal _ResolvedAlterMaterializedViewStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterSchemaStmtProto::ResolvedAlterSchemaStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterSchemaStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterSchemaStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterSchemaStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterSchemaStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterSchemaStmtProtoDefaultTypeInternal _ResolvedAlterSchemaStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterModelStmtProto::ResolvedAlterModelStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterModelStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterModelStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterModelStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterModelStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterModelStmtProtoDefaultTypeInternal _ResolvedAlterModelStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterTableStmtProto::ResolvedAlterTableStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterTableStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterTableStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterTableStmtProtoDefaultTypeInternal _ResolvedAlterTableStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterViewStmtProto::ResolvedAlterViewStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterViewStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterViewStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterViewStmtProtoDefaultTypeInternal _ResolvedAlterViewStmtProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedAlterActionProto::AnyResolvedAlterActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedAlterActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedAlterActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedAlterActionProtoDefaultTypeInternal() {}
  union {
    AnyResolvedAlterActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedAlterActionProtoDefaultTypeInternal _AnyResolvedAlterActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterActionProto::ResolvedAlterActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterActionProtoDefaultTypeInternal _ResolvedAlterActionProto_default_instance_;
PROTOBUF_CONSTEXPR AnyResolvedAlterColumnActionProto::AnyResolvedAlterColumnActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnyResolvedAlterColumnActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyResolvedAlterColumnActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyResolvedAlterColumnActionProtoDefaultTypeInternal() {}
  union {
    AnyResolvedAlterColumnActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyResolvedAlterColumnActionProtoDefaultTypeInternal _AnyResolvedAlterColumnActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterColumnActionProto::ResolvedAlterColumnActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedAlterColumnActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterColumnActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterColumnActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterColumnActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterColumnActionProtoDefaultTypeInternal _ResolvedAlterColumnActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSetOptionsActionProto::ResolvedSetOptionsActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedSetOptionsActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSetOptionsActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSetOptionsActionProtoDefaultTypeInternal() {}
  union {
    ResolvedSetOptionsActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSetOptionsActionProtoDefaultTypeInternal _ResolvedSetOptionsActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterSubEntityActionProto::ResolvedAlterSubEntityActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.alter_action_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedAlterSubEntityActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterSubEntityActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterSubEntityActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterSubEntityActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterSubEntityActionProtoDefaultTypeInternal _ResolvedAlterSubEntityActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAddSubEntityActionProto::ResolvedAddSubEntityActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.options_list_)*/{}
  , /*decltype(_impl_.entity_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_not_exists_)*/false} {}
struct ResolvedAddSubEntityActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAddSubEntityActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAddSubEntityActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAddSubEntityActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAddSubEntityActionProtoDefaultTypeInternal _ResolvedAddSubEntityActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropSubEntityActionProto::ResolvedDropSubEntityActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropSubEntityActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropSubEntityActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropSubEntityActionProtoDefaultTypeInternal() {}
  union {
    ResolvedDropSubEntityActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropSubEntityActionProtoDefaultTypeInternal _ResolvedDropSubEntityActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAddColumnActionProto::ResolvedAddColumnActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.column_definition_)*/nullptr
  , /*decltype(_impl_.is_if_not_exists_)*/false} {}
struct ResolvedAddColumnActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAddColumnActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAddColumnActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAddColumnActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAddColumnActionProtoDefaultTypeInternal _ResolvedAddColumnActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAddConstraintActionProto::ResolvedAddConstraintActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.constraint_)*/nullptr
  , /*decltype(_impl_.table_)*/nullptr
  , /*decltype(_impl_.is_if_not_exists_)*/false} {}
struct ResolvedAddConstraintActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAddConstraintActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAddConstraintActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAddConstraintActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAddConstraintActionProtoDefaultTypeInternal _ResolvedAddConstraintActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropConstraintActionProto::ResolvedDropConstraintActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropConstraintActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropConstraintActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropConstraintActionProtoDefaultTypeInternal() {}
  union {
    ResolvedDropConstraintActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropConstraintActionProtoDefaultTypeInternal _ResolvedDropConstraintActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropPrimaryKeyActionProto::ResolvedDropPrimaryKeyActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal() {}
  union {
    ResolvedDropPrimaryKeyActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal _ResolvedDropPrimaryKeyActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterColumnOptionsActionProto::ResolvedAlterColumnOptionsActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterColumnOptionsActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal _ResolvedAlterColumnOptionsActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterColumnDropNotNullActionProto::ResolvedAlterColumnDropNotNullActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterColumnDropNotNullActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal _ResolvedAlterColumnDropNotNullActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterColumnSetDataTypeActionProto::ResolvedAlterColumnSetDataTypeActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.updated_type_)*/nullptr
  , /*decltype(_impl_.updated_type_parameters_)*/nullptr
  , /*decltype(_impl_.updated_annotations_)*/nullptr} {}
struct ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterColumnSetDataTypeActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal _ResolvedAlterColumnSetDataTypeActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterColumnSetDefaultActionProto::ResolvedAlterColumnSetDefaultActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.default_value_)*/nullptr} {}
struct ResolvedAlterColumnSetDefaultActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterColumnSetDefaultActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterColumnSetDefaultActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterColumnSetDefaultActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterColumnSetDefaultActionProtoDefaultTypeInternal _ResolvedAlterColumnSetDefaultActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterColumnDropDefaultActionProto::ResolvedAlterColumnDropDefaultActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterColumnDropDefaultActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterColumnDropDefaultActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterColumnDropDefaultActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterColumnDropDefaultActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterColumnDropDefaultActionProtoDefaultTypeInternal _ResolvedAlterColumnDropDefaultActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropColumnActionProto::ResolvedDropColumnActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropColumnActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropColumnActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropColumnActionProtoDefaultTypeInternal() {}
  union {
    ResolvedDropColumnActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropColumnActionProtoDefaultTypeInternal _ResolvedDropColumnActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRenameColumnActionProto::ResolvedRenameColumnActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedRenameColumnActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRenameColumnActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRenameColumnActionProtoDefaultTypeInternal() {}
  union {
    ResolvedRenameColumnActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRenameColumnActionProtoDefaultTypeInternal _ResolvedRenameColumnActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSetAsActionProto::ResolvedSetAsActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_body_json_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entity_body_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedSetAsActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSetAsActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSetAsActionProtoDefaultTypeInternal() {}
  union {
    ResolvedSetAsActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSetAsActionProtoDefaultTypeInternal _ResolvedSetAsActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedSetCollateClauseProto::ResolvedSetCollateClauseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.collation_name_)*/nullptr} {}
struct ResolvedSetCollateClauseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedSetCollateClauseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedSetCollateClauseProtoDefaultTypeInternal() {}
  union {
    ResolvedSetCollateClauseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedSetCollateClauseProtoDefaultTypeInternal _ResolvedSetCollateClauseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterTableSetOptionsStmtProto::ResolvedAlterTableSetOptionsStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterTableSetOptionsStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal _ResolvedAlterTableSetOptionsStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRenameStmtProto::ResolvedRenameStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_name_path_)*/{}
  , /*decltype(_impl_.new_name_path_)*/{}
  , /*decltype(_impl_.object_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedRenameStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRenameStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRenameStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedRenameStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRenameStmtProtoDefaultTypeInternal _ResolvedRenameStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreatePrivilegeRestrictionStmtProto::ResolvedCreatePrivilegeRestrictionStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_privilege_list_)*/{}
  , /*decltype(_impl_.restrictee_list_)*/{}
  , /*decltype(_impl_.object_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedCreatePrivilegeRestrictionStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreatePrivilegeRestrictionStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreatePrivilegeRestrictionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreatePrivilegeRestrictionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreatePrivilegeRestrictionStmtProtoDefaultTypeInternal _ResolvedCreatePrivilegeRestrictionStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateRowAccessPolicyStmtProto::ResolvedCreateRowAccessPolicyStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_name_path_)*/{}
  , /*decltype(_impl_.grantee_list_)*/{}
  , /*decltype(_impl_.grantee_expr_list_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.predicate_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_scan_)*/nullptr
  , /*decltype(_impl_.predicate_)*/nullptr
  , /*decltype(_impl_.create_mode_)*/0} {}
struct ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateRowAccessPolicyStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal _ResolvedCreateRowAccessPolicyStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropPrivilegeRestrictionStmtProto::ResolvedDropPrivilegeRestrictionStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.column_privilege_list_)*/{}
  , /*decltype(_impl_.object_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropPrivilegeRestrictionStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropPrivilegeRestrictionStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropPrivilegeRestrictionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropPrivilegeRestrictionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropPrivilegeRestrictionStmtProtoDefaultTypeInternal _ResolvedDropPrivilegeRestrictionStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropRowAccessPolicyStmtProto::ResolvedDropRowAccessPolicyStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_name_path_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_drop_all_)*/false
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropRowAccessPolicyStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal _ResolvedDropRowAccessPolicyStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropSearchIndexStmtProto::ResolvedDropSearchIndexStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_name_path_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropSearchIndexStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropSearchIndexStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropSearchIndexStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropSearchIndexStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropSearchIndexStmtProtoDefaultTypeInternal _ResolvedDropSearchIndexStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedGrantToActionProto::ResolvedGrantToActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.grantee_expr_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedGrantToActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedGrantToActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedGrantToActionProtoDefaultTypeInternal() {}
  union {
    ResolvedGrantToActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedGrantToActionProtoDefaultTypeInternal _ResolvedGrantToActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRestrictToActionProto::ResolvedRestrictToActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.restrictee_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedRestrictToActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRestrictToActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRestrictToActionProtoDefaultTypeInternal() {}
  union {
    ResolvedRestrictToActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRestrictToActionProtoDefaultTypeInternal _ResolvedRestrictToActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAddToRestricteeListActionProto::ResolvedAddToRestricteeListActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.restrictee_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_not_exists_)*/false} {}
struct ResolvedAddToRestricteeListActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAddToRestricteeListActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAddToRestricteeListActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAddToRestricteeListActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAddToRestricteeListActionProtoDefaultTypeInternal _ResolvedAddToRestricteeListActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRemoveFromRestricteeListActionProto::ResolvedRemoveFromRestricteeListActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.restrictee_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedRemoveFromRestricteeListActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRemoveFromRestricteeListActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRemoveFromRestricteeListActionProtoDefaultTypeInternal() {}
  union {
    ResolvedRemoveFromRestricteeListActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRemoveFromRestricteeListActionProtoDefaultTypeInternal _ResolvedRemoveFromRestricteeListActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFilterUsingActionProto::ResolvedFilterUsingActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.predicate_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.predicate_)*/nullptr} {}
struct ResolvedFilterUsingActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFilterUsingActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFilterUsingActionProtoDefaultTypeInternal() {}
  union {
    ResolvedFilterUsingActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFilterUsingActionProtoDefaultTypeInternal _ResolvedFilterUsingActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRevokeFromActionProto::ResolvedRevokeFromActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.revokee_expr_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_revoke_from_all_)*/false} {}
struct ResolvedRevokeFromActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRevokeFromActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRevokeFromActionProtoDefaultTypeInternal() {}
  union {
    ResolvedRevokeFromActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRevokeFromActionProtoDefaultTypeInternal _ResolvedRevokeFromActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRenameToActionProto::ResolvedRenameToActionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedRenameToActionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRenameToActionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRenameToActionProtoDefaultTypeInternal() {}
  union {
    ResolvedRenameToActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRenameToActionProtoDefaultTypeInternal _ResolvedRenameToActionProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterPrivilegeRestrictionStmtProto::ResolvedAlterPrivilegeRestrictionStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_privilege_list_)*/{}
  , /*decltype(_impl_.object_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterPrivilegeRestrictionStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterPrivilegeRestrictionStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterPrivilegeRestrictionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterPrivilegeRestrictionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterPrivilegeRestrictionStmtProtoDefaultTypeInternal _ResolvedAlterPrivilegeRestrictionStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterRowAccessPolicyStmtProto::ResolvedAlterRowAccessPolicyStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_scan_)*/nullptr} {}
struct ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterRowAccessPolicyStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal _ResolvedAlterRowAccessPolicyStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterAllRowAccessPoliciesStmtProto::ResolvedAlterAllRowAccessPoliciesStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_scan_)*/nullptr} {}
struct ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterAllRowAccessPoliciesStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal _ResolvedAlterAllRowAccessPoliciesStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateConstantStmtProto::ResolvedCreateConstantStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr} {}
struct ResolvedCreateConstantStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateConstantStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateConstantStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateConstantStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateConstantStmtProtoDefaultTypeInternal _ResolvedCreateConstantStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateFunctionStmtProto::ResolvedCreateFunctionStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.aggregate_expression_list_)*/{}
  , /*decltype(_impl_.argument_name_list_)*/{}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.return_type_)*/nullptr
  , /*decltype(_impl_.function_expression_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.connection_)*/nullptr
  , /*decltype(_impl_.sql_security_)*/0
  , /*decltype(_impl_.has_explicit_return_type_)*/false
  , /*decltype(_impl_.is_aggregate_)*/false
  , /*decltype(_impl_.is_remote_)*/false
  , /*decltype(_impl_.determinism_level_)*/0} {}
struct ResolvedCreateFunctionStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateFunctionStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateFunctionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateFunctionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateFunctionStmtProtoDefaultTypeInternal _ResolvedCreateFunctionStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedArgumentDefProto::ResolvedArgumentDefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.argument_kind_)*/0} {}
struct ResolvedArgumentDefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedArgumentDefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedArgumentDefProtoDefaultTypeInternal() {}
  union {
    ResolvedArgumentDefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedArgumentDefProtoDefaultTypeInternal _ResolvedArgumentDefProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedArgumentRefProto::ResolvedArgumentRefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.argument_kind_)*/0} {}
struct ResolvedArgumentRefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedArgumentRefProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedArgumentRefProtoDefaultTypeInternal() {}
  union {
    ResolvedArgumentRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedArgumentRefProtoDefaultTypeInternal _ResolvedArgumentRefProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateTableFunctionStmtProto::ResolvedCreateTableFunctionStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.argument_name_list_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.output_column_list_)*/{}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.sql_security_)*/0
  , /*decltype(_impl_.has_explicit_return_schema_)*/false
  , /*decltype(_impl_.is_value_table_)*/false} {}
struct ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateTableFunctionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal _ResolvedCreateTableFunctionStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedRelationArgumentScanProto::ResolvedRelationArgumentScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_value_table_)*/false} {}
struct ResolvedRelationArgumentScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedRelationArgumentScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedRelationArgumentScanProtoDefaultTypeInternal() {}
  union {
    ResolvedRelationArgumentScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedRelationArgumentScanProtoDefaultTypeInternal _ResolvedRelationArgumentScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedArgumentListProto::ResolvedArgumentListProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arg_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedArgumentListProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedArgumentListProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedArgumentListProtoDefaultTypeInternal() {}
  union {
    ResolvedArgumentListProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedArgumentListProtoDefaultTypeInternal _ResolvedArgumentListProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedFunctionSignatureHolderProto::ResolvedFunctionSignatureHolderProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr} {}
struct ResolvedFunctionSignatureHolderProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedFunctionSignatureHolderProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedFunctionSignatureHolderProtoDefaultTypeInternal() {}
  union {
    ResolvedFunctionSignatureHolderProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedFunctionSignatureHolderProtoDefaultTypeInternal _ResolvedFunctionSignatureHolderProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropFunctionStmtProto::ResolvedDropFunctionStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.arguments_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropFunctionStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropFunctionStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropFunctionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropFunctionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropFunctionStmtProtoDefaultTypeInternal _ResolvedDropFunctionStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedDropTableFunctionStmtProto::ResolvedDropTableFunctionStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.is_if_exists_)*/false} {}
struct ResolvedDropTableFunctionStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedDropTableFunctionStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedDropTableFunctionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropTableFunctionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedDropTableFunctionStmtProtoDefaultTypeInternal _ResolvedDropTableFunctionStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCallStmtProto::ResolvedCallStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.argument_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.procedure_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr} {}
struct ResolvedCallStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCallStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCallStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCallStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCallStmtProtoDefaultTypeInternal _ResolvedCallStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedImportStmtProto::ResolvedImportStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.alias_path_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.into_alias_path_)*/{}
  , /*decltype(_impl_.file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.import_kind_)*/0} {}
struct ResolvedImportStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedImportStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedImportStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedImportStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedImportStmtProtoDefaultTypeInternal _ResolvedImportStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedModuleStmtProto::ResolvedModuleStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedModuleStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedModuleStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedModuleStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedModuleStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedModuleStmtProtoDefaultTypeInternal _ResolvedModuleStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAggregateHavingModifierProto::ResolvedAggregateHavingModifierProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.having_expr_)*/nullptr
  , /*decltype(_impl_.kind_)*/0} {}
struct ResolvedAggregateHavingModifierProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAggregateHavingModifierProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAggregateHavingModifierProtoDefaultTypeInternal() {}
  union {
    ResolvedAggregateHavingModifierProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAggregateHavingModifierProtoDefaultTypeInternal _ResolvedAggregateHavingModifierProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateMaterializedViewStmtProto::ResolvedCreateMaterializedViewStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_definition_list_)*/{}
  , /*decltype(_impl_.partition_by_list_)*/{}
  , /*decltype(_impl_.cluster_by_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateMaterializedViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal _ResolvedCreateMaterializedViewStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateProcedureStmtProto::ResolvedCreateProcedureStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.argument_name_list_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.procedure_body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.signature_)*/nullptr
  , /*decltype(_impl_.connection_)*/nullptr} {}
struct ResolvedCreateProcedureStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateProcedureStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateProcedureStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateProcedureStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateProcedureStmtProtoDefaultTypeInternal _ResolvedCreateProcedureStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedExecuteImmediateArgumentProto::ResolvedExecuteImmediateArgumentProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.expression_)*/nullptr} {}
struct ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal() {}
  union {
    ResolvedExecuteImmediateArgumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal _ResolvedExecuteImmediateArgumentProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedExecuteImmediateStmtProto::ResolvedExecuteImmediateStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.into_identifier_list_)*/{}
  , /*decltype(_impl_.using_argument_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.sql_)*/nullptr} {}
struct ResolvedExecuteImmediateStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedExecuteImmediateStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedExecuteImmediateStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedExecuteImmediateStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedExecuteImmediateStmtProtoDefaultTypeInternal _ResolvedExecuteImmediateStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAssignmentStmtProto::ResolvedAssignmentStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.expr_)*/nullptr} {}
struct ResolvedAssignmentStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAssignmentStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAssignmentStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAssignmentStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAssignmentStmtProtoDefaultTypeInternal _ResolvedAssignmentStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCreateEntityStmtProto::ResolvedCreateEntityStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.entity_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entity_body_json_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entity_body_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedCreateEntityStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCreateEntityStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCreateEntityStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateEntityStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCreateEntityStmtProtoDefaultTypeInternal _ResolvedCreateEntityStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAlterEntityStmtProto::ResolvedAlterEntityStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAlterEntityStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAlterEntityStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAlterEntityStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterEntityStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAlterEntityStmtProtoDefaultTypeInternal _ResolvedAlterEntityStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedPivotColumnProto::ResolvedPivotColumnProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.column_)*/nullptr
  , /*decltype(_impl_.pivot_expr_index_)*/int64_t{0}
  , /*decltype(_impl_.pivot_value_index_)*/int64_t{0}} {}
struct ResolvedPivotColumnProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedPivotColumnProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedPivotColumnProtoDefaultTypeInternal() {}
  union {
    ResolvedPivotColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedPivotColumnProtoDefaultTypeInternal _ResolvedPivotColumnProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedPivotScanProto::ResolvedPivotScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_by_list_)*/{}
  , /*decltype(_impl_.pivot_expr_list_)*/{}
  , /*decltype(_impl_.pivot_value_list_)*/{}
  , /*decltype(_impl_.pivot_column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr
  , /*decltype(_impl_.for_expr_)*/nullptr} {}
struct ResolvedPivotScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedPivotScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedPivotScanProtoDefaultTypeInternal() {}
  union {
    ResolvedPivotScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedPivotScanProtoDefaultTypeInternal _ResolvedPivotScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedReturningClauseProto::ResolvedReturningClauseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_column_list_)*/{}
  , /*decltype(_impl_.expr_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.action_column_)*/nullptr} {}
struct ResolvedReturningClauseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedReturningClauseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedReturningClauseProtoDefaultTypeInternal() {}
  union {
    ResolvedReturningClauseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedReturningClauseProtoDefaultTypeInternal _ResolvedReturningClauseProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedUnpivotArgProto::ResolvedUnpivotArgProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedUnpivotArgProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedUnpivotArgProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedUnpivotArgProtoDefaultTypeInternal() {}
  union {
    ResolvedUnpivotArgProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedUnpivotArgProtoDefaultTypeInternal _ResolvedUnpivotArgProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedUnpivotScanProto::ResolvedUnpivotScanProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_column_list_)*/{}
  , /*decltype(_impl_.label_list_)*/{}
  , /*decltype(_impl_.unpivot_arg_list_)*/{}
  , /*decltype(_impl_.projected_input_column_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.input_scan_)*/nullptr
  , /*decltype(_impl_.label_column_)*/nullptr
  , /*decltype(_impl_.include_nulls_)*/false} {}
struct ResolvedUnpivotScanProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedUnpivotScanProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedUnpivotScanProtoDefaultTypeInternal() {}
  union {
    ResolvedUnpivotScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedUnpivotScanProtoDefaultTypeInternal _ResolvedUnpivotScanProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedCloneDataStmtProto::ResolvedCloneDataStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.target_table_)*/nullptr
  , /*decltype(_impl_.clone_from_)*/nullptr} {}
struct ResolvedCloneDataStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedCloneDataStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedCloneDataStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCloneDataStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedCloneDataStmtProtoDefaultTypeInternal _ResolvedCloneDataStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedTableAndColumnInfoProto::ResolvedTableAndColumnInfoProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_index_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.table_)*/nullptr} {}
struct ResolvedTableAndColumnInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedTableAndColumnInfoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedTableAndColumnInfoProtoDefaultTypeInternal() {}
  union {
    ResolvedTableAndColumnInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedTableAndColumnInfoProtoDefaultTypeInternal _ResolvedTableAndColumnInfoProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAnalyzeStmtProto::ResolvedAnalyzeStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.table_and_column_index_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ResolvedAnalyzeStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAnalyzeStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAnalyzeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAnalyzeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAnalyzeStmtProtoDefaultTypeInternal _ResolvedAnalyzeStmtProto_default_instance_;
PROTOBUF_CONSTEXPR ResolvedAuxLoadDataStmtProto::ResolvedAuxLoadDataStmtProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_path_)*/{}
  , /*decltype(_impl_.output_column_list_)*/{}
  , /*decltype(_impl_.column_definition_list_)*/{}
  , /*decltype(_impl_.pseudo_column_list_)*/{}
  , /*decltype(_impl_.foreign_key_list_)*/{}
  , /*decltype(_impl_.check_constraint_list_)*/{}
  , /*decltype(_impl_.partition_by_list_)*/{}
  , /*decltype(_impl_.cluster_by_list_)*/{}
  , /*decltype(_impl_.option_list_)*/{}
  , /*decltype(_impl_.from_files_option_list_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.primary_key_)*/nullptr
  , /*decltype(_impl_.with_partition_columns_)*/nullptr
  , /*decltype(_impl_.connection_)*/nullptr
  , /*decltype(_impl_.insertion_mode_)*/0} {}
struct ResolvedAuxLoadDataStmtProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedAuxLoadDataStmtProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedAuxLoadDataStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAuxLoadDataStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedAuxLoadDataStmtProtoDefaultTypeInternal _ResolvedAuxLoadDataStmtProto_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[217];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNodeProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNodeProto, _impl_.node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedArgumentProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedArgumentProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentProto, _impl_.parent_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedExprProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedExprProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedExprProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, _impl_.type_annotation_map_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, _impl_.has_explicit_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, _impl_.float_literal_id_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, _impl_.preserve_in_literal_remover_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, _impl_.is_untyped_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExpressionColumnProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExpressionColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExpressionColumnProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExpressionColumnProto, _impl_.name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, _impl_.is_correlated_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstantProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstantProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstantProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstantProto, _impl_.constant_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSystemVariableProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSystemVariableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSystemVariableProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSystemVariableProto, _impl_.name_path_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, _impl_.argument_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, _impl_.parameter_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, _impl_.body_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, _impl_.include_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, _impl_.field_descriptor_path_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, _impl_.filter_field_arg_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, _impl_.reset_cleared_required_fields_),
  0,
  1,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedFunctionCallBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedFunctionCallBaseProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedFunctionCallBaseProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _impl_.function_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _impl_.argument_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _impl_.generic_argument_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _impl_.error_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _impl_.hint_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _impl_.collation_list_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallProto, _impl_.function_call_info_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, _impl_.distinct_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, _impl_.null_handling_modifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, _impl_.with_group_rows_subquery_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, _impl_.with_group_rows_parameter_list_),
  0,
  2,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, _impl_.having_modifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, _impl_.order_by_item_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, _impl_.function_call_info_),
  0,
  2,
  ~0u,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionCallProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionCallProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionCallProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionCallProto, _impl_.window_frame_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, _impl_.from_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, _impl_.to_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, _impl_.function_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastProto, _impl_.element_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _impl_.return_null_on_error_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _impl_.extended_cast_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _impl_.time_zone_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _impl_.type_parameters_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeStructProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeStructProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeStructProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeStructProto, _impl_.field_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoProto, _impl_.field_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, _impl_.field_descriptor_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, _impl_.expr_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, _impl_.field_idx_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _impl_.field_descriptor_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _impl_.default_value_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _impl_.get_has_bit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _impl_.return_default_value_when_unset_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, _impl_.field_name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, _impl_.get_field_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenedArgProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenedArgProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenedArgProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, _impl_.struct_index_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, _impl_.proto_field_path_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, _impl_.replace_field_item_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _impl_.subquery_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _impl_.parameter_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _impl_.in_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _impl_.in_collation_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _impl_.subquery_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _impl_.hint_list_),
  0,
  4,
  ~0u,
  1,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithExprProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithExprProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithExprProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithExprProto, _impl_.assignment_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithExprProto, _impl_.expr_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedScanProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedScanProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, _impl_.column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, _impl_.hint_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, _impl_.is_ordered_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModelProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModelProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModelProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModelProto, _impl_.model_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConnectionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConnectionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConnectionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConnectionProto, _impl_.connection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, _impl_.descriptor_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, _impl_.descriptor_column_name_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSingleRowScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSingleRowScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSingleRowScanProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, _impl_.for_system_time_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, _impl_.column_index_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, _impl_.alias_),
  1,
  2,
  3,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, _impl_.join_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, _impl_.left_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, _impl_.right_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, _impl_.join_expr_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _impl_.input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _impl_.array_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _impl_.element_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _impl_.array_offset_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _impl_.join_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _impl_.is_outer_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnHolderProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnHolderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnHolderProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnHolderProto, _impl_.column_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, _impl_.input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, _impl_.filter_expr_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupingSetProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupingSetProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupingSetProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupingSetProto, _impl_.group_by_column_list_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAggregateScanBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAggregateScanBaseProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAggregateScanBaseProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, _impl_.input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, _impl_.group_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, _impl_.collation_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, _impl_.aggregate_list_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, _impl_.grouping_set_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, _impl_.rollup_column_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, _impl_.k_threshold_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, _impl_.anonymization_option_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, _impl_.scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, _impl_.output_column_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, _impl_.op_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, _impl_.input_item_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, _impl_.input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, _impl_.order_by_item_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, _impl_.input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, _impl_.offset_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithRefScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithRefScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithRefScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithRefScanProto, _impl_.with_query_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, _impl_.input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, _impl_.function_group_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _impl_.input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _impl_.unit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _impl_.repeatable_argument_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _impl_.weight_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _impl_.partition_by_list_),
  1,
  2,
  0,
  3,
  6,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, _impl_.expr_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _impl_.column_ref_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _impl_.collation_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _impl_.is_descending_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _impl_.null_order_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _impl_.collation_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _impl_.collation_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _impl_.not_null_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _impl_.child_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _impl_.type_parameters_),
  0,
  2,
  3,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, _impl_.expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, _impl_.stored_mode_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, _impl_.expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, _impl_.sql_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _impl_.is_hidden_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _impl_.generated_column_info_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _impl_.default_value_),
  1,
  0,
  2,
  3,
  7,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedConstraintProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedConstraintProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstraintProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstraintProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _impl_.column_offset_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _impl_.unenforced_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _impl_.constraint_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _impl_.column_name_list_),
  1,
  ~0u,
  ~0u,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.constraint_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.referencing_column_offset_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.referenced_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.referenced_column_offset_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.match_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.update_action_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.delete_action_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.enforced_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _impl_.referencing_column_list_),
  1,
  0,
  ~0u,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, _impl_.constraint_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, _impl_.expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, _impl_.enforced_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, _impl_.option_list_),
  1,
  0,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, _impl_.column_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, _impl_.expr_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, _impl_.input_scan_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _impl_.tvf_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _impl_.argument_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _impl_.column_index_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _impl_.alias_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _impl_.function_call_signature_),
  1,
  2,
  3,
  ~0u,
  ~0u,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, _impl_.input_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, _impl_.alias_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _impl_.expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _impl_.scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _impl_.connection_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _impl_.descriptor_arg_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _impl_.argument_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _impl_.inline_lambda_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedStatementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedStatementProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedStatementProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStatementProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStatementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStatementProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStatementProto, _impl_.hint_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExplainStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExplainStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExplainStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExplainStmtProto, _impl_.statement_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, _impl_.output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, _impl_.is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, _impl_.query_),
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, _impl_.option_list_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateStatementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateStatementProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateStatementProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, _impl_.create_scope_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, _impl_.create_mode_),
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, _impl_.column_ref_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, _impl_.descending_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, _impl_.array_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, _impl_.element_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, _impl_.array_offset_column_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.table_name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.is_unique_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.is_search_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.index_all_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.index_item_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.storing_expression_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.computed_columns_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _impl_.unnest_expressions_list_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, _impl_.collation_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, _impl_.option_list_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateTableStmtBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateTableStmtBaseProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateTableStmtBaseProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.column_definition_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.pseudo_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.primary_key_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.foreign_key_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.check_constraint_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.like_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _impl_.collation_name_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, _impl_.clone_from_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, _impl_.copy_from_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, _impl_.partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, _impl_.cluster_by_list_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, _impl_.partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, _impl_.cluster_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, _impl_.output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, _impl_.query_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _impl_.output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _impl_.transform_input_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _impl_.transform_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _impl_.transform_output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _impl_.transform_analytic_function_group_list_),
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateViewBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateViewBaseProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateViewBaseProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_.output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_.has_explicit_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_.sql_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_.sql_security_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_.is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _impl_.recursive_),
  1,
  ~0u,
  ~0u,
  4,
  2,
  0,
  3,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithPartitionColumnsProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithPartitionColumnsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithPartitionColumnsProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithPartitionColumnsProto, _impl_.column_definition_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, _impl_.clone_from_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, _impl_.option_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, _impl_.with_partition_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, _impl_.connection_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, _impl_.model_name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, _impl_.connection_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, _impl_.option_list_),
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _impl_.connection_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _impl_.output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _impl_.is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _impl_.query_),
  0,
  2,
  ~0u,
  ~0u,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, _impl_.option_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, _impl_.object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, _impl_.from_name_path_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, _impl_.like_expr_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, _impl_.read_write_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, _impl_.isolation_level_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, _impl_.read_write_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, _impl_.isolation_level_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCommitStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCommitStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCommitStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRollbackStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRollbackStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRollbackStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStartBatchStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStartBatchStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStartBatchStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStartBatchStmtProto, _impl_.batch_type_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRunBatchStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRunBatchStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRunBatchStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAbortBatchStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAbortBatchStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAbortBatchStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, _impl_.object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, _impl_.drop_mode_),
  1,
  0,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, _impl_.name_path_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, _impl_.name_path_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveRefScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveRefScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveRefScanProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, _impl_.op_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, _impl_.non_recursive_term_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, _impl_.recursive_term_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, _impl_.with_entry_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, _impl_.recursive_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, _impl_.with_query_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, _impl_.with_subquery_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, _impl_.qualifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, _impl_.value_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, _impl_.partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, _impl_.hint_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, _impl_.order_by_item_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, _impl_.hint_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, _impl_.frame_unit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, _impl_.start_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, _impl_.end_expr_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, _impl_.partition_by_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, _impl_.order_by_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, _impl_.analytic_function_list_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, _impl_.boundary_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, _impl_.expression_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLValueProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLValueProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLValueProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLValueProto, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLDefaultProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLDefaultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLDefaultProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, _impl_.expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, _impl_.description_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertRowsModifiedProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertRowsModifiedProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertRowsModifiedProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertRowsModifiedProto, _impl_.rows_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertRowProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertRowProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertRowProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertRowProto, _impl_.value_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.insert_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.assert_rows_modified_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.returning_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.insert_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.query_parameter_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.query_output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.row_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _impl_.column_access_list_),
  0,
  1,
  5,
  2,
  4,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _impl_.table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _impl_.assert_rows_modified_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _impl_.returning_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _impl_.column_access_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _impl_.array_offset_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _impl_.where_expr_),
  0,
  1,
  2,
  5,
  ~0u,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _impl_.set_value_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _impl_.element_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _impl_.array_update_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _impl_.delete_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _impl_.update_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _impl_.insert_list_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, _impl_.update_item_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_.table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_.column_access_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_.assert_rows_modified_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_.returning_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_.array_offset_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_.where_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_.update_item_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _impl_.from_scan_),
  0,
  1,
  ~0u,
  2,
  6,
  5,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _impl_.match_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _impl_.match_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _impl_.insert_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _impl_.insert_row_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _impl_.update_item_list_),
  0,
  3,
  1,
  4,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _impl_.table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _impl_.column_access_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _impl_.from_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _impl_.merge_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _impl_.when_clause_list_),
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, _impl_.table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, _impl_.where_expr_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedObjectUnitProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedObjectUnitProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedObjectUnitProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedObjectUnitProto, _impl_.name_path_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, _impl_.unit_list_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedGrantOrRevokeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedGrantOrRevokeStmtProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedGrantOrRevokeStmtProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _impl_.privilege_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _impl_.object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _impl_.grantee_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _impl_.grantee_expr_list_),
  1,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeStmtProto, _impl_.parent_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterObjectStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterObjectStmtProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterObjectStmtProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, _impl_.alter_action_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, _impl_.is_if_exists_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterDatabaseStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterDatabaseStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterDatabaseStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterMaterializedViewStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterMaterializedViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterMaterializedViewStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSchemaStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSchemaStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSchemaStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterModelStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterModelStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterModelStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableStmtProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterViewStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterViewStmtProto, _impl_.parent_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterActionProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterActionProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterActionProto, _impl_.parent_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterColumnActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterColumnActionProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterColumnActionProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnActionProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnActionProto, _impl_.column_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOptionsActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOptionsActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOptionsActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOptionsActionProto, _impl_.option_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSubEntityActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSubEntityActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSubEntityActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSubEntityActionProto, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSubEntityActionProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSubEntityActionProto, _impl_.alter_action_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSubEntityActionProto, _impl_.is_if_exists_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddSubEntityActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddSubEntityActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddSubEntityActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddSubEntityActionProto, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddSubEntityActionProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddSubEntityActionProto, _impl_.options_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddSubEntityActionProto, _impl_.is_if_not_exists_),
  2,
  0,
  1,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSubEntityActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSubEntityActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSubEntityActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSubEntityActionProto, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSubEntityActionProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSubEntityActionProto, _impl_.is_if_exists_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, _impl_.is_if_not_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, _impl_.column_definition_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, _impl_.is_if_not_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, _impl_.constraint_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, _impl_.table_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, _impl_.name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrimaryKeyActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrimaryKeyActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrimaryKeyActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrimaryKeyActionProto, _impl_.is_if_exists_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, _impl_.option_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropNotNullActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropNotNullActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropNotNullActionProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, _impl_.updated_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, _impl_.updated_type_parameters_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, _impl_.updated_annotations_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDefaultActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDefaultActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDefaultActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDefaultActionProto, _impl_.default_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropDefaultActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropDefaultActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropDefaultActionProto, _impl_.parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, _impl_.name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, _impl_.new_name_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, _impl_.entity_body_json_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, _impl_.entity_body_text_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetCollateClauseProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetCollateClauseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetCollateClauseProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetCollateClauseProto, _impl_.collation_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, _impl_.is_if_exists_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, _impl_.object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, _impl_.old_name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, _impl_.new_name_path_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto, _impl_.column_privilege_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto, _impl_.object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto, _impl_.restrictee_list_),
  1,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_.create_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_.target_name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_.grantee_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_.grantee_expr_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_.table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_.predicate_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _impl_.predicate_str_),
  2,
  5,
  0,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto, _impl_.object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto, _impl_.column_privilege_list_),
  1,
  0,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, _impl_.is_drop_all_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, _impl_.target_name_path_),
  1,
  2,
  3,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, _impl_.table_name_path_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantToActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantToActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantToActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantToActionProto, _impl_.grantee_expr_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRestrictToActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRestrictToActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRestrictToActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRestrictToActionProto, _impl_.restrictee_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddToRestricteeListActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddToRestricteeListActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddToRestricteeListActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddToRestricteeListActionProto, _impl_.is_if_not_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddToRestricteeListActionProto, _impl_.restrictee_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRemoveFromRestricteeListActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRemoveFromRestricteeListActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRemoveFromRestricteeListActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRemoveFromRestricteeListActionProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRemoveFromRestricteeListActionProto, _impl_.restrictee_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, _impl_.predicate_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, _impl_.predicate_str_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, _impl_.revokee_expr_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, _impl_.is_revoke_from_all_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameToActionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameToActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameToActionProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameToActionProto, _impl_.new_path_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto, _impl_.column_privilege_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto, _impl_.object_type_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, _impl_.table_scan_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto, _impl_.table_scan_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateConstantStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateConstantStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateConstantStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateConstantStmtProto, _impl_.expr_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.has_explicit_return_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.return_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.argument_name_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.is_aggregate_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.aggregate_expression_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.function_expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.sql_security_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.determinism_level_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.is_remote_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _impl_.connection_),
  2,
  8,
  3,
  ~0u,
  5,
  9,
  0,
  1,
  ~0u,
  4,
  ~0u,
  7,
  11,
  10,
  6,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, _impl_.argument_kind_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, _impl_.argument_kind_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.argument_name_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.has_explicit_return_schema_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _impl_.sql_security_),
  2,
  ~0u,
  3,
  6,
  ~0u,
  0,
  1,
  4,
  ~0u,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, _impl_.is_value_table_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentListProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentListProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentListProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentListProto, _impl_.arg_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionSignatureHolderProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionSignatureHolderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionSignatureHolderProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionSignatureHolderProto, _impl_.signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, _impl_.signature_),
  0,
  3,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, _impl_.is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, _impl_.name_path_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, _impl_.procedure_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, _impl_.argument_list_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _impl_.import_kind_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _impl_.file_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _impl_.alias_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _impl_.into_alias_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _impl_.option_list_),
  1,
  2,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, _impl_.option_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, _impl_.having_expr_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, _impl_.column_definition_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, _impl_.partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, _impl_.cluster_by_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _impl_.argument_name_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _impl_.procedure_body_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _impl_.connection_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _impl_.code_),
  3,
  ~0u,
  4,
  ~0u,
  0,
  5,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, _impl_.expression_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, _impl_.sql_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, _impl_.into_identifier_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, _impl_.using_argument_list_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, _impl_.expr_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, _impl_.entity_body_json_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, _impl_.entity_body_text_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, _impl_.option_list_),
  3,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterEntityStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterEntityStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterEntityStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterEntityStmtProto, _impl_.entity_type_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, _impl_.pivot_expr_index_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, _impl_.pivot_value_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _impl_.input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _impl_.group_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _impl_.pivot_expr_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _impl_.for_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _impl_.pivot_value_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _impl_.pivot_column_list_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, _impl_.output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, _impl_.action_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, _impl_.expr_list_),
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotArgProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotArgProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotArgProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotArgProto, _impl_.column_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _impl_.input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _impl_.value_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _impl_.label_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _impl_.label_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _impl_.unpivot_arg_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _impl_.projected_input_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _impl_.include_nulls_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, _impl_.target_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, _impl_.clone_from_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, _impl_.column_index_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, _impl_.table_and_column_index_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.insertion_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.column_definition_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.pseudo_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.primary_key_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.foreign_key_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.check_constraint_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.cluster_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.with_partition_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.connection_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _impl_.from_files_option_list_),
  0,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::zetasql::AnyResolvedNodeProto)},
  { 11, -1, -1, sizeof(::zetasql::AnyResolvedArgumentProto)},
  { 67, 74, -1, sizeof(::zetasql::ResolvedArgumentProto)},
  { 75, -1, -1, sizeof(::zetasql::AnyResolvedExprProto)},
  { 103, 112, -1, sizeof(::zetasql::ResolvedExprProto)},
  { 115, 126, -1, sizeof(::zetasql::ResolvedLiteralProto)},
  { 131, 141, -1, sizeof(::zetasql::ResolvedParameterProto)},
  { 145, 153, -1, sizeof(::zetasql::ResolvedExpressionColumnProto)},
  { 155, 164, -1, sizeof(::zetasql::ResolvedColumnRefProto)},
  { 167, 175, -1, sizeof(::zetasql::ResolvedConstantProto)},
  { 177, 185, -1, sizeof(::zetasql::ResolvedSystemVariableProto)},
  { 187, 197, -1, sizeof(::zetasql::ResolvedInlineLambdaProto)},
  { 201, 210, -1, sizeof(::zetasql::ResolvedFilterFieldArgProto)},
  { 213, 223, -1, sizeof(::zetasql::ResolvedFilterFieldProto)},
  { 227, -1, -1, sizeof(::zetasql::AnyResolvedFunctionCallBaseProto)},
  { 236, 250, -1, sizeof(::zetasql::ResolvedFunctionCallBaseProto)},
  { 258, 266, -1, sizeof(::zetasql::ResolvedFunctionCallProto)},
  { 268, -1, -1, sizeof(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto)},
  { 277, 288, -1, sizeof(::zetasql::ResolvedNonScalarFunctionCallBaseProto)},
  { 293, 304, -1, sizeof(::zetasql::ResolvedAggregateFunctionCallProto)},
  { 309, 317, -1, sizeof(::zetasql::ResolvedAnalyticFunctionCallProto)},
  { 319, 329, -1, sizeof(::zetasql::ResolvedExtendedCastElementProto)},
  { 333, 341, -1, sizeof(::zetasql::ResolvedExtendedCastProto)},
  { 343, 356, -1, sizeof(::zetasql::ResolvedCastProto)},
  { 363, 371, -1, sizeof(::zetasql::ResolvedMakeStructProto)},
  { 373, 381, -1, sizeof(::zetasql::ResolvedMakeProtoProto)},
  { 383, 393, -1, sizeof(::zetasql::ResolvedMakeProtoFieldProto)},
  { 397, 406, -1, sizeof(::zetasql::ResolvedGetStructFieldProto)},
  { 409, 422, -1, sizeof(::zetasql::ResolvedGetProtoFieldProto)},
  { 429, 438, -1, sizeof(::zetasql::ResolvedGetJsonFieldProto)},
  { 441, 450, -1, sizeof(::zetasql::ResolvedFlattenProto)},
  { 453, 460, -1, sizeof(::zetasql::ResolvedFlattenedArgProto)},
  { 461, 471, -1, sizeof(::zetasql::ResolvedReplaceFieldItemProto)},
  { 475, 484, -1, sizeof(::zetasql::ResolvedReplaceFieldProto)},
  { 487, 500, -1, sizeof(::zetasql::ResolvedSubqueryExprProto)},
  { 507, 516, -1, sizeof(::zetasql::ResolvedWithExprProto)},
  { 519, -1, -1, sizeof(::zetasql::AnyResolvedScanProto)},
  { 547, 557, -1, sizeof(::zetasql::ResolvedScanProto)},
  { 561, 569, -1, sizeof(::zetasql::ResolvedModelProto)},
  { 571, 579, -1, sizeof(::zetasql::ResolvedConnectionProto)},
  { 581, 590, -1, sizeof(::zetasql::ResolvedDescriptorProto)},
  { 593, 600, -1, sizeof(::zetasql::ResolvedSingleRowScanProto)},
  { 601, 612, -1, sizeof(::zetasql::ResolvedTableScanProto)},
  { 617, 628, -1, sizeof(::zetasql::ResolvedJoinScanProto)},
  { 633, 646, -1, sizeof(::zetasql::ResolvedArrayScanProto)},
  { 653, 661, -1, sizeof(::zetasql::ResolvedColumnHolderProto)},
  { 663, 672, -1, sizeof(::zetasql::ResolvedFilterScanProto)},
  { 675, 683, -1, sizeof(::zetasql::ResolvedGroupingSetProto)},
  { 685, -1, -1, sizeof(::zetasql::AnyResolvedAggregateScanBaseProto)},
  { 694, 705, -1, sizeof(::zetasql::ResolvedAggregateScanBaseProto)},
  { 710, 719, -1, sizeof(::zetasql::ResolvedAggregateScanProto)},
  { 722, 731, -1, sizeof(::zetasql::ResolvedAnonymizedAggregateScanProto)},
  { 734, 743, -1, sizeof(::zetasql::ResolvedSetOperationItemProto)},
  { 746, 755, -1, sizeof(::zetasql::ResolvedSetOperationScanProto)},
  { 758, 767, -1, sizeof(::zetasql::ResolvedOrderByScanProto)},
  { 770, 780, -1, sizeof(::zetasql::ResolvedLimitOffsetScanProto)},
  { 784, 792, -1, sizeof(::zetasql::ResolvedWithRefScanProto)},
  { 794, 803, -1, sizeof(::zetasql::ResolvedAnalyticScanProto)},
  { 806, 820, -1, sizeof(::zetasql::ResolvedSampleScanProto)},
  { 828, 837, -1, sizeof(::zetasql::ResolvedComputedColumnProto)},
  { 840, 852, -1, sizeof(::zetasql::ResolvedOrderByItemProto)},
  { 858, 870, -1, sizeof(::zetasql::ResolvedColumnAnnotationsProto)},
  { 876, 885, -1, sizeof(::zetasql::ResolvedGeneratedColumnInfoProto)},
  { 888, 897, -1, sizeof(::zetasql::ResolvedColumnDefaultValueProto)},
  { 900, 914, -1, sizeof(::zetasql::ResolvedColumnDefinitionProto)},
  { 922, -1, -1, sizeof(::zetasql::AnyResolvedConstraintProto)},
  { 932, 939, -1, sizeof(::zetasql::ResolvedConstraintProto)},
  { 940, 952, -1, sizeof(::zetasql::ResolvedPrimaryKeyProto)},
  { 958, 975, -1, sizeof(::zetasql::ResolvedForeignKeyProto)},
  { 986, 997, -1, sizeof(::zetasql::ResolvedCheckConstraintProto)},
  { 1002, 1011, -1, sizeof(::zetasql::ResolvedOutputColumnProto)},
  { 1014, 1023, -1, sizeof(::zetasql::ResolvedProjectScanProto)},
  { 1026, 1039, -1, sizeof(::zetasql::ResolvedTVFScanProto)},
  { 1046, 1055, -1, sizeof(::zetasql::ResolvedGroupRowsScanProto)},
  { 1058, 1072, -1, sizeof(::zetasql::ResolvedFunctionArgumentProto)},
  { 1080, -1, -1, sizeof(::zetasql::AnyResolvedStatementProto)},
  { 1130, 1138, -1, sizeof(::zetasql::ResolvedStatementProto)},
  { 1140, 1148, -1, sizeof(::zetasql::ResolvedExplainStmtProto)},
  { 1150, 1160, -1, sizeof(::zetasql::ResolvedQueryStmtProto)},
  { 1164, 1173, -1, sizeof(::zetasql::ResolvedCreateDatabaseStmtProto)},
  { 1176, -1, -1, sizeof(::zetasql::AnyResolvedCreateStatementProto)},
  { 1195, 1205, -1, sizeof(::zetasql::ResolvedCreateStatementProto)},
  { 1209, 1218, -1, sizeof(::zetasql::ResolvedIndexItemProto)},
  { 1221, 1231, -1, sizeof(::zetasql::ResolvedUnnestItemProto)},
  { 1235, 1252, -1, sizeof(::zetasql::ResolvedCreateIndexStmtProto)},
  { 1263, 1272, -1, sizeof(::zetasql::ResolvedCreateSchemaStmtProto)},
  { 1275, -1, -1, sizeof(::zetasql::AnyResolvedCreateTableStmtBaseProto)},
  { 1285, 1301, -1, sizeof(::zetasql::ResolvedCreateTableStmtBaseProto)},
  { 1311, 1322, -1, sizeof(::zetasql::ResolvedCreateTableStmtProto)},
  { 1327, 1338, -1, sizeof(::zetasql::ResolvedCreateTableAsSelectStmtProto)},
  { 1343, 1357, -1, sizeof(::zetasql::ResolvedCreateModelStmtProto)},
  { 1365, -1, -1, sizeof(::zetasql::AnyResolvedCreateViewBaseProto)},
  { 1374, 1389, -1, sizeof(::zetasql::ResolvedCreateViewBaseProto)},
  { 1398, 1405, -1, sizeof(::zetasql::ResolvedCreateViewStmtProto)},
  { 1406, 1414, -1, sizeof(::zetasql::ResolvedWithPartitionColumnsProto)},
  { 1416, 1425, -1, sizeof(::zetasql::ResolvedCreateSnapshotTableStmtProto)},
  { 1428, 1437, -1, sizeof(::zetasql::ResolvedCreateExternalTableStmtProto)},
  { 1440, 1450, -1, sizeof(::zetasql::ResolvedExportModelStmtProto)},
  { 1454, 1466, -1, sizeof(::zetasql::ResolvedExportDataStmtProto)},
  { 1472, 1481, -1, sizeof(::zetasql::ResolvedDefineTableStmtProto)},
  { 1484, 1494, -1, sizeof(::zetasql::ResolvedDescribeStmtProto)},
  { 1498, 1508, -1, sizeof(::zetasql::ResolvedShowStmtProto)},
  { 1512, 1521, -1, sizeof(::zetasql::ResolvedBeginStmtProto)},
  { 1524, 1533, -1, sizeof(::zetasql::ResolvedSetTransactionStmtProto)},
  { 1536, 1543, -1, sizeof(::zetasql::ResolvedCommitStmtProto)},
  { 1544, 1551, -1, sizeof(::zetasql::ResolvedRollbackStmtProto)},
  { 1552, 1560, -1, sizeof(::zetasql::ResolvedStartBatchStmtProto)},
  { 1562, 1569, -1, sizeof(::zetasql::ResolvedRunBatchStmtProto)},
  { 1570, 1577, -1, sizeof(::zetasql::ResolvedAbortBatchStmtProto)},
  { 1578, 1589, -1, sizeof(::zetasql::ResolvedDropStmtProto)},
  { 1594, 1603, -1, sizeof(::zetasql::ResolvedDropMaterializedViewStmtProto)},
  { 1606, 1615, -1, sizeof(::zetasql::ResolvedDropSnapshotTableStmtProto)},
  { 1618, 1625, -1, sizeof(::zetasql::ResolvedRecursiveRefScanProto)},
  { 1626, 1636, -1, sizeof(::zetasql::ResolvedRecursiveScanProto)},
  { 1640, 1650, -1, sizeof(::zetasql::ResolvedWithScanProto)},
  { 1654, 1663, -1, sizeof(::zetasql::ResolvedWithEntryProto)},
  { 1666, 1676, -1, sizeof(::zetasql::ResolvedOptionProto)},
  { 1680, 1689, -1, sizeof(::zetasql::ResolvedWindowPartitioningProto)},
  { 1692, 1701, -1, sizeof(::zetasql::ResolvedWindowOrderingProto)},
  { 1704, 1714, -1, sizeof(::zetasql::ResolvedWindowFrameProto)},
  { 1718, 1728, -1, sizeof(::zetasql::ResolvedAnalyticFunctionGroupProto)},
  { 1732, 1741, -1, sizeof(::zetasql::ResolvedWindowFrameExprProto)},
  { 1744, 1752, -1, sizeof(::zetasql::ResolvedDMLValueProto)},
  { 1754, 1761, -1, sizeof(::zetasql::ResolvedDMLDefaultProto)},
  { 1762, 1771, -1, sizeof(::zetasql::ResolvedAssertStmtProto)},
  { 1774, 1782, -1, sizeof(::zetasql::ResolvedAssertRowsModifiedProto)},
  { 1784, 1792, -1, sizeof(::zetasql::ResolvedInsertRowProto)},
  { 1794, 1811, -1, sizeof(::zetasql::ResolvedInsertStmtProto)},
  { 1822, 1835, -1, sizeof(::zetasql::ResolvedDeleteStmtProto)},
  { 1842, 1856, -1, sizeof(::zetasql::ResolvedUpdateItemProto)},
  { 1864, 1873, -1, sizeof(::zetasql::ResolvedUpdateArrayItemProto)},
  { 1876, 1891, -1, sizeof(::zetasql::ResolvedUpdateStmtProto)},
  { 1900, 1913, -1, sizeof(::zetasql::ResolvedMergeWhenProto)},
  { 1920, 1932, -1, sizeof(::zetasql::ResolvedMergeStmtProto)},
  { 1938, 1947, -1, sizeof(::zetasql::ResolvedTruncateStmtProto)},
  { 1950, 1958, -1, sizeof(::zetasql::ResolvedObjectUnitProto)},
  { 1960, 1969, -1, sizeof(::zetasql::ResolvedPrivilegeProto)},
  { 1972, -1, -1, sizeof(::zetasql::AnyResolvedGrantOrRevokeStmtProto)},
  { 1981, 1993, -1, sizeof(::zetasql::ResolvedGrantOrRevokeStmtProto)},
  { 1999, 2006, -1, sizeof(::zetasql::ResolvedGrantStmtProto)},
  { 2007, 2014, -1, sizeof(::zetasql::ResolvedRevokeStmtProto)},
  { 2015, -1, -1, sizeof(::zetasql::AnyResolvedAlterObjectStmtProto)},
  { 2032, 2042, -1, sizeof(::zetasql::ResolvedAlterObjectStmtProto)},
  { 2046, 2053, -1, sizeof(::zetasql::ResolvedAlterDatabaseStmtProto)},
  { 2054, 2061, -1, sizeof(::zetasql::ResolvedAlterMaterializedViewStmtProto)},
  { 2062, 2069, -1, sizeof(::zetasql::ResolvedAlterSchemaStmtProto)},
  { 2070, 2077, -1, sizeof(::zetasql::ResolvedAlterModelStmtProto)},
  { 2078, 2085, -1, sizeof(::zetasql::ResolvedAlterTableStmtProto)},
  { 2086, 2093, -1, sizeof(::zetasql::ResolvedAlterViewStmtProto)},
  { 2094, -1, -1, sizeof(::zetasql::AnyResolvedAlterActionProto)},
  { 2121, 2128, -1, sizeof(::zetasql::ResolvedAlterActionProto)},
  { 2129, -1, -1, sizeof(::zetasql::AnyResolvedAlterColumnActionProto)},
  { 2141, 2150, -1, sizeof(::zetasql::ResolvedAlterColumnActionProto)},
  { 2153, 2161, -1, sizeof(::zetasql::ResolvedSetOptionsActionProto)},
  { 2163, 2174, -1, sizeof(::zetasql::ResolvedAlterSubEntityActionProto)},
  { 2179, 2190, -1, sizeof(::zetasql::ResolvedAddSubEntityActionProto)},
  { 2195, 2205, -1, sizeof(::zetasql::ResolvedDropSubEntityActionProto)},
  { 2209, 2218, -1, sizeof(::zetasql::ResolvedAddColumnActionProto)},
  { 2221, 2231, -1, sizeof(::zetasql::ResolvedAddConstraintActionProto)},
  { 2235, 2244, -1, sizeof(::zetasql::ResolvedDropConstraintActionProto)},
  { 2247, 2255, -1, sizeof(::zetasql::ResolvedDropPrimaryKeyActionProto)},
  { 2257, 2265, -1, sizeof(::zetasql::ResolvedAlterColumnOptionsActionProto)},
  { 2267, 2274, -1, sizeof(::zetasql::ResolvedAlterColumnDropNotNullActionProto)},
  { 2275, 2285, -1, sizeof(::zetasql::ResolvedAlterColumnSetDataTypeActionProto)},
  { 2289, 2297, -1, sizeof(::zetasql::ResolvedAlterColumnSetDefaultActionProto)},
  { 2299, 2306, -1, sizeof(::zetasql::ResolvedAlterColumnDropDefaultActionProto)},
  { 2307, 2316, -1, sizeof(::zetasql::ResolvedDropColumnActionProto)},
  { 2319, 2329, -1, sizeof(::zetasql::ResolvedRenameColumnActionProto)},
  { 2333, 2342, -1, sizeof(::zetasql::ResolvedSetAsActionProto)},
  { 2345, 2353, -1, sizeof(::zetasql::ResolvedSetCollateClauseProto)},
  { 2355, 2365, -1, sizeof(::zetasql::ResolvedAlterTableSetOptionsStmtProto)},
  { 2369, 2379, -1, sizeof(::zetasql::ResolvedRenameStmtProto)},
  { 2383, 2393, -1, sizeof(::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto)},
  { 2397, 2412, -1, sizeof(::zetasql::ResolvedCreateRowAccessPolicyStmtProto)},
  { 2421, 2432, -1, sizeof(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto)},
  { 2437, 2448, -1, sizeof(::zetasql::ResolvedDropRowAccessPolicyStmtProto)},
  { 2453, 2463, -1, sizeof(::zetasql::ResolvedDropSearchIndexStmtProto)},
  { 2467, 2475, -1, sizeof(::zetasql::ResolvedGrantToActionProto)},
  { 2477, 2485, -1, sizeof(::zetasql::ResolvedRestrictToActionProto)},
  { 2487, 2496, -1, sizeof(::zetasql::ResolvedAddToRestricteeListActionProto)},
  { 2499, 2508, -1, sizeof(::zetasql::ResolvedRemoveFromRestricteeListActionProto)},
  { 2511, 2520, -1, sizeof(::zetasql::ResolvedFilterUsingActionProto)},
  { 2523, 2532, -1, sizeof(::zetasql::ResolvedRevokeFromActionProto)},
  { 2535, 2543, -1, sizeof(::zetasql::ResolvedRenameToActionProto)},
  { 2545, 2554, -1, sizeof(::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto)},
  { 2557, 2566, -1, sizeof(::zetasql::ResolvedAlterRowAccessPolicyStmtProto)},
  { 2569, 2577, -1, sizeof(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto)},
  { 2579, 2587, -1, sizeof(::zetasql::ResolvedCreateConstantStmtProto)},
  { 2589, 2610, -1, sizeof(::zetasql::ResolvedCreateFunctionStmtProto)},
  { 2625, 2635, -1, sizeof(::zetasql::ResolvedArgumentDefProto)},
  { 2639, 2648, -1, sizeof(::zetasql::ResolvedArgumentRefProto)},
  { 2651, 2668, -1, sizeof(::zetasql::ResolvedCreateTableFunctionStmtProto)},
  { 2679, 2688, -1, sizeof(::zetasql::ResolvedRelationArgumentScanProto)},
  { 2691, 2699, -1, sizeof(::zetasql::ResolvedArgumentListProto)},
  { 2701, 2709, -1, sizeof(::zetasql::ResolvedFunctionSignatureHolderProto)},
  { 2711, 2722, -1, sizeof(::zetasql::ResolvedDropFunctionStmtProto)},
  { 2727, 2736, -1, sizeof(::zetasql::ResolvedDropTableFunctionStmtProto)},
  { 2739, 2749, -1, sizeof(::zetasql::ResolvedCallStmtProto)},
  { 2753, 2766, -1, sizeof(::zetasql::ResolvedImportStmtProto)},
  { 2773, 2782, -1, sizeof(::zetasql::ResolvedModuleStmtProto)},
  { 2785, 2794, -1, sizeof(::zetasql::ResolvedAggregateHavingModifierProto)},
  { 2797, 2807, -1, sizeof(::zetasql::ResolvedCreateMaterializedViewStmtProto)},
  { 2811, 2825, -1, sizeof(::zetasql::ResolvedCreateProcedureStmtProto)},
  { 2833, 2842, -1, sizeof(::zetasql::ResolvedExecuteImmediateArgumentProto)},
  { 2845, 2855, -1, sizeof(::zetasql::ResolvedExecuteImmediateStmtProto)},
  { 2859, 2868, -1, sizeof(::zetasql::ResolvedAssignmentStmtProto)},
  { 2871, 2882, -1, sizeof(::zetasql::ResolvedCreateEntityStmtProto)},
  { 2887, 2895, -1, sizeof(::zetasql::ResolvedAlterEntityStmtProto)},
  { 2897, 2907, -1, sizeof(::zetasql::ResolvedPivotColumnProto)},
  { 2911, 2924, -1, sizeof(::zetasql::ResolvedPivotScanProto)},
  { 2931, 2941, -1, sizeof(::zetasql::ResolvedReturningClauseProto)},
  { 2945, 2953, -1, sizeof(::zetasql::ResolvedUnpivotArgProto)},
  { 2955, 2969, -1, sizeof(::zetasql::ResolvedUnpivotScanProto)},
  { 2977, 2986, -1, sizeof(::zetasql::ResolvedCloneDataStmtProto)},
  { 2989, 2998, -1, sizeof(::zetasql::ResolvedTableAndColumnInfoProto)},
  { 3001, 3010, -1, sizeof(::zetasql::ResolvedAnalyzeStmtProto)},
  { 3013, 3034, -1, sizeof(::zetasql::ResolvedAuxLoadDataStmtProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_AnyResolvedNodeProto_default_instance_._instance,
  &::zetasql::_AnyResolvedArgumentProto_default_instance_._instance,
  &::zetasql::_ResolvedArgumentProto_default_instance_._instance,
  &::zetasql::_AnyResolvedExprProto_default_instance_._instance,
  &::zetasql::_ResolvedExprProto_default_instance_._instance,
  &::zetasql::_ResolvedLiteralProto_default_instance_._instance,
  &::zetasql::_ResolvedParameterProto_default_instance_._instance,
  &::zetasql::_ResolvedExpressionColumnProto_default_instance_._instance,
  &::zetasql::_ResolvedColumnRefProto_default_instance_._instance,
  &::zetasql::_ResolvedConstantProto_default_instance_._instance,
  &::zetasql::_ResolvedSystemVariableProto_default_instance_._instance,
  &::zetasql::_ResolvedInlineLambdaProto_default_instance_._instance,
  &::zetasql::_ResolvedFilterFieldArgProto_default_instance_._instance,
  &::zetasql::_ResolvedFilterFieldProto_default_instance_._instance,
  &::zetasql::_AnyResolvedFunctionCallBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedFunctionCallBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedFunctionCallProto_default_instance_._instance,
  &::zetasql::_AnyResolvedNonScalarFunctionCallBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedNonScalarFunctionCallBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedAggregateFunctionCallProto_default_instance_._instance,
  &::zetasql::_ResolvedAnalyticFunctionCallProto_default_instance_._instance,
  &::zetasql::_ResolvedExtendedCastElementProto_default_instance_._instance,
  &::zetasql::_ResolvedExtendedCastProto_default_instance_._instance,
  &::zetasql::_ResolvedCastProto_default_instance_._instance,
  &::zetasql::_ResolvedMakeStructProto_default_instance_._instance,
  &::zetasql::_ResolvedMakeProtoProto_default_instance_._instance,
  &::zetasql::_ResolvedMakeProtoFieldProto_default_instance_._instance,
  &::zetasql::_ResolvedGetStructFieldProto_default_instance_._instance,
  &::zetasql::_ResolvedGetProtoFieldProto_default_instance_._instance,
  &::zetasql::_ResolvedGetJsonFieldProto_default_instance_._instance,
  &::zetasql::_ResolvedFlattenProto_default_instance_._instance,
  &::zetasql::_ResolvedFlattenedArgProto_default_instance_._instance,
  &::zetasql::_ResolvedReplaceFieldItemProto_default_instance_._instance,
  &::zetasql::_ResolvedReplaceFieldProto_default_instance_._instance,
  &::zetasql::_ResolvedSubqueryExprProto_default_instance_._instance,
  &::zetasql::_ResolvedWithExprProto_default_instance_._instance,
  &::zetasql::_AnyResolvedScanProto_default_instance_._instance,
  &::zetasql::_ResolvedScanProto_default_instance_._instance,
  &::zetasql::_ResolvedModelProto_default_instance_._instance,
  &::zetasql::_ResolvedConnectionProto_default_instance_._instance,
  &::zetasql::_ResolvedDescriptorProto_default_instance_._instance,
  &::zetasql::_ResolvedSingleRowScanProto_default_instance_._instance,
  &::zetasql::_ResolvedTableScanProto_default_instance_._instance,
  &::zetasql::_ResolvedJoinScanProto_default_instance_._instance,
  &::zetasql::_ResolvedArrayScanProto_default_instance_._instance,
  &::zetasql::_ResolvedColumnHolderProto_default_instance_._instance,
  &::zetasql::_ResolvedFilterScanProto_default_instance_._instance,
  &::zetasql::_ResolvedGroupingSetProto_default_instance_._instance,
  &::zetasql::_AnyResolvedAggregateScanBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedAggregateScanBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedAggregateScanProto_default_instance_._instance,
  &::zetasql::_ResolvedAnonymizedAggregateScanProto_default_instance_._instance,
  &::zetasql::_ResolvedSetOperationItemProto_default_instance_._instance,
  &::zetasql::_ResolvedSetOperationScanProto_default_instance_._instance,
  &::zetasql::_ResolvedOrderByScanProto_default_instance_._instance,
  &::zetasql::_ResolvedLimitOffsetScanProto_default_instance_._instance,
  &::zetasql::_ResolvedWithRefScanProto_default_instance_._instance,
  &::zetasql::_ResolvedAnalyticScanProto_default_instance_._instance,
  &::zetasql::_ResolvedSampleScanProto_default_instance_._instance,
  &::zetasql::_ResolvedComputedColumnProto_default_instance_._instance,
  &::zetasql::_ResolvedOrderByItemProto_default_instance_._instance,
  &::zetasql::_ResolvedColumnAnnotationsProto_default_instance_._instance,
  &::zetasql::_ResolvedGeneratedColumnInfoProto_default_instance_._instance,
  &::zetasql::_ResolvedColumnDefaultValueProto_default_instance_._instance,
  &::zetasql::_ResolvedColumnDefinitionProto_default_instance_._instance,
  &::zetasql::_AnyResolvedConstraintProto_default_instance_._instance,
  &::zetasql::_ResolvedConstraintProto_default_instance_._instance,
  &::zetasql::_ResolvedPrimaryKeyProto_default_instance_._instance,
  &::zetasql::_ResolvedForeignKeyProto_default_instance_._instance,
  &::zetasql::_ResolvedCheckConstraintProto_default_instance_._instance,
  &::zetasql::_ResolvedOutputColumnProto_default_instance_._instance,
  &::zetasql::_ResolvedProjectScanProto_default_instance_._instance,
  &::zetasql::_ResolvedTVFScanProto_default_instance_._instance,
  &::zetasql::_ResolvedGroupRowsScanProto_default_instance_._instance,
  &::zetasql::_ResolvedFunctionArgumentProto_default_instance_._instance,
  &::zetasql::_AnyResolvedStatementProto_default_instance_._instance,
  &::zetasql::_ResolvedStatementProto_default_instance_._instance,
  &::zetasql::_ResolvedExplainStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedQueryStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateDatabaseStmtProto_default_instance_._instance,
  &::zetasql::_AnyResolvedCreateStatementProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateStatementProto_default_instance_._instance,
  &::zetasql::_ResolvedIndexItemProto_default_instance_._instance,
  &::zetasql::_ResolvedUnnestItemProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateIndexStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateSchemaStmtProto_default_instance_._instance,
  &::zetasql::_AnyResolvedCreateTableStmtBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateTableStmtBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateTableStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateTableAsSelectStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateModelStmtProto_default_instance_._instance,
  &::zetasql::_AnyResolvedCreateViewBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateViewBaseProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateViewStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedWithPartitionColumnsProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateSnapshotTableStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateExternalTableStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedExportModelStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedExportDataStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDefineTableStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDescribeStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedShowStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedBeginStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedSetTransactionStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCommitStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedRollbackStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedStartBatchStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedRunBatchStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAbortBatchStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDropStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDropMaterializedViewStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDropSnapshotTableStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedRecursiveRefScanProto_default_instance_._instance,
  &::zetasql::_ResolvedRecursiveScanProto_default_instance_._instance,
  &::zetasql::_ResolvedWithScanProto_default_instance_._instance,
  &::zetasql::_ResolvedWithEntryProto_default_instance_._instance,
  &::zetasql::_ResolvedOptionProto_default_instance_._instance,
  &::zetasql::_ResolvedWindowPartitioningProto_default_instance_._instance,
  &::zetasql::_ResolvedWindowOrderingProto_default_instance_._instance,
  &::zetasql::_ResolvedWindowFrameProto_default_instance_._instance,
  &::zetasql::_ResolvedAnalyticFunctionGroupProto_default_instance_._instance,
  &::zetasql::_ResolvedWindowFrameExprProto_default_instance_._instance,
  &::zetasql::_ResolvedDMLValueProto_default_instance_._instance,
  &::zetasql::_ResolvedDMLDefaultProto_default_instance_._instance,
  &::zetasql::_ResolvedAssertStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAssertRowsModifiedProto_default_instance_._instance,
  &::zetasql::_ResolvedInsertRowProto_default_instance_._instance,
  &::zetasql::_ResolvedInsertStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDeleteStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedUpdateItemProto_default_instance_._instance,
  &::zetasql::_ResolvedUpdateArrayItemProto_default_instance_._instance,
  &::zetasql::_ResolvedUpdateStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedMergeWhenProto_default_instance_._instance,
  &::zetasql::_ResolvedMergeStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedTruncateStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedObjectUnitProto_default_instance_._instance,
  &::zetasql::_ResolvedPrivilegeProto_default_instance_._instance,
  &::zetasql::_AnyResolvedGrantOrRevokeStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedGrantOrRevokeStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedGrantStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedRevokeStmtProto_default_instance_._instance,
  &::zetasql::_AnyResolvedAlterObjectStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterObjectStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterDatabaseStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterMaterializedViewStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterSchemaStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterModelStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterTableStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterViewStmtProto_default_instance_._instance,
  &::zetasql::_AnyResolvedAlterActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterActionProto_default_instance_._instance,
  &::zetasql::_AnyResolvedAlterColumnActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterColumnActionProto_default_instance_._instance,
  &::zetasql::_ResolvedSetOptionsActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterSubEntityActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAddSubEntityActionProto_default_instance_._instance,
  &::zetasql::_ResolvedDropSubEntityActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAddColumnActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAddConstraintActionProto_default_instance_._instance,
  &::zetasql::_ResolvedDropConstraintActionProto_default_instance_._instance,
  &::zetasql::_ResolvedDropPrimaryKeyActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterColumnOptionsActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterColumnDropNotNullActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterColumnSetDataTypeActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterColumnSetDefaultActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterColumnDropDefaultActionProto_default_instance_._instance,
  &::zetasql::_ResolvedDropColumnActionProto_default_instance_._instance,
  &::zetasql::_ResolvedRenameColumnActionProto_default_instance_._instance,
  &::zetasql::_ResolvedSetAsActionProto_default_instance_._instance,
  &::zetasql::_ResolvedSetCollateClauseProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterTableSetOptionsStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedRenameStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreatePrivilegeRestrictionStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateRowAccessPolicyStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDropPrivilegeRestrictionStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDropRowAccessPolicyStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDropSearchIndexStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedGrantToActionProto_default_instance_._instance,
  &::zetasql::_ResolvedRestrictToActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAddToRestricteeListActionProto_default_instance_._instance,
  &::zetasql::_ResolvedRemoveFromRestricteeListActionProto_default_instance_._instance,
  &::zetasql::_ResolvedFilterUsingActionProto_default_instance_._instance,
  &::zetasql::_ResolvedRevokeFromActionProto_default_instance_._instance,
  &::zetasql::_ResolvedRenameToActionProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterPrivilegeRestrictionStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterRowAccessPolicyStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterAllRowAccessPoliciesStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateConstantStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateFunctionStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedArgumentDefProto_default_instance_._instance,
  &::zetasql::_ResolvedArgumentRefProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateTableFunctionStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedRelationArgumentScanProto_default_instance_._instance,
  &::zetasql::_ResolvedArgumentListProto_default_instance_._instance,
  &::zetasql::_ResolvedFunctionSignatureHolderProto_default_instance_._instance,
  &::zetasql::_ResolvedDropFunctionStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedDropTableFunctionStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCallStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedImportStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedModuleStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAggregateHavingModifierProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateMaterializedViewStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateProcedureStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedExecuteImmediateArgumentProto_default_instance_._instance,
  &::zetasql::_ResolvedExecuteImmediateStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAssignmentStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedCreateEntityStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAlterEntityStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedPivotColumnProto_default_instance_._instance,
  &::zetasql::_ResolvedPivotScanProto_default_instance_._instance,
  &::zetasql::_ResolvedReturningClauseProto_default_instance_._instance,
  &::zetasql::_ResolvedUnpivotArgProto_default_instance_._instance,
  &::zetasql::_ResolvedUnpivotScanProto_default_instance_._instance,
  &::zetasql::_ResolvedCloneDataStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedTableAndColumnInfoProto_default_instance_._instance,
  &::zetasql::_ResolvedAnalyzeStmtProto_default_instance_._instance,
  &::zetasql::_ResolvedAuxLoadDataStmtProto_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'zetasql/resolved_ast/resolved_ast.prot"
  "o\022\007zetasql\032\037zetasql/public/annotation.pr"
  "oto\032*zetasql/public/proto/type_annotatio"
  "n.proto\032\031zetasql/public/type.proto\032$zeta"
  "sql/public/type_parameters.proto\032\034zetasq"
  "l/proto/function.proto\032(zetasql/resolved"
  "_ast/serialization.proto\032-zetasql/resolv"
  "ed_ast/resolved_ast_enums.proto\"\244\002\n\024AnyR"
  "esolvedNodeProto\022C\n\026resolved_argument_no"
  "de\030\001 \001(\0132!.zetasql.AnyResolvedArgumentPr"
  "otoH\000\022;\n\022resolved_expr_node\030\002 \001(\0132\035.zeta"
  "sql.AnyResolvedExprProtoH\000\022;\n\022resolved_s"
  "can_node\030\022 \001(\0132\035.zetasql.AnyResolvedScan"
  "ProtoH\000\022E\n\027resolved_statement_node\030$ \001(\013"
  "2\".zetasql.AnyResolvedStatementProtoH\000B\006"
  "\n\004node\"\264\036\n\030AnyResolvedArgumentProto\022N\n\036r"
  "esolved_make_proto_field_node\030\016 \001(\0132$.ze"
  "tasql.ResolvedMakeProtoFieldProtoH\000\022I\n\033r"
  "esolved_column_holder_node\030\027 \001(\0132\".zetas"
  "ql.ResolvedColumnHolderProtoH\000\022M\n\035resolv"
  "ed_computed_column_node\030  \001(\0132$.zetasql."
  "ResolvedComputedColumnProtoH\000\022H\n\033resolve"
  "d_order_by_item_node\030! \001(\0132!.zetasql.Res"
  "olvedOrderByItemProtoH\000\022I\n\033resolved_outp"
  "ut_column_node\030\" \001(\0132\".zetasql.ResolvedO"
  "utputColumnProtoH\000\022C\n\030resolved_with_entr"
  "y_node\0304 \001(\0132\037.zetasql.ResolvedWithEntry"
  "ProtoH\000\022<\n\024resolved_option_node\0305 \001(\0132\034."
  "zetasql.ResolvedOptionProtoH\000\022U\n!resolve"
  "d_window_partitioning_node\0306 \001(\0132(.zetas"
  "ql.ResolvedWindowPartitioningProtoH\000\022M\n\035"
  "resolved_window_ordering_node\0307 \001(\0132$.ze"
  "tasql.ResolvedWindowOrderingProtoH\000\022G\n\032r"
  "esolved_window_frame_node\0308 \001(\0132!.zetasq"
  "l.ResolvedWindowFrameProtoH\000\022\\\n%resolved"
  "_analytic_function_group_node\0309 \001(\0132+.ze"
  "tasql.ResolvedAnalyticFunctionGroupProto"
  "H\000\022P\n\037resolved_window_frame_expr_node\030: "
  "\001(\0132%.zetasql.ResolvedWindowFrameExprPro"
  "toH\000\022@\n\026resolved_dmlvalue_node\030; \001(\0132\036.z"
  "etasql.ResolvedDMLValueProtoH\000\022V\n\"resolv"
  "ed_assert_rows_modified_node\030= \001(\0132(.zet"
  "asql.ResolvedAssertRowsModifiedProtoH\000\022C"
  "\n\030resolved_insert_row_node\030> \001(\0132\037.zetas"
  "ql.ResolvedInsertRowProtoH\000\022E\n\031resolved_"
  "update_item_node\030A \001(\0132 .zetasql.Resolve"
  "dUpdateItemProtoH\000\022B\n\027resolved_privilege"
  "_node\030C \001(\0132\037.zetasql.ResolvedPrivilegeP"
  "rotoH\000\022G\n\032resolved_argument_def_node\030M \001"
  "(\0132!.zetasql.ResolvedArgumentDefProtoH\000\022"
  "I\n\033resolved_argument_list_node\030O \001(\0132\".z"
  "etasql.ResolvedArgumentListProtoH\000\022Q\n\037re"
  "solved_function_argument_node\030R \001(\0132&.ze"
  "tasql.ResolvedFunctionArgumentProtoH\000\022`\n"
  "\'resolved_function_signature_holder_node"
  "\030T \001(\0132-.zetasql.ResolvedFunctionSignatu"
  "reHolderProtoH\000\022`\n\'resolved_aggregate_ha"
  "ving_modifier_node\030U \001(\0132-.zetasql.Resol"
  "vedAggregateHavingModifierProtoH\000\022Q\n\037res"
  "olved_column_definition_node\030[ \001(\0132&.zet"
  "asql.ResolvedColumnDefinitionProtoH\000\022G\n\032"
  "resolved_grouping_set_node\030] \001(\0132!.zetas"
  "ql.ResolvedGroupingSetProtoH\000\022R\n resolve"
  "d_set_operation_item_node\030^ \001(\0132&.zetasq"
  "l.ResolvedSetOperationItemProtoH\000\022C\n\030res"
  "olved_index_item_node\030` \001(\0132\037.zetasql.Re"
  "solvedIndexItemProtoH\000\022C\n\030resolved_merge"
  "_when_node\030d \001(\0132\037.zetasql.ResolvedMerge"
  "WhenProtoH\000\022P\n\037resolved_update_array_ite"
  "m_node\030f \001(\0132%.zetasql.ResolvedUpdateArr"
  "ayItemProtoH\000\022S\n resolved_column_annotat"
  "ions_node\030h \001(\0132\'.zetasql.ResolvedColumn"
  "AnnotationsProtoH\000\022X\n#resolved_generated"
  "_column_info_node\030i \001(\0132).zetasql.Resolv"
  "edGeneratedColumnInfoProtoH\000\022:\n\023resolved"
  "_model_node\030m \001(\0132\033.zetasql.ResolvedMode"
  "lProtoH\000\022J\n\032resolved_alter_action_node\030t"
  " \001(\0132$.zetasql.AnyResolvedAlterActionPro"
  "toH\000\022E\n\031resolved_unnest_item_node\030~ \001(\0132"
  " .zetasql.ResolvedUnnestItemProtoH\000\022S\n r"
  "esolved_replace_field_item_node\030\200\001 \001(\0132&"
  ".zetasql.ResolvedReplaceFieldItemProtoH\000"
  "\022E\n\030resolved_connection_node\030\215\001 \001(\0132 .ze"
  "tasql.ResolvedConnectionProtoH\000\022c\n(resol"
  "ved_execute_immediate_argument_node\030\217\001 \001"
  "(\0132..zetasql.ResolvedExecuteImmediateArg"
  "umentProtoH\000\022E\n\030resolved_descriptor_node"
  "\030\220\001 \001(\0132 .zetasql.ResolvedDescriptorProt"
  "oH\000\022Y\n#resolved_extended_cast_element_no"
  "de\030\227\001 \001(\0132).zetasql.ResolvedExtendedCast"
  "ElementProtoH\000\022[\n$resolved_with_partitio"
  "n_columns_node\030\231\001 \001(\0132*.zetasql.Resolved"
  "WithPartitionColumnsProtoH\000\022J\n\033resolved_"
  "extended_cast_node\030\236\001 \001(\0132\".zetasql.Reso"
  "lvedExtendedCastProtoH\000\022J\n\033resolved_inli"
  "ne_lambda_node\030\237\001 \001(\0132\".zetasql.Resolved"
  "InlineLambdaProtoH\000\022H\n\030resolved_constrai"
  "nt_node\030\242\001 \001(\0132#.zetasql.AnyResolvedCons"
  "traintProtoH\000\022H\n\032resolved_pivot_column_n"
  "ode\030\246\001 \001(\0132!.zetasql.ResolvedPivotColumn"
  "ProtoH\000\022P\n\036resolved_returning_clause_nod"
  "e\030\252\001 \001(\0132%.zetasql.ResolvedReturningClau"
  "seProtoH\000\022F\n\031resolved_unpivot_arg_node\030\253"
  "\001 \001(\0132 .zetasql.ResolvedUnpivotArgProtoH"
  "\000\022O\n\036resolved_filter_field_arg_node\030\255\001 \001"
  "(\0132$.zetasql.ResolvedFilterFieldArgProto"
  "H\000\022X\n#resolved_table_and_column_info_nod"
  "e\030\263\001 \001(\0132(.zetasql.ResolvedTableAndColum"
  "nInfoProtoH\000\022W\n\"resolved_column_default_"
  "value_node\030\274\001 \001(\0132(.zetasql.ResolvedColu"
  "mnDefaultValueProtoH\000\022F\n\031resolved_object"
  "_unit_node\030\310\001 \001(\0132 .zetasql.ResolvedObje"
  "ctUnitProtoH\000B\006\n\004node\"C\n\025ResolvedArgumen"
  "tProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Resolve"
  "dNodeProto\"\225\014\n\024AnyResolvedExprProto\022>\n\025r"
  "esolved_literal_node\030\003 \001(\0132\035.zetasql.Res"
  "olvedLiteralProtoH\000\022B\n\027resolved_paramete"
  "r_node\030\004 \001(\0132\037.zetasql.ResolvedParameter"
  "ProtoH\000\022Q\n\037resolved_expression_column_no"
  "de\030\005 \001(\0132&.zetasql.ResolvedExpressionCol"
  "umnProtoH\000\022C\n\030resolved_column_ref_node\030\006"
  " \001(\0132\037.zetasql.ResolvedColumnRefProtoH\000\022"
  "U\n resolved_function_call_base_node\030\007 \001("
  "\0132).zetasql.AnyResolvedFunctionCallBaseP"
  "rotoH\000\0228\n\022resolved_cast_node\030\013 \001(\0132\032.zet"
  "asql.ResolvedCastProtoH\000\022E\n\031resolved_mak"
  "e_struct_node\030\014 \001(\0132 .zetasql.ResolvedMa"
  "keStructProtoH\000\022C\n\030resolved_make_proto_n"
  "ode\030\r \001(\0132\037.zetasql.ResolvedMakeProtoPro"
  "toH\000\022N\n\036resolved_get_struct_field_node\030\017"
  " \001(\0132$.zetasql.ResolvedGetStructFieldPro"
  "toH\000\022L\n\035resolved_get_proto_field_node\030\020 "
  "\001(\0132#.zetasql.ResolvedGetProtoFieldProto"
  "H\000\022I\n\033resolved_subquery_expr_node\030\021 \001(\0132"
  "\".zetasql.ResolvedSubqueryExprProtoH\000\022D\n"
  "\030resolved_dmldefault_node\030< \001(\0132 .zetasq"
  "l.ResolvedDMLDefaultProtoH\000\022G\n\032resolved_"
  "argument_ref_node\030N \001(\0132!.zetasql.Resolv"
  "edArgumentRefProtoH\000\022@\n\026resolved_constan"
  "t_node\030g \001(\0132\036.zetasql.ResolvedConstantP"
  "rotoH\000\022J\n\033resolved_replace_field_node\030\201\001"
  " \001(\0132\".zetasql.ResolvedReplaceFieldProto"
  "H\000\022N\n\035resolved_system_variable_node\030\213\001 \001"
  "(\0132$.zetasql.ResolvedSystemVariableProto"
  "H\000\022\?\n\025resolved_flatten_node\030\225\001 \001(\0132\035.zet"
  "asql.ResolvedFlattenProtoH\000\022J\n\033resolved_"
  "flattened_arg_node\030\226\001 \001(\0132\".zetasql.Reso"
  "lvedFlattenedArgProtoH\000\022K\n\034resolved_get_"
  "json_field_node\030\245\001 \001(\0132\".zetasql.Resolve"
  "dGetJsonFieldProtoH\000\022H\n\032resolved_filter_"
  "field_node\030\256\001 \001(\0132!.zetasql.ResolvedFilt"
  "erFieldProtoH\000\022B\n\027resolved_with_expr_nod"
  "e\030\305\001 \001(\0132\036.zetasql.ResolvedWithExprProto"
  "H\000B\006\n\004node\"\233\001\n\021ResolvedExprProto\022*\n\006pare"
  "nt\030\001 \001(\0132\032.zetasql.ResolvedNodeProto\022 \n\004"
  "type\030\002 \001(\0132\022.zetasql.TypeProto\0228\n\023type_a"
  "nnotation_map\030\003 \001(\0132\033.zetasql.Annotation"
  "MapProto\"\310\001\n\024ResolvedLiteralProto\022*\n\006par"
  "ent\030\001 \001(\0132\032.zetasql.ResolvedExprProto\022*\n"
  "\005value\030\002 \001(\0132\033.zetasql.ValueWithTypeProt"
  "o\022\031\n\021has_explicit_type\030\003 \001(\010\022\030\n\020float_li"
  "teral_id\030\004 \001(\003\022#\n\033preserve_in_literal_re"
  "mover\030\005 \001(\010\"x\n\026ResolvedParameterProto\022*\n"
  "\006parent\030\001 \001(\0132\032.zetasql.ResolvedExprProt"
  "o\022\014\n\004name\030\002 \001(\t\022\020\n\010position\030\005 \001(\003\022\022\n\nis_"
  "untyped\030\003 \001(\010\"Y\n\035ResolvedExpressionColum"
  "nProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Resolve"
  "dExprProto\022\014\n\004name\030\002 \001(\t\"\211\001\n\026ResolvedCol"
  "umnRefProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Re"
  "solvedExprProto\022,\n\006column\030\002 \001(\0132\034.zetasq"
  "l.ResolvedColumnProto\022\025\n\ris_correlated\030\003"
  " \001(\010\"p\n\025ResolvedConstantProto\022*\n\006parent\030"
  "\001 \001(\0132\032.zetasql.ResolvedExprProto\022+\n\010con"
  "stant\030\002 \001(\0132\031.zetasql.ConstantRefProto\"\\"
  "\n\033ResolvedSystemVariableProto\022*\n\006parent\030"
  "\001 \001(\0132\032.zetasql.ResolvedExprProto\022\021\n\tnam"
  "e_path\030\002 \003(\t\"\346\001\n\031ResolvedInlineLambdaPro"
  "to\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArg"
  "umentProto\0223\n\rargument_list\030\002 \003(\0132\034.zeta"
  "sql.ResolvedColumnProto\0227\n\016parameter_lis"
  "t\030\003 \003(\0132\037.zetasql.ResolvedColumnRefProto"
  "\022+\n\004body\030\004 \001(\0132\035.zetasql.AnyResolvedExpr"
  "Proto\"\237\001\n\033ResolvedFilterFieldArgProto\022.\n"
  "\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgument"
  "Proto\022\017\n\007include\030\002 \001(\010\022\?\n\025field_descript"
  "or_path\030\003 \003(\0132 .zetasql.FieldDescriptorR"
  "efProto\"\337\001\n\030ResolvedFilterFieldProto\022*\n\006"
  "parent\030\001 \001(\0132\032.zetasql.ResolvedExprProto"
  "\022+\n\004expr\030\002 \001(\0132\035.zetasql.AnyResolvedExpr"
  "Proto\022C\n\025filter_field_arg_list\030\003 \003(\0132$.z"
  "etasql.ResolvedFilterFieldArgProto\022%\n\035re"
  "set_cleared_required_fields\030\004 \001(\010\"\340\001\n An"
  "yResolvedFunctionCallBaseProto\022I\n\033resolv"
  "ed_function_call_node\030\010 \001(\0132\".zetasql.Re"
  "solvedFunctionCallProtoH\000\022i\n+resolved_no"
  "n_scalar_function_call_base_node\030V \001(\01322"
  ".zetasql.AnyResolvedNonScalarFunctionCal"
  "lBaseProtoH\000B\006\n\004node\"\331\003\n\035ResolvedFunctio"
  "nCallBaseProto\022*\n\006parent\030\001 \001(\0132\032.zetasql"
  ".ResolvedExprProto\022+\n\010function\030\002 \001(\0132\031.z"
  "etasql.FunctionRefProto\0222\n\tsignature\030\003 \001"
  "(\0132\037.zetasql.FunctionSignatureProto\0224\n\ra"
  "rgument_list\030\004 \003(\0132\035.zetasql.AnyResolved"
  "ExprProto\022E\n\025generic_argument_list\030\006 \003(\013"
  "2&.zetasql.ResolvedFunctionArgumentProto"
  "\022D\n\nerror_mode\030\005 \001(\01620.zetasql.ResolvedF"
  "unctionCallBaseEnums.ErrorMode\022/\n\thint_l"
  "ist\030\007 \003(\0132\034.zetasql.ResolvedOptionProto\022"
  "7\n\016collation_list\030\010 \003(\0132\037.zetasql.Resolv"
  "edCollationProto\"\227\001\n\031ResolvedFunctionCal"
  "lProto\0226\n\006parent\030\001 \001(\0132&.zetasql.Resolve"
  "dFunctionCallBaseProto\022B\n\022function_call_"
  "info\030\002 \001(\0132&.zetasql.ResolvedFunctionCal"
  "lInfoProto\"\355\001\n)AnyResolvedNonScalarFunct"
  "ionCallBaseProto\022\\\n%resolved_aggregate_f"
  "unction_call_node\030\t \001(\0132+.zetasql.Resolv"
  "edAggregateFunctionCallProtoH\000\022Z\n$resolv"
  "ed_analytic_function_call_node\030\n \001(\0132*.z"
  "etasql.ResolvedAnalyticFunctionCallProto"
  "H\000B\006\n\004node\"\342\002\n&ResolvedNonScalarFunction"
  "CallBaseProto\0226\n\006parent\030\001 \001(\0132&.zetasql."
  "ResolvedFunctionCallBaseProto\022\020\n\010distinc"
  "t\030\002 \001(\010\022d\n\026null_handling_modifier\030\003 \001(\0162"
  "D.zetasql.ResolvedNonScalarFunctionCallB"
  "aseEnums.NullHandlingModifier\022\?\n\030with_gr"
  "oup_rows_subquery\030\004 \001(\0132\035.zetasql.AnyRes"
  "olvedScanProto\022G\n\036with_group_rows_parame"
  "ter_list\030\005 \003(\0132\037.zetasql.ResolvedColumnR"
  "efProto\"\336\002\n\"ResolvedAggregateFunctionCal"
  "lProto\022\?\n\006parent\030\001 \001(\0132/.zetasql.Resolve"
  "dNonScalarFunctionCallBaseProto\022F\n\017havin"
  "g_modifier\030\005 \001(\0132-.zetasql.ResolvedAggre"
  "gateHavingModifierProto\022=\n\022order_by_item"
  "_list\030\003 \003(\0132!.zetasql.ResolvedOrderByIte"
  "mProto\022,\n\005limit\030\004 \001(\0132\035.zetasql.AnyResol"
  "vedExprProto\022B\n\022function_call_info\030\006 \001(\013"
  "2&.zetasql.ResolvedFunctionCallInfoProto"
  "\"\235\001\n!ResolvedAnalyticFunctionCallProto\022\?"
  "\n\006parent\030\001 \001(\0132/.zetasql.ResolvedNonScal"
  "arFunctionCallBaseProto\0227\n\014window_frame\030"
  "\002 \001(\0132!.zetasql.ResolvedWindowFrameProto"
  "\"\313\001\n ResolvedExtendedCastElementProto\022.\n"
  "\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgument"
  "Proto\022%\n\tfrom_type\030\002 \001(\0132\022.zetasql.TypeP"
  "roto\022#\n\007to_type\030\003 \001(\0132\022.zetasql.TypeProt"
  "o\022+\n\010function\030\004 \001(\0132\031.zetasql.FunctionRe"
  "fProto\"\214\001\n\031ResolvedExtendedCastProto\022.\n\006"
  "parent\030\001 \001(\0132\036.zetasql.ResolvedArgumentP"
  "roto\022\?\n\014element_list\030\002 \003(\0132).zetasql.Res"
  "olvedExtendedCastElementProto\"\335\002\n\021Resolv"
  "edCastProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Re"
  "solvedExprProto\022+\n\004expr\030\002 \001(\0132\035.zetasql."
  "AnyResolvedExprProto\022\034\n\024return_null_on_e"
  "rror\030\003 \001(\010\0229\n\rextended_cast\030\004 \001(\0132\".zeta"
  "sql.ResolvedExtendedCastProto\022-\n\006format\030"
  "\005 \001(\0132\035.zetasql.AnyResolvedExprProto\0220\n\t"
  "time_zone\030\006 \001(\0132\035.zetasql.AnyResolvedExp"
  "rProto\0225\n\017type_parameters\030\007 \001(\0132\034.zetasq"
  "l.TypeParametersProto\"x\n\027ResolvedMakeStr"
  "uctProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Resol"
  "vedExprProto\0221\n\nfield_list\030\002 \003(\0132\035.zetas"
  "ql.AnyResolvedExprProto\"~\n\026ResolvedMakeP"
  "rotoProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Reso"
  "lvedExprProto\0228\n\nfield_list\030\002 \003(\0132$.zeta"
  "sql.ResolvedMakeProtoFieldProto\"\343\001\n\033Reso"
  "lvedMakeProtoFieldProto\022.\n\006parent\030\001 \001(\0132"
  "\036.zetasql.ResolvedArgumentProto\022:\n\020field"
  "_descriptor\030\002 \001(\0132 .zetasql.FieldDescrip"
  "torRefProto\022+\n\006format\030\003 \001(\0162\033.zetasql.Fi"
  "eldFormat.Format\022+\n\004expr\030\004 \001(\0132\035.zetasql"
  ".AnyResolvedExprProto\"\211\001\n\033ResolvedGetStr"
  "uctFieldProto\022*\n\006parent\030\001 \001(\0132\032.zetasql."
  "ResolvedExprProto\022+\n\004expr\030\002 \001(\0132\035.zetasq"
  "l.AnyResolvedExprProto\022\021\n\tfield_idx\030\003 \001("
  "\003\"\320\002\n\032ResolvedGetProtoFieldProto\022*\n\006pare"
  "nt\030\001 \001(\0132\032.zetasql.ResolvedExprProto\022+\n\004"
  "expr\030\002 \001(\0132\035.zetasql.AnyResolvedExprProt"
  "o\022:\n\020field_descriptor\030\003 \001(\0132 .zetasql.Fi"
  "eldDescriptorRefProto\0222\n\rdefault_value\030\004"
  " \001(\0132\033.zetasql.ValueWithTypeProto\022\023\n\013get"
  "_has_bit\030\005 \001(\010\022+\n\006format\030\006 \001(\0162\033.zetasql"
  ".FieldFormat.Format\022\'\n\037return_default_va"
  "lue_when_unset\030\007 \001(\010\"\210\001\n\031ResolvedGetJson"
  "FieldProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Res"
  "olvedExprProto\022+\n\004expr\030\002 \001(\0132\035.zetasql.A"
  "nyResolvedExprProto\022\022\n\nfield_name\030\003 \001(\t\""
  "\246\001\n\024ResolvedFlattenProto\022*\n\006parent\030\001 \001(\013"
  "2\032.zetasql.ResolvedExprProto\022+\n\004expr\030\002 \001"
  "(\0132\035.zetasql.AnyResolvedExprProto\0225\n\016get"
  "_field_list\030\003 \003(\0132\035.zetasql.AnyResolvedE"
  "xprProto\"G\n\031ResolvedFlattenedArgProto\022*\n"
  "\006parent\030\001 \001(\0132\032.zetasql.ResolvedExprProt"
  "o\"\323\001\n\035ResolvedReplaceFieldItemProto\022.\n\006p"
  "arent\030\001 \001(\0132\036.zetasql.ResolvedArgumentPr"
  "oto\022+\n\004expr\030\002 \001(\0132\035.zetasql.AnyResolvedE"
  "xprProto\022\031\n\021struct_index_path\030\003 \003(\003\022:\n\020p"
  "roto_field_path\030\004 \003(\0132 .zetasql.FieldDes"
  "criptorRefProto\"\275\001\n\031ResolvedReplaceField"
  "Proto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Resolved"
  "ExprProto\022+\n\004expr\030\002 \001(\0132\035.zetasql.AnyRes"
  "olvedExprProto\022G\n\027replace_field_item_lis"
  "t\030\003 \003(\0132&.zetasql.ResolvedReplaceFieldIt"
  "emProto\"\221\003\n\031ResolvedSubqueryExprProto\022*\n"
  "\006parent\030\001 \001(\0132\032.zetasql.ResolvedExprProt"
  "o\022F\n\rsubquery_type\030\002 \001(\0162/.zetasql.Resol"
  "vedSubqueryExprEnums.SubqueryType\0227\n\016par"
  "ameter_list\030\003 \003(\0132\037.zetasql.ResolvedColu"
  "mnRefProto\022.\n\007in_expr\030\004 \001(\0132\035.zetasql.An"
  "yResolvedExprProto\0225\n\014in_collation\030\007 \001(\013"
  "2\037.zetasql.ResolvedCollationProto\022/\n\010sub"
  "query\030\005 \001(\0132\035.zetasql.AnyResolvedScanPro"
  "to\022/\n\thint_list\030\006 \003(\0132\034.zetasql.Resolved"
  "OptionProto\"\257\001\n\025ResolvedWithExprProto\022*\n"
  "\006parent\030\001 \001(\0132\032.zetasql.ResolvedExprProt"
  "o\022=\n\017assignment_list\030\002 \003(\0132$.zetasql.Res"
  "olvedComputedColumnProto\022+\n\004expr\030\003 \001(\0132\035"
  ".zetasql.AnyResolvedExprProto\"\317\014\n\024AnyRes"
  "olvedScanProto\022L\n\035resolved_single_row_sc"
  "an_node\030\023 \001(\0132#.zetasql.ResolvedSingleRo"
  "wScanProtoH\000\022C\n\030resolved_table_scan_node"
  "\030\024 \001(\0132\037.zetasql.ResolvedTableScanProtoH"
  "\000\022A\n\027resolved_join_scan_node\030\025 \001(\0132\036.zet"
  "asql.ResolvedJoinScanProtoH\000\022C\n\030resolved"
  "_array_scan_node\030\026 \001(\0132\037.zetasql.Resolve"
  "dArrayScanProtoH\000\022E\n\031resolved_filter_sca"
  "n_node\030\030 \001(\0132 .zetasql.ResolvedFilterSca"
  "nProtoH\000\022R\n resolved_set_operation_scan_"
  "node\030\032 \001(\0132&.zetasql.ResolvedSetOperatio"
  "nScanProtoH\000\022H\n\033resolved_order_by_scan_n"
  "ode\030\033 \001(\0132!.zetasql.ResolvedOrderByScanP"
  "rotoH\000\022P\n\037resolved_limit_offset_scan_nod"
  "e\030\034 \001(\0132%.zetasql.ResolvedLimitOffsetSca"
  "nProtoH\000\022H\n\033resolved_with_ref_scan_node\030"
  "\035 \001(\0132!.zetasql.ResolvedWithRefScanProto"
  "H\000\022I\n\033resolved_analytic_scan_node\030\036 \001(\0132"
  "\".zetasql.ResolvedAnalyticScanProtoH\000\022E\n"
  "\031resolved_sample_scan_node\030\037 \001(\0132 .zetas"
  "ql.ResolvedSampleScanProtoH\000\022G\n\032resolved"
  "_project_scan_node\030# \001(\0132!.zetasql.Resol"
  "vedProjectScanProtoH\000\022A\n\027resolved_with_s"
  "can_node\0303 \001(\0132\036.zetasql.ResolvedWithSca"
  "nProtoH\000\022>\n\025resolved_tvfscan_node\030Q \001(\0132"
  "\035.zetasql.ResolvedTVFScanProtoH\000\022Z\n$reso"
  "lved_relation_argument_scan_node\030Y \001(\0132*"
  ".zetasql.ResolvedRelationArgumentScanPro"
  "toH\000\022W\n!resolved_aggregate_scan_base_nod"
  "e\030o \001(\0132*.zetasql.AnyResolvedAggregateSc"
  "anBaseProtoH\000\022S\n resolved_recursive_ref_"
  "scan_node\030\223\001 \001(\0132&.zetasql.ResolvedRecur"
  "siveRefScanProtoH\000\022L\n\034resolved_recursive"
  "_scan_node\030\224\001 \001(\0132#.zetasql.ResolvedRecu"
  "rsiveScanProtoH\000\022D\n\030resolved_pivot_scan_"
  "node\030\241\001 \001(\0132\037.zetasql.ResolvedPivotScanP"
  "rotoH\000\022H\n\032resolved_unpivot_scan_node\030\254\001 "
  "\001(\0132!.zetasql.ResolvedUnpivotScanProtoH\000"
  "\022M\n\035resolved_group_rows_scan_node\030\260\001 \001(\013"
  "2#.zetasql.ResolvedGroupRowsScanProtoH\000B"
  "\006\n\004node\"\267\001\n\021ResolvedScanProto\022*\n\006parent\030"
  "\001 \001(\0132\032.zetasql.ResolvedNodeProto\0221\n\013col"
  "umn_list\030\002 \003(\0132\034.zetasql.ResolvedColumnP"
  "roto\022/\n\thint_list\030\003 \003(\0132\034.zetasql.Resolv"
  "edOptionProto\022\022\n\nis_ordered\030\004 \001(\010\"k\n\022Res"
  "olvedModelProto\022.\n\006parent\030\001 \001(\0132\036.zetasq"
  "l.ResolvedArgumentProto\022%\n\005model\030\002 \001(\0132\026"
  ".zetasql.ModelRefProto\"z\n\027ResolvedConnec"
  "tionProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Reso"
  "lvedArgumentProto\022/\n\nconnection\030\002 \001(\0132\033."
  "zetasql.ConnectionRefProto\"\254\001\n\027ResolvedD"
  "escriptorProto\022.\n\006parent\030\001 \001(\0132\036.zetasql"
  ".ResolvedArgumentProto\022<\n\026descriptor_col"
  "umn_list\030\002 \003(\0132\034.zetasql.ResolvedColumnP"
  "roto\022#\n\033descriptor_column_name_list\030\003 \003("
  "\t\"H\n\032ResolvedSingleRowScanProto\022*\n\006paren"
  "t\030\001 \001(\0132\032.zetasql.ResolvedScanProto\"\322\001\n\026"
  "ResolvedTableScanProto\022*\n\006parent\030\001 \001(\0132\032"
  ".zetasql.ResolvedScanProto\022%\n\005table\030\002 \001("
  "\0132\026.zetasql.TableRefProto\022;\n\024for_system_"
  "time_expr\030\003 \001(\0132\035.zetasql.AnyResolvedExp"
  "rProto\022\031\n\021column_index_list\030\004 \003(\003\022\r\n\005ali"
  "as\030\005 \001(\t\"\226\002\n\025ResolvedJoinScanProto\022*\n\006pa"
  "rent\030\001 \001(\0132\032.zetasql.ResolvedScanProto\022:"
  "\n\tjoin_type\030\002 \001(\0162\'.zetasql.ResolvedJoin"
  "ScanEnums.JoinType\0220\n\tleft_scan\030\003 \001(\0132\035."
  "zetasql.AnyResolvedScanProto\0221\n\nright_sc"
  "an\030\004 \001(\0132\035.zetasql.AnyResolvedScanProto\022"
  "0\n\tjoin_expr\030\005 \001(\0132\035.zetasql.AnyResolved"
  "ExprProto\"\345\002\n\026ResolvedArrayScanProto\022*\n\006"
  "parent\030\001 \001(\0132\032.zetasql.ResolvedScanProto"
  "\0221\n\ninput_scan\030\002 \001(\0132\035.zetasql.AnyResolv"
  "edScanProto\0221\n\narray_expr\030\003 \001(\0132\035.zetasq"
  "l.AnyResolvedExprProto\0224\n\016element_column"
  "\030\004 \001(\0132\034.zetasql.ResolvedColumnProto\022\?\n\023"
  "array_offset_column\030\005 \001(\0132\".zetasql.Reso"
  "lvedColumnHolderProto\0220\n\tjoin_expr\030\006 \001(\013"
  "2\035.zetasql.AnyResolvedExprProto\022\020\n\010is_ou"
  "ter\030\007 \001(\010\"y\n\031ResolvedColumnHolderProto\022."
  "\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgumen"
  "tProto\022,\n\006column\030\002 \001(\0132\034.zetasql.Resolve"
  "dColumnProto\"\254\001\n\027ResolvedFilterScanProto"
  "\022*\n\006parent\030\001 \001(\0132\032.zetasql.ResolvedScanP"
  "roto\0221\n\ninput_scan\030\002 \001(\0132\035.zetasql.AnyRe"
  "solvedScanProto\0222\n\013filter_expr\030\003 \001(\0132\035.z"
  "etasql.AnyResolvedExprProto\"\211\001\n\030Resolved"
  "GroupingSetProto\022.\n\006parent\030\001 \001(\0132\036.zetas"
  "ql.ResolvedArgumentProto\022=\n\024group_by_col"
  "umn_list\030\002 \003(\0132\037.zetasql.ResolvedColumnR"
  "efProto\"\332\001\n!AnyResolvedAggregateScanBase"
  "Proto\022K\n\034resolved_aggregate_scan_node\030\031 "
  "\001(\0132#.zetasql.ResolvedAggregateScanProto"
  "H\000\022`\n\'resolved_anonymized_aggregate_scan"
  "_node\030p \001(\0132-.zetasql.ResolvedAnonymized"
  "AggregateScanProtoH\000B\006\n\004node\"\263\002\n\036Resolve"
  "dAggregateScanBaseProto\022*\n\006parent\030\001 \001(\0132"
  "\032.zetasql.ResolvedScanProto\0221\n\ninput_sca"
  "n\030\002 \001(\0132\035.zetasql.AnyResolvedScanProto\022;"
  "\n\rgroup_by_list\030\003 \003(\0132$.zetasql.Resolved"
  "ComputedColumnProto\0227\n\016collation_list\030\005 "
  "\003(\0132\037.zetasql.ResolvedCollationProto\022<\n\016"
  "aggregate_list\030\004 \003(\0132$.zetasql.ResolvedC"
  "omputedColumnProto\"\320\001\n\032ResolvedAggregate"
  "ScanProto\0227\n\006parent\030\001 \001(\0132\'.zetasql.Reso"
  "lvedAggregateScanBaseProto\022<\n\021grouping_s"
  "et_list\030\005 \003(\0132!.zetasql.ResolvedGrouping"
  "SetProto\022;\n\022rollup_column_list\030\006 \003(\0132\037.z"
  "etasql.ResolvedColumnRefProto\"\333\001\n$Resolv"
  "edAnonymizedAggregateScanProto\0227\n\006parent"
  "\030\001 \001(\0132\'.zetasql.ResolvedAggregateScanBa"
  "seProto\0229\n\020k_threshold_expr\030\005 \001(\0132\037.zeta"
  "sql.ResolvedColumnRefProto\022\?\n\031anonymizat"
  "ion_option_list\030\006 \003(\0132\034.zetasql.Resolved"
  "OptionProto\"\266\001\n\035ResolvedSetOperationItem"
  "Proto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolved"
  "ArgumentProto\022+\n\004scan\030\002 \001(\0132\035.zetasql.An"
  "yResolvedScanProto\0228\n\022output_column_list"
  "\030\003 \003(\0132\034.zetasql.ResolvedColumnProto\"\326\001\n"
  "\035ResolvedSetOperationScanProto\022*\n\006parent"
  "\030\001 \001(\0132\032.zetasql.ResolvedScanProto\022H\n\007op"
  "_type\030\002 \001(\01627.zetasql.ResolvedSetOperati"
  "onScanEnums.SetOperationType\022\?\n\017input_it"
  "em_list\030\004 \003(\0132&.zetasql.ResolvedSetOpera"
  "tionItemProto\"\270\001\n\030ResolvedOrderByScanPro"
  "to\022*\n\006parent\030\001 \001(\0132\032.zetasql.ResolvedSca"
  "nProto\0221\n\ninput_scan\030\002 \001(\0132\035.zetasql.Any"
  "ResolvedScanProto\022=\n\022order_by_item_list\030"
  "\003 \003(\0132!.zetasql.ResolvedOrderByItemProto"
  "\"\332\001\n\034ResolvedLimitOffsetScanProto\022*\n\006par"
  "ent\030\001 \001(\0132\032.zetasql.ResolvedScanProto\0221\n"
  "\ninput_scan\030\002 \001(\0132\035.zetasql.AnyResolvedS"
  "canProto\022,\n\005limit\030\003 \001(\0132\035.zetasql.AnyRes"
  "olvedExprProto\022-\n\006offset\030\004 \001(\0132\035.zetasql"
  ".AnyResolvedExprProto\"_\n\030ResolvedWithRef"
  "ScanProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Reso"
  "lvedScanProto\022\027\n\017with_query_name\030\002 \001(\t\"\304"
  "\001\n\031ResolvedAnalyticScanProto\022*\n\006parent\030\001"
  " \001(\0132\032.zetasql.ResolvedScanProto\0221\n\ninpu"
  "t_scan\030\002 \001(\0132\035.zetasql.AnyResolvedScanPr"
  "oto\022H\n\023function_group_list\030\003 \003(\0132+.zetas"
  "ql.ResolvedAnalyticFunctionGroupProto\"\241\003"
  "\n\027ResolvedSampleScanProto\022*\n\006parent\030\001 \001("
  "\0132\032.zetasql.ResolvedScanProto\0221\n\ninput_s"
  "can\030\002 \001(\0132\035.zetasql.AnyResolvedScanProto"
  "\022\016\n\006method\030\003 \001(\t\022+\n\004size\030\004 \001(\0132\035.zetasql"
  ".AnyResolvedExprProto\0229\n\004unit\030\005 \001(\0162+.ze"
  "tasql.ResolvedSampleScanEnums.SampleUnit"
  "\022:\n\023repeatable_argument\030\006 \001(\0132\035.zetasql."
  "AnyResolvedExprProto\0229\n\rweight_column\030\007 "
  "\001(\0132\".zetasql.ResolvedColumnHolderProto\022"
  "8\n\021partition_by_list\030\010 \003(\0132\035.zetasql.Any"
  "ResolvedExprProto\"\250\001\n\033ResolvedComputedCo"
  "lumnProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Reso"
  "lvedArgumentProto\022,\n\006column\030\002 \001(\0132\034.zeta"
  "sql.ResolvedColumnProto\022+\n\004expr\030\003 \001(\0132\035."
  "zetasql.AnyResolvedExprProto\"\306\002\n\030Resolve"
  "dOrderByItemProto\022.\n\006parent\030\001 \001(\0132\036.zeta"
  "sql.ResolvedArgumentProto\0223\n\ncolumn_ref\030"
  "\002 \001(\0132\037.zetasql.ResolvedColumnRefProto\0225"
  "\n\016collation_name\030\003 \001(\0132\035.zetasql.AnyReso"
  "lvedExprProto\022\025\n\ris_descending\030\004 \001(\010\022C\n\n"
  "null_order\030\005 \001(\0162/.zetasql.ResolvedOrder"
  "ByItemEnums.NullOrderMode\0222\n\tcollation\030\006"
  " \001(\0132\037.zetasql.ResolvedCollationProto\"\300\002"
  "\n\036ResolvedColumnAnnotationsProto\022.\n\006pare"
  "nt\030\001 \001(\0132\036.zetasql.ResolvedArgumentProto"
  "\0225\n\016collation_name\030\006 \001(\0132\035.zetasql.AnyRe"
  "solvedExprProto\022\020\n\010not_null\030\002 \001(\010\0221\n\013opt"
  "ion_list\030\003 \003(\0132\034.zetasql.ResolvedOptionP"
  "roto\022;\n\nchild_list\030\004 \003(\0132\'.zetasql.Resol"
  "vedColumnAnnotationsProto\0225\n\017type_parame"
  "ters\030\005 \001(\0132\034.zetasql.TypeParametersProto"
  "\"\320\001\n ResolvedGeneratedColumnInfoProto\022.\n"
  "\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgument"
  "Proto\0221\n\nexpression\030\002 \001(\0132\035.zetasql.AnyR"
  "esolvedExprProto\022I\n\013stored_mode\030\005 \001(\01624."
  "zetasql.ResolvedGeneratedColumnInfoEnums"
  ".StoredMode\"\221\001\n\037ResolvedColumnDefaultVal"
  "ueProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolv"
  "edArgumentProto\0221\n\nexpression\030\002 \001(\0132\035.ze"
  "tasql.AnyResolvedExprProto\022\013\n\003sql\030\003 \001(\t\""
  "\211\003\n\035ResolvedColumnDefinitionProto\022.\n\006par"
  "ent\030\001 \001(\0132\036.zetasql.ResolvedArgumentProt"
  "o\022\014\n\004name\030\002 \001(\t\022 \n\004type\030\003 \001(\0132\022.zetasql."
  "TypeProto\022<\n\013annotations\030\004 \001(\0132\'.zetasql"
  ".ResolvedColumnAnnotationsProto\022\021\n\tis_hi"
  "dden\030\005 \001(\010\022,\n\006column\030\006 \001(\0132\034.zetasql.Res"
  "olvedColumnProto\022H\n\025generated_column_inf"
  "o\030\007 \001(\0132).zetasql.ResolvedGeneratedColum"
  "nInfoProto\022\?\n\rdefault_value\030\t \001(\0132(.zeta"
  "sql.ResolvedColumnDefaultValueProto\"\203\002\n\032"
  "AnyResolvedConstraintProto\022E\n\031resolved_p"
  "rimary_key_node\030\\ \001(\0132 .zetasql.Resolved"
  "PrimaryKeyProtoH\000\022E\n\031resolved_foreign_ke"
  "y_node\030n \001(\0132 .zetasql.ResolvedForeignKe"
  "yProtoH\000\022O\n\036resolved_check_constraint_no"
  "de\030q \001(\0132%.zetasql.ResolvedCheckConstrai"
  "ntProtoH\000B\006\n\004node\"I\n\027ResolvedConstraintP"
  "roto\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedA"
  "rgumentProto\"\341\001\n\027ResolvedPrimaryKeyProto"
  "\0220\n\006parent\030\001 \001(\0132 .zetasql.ResolvedConst"
  "raintProto\022\032\n\022column_offset_list\030\002 \003(\003\0221"
  "\n\013option_list\030\003 \003(\0132\034.zetasql.ResolvedOp"
  "tionProto\022\022\n\nunenforced\030\004 \001(\010\022\027\n\017constra"
  "int_name\030\005 \001(\t\022\030\n\020column_name_list\030\006 \003(\t"
  "\"\235\004\n\027ResolvedForeignKeyProto\0220\n\006parent\030\001"
  " \001(\0132 .zetasql.ResolvedConstraintProto\022\027"
  "\n\017constraint_name\030\002 \001(\t\022&\n\036referencing_c"
  "olumn_offset_list\030\003 \003(\003\0220\n\020referenced_ta"
  "ble\030\004 \001(\0132\026.zetasql.TableRefProto\022%\n\035ref"
  "erenced_column_offset_list\030\005 \003(\003\022>\n\nmatc"
  "h_mode\030\006 \001(\0162*.zetasql.ResolvedForeignKe"
  "yEnums.MatchMode\022G\n\rupdate_action\030\007 \001(\0162"
  "0.zetasql.ResolvedForeignKeyEnums.Action"
  "Operation\022G\n\rdelete_action\030\010 \001(\01620.zetas"
  "ql.ResolvedForeignKeyEnums.ActionOperati"
  "on\022\020\n\010enforced\030\t \001(\010\0221\n\013option_list\030\n \003("
  "\0132\034.zetasql.ResolvedOptionProto\022\037\n\027refer"
  "encing_column_list\030\013 \003(\t\"\341\001\n\034ResolvedChe"
  "ckConstraintProto\0220\n\006parent\030\001 \001(\0132 .zeta"
  "sql.ResolvedConstraintProto\022\027\n\017constrain"
  "t_name\030\002 \001(\t\0221\n\nexpression\030\003 \001(\0132\035.zetas"
  "ql.AnyResolvedExprProto\022\020\n\010enforced\030\004 \001("
  "\010\0221\n\013option_list\030\005 \003(\0132\034.zetasql.Resolve"
  "dOptionProto\"\207\001\n\031ResolvedOutputColumnPro"
  "to\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArg"
  "umentProto\022\014\n\004name\030\002 \001(\t\022,\n\006column\030\003 \001(\013"
  "2\034.zetasql.ResolvedColumnProto\"\262\001\n\030Resol"
  "vedProjectScanProto\022*\n\006parent\030\001 \001(\0132\032.ze"
  "tasql.ResolvedScanProto\0227\n\texpr_list\030\002 \003"
  "(\0132$.zetasql.ResolvedComputedColumnProto"
  "\0221\n\ninput_scan\030\003 \001(\0132\035.zetasql.AnyResolv"
  "edScanProto\"\317\002\n\024ResolvedTVFScanProto\022*\n\006"
  "parent\030\001 \001(\0132\032.zetasql.ResolvedScanProto"
  "\0221\n\003tvf\030\002 \001(\0132$.zetasql.TableValuedFunct"
  "ionRefProto\022-\n\tsignature\030\003 \001(\0132\032.zetasql"
  ".TVFSignatureProto\022=\n\rargument_list\030\005 \003("
  "\0132&.zetasql.ResolvedFunctionArgumentProt"
  "o\022\031\n\021column_index_list\030\010 \003(\003\022\r\n\005alias\030\006 "
  "\001(\t\022@\n\027function_call_signature\030\007 \001(\0132\037.z"
  "etasql.FunctionSignatureProto\"\230\001\n\032Resolv"
  "edGroupRowsScanProto\022*\n\006parent\030\001 \001(\0132\032.z"
  "etasql.ResolvedScanProto\022\?\n\021input_column"
  "_list\030\002 \003(\0132$.zetasql.ResolvedComputedCo"
  "lumnProto\022\r\n\005alias\030\003 \001(\t\"\274\003\n\035ResolvedFun"
  "ctionArgumentProto\022.\n\006parent\030\001 \001(\0132\036.zet"
  "asql.ResolvedArgumentProto\022+\n\004expr\030\002 \001(\013"
  "2\035.zetasql.AnyResolvedExprProto\022+\n\004scan\030"
  "\003 \001(\0132\035.zetasql.AnyResolvedScanProto\022*\n\005"
  "model\030\005 \001(\0132\033.zetasql.ResolvedModelProto"
  "\0224\n\nconnection\030\006 \001(\0132 .zetasql.ResolvedC"
  "onnectionProto\0228\n\016descriptor_arg\030\007 \001(\0132 "
  ".zetasql.ResolvedDescriptorProto\022:\n\024argu"
  "ment_column_list\030\004 \003(\0132\034.zetasql.Resolve"
  "dColumnProto\0229\n\rinline_lambda\030\010 \001(\0132\".ze"
  "tasql.ResolvedInlineLambdaProto\"\301\033\n\031AnyR"
  "esolvedStatementProto\022G\n\032resolved_explai"
  "n_stmt_node\030% \001(\0132!.zetasql.ResolvedExpl"
  "ainStmtProtoH\000\022C\n\030resolved_query_stmt_no"
  "de\030& \001(\0132\037.zetasql.ResolvedQueryStmtProt"
  "oH\000\022R\n\036resolved_create_statement_node\030\' "
  "\001(\0132(.zetasql.AnyResolvedCreateStatement"
  "ProtoH\000\022N\n\036resolved_export_data_stmt_nod"
  "e\030+ \001(\0132$.zetasql.ResolvedExportDataStmt"
  "ProtoH\000\022P\n\037resolved_define_table_stmt_no"
  "de\030, \001(\0132%.zetasql.ResolvedDefineTableSt"
  "mtProtoH\000\022I\n\033resolved_describe_stmt_node"
  "\030- \001(\0132\".zetasql.ResolvedDescribeStmtPro"
  "toH\000\022A\n\027resolved_show_stmt_node\030. \001(\0132\036."
  "zetasql.ResolvedShowStmtProtoH\000\022C\n\030resol"
  "ved_begin_stmt_node\030/ \001(\0132\037.zetasql.Reso"
  "lvedBeginStmtProtoH\000\022E\n\031resolved_commit_"
  "stmt_node\0300 \001(\0132 .zetasql.ResolvedCommit"
  "StmtProtoH\000\022I\n\033resolved_rollback_stmt_no"
  "de\0301 \001(\0132\".zetasql.ResolvedRollbackStmtP"
  "rotoH\000\022A\n\027resolved_drop_stmt_node\0302 \001(\0132"
  "\036.zetasql.ResolvedDropStmtProtoH\000\022E\n\031res"
  "olved_insert_stmt_node\030\? \001(\0132 .zetasql.R"
  "esolvedInsertStmtProtoH\000\022E\n\031resolved_del"
  "ete_stmt_node\030@ \001(\0132 .zetasql.ResolvedDe"
  "leteStmtProtoH\000\022E\n\031resolved_update_stmt_"
  "node\030B \001(\0132 .zetasql.ResolvedUpdateStmtP"
  "rotoH\000\022X\n\"resolved_grant_or_revoke_stmt_"
  "node\030D \001(\0132*.zetasql.AnyResolvedGrantOrR"
  "evokeStmtProtoH\000\022d\n*resolved_alter_table"
  "_set_options_stmt_node\030G \001(\0132..zetasql.R"
  "esolvedAlterTableSetOptionsStmtProtoH\000\022E"
  "\n\031resolved_rename_stmt_node\030H \001(\0132 .zeta"
  "sql.ResolvedRenameStmtProtoH\000\022f\n+resolve"
  "d_create_row_access_policy_stmt_node\030I \001"
  "(\0132/.zetasql.ResolvedCreateRowAccessPoli"
  "cyStmtProtoH\000\022b\n)resolved_drop_row_acces"
  "s_policy_stmt_node\030J \001(\0132-.zetasql.Resol"
  "vedDropRowAccessPolicyStmtProtoH\000\022R\n res"
  "olved_drop_function_stmt_node\030P \001(\0132&.ze"
  "tasql.ResolvedDropFunctionStmtProtoH\000\022A\n"
  "\027resolved_call_stmt_node\030S \001(\0132\036.zetasql"
  ".ResolvedCallStmtProtoH\000\022E\n\031resolved_imp"
  "ort_stmt_node\030V \001(\0132 .zetasql.ResolvedIm"
  "portStmtProtoH\000\022E\n\031resolved_module_stmt_"
  "node\030W \001(\0132 .zetasql.ResolvedModuleStmtP"
  "rotoH\000\022V\n\"resolved_create_database_stmt_"
  "node\030_ \001(\0132(.zetasql.ResolvedCreateDatab"
  "aseStmtProtoH\000\022E\n\031resolved_assert_stmt_n"
  "ode\030b \001(\0132 .zetasql.ResolvedAssertStmtPr"
  "otoH\000\022C\n\030resolved_merge_stmt_node\030e \001(\0132"
  "\037.zetasql.ResolvedMergeStmtProtoH\000\022S\n\037re"
  "solved_alter_object_stmt_node\030r \001(\0132(.ze"
  "tasql.AnyResolvedAlterObjectStmtProtoH\000\022"
  "V\n\"resolved_set_transaction_stmt_node\030x "
  "\001(\0132(.zetasql.ResolvedSetTransactionStmt"
  "ProtoH\000\022c\n)resolved_drop_materialized_vi"
  "ew_stmt_node\030y \001(\0132..zetasql.ResolvedDro"
  "pMaterializedViewStmtProtoH\000\022N\n\036resolved"
  "_start_batch_stmt_node\030z \001(\0132$.zetasql.R"
  "esolvedStartBatchStmtProtoH\000\022J\n\034resolved"
  "_run_batch_stmt_node\030{ \001(\0132\".zetasql.Res"
  "olvedRunBatchStmtProtoH\000\022N\n\036resolved_abo"
  "rt_batch_stmt_node\030| \001(\0132$.zetasql.Resol"
  "vedAbortBatchStmtProtoH\000\022J\n\033resolved_tru"
  "ncate_stmt_node\030\205\001 \001(\0132\".zetasql.Resolve"
  "dTruncateStmtProtoH\000\022[\n$resolved_execute"
  "_immediate_stmt_node\030\214\001 \001(\0132*.zetasql.Re"
  "solvedExecuteImmediateStmtProtoH\000\022N\n\035res"
  "olved_assignment_stmt_node\030\216\001 \001(\0132$.zeta"
  "sql.ResolvedAssignmentStmtProtoH\000\022Q\n\037res"
  "olved_export_model_stmt_node\030\230\001 \001(\0132%.ze"
  "tasql.ResolvedExportModelStmtProtoH\000\022^\n&"
  "resolved_drop_table_function_stmt_node\030\257"
  "\001 \001(\0132+.zetasql.ResolvedDropTableFunctio"
  "nStmtProtoH\000\022M\n\035resolved_clone_data_stmt"
  "_node\030\261\001 \001(\0132#.zetasql.ResolvedCloneData"
  "StmtProtoH\000\022H\n\032resolved_analyze_stmt_nod"
  "e\030\264\001 \001(\0132!.zetasql.ResolvedAnalyzeStmtPr"
  "otoH\000\022^\n&resolved_drop_snapshot_table_st"
  "mt_node\030\267\001 \001(\0132+.zetasql.ResolvedDropSna"
  "pshotTableStmtProtoH\000\022R\n resolved_aux_lo"
  "ad_data_stmt_node\030\272\001 \001(\0132%.zetasql.Resol"
  "vedAuxLoadDataStmtProtoH\000\022Z\n$resolved_dr"
  "op_search_index_stmt_node\030\276\001 \001(\0132).zetas"
  "ql.ResolvedDropSearchIndexStmtProtoH\000\022l\n"
  "-resolved_drop_privilege_restriction_stm"
  "t_node\030\300\001 \001(\01322.zetasql.ResolvedDropPriv"
  "ilegeRestrictionStmtProtoH\000B\006\n\004node\"u\n\026R"
  "esolvedStatementProto\022*\n\006parent\030\001 \001(\0132\032."
  "zetasql.ResolvedNodeProto\022/\n\thint_list\030\002"
  " \003(\0132\034.zetasql.ResolvedOptionProto\"\202\001\n\030R"
  "esolvedExplainStmtProto\022/\n\006parent\030\001 \001(\0132"
  "\037.zetasql.ResolvedStatementProto\0225\n\tstat"
  "ement\030\002 \001(\0132\".zetasql.AnyResolvedStateme"
  "ntProto\"\317\001\n\026ResolvedQueryStmtProto\022/\n\006pa"
  "rent\030\001 \001(\0132\037.zetasql.ResolvedStatementPr"
  "oto\022>\n\022output_column_list\030\002 \003(\0132\".zetasq"
  "l.ResolvedOutputColumnProto\022\026\n\016is_value_"
  "table\030\003 \001(\010\022,\n\005query\030\004 \001(\0132\035.zetasql.Any"
  "ResolvedScanProto\"\230\001\n\037ResolvedCreateData"
  "baseStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql."
  "ResolvedStatementProto\022\021\n\tname_path\030\002 \003("
  "\t\0221\n\013option_list\030\003 \003(\0132\034.zetasql.Resolve"
  "dOptionProto\"\353\010\n\037AnyResolvedCreateStatem"
  "entProto\022V\n\"resolved_create_function_stm"
  "t_node\030L \001(\0132(.zetasql.ResolvedCreateFun"
  "ctionStmtProtoH\000\022a\n(resolved_create_tabl"
  "e_function_stmt_node\030X \001(\0132-.zetasql.Res"
  "olvedCreateTableFunctionStmtProtoH\000\022P\n\037r"
  "esolved_create_index_stmt_node\030a \001(\0132%.z"
  "etasql.ResolvedCreateIndexStmtProtoH\000\022V\n"
  "\"resolved_create_constant_stmt_node\030c \001("
  "\0132(.zetasql.ResolvedCreateConstantStmtPr"
  "otoH\000\022\\\n$resolved_create_table_stmt_base"
  "_node\030j \001(\0132,.zetasql.AnyResolvedCreateT"
  "ableStmtBaseProtoH\000\022P\n\037resolved_create_m"
  "odel_stmt_node\030k \001(\0132%.zetasql.ResolvedC"
  "reateModelStmtProtoH\000\022Q\n\036resolved_create"
  "_view_base_node\030l \001(\0132\'.zetasql.AnyResol"
  "vedCreateViewBaseProtoH\000\022X\n#resolved_cre"
  "ate_procedure_stmt_node\030} \001(\0132).zetasql."
  "ResolvedCreateProcedureStmtProtoH\000\022S\n re"
  "solved_create_entity_stmt_node\030\232\001 \001(\0132&."
  "zetasql.ResolvedCreateEntityStmtProtoH\000\022"
  "S\n resolved_create_schema_stmt_node\030\235\001 \001"
  "(\0132&.zetasql.ResolvedCreateSchemaStmtPro"
  "toH\000\022b\n(resolved_create_snapshot_table_s"
  "tmt_node\030\266\001 \001(\0132-.zetasql.ResolvedCreate"
  "SnapshotTableStmtProtoH\000\022p\n/resolved_cre"
  "ate_privilege_restriction_stmt_node\030\277\001 \001"
  "(\01324.zetasql.ResolvedCreatePrivilegeRest"
  "rictionStmtProtoH\000B\006\n\004node\"\362\001\n\034ResolvedC"
  "reateStatementProto\022/\n\006parent\030\001 \001(\0132\037.ze"
  "tasql.ResolvedStatementProto\022\021\n\tname_pat"
  "h\030\002 \003(\t\022G\n\014create_scope\030\005 \001(\01621.zetasql."
  "ResolvedCreateStatementEnums.CreateScope"
  "\022E\n\013create_mode\030\004 \001(\01620.zetasql.Resolved"
  "CreateStatementEnums.CreateMode\"\221\001\n\026Reso"
  "lvedIndexItemProto\022.\n\006parent\030\001 \001(\0132\036.zet"
  "asql.ResolvedArgumentProto\0223\n\ncolumn_ref"
  "\030\002 \001(\0132\037.zetasql.ResolvedColumnRefProto\022"
  "\022\n\ndescending\030\003 \001(\010\"\363\001\n\027ResolvedUnnestIt"
  "emProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolv"
  "edArgumentProto\0221\n\narray_expr\030\002 \001(\0132\035.ze"
  "tasql.AnyResolvedExprProto\0224\n\016element_co"
  "lumn\030\003 \001(\0132\034.zetasql.ResolvedColumnProto"
  "\022\?\n\023array_offset_column\030\004 \001(\0132\".zetasql."
  "ResolvedColumnHolderProto\"\231\004\n\034ResolvedCr"
  "eateIndexStmtProto\0225\n\006parent\030\001 \001(\0132%.zet"
  "asql.ResolvedCreateStatementProto\022\027\n\017tab"
  "le_name_path\030\002 \003(\t\0223\n\ntable_scan\030\003 \001(\0132\037"
  ".zetasql.ResolvedTableScanProto\022\021\n\tis_un"
  "ique\030\004 \001(\010\022\021\n\tis_search\030\n \001(\010\022\031\n\021index_a"
  "ll_columns\030\013 \001(\010\0228\n\017index_item_list\030\005 \003("
  "\0132\037.zetasql.ResolvedIndexItemProto\022>\n\027st"
  "oring_expression_list\030\t \003(\0132\035.zetasql.An"
  "yResolvedExprProto\0221\n\013option_list\030\006 \003(\0132"
  "\034.zetasql.ResolvedOptionProto\022C\n\025compute"
  "d_columns_list\030\007 \003(\0132$.zetasql.ResolvedC"
  "omputedColumnProto\022A\n\027unnest_expressions"
  "_list\030\010 \003(\0132 .zetasql.ResolvedUnnestItem"
  "Proto\"\300\001\n\035ResolvedCreateSchemaStmtProto\022"
  "5\n\006parent\030\001 \001(\0132%.zetasql.ResolvedCreate"
  "StatementProto\0225\n\016collation_name\030\003 \001(\0132\035"
  ".zetasql.AnyResolvedExprProto\0221\n\013option_"
  "list\030\002 \003(\0132\034.zetasql.ResolvedOptionProto"
  "\"\306\002\n#AnyResolvedCreateTableStmtBaseProto"
  "\022b\n)resolved_create_table_as_select_stmt"
  "_node\030( \001(\0132-.zetasql.ResolvedCreateTabl"
  "eAsSelectStmtProtoH\000\022a\n(resolved_create_"
  "external_table_stmt_node\030* \001(\0132-.zetasql"
  ".ResolvedCreateExternalTableStmtProtoH\000\022"
  "P\n\037resolved_create_table_stmt_node\030Z \001(\013"
  "2%.zetasql.ResolvedCreateTableStmtProtoH"
  "\000B\006\n\004node\"\302\004\n ResolvedCreateTableStmtBas"
  "eProto\0225\n\006parent\030\001 \001(\0132%.zetasql.Resolve"
  "dCreateStatementProto\0221\n\013option_list\030\002 \003"
  "(\0132\034.zetasql.ResolvedOptionProto\022F\n\026colu"
  "mn_definition_list\030\003 \003(\0132&.zetasql.Resol"
  "vedColumnDefinitionProto\0228\n\022pseudo_colum"
  "n_list\030\007 \003(\0132\034.zetasql.ResolvedColumnPro"
  "to\0225\n\013primary_key\030\004 \001(\0132 .zetasql.Resolv"
  "edPrimaryKeyProto\022:\n\020foreign_key_list\030\t "
  "\003(\0132 .zetasql.ResolvedForeignKeyProto\022D\n"
  "\025check_constraint_list\030\n \003(\0132%.zetasql.R"
  "esolvedCheckConstraintProto\022\026\n\016is_value_"
  "table\030\010 \001(\010\022*\n\nlike_table\030\013 \001(\0132\026.zetasq"
  "l.TableRefProto\0225\n\016collation_name\030\014 \001(\0132"
  "\035.zetasql.AnyResolvedExprProto\"\260\002\n\034Resol"
  "vedCreateTableStmtProto\0229\n\006parent\030\001 \001(\0132"
  ").zetasql.ResolvedCreateTableStmtBasePro"
  "to\0221\n\nclone_from\030\007 \001(\0132\035.zetasql.AnyReso"
  "lvedScanProto\0220\n\tcopy_from\030\010 \001(\0132\035.zetas"
  "ql.AnyResolvedScanProto\0228\n\021partition_by_"
  "list\030\005 \003(\0132\035.zetasql.AnyResolvedExprProt"
  "o\0226\n\017cluster_by_list\030\006 \003(\0132\035.zetasql.Any"
  "ResolvedExprProto\"\301\002\n$ResolvedCreateTabl"
  "eAsSelectStmtProto\0229\n\006parent\030\001 \001(\0132).zet"
  "asql.ResolvedCreateTableStmtBaseProto\0228\n"
  "\021partition_by_list\030\005 \003(\0132\035.zetasql.AnyRe"
  "solvedExprProto\0226\n\017cluster_by_list\030\006 \003(\013"
  "2\035.zetasql.AnyResolvedExprProto\022>\n\022outpu"
  "t_column_list\030\002 \003(\0132\".zetasql.ResolvedOu"
  "tputColumnProto\022,\n\005query\030\003 \001(\0132\035.zetasql"
  ".AnyResolvedScanProto\"\250\004\n\034ResolvedCreate"
  "ModelStmtProto\0225\n\006parent\030\001 \001(\0132%.zetasql"
  ".ResolvedCreateStatementProto\0221\n\013option_"
  "list\030\002 \003(\0132\034.zetasql.ResolvedOptionProto"
  "\022>\n\022output_column_list\030\003 \003(\0132\".zetasql.R"
  "esolvedOutputColumnProto\022,\n\005query\030\004 \001(\0132"
  "\035.zetasql.AnyResolvedScanProto\022K\n\033transf"
  "orm_input_column_list\030\010 \003(\0132&.zetasql.Re"
  "solvedColumnDefinitionProto\022<\n\016transform"
  "_list\030\005 \003(\0132$.zetasql.ResolvedComputedCo"
  "lumnProto\022H\n\034transform_output_column_lis"
  "t\030\006 \003(\0132\".zetasql.ResolvedOutputColumnPr"
  "oto\022[\n&transform_analytic_function_group"
  "_list\030\007 \003(\0132+.zetasql.ResolvedAnalyticFu"
  "nctionGroupProto\"\341\001\n\036AnyResolvedCreateVi"
  "ewBaseProto\022N\n\036resolved_create_view_stmt"
  "_node\030) \001(\0132$.zetasql.ResolvedCreateView"
  "StmtProtoH\000\022g\n+resolved_create_materiali"
  "zed_view_stmt_node\030w \001(\01320.zetasql.Resol"
  "vedCreateMaterializedViewStmtProtoH\000B\006\n\004"
  "node\"\224\003\n\033ResolvedCreateViewBaseProto\0225\n\006"
  "parent\030\001 \001(\0132%.zetasql.ResolvedCreateSta"
  "tementProto\0221\n\013option_list\030\002 \003(\0132\034.zetas"
  "ql.ResolvedOptionProto\022>\n\022output_column_"
  "list\030\003 \003(\0132\".zetasql.ResolvedOutputColum"
  "nProto\022\034\n\024has_explicit_columns\030\t \001(\010\022,\n\005"
  "query\030\005 \001(\0132\035.zetasql.AnyResolvedScanPro"
  "to\022\013\n\003sql\030\006 \001(\t\022G\n\014sql_security\030\007 \001(\01621."
  "zetasql.ResolvedCreateStatementEnums.Sql"
  "Security\022\026\n\016is_value_table\030\004 \001(\010\022\021\n\trecu"
  "rsive\030\010 \001(\010\"S\n\033ResolvedCreateViewStmtPro"
  "to\0224\n\006parent\030\001 \001(\0132$.zetasql.ResolvedCre"
  "ateViewBaseProto\"\233\001\n!ResolvedWithPartiti"
  "onColumnsProto\022.\n\006parent\030\001 \001(\0132\036.zetasql"
  ".ResolvedArgumentProto\022F\n\026column_definit"
  "ion_list\030\002 \003(\0132&.zetasql.ResolvedColumnD"
  "efinitionProto\"\303\001\n$ResolvedCreateSnapsho"
  "tTableStmtProto\0225\n\006parent\030\001 \001(\0132%.zetasq"
  "l.ResolvedCreateStatementProto\0221\n\nclone_"
  "from\030\002 \001(\0132\035.zetasql.AnyResolvedScanProt"
  "o\0221\n\013option_list\030\003 \003(\0132\034.zetasql.Resolve"
  "dOptionProto\"\343\001\n$ResolvedCreateExternalT"
  "ableStmtProto\0229\n\006parent\030\001 \001(\0132).zetasql."
  "ResolvedCreateTableStmtBaseProto\022J\n\026with"
  "_partition_columns\030\002 \001(\0132*.zetasql.Resol"
  "vedWithPartitionColumnsProto\0224\n\nconnecti"
  "on\030\003 \001(\0132 .zetasql.ResolvedConnectionPro"
  "to\"\321\001\n\034ResolvedExportModelStmtProto\022/\n\006p"
  "arent\030\001 \001(\0132\037.zetasql.ResolvedStatementP"
  "roto\022\027\n\017model_name_path\030\002 \003(\t\0224\n\nconnect"
  "ion\030\003 \001(\0132 .zetasql.ResolvedConnectionPr"
  "oto\0221\n\013option_list\030\004 \003(\0132\034.zetasql.Resol"
  "vedOptionProto\"\275\002\n\033ResolvedExportDataStm"
  "tProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resolve"
  "dStatementProto\0224\n\nconnection\030\006 \001(\0132 .ze"
  "tasql.ResolvedConnectionProto\0221\n\013option_"
  "list\030\002 \003(\0132\034.zetasql.ResolvedOptionProto"
  "\022>\n\022output_column_list\030\003 \003(\0132\".zetasql.R"
  "esolvedOutputColumnProto\022\026\n\016is_value_tab"
  "le\030\004 \001(\010\022,\n\005query\030\005 \001(\0132\035.zetasql.AnyRes"
  "olvedScanProto\"\225\001\n\034ResolvedDefineTableSt"
  "mtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resolv"
  "edStatementProto\022\021\n\tname_path\030\002 \003(\t\0221\n\013o"
  "ption_list\030\003 \003(\0132\034.zetasql.ResolvedOptio"
  "nProto\"\214\001\n\031ResolvedDescribeStmtProto\022/\n\006"
  "parent\030\001 \001(\0132\037.zetasql.ResolvedStatement"
  "Proto\022\023\n\013object_type\030\002 \001(\t\022\021\n\tname_path\030"
  "\003 \003(\t\022\026\n\016from_name_path\030\004 \003(\t\"\241\001\n\025Resolv"
  "edShowStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasq"
  "l.ResolvedStatementProto\022\022\n\nidentifier\030\002"
  " \001(\t\022\021\n\tname_path\030\003 \003(\t\0220\n\tlike_expr\030\004 \001"
  "(\0132\035.zetasql.ResolvedLiteralProto\"\257\001\n\026Re"
  "solvedBeginStmtProto\022/\n\006parent\030\001 \001(\0132\037.z"
  "etasql.ResolvedStatementProto\022F\n\017read_wr"
  "ite_mode\030\003 \001(\0162-.zetasql.ResolvedBeginSt"
  "mtEnums.ReadWriteMode\022\034\n\024isolation_level"
  "_list\030\002 \003(\t\"\270\001\n\037ResolvedSetTransactionSt"
  "mtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resolv"
  "edStatementProto\022F\n\017read_write_mode\030\003 \001("
  "\0162-.zetasql.ResolvedBeginStmtEnums.ReadW"
  "riteMode\022\034\n\024isolation_level_list\030\002 \003(\t\"J"
  "\n\027ResolvedCommitStmtProto\022/\n\006parent\030\001 \001("
  "\0132\037.zetasql.ResolvedStatementProto\"L\n\031Re"
  "solvedRollbackStmtProto\022/\n\006parent\030\001 \001(\0132"
  "\037.zetasql.ResolvedStatementProto\"b\n\033Reso"
  "lvedStartBatchStmtProto\022/\n\006parent\030\001 \001(\0132"
  "\037.zetasql.ResolvedStatementProto\022\022\n\nbatc"
  "h_type\030\002 \001(\t\"L\n\031ResolvedRunBatchStmtProt"
  "o\022/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedStat"
  "ementProto\"N\n\033ResolvedAbortBatchStmtProt"
  "o\022/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedStat"
  "ementProto\"\302\001\n\025ResolvedDropStmtProto\022/\n\006"
  "parent\030\001 \001(\0132\037.zetasql.ResolvedStatement"
  "Proto\022\023\n\013object_type\030\002 \001(\t\022\024\n\014is_if_exis"
  "ts\030\003 \001(\010\022\021\n\tname_path\030\004 \003(\t\022:\n\tdrop_mode"
  "\030\005 \001(\0162\'.zetasql.ResolvedDropStmtEnums.D"
  "ropMode\"\201\001\n%ResolvedDropMaterializedView"
  "StmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Reso"
  "lvedStatementProto\022\024\n\014is_if_exists\030\003 \001(\010"
  "\022\021\n\tname_path\030\004 \003(\t\"~\n\"ResolvedDropSnaps"
  "hotTableStmtProto\022/\n\006parent\030\001 \001(\0132\037.zeta"
  "sql.ResolvedStatementProto\022\024\n\014is_if_exis"
  "ts\030\003 \001(\010\022\021\n\tname_path\030\004 \003(\t\"K\n\035ResolvedR"
  "ecursiveRefScanProto\022*\n\006parent\030\001 \001(\0132\032.z"
  "etasql.ResolvedScanProto\"\234\002\n\032ResolvedRec"
  "ursiveScanProto\022*\n\006parent\030\001 \001(\0132\032.zetasq"
  "l.ResolvedScanProto\022N\n\007op_type\030\002 \001(\0162=.z"
  "etasql.ResolvedRecursiveScanEnums.Recurs"
  "iveSetOperationType\022B\n\022non_recursive_ter"
  "m\030\003 \001(\0132&.zetasql.ResolvedSetOperationIt"
  "emProto\022>\n\016recursive_term\030\004 \001(\0132&.zetasq"
  "l.ResolvedSetOperationItemProto\"\276\001\n\025Reso"
  "lvedWithScanProto\022*\n\006parent\030\001 \001(\0132\032.zeta"
  "sql.ResolvedScanProto\0228\n\017with_entry_list"
  "\030\002 \003(\0132\037.zetasql.ResolvedWithEntryProto\022"
  ",\n\005query\030\003 \001(\0132\035.zetasql.AnyResolvedScan"
  "Proto\022\021\n\trecursive\030\004 \001(\010\"\227\001\n\026ResolvedWit"
  "hEntryProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Re"
  "solvedArgumentProto\022\027\n\017with_query_name\030\002"
  " \001(\t\0224\n\rwith_subquery\030\003 \001(\0132\035.zetasql.An"
  "yResolvedScanProto\"\224\001\n\023ResolvedOptionPro"
  "to\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArg"
  "umentProto\022\021\n\tqualifier\030\002 \001(\t\022\014\n\004name\030\003 "
  "\001(\t\022,\n\005value\030\004 \001(\0132\035.zetasql.AnyResolved"
  "ExprProto\"\276\001\n\037ResolvedWindowPartitioning"
  "Proto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolved"
  "ArgumentProto\022:\n\021partition_by_list\030\002 \003(\013"
  "2\037.zetasql.ResolvedColumnRefProto\022/\n\thin"
  "t_list\030\003 \003(\0132\034.zetasql.ResolvedOptionPro"
  "to\"\275\001\n\033ResolvedWindowOrderingProto\022.\n\006pa"
  "rent\030\001 \001(\0132\036.zetasql.ResolvedArgumentPro"
  "to\022=\n\022order_by_item_list\030\002 \003(\0132!.zetasql"
  ".ResolvedOrderByItemProto\022/\n\thint_list\030\003"
  " \003(\0132\034.zetasql.ResolvedOptionProto\"\377\001\n\030R"
  "esolvedWindowFrameProto\022.\n\006parent\030\001 \001(\0132"
  "\036.zetasql.ResolvedArgumentProto\022\?\n\nframe"
  "_unit\030\002 \001(\0162+.zetasql.ResolvedWindowFram"
  "eEnums.FrameUnit\0229\n\nstart_expr\030\003 \001(\0132%.z"
  "etasql.ResolvedWindowFrameExprProto\0227\n\010e"
  "nd_expr\030\004 \001(\0132%.zetasql.ResolvedWindowFr"
  "ameExprProto\"\222\002\n\"ResolvedAnalyticFunctio"
  "nGroupProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Re"
  "solvedArgumentProto\022>\n\014partition_by\030\002 \001("
  "\0132(.zetasql.ResolvedWindowPartitioningPr"
  "oto\0226\n\010order_by\030\003 \001(\0132$.zetasql.Resolved"
  "WindowOrderingProto\022D\n\026analytic_function"
  "_list\030\004 \003(\0132$.zetasql.ResolvedComputedCo"
  "lumnProto\"\314\001\n\034ResolvedWindowFrameExprPro"
  "to\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArg"
  "umentProto\022I\n\rboundary_type\030\002 \001(\01622.zeta"
  "sql.ResolvedWindowFrameExprEnums.Boundar"
  "yType\0221\n\nexpression\030\003 \001(\0132\035.zetasql.AnyR"
  "esolvedExprProto\"u\n\025ResolvedDMLValueProt"
  "o\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgu"
  "mentProto\022,\n\005value\030\002 \001(\0132\035.zetasql.AnyRe"
  "solvedExprProto\"E\n\027ResolvedDMLDefaultPro"
  "to\022*\n\006parent\030\001 \001(\0132\032.zetasql.ResolvedExp"
  "rProto\"\222\001\n\027ResolvedAssertStmtProto\022/\n\006pa"
  "rent\030\001 \001(\0132\037.zetasql.ResolvedStatementPr"
  "oto\0221\n\nexpression\030\002 \001(\0132\035.zetasql.AnyRes"
  "olvedExprProto\022\023\n\013description\030\003 \001(\t\"~\n\037R"
  "esolvedAssertRowsModifiedProto\022.\n\006parent"
  "\030\001 \001(\0132\036.zetasql.ResolvedArgumentProto\022+"
  "\n\004rows\030\002 \001(\0132\035.zetasql.AnyResolvedExprPr"
  "oto\"|\n\026ResolvedInsertRowProto\022.\n\006parent\030"
  "\001 \001(\0132\036.zetasql.ResolvedArgumentProto\0222\n"
  "\nvalue_list\030\002 \003(\0132\036.zetasql.ResolvedDMLV"
  "alueProto\"\247\005\n\027ResolvedInsertStmtProto\022/\n"
  "\006parent\030\001 \001(\0132\037.zetasql.ResolvedStatemen"
  "tProto\0223\n\ntable_scan\030\002 \001(\0132\037.zetasql.Res"
  "olvedTableScanProto\022@\n\013insert_mode\030\003 \001(\016"
  "2+.zetasql.ResolvedInsertStmtEnums.Inser"
  "tMode\022F\n\024assert_rows_modified\030\004 \001(\0132(.ze"
  "tasql.ResolvedAssertRowsModifiedProto\0228\n"
  "\treturning\030\n \001(\0132%.zetasql.ResolvedRetur"
  "ningClauseProto\0228\n\022insert_column_list\030\005 "
  "\003(\0132\034.zetasql.ResolvedColumnProto\022=\n\024que"
  "ry_parameter_list\030\t \003(\0132\037.zetasql.Resolv"
  "edColumnRefProto\022,\n\005query\030\006 \001(\0132\035.zetasq"
  "l.AnyResolvedScanProto\022>\n\030query_output_c"
  "olumn_list\030\010 \003(\0132\034.zetasql.ResolvedColum"
  "nProto\0221\n\010row_list\030\007 \003(\0132\037.zetasql.Resol"
  "vedInsertRowProto\022H\n\022column_access_list\030"
  "\013 \003(\0162,.zetasql.ResolvedStatementEnums.O"
  "bjectAccess\"\277\003\n\027ResolvedDeleteStmtProto\022"
  "/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedStatem"
  "entProto\0223\n\ntable_scan\030\002 \001(\0132\037.zetasql.R"
  "esolvedTableScanProto\022F\n\024assert_rows_mod"
  "ified\030\003 \001(\0132(.zetasql.ResolvedAssertRows"
  "ModifiedProto\0228\n\treturning\030\006 \001(\0132%.zetas"
  "ql.ResolvedReturningClauseProto\022H\n\022colum"
  "n_access_list\030\007 \003(\0162,.zetasql.ResolvedSt"
  "atementEnums.ObjectAccess\022\?\n\023array_offse"
  "t_column\030\005 \001(\0132\".zetasql.ResolvedColumnH"
  "olderProto\0221\n\nwhere_expr\030\004 \001(\0132\035.zetasql"
  ".AnyResolvedExprProto\"\316\003\n\027ResolvedUpdate"
  "ItemProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Reso"
  "lvedArgumentProto\022-\n\006target\030\002 \001(\0132\035.zeta"
  "sql.AnyResolvedExprProto\0221\n\tset_value\030\003 "
  "\001(\0132\036.zetasql.ResolvedDMLValueProto\022:\n\016e"
  "lement_column\030\004 \001(\0132\".zetasql.ResolvedCo"
  "lumnHolderProto\022@\n\021array_update_list\030\010 \003"
  "(\0132%.zetasql.ResolvedUpdateArrayItemProt"
  "o\0225\n\013delete_list\030\005 \003(\0132 .zetasql.Resolve"
  "dDeleteStmtProto\0225\n\013update_list\030\006 \003(\0132 ."
  "zetasql.ResolvedUpdateStmtProto\0225\n\013inser"
  "t_list\030\007 \003(\0132 .zetasql.ResolvedInsertStm"
  "tProto\"\264\001\n\034ResolvedUpdateArrayItemProto\022"
  ".\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgume"
  "ntProto\022-\n\006offset\030\002 \001(\0132\035.zetasql.AnyRes"
  "olvedExprProto\0225\n\013update_item\030\003 \001(\0132 .ze"
  "tasql.ResolvedUpdateItemProto\"\255\004\n\027Resolv"
  "edUpdateStmtProto\022/\n\006parent\030\001 \001(\0132\037.zeta"
  "sql.ResolvedStatementProto\0223\n\ntable_scan"
  "\030\002 \001(\0132\037.zetasql.ResolvedTableScanProto\022"
  "H\n\022column_access_list\030\010 \003(\0162,.zetasql.Re"
  "solvedStatementEnums.ObjectAccess\022F\n\024ass"
  "ert_rows_modified\030\003 \001(\0132(.zetasql.Resolv"
  "edAssertRowsModifiedProto\0228\n\treturning\030\t"
  " \001(\0132%.zetasql.ResolvedReturningClausePr"
  "oto\022\?\n\023array_offset_column\030\007 \001(\0132\".zetas"
  "ql.ResolvedColumnHolderProto\0221\n\nwhere_ex"
  "pr\030\004 \001(\0132\035.zetasql.AnyResolvedExprProto\022"
  ":\n\020update_item_list\030\005 \003(\0132 .zetasql.Reso"
  "lvedUpdateItemProto\0220\n\tfrom_scan\030\006 \001(\0132\035"
  ".zetasql.AnyResolvedScanProto\"\246\003\n\026Resolv"
  "edMergeWhenProto\022.\n\006parent\030\001 \001(\0132\036.zetas"
  "ql.ResolvedArgumentProto\022=\n\nmatch_type\030\002"
  " \001(\0162).zetasql.ResolvedMergeWhenEnums.Ma"
  "tchType\0221\n\nmatch_expr\030\003 \001(\0132\035.zetasql.An"
  "yResolvedExprProto\022\?\n\013action_type\030\004 \001(\0162"
  "*.zetasql.ResolvedMergeWhenEnums.ActionT"
  "ype\0228\n\022insert_column_list\030\005 \003(\0132\034.zetasq"
  "l.ResolvedColumnProto\0223\n\ninsert_row\030\006 \001("
  "\0132\037.zetasql.ResolvedInsertRowProto\022:\n\020up"
  "date_item_list\030\007 \003(\0132 .zetasql.ResolvedU"
  "pdateItemProto\"\350\002\n\026ResolvedMergeStmtProt"
  "o\022/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedStat"
  "ementProto\0223\n\ntable_scan\030\002 \001(\0132\037.zetasql"
  ".ResolvedTableScanProto\022H\n\022column_access"
  "_list\030\006 \003(\0162,.zetasql.ResolvedStatementE"
  "nums.ObjectAccess\0220\n\tfrom_scan\030\003 \001(\0132\035.z"
  "etasql.AnyResolvedScanProto\0221\n\nmerge_exp"
  "r\030\004 \001(\0132\035.zetasql.AnyResolvedExprProto\0229"
  "\n\020when_clause_list\030\005 \003(\0132\037.zetasql.Resol"
  "vedMergeWhenProto\"\264\001\n\031ResolvedTruncateSt"
  "mtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resolv"
  "edStatementProto\0223\n\ntable_scan\030\003 \001(\0132\037.z"
  "etasql.ResolvedTableScanProto\0221\n\nwhere_e"
  "xpr\030\004 \001(\0132\035.zetasql.AnyResolvedExprProto"
  "\"\\\n\027ResolvedObjectUnitProto\022.\n\006parent\030\001 "
  "\001(\0132\036.zetasql.ResolvedArgumentProto\022\021\n\tn"
  "ame_path\030\002 \003(\t\"\222\001\n\026ResolvedPrivilegeProt"
  "o\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgu"
  "mentProto\022\023\n\013action_type\030\002 \001(\t\0223\n\tunit_l"
  "ist\030\003 \003(\0132 .zetasql.ResolvedObjectUnitPr"
  "oto\"\267\001\n!AnyResolvedGrantOrRevokeStmtProt"
  "o\022C\n\030resolved_grant_stmt_node\030E \001(\0132\037.ze"
  "tasql.ResolvedGrantStmtProtoH\000\022E\n\031resolv"
  "ed_revoke_stmt_node\030F \001(\0132 .zetasql.Reso"
  "lvedRevokeStmtProtoH\000B\006\n\004node\"\202\002\n\036Resolv"
  "edGrantOrRevokeStmtProto\022/\n\006parent\030\001 \001(\013"
  "2\037.zetasql.ResolvedStatementProto\0227\n\016pri"
  "vilege_list\030\002 \003(\0132\037.zetasql.ResolvedPriv"
  "ilegeProto\022\023\n\013object_type\030\003 \001(\t\022\021\n\tname_"
  "path\030\004 \003(\t\022\024\n\014grantee_list\030\005 \003(\t\0228\n\021gran"
  "tee_expr_list\030\006 \003(\0132\035.zetasql.AnyResolve"
  "dExprProto\"Q\n\026ResolvedGrantStmtProto\0227\n\006"
  "parent\030\001 \001(\0132\'.zetasql.ResolvedGrantOrRe"
  "vokeStmtProto\"R\n\027ResolvedRevokeStmtProto"
  "\0227\n\006parent\030\001 \001(\0132\'.zetasql.ResolvedGrant"
  "OrRevokeStmtProto\"\304\007\n\037AnyResolvedAlterOb"
  "jectStmtProto\022d\n*resolved_alter_row_acce"
  "ss_policy_stmt_node\030K \001(\0132..zetasql.Reso"
  "lvedAlterRowAccessPolicyStmtProtoH\000\022N\n\036r"
  "esolved_alter_table_stmt_node\030s \001(\0132$.ze"
  "tasql.ResolvedAlterTableStmtProtoH\000\022L\n\035r"
  "esolved_alter_view_stmt_node\030v \001(\0132#.zet"
  "asql.ResolvedAlterViewStmtProtoH\000\022e\n*res"
  "olved_alter_materialized_view_stmt_node\030"
  "\177 \001(\0132/.zetasql.ResolvedAlterMaterialize"
  "dViewStmtProtoH\000\022U\n!resolved_alter_datab"
  "ase_stmt_node\030\206\001 \001(\0132\'.zetasql.ResolvedA"
  "lterDatabaseStmtProtoH\000\022p\n0resolved_alte"
  "r_all_row_access_policies_stmt_node\030\221\001 \001"
  "(\01323.zetasql.ResolvedAlterAllRowAccessPo"
  "liciesStmtProtoH\000\022Q\n\037resolved_alter_enti"
  "ty_stmt_node\030\233\001 \001(\0132%.zetasql.ResolvedAl"
  "terEntityStmtProtoH\000\022Q\n\037resolved_alter_s"
  "chema_stmt_node\030\240\001 \001(\0132%.zetasql.Resolve"
  "dAlterSchemaStmtProtoH\000\022n\n.resolved_alte"
  "r_privilege_restriction_stmt_node\030\304\001 \001(\013"
  "23.zetasql.ResolvedAlterPrivilegeRestric"
  "tionStmtProtoH\000\022O\n\036resolved_alter_model_"
  "stmt_node\030\315\001 \001(\0132$.zetasql.ResolvedAlter"
  "ModelStmtProtoH\000B\006\n\004node\"\271\001\n\034ResolvedAlt"
  "erObjectStmtProto\022/\n\006parent\030\001 \001(\0132\037.zeta"
  "sql.ResolvedStatementProto\022\021\n\tname_path\030"
  "\002 \003(\t\022\?\n\021alter_action_list\030\003 \003(\0132$.zetas"
  "ql.AnyResolvedAlterActionProto\022\024\n\014is_if_"
  "exists\030\004 \001(\010\"W\n\036ResolvedAlterDatabaseStm"
  "tProto\0225\n\006parent\030\001 \001(\0132%.zetasql.Resolve"
  "dAlterObjectStmtProto\"_\n&ResolvedAlterMa"
  "terializedViewStmtProto\0225\n\006parent\030\001 \001(\0132"
  "%.zetasql.ResolvedAlterObjectStmtProto\"U"
  "\n\034ResolvedAlterSchemaStmtProto\0225\n\006parent"
  "\030\001 \001(\0132%.zetasql.ResolvedAlterObjectStmt"
  "Proto\"T\n\033ResolvedAlterModelStmtProto\0225\n\006"
  "parent\030\001 \001(\0132%.zetasql.ResolvedAlterObje"
  "ctStmtProto\"T\n\033ResolvedAlterTableStmtPro"
  "to\0225\n\006parent\030\001 \001(\0132%.zetasql.ResolvedAlt"
  "erObjectStmtProto\"S\n\032ResolvedAlterViewSt"
  "mtProto\0225\n\006parent\030\001 \001(\0132%.zetasql.Resolv"
  "edAlterObjectStmtProto\"\233\016\n\033AnyResolvedAl"
  "terActionProto\022R\n resolved_set_options_a"
  "ction_node\030u \001(\0132&.zetasql.ResolvedSetOp"
  "tionsActionProtoH\000\022Q\n\037resolved_add_colum"
  "n_action_node\030\203\001 \001(\0132%.zetasql.ResolvedA"
  "ddColumnActionProtoH\000\022S\n resolved_drop_c"
  "olumn_action_node\030\204\001 \001(\0132&.zetasql.Resol"
  "vedDropColumnActionProtoH\000\022M\n\035resolved_g"
  "rant_to_action_node\030\207\001 \001(\0132#.zetasql.Res"
  "olvedGrantToActionProtoH\000\022U\n!resolved_fi"
  "lter_using_action_node\030\210\001 \001(\0132\'.zetasql."
  "ResolvedFilterUsingActionProtoH\000\022S\n reso"
  "lved_revoke_from_action_node\030\211\001 \001(\0132&.ze"
  "tasql.ResolvedRevokeFromActionProtoH\000\022O\n"
  "\036resolved_rename_to_action_node\030\212\001 \001(\0132$"
  ".zetasql.ResolvedRenameToActionProtoH\000\022I"
  "\n\033resolved_set_as_action_node\030\234\001 \001(\0132!.z"
  "etasql.ResolvedSetAsActionProtoH\000\022Y\n#res"
  "olved_add_constraint_action_node\030\243\001 \001(\0132"
  ").zetasql.ResolvedAddConstraintActionPro"
  "toH\000\022[\n$resolved_drop_constraint_action_"
  "node\030\244\001 \001(\0132*.zetasql.ResolvedDropConstr"
  "aintActionProtoH\000\022\\\n%resolved_drop_prima"
  "ry_key_action_node\030\270\001 \001(\0132*.zetasql.Reso"
  "lvedDropPrimaryKeyActionProtoH\000\022W\n\"resol"
  "ved_rename_column_action_node\030\271\001 \001(\0132(.z"
  "etasql.ResolvedRenameColumnActionProtoH\000"
  "\022S\n resolved_set_collate_clause_node\030\273\001 "
  "\001(\0132&.zetasql.ResolvedSetCollateClausePr"
  "otoH\000\022S\n resolved_restrict_to_action_nod"
  "e\030\301\001 \001(\0132&.zetasql.ResolvedRestrictToAct"
  "ionProtoH\000\022g\n+resolved_add_to_restrictee"
  "_list_action_node\030\302\001 \001(\0132/.zetasql.Resol"
  "vedAddToRestricteeListActionProtoH\000\022q\n0r"
  "esolved_remove_from_restrictee_list_acti"
  "on_node\030\303\001 \001(\01324.zetasql.ResolvedRemoveF"
  "romRestricteeListActionProtoH\000\022X\n!resolv"
  "ed_alter_column_action_node\030\311\001 \001(\0132*.zet"
  "asql.AnyResolvedAlterColumnActionProtoH\000"
  "\022\\\n%resolved_alter_sub_entity_action_nod"
  "e\030\312\001 \001(\0132*.zetasql.ResolvedAlterSubEntit"
  "yActionProtoH\000\022X\n#resolved_add_sub_entit"
  "y_action_node\030\313\001 \001(\0132(.zetasql.ResolvedA"
  "ddSubEntityActionProtoH\000\022Z\n$resolved_dro"
  "p_sub_entity_action_node\030\314\001 \001(\0132).zetasq"
  "l.ResolvedDropSubEntityActionProtoH\000B\006\n\004"
  "node\"J\n\030ResolvedAlterActionProto\022.\n\006pare"
  "nt\030\001 \001(\0132\036.zetasql.ResolvedArgumentProto"
  "\"\315\004\n!AnyResolvedAlterColumnActionProto\022d"
  "\n)resolved_alter_column_options_action_n"
  "ode\030\251\001 \001(\0132..zetasql.ResolvedAlterColumn"
  "OptionsActionProtoH\000\022n\n/resolved_alter_c"
  "olumn_drop_not_null_action_node\030\262\001 \001(\01322"
  ".zetasql.ResolvedAlterColumnDropNotNullA"
  "ctionProtoH\000\022n\n/resolved_alter_column_se"
  "t_data_type_action_node\030\265\001 \001(\01322.zetasql"
  ".ResolvedAlterColumnSetDataTypeActionPro"
  "toH\000\022k\n-resolved_alter_column_set_defaul"
  "t_action_node\030\306\001 \001(\01321.zetasql.ResolvedA"
  "lterColumnSetDefaultActionProtoH\000\022m\n.res"
  "olved_alter_column_drop_default_action_n"
  "ode\030\307\001 \001(\01322.zetasql.ResolvedAlterColumn"
  "DropDefaultActionProtoH\000B\006\n\004node\"y\n\036Reso"
  "lvedAlterColumnActionProto\0221\n\006parent\030\001 \001"
  "(\0132!.zetasql.ResolvedAlterActionProto\022\024\n"
  "\014is_if_exists\030\002 \001(\010\022\016\n\006column\030\003 \001(\t\"\205\001\n\035"
  "ResolvedSetOptionsActionProto\0221\n\006parent\030"
  "\001 \001(\0132!.zetasql.ResolvedAlterActionProto"
  "\0221\n\013option_list\030\002 \003(\0132\034.zetasql.Resolved"
  "OptionProto\"\313\001\n!ResolvedAlterSubEntityAc"
  "tionProto\0221\n\006parent\030\001 \001(\0132!.zetasql.Reso"
  "lvedAlterActionProto\022\023\n\013entity_type\030\002 \001("
  "\t\022\014\n\004name\030\003 \001(\t\022:\n\014alter_action\030\004 \001(\0132$."
  "zetasql.AnyResolvedAlterActionProto\022\024\n\014i"
  "s_if_exists\030\005 \001(\010\"\305\001\n\037ResolvedAddSubEnti"
  "tyActionProto\0221\n\006parent\030\001 \001(\0132!.zetasql."
  "ResolvedAlterActionProto\022\023\n\013entity_type\030"
  "\002 \001(\t\022\014\n\004name\030\003 \001(\t\0222\n\014options_list\030\004 \003("
  "\0132\034.zetasql.ResolvedOptionProto\022\030\n\020is_if"
  "_not_exists\030\005 \001(\010\"\216\001\n ResolvedDropSubEnt"
  "ityActionProto\0221\n\006parent\030\001 \001(\0132!.zetasql"
  ".ResolvedAlterActionProto\022\023\n\013entity_type"
  "\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\024\n\014is_if_exists\030\004 \001"
  "(\010\"\256\001\n\034ResolvedAddColumnActionProto\0221\n\006p"
  "arent\030\001 \001(\0132!.zetasql.ResolvedAlterActio"
  "nProto\022\030\n\020is_if_not_exists\030\002 \001(\010\022A\n\021colu"
  "mn_definition\030\003 \001(\0132&.zetasql.ResolvedCo"
  "lumnDefinitionProto\"\317\001\n ResolvedAddConst"
  "raintActionProto\0221\n\006parent\030\001 \001(\0132!.zetas"
  "ql.ResolvedAlterActionProto\022\030\n\020is_if_not"
  "_exists\030\002 \001(\010\0227\n\nconstraint\030\003 \001(\0132#.zeta"
  "sql.AnyResolvedConstraintProto\022%\n\005table\030"
  "\004 \001(\0132\026.zetasql.TableRefProto\"z\n!Resolve"
  "dDropConstraintActionProto\0221\n\006parent\030\001 \001"
  "(\0132!.zetasql.ResolvedAlterActionProto\022\024\n"
  "\014is_if_exists\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\"l\n!Res"
  "olvedDropPrimaryKeyActionProto\0221\n\006parent"
  "\030\001 \001(\0132!.zetasql.ResolvedAlterActionProt"
  "o\022\024\n\014is_if_exists\030\002 \001(\010\"\223\001\n%ResolvedAlte"
  "rColumnOptionsActionProto\0227\n\006parent\030\001 \001("
  "\0132\'.zetasql.ResolvedAlterColumnActionPro"
  "to\0221\n\013option_list\030\002 \003(\0132\034.zetasql.Resolv"
  "edOptionProto\"d\n)ResolvedAlterColumnDrop"
  "NotNullActionProto\0227\n\006parent\030\001 \001(\0132\'.zet"
  "asql.ResolvedAlterColumnActionProto\"\223\002\n)"
  "ResolvedAlterColumnSetDataTypeActionProt"
  "o\0227\n\006parent\030\001 \001(\0132\'.zetasql.ResolvedAlte"
  "rColumnActionProto\022(\n\014updated_type\030\004 \001(\013"
  "2\022.zetasql.TypeProto\022=\n\027updated_type_par"
  "ameters\030\005 \001(\0132\034.zetasql.TypeParametersPr"
  "oto\022D\n\023updated_annotations\030\006 \001(\0132\'.zetas"
  "ql.ResolvedColumnAnnotationsProto\"\244\001\n(Re"
  "solvedAlterColumnSetDefaultActionProto\0227"
  "\n\006parent\030\001 \001(\0132\'.zetasql.ResolvedAlterCo"
  "lumnActionProto\022\?\n\rdefault_value\030\004 \001(\0132("
  ".zetasql.ResolvedColumnDefaultValueProto"
  "\"d\n)ResolvedAlterColumnDropDefaultAction"
  "Proto\0227\n\006parent\030\001 \001(\0132\'.zetasql.Resolved"
  "AlterColumnActionProto\"v\n\035ResolvedDropCo"
  "lumnActionProto\0221\n\006parent\030\001 \001(\0132!.zetasq"
  "l.ResolvedAlterActionProto\022\024\n\014is_if_exis"
  "ts\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\"\212\001\n\037ResolvedRenam"
  "eColumnActionProto\0221\n\006parent\030\001 \001(\0132!.zet"
  "asql.ResolvedAlterActionProto\022\024\n\014is_if_e"
  "xists\030\004 \001(\010\022\014\n\004name\030\002 \001(\t\022\020\n\010new_name\030\003 "
  "\001(\t\"\201\001\n\030ResolvedSetAsActionProto\0221\n\006pare"
  "nt\030\001 \001(\0132!.zetasql.ResolvedAlterActionPr"
  "oto\022\030\n\020entity_body_json\030\002 \001(\t\022\030\n\020entity_"
  "body_text\030\003 \001(\t\"\211\001\n\035ResolvedSetCollateCl"
  "auseProto\0221\n\006parent\030\001 \001(\0132!.zetasql.Reso"
  "lvedAlterActionProto\0225\n\016collation_name\030\002"
  " \001(\0132\035.zetasql.AnyResolvedExprProto\"\264\001\n%"
  "ResolvedAlterTableSetOptionsStmtProto\022/\n"
  "\006parent\030\001 \001(\0132\037.zetasql.ResolvedStatemen"
  "tProto\022\021\n\tname_path\030\002 \003(\t\0221\n\013option_list"
  "\030\003 \003(\0132\034.zetasql.ResolvedOptionProto\022\024\n\014"
  "is_if_exists\030\004 \001(\010\"\215\001\n\027ResolvedRenameStm"
  "tProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resolve"
  "dStatementProto\022\023\n\013object_type\030\002 \001(\t\022\025\n\r"
  "old_name_path\030\003 \003(\t\022\025\n\rnew_name_path\030\004 \003"
  "(\t\"\361\001\n+ResolvedCreatePrivilegeRestrictio"
  "nStmtProto\0225\n\006parent\030\001 \001(\0132%.zetasql.Res"
  "olvedCreateStatementProto\022>\n\025column_priv"
  "ilege_list\030\002 \003(\0132\037.zetasql.ResolvedPrivi"
  "legeProto\022\023\n\013object_type\030\003 \001(\t\0226\n\017restri"
  "ctee_list\030\004 \003(\0132\035.zetasql.AnyResolvedExp"
  "rProto\"\226\003\n&ResolvedCreateRowAccessPolicy"
  "StmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Reso"
  "lvedStatementProto\022E\n\013create_mode\030\002 \001(\0162"
  "0.zetasql.ResolvedCreateStatementEnums.C"
  "reateMode\022\014\n\004name\030\003 \001(\t\022\030\n\020target_name_p"
  "ath\030\004 \003(\t\022\024\n\014grantee_list\030\005 \003(\t\0228\n\021grant"
  "ee_expr_list\030\t \003(\0132\035.zetasql.AnyResolved"
  "ExprProto\0223\n\ntable_scan\030\006 \001(\0132\037.zetasql."
  "ResolvedTableScanProto\0220\n\tpredicate\030\007 \001("
  "\0132\035.zetasql.AnyResolvedExprProto\022\025\n\rpred"
  "icate_str\030\010 \001(\t\"\332\001\n)ResolvedDropPrivileg"
  "eRestrictionStmtProto\022/\n\006parent\030\001 \001(\0132\037."
  "zetasql.ResolvedStatementProto\022\023\n\013object"
  "_type\030\002 \001(\t\022\024\n\014is_if_exists\030\003 \001(\010\022\021\n\tnam"
  "e_path\030\004 \003(\t\022>\n\025column_privilege_list\030\005 "
  "\003(\0132\037.zetasql.ResolvedPrivilegeProto\"\252\001\n"
  "$ResolvedDropRowAccessPolicyStmtProto\022/\n"
  "\006parent\030\001 \001(\0132\037.zetasql.ResolvedStatemen"
  "tProto\022\023\n\013is_drop_all\030\002 \001(\010\022\024\n\014is_if_exi"
  "sts\030\003 \001(\010\022\014\n\004name\030\004 \001(\t\022\030\n\020target_name_p"
  "ath\030\005 \003(\t\"\220\001\n ResolvedDropSearchIndexStm"
  "tProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resolve"
  "dStatementProto\022\024\n\014is_if_exists\030\002 \001(\010\022\014\n"
  "\004name\030\003 \001(\t\022\027\n\017table_name_path\030\004 \003(\t\"\211\001\n"
  "\032ResolvedGrantToActionProto\0221\n\006parent\030\001 "
  "\001(\0132!.zetasql.ResolvedAlterActionProto\0228"
  "\n\021grantee_expr_list\030\002 \003(\0132\035.zetasql.AnyR"
  "esolvedExprProto\"\212\001\n\035ResolvedRestrictToA"
  "ctionProto\0221\n\006parent\030\001 \001(\0132!.zetasql.Res"
  "olvedAlterActionProto\0226\n\017restrictee_list"
  "\030\002 \003(\0132\035.zetasql.AnyResolvedExprProto\"\255\001"
  "\n&ResolvedAddToRestricteeListActionProto"
  "\0221\n\006parent\030\001 \001(\0132!.zetasql.ResolvedAlter"
  "ActionProto\022\030\n\020is_if_not_exists\030\002 \001(\010\0226\n"
  "\017restrictee_list\030\003 \003(\0132\035.zetasql.AnyReso"
  "lvedExprProto\"\256\001\n+ResolvedRemoveFromRest"
  "ricteeListActionProto\0221\n\006parent\030\001 \001(\0132!."
  "zetasql.ResolvedAlterActionProto\022\024\n\014is_i"
  "f_exists\030\002 \001(\010\0226\n\017restrictee_list\030\003 \003(\0132"
  "\035.zetasql.AnyResolvedExprProto\"\234\001\n\036Resol"
  "vedFilterUsingActionProto\0221\n\006parent\030\001 \001("
  "\0132!.zetasql.ResolvedAlterActionProto\0220\n\t"
  "predicate\030\002 \001(\0132\035.zetasql.AnyResolvedExp"
  "rProto\022\025\n\rpredicate_str\030\003 \001(\t\"\250\001\n\035Resolv"
  "edRevokeFromActionProto\0221\n\006parent\030\001 \001(\0132"
  "!.zetasql.ResolvedAlterActionProto\0228\n\021re"
  "vokee_expr_list\030\002 \003(\0132\035.zetasql.AnyResol"
  "vedExprProto\022\032\n\022is_revoke_from_all\030\003 \001(\010"
  "\"b\n\033ResolvedRenameToActionProto\0221\n\006paren"
  "t\030\001 \001(\0132!.zetasql.ResolvedAlterActionPro"
  "to\022\020\n\010new_path\030\002 \003(\t\"\270\001\n*ResolvedAlterPr"
  "ivilegeRestrictionStmtProto\0225\n\006parent\030\001 "
  "\001(\0132%.zetasql.ResolvedAlterObjectStmtPro"
  "to\022>\n\025column_privilege_list\030\002 \003(\0132\037.zeta"
  "sql.ResolvedPrivilegeProto\022\023\n\013object_typ"
  "e\030\003 \001(\t\"\241\001\n%ResolvedAlterRowAccessPolicy"
  "StmtProto\0225\n\006parent\030\001 \001(\0132%.zetasql.Reso"
  "lvedAlterObjectStmtProto\022\014\n\004name\030\002 \001(\t\0223"
  "\n\ntable_scan\030\006 \001(\0132\037.zetasql.ResolvedTab"
  "leScanProto\"\230\001\n*ResolvedAlterAllRowAcces"
  "sPoliciesStmtProto\0225\n\006parent\030\001 \001(\0132%.zet"
  "asql.ResolvedAlterObjectStmtProto\0223\n\ntab"
  "le_scan\030\006 \001(\0132\037.zetasql.ResolvedTableSca"
  "nProto\"\205\001\n\037ResolvedCreateConstantStmtPro"
  "to\0225\n\006parent\030\001 \001(\0132%.zetasql.ResolvedCre"
  "ateStatementProto\022+\n\004expr\030\002 \001(\0132\035.zetasq"
  "l.AnyResolvedExprProto\"\306\005\n\037ResolvedCreat"
  "eFunctionStmtProto\0225\n\006parent\030\001 \001(\0132%.zet"
  "asql.ResolvedCreateStatementProto\022 \n\030has"
  "_explicit_return_type\030\r \001(\010\022\'\n\013return_ty"
  "pe\030\003 \001(\0132\022.zetasql.TypeProto\022\032\n\022argument"
  "_name_list\030\013 \003(\t\0222\n\tsignature\030\n \001(\0132\037.ze"
  "tasql.FunctionSignatureProto\022\024\n\014is_aggre"
  "gate\030\010 \001(\010\022\020\n\010language\030\004 \001(\t\022\014\n\004code\030\005 \001"
  "(\t\022G\n\031aggregate_expression_list\030\t \003(\0132$."
  "zetasql.ResolvedComputedColumnProto\022:\n\023f"
  "unction_expression\030\006 \001(\0132\035.zetasql.AnyRe"
  "solvedExprProto\0221\n\013option_list\030\007 \003(\0132\034.z"
  "etasql.ResolvedOptionProto\022G\n\014sql_securi"
  "ty\030\014 \001(\01621.zetasql.ResolvedCreateStateme"
  "ntEnums.SqlSecurity\022Q\n\021determinism_level"
  "\030\016 \001(\01626.zetasql.ResolvedCreateStatement"
  "Enums.DeterminismLevel\022\021\n\tis_remote\030\017 \001("
  "\010\0224\n\nconnection\030\020 \001(\0132 .zetasql.Resolved"
  "ConnectionProto\"\301\001\n\030ResolvedArgumentDefP"
  "roto\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedA"
  "rgumentProto\022\014\n\004name\030\002 \001(\t\022 \n\004type\030\003 \001(\013"
  "2\022.zetasql.TypeProto\022E\n\rargument_kind\030\004 "
  "\001(\0162..zetasql.ResolvedArgumentDefEnums.A"
  "rgumentKind\"\233\001\n\030ResolvedArgumentRefProto"
  "\022*\n\006parent\030\001 \001(\0132\032.zetasql.ResolvedExprP"
  "roto\022\014\n\004name\030\002 \001(\t\022E\n\rargument_kind\030\003 \001("
  "\0162..zetasql.ResolvedArgumentDefEnums.Arg"
  "umentKind\"\363\003\n$ResolvedCreateTableFunctio"
  "nStmtProto\0225\n\006parent\030\001 \001(\0132%.zetasql.Res"
  "olvedCreateStatementProto\022\032\n\022argument_na"
  "me_list\030\002 \003(\t\0222\n\tsignature\030\003 \001(\0132\037.zetas"
  "ql.FunctionSignatureProto\022\"\n\032has_explici"
  "t_return_schema\030\013 \001(\010\0221\n\013option_list\030\004 \003"
  "(\0132\034.zetasql.ResolvedOptionProto\022\020\n\010lang"
  "uage\030\005 \001(\t\022\014\n\004code\030\006 \001(\t\022,\n\005query\030\007 \001(\0132"
  "\035.zetasql.AnyResolvedScanProto\022>\n\022output"
  "_column_list\030\010 \003(\0132\".zetasql.ResolvedOut"
  "putColumnProto\022\026\n\016is_value_table\030\t \001(\010\022G"
  "\n\014sql_security\030\n \001(\01621.zetasql.ResolvedC"
  "reateStatementEnums.SqlSecurity\"u\n!Resol"
  "vedRelationArgumentScanProto\022*\n\006parent\030\001"
  " \001(\0132\032.zetasql.ResolvedScanProto\022\014\n\004name"
  "\030\002 \001(\t\022\026\n\016is_value_table\030\003 \001(\010\"\200\001\n\031Resol"
  "vedArgumentListProto\022.\n\006parent\030\001 \001(\0132\036.z"
  "etasql.ResolvedArgumentProto\0223\n\010arg_list"
  "\030\002 \003(\0132!.zetasql.ResolvedArgumentDefProt"
  "o\"\212\001\n$ResolvedFunctionSignatureHolderPro"
  "to\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArg"
  "umentProto\0222\n\tsignature\030\002 \001(\0132\037.zetasql."
  "FunctionSignatureProto\"\362\001\n\035ResolvedDropF"
  "unctionStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetas"
  "ql.ResolvedStatementProto\022\024\n\014is_if_exist"
  "s\030\002 \001(\010\022\021\n\tname_path\030\003 \003(\t\0225\n\targuments\030"
  "\004 \001(\0132\".zetasql.ResolvedArgumentListProt"
  "o\022@\n\tsignature\030\005 \001(\0132-.zetasql.ResolvedF"
  "unctionSignatureHolderProto\"~\n\"ResolvedD"
  "ropTableFunctionStmtProto\022/\n\006parent\030\001 \001("
  "\0132\037.zetasql.ResolvedStatementProto\022\024\n\014is"
  "_if_exists\030\002 \001(\010\022\021\n\tname_path\030\003 \003(\t\"\341\001\n\025"
  "ResolvedCallStmtProto\022/\n\006parent\030\001 \001(\0132\037."
  "zetasql.ResolvedStatementProto\022-\n\tproced"
  "ure\030\002 \001(\0132\032.zetasql.ProcedureRefProto\0222\n"
  "\tsignature\030\003 \001(\0132\037.zetasql.FunctionSigna"
  "tureProto\0224\n\rargument_list\030\004 \003(\0132\035.zetas"
  "ql.AnyResolvedExprProto\"\222\002\n\027ResolvedImpo"
  "rtStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Re"
  "solvedStatementProto\022@\n\013import_kind\030\002 \001("
  "\0162+.zetasql.ResolvedImportStmtEnums.Impo"
  "rtKind\022\021\n\tname_path\030\003 \003(\t\022\021\n\tfile_path\030\004"
  " \001(\t\022\022\n\nalias_path\030\005 \003(\t\022\027\n\017into_alias_p"
  "ath\030\007 \003(\t\0221\n\013option_list\030\006 \003(\0132\034.zetasql"
  ".ResolvedOptionProto\"\220\001\n\027ResolvedModuleS"
  "tmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resol"
  "vedStatementProto\022\021\n\tname_path\030\002 \003(\t\0221\n\013"
  "option_list\030\003 \003(\0132\034.zetasql.ResolvedOpti"
  "onProto\"\332\001\n$ResolvedAggregateHavingModif"
  "ierProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resol"
  "vedArgumentProto\022N\n\004kind\030\002 \001(\0162@.zetasql"
  ".ResolvedAggregateHavingModifierEnums.Ha"
  "vingModifierKind\0222\n\013having_expr\030\003 \001(\0132\035."
  "zetasql.AnyResolvedExprProto\"\231\002\n\'Resolve"
  "dCreateMaterializedViewStmtProto\0224\n\006pare"
  "nt\030\001 \001(\0132$.zetasql.ResolvedCreateViewBas"
  "eProto\022F\n\026column_definition_list\030\002 \003(\0132&"
  ".zetasql.ResolvedColumnDefinitionProto\0228"
  "\n\021partition_by_list\030\003 \003(\0132\035.zetasql.AnyR"
  "esolvedExprProto\0226\n\017cluster_by_list\030\004 \003("
  "\0132\035.zetasql.AnyResolvedExprProto\"\312\002\n Res"
  "olvedCreateProcedureStmtProto\0225\n\006parent\030"
  "\001 \001(\0132%.zetasql.ResolvedCreateStatementP"
  "roto\022\032\n\022argument_name_list\030\002 \003(\t\0222\n\tsign"
  "ature\030\003 \001(\0132\037.zetasql.FunctionSignatureP"
  "roto\0221\n\013option_list\030\004 \003(\0132\034.zetasql.Reso"
  "lvedOptionProto\022\026\n\016procedure_body\030\005 \001(\t\022"
  "4\n\nconnection\030\006 \001(\0132 .zetasql.ResolvedCo"
  "nnectionProto\022\020\n\010language\030\007 \001(\t\022\014\n\004code\030"
  "\010 \001(\t\"\230\001\n%ResolvedExecuteImmediateArgume"
  "ntProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolv"
  "edArgumentProto\022\014\n\004name\030\002 \001(\t\0221\n\nexpress"
  "ion\030\003 \001(\0132\035.zetasql.AnyResolvedExprProto"
  "\"\353\001\n!ResolvedExecuteImmediateStmtProto\022/"
  "\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedStateme"
  "ntProto\022*\n\003sql\030\002 \001(\0132\035.zetasql.AnyResolv"
  "edExprProto\022\034\n\024into_identifier_list\030\003 \003("
  "\t\022K\n\023using_argument_list\030\004 \003(\0132..zetasql"
  ".ResolvedExecuteImmediateArgumentProto\"\252"
  "\001\n\033ResolvedAssignmentStmtProto\022/\n\006parent"
  "\030\001 \001(\0132\037.zetasql.ResolvedStatementProto\022"
  "-\n\006target\030\002 \001(\0132\035.zetasql.AnyResolvedExp"
  "rProto\022+\n\004expr\030\003 \001(\0132\035.zetasql.AnyResolv"
  "edExprProto\"\322\001\n\035ResolvedCreateEntityStmt"
  "Proto\0225\n\006parent\030\001 \001(\0132%.zetasql.Resolved"
  "CreateStatementProto\022\023\n\013entity_type\030\002 \001("
  "\t\022\030\n\020entity_body_json\030\003 \001(\t\022\030\n\020entity_bo"
  "dy_text\030\005 \001(\t\0221\n\013option_list\030\004 \003(\0132\034.zet"
  "asql.ResolvedOptionProto\"j\n\034ResolvedAlte"
  "rEntityStmtProto\0225\n\006parent\030\001 \001(\0132%.zetas"
  "ql.ResolvedAlterObjectStmtProto\022\023\n\013entit"
  "y_type\030\002 \001(\t\"\255\001\n\030ResolvedPivotColumnProt"
  "o\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgu"
  "mentProto\022,\n\006column\030\002 \001(\0132\034.zetasql.Reso"
  "lvedColumnProto\022\030\n\020pivot_expr_index\030\003 \001("
  "\003\022\031\n\021pivot_value_index\030\004 \001(\003\"\224\003\n\026Resolve"
  "dPivotScanProto\022*\n\006parent\030\001 \001(\0132\032.zetasq"
  "l.ResolvedScanProto\0221\n\ninput_scan\030\002 \001(\0132"
  "\035.zetasql.AnyResolvedScanProto\022;\n\rgroup_"
  "by_list\030\003 \003(\0132$.zetasql.ResolvedComputed"
  "ColumnProto\0226\n\017pivot_expr_list\030\004 \003(\0132\035.z"
  "etasql.AnyResolvedExprProto\022/\n\010for_expr\030"
  "\005 \001(\0132\035.zetasql.AnyResolvedExprProto\0227\n\020"
  "pivot_value_list\030\006 \003(\0132\035.zetasql.AnyReso"
  "lvedExprProto\022<\n\021pivot_column_list\030\007 \003(\013"
  "2!.zetasql.ResolvedPivotColumnProto\"\202\002\n\034"
  "ResolvedReturningClauseProto\022.\n\006parent\030\001"
  " \001(\0132\036.zetasql.ResolvedArgumentProto\022>\n\022"
  "output_column_list\030\002 \003(\0132\".zetasql.Resol"
  "vedOutputColumnProto\0229\n\raction_column\030\003 "
  "\001(\0132\".zetasql.ResolvedColumnHolderProto\022"
  "7\n\texpr_list\030\004 \003(\0132$.zetasql.ResolvedCom"
  "putedColumnProto\"\177\n\027ResolvedUnpivotArgPr"
  "oto\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedAr"
  "gumentProto\0224\n\013column_list\030\002 \003(\0132\037.zetas"
  "ql.ResolvedColumnRefProto\"\267\003\n\030ResolvedUn"
  "pivotScanProto\022*\n\006parent\030\001 \001(\0132\032.zetasql"
  ".ResolvedScanProto\0221\n\ninput_scan\030\002 \001(\0132\035"
  ".zetasql.AnyResolvedScanProto\0227\n\021value_c"
  "olumn_list\030\003 \003(\0132\034.zetasql.ResolvedColum"
  "nProto\0222\n\014label_column\030\004 \001(\0132\034.zetasql.R"
  "esolvedColumnProto\0221\n\nlabel_list\030\005 \003(\0132\035"
  ".zetasql.ResolvedLiteralProto\022:\n\020unpivot"
  "_arg_list\030\006 \003(\0132 .zetasql.ResolvedUnpivo"
  "tArgProto\022I\n\033projected_input_column_list"
  "\030\007 \003(\0132$.zetasql.ResolvedComputedColumnP"
  "roto\022\025\n\rinclude_nulls\030\010 \001(\010\"\267\001\n\032Resolved"
  "CloneDataStmtProto\022/\n\006parent\030\001 \001(\0132\037.zet"
  "asql.ResolvedStatementProto\0225\n\014target_ta"
  "ble\030\002 \001(\0132\037.zetasql.ResolvedTableScanPro"
  "to\0221\n\nclone_from\030\003 \001(\0132\035.zetasql.AnyReso"
  "lvedScanProto\"\223\001\n\037ResolvedTableAndColumn"
  "InfoProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Reso"
  "lvedArgumentProto\022%\n\005table\030\002 \001(\0132\026.zetas"
  "ql.TableRefProto\022\031\n\021column_index_list\030\003 "
  "\003(\003\"\315\001\n\030ResolvedAnalyzeStmtProto\022/\n\006pare"
  "nt\030\001 \001(\0132\037.zetasql.ResolvedStatementProt"
  "o\0221\n\013option_list\030\002 \003(\0132\034.zetasql.Resolve"
  "dOptionProto\022M\n\033table_and_column_index_l"
  "ist\030\003 \003(\0132(.zetasql.ResolvedTableAndColu"
  "mnInfoProto\"\217\007\n\034ResolvedAuxLoadDataStmtP"
  "roto\022/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedS"
  "tatementProto\022K\n\016insertion_mode\030\002 \001(\01623."
  "zetasql.ResolvedAuxLoadDataStmtEnums.Ins"
  "ertionMode\022\021\n\tname_path\030\003 \003(\t\022>\n\022output_"
  "column_list\030\004 \003(\0132\".zetasql.ResolvedOutp"
  "utColumnProto\022F\n\026column_definition_list\030"
  "\005 \003(\0132&.zetasql.ResolvedColumnDefinition"
  "Proto\0228\n\022pseudo_column_list\030\006 \003(\0132\034.zeta"
  "sql.ResolvedColumnProto\0225\n\013primary_key\030\007"
  " \001(\0132 .zetasql.ResolvedPrimaryKeyProto\022:"
  "\n\020foreign_key_list\030\010 \003(\0132 .zetasql.Resol"
  "vedForeignKeyProto\022D\n\025check_constraint_l"
  "ist\030\t \003(\0132%.zetasql.ResolvedCheckConstra"
  "intProto\0228\n\021partition_by_list\030\n \003(\0132\035.ze"
  "tasql.AnyResolvedExprProto\0226\n\017cluster_by"
  "_list\030\013 \003(\0132\035.zetasql.AnyResolvedExprPro"
  "to\0221\n\013option_list\030\014 \003(\0132\034.zetasql.Resolv"
  "edOptionProto\022J\n\026with_partition_columns\030"
  "\r \001(\0132*.zetasql.ResolvedWithPartitionCol"
  "umnsProto\0224\n\nconnection\030\016 \001(\0132 .zetasql."
  "ResolvedConnectionProto\022<\n\026from_files_op"
  "tion_list\030\017 \003(\0132\034.zetasql.ResolvedOption"
  "ProtoB,\n\022com.google.zetasqlB\022ZetaSQLReso"
  "lvedASTH\002P\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_deps[7] = {
  &::descriptor_table_zetasql_2fproto_2ffunction_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fannotation_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto,
  &::descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_5fenums_2eproto,
  &::descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto,
};
static ::_pbi::once_flag descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto = {
    false, false, 59731, descriptor_table_protodef_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto,
    "zetasql/resolved_ast/resolved_ast.proto",
    &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once, descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_deps, 7, 217,
    schemas, file_default_instances, TableStruct_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::offsets,
    file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto, file_level_enum_descriptors_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto,
    file_level_service_descriptors_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter() {
  return &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto(&descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto);
namespace zetasql {

// ===================================================================

class AnyResolvedNodeProto::_Internal {
 public:
  static const ::zetasql::AnyResolvedArgumentProto& resolved_argument_node(const AnyResolvedNodeProto* msg);
  static const ::zetasql::AnyResolvedExprProto& resolved_expr_node(const AnyResolvedNodeProto* msg);
  static const ::zetasql::AnyResolvedScanProto& resolved_scan_node(const AnyResolvedNodeProto* msg);
  static const ::zetasql::AnyResolvedStatementProto& resolved_statement_node(const AnyResolvedNodeProto* msg);
};

const ::zetasql::AnyResolvedArgumentProto&
AnyResolvedNodeProto::_Internal::resolved_argument_node(const AnyResolvedNodeProto* msg) {
  return *msg->_impl_.node_.resolved_argument_node_;
}
const ::zetasql::AnyResolvedExprProto&
AnyResolvedNodeProto::_Internal::resolved_expr_node(const AnyResolvedNodeProto* msg) {
  return *msg->_impl_.node_.resolved_expr_node_;
}
const ::zetasql::AnyResolvedScanProto&
AnyResolvedNodeProto::_Internal::resolved_scan_node(const AnyResolvedNodeProto* msg) {
  return *msg->_impl_.node_.resolved_scan_node_;
}
const ::zetasql::AnyResolvedStatementProto&
AnyResolvedNodeProto::_Internal::resolved_statement_node(const AnyResolvedNodeProto* msg) {
  return *msg->_impl_.node_.resolved_statement_node_;
}
void AnyResolvedNodeProto::set_allocated_resolved_argument_node(::zetasql::AnyResolvedArgumentProto* resolved_argument_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_argument_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_argument_node);
    if (message_arena != submessage_arena) {
      resolved_argument_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_argument_node, submessage_arena);
    }
    set_has_resolved_argument_node();
    _impl_.node_.resolved_argument_node_ = resolved_argument_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNodeProto.resolved_argument_node)
}
void AnyResolvedNodeProto::set_allocated_resolved_expr_node(::zetasql::AnyResolvedExprProto* resolved_expr_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_expr_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_expr_node);
    if (message_arena != submessage_arena) {
      resolved_expr_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_expr_node, submessage_arena);
    }
    set_has_resolved_expr_node();
    _impl_.node_.resolved_expr_node_ = resolved_expr_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNodeProto.resolved_expr_node)
}
void AnyResolvedNodeProto::set_allocated_resolved_scan_node(::zetasql::AnyResolvedScanProto* resolved_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_scan_node);
    if (message_arena != submessage_arena) {
      resolved_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_scan_node, submessage_arena);
    }
    set_has_resolved_scan_node();
    _impl_.node_.resolved_scan_node_ = resolved_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNodeProto.resolved_scan_node)
}
void AnyResolvedNodeProto::set_allocated_resolved_statement_node(::zetasql::AnyResolvedStatementProto* resolved_statement_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_statement_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_statement_node);
    if (message_arena != submessage_arena) {
      resolved_statement_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_statement_node, submessage_arena);
    }
    set_has_resolved_statement_node();
    _impl_.node_.resolved_statement_node_ = resolved_statement_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNodeProto.resolved_statement_node)
}
AnyResolvedNodeProto::AnyResolvedNodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedNodeProto)
}
AnyResolvedNodeProto::AnyResolvedNodeProto(const AnyResolvedNodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedNodeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedArgumentNode: {
      _this->_internal_mutable_resolved_argument_node()->::zetasql::AnyResolvedArgumentProto::MergeFrom(
          from._internal_resolved_argument_node());
      break;
    }
    case kResolvedExprNode: {
      _this->_internal_mutable_resolved_expr_node()->::zetasql::AnyResolvedExprProto::MergeFrom(
          from._internal_resolved_expr_node());
      break;
    }
    case kResolvedScanNode: {
      _this->_internal_mutable_resolved_scan_node()->::zetasql::AnyResolvedScanProto::MergeFrom(
          from._internal_resolved_scan_node());
      break;
    }
    case kResolvedStatementNode: {
      _this->_internal_mutable_resolved_statement_node()->::zetasql::AnyResolvedStatementProto::MergeFrom(
          from._internal_resolved_statement_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedNodeProto)
}

inline void AnyResolvedNodeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedNodeProto::~AnyResolvedNodeProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedNodeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedNodeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedNodeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedNodeProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedNodeProto)
  switch (node_case()) {
    case kResolvedArgumentNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_argument_node_;
      }
      break;
    }
    case kResolvedExprNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_expr_node_;
      }
      break;
    }
    case kResolvedScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_scan_node_;
      }
      break;
    }
    case kResolvedStatementNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_statement_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedNodeProto::InternalSwap(AnyResolvedNodeProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedNodeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[0]);
}

// ===================================================================

class AnyResolvedArgumentProto::_Internal {
 public:
  static const ::zetasql::ResolvedMakeProtoFieldProto& resolved_make_proto_field_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedColumnHolderProto& resolved_column_holder_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedComputedColumnProto& resolved_computed_column_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedOrderByItemProto& resolved_order_by_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedOutputColumnProto& resolved_output_column_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWithEntryProto& resolved_with_entry_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedOptionProto& resolved_option_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWindowPartitioningProto& resolved_window_partitioning_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWindowOrderingProto& resolved_window_ordering_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWindowFrameProto& resolved_window_frame_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedAnalyticFunctionGroupProto& resolved_analytic_function_group_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWindowFrameExprProto& resolved_window_frame_expr_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedDMLValueProto& resolved_dmlvalue_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedAssertRowsModifiedProto& resolved_assert_rows_modified_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedInsertRowProto& resolved_insert_row_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedUpdateItemProto& resolved_update_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedPrivilegeProto& resolved_privilege_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedArgumentDefProto& resolved_argument_def_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedArgumentListProto& resolved_argument_list_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedFunctionArgumentProto& resolved_function_argument_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedFunctionSignatureHolderProto& resolved_function_signature_holder_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedAggregateHavingModifierProto& resolved_aggregate_having_modifier_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedColumnDefinitionProto& resolved_column_definition_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedGroupingSetProto& resolved_grouping_set_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedSetOperationItemProto& resolved_set_operation_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedIndexItemProto& resolved_index_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedMergeWhenProto& resolved_merge_when_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedUpdateArrayItemProto& resolved_update_array_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedColumnAnnotationsProto& resolved_column_annotations_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedGeneratedColumnInfoProto& resolved_generated_column_info_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedModelProto& resolved_model_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::AnyResolvedAlterActionProto& resolved_alter_action_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedUnnestItemProto& resolved_unnest_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedReplaceFieldItemProto& resolved_replace_field_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedConnectionProto& resolved_connection_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedExecuteImmediateArgumentProto& resolved_execute_immediate_argument_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedDescriptorProto& resolved_descriptor_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedExtendedCastElementProto& resolved_extended_cast_element_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWithPartitionColumnsProto& resolved_with_partition_columns_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedExtendedCastProto& resolved_extended_cast_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedInlineLambdaProto& resolved_inline_lambda_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::AnyResolvedConstraintProto& resolved_constraint_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedPivotColumnProto& resolved_pivot_column_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedReturningClauseProto& resolved_returning_clause_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedUnpivotArgProto& resolved_unpivot_arg_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedFilterFieldArgProto& resolved_filter_field_arg_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedTableAndColumnInfoProto& resolved_table_and_column_info_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedColumnDefaultValueProto& resolved_column_default_value_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedObjectUnitProto& resolved_object_unit_node(const AnyResolvedArgumentProto* msg);
};

const ::zetasql::ResolvedMakeProtoFieldProto&
AnyResolvedArgumentProto::_Internal::resolved_make_proto_field_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_make_proto_field_node_;
}
const ::zetasql::ResolvedColumnHolderProto&
AnyResolvedArgumentProto::_Internal::resolved_column_holder_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_column_holder_node_;
}
const ::zetasql::ResolvedComputedColumnProto&
AnyResolvedArgumentProto::_Internal::resolved_computed_column_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_computed_column_node_;
}
const ::zetasql::ResolvedOrderByItemProto&
AnyResolvedArgumentProto::_Internal::resolved_order_by_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_order_by_item_node_;
}
const ::zetasql::ResolvedOutputColumnProto&
AnyResolvedArgumentProto::_Internal::resolved_output_column_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_output_column_node_;
}
const ::zetasql::ResolvedWithEntryProto&
AnyResolvedArgumentProto::_Internal::resolved_with_entry_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_with_entry_node_;
}
const ::zetasql::ResolvedOptionProto&
AnyResolvedArgumentProto::_Internal::resolved_option_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_option_node_;
}
const ::zetasql::ResolvedWindowPartitioningProto&
AnyResolvedArgumentProto::_Internal::resolved_window_partitioning_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_window_partitioning_node_;
}
const ::zetasql::ResolvedWindowOrderingProto&
AnyResolvedArgumentProto::_Internal::resolved_window_ordering_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_window_ordering_node_;
}
const ::zetasql::ResolvedWindowFrameProto&
AnyResolvedArgumentProto::_Internal::resolved_window_frame_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_window_frame_node_;
}
const ::zetasql::ResolvedAnalyticFunctionGroupProto&
AnyResolvedArgumentProto::_Internal::resolved_analytic_function_group_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_analytic_function_group_node_;
}
const ::zetasql::ResolvedWindowFrameExprProto&
AnyResolvedArgumentProto::_Internal::resolved_window_frame_expr_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_window_frame_expr_node_;
}
const ::zetasql::ResolvedDMLValueProto&
AnyResolvedArgumentProto::_Internal::resolved_dmlvalue_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_dmlvalue_node_;
}
const ::zetasql::ResolvedAssertRowsModifiedProto&
AnyResolvedArgumentProto::_Internal::resolved_assert_rows_modified_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_assert_rows_modified_node_;
}
const ::zetasql::ResolvedInsertRowProto&
AnyResolvedArgumentProto::_Internal::resolved_insert_row_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_insert_row_node_;
}
const ::zetasql::ResolvedUpdateItemProto&
AnyResolvedArgumentProto::_Internal::resolved_update_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_update_item_node_;
}
const ::zetasql::ResolvedPrivilegeProto&
AnyResolvedArgumentProto::_Internal::resolved_privilege_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_privilege_node_;
}
const ::zetasql::ResolvedArgumentDefProto&
AnyResolvedArgumentProto::_Internal::resolved_argument_def_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_argument_def_node_;
}
const ::zetasql::ResolvedArgumentListProto&
AnyResolvedArgumentProto::_Internal::resolved_argument_list_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_argument_list_node_;
}
const ::zetasql::ResolvedFunctionArgumentProto&
AnyResolvedArgumentProto::_Internal::resolved_function_argument_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_function_argument_node_;
}
const ::zetasql::ResolvedFunctionSignatureHolderProto&
AnyResolvedArgumentProto::_Internal::resolved_function_signature_holder_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_function_signature_holder_node_;
}
const ::zetasql::ResolvedAggregateHavingModifierProto&
AnyResolvedArgumentProto::_Internal::resolved_aggregate_having_modifier_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_aggregate_having_modifier_node_;
}
const ::zetasql::ResolvedColumnDefinitionProto&
AnyResolvedArgumentProto::_Internal::resolved_column_definition_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_column_definition_node_;
}
const ::zetasql::ResolvedGroupingSetProto&
AnyResolvedArgumentProto::_Internal::resolved_grouping_set_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_grouping_set_node_;
}
const ::zetasql::ResolvedSetOperationItemProto&
AnyResolvedArgumentProto::_Internal::resolved_set_operation_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_set_operation_item_node_;
}
const ::zetasql::ResolvedIndexItemProto&
AnyResolvedArgumentProto::_Internal::resolved_index_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_index_item_node_;
}
const ::zetasql::ResolvedMergeWhenProto&
AnyResolvedArgumentProto::_Internal::resolved_merge_when_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_merge_when_node_;
}
const ::zetasql::ResolvedUpdateArrayItemProto&
AnyResolvedArgumentProto::_Internal::resolved_update_array_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_update_array_item_node_;
}
const ::zetasql::ResolvedColumnAnnotationsProto&
AnyResolvedArgumentProto::_Internal::resolved_column_annotations_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_column_annotations_node_;
}
const ::zetasql::ResolvedGeneratedColumnInfoProto&
AnyResolvedArgumentProto::_Internal::resolved_generated_column_info_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_generated_column_info_node_;
}
const ::zetasql::ResolvedModelProto&
AnyResolvedArgumentProto::_Internal::resolved_model_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_model_node_;
}
const ::zetasql::AnyResolvedAlterActionProto&
AnyResolvedArgumentProto::_Internal::resolved_alter_action_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_alter_action_node_;
}
const ::zetasql::ResolvedUnnestItemProto&
AnyResolvedArgumentProto::_Internal::resolved_unnest_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_unnest_item_node_;
}
const ::zetasql::ResolvedReplaceFieldItemProto&
AnyResolvedArgumentProto::_Internal::resolved_replace_field_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_replace_field_item_node_;
}
const ::zetasql::ResolvedConnectionProto&
AnyResolvedArgumentProto::_Internal::resolved_connection_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_connection_node_;
}
const ::zetasql::ResolvedExecuteImmediateArgumentProto&
AnyResolvedArgumentProto::_Internal::resolved_execute_immediate_argument_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_execute_immediate_argument_node_;
}
const ::zetasql::ResolvedDescriptorProto&
AnyResolvedArgumentProto::_Internal::resolved_descriptor_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_descriptor_node_;
}
const ::zetasql::ResolvedExtendedCastElementProto&
AnyResolvedArgumentProto::_Internal::resolved_extended_cast_element_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_extended_cast_element_node_;
}
const ::zetasql::ResolvedWithPartitionColumnsProto&
AnyResolvedArgumentProto::_Internal::resolved_with_partition_columns_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_with_partition_columns_node_;
}
const ::zetasql::ResolvedExtendedCastProto&
AnyResolvedArgumentProto::_Internal::resolved_extended_cast_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_extended_cast_node_;
}
const ::zetasql::ResolvedInlineLambdaProto&
AnyResolvedArgumentProto::_Internal::resolved_inline_lambda_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_inline_lambda_node_;
}
const ::zetasql::AnyResolvedConstraintProto&
AnyResolvedArgumentProto::_Internal::resolved_constraint_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_constraint_node_;
}
const ::zetasql::ResolvedPivotColumnProto&
AnyResolvedArgumentProto::_Internal::resolved_pivot_column_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_pivot_column_node_;
}
const ::zetasql::ResolvedReturningClauseProto&
AnyResolvedArgumentProto::_Internal::resolved_returning_clause_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_returning_clause_node_;
}
const ::zetasql::ResolvedUnpivotArgProto&
AnyResolvedArgumentProto::_Internal::resolved_unpivot_arg_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_unpivot_arg_node_;
}
const ::zetasql::ResolvedFilterFieldArgProto&
AnyResolvedArgumentProto::_Internal::resolved_filter_field_arg_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_filter_field_arg_node_;
}
const ::zetasql::ResolvedTableAndColumnInfoProto&
AnyResolvedArgumentProto::_Internal::resolved_table_and_column_info_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_table_and_column_info_node_;
}
const ::zetasql::ResolvedColumnDefaultValueProto&
AnyResolvedArgumentProto::_Internal::resolved_column_default_value_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_column_default_value_node_;
}
const ::zetasql::ResolvedObjectUnitProto&
AnyResolvedArgumentProto::_Internal::resolved_object_unit_node(const AnyResolvedArgumentProto* msg) {
  return *msg->_impl_.node_.resolved_object_unit_node_;
}
void AnyResolvedArgumentProto::set_allocated_resolved_make_proto_field_node(::zetasql::ResolvedMakeProtoFieldProto* resolved_make_proto_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_make_proto_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_make_proto_field_node);
    if (message_arena != submessage_arena) {
      resolved_make_proto_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_make_proto_field_node, submessage_arena);
    }
    set_has_resolved_make_proto_field_node();
    _impl_.node_.resolved_make_proto_field_node_ = resolved_make_proto_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_make_proto_field_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_column_holder_node(::zetasql::ResolvedColumnHolderProto* resolved_column_holder_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_holder_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_column_holder_node);
    if (message_arena != submessage_arena) {
      resolved_column_holder_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_holder_node, submessage_arena);
    }
    set_has_resolved_column_holder_node();
    _impl_.node_.resolved_column_holder_node_ = resolved_column_holder_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_column_holder_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_computed_column_node(::zetasql::ResolvedComputedColumnProto* resolved_computed_column_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_computed_column_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_computed_column_node);
    if (message_arena != submessage_arena) {
      resolved_computed_column_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_computed_column_node, submessage_arena);
    }
    set_has_resolved_computed_column_node();
    _impl_.node_.resolved_computed_column_node_ = resolved_computed_column_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_computed_column_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_order_by_item_node(::zetasql::ResolvedOrderByItemProto* resolved_order_by_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_order_by_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_order_by_item_node);
    if (message_arena != submessage_arena) {
      resolved_order_by_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_order_by_item_node, submessage_arena);
    }
    set_has_resolved_order_by_item_node();
    _impl_.node_.resolved_order_by_item_node_ = resolved_order_by_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_order_by_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_output_column_node(::zetasql::ResolvedOutputColumnProto* resolved_output_column_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_output_column_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_output_column_node);
    if (message_arena != submessage_arena) {
      resolved_output_column_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_output_column_node, submessage_arena);
    }
    set_has_resolved_output_column_node();
    _impl_.node_.resolved_output_column_node_ = resolved_output_column_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_output_column_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_with_entry_node(::zetasql::ResolvedWithEntryProto* resolved_with_entry_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_with_entry_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_with_entry_node);
    if (message_arena != submessage_arena) {
      resolved_with_entry_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_with_entry_node, submessage_arena);
    }
    set_has_resolved_with_entry_node();
    _impl_.node_.resolved_with_entry_node_ = resolved_with_entry_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_with_entry_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_option_node(::zetasql::ResolvedOptionProto* resolved_option_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_option_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_option_node);
    if (message_arena != submessage_arena) {
      resolved_option_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_option_node, submessage_arena);
    }
    set_has_resolved_option_node();
    _impl_.node_.resolved_option_node_ = resolved_option_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_option_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_window_partitioning_node(::zetasql::ResolvedWindowPartitioningProto* resolved_window_partitioning_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_window_partitioning_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_window_partitioning_node);
    if (message_arena != submessage_arena) {
      resolved_window_partitioning_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_window_partitioning_node, submessage_arena);
    }
    set_has_resolved_window_partitioning_node();
    _impl_.node_.resolved_window_partitioning_node_ = resolved_window_partitioning_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_window_partitioning_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_window_ordering_node(::zetasql::ResolvedWindowOrderingProto* resolved_window_ordering_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_window_ordering_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_window_ordering_node);
    if (message_arena != submessage_arena) {
      resolved_window_ordering_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_window_ordering_node, submessage_arena);
    }
    set_has_resolved_window_ordering_node();
    _impl_.node_.resolved_window_ordering_node_ = resolved_window_ordering_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_window_ordering_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_window_frame_node(::zetasql::ResolvedWindowFrameProto* resolved_window_frame_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_window_frame_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_window_frame_node);
    if (message_arena != submessage_arena) {
      resolved_window_frame_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_window_frame_node, submessage_arena);
    }
    set_has_resolved_window_frame_node();
    _impl_.node_.resolved_window_frame_node_ = resolved_window_frame_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_window_frame_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_analytic_function_group_node(::zetasql::ResolvedAnalyticFunctionGroupProto* resolved_analytic_function_group_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_analytic_function_group_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_analytic_function_group_node);
    if (message_arena != submessage_arena) {
      resolved_analytic_function_group_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_analytic_function_group_node, submessage_arena);
    }
    set_has_resolved_analytic_function_group_node();
    _impl_.node_.resolved_analytic_function_group_node_ = resolved_analytic_function_group_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_analytic_function_group_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_window_frame_expr_node(::zetasql::ResolvedWindowFrameExprProto* resolved_window_frame_expr_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_window_frame_expr_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_window_frame_expr_node);
    if (message_arena != submessage_arena) {
      resolved_window_frame_expr_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_window_frame_expr_node, submessage_arena);
    }
    set_has_resolved_window_frame_expr_node();
    _impl_.node_.resolved_window_frame_expr_node_ = resolved_window_frame_expr_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_window_frame_expr_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_dmlvalue_node(::zetasql::ResolvedDMLValueProto* resolved_dmlvalue_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_dmlvalue_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_dmlvalue_node);
    if (message_arena != submessage_arena) {
      resolved_dmlvalue_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_dmlvalue_node, submessage_arena);
    }
    set_has_resolved_dmlvalue_node();
    _impl_.node_.resolved_dmlvalue_node_ = resolved_dmlvalue_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_dmlvalue_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_assert_rows_modified_node(::zetasql::ResolvedAssertRowsModifiedProto* resolved_assert_rows_modified_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_assert_rows_modified_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_assert_rows_modified_node);
    if (message_arena != submessage_arena) {
      resolved_assert_rows_modified_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_assert_rows_modified_node, submessage_arena);
    }
    set_has_resolved_assert_rows_modified_node();
    _impl_.node_.resolved_assert_rows_modified_node_ = resolved_assert_rows_modified_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_assert_rows_modified_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_insert_row_node(::zetasql::ResolvedInsertRowProto* resolved_insert_row_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_insert_row_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_insert_row_node);
    if (message_arena != submessage_arena) {
      resolved_insert_row_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_insert_row_node, submessage_arena);
    }
    set_has_resolved_insert_row_node();
    _impl_.node_.resolved_insert_row_node_ = resolved_insert_row_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_insert_row_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_update_item_node(::zetasql::ResolvedUpdateItemProto* resolved_update_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_update_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_update_item_node);
    if (message_arena != submessage_arena) {
      resolved_update_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_update_item_node, submessage_arena);
    }
    set_has_resolved_update_item_node();
    _impl_.node_.resolved_update_item_node_ = resolved_update_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_update_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_privilege_node(::zetasql::ResolvedPrivilegeProto* resolved_privilege_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_privilege_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_privilege_node);
    if (message_arena != submessage_arena) {
      resolved_privilege_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_privilege_node, submessage_arena);
    }
    set_has_resolved_privilege_node();
    _impl_.node_.resolved_privilege_node_ = resolved_privilege_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_privilege_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_argument_def_node(::zetasql::ResolvedArgumentDefProto* resolved_argument_def_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_argument_def_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_argument_def_node);
    if (message_arena != submessage_arena) {
      resolved_argument_def_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_argument_def_node, submessage_arena);
    }
    set_has_resolved_argument_def_node();
    _impl_.node_.resolved_argument_def_node_ = resolved_argument_def_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_argument_def_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_argument_list_node(::zetasql::ResolvedArgumentListProto* resolved_argument_list_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_argument_list_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_argument_list_node);
    if (message_arena != submessage_arena) {
      resolved_argument_list_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_argument_list_node, submessage_arena);
    }
    set_has_resolved_argument_list_node();
    _impl_.node_.resolved_argument_list_node_ = resolved_argument_list_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_argument_list_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_function_argument_node(::zetasql::ResolvedFunctionArgumentProto* resolved_function_argument_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_function_argument_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_function_argument_node);
    if (message_arena != submessage_arena) {
      resolved_function_argument_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_function_argument_node, submessage_arena);
    }
    set_has_resolved_function_argument_node();
    _impl_.node_.resolved_function_argument_node_ = resolved_function_argument_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_function_argument_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_function_signature_holder_node(::zetasql::ResolvedFunctionSignatureHolderProto* resolved_function_signature_holder_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_function_signature_holder_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_function_signature_holder_node);
    if (message_arena != submessage_arena) {
      resolved_function_signature_holder_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_function_signature_holder_node, submessage_arena);
    }
    set_has_resolved_function_signature_holder_node();
    _impl_.node_.resolved_function_signature_holder_node_ = resolved_function_signature_holder_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_function_signature_holder_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_aggregate_having_modifier_node(::zetasql::ResolvedAggregateHavingModifierProto* resolved_aggregate_having_modifier_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aggregate_having_modifier_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_aggregate_having_modifier_node);
    if (message_arena != submessage_arena) {
      resolved_aggregate_having_modifier_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aggregate_having_modifier_node, submessage_arena);
    }
    set_has_resolved_aggregate_having_modifier_node();
    _impl_.node_.resolved_aggregate_having_modifier_node_ = resolved_aggregate_having_modifier_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_aggregate_having_modifier_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_column_definition_node(::zetasql::ResolvedColumnDefinitionProto* resolved_column_definition_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_definition_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_column_definition_node);
    if (message_arena != submessage_arena) {
      resolved_column_definition_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_definition_node, submessage_arena);
    }
    set_has_resolved_column_definition_node();
    _impl_.node_.resolved_column_definition_node_ = resolved_column_definition_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_column_definition_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_grouping_set_node(::zetasql::ResolvedGroupingSetProto* resolved_grouping_set_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_grouping_set_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_grouping_set_node);
    if (message_arena != submessage_arena) {
      resolved_grouping_set_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_grouping_set_node, submessage_arena);
    }
    set_has_resolved_grouping_set_node();
    _impl_.node_.resolved_grouping_set_node_ = resolved_grouping_set_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_grouping_set_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_set_operation_item_node(::zetasql::ResolvedSetOperationItemProto* resolved_set_operation_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_operation_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_set_operation_item_node);
    if (message_arena != submessage_arena) {
      resolved_set_operation_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_operation_item_node, submessage_arena);
    }
    set_has_resolved_set_operation_item_node();
    _impl_.node_.resolved_set_operation_item_node_ = resolved_set_operation_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_set_operation_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_index_item_node(::zetasql::ResolvedIndexItemProto* resolved_index_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_index_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_index_item_node);
    if (message_arena != submessage_arena) {
      resolved_index_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_index_item_node, submessage_arena);
    }
    set_has_resolved_index_item_node();
    _impl_.node_.resolved_index_item_node_ = resolved_index_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_index_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_merge_when_node(::zetasql::ResolvedMergeWhenProto* resolved_merge_when_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_merge_when_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_merge_when_node);
    if (message_arena != submessage_arena) {
      resolved_merge_when_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_merge_when_node, submessage_arena);
    }
    set_has_resolved_merge_when_node();
    _impl_.node_.resolved_merge_when_node_ = resolved_merge_when_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_merge_when_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_update_array_item_node(::zetasql::ResolvedUpdateArrayItemProto* resolved_update_array_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_update_array_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_update_array_item_node);
    if (message_arena != submessage_arena) {
      resolved_update_array_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_update_array_item_node, submessage_arena);
    }
    set_has_resolved_update_array_item_node();
    _impl_.node_.resolved_update_array_item_node_ = resolved_update_array_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_update_array_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_column_annotations_node(::zetasql::ResolvedColumnAnnotationsProto* resolved_column_annotations_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_annotations_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_column_annotations_node);
    if (message_arena != submessage_arena) {
      resolved_column_annotations_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_annotations_node, submessage_arena);
    }
    set_has_resolved_column_annotations_node();
    _impl_.node_.resolved_column_annotations_node_ = resolved_column_annotations_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_column_annotations_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_generated_column_info_node(::zetasql::ResolvedGeneratedColumnInfoProto* resolved_generated_column_info_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_generated_column_info_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_generated_column_info_node);
    if (message_arena != submessage_arena) {
      resolved_generated_column_info_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_generated_column_info_node, submessage_arena);
    }
    set_has_resolved_generated_column_info_node();
    _impl_.node_.resolved_generated_column_info_node_ = resolved_generated_column_info_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_generated_column_info_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_model_node(::zetasql::ResolvedModelProto* resolved_model_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_model_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_model_node);
    if (message_arena != submessage_arena) {
      resolved_model_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_model_node, submessage_arena);
    }
    set_has_resolved_model_node();
    _impl_.node_.resolved_model_node_ = resolved_model_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_model_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_alter_action_node(::zetasql::AnyResolvedAlterActionProto* resolved_alter_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_action_node, submessage_arena);
    }
    set_has_resolved_alter_action_node();
    _impl_.node_.resolved_alter_action_node_ = resolved_alter_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_alter_action_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_unnest_item_node(::zetasql::ResolvedUnnestItemProto* resolved_unnest_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_unnest_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_unnest_item_node);
    if (message_arena != submessage_arena) {
      resolved_unnest_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_unnest_item_node, submessage_arena);
    }
    set_has_resolved_unnest_item_node();
    _impl_.node_.resolved_unnest_item_node_ = resolved_unnest_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_unnest_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_replace_field_item_node(::zetasql::ResolvedReplaceFieldItemProto* resolved_replace_field_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_replace_field_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_replace_field_item_node);
    if (message_arena != submessage_arena) {
      resolved_replace_field_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_replace_field_item_node, submessage_arena);
    }
    set_has_resolved_replace_field_item_node();
    _impl_.node_.resolved_replace_field_item_node_ = resolved_replace_field_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_replace_field_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_connection_node(::zetasql::ResolvedConnectionProto* resolved_connection_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_connection_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_connection_node);
    if (message_arena != submessage_arena) {
      resolved_connection_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_connection_node, submessage_arena);
    }
    set_has_resolved_connection_node();
    _impl_.node_.resolved_connection_node_ = resolved_connection_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_connection_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_execute_immediate_argument_node(::zetasql::ResolvedExecuteImmediateArgumentProto* resolved_execute_immediate_argument_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_execute_immediate_argument_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_execute_immediate_argument_node);
    if (message_arena != submessage_arena) {
      resolved_execute_immediate_argument_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_execute_immediate_argument_node, submessage_arena);
    }
    set_has_resolved_execute_immediate_argument_node();
    _impl_.node_.resolved_execute_immediate_argument_node_ = resolved_execute_immediate_argument_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_execute_immediate_argument_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_descriptor_node(::zetasql::ResolvedDescriptorProto* resolved_descriptor_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_descriptor_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_descriptor_node);
    if (message_arena != submessage_arena) {
      resolved_descriptor_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_descriptor_node, submessage_arena);
    }
    set_has_resolved_descriptor_node();
    _impl_.node_.resolved_descriptor_node_ = resolved_descriptor_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_descriptor_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_extended_cast_element_node(::zetasql::ResolvedExtendedCastElementProto* resolved_extended_cast_element_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_extended_cast_element_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_extended_cast_element_node);
    if (message_arena != submessage_arena) {
      resolved_extended_cast_element_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_extended_cast_element_node, submessage_arena);
    }
    set_has_resolved_extended_cast_element_node();
    _impl_.node_.resolved_extended_cast_element_node_ = resolved_extended_cast_element_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_element_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_with_partition_columns_node(::zetasql::ResolvedWithPartitionColumnsProto* resolved_with_partition_columns_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_with_partition_columns_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_with_partition_columns_node);
    if (message_arena != submessage_arena) {
      resolved_with_partition_columns_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_with_partition_columns_node, submessage_arena);
    }
    set_has_resolved_with_partition_columns_node();
    _impl_.node_.resolved_with_partition_columns_node_ = resolved_with_partition_columns_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_with_partition_columns_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_extended_cast_node(::zetasql::ResolvedExtendedCastProto* resolved_extended_cast_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_extended_cast_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_extended_cast_node);
    if (message_arena != submessage_arena) {
      resolved_extended_cast_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_extended_cast_node, submessage_arena);
    }
    set_has_resolved_extended_cast_node();
    _impl_.node_.resolved_extended_cast_node_ = resolved_extended_cast_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_inline_lambda_node(::zetasql::ResolvedInlineLambdaProto* resolved_inline_lambda_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_inline_lambda_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_inline_lambda_node);
    if (message_arena != submessage_arena) {
      resolved_inline_lambda_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_inline_lambda_node, submessage_arena);
    }
    set_has_resolved_inline_lambda_node();
    _impl_.node_.resolved_inline_lambda_node_ = resolved_inline_lambda_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_inline_lambda_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_constraint_node(::zetasql::AnyResolvedConstraintProto* resolved_constraint_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_constraint_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_constraint_node);
    if (message_arena != submessage_arena) {
      resolved_constraint_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_constraint_node, submessage_arena);
    }
    set_has_resolved_constraint_node();
    _impl_.node_.resolved_constraint_node_ = resolved_constraint_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_constraint_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_pivot_column_node(::zetasql::ResolvedPivotColumnProto* resolved_pivot_column_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_pivot_column_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_pivot_column_node);
    if (message_arena != submessage_arena) {
      resolved_pivot_column_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_pivot_column_node, submessage_arena);
    }
    set_has_resolved_pivot_column_node();
    _impl_.node_.resolved_pivot_column_node_ = resolved_pivot_column_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_pivot_column_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_returning_clause_node(::zetasql::ResolvedReturningClauseProto* resolved_returning_clause_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_returning_clause_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_returning_clause_node);
    if (message_arena != submessage_arena) {
      resolved_returning_clause_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_returning_clause_node, submessage_arena);
    }
    set_has_resolved_returning_clause_node();
    _impl_.node_.resolved_returning_clause_node_ = resolved_returning_clause_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_returning_clause_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_unpivot_arg_node(::zetasql::ResolvedUnpivotArgProto* resolved_unpivot_arg_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_unpivot_arg_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_unpivot_arg_node);
    if (message_arena != submessage_arena) {
      resolved_unpivot_arg_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_unpivot_arg_node, submessage_arena);
    }
    set_has_resolved_unpivot_arg_node();
    _impl_.node_.resolved_unpivot_arg_node_ = resolved_unpivot_arg_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_unpivot_arg_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_filter_field_arg_node(::zetasql::ResolvedFilterFieldArgProto* resolved_filter_field_arg_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_filter_field_arg_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_filter_field_arg_node);
    if (message_arena != submessage_arena) {
      resolved_filter_field_arg_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_filter_field_arg_node, submessage_arena);
    }
    set_has_resolved_filter_field_arg_node();
    _impl_.node_.resolved_filter_field_arg_node_ = resolved_filter_field_arg_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_filter_field_arg_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_table_and_column_info_node(::zetasql::ResolvedTableAndColumnInfoProto* resolved_table_and_column_info_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_table_and_column_info_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_table_and_column_info_node);
    if (message_arena != submessage_arena) {
      resolved_table_and_column_info_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_table_and_column_info_node, submessage_arena);
    }
    set_has_resolved_table_and_column_info_node();
    _impl_.node_.resolved_table_and_column_info_node_ = resolved_table_and_column_info_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_table_and_column_info_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_column_default_value_node(::zetasql::ResolvedColumnDefaultValueProto* resolved_column_default_value_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_default_value_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_column_default_value_node);
    if (message_arena != submessage_arena) {
      resolved_column_default_value_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_default_value_node, submessage_arena);
    }
    set_has_resolved_column_default_value_node();
    _impl_.node_.resolved_column_default_value_node_ = resolved_column_default_value_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_column_default_value_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_object_unit_node(::zetasql::ResolvedObjectUnitProto* resolved_object_unit_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_object_unit_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_object_unit_node);
    if (message_arena != submessage_arena) {
      resolved_object_unit_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_object_unit_node, submessage_arena);
    }
    set_has_resolved_object_unit_node();
    _impl_.node_.resolved_object_unit_node_ = resolved_object_unit_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_object_unit_node)
}
AnyResolvedArgumentProto::AnyResolvedArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedArgumentProto)
}
AnyResolvedArgumentProto::AnyResolvedArgumentProto(const AnyResolvedArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedArgumentProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedMakeProtoFieldNode: {
      _this->_internal_mutable_resolved_make_proto_field_node()->::zetasql::ResolvedMakeProtoFieldProto::MergeFrom(
          from._internal_resolved_make_proto_field_node());
      break;
    }
    case kResolvedColumnHolderNode: {
      _this->_internal_mutable_resolved_column_holder_node()->::zetasql::ResolvedColumnHolderProto::MergeFrom(
          from._internal_resolved_column_holder_node());
      break;
    }
    case kResolvedComputedColumnNode: {
      _this->_internal_mutable_resolved_computed_column_node()->::zetasql::ResolvedComputedColumnProto::MergeFrom(
          from._internal_resolved_computed_column_node());
      break;
    }
    case kResolvedOrderByItemNode: {
      _this->_internal_mutable_resolved_order_by_item_node()->::zetasql::ResolvedOrderByItemProto::MergeFrom(
          from._internal_resolved_order_by_item_node());
      break;
    }
    case kResolvedOutputColumnNode: {
      _this->_internal_mutable_resolved_output_column_node()->::zetasql::ResolvedOutputColumnProto::MergeFrom(
          from._internal_resolved_output_column_node());
      break;
    }
    case kResolvedWithEntryNode: {
      _this->_internal_mutable_resolved_with_entry_node()->::zetasql::ResolvedWithEntryProto::MergeFrom(
          from._internal_resolved_with_entry_node());
      break;
    }
    case kResolvedOptionNode: {
      _this->_internal_mutable_resolved_option_node()->::zetasql::ResolvedOptionProto::MergeFrom(
          from._internal_resolved_option_node());
      break;
    }
    case kResolvedWindowPartitioningNode: {
      _this->_internal_mutable_resolved_window_partitioning_node()->::zetasql::ResolvedWindowPartitioningProto::MergeFrom(
          from._internal_resolved_window_partitioning_node());
      break;
    }
    case kResolvedWindowOrderingNode: {
      _this->_internal_mutable_resolved_window_ordering_node()->::zetasql::ResolvedWindowOrderingProto::MergeFrom(
          from._internal_resolved_window_ordering_node());
      break;
    }
    case kResolvedWindowFrameNode: {
      _this->_internal_mutable_resolved_window_frame_node()->::zetasql::ResolvedWindowFrameProto::MergeFrom(
          from._internal_resolved_window_frame_node());
      break;
    }
    case kResolvedAnalyticFunctionGroupNode: {
      _this->_internal_mutable_resolved_analytic_function_group_node()->::zetasql::ResolvedAnalyticFunctionGroupProto::MergeFrom(
          from._internal_resolved_analytic_function_group_node());
      break;
    }
    case kResolvedWindowFrameExprNode: {
      _this->_internal_mutable_resolved_window_frame_expr_node()->::zetasql::ResolvedWindowFrameExprProto::MergeFrom(
          from._internal_resolved_window_frame_expr_node());
      break;
    }
    case kResolvedDmlvalueNode: {
      _this->_internal_mutable_resolved_dmlvalue_node()->::zetasql::ResolvedDMLValueProto::MergeFrom(
          from._internal_resolved_dmlvalue_node());
      break;
    }
    case kResolvedAssertRowsModifiedNode: {
      _this->_internal_mutable_resolved_assert_rows_modified_node()->::zetasql::ResolvedAssertRowsModifiedProto::MergeFrom(
          from._internal_resolved_assert_rows_modified_node());
      break;
    }
    case kResolvedInsertRowNode: {
      _this->_internal_mutable_resolved_insert_row_node()->::zetasql::ResolvedInsertRowProto::MergeFrom(
          from._internal_resolved_insert_row_node());
      break;
    }
    case kResolvedUpdateItemNode: {
      _this->_internal_mutable_resolved_update_item_node()->::zetasql::ResolvedUpdateItemProto::MergeFrom(
          from._internal_resolved_update_item_node());
      break;
    }
    case kResolvedPrivilegeNode: {
      _this->_internal_mutable_resolved_privilege_node()->::zetasql::ResolvedPrivilegeProto::MergeFrom(
          from._internal_resolved_privilege_node());
      break;
    }
    case kResolvedArgumentDefNode: {
      _this->_internal_mutable_resolved_argument_def_node()->::zetasql::ResolvedArgumentDefProto::MergeFrom(
          from._internal_resolved_argument_def_node());
      break;
    }
    case kResolvedArgumentListNode: {
      _this->_internal_mutable_resolved_argument_list_node()->::zetasql::ResolvedArgumentListProto::MergeFrom(
          from._internal_resolved_argument_list_node());
      break;
    }
    case kResolvedFunctionArgumentNode: {
      _this->_internal_mutable_resolved_function_argument_node()->::zetasql::ResolvedFunctionArgumentProto::MergeFrom(
          from._internal_resolved_function_argument_node());
      break;
    }
    case kResolvedFunctionSignatureHolderNode: {
      _this->_internal_mutable_resolved_function_signature_holder_node()->::zetasql::ResolvedFunctionSignatureHolderProto::MergeFrom(
          from._internal_resolved_function_signature_holder_node());
      break;
    }
    case kResolvedAggregateHavingModifierNode: {
      _this->_internal_mutable_resolved_aggregate_having_modifier_node()->::zetasql::ResolvedAggregateHavingModifierProto::MergeFrom(
          from._internal_resolved_aggregate_having_modifier_node());
      break;
    }
    case kResolvedColumnDefinitionNode: {
      _this->_internal_mutable_resolved_column_definition_node()->::zetasql::ResolvedColumnDefinitionProto::MergeFrom(
          from._internal_resolved_column_definition_node());
      break;
    }
    case kResolvedGroupingSetNode: {
      _this->_internal_mutable_resolved_grouping_set_node()->::zetasql::ResolvedGroupingSetProto::MergeFrom(
          from._internal_resolved_grouping_set_node());
      break;
    }
    case kResolvedSetOperationItemNode: {
      _this->_internal_mutable_resolved_set_operation_item_node()->::zetasql::ResolvedSetOperationItemProto::MergeFrom(
          from._internal_resolved_set_operation_item_node());
      break;
    }
    case kResolvedIndexItemNode: {
      _this->_internal_mutable_resolved_index_item_node()->::zetasql::ResolvedIndexItemProto::MergeFrom(
          from._internal_resolved_index_item_node());
      break;
    }
    case kResolvedMergeWhenNode: {
      _this->_internal_mutable_resolved_merge_when_node()->::zetasql::ResolvedMergeWhenProto::MergeFrom(
          from._internal_resolved_merge_when_node());
      break;
    }
    case kResolvedUpdateArrayItemNode: {
      _this->_internal_mutable_resolved_update_array_item_node()->::zetasql::ResolvedUpdateArrayItemProto::MergeFrom(
          from._internal_resolved_update_array_item_node());
      break;
    }
    case kResolvedColumnAnnotationsNode: {
      _this->_internal_mutable_resolved_column_annotations_node()->::zetasql::ResolvedColumnAnnotationsProto::MergeFrom(
          from._internal_resolved_column_annotations_node());
      break;
    }
    case kResolvedGeneratedColumnInfoNode: {
      _this->_internal_mutable_resolved_generated_column_info_node()->::zetasql::ResolvedGeneratedColumnInfoProto::MergeFrom(
          from._internal_resolved_generated_column_info_node());
      break;
    }
    case kResolvedModelNode: {
      _this->_internal_mutable_resolved_model_node()->::zetasql::ResolvedModelProto::MergeFrom(
          from._internal_resolved_model_node());
      break;
    }
    case kResolvedAlterActionNode: {
      _this->_internal_mutable_resolved_alter_action_node()->::zetasql::AnyResolvedAlterActionProto::MergeFrom(
          from._internal_resolved_alter_action_node());
      break;
    }
    case kResolvedUnnestItemNode: {
      _this->_internal_mutable_resolved_unnest_item_node()->::zetasql::ResolvedUnnestItemProto::MergeFrom(
          from._internal_resolved_unnest_item_node());
      break;
    }
    case kResolvedReplaceFieldItemNode: {
      _this->_internal_mutable_resolved_replace_field_item_node()->::zetasql::ResolvedReplaceFieldItemProto::MergeFrom(
          from._internal_resolved_replace_field_item_node());
      break;
    }
    case kResolvedConnectionNode: {
      _this->_internal_mutable_resolved_connection_node()->::zetasql::ResolvedConnectionProto::MergeFrom(
          from._internal_resolved_connection_node());
      break;
    }
    case kResolvedExecuteImmediateArgumentNode: {
      _this->_internal_mutable_resolved_execute_immediate_argument_node()->::zetasql::ResolvedExecuteImmediateArgumentProto::MergeFrom(
          from._internal_resolved_execute_immediate_argument_node());
      break;
    }
    case kResolvedDescriptorNode: {
      _this->_internal_mutable_resolved_descriptor_node()->::zetasql::ResolvedDescriptorProto::MergeFrom(
          from._internal_resolved_descriptor_node());
      break;
    }
    case kResolvedExtendedCastElementNode: {
      _this->_internal_mutable_resolved_extended_cast_element_node()->::zetasql::ResolvedExtendedCastElementProto::MergeFrom(
          from._internal_resolved_extended_cast_element_node());
      break;
    }
    case kResolvedWithPartitionColumnsNode: {
      _this->_internal_mutable_resolved_with_partition_columns_node()->::zetasql::ResolvedWithPartitionColumnsProto::MergeFrom(
          from._internal_resolved_with_partition_columns_node());
      break;
    }
    case kResolvedExtendedCastNode: {
      _this->_internal_mutable_resolved_extended_cast_node()->::zetasql::ResolvedExtendedCastProto::MergeFrom(
          from._internal_resolved_extended_cast_node());
      break;
    }
    case kResolvedInlineLambdaNode: {
      _this->_internal_mutable_resolved_inline_lambda_node()->::zetasql::ResolvedInlineLambdaProto::MergeFrom(
          from._internal_resolved_inline_lambda_node());
      break;
    }
    case kResolvedConstraintNode: {
      _this->_internal_mutable_resolved_constraint_node()->::zetasql::AnyResolvedConstraintProto::MergeFrom(
          from._internal_resolved_constraint_node());
      break;
    }
    case kResolvedPivotColumnNode: {
      _this->_internal_mutable_resolved_pivot_column_node()->::zetasql::ResolvedPivotColumnProto::MergeFrom(
          from._internal_resolved_pivot_column_node());
      break;
    }
    case kResolvedReturningClauseNode: {
      _this->_internal_mutable_resolved_returning_clause_node()->::zetasql::ResolvedReturningClauseProto::MergeFrom(
          from._internal_resolved_returning_clause_node());
      break;
    }
    case kResolvedUnpivotArgNode: {
      _this->_internal_mutable_resolved_unpivot_arg_node()->::zetasql::ResolvedUnpivotArgProto::MergeFrom(
          from._internal_resolved_unpivot_arg_node());
      break;
    }
    case kResolvedFilterFieldArgNode: {
      _this->_internal_mutable_resolved_filter_field_arg_node()->::zetasql::ResolvedFilterFieldArgProto::MergeFrom(
          from._internal_resolved_filter_field_arg_node());
      break;
    }
    case kResolvedTableAndColumnInfoNode: {
      _this->_internal_mutable_resolved_table_and_column_info_node()->::zetasql::ResolvedTableAndColumnInfoProto::MergeFrom(
          from._internal_resolved_table_and_column_info_node());
      break;
    }
    case kResolvedColumnDefaultValueNode: {
      _this->_internal_mutable_resolved_column_default_value_node()->::zetasql::ResolvedColumnDefaultValueProto::MergeFrom(
          from._internal_resolved_column_default_value_node());
      break;
    }
    case kResolvedObjectUnitNode: {
      _this->_internal_mutable_resolved_object_unit_node()->::zetasql::ResolvedObjectUnitProto::MergeFrom(
          from._internal_resolved_object_unit_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedArgumentProto)
}

inline void AnyResolvedArgumentProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedArgumentProto::~AnyResolvedArgumentProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedArgumentProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedArgumentProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedArgumentProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedArgumentProto)
  switch (node_case()) {
    case kResolvedMakeProtoFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_make_proto_field_node_;
      }
      break;
    }
    case kResolvedColumnHolderNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_column_holder_node_;
      }
      break;
    }
    case kResolvedComputedColumnNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_computed_column_node_;
      }
      break;
    }
    case kResolvedOrderByItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_order_by_item_node_;
      }
      break;
    }
    case kResolvedOutputColumnNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_output_column_node_;
      }
      break;
    }
    case kResolvedWithEntryNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_with_entry_node_;
      }
      break;
    }
    case kResolvedOptionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_option_node_;
      }
      break;
    }
    case kResolvedWindowPartitioningNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_window_partitioning_node_;
      }
      break;
    }
    case kResolvedWindowOrderingNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_window_ordering_node_;
      }
      break;
    }
    case kResolvedWindowFrameNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_window_frame_node_;
      }
      break;
    }
    case kResolvedAnalyticFunctionGroupNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_analytic_function_group_node_;
      }
      break;
    }
    case kResolvedWindowFrameExprNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_window_frame_expr_node_;
      }
      break;
    }
    case kResolvedDmlvalueNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_dmlvalue_node_;
      }
      break;
    }
    case kResolvedAssertRowsModifiedNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_assert_rows_modified_node_;
      }
      break;
    }
    case kResolvedInsertRowNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_insert_row_node_;
      }
      break;
    }
    case kResolvedUpdateItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_update_item_node_;
      }
      break;
    }
    case kResolvedPrivilegeNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_privilege_node_;
      }
      break;
    }
    case kResolvedArgumentDefNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_argument_def_node_;
      }
      break;
    }
    case kResolvedArgumentListNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_argument_list_node_;
      }
      break;
    }
    case kResolvedFunctionArgumentNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_function_argument_node_;
      }
      break;
    }
    case kResolvedFunctionSignatureHolderNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_function_signature_holder_node_;
      }
      break;
    }
    case kResolvedAggregateHavingModifierNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_aggregate_having_modifier_node_;
      }
      break;
    }
    case kResolvedColumnDefinitionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_column_definition_node_;
      }
      break;
    }
    case kResolvedGroupingSetNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_grouping_set_node_;
      }
      break;
    }
    case kResolvedSetOperationItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_set_operation_item_node_;
      }
      break;
    }
    case kResolvedIndexItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_index_item_node_;
      }
      break;
    }
    case kResolvedMergeWhenNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_merge_when_node_;
      }
      break;
    }
    case kResolvedUpdateArrayItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_update_array_item_node_;
      }
      break;
    }
    case kResolvedColumnAnnotationsNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_column_annotations_node_;
      }
      break;
    }
    case kResolvedGeneratedColumnInfoNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_generated_column_info_node_;
      }
      break;
    }
    case kResolvedModelNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_model_node_;
      }
      break;
    }
    case kResolvedAlterActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_action_node_;
      }
      break;
    }
    case kResolvedUnnestItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_unnest_item_node_;
      }
      break;
    }
    case kResolvedReplaceFieldItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_replace_field_item_node_;
      }
      break;
    }
    case kResolvedConnectionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_connection_node_;
      }
      break;
    }
    case kResolvedExecuteImmediateArgumentNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_execute_immediate_argument_node_;
      }
      break;
    }
    case kResolvedDescriptorNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_descriptor_node_;
      }
      break;
    }
    case kResolvedExtendedCastElementNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_extended_cast_element_node_;
      }
      break;
    }
    case kResolvedWithPartitionColumnsNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_with_partition_columns_node_;
      }
      break;
    }
    case kResolvedExtendedCastNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_extended_cast_node_;
      }
      break;
    }
    case kResolvedInlineLambdaNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_inline_lambda_node_;
      }
      break;
    }
    case kResolvedConstraintNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_constraint_node_;
      }
      break;
    }
    case kResolvedPivotColumnNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_pivot_column_node_;
      }
      break;
    }
    case kResolvedReturningClauseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_returning_clause_node_;
      }
      break;
    }
    case kResolvedUnpivotArgNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_unpivot_arg_node_;
      }
      break;
    }
    case kResolvedFilterFieldArgNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_filter_field_arg_node_;
      }
      break;
    }
    case kResolvedTableAndColumnInfoNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_table_and_column_info_node_;
      }
      break;
    }
    case kResolvedColumnDefaultValueNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_column_default_value_node_;
      }
      break;
    }
    case kResolvedObjectUnitNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_object_unit_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedArgumentProto::InternalSwap(AnyResolvedArgumentProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedArgumentProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[1]);
}

// ===================================================================

class ResolvedArgumentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArgumentProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedNodeProto& parent(const ResolvedArgumentProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedNodeProto&
ResolvedArgumentProto::_Internal::parent(const ResolvedArgumentProto* msg) {
  return *msg->_impl_.parent_;
}
void ResolvedArgumentProto::clear_parent() {
  if (_impl_.parent_ != nullptr) _impl_.parent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ResolvedArgumentProto::ResolvedArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArgumentProto)
}
ResolvedArgumentProto::ResolvedArgumentProto(const ResolvedArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedArgumentProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedNodeProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArgumentProto)
}

inline void ResolvedArgumentProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedArgumentProto::~ResolvedArgumentProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArgumentProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedArgumentProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedArgumentProto::InternalSwap(ResolvedArgumentProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArgumentProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[2]);
}

// ===================================================================

class AnyResolvedExprProto::_Internal {
 public:
  static const ::zetasql::ResolvedLiteralProto& resolved_literal_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedParameterProto& resolved_parameter_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedExpressionColumnProto& resolved_expression_column_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedColumnRefProto& resolved_column_ref_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::AnyResolvedFunctionCallBaseProto& resolved_function_call_base_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedCastProto& resolved_cast_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedMakeStructProto& resolved_make_struct_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedMakeProtoProto& resolved_make_proto_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedGetStructFieldProto& resolved_get_struct_field_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedGetProtoFieldProto& resolved_get_proto_field_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedSubqueryExprProto& resolved_subquery_expr_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedDMLDefaultProto& resolved_dmldefault_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedArgumentRefProto& resolved_argument_ref_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedConstantProto& resolved_constant_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedReplaceFieldProto& resolved_replace_field_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedSystemVariableProto& resolved_system_variable_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedFlattenProto& resolved_flatten_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedFlattenedArgProto& resolved_flattened_arg_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedGetJsonFieldProto& resolved_get_json_field_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedFilterFieldProto& resolved_filter_field_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedWithExprProto& resolved_with_expr_node(const AnyResolvedExprProto* msg);
};

const ::zetasql::ResolvedLiteralProto&
AnyResolvedExprProto::_Internal::resolved_literal_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_literal_node_;
}
const ::zetasql::ResolvedParameterProto&
AnyResolvedExprProto::_Internal::resolved_parameter_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_parameter_node_;
}
const ::zetasql::ResolvedExpressionColumnProto&
AnyResolvedExprProto::_Internal::resolved_expression_column_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_expression_column_node_;
}
const ::zetasql::ResolvedColumnRefProto&
AnyResolvedExprProto::_Internal::resolved_column_ref_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_column_ref_node_;
}
const ::zetasql::AnyResolvedFunctionCallBaseProto&
AnyResolvedExprProto::_Internal::resolved_function_call_base_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_function_call_base_node_;
}
const ::zetasql::ResolvedCastProto&
AnyResolvedExprProto::_Internal::resolved_cast_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_cast_node_;
}
const ::zetasql::ResolvedMakeStructProto&
AnyResolvedExprProto::_Internal::resolved_make_struct_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_make_struct_node_;
}
const ::zetasql::ResolvedMakeProtoProto&
AnyResolvedExprProto::_Internal::resolved_make_proto_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_make_proto_node_;
}
const ::zetasql::ResolvedGetStructFieldProto&
AnyResolvedExprProto::_Internal::resolved_get_struct_field_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_get_struct_field_node_;
}
const ::zetasql::ResolvedGetProtoFieldProto&
AnyResolvedExprProto::_Internal::resolved_get_proto_field_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_get_proto_field_node_;
}
const ::zetasql::ResolvedSubqueryExprProto&
AnyResolvedExprProto::_Internal::resolved_subquery_expr_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_subquery_expr_node_;
}
const ::zetasql::ResolvedDMLDefaultProto&
AnyResolvedExprProto::_Internal::resolved_dmldefault_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_dmldefault_node_;
}
const ::zetasql::ResolvedArgumentRefProto&
AnyResolvedExprProto::_Internal::resolved_argument_ref_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_argument_ref_node_;
}
const ::zetasql::ResolvedConstantProto&
AnyResolvedExprProto::_Internal::resolved_constant_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_constant_node_;
}
const ::zetasql::ResolvedReplaceFieldProto&
AnyResolvedExprProto::_Internal::resolved_replace_field_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_replace_field_node_;
}
const ::zetasql::ResolvedSystemVariableProto&
AnyResolvedExprProto::_Internal::resolved_system_variable_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_system_variable_node_;
}
const ::zetasql::ResolvedFlattenProto&
AnyResolvedExprProto::_Internal::resolved_flatten_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_flatten_node_;
}
const ::zetasql::ResolvedFlattenedArgProto&
AnyResolvedExprProto::_Internal::resolved_flattened_arg_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_flattened_arg_node_;
}
const ::zetasql::ResolvedGetJsonFieldProto&
AnyResolvedExprProto::_Internal::resolved_get_json_field_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_get_json_field_node_;
}
const ::zetasql::ResolvedFilterFieldProto&
AnyResolvedExprProto::_Internal::resolved_filter_field_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_filter_field_node_;
}
const ::zetasql::ResolvedWithExprProto&
AnyResolvedExprProto::_Internal::resolved_with_expr_node(const AnyResolvedExprProto* msg) {
  return *msg->_impl_.node_.resolved_with_expr_node_;
}
void AnyResolvedExprProto::set_allocated_resolved_literal_node(::zetasql::ResolvedLiteralProto* resolved_literal_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_literal_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_literal_node);
    if (message_arena != submessage_arena) {
      resolved_literal_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_literal_node, submessage_arena);
    }
    set_has_resolved_literal_node();
    _impl_.node_.resolved_literal_node_ = resolved_literal_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_literal_node)
}
void AnyResolvedExprProto::set_allocated_resolved_parameter_node(::zetasql::ResolvedParameterProto* resolved_parameter_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_parameter_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_parameter_node);
    if (message_arena != submessage_arena) {
      resolved_parameter_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_parameter_node, submessage_arena);
    }
    set_has_resolved_parameter_node();
    _impl_.node_.resolved_parameter_node_ = resolved_parameter_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_parameter_node)
}
void AnyResolvedExprProto::set_allocated_resolved_expression_column_node(::zetasql::ResolvedExpressionColumnProto* resolved_expression_column_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_expression_column_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_expression_column_node);
    if (message_arena != submessage_arena) {
      resolved_expression_column_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_expression_column_node, submessage_arena);
    }
    set_has_resolved_expression_column_node();
    _impl_.node_.resolved_expression_column_node_ = resolved_expression_column_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_expression_column_node)
}
void AnyResolvedExprProto::set_allocated_resolved_column_ref_node(::zetasql::ResolvedColumnRefProto* resolved_column_ref_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_ref_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_column_ref_node);
    if (message_arena != submessage_arena) {
      resolved_column_ref_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_ref_node, submessage_arena);
    }
    set_has_resolved_column_ref_node();
    _impl_.node_.resolved_column_ref_node_ = resolved_column_ref_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_column_ref_node)
}
void AnyResolvedExprProto::set_allocated_resolved_function_call_base_node(::zetasql::AnyResolvedFunctionCallBaseProto* resolved_function_call_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_function_call_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_function_call_base_node);
    if (message_arena != submessage_arena) {
      resolved_function_call_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_function_call_base_node, submessage_arena);
    }
    set_has_resolved_function_call_base_node();
    _impl_.node_.resolved_function_call_base_node_ = resolved_function_call_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_function_call_base_node)
}
void AnyResolvedExprProto::set_allocated_resolved_cast_node(::zetasql::ResolvedCastProto* resolved_cast_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_cast_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_cast_node);
    if (message_arena != submessage_arena) {
      resolved_cast_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_cast_node, submessage_arena);
    }
    set_has_resolved_cast_node();
    _impl_.node_.resolved_cast_node_ = resolved_cast_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_cast_node)
}
void AnyResolvedExprProto::set_allocated_resolved_make_struct_node(::zetasql::ResolvedMakeStructProto* resolved_make_struct_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_make_struct_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_make_struct_node);
    if (message_arena != submessage_arena) {
      resolved_make_struct_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_make_struct_node, submessage_arena);
    }
    set_has_resolved_make_struct_node();
    _impl_.node_.resolved_make_struct_node_ = resolved_make_struct_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_make_struct_node)
}
void AnyResolvedExprProto::set_allocated_resolved_make_proto_node(::zetasql::ResolvedMakeProtoProto* resolved_make_proto_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_make_proto_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_make_proto_node);
    if (message_arena != submessage_arena) {
      resolved_make_proto_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_make_proto_node, submessage_arena);
    }
    set_has_resolved_make_proto_node();
    _impl_.node_.resolved_make_proto_node_ = resolved_make_proto_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_make_proto_node)
}
void AnyResolvedExprProto::set_allocated_resolved_get_struct_field_node(::zetasql::ResolvedGetStructFieldProto* resolved_get_struct_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_get_struct_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_get_struct_field_node);
    if (message_arena != submessage_arena) {
      resolved_get_struct_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_get_struct_field_node, submessage_arena);
    }
    set_has_resolved_get_struct_field_node();
    _impl_.node_.resolved_get_struct_field_node_ = resolved_get_struct_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_get_struct_field_node)
}
void AnyResolvedExprProto::set_allocated_resolved_get_proto_field_node(::zetasql::ResolvedGetProtoFieldProto* resolved_get_proto_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_get_proto_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_get_proto_field_node);
    if (message_arena != submessage_arena) {
      resolved_get_proto_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_get_proto_field_node, submessage_arena);
    }
    set_has_resolved_get_proto_field_node();
    _impl_.node_.resolved_get_proto_field_node_ = resolved_get_proto_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_get_proto_field_node)
}
void AnyResolvedExprProto::set_allocated_resolved_subquery_expr_node(::zetasql::ResolvedSubqueryExprProto* resolved_subquery_expr_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_subquery_expr_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_subquery_expr_node);
    if (message_arena != submessage_arena) {
      resolved_subquery_expr_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_subquery_expr_node, submessage_arena);
    }
    set_has_resolved_subquery_expr_node();
    _impl_.node_.resolved_subquery_expr_node_ = resolved_subquery_expr_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_subquery_expr_node)
}
void AnyResolvedExprProto::set_allocated_resolved_dmldefault_node(::zetasql::ResolvedDMLDefaultProto* resolved_dmldefault_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_dmldefault_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_dmldefault_node);
    if (message_arena != submessage_arena) {
      resolved_dmldefault_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_dmldefault_node, submessage_arena);
    }
    set_has_resolved_dmldefault_node();
    _impl_.node_.resolved_dmldefault_node_ = resolved_dmldefault_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_dmldefault_node)
}
void AnyResolvedExprProto::set_allocated_resolved_argument_ref_node(::zetasql::ResolvedArgumentRefProto* resolved_argument_ref_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_argument_ref_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_argument_ref_node);
    if (message_arena != submessage_arena) {
      resolved_argument_ref_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_argument_ref_node, submessage_arena);
    }
    set_has_resolved_argument_ref_node();
    _impl_.node_.resolved_argument_ref_node_ = resolved_argument_ref_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_argument_ref_node)
}
void AnyResolvedExprProto::set_allocated_resolved_constant_node(::zetasql::ResolvedConstantProto* resolved_constant_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_constant_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_constant_node);
    if (message_arena != submessage_arena) {
      resolved_constant_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_constant_node, submessage_arena);
    }
    set_has_resolved_constant_node();
    _impl_.node_.resolved_constant_node_ = resolved_constant_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_constant_node)
}
void AnyResolvedExprProto::set_allocated_resolved_replace_field_node(::zetasql::ResolvedReplaceFieldProto* resolved_replace_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_replace_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_replace_field_node);
    if (message_arena != submessage_arena) {
      resolved_replace_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_replace_field_node, submessage_arena);
    }
    set_has_resolved_replace_field_node();
    _impl_.node_.resolved_replace_field_node_ = resolved_replace_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_replace_field_node)
}
void AnyResolvedExprProto::set_allocated_resolved_system_variable_node(::zetasql::ResolvedSystemVariableProto* resolved_system_variable_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_system_variable_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_system_variable_node);
    if (message_arena != submessage_arena) {
      resolved_system_variable_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_system_variable_node, submessage_arena);
    }
    set_has_resolved_system_variable_node();
    _impl_.node_.resolved_system_variable_node_ = resolved_system_variable_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_system_variable_node)
}
void AnyResolvedExprProto::set_allocated_resolved_flatten_node(::zetasql::ResolvedFlattenProto* resolved_flatten_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_flatten_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_flatten_node);
    if (message_arena != submessage_arena) {
      resolved_flatten_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_flatten_node, submessage_arena);
    }
    set_has_resolved_flatten_node();
    _impl_.node_.resolved_flatten_node_ = resolved_flatten_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_flatten_node)
}
void AnyResolvedExprProto::set_allocated_resolved_flattened_arg_node(::zetasql::ResolvedFlattenedArgProto* resolved_flattened_arg_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_flattened_arg_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_flattened_arg_node);
    if (message_arena != submessage_arena) {
      resolved_flattened_arg_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_flattened_arg_node, submessage_arena);
    }
    set_has_resolved_flattened_arg_node();
    _impl_.node_.resolved_flattened_arg_node_ = resolved_flattened_arg_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_flattened_arg_node)
}
void AnyResolvedExprProto::set_allocated_resolved_get_json_field_node(::zetasql::ResolvedGetJsonFieldProto* resolved_get_json_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_get_json_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_get_json_field_node);
    if (message_arena != submessage_arena) {
      resolved_get_json_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_get_json_field_node, submessage_arena);
    }
    set_has_resolved_get_json_field_node();
    _impl_.node_.resolved_get_json_field_node_ = resolved_get_json_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_get_json_field_node)
}
void AnyResolvedExprProto::set_allocated_resolved_filter_field_node(::zetasql::ResolvedFilterFieldProto* resolved_filter_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_filter_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_filter_field_node);
    if (message_arena != submessage_arena) {
      resolved_filter_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_filter_field_node, submessage_arena);
    }
    set_has_resolved_filter_field_node();
    _impl_.node_.resolved_filter_field_node_ = resolved_filter_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_filter_field_node)
}
void AnyResolvedExprProto::set_allocated_resolved_with_expr_node(::zetasql::ResolvedWithExprProto* resolved_with_expr_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_with_expr_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_with_expr_node);
    if (message_arena != submessage_arena) {
      resolved_with_expr_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_with_expr_node, submessage_arena);
    }
    set_has_resolved_with_expr_node();
    _impl_.node_.resolved_with_expr_node_ = resolved_with_expr_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_with_expr_node)
}
AnyResolvedExprProto::AnyResolvedExprProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedExprProto)
}
AnyResolvedExprProto::AnyResolvedExprProto(const AnyResolvedExprProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedExprProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedLiteralNode: {
      _this->_internal_mutable_resolved_literal_node()->::zetasql::ResolvedLiteralProto::MergeFrom(
          from._internal_resolved_literal_node());
      break;
    }
    case kResolvedParameterNode: {
      _this->_internal_mutable_resolved_parameter_node()->::zetasql::ResolvedParameterProto::MergeFrom(
          from._internal_resolved_parameter_node());
      break;
    }
    case kResolvedExpressionColumnNode: {
      _this->_internal_mutable_resolved_expression_column_node()->::zetasql::ResolvedExpressionColumnProto::MergeFrom(
          from._internal_resolved_expression_column_node());
      break;
    }
    case kResolvedColumnRefNode: {
      _this->_internal_mutable_resolved_column_ref_node()->::zetasql::ResolvedColumnRefProto::MergeFrom(
          from._internal_resolved_column_ref_node());
      break;
    }
    case kResolvedFunctionCallBaseNode: {
      _this->_internal_mutable_resolved_function_call_base_node()->::zetasql::AnyResolvedFunctionCallBaseProto::MergeFrom(
          from._internal_resolved_function_call_base_node());
      break;
    }
    case kResolvedCastNode: {
      _this->_internal_mutable_resolved_cast_node()->::zetasql::ResolvedCastProto::MergeFrom(
          from._internal_resolved_cast_node());
      break;
    }
    case kResolvedMakeStructNode: {
      _this->_internal_mutable_resolved_make_struct_node()->::zetasql::ResolvedMakeStructProto::MergeFrom(
          from._internal_resolved_make_struct_node());
      break;
    }
    case kResolvedMakeProtoNode: {
      _this->_internal_mutable_resolved_make_proto_node()->::zetasql::ResolvedMakeProtoProto::MergeFrom(
          from._internal_resolved_make_proto_node());
      break;
    }
    case kResolvedGetStructFieldNode: {
      _this->_internal_mutable_resolved_get_struct_field_node()->::zetasql::ResolvedGetStructFieldProto::MergeFrom(
          from._internal_resolved_get_struct_field_node());
      break;
    }
    case kResolvedGetProtoFieldNode: {
      _this->_internal_mutable_resolved_get_proto_field_node()->::zetasql::ResolvedGetProtoFieldProto::MergeFrom(
          from._internal_resolved_get_proto_field_node());
      break;
    }
    case kResolvedSubqueryExprNode: {
      _this->_internal_mutable_resolved_subquery_expr_node()->::zetasql::ResolvedSubqueryExprProto::MergeFrom(
          from._internal_resolved_subquery_expr_node());
      break;
    }
    case kResolvedDmldefaultNode: {
      _this->_internal_mutable_resolved_dmldefault_node()->::zetasql::ResolvedDMLDefaultProto::MergeFrom(
          from._internal_resolved_dmldefault_node());
      break;
    }
    case kResolvedArgumentRefNode: {
      _this->_internal_mutable_resolved_argument_ref_node()->::zetasql::ResolvedArgumentRefProto::MergeFrom(
          from._internal_resolved_argument_ref_node());
      break;
    }
    case kResolvedConstantNode: {
      _this->_internal_mutable_resolved_constant_node()->::zetasql::ResolvedConstantProto::MergeFrom(
          from._internal_resolved_constant_node());
      break;
    }
    case kResolvedReplaceFieldNode: {
      _this->_internal_mutable_resolved_replace_field_node()->::zetasql::ResolvedReplaceFieldProto::MergeFrom(
          from._internal_resolved_replace_field_node());
      break;
    }
    case kResolvedSystemVariableNode: {
      _this->_internal_mutable_resolved_system_variable_node()->::zetasql::ResolvedSystemVariableProto::MergeFrom(
          from._internal_resolved_system_variable_node());
      break;
    }
    case kResolvedFlattenNode: {
      _this->_internal_mutable_resolved_flatten_node()->::zetasql::ResolvedFlattenProto::MergeFrom(
          from._internal_resolved_flatten_node());
      break;
    }
    case kResolvedFlattenedArgNode: {
      _this->_internal_mutable_resolved_flattened_arg_node()->::zetasql::ResolvedFlattenedArgProto::MergeFrom(
          from._internal_resolved_flattened_arg_node());
      break;
    }
    case kResolvedGetJsonFieldNode: {
      _this->_internal_mutable_resolved_get_json_field_node()->::zetasql::ResolvedGetJsonFieldProto::MergeFrom(
          from._internal_resolved_get_json_field_node());
      break;
    }
    case kResolvedFilterFieldNode: {
      _this->_internal_mutable_resolved_filter_field_node()->::zetasql::ResolvedFilterFieldProto::MergeFrom(
          from._internal_resolved_filter_field_node());
      break;
    }
    case kResolvedWithExprNode: {
      _this->_internal_mutable_resolved_with_expr_node()->::zetasql::ResolvedWithExprProto::MergeFrom(
          from._internal_resolved_with_expr_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedExprProto)
}

inline void AnyResolvedExprProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedExprProto::~AnyResolvedExprProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedExprProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedExprProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedExprProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedExprProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedExprProto)
  switch (node_case()) {
    case kResolvedLiteralNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_literal_node_;
      }
      break;
    }
    case kResolvedParameterNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_parameter_node_;
      }
      break;
    }
    case kResolvedExpressionColumnNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_expression_column_node_;
      }
      break;
    }
    case kResolvedColumnRefNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_column_ref_node_;
      }
      break;
    }
    case kResolvedFunctionCallBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_function_call_base_node_;
      }
      break;
    }
    case kResolvedCastNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_cast_node_;
      }
      break;
    }
    case kResolvedMakeStructNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_make_struct_node_;
      }
      break;
    }
    case kResolvedMakeProtoNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_make_proto_node_;
      }
      break;
    }
    case kResolvedGetStructFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_get_struct_field_node_;
      }
      break;
    }
    case kResolvedGetProtoFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_get_proto_field_node_;
      }
      break;
    }
    case kResolvedSubqueryExprNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_subquery_expr_node_;
      }
      break;
    }
    case kResolvedDmldefaultNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_dmldefault_node_;
      }
      break;
    }
    case kResolvedArgumentRefNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_argument_ref_node_;
      }
      break;
    }
    case kResolvedConstantNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_constant_node_;
      }
      break;
    }
    case kResolvedReplaceFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_replace_field_node_;
      }
      break;
    }
    case kResolvedSystemVariableNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_system_variable_node_;
      }
      break;
    }
    case kResolvedFlattenNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_flatten_node_;
      }
      break;
    }
    case kResolvedFlattenedArgNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_flattened_arg_node_;
      }
      break;
    }
    case kResolvedGetJsonFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_get_json_field_node_;
      }
      break;
    }
    case kResolvedFilterFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_filter_field_node_;
      }
      break;
    }
    case kResolvedWithExprNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_with_expr_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedExprProto::InternalSwap(AnyResolvedExprProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedExprProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[3]);
}

// ===================================================================

class ResolvedExprProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExprProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedNodeProto& parent(const ResolvedExprProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const ResolvedExprProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnnotationMapProto& type_annotation_map(const ResolvedExprProto* msg);
  static void set_has_type_annotation_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedNodeProto&
ResolvedExprProto::_Internal::parent(const ResolvedExprProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TypeProto&
ResolvedExprProto::_Internal::type(const ResolvedExprProto* msg) {
  return *msg->_impl_.type_;
}
const ::zetasql::AnnotationMapProto&
ResolvedExprProto::_Internal::type_annotation_map(const ResolvedExprProto* msg) {
  return *msg->_impl_.type_annotation_map_;
}
void ResolvedExprProto::clear_parent() {
  if (_impl_.parent_ != nullptr) _impl_.parent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ResolvedExprProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ResolvedExprProto::clear_type_annotation_map() {
  if (_impl_.type_annotation_map_ != nullptr) _impl_.type_annotation_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedExprProto::ResolvedExprProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExprProto)
}
ResolvedExprProto::ResolvedExprProto(const ResolvedExprProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedExprProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.type_annotation_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedNodeProto(*from._impl_.parent_);
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  if (from._internal_has_type_annotation_map()) {
    _this->_impl_.type_annotation_map_ = new ::zetasql::AnnotationMapProto(*from._impl_.type_annotation_map_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExprProto)
}

inline void ResolvedExprProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.type_annotation_map_){nullptr}
  };
}

ResolvedExprProto::~ResolvedExprProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExprProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedExprProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.type_;
  if (this != internal_default_instance()) delete _impl_.type_annotation_map_;
}

void ResolvedExprProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedExprProto::InternalSwap(ResolvedExprProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExprProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[4]);
}

// ===================================================================

class ResolvedLiteralProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedLiteralProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedLiteralProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ValueWithTypeProto& value(const ResolvedLiteralProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_explicit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_float_literal_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preserve_in_literal_remover(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedLiteralProto::_Internal::parent(const ResolvedLiteralProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ValueWithTypeProto&
ResolvedLiteralProto::_Internal::value(const ResolvedLiteralProto* msg) {
  return *msg->_impl_.value_;
}
void ResolvedLiteralProto::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedLiteralProto::ResolvedLiteralProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedLiteralProto)
}
ResolvedLiteralProto::ResolvedLiteralProto(const ResolvedLiteralProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedLiteralProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.float_literal_id_){}
    , decltype(_impl_.has_explicit_type_){}
    , decltype(_impl_.preserve_in_literal_remover_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::zetasql::ValueWithTypeProto(*from._impl_.value_);
  }
  ::memcpy(&_impl_.float_literal_id_, &from._impl_.float_literal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preserve_in_literal_remover_) -
    reinterpret_cast<char*>(&_impl_.float_literal_id_)) + sizeof(_impl_.preserve_in_literal_remover_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedLiteralProto)
}

inline void ResolvedLiteralProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.float_literal_id_){int64_t{0}}
    , decltype(_impl_.has_explicit_type_){false}
    , decltype(_impl_.preserve_in_literal_remover_){false}
  };
}

ResolvedLiteralProto::~ResolvedLiteralProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedLiteralProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedLiteralProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void ResolvedLiteralProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedLiteralProto::InternalSwap(ResolvedLiteralProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedLiteralProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[5]);
}

// ===================================================================

class ResolvedParameterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedParameterProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedParameterProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_untyped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedParameterProto::_Internal::parent(const ResolvedParameterProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedParameterProto::ResolvedParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedParameterProto)
}
ResolvedParameterProto::ResolvedParameterProto(const ResolvedParameterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedParameterProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.position_){}
    , decltype(_impl_.is_untyped_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  ::memcpy(&_impl_.position_, &from._impl_.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_untyped_) -
    reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.is_untyped_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedParameterProto)
}

inline void ResolvedParameterProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.position_){int64_t{0}}
    , decltype(_impl_.is_untyped_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedParameterProto::~ResolvedParameterProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedParameterProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedParameterProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedParameterProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedParameterProto::InternalSwap(ResolvedParameterProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedParameterProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[6]);
}

// ===================================================================

class ResolvedExpressionColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExpressionColumnProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedExpressionColumnProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedExpressionColumnProto::_Internal::parent(const ResolvedExpressionColumnProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedExpressionColumnProto::ResolvedExpressionColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExpressionColumnProto)
}
ResolvedExpressionColumnProto::ResolvedExpressionColumnProto(const ResolvedExpressionColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedExpressionColumnProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExpressionColumnProto)
}

inline void ResolvedExpressionColumnProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedExpressionColumnProto::~ResolvedExpressionColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExpressionColumnProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedExpressionColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedExpressionColumnProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedExpressionColumnProto::InternalSwap(ResolvedExpressionColumnProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExpressionColumnProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[7]);
}

// ===================================================================

class ResolvedColumnRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnRefProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedColumnRefProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedColumnRefProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_correlated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedColumnRefProto::_Internal::parent(const ResolvedColumnRefProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedColumnRefProto::_Internal::column(const ResolvedColumnRefProto* msg) {
  return *msg->_impl_.column_;
}
void ResolvedColumnRefProto::clear_column() {
  if (_impl_.column_ != nullptr) _impl_.column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedColumnRefProto::ResolvedColumnRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnRefProto)
}
ResolvedColumnRefProto::ResolvedColumnRefProto(const ResolvedColumnRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedColumnRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}
    , decltype(_impl_.is_correlated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_column()) {
    _this->_impl_.column_ = new ::zetasql::ResolvedColumnProto(*from._impl_.column_);
  }
  _this->_impl_.is_correlated_ = from._impl_.is_correlated_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnRefProto)
}

inline void ResolvedColumnRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}
    , decltype(_impl_.is_correlated_){false}
  };
}

ResolvedColumnRefProto::~ResolvedColumnRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedColumnRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.column_;
}

void ResolvedColumnRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedColumnRefProto::InternalSwap(ResolvedColumnRefProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[8]);
}

// ===================================================================

class ResolvedConstantProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedConstantProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedConstantProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ConstantRefProto& constant(const ResolvedConstantProto* msg);
  static void set_has_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedConstantProto::_Internal::parent(const ResolvedConstantProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ConstantRefProto&
ResolvedConstantProto::_Internal::constant(const ResolvedConstantProto* msg) {
  return *msg->_impl_.constant_;
}
void ResolvedConstantProto::clear_constant() {
  if (_impl_.constant_ != nullptr) _impl_.constant_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedConstantProto::ResolvedConstantProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedConstantProto)
}
ResolvedConstantProto::ResolvedConstantProto(const ResolvedConstantProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedConstantProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.constant_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_constant()) {
    _this->_impl_.constant_ = new ::zetasql::ConstantRefProto(*from._impl_.constant_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedConstantProto)
}

inline void ResolvedConstantProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.constant_){nullptr}
  };
}

ResolvedConstantProto::~ResolvedConstantProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedConstantProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedConstantProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.constant_;
}

void ResolvedConstantProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedConstantProto::InternalSwap(ResolvedConstantProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedConstantProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[9]);
}

// ===================================================================

class ResolvedSystemVariableProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSystemVariableProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedSystemVariableProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedSystemVariableProto::_Internal::parent(const ResolvedSystemVariableProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedSystemVariableProto::ResolvedSystemVariableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSystemVariableProto)
}
ResolvedSystemVariableProto::ResolvedSystemVariableProto(const ResolvedSystemVariableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSystemVariableProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSystemVariableProto)
}

inline void ResolvedSystemVariableProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedSystemVariableProto::~ResolvedSystemVariableProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSystemVariableProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSystemVariableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedSystemVariableProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSystemVariableProto::InternalSwap(ResolvedSystemVariableProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSystemVariableProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[10]);
}

// ===================================================================

class ResolvedInlineLambdaProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedInlineLambdaProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedInlineLambdaProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& body(const ResolvedInlineLambdaProto* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedInlineLambdaProto::_Internal::parent(const ResolvedInlineLambdaProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedInlineLambdaProto::_Internal::body(const ResolvedInlineLambdaProto* msg) {
  return *msg->_impl_.body_;
}
void ResolvedInlineLambdaProto::clear_argument_list() {
  _impl_.argument_list_.Clear();
}
ResolvedInlineLambdaProto::ResolvedInlineLambdaProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedInlineLambdaProto)
}
ResolvedInlineLambdaProto::ResolvedInlineLambdaProto(const ResolvedInlineLambdaProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedInlineLambdaProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_list_){from._impl_.argument_list_}
    , decltype(_impl_.parameter_list_){from._impl_.parameter_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.body_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.body_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedInlineLambdaProto)
}

inline void ResolvedInlineLambdaProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_list_){arena}
    , decltype(_impl_.parameter_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.body_){nullptr}
  };
}

ResolvedInlineLambdaProto::~ResolvedInlineLambdaProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedInlineLambdaProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedInlineLambdaProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_list_.~RepeatedPtrField();
  _impl_.parameter_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.body_;
}

void ResolvedInlineLambdaProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedInlineLambdaProto::InternalSwap(ResolvedInlineLambdaProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedInlineLambdaProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[11]);
}

// ===================================================================

class ResolvedFilterFieldArgProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFilterFieldArgProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedFilterFieldArgProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedFilterFieldArgProto::_Internal::parent(const ResolvedFilterFieldArgProto* msg) {
  return *msg->_impl_.parent_;
}
void ResolvedFilterFieldArgProto::clear_field_descriptor_path() {
  _impl_.field_descriptor_path_.Clear();
}
ResolvedFilterFieldArgProto::ResolvedFilterFieldArgProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFilterFieldArgProto)
}
ResolvedFilterFieldArgProto::ResolvedFilterFieldArgProto(const ResolvedFilterFieldArgProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFilterFieldArgProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_descriptor_path_){from._impl_.field_descriptor_path_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.include_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  _this->_impl_.include_ = from._impl_.include_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFilterFieldArgProto)
}

inline void ResolvedFilterFieldArgProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_descriptor_path_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.include_){false}
  };
}

ResolvedFilterFieldArgProto::~ResolvedFilterFieldArgProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFilterFieldArgProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFilterFieldArgProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_descriptor_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedFilterFieldArgProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFilterFieldArgProto::InternalSwap(ResolvedFilterFieldArgProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFilterFieldArgProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[12]);
}

// ===================================================================

class ResolvedFilterFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFilterFieldProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedFilterFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedFilterFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reset_cleared_required_fields(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedFilterFieldProto::_Internal::parent(const ResolvedFilterFieldProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFilterFieldProto::_Internal::expr(const ResolvedFilterFieldProto* msg) {
  return *msg->_impl_.expr_;
}
ResolvedFilterFieldProto::ResolvedFilterFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFilterFieldProto)
}
ResolvedFilterFieldProto::ResolvedFilterFieldProto(const ResolvedFilterFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFilterFieldProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_field_arg_list_){from._impl_.filter_field_arg_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.reset_cleared_required_fields_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  _this->_impl_.reset_cleared_required_fields_ = from._impl_.reset_cleared_required_fields_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFilterFieldProto)
}

inline void ResolvedFilterFieldProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_field_arg_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.reset_cleared_required_fields_){false}
  };
}

ResolvedFilterFieldProto::~ResolvedFilterFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFilterFieldProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFilterFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filter_field_arg_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedFilterFieldProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFilterFieldProto::InternalSwap(ResolvedFilterFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFilterFieldProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[13]);
}

// ===================================================================

class AnyResolvedFunctionCallBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedFunctionCallProto& resolved_function_call_node(const AnyResolvedFunctionCallBaseProto* msg);
  static const ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto& resolved_non_scalar_function_call_base_node(const AnyResolvedFunctionCallBaseProto* msg);
};

const ::zetasql::ResolvedFunctionCallProto&
AnyResolvedFunctionCallBaseProto::_Internal::resolved_function_call_node(const AnyResolvedFunctionCallBaseProto* msg) {
  return *msg->_impl_.node_.resolved_function_call_node_;
}
const ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto&
AnyResolvedFunctionCallBaseProto::_Internal::resolved_non_scalar_function_call_base_node(const AnyResolvedFunctionCallBaseProto* msg) {
  return *msg->_impl_.node_.resolved_non_scalar_function_call_base_node_;
}
void AnyResolvedFunctionCallBaseProto::set_allocated_resolved_function_call_node(::zetasql::ResolvedFunctionCallProto* resolved_function_call_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_function_call_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_function_call_node);
    if (message_arena != submessage_arena) {
      resolved_function_call_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_function_call_node, submessage_arena);
    }
    set_has_resolved_function_call_node();
    _impl_.node_.resolved_function_call_node_ = resolved_function_call_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedFunctionCallBaseProto.resolved_function_call_node)
}
void AnyResolvedFunctionCallBaseProto::set_allocated_resolved_non_scalar_function_call_base_node(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* resolved_non_scalar_function_call_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_non_scalar_function_call_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_non_scalar_function_call_base_node);
    if (message_arena != submessage_arena) {
      resolved_non_scalar_function_call_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_non_scalar_function_call_base_node, submessage_arena);
    }
    set_has_resolved_non_scalar_function_call_base_node();
    _impl_.node_.resolved_non_scalar_function_call_base_node_ = resolved_non_scalar_function_call_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedFunctionCallBaseProto.resolved_non_scalar_function_call_base_node)
}
AnyResolvedFunctionCallBaseProto::AnyResolvedFunctionCallBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedFunctionCallBaseProto)
}
AnyResolvedFunctionCallBaseProto::AnyResolvedFunctionCallBaseProto(const AnyResolvedFunctionCallBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedFunctionCallBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedFunctionCallNode: {
      _this->_internal_mutable_resolved_function_call_node()->::zetasql::ResolvedFunctionCallProto::MergeFrom(
          from._internal_resolved_function_call_node());
      break;
    }
    case kResolvedNonScalarFunctionCallBaseNode: {
      _this->_internal_mutable_resolved_non_scalar_function_call_base_node()->::zetasql::AnyResolvedNonScalarFunctionCallBaseProto::MergeFrom(
          from._internal_resolved_non_scalar_function_call_base_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedFunctionCallBaseProto)
}

inline void AnyResolvedFunctionCallBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedFunctionCallBaseProto::~AnyResolvedFunctionCallBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedFunctionCallBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedFunctionCallBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedFunctionCallBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedFunctionCallBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedFunctionCallBaseProto)
  switch (node_case()) {
    case kResolvedFunctionCallNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_function_call_node_;
      }
      break;
    }
    case kResolvedNonScalarFunctionCallBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_non_scalar_function_call_base_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedFunctionCallBaseProto::InternalSwap(AnyResolvedFunctionCallBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedFunctionCallBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[14]);
}

// ===================================================================

class ResolvedFunctionCallBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFunctionCallBaseProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedFunctionCallBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::FunctionRefProto& function(const ResolvedFunctionCallBaseProto* msg);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedFunctionCallBaseProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedFunctionCallBaseProto::_Internal::parent(const ResolvedFunctionCallBaseProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::FunctionRefProto&
ResolvedFunctionCallBaseProto::_Internal::function(const ResolvedFunctionCallBaseProto* msg) {
  return *msg->_impl_.function_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedFunctionCallBaseProto::_Internal::signature(const ResolvedFunctionCallBaseProto* msg) {
  return *msg->_impl_.signature_;
}
void ResolvedFunctionCallBaseProto::clear_function() {
  if (_impl_.function_ != nullptr) _impl_.function_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ResolvedFunctionCallBaseProto::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ResolvedFunctionCallBaseProto::clear_collation_list() {
  _impl_.collation_list_.Clear();
}
ResolvedFunctionCallBaseProto::ResolvedFunctionCallBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFunctionCallBaseProto)
}
ResolvedFunctionCallBaseProto::ResolvedFunctionCallBaseProto(const ResolvedFunctionCallBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFunctionCallBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_list_){from._impl_.argument_list_}
    , decltype(_impl_.generic_argument_list_){from._impl_.generic_argument_list_}
    , decltype(_impl_.hint_list_){from._impl_.hint_list_}
    , decltype(_impl_.collation_list_){from._impl_.collation_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.function_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.error_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_function()) {
    _this->_impl_.function_ = new ::zetasql::FunctionRefProto(*from._impl_.function_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::zetasql::FunctionSignatureProto(*from._impl_.signature_);
  }
  _this->_impl_.error_mode_ = from._impl_.error_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFunctionCallBaseProto)
}

inline void ResolvedFunctionCallBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_list_){arena}
    , decltype(_impl_.generic_argument_list_){arena}
    , decltype(_impl_.hint_list_){arena}
    , decltype(_impl_.collation_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.function_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.error_mode_){0}
  };
}

ResolvedFunctionCallBaseProto::~ResolvedFunctionCallBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFunctionCallBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFunctionCallBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_list_.~RepeatedPtrField();
  _impl_.generic_argument_list_.~RepeatedPtrField();
  _impl_.hint_list_.~RepeatedPtrField();
  _impl_.collation_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.function_;
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void ResolvedFunctionCallBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFunctionCallBaseProto::InternalSwap(ResolvedFunctionCallBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFunctionCallBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[15]);
}

// ===================================================================

class ResolvedFunctionCallProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFunctionCallProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedFunctionCallBaseProto& parent(const ResolvedFunctionCallProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedFunctionCallInfoProto& function_call_info(const ResolvedFunctionCallProto* msg);
  static void set_has_function_call_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedFunctionCallBaseProto&
ResolvedFunctionCallProto::_Internal::parent(const ResolvedFunctionCallProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedFunctionCallInfoProto&
ResolvedFunctionCallProto::_Internal::function_call_info(const ResolvedFunctionCallProto* msg) {
  return *msg->_impl_.function_call_info_;
}
void ResolvedFunctionCallProto::clear_function_call_info() {
  if (_impl_.function_call_info_ != nullptr) _impl_.function_call_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedFunctionCallProto::ResolvedFunctionCallProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFunctionCallProto)
}
ResolvedFunctionCallProto::ResolvedFunctionCallProto(const ResolvedFunctionCallProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFunctionCallProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.function_call_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedFunctionCallBaseProto(*from._impl_.parent_);
  }
  if (from._internal_has_function_call_info()) {
    _this->_impl_.function_call_info_ = new ::zetasql::ResolvedFunctionCallInfoProto(*from._impl_.function_call_info_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFunctionCallProto)
}

inline void ResolvedFunctionCallProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.function_call_info_){nullptr}
  };
}

ResolvedFunctionCallProto::~ResolvedFunctionCallProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFunctionCallProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFunctionCallProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.function_call_info_;
}

void ResolvedFunctionCallProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFunctionCallProto::InternalSwap(ResolvedFunctionCallProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFunctionCallProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[16]);
}

// ===================================================================

class AnyResolvedNonScalarFunctionCallBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedAggregateFunctionCallProto& resolved_aggregate_function_call_node(const AnyResolvedNonScalarFunctionCallBaseProto* msg);
  static const ::zetasql::ResolvedAnalyticFunctionCallProto& resolved_analytic_function_call_node(const AnyResolvedNonScalarFunctionCallBaseProto* msg);
};

const ::zetasql::ResolvedAggregateFunctionCallProto&
AnyResolvedNonScalarFunctionCallBaseProto::_Internal::resolved_aggregate_function_call_node(const AnyResolvedNonScalarFunctionCallBaseProto* msg) {
  return *msg->_impl_.node_.resolved_aggregate_function_call_node_;
}
const ::zetasql::ResolvedAnalyticFunctionCallProto&
AnyResolvedNonScalarFunctionCallBaseProto::_Internal::resolved_analytic_function_call_node(const AnyResolvedNonScalarFunctionCallBaseProto* msg) {
  return *msg->_impl_.node_.resolved_analytic_function_call_node_;
}
void AnyResolvedNonScalarFunctionCallBaseProto::set_allocated_resolved_aggregate_function_call_node(::zetasql::ResolvedAggregateFunctionCallProto* resolved_aggregate_function_call_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aggregate_function_call_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_aggregate_function_call_node);
    if (message_arena != submessage_arena) {
      resolved_aggregate_function_call_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aggregate_function_call_node, submessage_arena);
    }
    set_has_resolved_aggregate_function_call_node();
    _impl_.node_.resolved_aggregate_function_call_node_ = resolved_aggregate_function_call_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_aggregate_function_call_node)
}
void AnyResolvedNonScalarFunctionCallBaseProto::set_allocated_resolved_analytic_function_call_node(::zetasql::ResolvedAnalyticFunctionCallProto* resolved_analytic_function_call_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_analytic_function_call_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_analytic_function_call_node);
    if (message_arena != submessage_arena) {
      resolved_analytic_function_call_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_analytic_function_call_node, submessage_arena);
    }
    set_has_resolved_analytic_function_call_node();
    _impl_.node_.resolved_analytic_function_call_node_ = resolved_analytic_function_call_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_analytic_function_call_node)
}
AnyResolvedNonScalarFunctionCallBaseProto::AnyResolvedNonScalarFunctionCallBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedNonScalarFunctionCallBaseProto)
}
AnyResolvedNonScalarFunctionCallBaseProto::AnyResolvedNonScalarFunctionCallBaseProto(const AnyResolvedNonScalarFunctionCallBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedNonScalarFunctionCallBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedAggregateFunctionCallNode: {
      _this->_internal_mutable_resolved_aggregate_function_call_node()->::zetasql::ResolvedAggregateFunctionCallProto::MergeFrom(
          from._internal_resolved_aggregate_function_call_node());
      break;
    }
    case kResolvedAnalyticFunctionCallNode: {
      _this->_internal_mutable_resolved_analytic_function_call_node()->::zetasql::ResolvedAnalyticFunctionCallProto::MergeFrom(
          from._internal_resolved_analytic_function_call_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedNonScalarFunctionCallBaseProto)
}

inline void AnyResolvedNonScalarFunctionCallBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedNonScalarFunctionCallBaseProto::~AnyResolvedNonScalarFunctionCallBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedNonScalarFunctionCallBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedNonScalarFunctionCallBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedNonScalarFunctionCallBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedNonScalarFunctionCallBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedNonScalarFunctionCallBaseProto)
  switch (node_case()) {
    case kResolvedAggregateFunctionCallNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_aggregate_function_call_node_;
      }
      break;
    }
    case kResolvedAnalyticFunctionCallNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_analytic_function_call_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedNonScalarFunctionCallBaseProto::InternalSwap(AnyResolvedNonScalarFunctionCallBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedNonScalarFunctionCallBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[17]);
}

// ===================================================================

class ResolvedNonScalarFunctionCallBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedNonScalarFunctionCallBaseProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedFunctionCallBaseProto& parent(const ResolvedNonScalarFunctionCallBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distinct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_null_handling_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedScanProto& with_group_rows_subquery(const ResolvedNonScalarFunctionCallBaseProto* msg);
  static void set_has_with_group_rows_subquery(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedFunctionCallBaseProto&
ResolvedNonScalarFunctionCallBaseProto::_Internal::parent(const ResolvedNonScalarFunctionCallBaseProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedNonScalarFunctionCallBaseProto::_Internal::with_group_rows_subquery(const ResolvedNonScalarFunctionCallBaseProto* msg) {
  return *msg->_impl_.with_group_rows_subquery_;
}
ResolvedNonScalarFunctionCallBaseProto::ResolvedNonScalarFunctionCallBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedNonScalarFunctionCallBaseProto)
}
ResolvedNonScalarFunctionCallBaseProto::ResolvedNonScalarFunctionCallBaseProto(const ResolvedNonScalarFunctionCallBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedNonScalarFunctionCallBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_group_rows_parameter_list_){from._impl_.with_group_rows_parameter_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.with_group_rows_subquery_){nullptr}
    , decltype(_impl_.distinct_){}
    , decltype(_impl_.null_handling_modifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedFunctionCallBaseProto(*from._impl_.parent_);
  }
  if (from._internal_has_with_group_rows_subquery()) {
    _this->_impl_.with_group_rows_subquery_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.with_group_rows_subquery_);
  }
  ::memcpy(&_impl_.distinct_, &from._impl_.distinct_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.null_handling_modifier_) -
    reinterpret_cast<char*>(&_impl_.distinct_)) + sizeof(_impl_.null_handling_modifier_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedNonScalarFunctionCallBaseProto)
}

inline void ResolvedNonScalarFunctionCallBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_group_rows_parameter_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.with_group_rows_subquery_){nullptr}
    , decltype(_impl_.distinct_){false}
    , decltype(_impl_.null_handling_modifier_){0}
  };
}

ResolvedNonScalarFunctionCallBaseProto::~ResolvedNonScalarFunctionCallBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedNonScalarFunctionCallBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedNonScalarFunctionCallBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.with_group_rows_parameter_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.with_group_rows_subquery_;
}

void ResolvedNonScalarFunctionCallBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedNonScalarFunctionCallBaseProto::InternalSwap(ResolvedNonScalarFunctionCallBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedNonScalarFunctionCallBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[18]);
}

// ===================================================================

class ResolvedAggregateFunctionCallProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAggregateFunctionCallProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& parent(const ResolvedAggregateFunctionCallProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedAggregateHavingModifierProto& having_modifier(const ResolvedAggregateFunctionCallProto* msg);
  static void set_has_having_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& limit(const ResolvedAggregateFunctionCallProto* msg);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedFunctionCallInfoProto& function_call_info(const ResolvedAggregateFunctionCallProto* msg);
  static void set_has_function_call_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedNonScalarFunctionCallBaseProto&
ResolvedAggregateFunctionCallProto::_Internal::parent(const ResolvedAggregateFunctionCallProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedAggregateHavingModifierProto&
ResolvedAggregateFunctionCallProto::_Internal::having_modifier(const ResolvedAggregateFunctionCallProto* msg) {
  return *msg->_impl_.having_modifier_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAggregateFunctionCallProto::_Internal::limit(const ResolvedAggregateFunctionCallProto* msg) {
  return *msg->_impl_.limit_;
}
const ::zetasql::ResolvedFunctionCallInfoProto&
ResolvedAggregateFunctionCallProto::_Internal::function_call_info(const ResolvedAggregateFunctionCallProto* msg) {
  return *msg->_impl_.function_call_info_;
}
void ResolvedAggregateFunctionCallProto::clear_function_call_info() {
  if (_impl_.function_call_info_ != nullptr) _impl_.function_call_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ResolvedAggregateFunctionCallProto::ResolvedAggregateFunctionCallProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAggregateFunctionCallProto)
}
ResolvedAggregateFunctionCallProto::ResolvedAggregateFunctionCallProto(const ResolvedAggregateFunctionCallProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAggregateFunctionCallProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_by_item_list_){from._impl_.order_by_item_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.limit_){nullptr}
    , decltype(_impl_.having_modifier_){nullptr}
    , decltype(_impl_.function_call_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedNonScalarFunctionCallBaseProto(*from._impl_.parent_);
  }
  if (from._internal_has_limit()) {
    _this->_impl_.limit_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.limit_);
  }
  if (from._internal_has_having_modifier()) {
    _this->_impl_.having_modifier_ = new ::zetasql::ResolvedAggregateHavingModifierProto(*from._impl_.having_modifier_);
  }
  if (from._internal_has_function_call_info()) {
    _this->_impl_.function_call_info_ = new ::zetasql::ResolvedFunctionCallInfoProto(*from._impl_.function_call_info_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAggregateFunctionCallProto)
}

inline void ResolvedAggregateFunctionCallProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_by_item_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.limit_){nullptr}
    , decltype(_impl_.having_modifier_){nullptr}
    , decltype(_impl_.function_call_info_){nullptr}
  };
}

ResolvedAggregateFunctionCallProto::~ResolvedAggregateFunctionCallProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAggregateFunctionCallProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAggregateFunctionCallProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_by_item_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.limit_;
  if (this != internal_default_instance()) delete _impl_.having_modifier_;
  if (this != internal_default_instance()) delete _impl_.function_call_info_;
}

void ResolvedAggregateFunctionCallProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAggregateFunctionCallProto::InternalSwap(ResolvedAggregateFunctionCallProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAggregateFunctionCallProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[19]);
}

// ===================================================================

class ResolvedAnalyticFunctionCallProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnalyticFunctionCallProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& parent(const ResolvedAnalyticFunctionCallProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedWindowFrameProto& window_frame(const ResolvedAnalyticFunctionCallProto* msg);
  static void set_has_window_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedNonScalarFunctionCallBaseProto&
ResolvedAnalyticFunctionCallProto::_Internal::parent(const ResolvedAnalyticFunctionCallProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedWindowFrameProto&
ResolvedAnalyticFunctionCallProto::_Internal::window_frame(const ResolvedAnalyticFunctionCallProto* msg) {
  return *msg->_impl_.window_frame_;
}
ResolvedAnalyticFunctionCallProto::ResolvedAnalyticFunctionCallProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnalyticFunctionCallProto)
}
ResolvedAnalyticFunctionCallProto::ResolvedAnalyticFunctionCallProto(const ResolvedAnalyticFunctionCallProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAnalyticFunctionCallProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.window_frame_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedNonScalarFunctionCallBaseProto(*from._impl_.parent_);
  }
  if (from._internal_has_window_frame()) {
    _this->_impl_.window_frame_ = new ::zetasql::ResolvedWindowFrameProto(*from._impl_.window_frame_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnalyticFunctionCallProto)
}

inline void ResolvedAnalyticFunctionCallProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.window_frame_){nullptr}
  };
}

ResolvedAnalyticFunctionCallProto::~ResolvedAnalyticFunctionCallProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnalyticFunctionCallProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAnalyticFunctionCallProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.window_frame_;
}

void ResolvedAnalyticFunctionCallProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAnalyticFunctionCallProto::InternalSwap(ResolvedAnalyticFunctionCallProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnalyticFunctionCallProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[20]);
}

// ===================================================================

class ResolvedExtendedCastElementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExtendedCastElementProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedExtendedCastElementProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& from_type(const ResolvedExtendedCastElementProto* msg);
  static void set_has_from_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TypeProto& to_type(const ResolvedExtendedCastElementProto* msg);
  static void set_has_to_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::FunctionRefProto& function(const ResolvedExtendedCastElementProto* msg);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedExtendedCastElementProto::_Internal::parent(const ResolvedExtendedCastElementProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TypeProto&
ResolvedExtendedCastElementProto::_Internal::from_type(const ResolvedExtendedCastElementProto* msg) {
  return *msg->_impl_.from_type_;
}
const ::zetasql::TypeProto&
ResolvedExtendedCastElementProto::_Internal::to_type(const ResolvedExtendedCastElementProto* msg) {
  return *msg->_impl_.to_type_;
}
const ::zetasql::FunctionRefProto&
ResolvedExtendedCastElementProto::_Internal::function(const ResolvedExtendedCastElementProto* msg) {
  return *msg->_impl_.function_;
}
void ResolvedExtendedCastElementProto::clear_from_type() {
  if (_impl_.from_type_ != nullptr) _impl_.from_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ResolvedExtendedCastElementProto::clear_to_type() {
  if (_impl_.to_type_ != nullptr) _impl_.to_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ResolvedExtendedCastElementProto::clear_function() {
  if (_impl_.function_ != nullptr) _impl_.function_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ResolvedExtendedCastElementProto::ResolvedExtendedCastElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExtendedCastElementProto)
}
ResolvedExtendedCastElementProto::ResolvedExtendedCastElementProto(const ResolvedExtendedCastElementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedExtendedCastElementProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.from_type_){nullptr}
    , decltype(_impl_.to_type_){nullptr}
    , decltype(_impl_.function_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_from_type()) {
    _this->_impl_.from_type_ = new ::zetasql::TypeProto(*from._impl_.from_type_);
  }
  if (from._internal_has_to_type()) {
    _this->_impl_.to_type_ = new ::zetasql::TypeProto(*from._impl_.to_type_);
  }
  if (from._internal_has_function()) {
    _this->_impl_.function_ = new ::zetasql::FunctionRefProto(*from._impl_.function_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExtendedCastElementProto)
}

inline void ResolvedExtendedCastElementProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.from_type_){nullptr}
    , decltype(_impl_.to_type_){nullptr}
    , decltype(_impl_.function_){nullptr}
  };
}

ResolvedExtendedCastElementProto::~ResolvedExtendedCastElementProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExtendedCastElementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedExtendedCastElementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.from_type_;
  if (this != internal_default_instance()) delete _impl_.to_type_;
  if (this != internal_default_instance()) delete _impl_.function_;
}

void ResolvedExtendedCastElementProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedExtendedCastElementProto::InternalSwap(ResolvedExtendedCastElementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExtendedCastElementProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[21]);
}

// ===================================================================

class ResolvedExtendedCastProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExtendedCastProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedExtendedCastProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedExtendedCastProto::_Internal::parent(const ResolvedExtendedCastProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedExtendedCastProto::ResolvedExtendedCastProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExtendedCastProto)
}
ResolvedExtendedCastProto::ResolvedExtendedCastProto(const ResolvedExtendedCastProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedExtendedCastProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_list_){from._impl_.element_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExtendedCastProto)
}

inline void ResolvedExtendedCastProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedExtendedCastProto::~ResolvedExtendedCastProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExtendedCastProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedExtendedCastProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedExtendedCastProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedExtendedCastProto::InternalSwap(ResolvedExtendedCastProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExtendedCastProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[22]);
}

// ===================================================================

class ResolvedCastProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCastProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedCastProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedCastProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_return_null_on_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::ResolvedExtendedCastProto& extended_cast(const ResolvedCastProto* msg);
  static void set_has_extended_cast(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& format(const ResolvedCastProto* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedExprProto& time_zone(const ResolvedCastProto* msg);
  static void set_has_time_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::TypeParametersProto& type_parameters(const ResolvedCastProto* msg);
  static void set_has_type_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedCastProto::_Internal::parent(const ResolvedCastProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCastProto::_Internal::expr(const ResolvedCastProto* msg) {
  return *msg->_impl_.expr_;
}
const ::zetasql::ResolvedExtendedCastProto&
ResolvedCastProto::_Internal::extended_cast(const ResolvedCastProto* msg) {
  return *msg->_impl_.extended_cast_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCastProto::_Internal::format(const ResolvedCastProto* msg) {
  return *msg->_impl_.format_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCastProto::_Internal::time_zone(const ResolvedCastProto* msg) {
  return *msg->_impl_.time_zone_;
}
const ::zetasql::TypeParametersProto&
ResolvedCastProto::_Internal::type_parameters(const ResolvedCastProto* msg) {
  return *msg->_impl_.type_parameters_;
}
void ResolvedCastProto::clear_type_parameters() {
  if (_impl_.type_parameters_ != nullptr) _impl_.type_parameters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
ResolvedCastProto::ResolvedCastProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCastProto)
}
ResolvedCastProto::ResolvedCastProto(const ResolvedCastProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCastProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.extended_cast_){nullptr}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.time_zone_){nullptr}
    , decltype(_impl_.type_parameters_){nullptr}
    , decltype(_impl_.return_null_on_error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  if (from._internal_has_extended_cast()) {
    _this->_impl_.extended_cast_ = new ::zetasql::ResolvedExtendedCastProto(*from._impl_.extended_cast_);
  }
  if (from._internal_has_format()) {
    _this->_impl_.format_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.format_);
  }
  if (from._internal_has_time_zone()) {
    _this->_impl_.time_zone_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.time_zone_);
  }
  if (from._internal_has_type_parameters()) {
    _this->_impl_.type_parameters_ = new ::zetasql::TypeParametersProto(*from._impl_.type_parameters_);
  }
  _this->_impl_.return_null_on_error_ = from._impl_.return_null_on_error_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCastProto)
}

inline void ResolvedCastProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.extended_cast_){nullptr}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.time_zone_){nullptr}
    , decltype(_impl_.type_parameters_){nullptr}
    , decltype(_impl_.return_null_on_error_){false}
  };
}

ResolvedCastProto::~ResolvedCastProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCastProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCastProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
  if (this != internal_default_instance()) delete _impl_.extended_cast_;
  if (this != internal_default_instance()) delete _impl_.format_;
  if (this != internal_default_instance()) delete _impl_.time_zone_;
  if (this != internal_default_instance()) delete _impl_.type_parameters_;
}

void ResolvedCastProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCastProto::InternalSwap(ResolvedCastProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCastProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[23]);
}

// ===================================================================

class ResolvedMakeStructProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMakeStructProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedMakeStructProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedMakeStructProto::_Internal::parent(const ResolvedMakeStructProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedMakeStructProto::ResolvedMakeStructProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMakeStructProto)
}
ResolvedMakeStructProto::ResolvedMakeStructProto(const ResolvedMakeStructProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedMakeStructProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_list_){from._impl_.field_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMakeStructProto)
}

inline void ResolvedMakeStructProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedMakeStructProto::~ResolvedMakeStructProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMakeStructProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedMakeStructProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedMakeStructProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedMakeStructProto::InternalSwap(ResolvedMakeStructProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMakeStructProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[24]);
}

// ===================================================================

class ResolvedMakeProtoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMakeProtoProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedMakeProtoProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedMakeProtoProto::_Internal::parent(const ResolvedMakeProtoProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedMakeProtoProto::ResolvedMakeProtoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMakeProtoProto)
}
ResolvedMakeProtoProto::ResolvedMakeProtoProto(const ResolvedMakeProtoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedMakeProtoProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_list_){from._impl_.field_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMakeProtoProto)
}

inline void ResolvedMakeProtoProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedMakeProtoProto::~ResolvedMakeProtoProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMakeProtoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedMakeProtoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedMakeProtoProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedMakeProtoProto::InternalSwap(ResolvedMakeProtoProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMakeProtoProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[25]);
}

// ===================================================================

class ResolvedMakeProtoFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMakeProtoFieldProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedMakeProtoFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::FieldDescriptorRefProto& field_descriptor(const ResolvedMakeProtoFieldProto* msg);
  static void set_has_field_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedMakeProtoFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedMakeProtoFieldProto::_Internal::parent(const ResolvedMakeProtoFieldProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::FieldDescriptorRefProto&
ResolvedMakeProtoFieldProto::_Internal::field_descriptor(const ResolvedMakeProtoFieldProto* msg) {
  return *msg->_impl_.field_descriptor_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedMakeProtoFieldProto::_Internal::expr(const ResolvedMakeProtoFieldProto* msg) {
  return *msg->_impl_.expr_;
}
void ResolvedMakeProtoFieldProto::clear_field_descriptor() {
  if (_impl_.field_descriptor_ != nullptr) _impl_.field_descriptor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedMakeProtoFieldProto::ResolvedMakeProtoFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMakeProtoFieldProto)
}
ResolvedMakeProtoFieldProto::ResolvedMakeProtoFieldProto(const ResolvedMakeProtoFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedMakeProtoFieldProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.field_descriptor_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.format_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_field_descriptor()) {
    _this->_impl_.field_descriptor_ = new ::zetasql::FieldDescriptorRefProto(*from._impl_.field_descriptor_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  _this->_impl_.format_ = from._impl_.format_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMakeProtoFieldProto)
}

inline void ResolvedMakeProtoFieldProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.field_descriptor_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.format_){0}
  };
}

ResolvedMakeProtoFieldProto::~ResolvedMakeProtoFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMakeProtoFieldProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedMakeProtoFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.field_descriptor_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedMakeProtoFieldProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedMakeProtoFieldProto::InternalSwap(ResolvedMakeProtoFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMakeProtoFieldProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[26]);
}

// ===================================================================

class ResolvedGetStructFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGetStructFieldProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedGetStructFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedGetStructFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedGetStructFieldProto::_Internal::parent(const ResolvedGetStructFieldProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedGetStructFieldProto::_Internal::expr(const ResolvedGetStructFieldProto* msg) {
  return *msg->_impl_.expr_;
}
ResolvedGetStructFieldProto::ResolvedGetStructFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGetStructFieldProto)
}
ResolvedGetStructFieldProto::ResolvedGetStructFieldProto(const ResolvedGetStructFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedGetStructFieldProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.field_idx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  _this->_impl_.field_idx_ = from._impl_.field_idx_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGetStructFieldProto)
}

inline void ResolvedGetStructFieldProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.field_idx_){int64_t{0}}
  };
}

ResolvedGetStructFieldProto::~ResolvedGetStructFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGetStructFieldProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedGetStructFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedGetStructFieldProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedGetStructFieldProto::InternalSwap(ResolvedGetStructFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGetStructFieldProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[27]);
}

// ===================================================================

class ResolvedGetProtoFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGetProtoFieldProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedGetProtoFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedGetProtoFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::FieldDescriptorRefProto& field_descriptor(const ResolvedGetProtoFieldProto* msg);
  static void set_has_field_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ValueWithTypeProto& default_value(const ResolvedGetProtoFieldProto* msg);
  static void set_has_default_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_get_has_bit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_return_default_value_when_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedGetProtoFieldProto::_Internal::parent(const ResolvedGetProtoFieldProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedGetProtoFieldProto::_Internal::expr(const ResolvedGetProtoFieldProto* msg) {
  return *msg->_impl_.expr_;
}
const ::zetasql::FieldDescriptorRefProto&
ResolvedGetProtoFieldProto::_Internal::field_descriptor(const ResolvedGetProtoFieldProto* msg) {
  return *msg->_impl_.field_descriptor_;
}
const ::zetasql::ValueWithTypeProto&
ResolvedGetProtoFieldProto::_Internal::default_value(const ResolvedGetProtoFieldProto* msg) {
  return *msg->_impl_.default_value_;
}
void ResolvedGetProtoFieldProto::clear_field_descriptor() {
  if (_impl_.field_descriptor_ != nullptr) _impl_.field_descriptor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ResolvedGetProtoFieldProto::clear_default_value() {
  if (_impl_.default_value_ != nullptr) _impl_.default_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ResolvedGetProtoFieldProto::ResolvedGetProtoFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGetProtoFieldProto)
}
ResolvedGetProtoFieldProto::ResolvedGetProtoFieldProto(const ResolvedGetProtoFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedGetProtoFieldProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.field_descriptor_){nullptr}
    , decltype(_impl_.default_value_){nullptr}
    , decltype(_impl_.format_){}
    , decltype(_impl_.get_has_bit_){}
    , decltype(_impl_.return_default_value_when_unset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  if (from._internal_has_field_descriptor()) {
    _this->_impl_.field_descriptor_ = new ::zetasql::FieldDescriptorRefProto(*from._impl_.field_descriptor_);
  }
  if (from._internal_has_default_value()) {
    _this->_impl_.default_value_ = new ::zetasql::ValueWithTypeProto(*from._impl_.default_value_);
  }
  ::memcpy(&_impl_.format_, &from._impl_.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.return_default_value_when_unset_) -
    reinterpret_cast<char*>(&_impl_.format_)) + sizeof(_impl_.return_default_value_when_unset_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGetProtoFieldProto)
}

inline void ResolvedGetProtoFieldProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.field_descriptor_){nullptr}
    , decltype(_impl_.default_value_){nullptr}
    , decltype(_impl_.format_){0}
    , decltype(_impl_.get_has_bit_){false}
    , decltype(_impl_.return_default_value_when_unset_){false}
  };
}

ResolvedGetProtoFieldProto::~ResolvedGetProtoFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGetProtoFieldProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedGetProtoFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
  if (this != internal_default_instance()) delete _impl_.field_descriptor_;
  if (this != internal_default_instance()) delete _impl_.default_value_;
}

void ResolvedGetProtoFieldProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedGetProtoFieldProto::InternalSwap(ResolvedGetProtoFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGetProtoFieldProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[28]);
}

// ===================================================================

class ResolvedGetJsonFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGetJsonFieldProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedGetJsonFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedGetJsonFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedGetJsonFieldProto::_Internal::parent(const ResolvedGetJsonFieldProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedGetJsonFieldProto::_Internal::expr(const ResolvedGetJsonFieldProto* msg) {
  return *msg->_impl_.expr_;
}
ResolvedGetJsonFieldProto::ResolvedGetJsonFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGetJsonFieldProto)
}
ResolvedGetJsonFieldProto::ResolvedGetJsonFieldProto(const ResolvedGetJsonFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedGetJsonFieldProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_field_name()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGetJsonFieldProto)
}

inline void ResolvedGetJsonFieldProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
  };
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedGetJsonFieldProto::~ResolvedGetJsonFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGetJsonFieldProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedGetJsonFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedGetJsonFieldProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedGetJsonFieldProto::InternalSwap(ResolvedGetJsonFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGetJsonFieldProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[29]);
}

// ===================================================================

class ResolvedFlattenProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFlattenProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedFlattenProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedFlattenProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedFlattenProto::_Internal::parent(const ResolvedFlattenProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFlattenProto::_Internal::expr(const ResolvedFlattenProto* msg) {
  return *msg->_impl_.expr_;
}
ResolvedFlattenProto::ResolvedFlattenProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFlattenProto)
}
ResolvedFlattenProto::ResolvedFlattenProto(const ResolvedFlattenProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFlattenProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.get_field_list_){from._impl_.get_field_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFlattenProto)
}

inline void ResolvedFlattenProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.get_field_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
  };
}

ResolvedFlattenProto::~ResolvedFlattenProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFlattenProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFlattenProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.get_field_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedFlattenProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFlattenProto::InternalSwap(ResolvedFlattenProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFlattenProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[30]);
}

// ===================================================================

class ResolvedFlattenedArgProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFlattenedArgProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedFlattenedArgProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedFlattenedArgProto::_Internal::parent(const ResolvedFlattenedArgProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedFlattenedArgProto::ResolvedFlattenedArgProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFlattenedArgProto)
}
ResolvedFlattenedArgProto::ResolvedFlattenedArgProto(const ResolvedFlattenedArgProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFlattenedArgProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFlattenedArgProto)
}

inline void ResolvedFlattenedArgProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedFlattenedArgProto::~ResolvedFlattenedArgProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFlattenedArgProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFlattenedArgProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedFlattenedArgProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFlattenedArgProto::InternalSwap(ResolvedFlattenedArgProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFlattenedArgProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[31]);
}

// ===================================================================

class ResolvedReplaceFieldItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedReplaceFieldItemProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedReplaceFieldItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedReplaceFieldItemProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedReplaceFieldItemProto::_Internal::parent(const ResolvedReplaceFieldItemProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedReplaceFieldItemProto::_Internal::expr(const ResolvedReplaceFieldItemProto* msg) {
  return *msg->_impl_.expr_;
}
void ResolvedReplaceFieldItemProto::clear_proto_field_path() {
  _impl_.proto_field_path_.Clear();
}
ResolvedReplaceFieldItemProto::ResolvedReplaceFieldItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedReplaceFieldItemProto)
}
ResolvedReplaceFieldItemProto::ResolvedReplaceFieldItemProto(const ResolvedReplaceFieldItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedReplaceFieldItemProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.struct_index_path_){from._impl_.struct_index_path_}
    , decltype(_impl_.proto_field_path_){from._impl_.proto_field_path_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedReplaceFieldItemProto)
}

inline void ResolvedReplaceFieldItemProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.struct_index_path_){arena}
    , decltype(_impl_.proto_field_path_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
  };
}

ResolvedReplaceFieldItemProto::~ResolvedReplaceFieldItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedReplaceFieldItemProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedReplaceFieldItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.struct_index_path_.~RepeatedField();
  _impl_.proto_field_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedReplaceFieldItemProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedReplaceFieldItemProto::InternalSwap(ResolvedReplaceFieldItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedReplaceFieldItemProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[32]);
}

// ===================================================================

class ResolvedReplaceFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedReplaceFieldProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedReplaceFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedReplaceFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedReplaceFieldProto::_Internal::parent(const ResolvedReplaceFieldProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedReplaceFieldProto::_Internal::expr(const ResolvedReplaceFieldProto* msg) {
  return *msg->_impl_.expr_;
}
ResolvedReplaceFieldProto::ResolvedReplaceFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedReplaceFieldProto)
}
ResolvedReplaceFieldProto::ResolvedReplaceFieldProto(const ResolvedReplaceFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedReplaceFieldProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.replace_field_item_list_){from._impl_.replace_field_item_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedReplaceFieldProto)
}

inline void ResolvedReplaceFieldProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.replace_field_item_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
  };
}

ResolvedReplaceFieldProto::~ResolvedReplaceFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedReplaceFieldProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedReplaceFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replace_field_item_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedReplaceFieldProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedReplaceFieldProto::InternalSwap(ResolvedReplaceFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedReplaceFieldProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[33]);
}

// ===================================================================

class ResolvedSubqueryExprProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSubqueryExprProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedSubqueryExprProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subquery_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedExprProto& in_expr(const ResolvedSubqueryExprProto* msg);
  static void set_has_in_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedCollationProto& in_collation(const ResolvedSubqueryExprProto* msg);
  static void set_has_in_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedScanProto& subquery(const ResolvedSubqueryExprProto* msg);
  static void set_has_subquery(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedSubqueryExprProto::_Internal::parent(const ResolvedSubqueryExprProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedSubqueryExprProto::_Internal::in_expr(const ResolvedSubqueryExprProto* msg) {
  return *msg->_impl_.in_expr_;
}
const ::zetasql::ResolvedCollationProto&
ResolvedSubqueryExprProto::_Internal::in_collation(const ResolvedSubqueryExprProto* msg) {
  return *msg->_impl_.in_collation_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedSubqueryExprProto::_Internal::subquery(const ResolvedSubqueryExprProto* msg) {
  return *msg->_impl_.subquery_;
}
void ResolvedSubqueryExprProto::clear_in_collation() {
  if (_impl_.in_collation_ != nullptr) _impl_.in_collation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ResolvedSubqueryExprProto::ResolvedSubqueryExprProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSubqueryExprProto)
}
ResolvedSubqueryExprProto::ResolvedSubqueryExprProto(const ResolvedSubqueryExprProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSubqueryExprProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parameter_list_){from._impl_.parameter_list_}
    , decltype(_impl_.hint_list_){from._impl_.hint_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.in_expr_){nullptr}
    , decltype(_impl_.subquery_){nullptr}
    , decltype(_impl_.in_collation_){nullptr}
    , decltype(_impl_.subquery_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_in_expr()) {
    _this->_impl_.in_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.in_expr_);
  }
  if (from._internal_has_subquery()) {
    _this->_impl_.subquery_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.subquery_);
  }
  if (from._internal_has_in_collation()) {
    _this->_impl_.in_collation_ = new ::zetasql::ResolvedCollationProto(*from._impl_.in_collation_);
  }
  _this->_impl_.subquery_type_ = from._impl_.subquery_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSubqueryExprProto)
}

inline void ResolvedSubqueryExprProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parameter_list_){arena}
    , decltype(_impl_.hint_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.in_expr_){nullptr}
    , decltype(_impl_.subquery_){nullptr}
    , decltype(_impl_.in_collation_){nullptr}
    , decltype(_impl_.subquery_type_){0}
  };
}

ResolvedSubqueryExprProto::~ResolvedSubqueryExprProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSubqueryExprProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSubqueryExprProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameter_list_.~RepeatedPtrField();
  _impl_.hint_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.in_expr_;
  if (this != internal_default_instance()) delete _impl_.subquery_;
  if (this != internal_default_instance()) delete _impl_.in_collation_;
}

void ResolvedSubqueryExprProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSubqueryExprProto::InternalSwap(ResolvedSubqueryExprProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSubqueryExprProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[34]);
}

// ===================================================================

class ResolvedWithExprProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWithExprProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedWithExprProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedWithExprProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedWithExprProto::_Internal::parent(const ResolvedWithExprProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedWithExprProto::_Internal::expr(const ResolvedWithExprProto* msg) {
  return *msg->_impl_.expr_;
}
ResolvedWithExprProto::ResolvedWithExprProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWithExprProto)
}
ResolvedWithExprProto::ResolvedWithExprProto(const ResolvedWithExprProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedWithExprProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assignment_list_){from._impl_.assignment_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWithExprProto)
}

inline void ResolvedWithExprProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assignment_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
  };
}

ResolvedWithExprProto::~ResolvedWithExprProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWithExprProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedWithExprProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assignment_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedWithExprProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedWithExprProto::InternalSwap(ResolvedWithExprProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWithExprProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[35]);
}

// ===================================================================

class AnyResolvedScanProto::_Internal {
 public:
  static const ::zetasql::ResolvedSingleRowScanProto& resolved_single_row_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedTableScanProto& resolved_table_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedJoinScanProto& resolved_join_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedArrayScanProto& resolved_array_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedFilterScanProto& resolved_filter_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedSetOperationScanProto& resolved_set_operation_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedOrderByScanProto& resolved_order_by_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedLimitOffsetScanProto& resolved_limit_offset_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedWithRefScanProto& resolved_with_ref_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedAnalyticScanProto& resolved_analytic_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedSampleScanProto& resolved_sample_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedProjectScanProto& resolved_project_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedWithScanProto& resolved_with_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedTVFScanProto& resolved_tvfscan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedRelationArgumentScanProto& resolved_relation_argument_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::AnyResolvedAggregateScanBaseProto& resolved_aggregate_scan_base_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedRecursiveRefScanProto& resolved_recursive_ref_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedRecursiveScanProto& resolved_recursive_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedPivotScanProto& resolved_pivot_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedUnpivotScanProto& resolved_unpivot_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedGroupRowsScanProto& resolved_group_rows_scan_node(const AnyResolvedScanProto* msg);
};

const ::zetasql::ResolvedSingleRowScanProto&
AnyResolvedScanProto::_Internal::resolved_single_row_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_single_row_scan_node_;
}
const ::zetasql::ResolvedTableScanProto&
AnyResolvedScanProto::_Internal::resolved_table_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_table_scan_node_;
}
const ::zetasql::ResolvedJoinScanProto&
AnyResolvedScanProto::_Internal::resolved_join_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_join_scan_node_;
}
const ::zetasql::ResolvedArrayScanProto&
AnyResolvedScanProto::_Internal::resolved_array_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_array_scan_node_;
}
const ::zetasql::ResolvedFilterScanProto&
AnyResolvedScanProto::_Internal::resolved_filter_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_filter_scan_node_;
}
const ::zetasql::ResolvedSetOperationScanProto&
AnyResolvedScanProto::_Internal::resolved_set_operation_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_set_operation_scan_node_;
}
const ::zetasql::ResolvedOrderByScanProto&
AnyResolvedScanProto::_Internal::resolved_order_by_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_order_by_scan_node_;
}
const ::zetasql::ResolvedLimitOffsetScanProto&
AnyResolvedScanProto::_Internal::resolved_limit_offset_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_limit_offset_scan_node_;
}
const ::zetasql::ResolvedWithRefScanProto&
AnyResolvedScanProto::_Internal::resolved_with_ref_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_with_ref_scan_node_;
}
const ::zetasql::ResolvedAnalyticScanProto&
AnyResolvedScanProto::_Internal::resolved_analytic_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_analytic_scan_node_;
}
const ::zetasql::ResolvedSampleScanProto&
AnyResolvedScanProto::_Internal::resolved_sample_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_sample_scan_node_;
}
const ::zetasql::ResolvedProjectScanProto&
AnyResolvedScanProto::_Internal::resolved_project_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_project_scan_node_;
}
const ::zetasql::ResolvedWithScanProto&
AnyResolvedScanProto::_Internal::resolved_with_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_with_scan_node_;
}
const ::zetasql::ResolvedTVFScanProto&
AnyResolvedScanProto::_Internal::resolved_tvfscan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_tvfscan_node_;
}
const ::zetasql::ResolvedRelationArgumentScanProto&
AnyResolvedScanProto::_Internal::resolved_relation_argument_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_relation_argument_scan_node_;
}
const ::zetasql::AnyResolvedAggregateScanBaseProto&
AnyResolvedScanProto::_Internal::resolved_aggregate_scan_base_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_aggregate_scan_base_node_;
}
const ::zetasql::ResolvedRecursiveRefScanProto&
AnyResolvedScanProto::_Internal::resolved_recursive_ref_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_recursive_ref_scan_node_;
}
const ::zetasql::ResolvedRecursiveScanProto&
AnyResolvedScanProto::_Internal::resolved_recursive_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_recursive_scan_node_;
}
const ::zetasql::ResolvedPivotScanProto&
AnyResolvedScanProto::_Internal::resolved_pivot_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_pivot_scan_node_;
}
const ::zetasql::ResolvedUnpivotScanProto&
AnyResolvedScanProto::_Internal::resolved_unpivot_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_unpivot_scan_node_;
}
const ::zetasql::ResolvedGroupRowsScanProto&
AnyResolvedScanProto::_Internal::resolved_group_rows_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->_impl_.node_.resolved_group_rows_scan_node_;
}
void AnyResolvedScanProto::set_allocated_resolved_single_row_scan_node(::zetasql::ResolvedSingleRowScanProto* resolved_single_row_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_single_row_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_single_row_scan_node);
    if (message_arena != submessage_arena) {
      resolved_single_row_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_single_row_scan_node, submessage_arena);
    }
    set_has_resolved_single_row_scan_node();
    _impl_.node_.resolved_single_row_scan_node_ = resolved_single_row_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_single_row_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_table_scan_node(::zetasql::ResolvedTableScanProto* resolved_table_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_table_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_table_scan_node);
    if (message_arena != submessage_arena) {
      resolved_table_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_table_scan_node, submessage_arena);
    }
    set_has_resolved_table_scan_node();
    _impl_.node_.resolved_table_scan_node_ = resolved_table_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_table_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_join_scan_node(::zetasql::ResolvedJoinScanProto* resolved_join_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_join_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_join_scan_node);
    if (message_arena != submessage_arena) {
      resolved_join_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_join_scan_node, submessage_arena);
    }
    set_has_resolved_join_scan_node();
    _impl_.node_.resolved_join_scan_node_ = resolved_join_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_join_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_array_scan_node(::zetasql::ResolvedArrayScanProto* resolved_array_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_array_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_array_scan_node);
    if (message_arena != submessage_arena) {
      resolved_array_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_array_scan_node, submessage_arena);
    }
    set_has_resolved_array_scan_node();
    _impl_.node_.resolved_array_scan_node_ = resolved_array_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_array_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_filter_scan_node(::zetasql::ResolvedFilterScanProto* resolved_filter_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_filter_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_filter_scan_node);
    if (message_arena != submessage_arena) {
      resolved_filter_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_filter_scan_node, submessage_arena);
    }
    set_has_resolved_filter_scan_node();
    _impl_.node_.resolved_filter_scan_node_ = resolved_filter_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_filter_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_set_operation_scan_node(::zetasql::ResolvedSetOperationScanProto* resolved_set_operation_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_operation_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_set_operation_scan_node);
    if (message_arena != submessage_arena) {
      resolved_set_operation_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_operation_scan_node, submessage_arena);
    }
    set_has_resolved_set_operation_scan_node();
    _impl_.node_.resolved_set_operation_scan_node_ = resolved_set_operation_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_set_operation_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_order_by_scan_node(::zetasql::ResolvedOrderByScanProto* resolved_order_by_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_order_by_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_order_by_scan_node);
    if (message_arena != submessage_arena) {
      resolved_order_by_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_order_by_scan_node, submessage_arena);
    }
    set_has_resolved_order_by_scan_node();
    _impl_.node_.resolved_order_by_scan_node_ = resolved_order_by_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_order_by_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_limit_offset_scan_node(::zetasql::ResolvedLimitOffsetScanProto* resolved_limit_offset_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_limit_offset_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_limit_offset_scan_node);
    if (message_arena != submessage_arena) {
      resolved_limit_offset_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_limit_offset_scan_node, submessage_arena);
    }
    set_has_resolved_limit_offset_scan_node();
    _impl_.node_.resolved_limit_offset_scan_node_ = resolved_limit_offset_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_limit_offset_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_with_ref_scan_node(::zetasql::ResolvedWithRefScanProto* resolved_with_ref_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_with_ref_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_with_ref_scan_node);
    if (message_arena != submessage_arena) {
      resolved_with_ref_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_with_ref_scan_node, submessage_arena);
    }
    set_has_resolved_with_ref_scan_node();
    _impl_.node_.resolved_with_ref_scan_node_ = resolved_with_ref_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_with_ref_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_analytic_scan_node(::zetasql::ResolvedAnalyticScanProto* resolved_analytic_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_analytic_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_analytic_scan_node);
    if (message_arena != submessage_arena) {
      resolved_analytic_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_analytic_scan_node, submessage_arena);
    }
    set_has_resolved_analytic_scan_node();
    _impl_.node_.resolved_analytic_scan_node_ = resolved_analytic_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_analytic_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_sample_scan_node(::zetasql::ResolvedSampleScanProto* resolved_sample_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_sample_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_sample_scan_node);
    if (message_arena != submessage_arena) {
      resolved_sample_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_sample_scan_node, submessage_arena);
    }
    set_has_resolved_sample_scan_node();
    _impl_.node_.resolved_sample_scan_node_ = resolved_sample_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_sample_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_project_scan_node(::zetasql::ResolvedProjectScanProto* resolved_project_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_project_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_project_scan_node);
    if (message_arena != submessage_arena) {
      resolved_project_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_project_scan_node, submessage_arena);
    }
    set_has_resolved_project_scan_node();
    _impl_.node_.resolved_project_scan_node_ = resolved_project_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_project_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_with_scan_node(::zetasql::ResolvedWithScanProto* resolved_with_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_with_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_with_scan_node);
    if (message_arena != submessage_arena) {
      resolved_with_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_with_scan_node, submessage_arena);
    }
    set_has_resolved_with_scan_node();
    _impl_.node_.resolved_with_scan_node_ = resolved_with_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_with_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_tvfscan_node(::zetasql::ResolvedTVFScanProto* resolved_tvfscan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_tvfscan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_tvfscan_node);
    if (message_arena != submessage_arena) {
      resolved_tvfscan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_tvfscan_node, submessage_arena);
    }
    set_has_resolved_tvfscan_node();
    _impl_.node_.resolved_tvfscan_node_ = resolved_tvfscan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_tvfscan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_relation_argument_scan_node(::zetasql::ResolvedRelationArgumentScanProto* resolved_relation_argument_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_relation_argument_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_relation_argument_scan_node);
    if (message_arena != submessage_arena) {
      resolved_relation_argument_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_relation_argument_scan_node, submessage_arena);
    }
    set_has_resolved_relation_argument_scan_node();
    _impl_.node_.resolved_relation_argument_scan_node_ = resolved_relation_argument_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_relation_argument_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_aggregate_scan_base_node(::zetasql::AnyResolvedAggregateScanBaseProto* resolved_aggregate_scan_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aggregate_scan_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_aggregate_scan_base_node);
    if (message_arena != submessage_arena) {
      resolved_aggregate_scan_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aggregate_scan_base_node, submessage_arena);
    }
    set_has_resolved_aggregate_scan_base_node();
    _impl_.node_.resolved_aggregate_scan_base_node_ = resolved_aggregate_scan_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_aggregate_scan_base_node)
}
void AnyResolvedScanProto::set_allocated_resolved_recursive_ref_scan_node(::zetasql::ResolvedRecursiveRefScanProto* resolved_recursive_ref_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_recursive_ref_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_recursive_ref_scan_node);
    if (message_arena != submessage_arena) {
      resolved_recursive_ref_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_recursive_ref_scan_node, submessage_arena);
    }
    set_has_resolved_recursive_ref_scan_node();
    _impl_.node_.resolved_recursive_ref_scan_node_ = resolved_recursive_ref_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_recursive_ref_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_recursive_scan_node(::zetasql::ResolvedRecursiveScanProto* resolved_recursive_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_recursive_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_recursive_scan_node);
    if (message_arena != submessage_arena) {
      resolved_recursive_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_recursive_scan_node, submessage_arena);
    }
    set_has_resolved_recursive_scan_node();
    _impl_.node_.resolved_recursive_scan_node_ = resolved_recursive_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_recursive_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_pivot_scan_node(::zetasql::ResolvedPivotScanProto* resolved_pivot_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_pivot_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_pivot_scan_node);
    if (message_arena != submessage_arena) {
      resolved_pivot_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_pivot_scan_node, submessage_arena);
    }
    set_has_resolved_pivot_scan_node();
    _impl_.node_.resolved_pivot_scan_node_ = resolved_pivot_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_pivot_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_unpivot_scan_node(::zetasql::ResolvedUnpivotScanProto* resolved_unpivot_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_unpivot_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_unpivot_scan_node);
    if (message_arena != submessage_arena) {
      resolved_unpivot_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_unpivot_scan_node, submessage_arena);
    }
    set_has_resolved_unpivot_scan_node();
    _impl_.node_.resolved_unpivot_scan_node_ = resolved_unpivot_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_unpivot_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_group_rows_scan_node(::zetasql::ResolvedGroupRowsScanProto* resolved_group_rows_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_group_rows_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_group_rows_scan_node);
    if (message_arena != submessage_arena) {
      resolved_group_rows_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_group_rows_scan_node, submessage_arena);
    }
    set_has_resolved_group_rows_scan_node();
    _impl_.node_.resolved_group_rows_scan_node_ = resolved_group_rows_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_group_rows_scan_node)
}
AnyResolvedScanProto::AnyResolvedScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedScanProto)
}
AnyResolvedScanProto::AnyResolvedScanProto(const AnyResolvedScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedSingleRowScanNode: {
      _this->_internal_mutable_resolved_single_row_scan_node()->::zetasql::ResolvedSingleRowScanProto::MergeFrom(
          from._internal_resolved_single_row_scan_node());
      break;
    }
    case kResolvedTableScanNode: {
      _this->_internal_mutable_resolved_table_scan_node()->::zetasql::ResolvedTableScanProto::MergeFrom(
          from._internal_resolved_table_scan_node());
      break;
    }
    case kResolvedJoinScanNode: {
      _this->_internal_mutable_resolved_join_scan_node()->::zetasql::ResolvedJoinScanProto::MergeFrom(
          from._internal_resolved_join_scan_node());
      break;
    }
    case kResolvedArrayScanNode: {
      _this->_internal_mutable_resolved_array_scan_node()->::zetasql::ResolvedArrayScanProto::MergeFrom(
          from._internal_resolved_array_scan_node());
      break;
    }
    case kResolvedFilterScanNode: {
      _this->_internal_mutable_resolved_filter_scan_node()->::zetasql::ResolvedFilterScanProto::MergeFrom(
          from._internal_resolved_filter_scan_node());
      break;
    }
    case kResolvedSetOperationScanNode: {
      _this->_internal_mutable_resolved_set_operation_scan_node()->::zetasql::ResolvedSetOperationScanProto::MergeFrom(
          from._internal_resolved_set_operation_scan_node());
      break;
    }
    case kResolvedOrderByScanNode: {
      _this->_internal_mutable_resolved_order_by_scan_node()->::zetasql::ResolvedOrderByScanProto::MergeFrom(
          from._internal_resolved_order_by_scan_node());
      break;
    }
    case kResolvedLimitOffsetScanNode: {
      _this->_internal_mutable_resolved_limit_offset_scan_node()->::zetasql::ResolvedLimitOffsetScanProto::MergeFrom(
          from._internal_resolved_limit_offset_scan_node());
      break;
    }
    case kResolvedWithRefScanNode: {
      _this->_internal_mutable_resolved_with_ref_scan_node()->::zetasql::ResolvedWithRefScanProto::MergeFrom(
          from._internal_resolved_with_ref_scan_node());
      break;
    }
    case kResolvedAnalyticScanNode: {
      _this->_internal_mutable_resolved_analytic_scan_node()->::zetasql::ResolvedAnalyticScanProto::MergeFrom(
          from._internal_resolved_analytic_scan_node());
      break;
    }
    case kResolvedSampleScanNode: {
      _this->_internal_mutable_resolved_sample_scan_node()->::zetasql::ResolvedSampleScanProto::MergeFrom(
          from._internal_resolved_sample_scan_node());
      break;
    }
    case kResolvedProjectScanNode: {
      _this->_internal_mutable_resolved_project_scan_node()->::zetasql::ResolvedProjectScanProto::MergeFrom(
          from._internal_resolved_project_scan_node());
      break;
    }
    case kResolvedWithScanNode: {
      _this->_internal_mutable_resolved_with_scan_node()->::zetasql::ResolvedWithScanProto::MergeFrom(
          from._internal_resolved_with_scan_node());
      break;
    }
    case kResolvedTvfscanNode: {
      _this->_internal_mutable_resolved_tvfscan_node()->::zetasql::ResolvedTVFScanProto::MergeFrom(
          from._internal_resolved_tvfscan_node());
      break;
    }
    case kResolvedRelationArgumentScanNode: {
      _this->_internal_mutable_resolved_relation_argument_scan_node()->::zetasql::ResolvedRelationArgumentScanProto::MergeFrom(
          from._internal_resolved_relation_argument_scan_node());
      break;
    }
    case kResolvedAggregateScanBaseNode: {
      _this->_internal_mutable_resolved_aggregate_scan_base_node()->::zetasql::AnyResolvedAggregateScanBaseProto::MergeFrom(
          from._internal_resolved_aggregate_scan_base_node());
      break;
    }
    case kResolvedRecursiveRefScanNode: {
      _this->_internal_mutable_resolved_recursive_ref_scan_node()->::zetasql::ResolvedRecursiveRefScanProto::MergeFrom(
          from._internal_resolved_recursive_ref_scan_node());
      break;
    }
    case kResolvedRecursiveScanNode: {
      _this->_internal_mutable_resolved_recursive_scan_node()->::zetasql::ResolvedRecursiveScanProto::MergeFrom(
          from._internal_resolved_recursive_scan_node());
      break;
    }
    case kResolvedPivotScanNode: {
      _this->_internal_mutable_resolved_pivot_scan_node()->::zetasql::ResolvedPivotScanProto::MergeFrom(
          from._internal_resolved_pivot_scan_node());
      break;
    }
    case kResolvedUnpivotScanNode: {
      _this->_internal_mutable_resolved_unpivot_scan_node()->::zetasql::ResolvedUnpivotScanProto::MergeFrom(
          from._internal_resolved_unpivot_scan_node());
      break;
    }
    case kResolvedGroupRowsScanNode: {
      _this->_internal_mutable_resolved_group_rows_scan_node()->::zetasql::ResolvedGroupRowsScanProto::MergeFrom(
          from._internal_resolved_group_rows_scan_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedScanProto)
}

inline void AnyResolvedScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedScanProto::~AnyResolvedScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedScanProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedScanProto)
  switch (node_case()) {
    case kResolvedSingleRowScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_single_row_scan_node_;
      }
      break;
    }
    case kResolvedTableScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_table_scan_node_;
      }
      break;
    }
    case kResolvedJoinScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_join_scan_node_;
      }
      break;
    }
    case kResolvedArrayScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_array_scan_node_;
      }
      break;
    }
    case kResolvedFilterScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_filter_scan_node_;
      }
      break;
    }
    case kResolvedSetOperationScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_set_operation_scan_node_;
      }
      break;
    }
    case kResolvedOrderByScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_order_by_scan_node_;
      }
      break;
    }
    case kResolvedLimitOffsetScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_limit_offset_scan_node_;
      }
      break;
    }
    case kResolvedWithRefScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_with_ref_scan_node_;
      }
      break;
    }
    case kResolvedAnalyticScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_analytic_scan_node_;
      }
      break;
    }
    case kResolvedSampleScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_sample_scan_node_;
      }
      break;
    }
    case kResolvedProjectScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_project_scan_node_;
      }
      break;
    }
    case kResolvedWithScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_with_scan_node_;
      }
      break;
    }
    case kResolvedTvfscanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_tvfscan_node_;
      }
      break;
    }
    case kResolvedRelationArgumentScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_relation_argument_scan_node_;
      }
      break;
    }
    case kResolvedAggregateScanBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_aggregate_scan_base_node_;
      }
      break;
    }
    case kResolvedRecursiveRefScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_recursive_ref_scan_node_;
      }
      break;
    }
    case kResolvedRecursiveScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_recursive_scan_node_;
      }
      break;
    }
    case kResolvedPivotScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_pivot_scan_node_;
      }
      break;
    }
    case kResolvedUnpivotScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_unpivot_scan_node_;
      }
      break;
    }
    case kResolvedGroupRowsScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_group_rows_scan_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedScanProto::InternalSwap(AnyResolvedScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[36]);
}

// ===================================================================

class ResolvedScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedNodeProto& parent(const ResolvedScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_ordered(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedNodeProto&
ResolvedScanProto::_Internal::parent(const ResolvedScanProto* msg) {
  return *msg->_impl_.parent_;
}
void ResolvedScanProto::clear_parent() {
  if (_impl_.parent_ != nullptr) _impl_.parent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ResolvedScanProto::clear_column_list() {
  _impl_.column_list_.Clear();
}
ResolvedScanProto::ResolvedScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedScanProto)
}
ResolvedScanProto::ResolvedScanProto(const ResolvedScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_list_){from._impl_.column_list_}
    , decltype(_impl_.hint_list_){from._impl_.hint_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_ordered_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedNodeProto(*from._impl_.parent_);
  }
  _this->_impl_.is_ordered_ = from._impl_.is_ordered_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedScanProto)
}

inline void ResolvedScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_list_){arena}
    , decltype(_impl_.hint_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_ordered_){false}
  };
}

ResolvedScanProto::~ResolvedScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_list_.~RepeatedPtrField();
  _impl_.hint_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedScanProto::InternalSwap(ResolvedScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[37]);
}

// ===================================================================

class ResolvedModelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedModelProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedModelProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ModelRefProto& model(const ResolvedModelProto* msg);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedModelProto::_Internal::parent(const ResolvedModelProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ModelRefProto&
ResolvedModelProto::_Internal::model(const ResolvedModelProto* msg) {
  return *msg->_impl_.model_;
}
void ResolvedModelProto::clear_model() {
  if (_impl_.model_ != nullptr) _impl_.model_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedModelProto::ResolvedModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedModelProto)
}
ResolvedModelProto::ResolvedModelProto(const ResolvedModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedModelProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.model_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::zetasql::ModelRefProto(*from._impl_.model_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedModelProto)
}

inline void ResolvedModelProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.model_){nullptr}
  };
}

ResolvedModelProto::~ResolvedModelProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedModelProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedModelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.model_;
}

void ResolvedModelProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedModelProto::InternalSwap(ResolvedModelProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedModelProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[38]);
}

// ===================================================================

class ResolvedConnectionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedConnectionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedConnectionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ConnectionRefProto& connection(const ResolvedConnectionProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedConnectionProto::_Internal::parent(const ResolvedConnectionProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ConnectionRefProto&
ResolvedConnectionProto::_Internal::connection(const ResolvedConnectionProto* msg) {
  return *msg->_impl_.connection_;
}
void ResolvedConnectionProto::clear_connection() {
  if (_impl_.connection_ != nullptr) _impl_.connection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedConnectionProto::ResolvedConnectionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedConnectionProto)
}
ResolvedConnectionProto::ResolvedConnectionProto(const ResolvedConnectionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedConnectionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.connection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::zetasql::ConnectionRefProto(*from._impl_.connection_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedConnectionProto)
}

inline void ResolvedConnectionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.connection_){nullptr}
  };
}

ResolvedConnectionProto::~ResolvedConnectionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedConnectionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedConnectionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.connection_;
}

void ResolvedConnectionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedConnectionProto::InternalSwap(ResolvedConnectionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedConnectionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[39]);
}

// ===================================================================

class ResolvedDescriptorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDescriptorProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedDescriptorProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedDescriptorProto::_Internal::parent(const ResolvedDescriptorProto* msg) {
  return *msg->_impl_.parent_;
}
void ResolvedDescriptorProto::clear_descriptor_column_list() {
  _impl_.descriptor_column_list_.Clear();
}
ResolvedDescriptorProto::ResolvedDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDescriptorProto)
}
ResolvedDescriptorProto::ResolvedDescriptorProto(const ResolvedDescriptorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDescriptorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.descriptor_column_list_){from._impl_.descriptor_column_list_}
    , decltype(_impl_.descriptor_column_name_list_){from._impl_.descriptor_column_name_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDescriptorProto)
}

inline void ResolvedDescriptorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.descriptor_column_list_){arena}
    , decltype(_impl_.descriptor_column_name_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedDescriptorProto::~ResolvedDescriptorProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDescriptorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDescriptorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.descriptor_column_list_.~RepeatedPtrField();
  _impl_.descriptor_column_name_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDescriptorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDescriptorProto::InternalSwap(ResolvedDescriptorProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDescriptorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[40]);
}

// ===================================================================

class ResolvedSingleRowScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSingleRowScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedSingleRowScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedSingleRowScanProto::_Internal::parent(const ResolvedSingleRowScanProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedSingleRowScanProto::ResolvedSingleRowScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSingleRowScanProto)
}
ResolvedSingleRowScanProto::ResolvedSingleRowScanProto(const ResolvedSingleRowScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSingleRowScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSingleRowScanProto)
}

inline void ResolvedSingleRowScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedSingleRowScanProto::~ResolvedSingleRowScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSingleRowScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSingleRowScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedSingleRowScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSingleRowScanProto::InternalSwap(ResolvedSingleRowScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSingleRowScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[41]);
}

// ===================================================================

class ResolvedTableScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedTableScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedTableScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TableRefProto& table(const ResolvedTableScanProto* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& for_system_time_expr(const ResolvedTableScanProto* msg);
  static void set_has_for_system_time_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedTableScanProto::_Internal::parent(const ResolvedTableScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TableRefProto&
ResolvedTableScanProto::_Internal::table(const ResolvedTableScanProto* msg) {
  return *msg->_impl_.table_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedTableScanProto::_Internal::for_system_time_expr(const ResolvedTableScanProto* msg) {
  return *msg->_impl_.for_system_time_expr_;
}
void ResolvedTableScanProto::clear_table() {
  if (_impl_.table_ != nullptr) _impl_.table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedTableScanProto::ResolvedTableScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedTableScanProto)
}
ResolvedTableScanProto::ResolvedTableScanProto(const ResolvedTableScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedTableScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_index_list_){from._impl_.column_index_list_}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.for_system_time_expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alias()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_table()) {
    _this->_impl_.table_ = new ::zetasql::TableRefProto(*from._impl_.table_);
  }
  if (from._internal_has_for_system_time_expr()) {
    _this->_impl_.for_system_time_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.for_system_time_expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedTableScanProto)
}

inline void ResolvedTableScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_index_list_){arena}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.for_system_time_expr_){nullptr}
  };
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedTableScanProto::~ResolvedTableScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedTableScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedTableScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_index_list_.~RepeatedField();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_;
  if (this != internal_default_instance()) delete _impl_.for_system_time_expr_;
}

void ResolvedTableScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedTableScanProto::InternalSwap(ResolvedTableScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedTableScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[42]);
}

// ===================================================================

class ResolvedJoinScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedJoinScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedJoinScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_join_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedScanProto& left_scan(const ResolvedJoinScanProto* msg);
  static void set_has_left_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& right_scan(const ResolvedJoinScanProto* msg);
  static void set_has_right_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& join_expr(const ResolvedJoinScanProto* msg);
  static void set_has_join_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedJoinScanProto::_Internal::parent(const ResolvedJoinScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedJoinScanProto::_Internal::left_scan(const ResolvedJoinScanProto* msg) {
  return *msg->_impl_.left_scan_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedJoinScanProto::_Internal::right_scan(const ResolvedJoinScanProto* msg) {
  return *msg->_impl_.right_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedJoinScanProto::_Internal::join_expr(const ResolvedJoinScanProto* msg) {
  return *msg->_impl_.join_expr_;
}
ResolvedJoinScanProto::ResolvedJoinScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedJoinScanProto)
}
ResolvedJoinScanProto::ResolvedJoinScanProto(const ResolvedJoinScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedJoinScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.left_scan_){nullptr}
    , decltype(_impl_.right_scan_){nullptr}
    , decltype(_impl_.join_expr_){nullptr}
    , decltype(_impl_.join_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_left_scan()) {
    _this->_impl_.left_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.left_scan_);
  }
  if (from._internal_has_right_scan()) {
    _this->_impl_.right_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.right_scan_);
  }
  if (from._internal_has_join_expr()) {
    _this->_impl_.join_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.join_expr_);
  }
  _this->_impl_.join_type_ = from._impl_.join_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedJoinScanProto)
}

inline void ResolvedJoinScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.left_scan_){nullptr}
    , decltype(_impl_.right_scan_){nullptr}
    , decltype(_impl_.join_expr_){nullptr}
    , decltype(_impl_.join_type_){0}
  };
}

ResolvedJoinScanProto::~ResolvedJoinScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedJoinScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedJoinScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.left_scan_;
  if (this != internal_default_instance()) delete _impl_.right_scan_;
  if (this != internal_default_instance()) delete _impl_.join_expr_;
}

void ResolvedJoinScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedJoinScanProto::InternalSwap(ResolvedJoinScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedJoinScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[43]);
}

// ===================================================================

class ResolvedArrayScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArrayScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedArrayScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedArrayScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& array_expr(const ResolvedArrayScanProto* msg);
  static void set_has_array_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnProto& element_column(const ResolvedArrayScanProto* msg);
  static void set_has_element_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& array_offset_column(const ResolvedArrayScanProto* msg);
  static void set_has_array_offset_column(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedExprProto& join_expr(const ResolvedArrayScanProto* msg);
  static void set_has_join_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_outer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedArrayScanProto::_Internal::parent(const ResolvedArrayScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedArrayScanProto::_Internal::input_scan(const ResolvedArrayScanProto* msg) {
  return *msg->_impl_.input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedArrayScanProto::_Internal::array_expr(const ResolvedArrayScanProto* msg) {
  return *msg->_impl_.array_expr_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedArrayScanProto::_Internal::element_column(const ResolvedArrayScanProto* msg) {
  return *msg->_impl_.element_column_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedArrayScanProto::_Internal::array_offset_column(const ResolvedArrayScanProto* msg) {
  return *msg->_impl_.array_offset_column_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedArrayScanProto::_Internal::join_expr(const ResolvedArrayScanProto* msg) {
  return *msg->_impl_.join_expr_;
}
void ResolvedArrayScanProto::clear_element_column() {
  if (_impl_.element_column_ != nullptr) _impl_.element_column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ResolvedArrayScanProto::ResolvedArrayScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArrayScanProto)
}
ResolvedArrayScanProto::ResolvedArrayScanProto(const ResolvedArrayScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedArrayScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.array_expr_){nullptr}
    , decltype(_impl_.element_column_){nullptr}
    , decltype(_impl_.array_offset_column_){nullptr}
    , decltype(_impl_.join_expr_){nullptr}
    , decltype(_impl_.is_outer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  if (from._internal_has_array_expr()) {
    _this->_impl_.array_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.array_expr_);
  }
  if (from._internal_has_element_column()) {
    _this->_impl_.element_column_ = new ::zetasql::ResolvedColumnProto(*from._impl_.element_column_);
  }
  if (from._internal_has_array_offset_column()) {
    _this->_impl_.array_offset_column_ = new ::zetasql::ResolvedColumnHolderProto(*from._impl_.array_offset_column_);
  }
  if (from._internal_has_join_expr()) {
    _this->_impl_.join_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.join_expr_);
  }
  _this->_impl_.is_outer_ = from._impl_.is_outer_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArrayScanProto)
}

inline void ResolvedArrayScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.array_expr_){nullptr}
    , decltype(_impl_.element_column_){nullptr}
    , decltype(_impl_.array_offset_column_){nullptr}
    , decltype(_impl_.join_expr_){nullptr}
    , decltype(_impl_.is_outer_){false}
  };
}

ResolvedArrayScanProto::~ResolvedArrayScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArrayScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedArrayScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
  if (this != internal_default_instance()) delete _impl_.array_expr_;
  if (this != internal_default_instance()) delete _impl_.element_column_;
  if (this != internal_default_instance()) delete _impl_.array_offset_column_;
  if (this != internal_default_instance()) delete _impl_.join_expr_;
}

void ResolvedArrayScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedArrayScanProto::InternalSwap(ResolvedArrayScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArrayScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[44]);
}

// ===================================================================

class ResolvedColumnHolderProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnHolderProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedColumnHolderProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedColumnHolderProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedColumnHolderProto::_Internal::parent(const ResolvedColumnHolderProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedColumnHolderProto::_Internal::column(const ResolvedColumnHolderProto* msg) {
  return *msg->_impl_.column_;
}
void ResolvedColumnHolderProto::clear_column() {
  if (_impl_.column_ != nullptr) _impl_.column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedColumnHolderProto::ResolvedColumnHolderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnHolderProto)
}
ResolvedColumnHolderProto::ResolvedColumnHolderProto(const ResolvedColumnHolderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedColumnHolderProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_column()) {
    _this->_impl_.column_ = new ::zetasql::ResolvedColumnProto(*from._impl_.column_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnHolderProto)
}

inline void ResolvedColumnHolderProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}
  };
}

ResolvedColumnHolderProto::~ResolvedColumnHolderProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnHolderProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedColumnHolderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.column_;
}

void ResolvedColumnHolderProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedColumnHolderProto::InternalSwap(ResolvedColumnHolderProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnHolderProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[45]);
}

// ===================================================================

class ResolvedFilterScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFilterScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedFilterScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedFilterScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& filter_expr(const ResolvedFilterScanProto* msg);
  static void set_has_filter_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedFilterScanProto::_Internal::parent(const ResolvedFilterScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedFilterScanProto::_Internal::input_scan(const ResolvedFilterScanProto* msg) {
  return *msg->_impl_.input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFilterScanProto::_Internal::filter_expr(const ResolvedFilterScanProto* msg) {
  return *msg->_impl_.filter_expr_;
}
ResolvedFilterScanProto::ResolvedFilterScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFilterScanProto)
}
ResolvedFilterScanProto::ResolvedFilterScanProto(const ResolvedFilterScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFilterScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.filter_expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  if (from._internal_has_filter_expr()) {
    _this->_impl_.filter_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.filter_expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFilterScanProto)
}

inline void ResolvedFilterScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.filter_expr_){nullptr}
  };
}

ResolvedFilterScanProto::~ResolvedFilterScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFilterScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFilterScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
  if (this != internal_default_instance()) delete _impl_.filter_expr_;
}

void ResolvedFilterScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFilterScanProto::InternalSwap(ResolvedFilterScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFilterScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[46]);
}

// ===================================================================

class ResolvedGroupingSetProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGroupingSetProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedGroupingSetProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedGroupingSetProto::_Internal::parent(const ResolvedGroupingSetProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedGroupingSetProto::ResolvedGroupingSetProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGroupingSetProto)
}
ResolvedGroupingSetProto::ResolvedGroupingSetProto(const ResolvedGroupingSetProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedGroupingSetProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_column_list_){from._impl_.group_by_column_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGroupingSetProto)
}

inline void ResolvedGroupingSetProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedGroupingSetProto::~ResolvedGroupingSetProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGroupingSetProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedGroupingSetProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_by_column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedGroupingSetProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedGroupingSetProto::InternalSwap(ResolvedGroupingSetProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGroupingSetProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[47]);
}

// ===================================================================

class AnyResolvedAggregateScanBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedAggregateScanProto& resolved_aggregate_scan_node(const AnyResolvedAggregateScanBaseProto* msg);
  static const ::zetasql::ResolvedAnonymizedAggregateScanProto& resolved_anonymized_aggregate_scan_node(const AnyResolvedAggregateScanBaseProto* msg);
};

const ::zetasql::ResolvedAggregateScanProto&
AnyResolvedAggregateScanBaseProto::_Internal::resolved_aggregate_scan_node(const AnyResolvedAggregateScanBaseProto* msg) {
  return *msg->_impl_.node_.resolved_aggregate_scan_node_;
}
const ::zetasql::ResolvedAnonymizedAggregateScanProto&
AnyResolvedAggregateScanBaseProto::_Internal::resolved_anonymized_aggregate_scan_node(const AnyResolvedAggregateScanBaseProto* msg) {
  return *msg->_impl_.node_.resolved_anonymized_aggregate_scan_node_;
}
void AnyResolvedAggregateScanBaseProto::set_allocated_resolved_aggregate_scan_node(::zetasql::ResolvedAggregateScanProto* resolved_aggregate_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aggregate_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_aggregate_scan_node);
    if (message_arena != submessage_arena) {
      resolved_aggregate_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aggregate_scan_node, submessage_arena);
    }
    set_has_resolved_aggregate_scan_node();
    _impl_.node_.resolved_aggregate_scan_node_ = resolved_aggregate_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAggregateScanBaseProto.resolved_aggregate_scan_node)
}
void AnyResolvedAggregateScanBaseProto::set_allocated_resolved_anonymized_aggregate_scan_node(::zetasql::ResolvedAnonymizedAggregateScanProto* resolved_anonymized_aggregate_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_anonymized_aggregate_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_anonymized_aggregate_scan_node);
    if (message_arena != submessage_arena) {
      resolved_anonymized_aggregate_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_anonymized_aggregate_scan_node, submessage_arena);
    }
    set_has_resolved_anonymized_aggregate_scan_node();
    _impl_.node_.resolved_anonymized_aggregate_scan_node_ = resolved_anonymized_aggregate_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAggregateScanBaseProto.resolved_anonymized_aggregate_scan_node)
}
AnyResolvedAggregateScanBaseProto::AnyResolvedAggregateScanBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedAggregateScanBaseProto)
}
AnyResolvedAggregateScanBaseProto::AnyResolvedAggregateScanBaseProto(const AnyResolvedAggregateScanBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedAggregateScanBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedAggregateScanNode: {
      _this->_internal_mutable_resolved_aggregate_scan_node()->::zetasql::ResolvedAggregateScanProto::MergeFrom(
          from._internal_resolved_aggregate_scan_node());
      break;
    }
    case kResolvedAnonymizedAggregateScanNode: {
      _this->_internal_mutable_resolved_anonymized_aggregate_scan_node()->::zetasql::ResolvedAnonymizedAggregateScanProto::MergeFrom(
          from._internal_resolved_anonymized_aggregate_scan_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedAggregateScanBaseProto)
}

inline void AnyResolvedAggregateScanBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedAggregateScanBaseProto::~AnyResolvedAggregateScanBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedAggregateScanBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedAggregateScanBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedAggregateScanBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedAggregateScanBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedAggregateScanBaseProto)
  switch (node_case()) {
    case kResolvedAggregateScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_aggregate_scan_node_;
      }
      break;
    }
    case kResolvedAnonymizedAggregateScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_anonymized_aggregate_scan_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedAggregateScanBaseProto::InternalSwap(AnyResolvedAggregateScanBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedAggregateScanBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[48]);
}

// ===================================================================

class ResolvedAggregateScanBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAggregateScanBaseProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedAggregateScanBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedAggregateScanBaseProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedAggregateScanBaseProto::_Internal::parent(const ResolvedAggregateScanBaseProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedAggregateScanBaseProto::_Internal::input_scan(const ResolvedAggregateScanBaseProto* msg) {
  return *msg->_impl_.input_scan_;
}
void ResolvedAggregateScanBaseProto::clear_collation_list() {
  _impl_.collation_list_.Clear();
}
ResolvedAggregateScanBaseProto::ResolvedAggregateScanBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAggregateScanBaseProto)
}
ResolvedAggregateScanBaseProto::ResolvedAggregateScanBaseProto(const ResolvedAggregateScanBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAggregateScanBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_list_){from._impl_.group_by_list_}
    , decltype(_impl_.aggregate_list_){from._impl_.aggregate_list_}
    , decltype(_impl_.collation_list_){from._impl_.collation_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAggregateScanBaseProto)
}

inline void ResolvedAggregateScanBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_list_){arena}
    , decltype(_impl_.aggregate_list_){arena}
    , decltype(_impl_.collation_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
  };
}

ResolvedAggregateScanBaseProto::~ResolvedAggregateScanBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAggregateScanBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAggregateScanBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_by_list_.~RepeatedPtrField();
  _impl_.aggregate_list_.~RepeatedPtrField();
  _impl_.collation_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
}

void ResolvedAggregateScanBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAggregateScanBaseProto::InternalSwap(ResolvedAggregateScanBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAggregateScanBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[49]);
}

// ===================================================================

class ResolvedAggregateScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAggregateScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAggregateScanBaseProto& parent(const ResolvedAggregateScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAggregateScanBaseProto&
ResolvedAggregateScanProto::_Internal::parent(const ResolvedAggregateScanProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAggregateScanProto::ResolvedAggregateScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAggregateScanProto)
}
ResolvedAggregateScanProto::ResolvedAggregateScanProto(const ResolvedAggregateScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAggregateScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grouping_set_list_){from._impl_.grouping_set_list_}
    , decltype(_impl_.rollup_column_list_){from._impl_.rollup_column_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAggregateScanBaseProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAggregateScanProto)
}

inline void ResolvedAggregateScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grouping_set_list_){arena}
    , decltype(_impl_.rollup_column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAggregateScanProto::~ResolvedAggregateScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAggregateScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAggregateScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grouping_set_list_.~RepeatedPtrField();
  _impl_.rollup_column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAggregateScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAggregateScanProto::InternalSwap(ResolvedAggregateScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAggregateScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[50]);
}

// ===================================================================

class ResolvedAnonymizedAggregateScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnonymizedAggregateScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAggregateScanBaseProto& parent(const ResolvedAnonymizedAggregateScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnRefProto& k_threshold_expr(const ResolvedAnonymizedAggregateScanProto* msg);
  static void set_has_k_threshold_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAggregateScanBaseProto&
ResolvedAnonymizedAggregateScanProto::_Internal::parent(const ResolvedAnonymizedAggregateScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnRefProto&
ResolvedAnonymizedAggregateScanProto::_Internal::k_threshold_expr(const ResolvedAnonymizedAggregateScanProto* msg) {
  return *msg->_impl_.k_threshold_expr_;
}
ResolvedAnonymizedAggregateScanProto::ResolvedAnonymizedAggregateScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnonymizedAggregateScanProto)
}
ResolvedAnonymizedAggregateScanProto::ResolvedAnonymizedAggregateScanProto(const ResolvedAnonymizedAggregateScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAnonymizedAggregateScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anonymization_option_list_){from._impl_.anonymization_option_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.k_threshold_expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAggregateScanBaseProto(*from._impl_.parent_);
  }
  if (from._internal_has_k_threshold_expr()) {
    _this->_impl_.k_threshold_expr_ = new ::zetasql::ResolvedColumnRefProto(*from._impl_.k_threshold_expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnonymizedAggregateScanProto)
}

inline void ResolvedAnonymizedAggregateScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anonymization_option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.k_threshold_expr_){nullptr}
  };
}

ResolvedAnonymizedAggregateScanProto::~ResolvedAnonymizedAggregateScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnonymizedAggregateScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAnonymizedAggregateScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.anonymization_option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.k_threshold_expr_;
}

void ResolvedAnonymizedAggregateScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAnonymizedAggregateScanProto::InternalSwap(ResolvedAnonymizedAggregateScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnonymizedAggregateScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[51]);
}

// ===================================================================

class ResolvedSetOperationItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetOperationItemProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedSetOperationItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& scan(const ResolvedSetOperationItemProto* msg);
  static void set_has_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedSetOperationItemProto::_Internal::parent(const ResolvedSetOperationItemProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedSetOperationItemProto::_Internal::scan(const ResolvedSetOperationItemProto* msg) {
  return *msg->_impl_.scan_;
}
void ResolvedSetOperationItemProto::clear_output_column_list() {
  _impl_.output_column_list_.Clear();
}
ResolvedSetOperationItemProto::ResolvedSetOperationItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetOperationItemProto)
}
ResolvedSetOperationItemProto::ResolvedSetOperationItemProto(const ResolvedSetOperationItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSetOperationItemProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_column_list_){from._impl_.output_column_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.scan_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_scan()) {
    _this->_impl_.scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.scan_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetOperationItemProto)
}

inline void ResolvedSetOperationItemProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.scan_){nullptr}
  };
}

ResolvedSetOperationItemProto::~ResolvedSetOperationItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetOperationItemProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSetOperationItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.scan_;
}

void ResolvedSetOperationItemProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSetOperationItemProto::InternalSwap(ResolvedSetOperationItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetOperationItemProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[52]);
}

// ===================================================================

class ResolvedSetOperationScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetOperationScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedSetOperationScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_op_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedSetOperationScanProto::_Internal::parent(const ResolvedSetOperationScanProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedSetOperationScanProto::ResolvedSetOperationScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetOperationScanProto)
}
ResolvedSetOperationScanProto::ResolvedSetOperationScanProto(const ResolvedSetOperationScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSetOperationScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_item_list_){from._impl_.input_item_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.op_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  _this->_impl_.op_type_ = from._impl_.op_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetOperationScanProto)
}

inline void ResolvedSetOperationScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_item_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.op_type_){0}
  };
}

ResolvedSetOperationScanProto::~ResolvedSetOperationScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetOperationScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSetOperationScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_item_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedSetOperationScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSetOperationScanProto::InternalSwap(ResolvedSetOperationScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetOperationScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[53]);
}

// ===================================================================

class ResolvedOrderByScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedOrderByScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedOrderByScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedOrderByScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedOrderByScanProto::_Internal::parent(const ResolvedOrderByScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedOrderByScanProto::_Internal::input_scan(const ResolvedOrderByScanProto* msg) {
  return *msg->_impl_.input_scan_;
}
ResolvedOrderByScanProto::ResolvedOrderByScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedOrderByScanProto)
}
ResolvedOrderByScanProto::ResolvedOrderByScanProto(const ResolvedOrderByScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedOrderByScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_by_item_list_){from._impl_.order_by_item_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedOrderByScanProto)
}

inline void ResolvedOrderByScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_by_item_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
  };
}

ResolvedOrderByScanProto::~ResolvedOrderByScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedOrderByScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedOrderByScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_by_item_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
}

void ResolvedOrderByScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedOrderByScanProto::InternalSwap(ResolvedOrderByScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedOrderByScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[54]);
}

// ===================================================================

class ResolvedLimitOffsetScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedLimitOffsetScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedLimitOffsetScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedLimitOffsetScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& limit(const ResolvedLimitOffsetScanProto* msg);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& offset(const ResolvedLimitOffsetScanProto* msg);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedLimitOffsetScanProto::_Internal::parent(const ResolvedLimitOffsetScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedLimitOffsetScanProto::_Internal::input_scan(const ResolvedLimitOffsetScanProto* msg) {
  return *msg->_impl_.input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedLimitOffsetScanProto::_Internal::limit(const ResolvedLimitOffsetScanProto* msg) {
  return *msg->_impl_.limit_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedLimitOffsetScanProto::_Internal::offset(const ResolvedLimitOffsetScanProto* msg) {
  return *msg->_impl_.offset_;
}
ResolvedLimitOffsetScanProto::ResolvedLimitOffsetScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedLimitOffsetScanProto)
}
ResolvedLimitOffsetScanProto::ResolvedLimitOffsetScanProto(const ResolvedLimitOffsetScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedLimitOffsetScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.limit_){nullptr}
    , decltype(_impl_.offset_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  if (from._internal_has_limit()) {
    _this->_impl_.limit_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.limit_);
  }
  if (from._internal_has_offset()) {
    _this->_impl_.offset_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.offset_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedLimitOffsetScanProto)
}

inline void ResolvedLimitOffsetScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.limit_){nullptr}
    , decltype(_impl_.offset_){nullptr}
  };
}

ResolvedLimitOffsetScanProto::~ResolvedLimitOffsetScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedLimitOffsetScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedLimitOffsetScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
  if (this != internal_default_instance()) delete _impl_.limit_;
  if (this != internal_default_instance()) delete _impl_.offset_;
}

void ResolvedLimitOffsetScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedLimitOffsetScanProto::InternalSwap(ResolvedLimitOffsetScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedLimitOffsetScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[55]);
}

// ===================================================================

class ResolvedWithRefScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWithRefScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedWithRefScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_with_query_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedWithRefScanProto::_Internal::parent(const ResolvedWithRefScanProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedWithRefScanProto::ResolvedWithRefScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWithRefScanProto)
}
ResolvedWithRefScanProto::ResolvedWithRefScanProto(const ResolvedWithRefScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedWithRefScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_query_name_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.with_query_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.with_query_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_with_query_name()) {
    _this->_impl_.with_query_name_.Set(from._internal_with_query_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWithRefScanProto)
}

inline void ResolvedWithRefScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_query_name_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.with_query_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.with_query_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedWithRefScanProto::~ResolvedWithRefScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWithRefScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedWithRefScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.with_query_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedWithRefScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedWithRefScanProto::InternalSwap(ResolvedWithRefScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWithRefScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[56]);
}

// ===================================================================

class ResolvedAnalyticScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnalyticScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedAnalyticScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedAnalyticScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedAnalyticScanProto::_Internal::parent(const ResolvedAnalyticScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedAnalyticScanProto::_Internal::input_scan(const ResolvedAnalyticScanProto* msg) {
  return *msg->_impl_.input_scan_;
}
ResolvedAnalyticScanProto::ResolvedAnalyticScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnalyticScanProto)
}
ResolvedAnalyticScanProto::ResolvedAnalyticScanProto(const ResolvedAnalyticScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAnalyticScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_group_list_){from._impl_.function_group_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnalyticScanProto)
}

inline void ResolvedAnalyticScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_group_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
  };
}

ResolvedAnalyticScanProto::~ResolvedAnalyticScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnalyticScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAnalyticScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.function_group_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
}

void ResolvedAnalyticScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAnalyticScanProto::InternalSwap(ResolvedAnalyticScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnalyticScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[57]);
}

// ===================================================================

class ResolvedSampleScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSampleScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedSampleScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedSampleScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& size(const ResolvedSampleScanProto* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::AnyResolvedExprProto& repeatable_argument(const ResolvedSampleScanProto* msg);
  static void set_has_repeatable_argument(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& weight_column(const ResolvedSampleScanProto* msg);
  static void set_has_weight_column(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedSampleScanProto::_Internal::parent(const ResolvedSampleScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedSampleScanProto::_Internal::input_scan(const ResolvedSampleScanProto* msg) {
  return *msg->_impl_.input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedSampleScanProto::_Internal::size(const ResolvedSampleScanProto* msg) {
  return *msg->_impl_.size_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedSampleScanProto::_Internal::repeatable_argument(const ResolvedSampleScanProto* msg) {
  return *msg->_impl_.repeatable_argument_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedSampleScanProto::_Internal::weight_column(const ResolvedSampleScanProto* msg) {
  return *msg->_impl_.weight_column_;
}
ResolvedSampleScanProto::ResolvedSampleScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSampleScanProto)
}
ResolvedSampleScanProto::ResolvedSampleScanProto(const ResolvedSampleScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSampleScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.partition_by_list_){from._impl_.partition_by_list_}
    , decltype(_impl_.method_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.repeatable_argument_){nullptr}
    , decltype(_impl_.weight_column_){nullptr}
    , decltype(_impl_.unit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.size_);
  }
  if (from._internal_has_repeatable_argument()) {
    _this->_impl_.repeatable_argument_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.repeatable_argument_);
  }
  if (from._internal_has_weight_column()) {
    _this->_impl_.weight_column_ = new ::zetasql::ResolvedColumnHolderProto(*from._impl_.weight_column_);
  }
  _this->_impl_.unit_ = from._impl_.unit_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSampleScanProto)
}

inline void ResolvedSampleScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.partition_by_list_){arena}
    , decltype(_impl_.method_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.repeatable_argument_){nullptr}
    , decltype(_impl_.weight_column_){nullptr}
    , decltype(_impl_.unit_){0}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedSampleScanProto::~ResolvedSampleScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSampleScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSampleScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_by_list_.~RepeatedPtrField();
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
  if (this != internal_default_instance()) delete _impl_.size_;
  if (this != internal_default_instance()) delete _impl_.repeatable_argument_;
  if (this != internal_default_instance()) delete _impl_.weight_column_;
}

void ResolvedSampleScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSampleScanProto::InternalSwap(ResolvedSampleScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSampleScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[58]);
}

// ===================================================================

class ResolvedComputedColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedComputedColumnProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedComputedColumnProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedComputedColumnProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedComputedColumnProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedComputedColumnProto::_Internal::parent(const ResolvedComputedColumnProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedComputedColumnProto::_Internal::column(const ResolvedComputedColumnProto* msg) {
  return *msg->_impl_.column_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedComputedColumnProto::_Internal::expr(const ResolvedComputedColumnProto* msg) {
  return *msg->_impl_.expr_;
}
void ResolvedComputedColumnProto::clear_column() {
  if (_impl_.column_ != nullptr) _impl_.column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedComputedColumnProto::ResolvedComputedColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedComputedColumnProto)
}
ResolvedComputedColumnProto::ResolvedComputedColumnProto(const ResolvedComputedColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedComputedColumnProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}
    , decltype(_impl_.expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_column()) {
    _this->_impl_.column_ = new ::zetasql::ResolvedColumnProto(*from._impl_.column_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedComputedColumnProto)
}

inline void ResolvedComputedColumnProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}
    , decltype(_impl_.expr_){nullptr}
  };
}

ResolvedComputedColumnProto::~ResolvedComputedColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedComputedColumnProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedComputedColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.column_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedComputedColumnProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedComputedColumnProto::InternalSwap(ResolvedComputedColumnProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedComputedColumnProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[59]);
}

// ===================================================================

class ResolvedOrderByItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedOrderByItemProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedOrderByItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnRefProto& column_ref(const ResolvedOrderByItemProto* msg);
  static void set_has_column_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedOrderByItemProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_descending(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_null_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedCollationProto& collation(const ResolvedOrderByItemProto* msg);
  static void set_has_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedOrderByItemProto::_Internal::parent(const ResolvedOrderByItemProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnRefProto&
ResolvedOrderByItemProto::_Internal::column_ref(const ResolvedOrderByItemProto* msg) {
  return *msg->_impl_.column_ref_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedOrderByItemProto::_Internal::collation_name(const ResolvedOrderByItemProto* msg) {
  return *msg->_impl_.collation_name_;
}
const ::zetasql::ResolvedCollationProto&
ResolvedOrderByItemProto::_Internal::collation(const ResolvedOrderByItemProto* msg) {
  return *msg->_impl_.collation_;
}
void ResolvedOrderByItemProto::clear_collation() {
  if (_impl_.collation_ != nullptr) _impl_.collation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ResolvedOrderByItemProto::ResolvedOrderByItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedOrderByItemProto)
}
ResolvedOrderByItemProto::ResolvedOrderByItemProto(const ResolvedOrderByItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedOrderByItemProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_ref_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}
    , decltype(_impl_.collation_){nullptr}
    , decltype(_impl_.is_descending_){}
    , decltype(_impl_.null_order_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_column_ref()) {
    _this->_impl_.column_ref_ = new ::zetasql::ResolvedColumnRefProto(*from._impl_.column_ref_);
  }
  if (from._internal_has_collation_name()) {
    _this->_impl_.collation_name_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.collation_name_);
  }
  if (from._internal_has_collation()) {
    _this->_impl_.collation_ = new ::zetasql::ResolvedCollationProto(*from._impl_.collation_);
  }
  ::memcpy(&_impl_.is_descending_, &from._impl_.is_descending_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.null_order_) -
    reinterpret_cast<char*>(&_impl_.is_descending_)) + sizeof(_impl_.null_order_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedOrderByItemProto)
}

inline void ResolvedOrderByItemProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_ref_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}
    , decltype(_impl_.collation_){nullptr}
    , decltype(_impl_.is_descending_){false}
    , decltype(_impl_.null_order_){0}
  };
}

ResolvedOrderByItemProto::~ResolvedOrderByItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedOrderByItemProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedOrderByItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.column_ref_;
  if (this != internal_default_instance()) delete _impl_.collation_name_;
  if (this != internal_default_instance()) delete _impl_.collation_;
}

void ResolvedOrderByItemProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedOrderByItemProto::InternalSwap(ResolvedOrderByItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedOrderByItemProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[60]);
}

// ===================================================================

class ResolvedColumnAnnotationsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnAnnotationsProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedColumnAnnotationsProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedColumnAnnotationsProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_not_null(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::TypeParametersProto& type_parameters(const ResolvedColumnAnnotationsProto* msg);
  static void set_has_type_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedColumnAnnotationsProto::_Internal::parent(const ResolvedColumnAnnotationsProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedColumnAnnotationsProto::_Internal::collation_name(const ResolvedColumnAnnotationsProto* msg) {
  return *msg->_impl_.collation_name_;
}
const ::zetasql::TypeParametersProto&
ResolvedColumnAnnotationsProto::_Internal::type_parameters(const ResolvedColumnAnnotationsProto* msg) {
  return *msg->_impl_.type_parameters_;
}
void ResolvedColumnAnnotationsProto::clear_type_parameters() {
  if (_impl_.type_parameters_ != nullptr) _impl_.type_parameters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedColumnAnnotationsProto::ResolvedColumnAnnotationsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnAnnotationsProto)
}
ResolvedColumnAnnotationsProto::ResolvedColumnAnnotationsProto(const ResolvedColumnAnnotationsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedColumnAnnotationsProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.child_list_){from._impl_.child_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.type_parameters_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}
    , decltype(_impl_.not_null_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_type_parameters()) {
    _this->_impl_.type_parameters_ = new ::zetasql::TypeParametersProto(*from._impl_.type_parameters_);
  }
  if (from._internal_has_collation_name()) {
    _this->_impl_.collation_name_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.collation_name_);
  }
  _this->_impl_.not_null_ = from._impl_.not_null_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnAnnotationsProto)
}

inline void ResolvedColumnAnnotationsProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.child_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.type_parameters_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}
    , decltype(_impl_.not_null_){false}
  };
}

ResolvedColumnAnnotationsProto::~ResolvedColumnAnnotationsProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnAnnotationsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedColumnAnnotationsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.child_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.type_parameters_;
  if (this != internal_default_instance()) delete _impl_.collation_name_;
}

void ResolvedColumnAnnotationsProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedColumnAnnotationsProto::InternalSwap(ResolvedColumnAnnotationsProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnAnnotationsProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[61]);
}

// ===================================================================

class ResolvedGeneratedColumnInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGeneratedColumnInfoProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedGeneratedColumnInfoProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedGeneratedColumnInfoProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stored_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedGeneratedColumnInfoProto::_Internal::parent(const ResolvedGeneratedColumnInfoProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedGeneratedColumnInfoProto::_Internal::expression(const ResolvedGeneratedColumnInfoProto* msg) {
  return *msg->_impl_.expression_;
}
ResolvedGeneratedColumnInfoProto::ResolvedGeneratedColumnInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGeneratedColumnInfoProto)
}
ResolvedGeneratedColumnInfoProto::ResolvedGeneratedColumnInfoProto(const ResolvedGeneratedColumnInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedGeneratedColumnInfoProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.stored_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_expression()) {
    _this->_impl_.expression_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expression_);
  }
  _this->_impl_.stored_mode_ = from._impl_.stored_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGeneratedColumnInfoProto)
}

inline void ResolvedGeneratedColumnInfoProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.stored_mode_){0}
  };
}

ResolvedGeneratedColumnInfoProto::~ResolvedGeneratedColumnInfoProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGeneratedColumnInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedGeneratedColumnInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expression_;
}

void ResolvedGeneratedColumnInfoProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedGeneratedColumnInfoProto::InternalSwap(ResolvedGeneratedColumnInfoProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGeneratedColumnInfoProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[62]);
}

// ===================================================================

class ResolvedColumnDefaultValueProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnDefaultValueProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedColumnDefaultValueProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedColumnDefaultValueProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sql(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedColumnDefaultValueProto::_Internal::parent(const ResolvedColumnDefaultValueProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedColumnDefaultValueProto::_Internal::expression(const ResolvedColumnDefaultValueProto* msg) {
  return *msg->_impl_.expression_;
}
ResolvedColumnDefaultValueProto::ResolvedColumnDefaultValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnDefaultValueProto)
}
ResolvedColumnDefaultValueProto::ResolvedColumnDefaultValueProto(const ResolvedColumnDefaultValueProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedColumnDefaultValueProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sql_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sql_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sql()) {
    _this->_impl_.sql_.Set(from._internal_sql(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_expression()) {
    _this->_impl_.expression_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expression_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnDefaultValueProto)
}

inline void ResolvedColumnDefaultValueProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sql_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}
  };
  _impl_.sql_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedColumnDefaultValueProto::~ResolvedColumnDefaultValueProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnDefaultValueProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedColumnDefaultValueProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sql_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expression_;
}

void ResolvedColumnDefaultValueProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedColumnDefaultValueProto::InternalSwap(ResolvedColumnDefaultValueProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnDefaultValueProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[63]);
}

// ===================================================================

class ResolvedColumnDefinitionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnDefinitionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedColumnDefinitionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const ResolvedColumnDefinitionProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnAnnotationsProto& annotations(const ResolvedColumnDefinitionProto* msg);
  static void set_has_annotations(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedColumnDefinitionProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedGeneratedColumnInfoProto& generated_column_info(const ResolvedColumnDefinitionProto* msg);
  static void set_has_generated_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedColumnDefaultValueProto& default_value(const ResolvedColumnDefinitionProto* msg);
  static void set_has_default_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedColumnDefinitionProto::_Internal::parent(const ResolvedColumnDefinitionProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TypeProto&
ResolvedColumnDefinitionProto::_Internal::type(const ResolvedColumnDefinitionProto* msg) {
  return *msg->_impl_.type_;
}
const ::zetasql::ResolvedColumnAnnotationsProto&
ResolvedColumnDefinitionProto::_Internal::annotations(const ResolvedColumnDefinitionProto* msg) {
  return *msg->_impl_.annotations_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedColumnDefinitionProto::_Internal::column(const ResolvedColumnDefinitionProto* msg) {
  return *msg->_impl_.column_;
}
const ::zetasql::ResolvedGeneratedColumnInfoProto&
ResolvedColumnDefinitionProto::_Internal::generated_column_info(const ResolvedColumnDefinitionProto* msg) {
  return *msg->_impl_.generated_column_info_;
}
const ::zetasql::ResolvedColumnDefaultValueProto&
ResolvedColumnDefinitionProto::_Internal::default_value(const ResolvedColumnDefinitionProto* msg) {
  return *msg->_impl_.default_value_;
}
void ResolvedColumnDefinitionProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ResolvedColumnDefinitionProto::clear_column() {
  if (_impl_.column_ != nullptr) _impl_.column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ResolvedColumnDefinitionProto::ResolvedColumnDefinitionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnDefinitionProto)
}
ResolvedColumnDefinitionProto::ResolvedColumnDefinitionProto(const ResolvedColumnDefinitionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedColumnDefinitionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.annotations_){nullptr}
    , decltype(_impl_.column_){nullptr}
    , decltype(_impl_.generated_column_info_){nullptr}
    , decltype(_impl_.default_value_){nullptr}
    , decltype(_impl_.is_hidden_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  if (from._internal_has_annotations()) {
    _this->_impl_.annotations_ = new ::zetasql::ResolvedColumnAnnotationsProto(*from._impl_.annotations_);
  }
  if (from._internal_has_column()) {
    _this->_impl_.column_ = new ::zetasql::ResolvedColumnProto(*from._impl_.column_);
  }
  if (from._internal_has_generated_column_info()) {
    _this->_impl_.generated_column_info_ = new ::zetasql::ResolvedGeneratedColumnInfoProto(*from._impl_.generated_column_info_);
  }
  if (from._internal_has_default_value()) {
    _this->_impl_.default_value_ = new ::zetasql::ResolvedColumnDefaultValueProto(*from._impl_.default_value_);
  }
  _this->_impl_.is_hidden_ = from._impl_.is_hidden_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnDefinitionProto)
}

inline void ResolvedColumnDefinitionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.annotations_){nullptr}
    , decltype(_impl_.column_){nullptr}
    , decltype(_impl_.generated_column_info_){nullptr}
    , decltype(_impl_.default_value_){nullptr}
    , decltype(_impl_.is_hidden_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedColumnDefinitionProto::~ResolvedColumnDefinitionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnDefinitionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedColumnDefinitionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.type_;
  if (this != internal_default_instance()) delete _impl_.annotations_;
  if (this != internal_default_instance()) delete _impl_.column_;
  if (this != internal_default_instance()) delete _impl_.generated_column_info_;
  if (this != internal_default_instance()) delete _impl_.default_value_;
}

void ResolvedColumnDefinitionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedColumnDefinitionProto::InternalSwap(ResolvedColumnDefinitionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnDefinitionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[64]);
}

// ===================================================================

class AnyResolvedConstraintProto::_Internal {
 public:
  static const ::zetasql::ResolvedPrimaryKeyProto& resolved_primary_key_node(const AnyResolvedConstraintProto* msg);
  static const ::zetasql::ResolvedForeignKeyProto& resolved_foreign_key_node(const AnyResolvedConstraintProto* msg);
  static const ::zetasql::ResolvedCheckConstraintProto& resolved_check_constraint_node(const AnyResolvedConstraintProto* msg);
};

const ::zetasql::ResolvedPrimaryKeyProto&
AnyResolvedConstraintProto::_Internal::resolved_primary_key_node(const AnyResolvedConstraintProto* msg) {
  return *msg->_impl_.node_.resolved_primary_key_node_;
}
const ::zetasql::ResolvedForeignKeyProto&
AnyResolvedConstraintProto::_Internal::resolved_foreign_key_node(const AnyResolvedConstraintProto* msg) {
  return *msg->_impl_.node_.resolved_foreign_key_node_;
}
const ::zetasql::ResolvedCheckConstraintProto&
AnyResolvedConstraintProto::_Internal::resolved_check_constraint_node(const AnyResolvedConstraintProto* msg) {
  return *msg->_impl_.node_.resolved_check_constraint_node_;
}
void AnyResolvedConstraintProto::set_allocated_resolved_primary_key_node(::zetasql::ResolvedPrimaryKeyProto* resolved_primary_key_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_primary_key_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_primary_key_node);
    if (message_arena != submessage_arena) {
      resolved_primary_key_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_primary_key_node, submessage_arena);
    }
    set_has_resolved_primary_key_node();
    _impl_.node_.resolved_primary_key_node_ = resolved_primary_key_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedConstraintProto.resolved_primary_key_node)
}
void AnyResolvedConstraintProto::set_allocated_resolved_foreign_key_node(::zetasql::ResolvedForeignKeyProto* resolved_foreign_key_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_foreign_key_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_foreign_key_node);
    if (message_arena != submessage_arena) {
      resolved_foreign_key_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_foreign_key_node, submessage_arena);
    }
    set_has_resolved_foreign_key_node();
    _impl_.node_.resolved_foreign_key_node_ = resolved_foreign_key_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedConstraintProto.resolved_foreign_key_node)
}
void AnyResolvedConstraintProto::set_allocated_resolved_check_constraint_node(::zetasql::ResolvedCheckConstraintProto* resolved_check_constraint_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_check_constraint_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_check_constraint_node);
    if (message_arena != submessage_arena) {
      resolved_check_constraint_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_check_constraint_node, submessage_arena);
    }
    set_has_resolved_check_constraint_node();
    _impl_.node_.resolved_check_constraint_node_ = resolved_check_constraint_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedConstraintProto.resolved_check_constraint_node)
}
AnyResolvedConstraintProto::AnyResolvedConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedConstraintProto)
}
AnyResolvedConstraintProto::AnyResolvedConstraintProto(const AnyResolvedConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedConstraintProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedPrimaryKeyNode: {
      _this->_internal_mutable_resolved_primary_key_node()->::zetasql::ResolvedPrimaryKeyProto::MergeFrom(
          from._internal_resolved_primary_key_node());
      break;
    }
    case kResolvedForeignKeyNode: {
      _this->_internal_mutable_resolved_foreign_key_node()->::zetasql::ResolvedForeignKeyProto::MergeFrom(
          from._internal_resolved_foreign_key_node());
      break;
    }
    case kResolvedCheckConstraintNode: {
      _this->_internal_mutable_resolved_check_constraint_node()->::zetasql::ResolvedCheckConstraintProto::MergeFrom(
          from._internal_resolved_check_constraint_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedConstraintProto)
}

inline void AnyResolvedConstraintProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedConstraintProto::~AnyResolvedConstraintProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedConstraintProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedConstraintProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedConstraintProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedConstraintProto)
  switch (node_case()) {
    case kResolvedPrimaryKeyNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_primary_key_node_;
      }
      break;
    }
    case kResolvedForeignKeyNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_foreign_key_node_;
      }
      break;
    }
    case kResolvedCheckConstraintNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_check_constraint_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedConstraintProto::InternalSwap(AnyResolvedConstraintProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedConstraintProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[65]);
}

// ===================================================================

class ResolvedConstraintProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedConstraintProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedConstraintProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedConstraintProto::_Internal::parent(const ResolvedConstraintProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedConstraintProto::ResolvedConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedConstraintProto)
}
ResolvedConstraintProto::ResolvedConstraintProto(const ResolvedConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedConstraintProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedConstraintProto)
}

inline void ResolvedConstraintProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedConstraintProto::~ResolvedConstraintProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedConstraintProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedConstraintProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedConstraintProto::InternalSwap(ResolvedConstraintProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedConstraintProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[66]);
}

// ===================================================================

class ResolvedPrimaryKeyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedPrimaryKeyProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedConstraintProto& parent(const ResolvedPrimaryKeyProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unenforced(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_constraint_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedConstraintProto&
ResolvedPrimaryKeyProto::_Internal::parent(const ResolvedPrimaryKeyProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedPrimaryKeyProto::ResolvedPrimaryKeyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedPrimaryKeyProto)
}
ResolvedPrimaryKeyProto::ResolvedPrimaryKeyProto(const ResolvedPrimaryKeyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedPrimaryKeyProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_offset_list_){from._impl_.column_offset_list_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.column_name_list_){from._impl_.column_name_list_}
    , decltype(_impl_.constraint_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.unenforced_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.constraint_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constraint_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_constraint_name()) {
    _this->_impl_.constraint_name_.Set(from._internal_constraint_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedConstraintProto(*from._impl_.parent_);
  }
  _this->_impl_.unenforced_ = from._impl_.unenforced_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedPrimaryKeyProto)
}

inline void ResolvedPrimaryKeyProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_offset_list_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.column_name_list_){arena}
    , decltype(_impl_.constraint_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.unenforced_){false}
  };
  _impl_.constraint_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constraint_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedPrimaryKeyProto::~ResolvedPrimaryKeyProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedPrimaryKeyProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedPrimaryKeyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_offset_list_.~RepeatedField();
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.column_name_list_.~RepeatedPtrField();
  _impl_.constraint_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedPrimaryKeyProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedPrimaryKeyProto::InternalSwap(ResolvedPrimaryKeyProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedPrimaryKeyProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[67]);
}

// ===================================================================

class ResolvedForeignKeyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedForeignKeyProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedConstraintProto& parent(const ResolvedForeignKeyProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_constraint_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TableRefProto& referenced_table(const ResolvedForeignKeyProto* msg);
  static void set_has_referenced_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_update_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delete_action(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enforced(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedConstraintProto&
ResolvedForeignKeyProto::_Internal::parent(const ResolvedForeignKeyProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TableRefProto&
ResolvedForeignKeyProto::_Internal::referenced_table(const ResolvedForeignKeyProto* msg) {
  return *msg->_impl_.referenced_table_;
}
void ResolvedForeignKeyProto::clear_referenced_table() {
  if (_impl_.referenced_table_ != nullptr) _impl_.referenced_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedForeignKeyProto::ResolvedForeignKeyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedForeignKeyProto)
}
ResolvedForeignKeyProto::ResolvedForeignKeyProto(const ResolvedForeignKeyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedForeignKeyProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.referencing_column_offset_list_){from._impl_.referencing_column_offset_list_}
    , decltype(_impl_.referenced_column_offset_list_){from._impl_.referenced_column_offset_list_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.referencing_column_list_){from._impl_.referencing_column_list_}
    , decltype(_impl_.constraint_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.referenced_table_){nullptr}
    , decltype(_impl_.match_mode_){}
    , decltype(_impl_.update_action_){}
    , decltype(_impl_.delete_action_){}
    , decltype(_impl_.enforced_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.constraint_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constraint_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_constraint_name()) {
    _this->_impl_.constraint_name_.Set(from._internal_constraint_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedConstraintProto(*from._impl_.parent_);
  }
  if (from._internal_has_referenced_table()) {
    _this->_impl_.referenced_table_ = new ::zetasql::TableRefProto(*from._impl_.referenced_table_);
  }
  ::memcpy(&_impl_.match_mode_, &from._impl_.match_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enforced_) -
    reinterpret_cast<char*>(&_impl_.match_mode_)) + sizeof(_impl_.enforced_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedForeignKeyProto)
}

inline void ResolvedForeignKeyProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.referencing_column_offset_list_){arena}
    , decltype(_impl_.referenced_column_offset_list_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.referencing_column_list_){arena}
    , decltype(_impl_.constraint_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.referenced_table_){nullptr}
    , decltype(_impl_.match_mode_){0}
    , decltype(_impl_.update_action_){0}
    , decltype(_impl_.delete_action_){0}
    , decltype(_impl_.enforced_){false}
  };
  _impl_.constraint_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constraint_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedForeignKeyProto::~ResolvedForeignKeyProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedForeignKeyProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedForeignKeyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.referencing_column_offset_list_.~RepeatedField();
  _impl_.referenced_column_offset_list_.~RepeatedField();
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.referencing_column_list_.~RepeatedPtrField();
  _impl_.constraint_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.referenced_table_;
}

void ResolvedForeignKeyProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedForeignKeyProto::InternalSwap(ResolvedForeignKeyProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedForeignKeyProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[68]);
}

// ===================================================================

class ResolvedCheckConstraintProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCheckConstraintProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedConstraintProto& parent(const ResolvedCheckConstraintProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_constraint_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedCheckConstraintProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enforced(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedConstraintProto&
ResolvedCheckConstraintProto::_Internal::parent(const ResolvedCheckConstraintProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCheckConstraintProto::_Internal::expression(const ResolvedCheckConstraintProto* msg) {
  return *msg->_impl_.expression_;
}
ResolvedCheckConstraintProto::ResolvedCheckConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCheckConstraintProto)
}
ResolvedCheckConstraintProto::ResolvedCheckConstraintProto(const ResolvedCheckConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCheckConstraintProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.constraint_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.enforced_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.constraint_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constraint_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_constraint_name()) {
    _this->_impl_.constraint_name_.Set(from._internal_constraint_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedConstraintProto(*from._impl_.parent_);
  }
  if (from._internal_has_expression()) {
    _this->_impl_.expression_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expression_);
  }
  _this->_impl_.enforced_ = from._impl_.enforced_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCheckConstraintProto)
}

inline void ResolvedCheckConstraintProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.constraint_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.enforced_){false}
  };
  _impl_.constraint_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constraint_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedCheckConstraintProto::~ResolvedCheckConstraintProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCheckConstraintProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCheckConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.constraint_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expression_;
}

void ResolvedCheckConstraintProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCheckConstraintProto::InternalSwap(ResolvedCheckConstraintProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCheckConstraintProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[69]);
}

// ===================================================================

class ResolvedOutputColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedOutputColumnProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedOutputColumnProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedOutputColumnProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedOutputColumnProto::_Internal::parent(const ResolvedOutputColumnProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedOutputColumnProto::_Internal::column(const ResolvedOutputColumnProto* msg) {
  return *msg->_impl_.column_;
}
void ResolvedOutputColumnProto::clear_column() {
  if (_impl_.column_ != nullptr) _impl_.column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedOutputColumnProto::ResolvedOutputColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedOutputColumnProto)
}
ResolvedOutputColumnProto::ResolvedOutputColumnProto(const ResolvedOutputColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedOutputColumnProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_column()) {
    _this->_impl_.column_ = new ::zetasql::ResolvedColumnProto(*from._impl_.column_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedOutputColumnProto)
}

inline void ResolvedOutputColumnProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedOutputColumnProto::~ResolvedOutputColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedOutputColumnProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedOutputColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.column_;
}

void ResolvedOutputColumnProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedOutputColumnProto::InternalSwap(ResolvedOutputColumnProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedOutputColumnProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[70]);
}

// ===================================================================

class ResolvedProjectScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedProjectScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedProjectScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedProjectScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedProjectScanProto::_Internal::parent(const ResolvedProjectScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedProjectScanProto::_Internal::input_scan(const ResolvedProjectScanProto* msg) {
  return *msg->_impl_.input_scan_;
}
ResolvedProjectScanProto::ResolvedProjectScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedProjectScanProto)
}
ResolvedProjectScanProto::ResolvedProjectScanProto(const ResolvedProjectScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedProjectScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expr_list_){from._impl_.expr_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedProjectScanProto)
}

inline void ResolvedProjectScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expr_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
  };
}

ResolvedProjectScanProto::~ResolvedProjectScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedProjectScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedProjectScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.expr_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
}

void ResolvedProjectScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedProjectScanProto::InternalSwap(ResolvedProjectScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedProjectScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[71]);
}

// ===================================================================

class ResolvedTVFScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedTVFScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedTVFScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TableValuedFunctionRefProto& tvf(const ResolvedTVFScanProto* msg);
  static void set_has_tvf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::TVFSignatureProto& signature(const ResolvedTVFScanProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::FunctionSignatureProto& function_call_signature(const ResolvedTVFScanProto* msg);
  static void set_has_function_call_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedTVFScanProto::_Internal::parent(const ResolvedTVFScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TableValuedFunctionRefProto&
ResolvedTVFScanProto::_Internal::tvf(const ResolvedTVFScanProto* msg) {
  return *msg->_impl_.tvf_;
}
const ::zetasql::TVFSignatureProto&
ResolvedTVFScanProto::_Internal::signature(const ResolvedTVFScanProto* msg) {
  return *msg->_impl_.signature_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedTVFScanProto::_Internal::function_call_signature(const ResolvedTVFScanProto* msg) {
  return *msg->_impl_.function_call_signature_;
}
void ResolvedTVFScanProto::clear_tvf() {
  if (_impl_.tvf_ != nullptr) _impl_.tvf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ResolvedTVFScanProto::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ResolvedTVFScanProto::clear_function_call_signature() {
  if (_impl_.function_call_signature_ != nullptr) _impl_.function_call_signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ResolvedTVFScanProto::ResolvedTVFScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedTVFScanProto)
}
ResolvedTVFScanProto::ResolvedTVFScanProto(const ResolvedTVFScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedTVFScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_list_){from._impl_.argument_list_}
    , decltype(_impl_.column_index_list_){from._impl_.column_index_list_}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.tvf_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.function_call_signature_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alias()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_tvf()) {
    _this->_impl_.tvf_ = new ::zetasql::TableValuedFunctionRefProto(*from._impl_.tvf_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::zetasql::TVFSignatureProto(*from._impl_.signature_);
  }
  if (from._internal_has_function_call_signature()) {
    _this->_impl_.function_call_signature_ = new ::zetasql::FunctionSignatureProto(*from._impl_.function_call_signature_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedTVFScanProto)
}

inline void ResolvedTVFScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_list_){arena}
    , decltype(_impl_.column_index_list_){arena}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.tvf_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.function_call_signature_){nullptr}
  };
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedTVFScanProto::~ResolvedTVFScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedTVFScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedTVFScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_list_.~RepeatedPtrField();
  _impl_.column_index_list_.~RepeatedField();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.tvf_;
  if (this != internal_default_instance()) delete _impl_.signature_;
  if (this != internal_default_instance()) delete _impl_.function_call_signature_;
}

void ResolvedTVFScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedTVFScanProto::InternalSwap(ResolvedTVFScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedTVFScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[72]);
}

// ===================================================================

class ResolvedGroupRowsScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGroupRowsScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedGroupRowsScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedGroupRowsScanProto::_Internal::parent(const ResolvedGroupRowsScanProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedGroupRowsScanProto::ResolvedGroupRowsScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGroupRowsScanProto)
}
ResolvedGroupRowsScanProto::ResolvedGroupRowsScanProto(const ResolvedGroupRowsScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedGroupRowsScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_column_list_){from._impl_.input_column_list_}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alias()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGroupRowsScanProto)
}

inline void ResolvedGroupRowsScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_column_list_){arena}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedGroupRowsScanProto::~ResolvedGroupRowsScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGroupRowsScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedGroupRowsScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_column_list_.~RepeatedPtrField();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedGroupRowsScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedGroupRowsScanProto::InternalSwap(ResolvedGroupRowsScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGroupRowsScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[73]);
}

// ===================================================================

class ResolvedFunctionArgumentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFunctionArgumentProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedFunctionArgumentProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedFunctionArgumentProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& scan(const ResolvedFunctionArgumentProto* msg);
  static void set_has_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedModelProto& model(const ResolvedFunctionArgumentProto* msg);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedFunctionArgumentProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedDescriptorProto& descriptor_arg(const ResolvedFunctionArgumentProto* msg);
  static void set_has_descriptor_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedInlineLambdaProto& inline_lambda(const ResolvedFunctionArgumentProto* msg);
  static void set_has_inline_lambda(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedFunctionArgumentProto::_Internal::parent(const ResolvedFunctionArgumentProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFunctionArgumentProto::_Internal::expr(const ResolvedFunctionArgumentProto* msg) {
  return *msg->_impl_.expr_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedFunctionArgumentProto::_Internal::scan(const ResolvedFunctionArgumentProto* msg) {
  return *msg->_impl_.scan_;
}
const ::zetasql::ResolvedModelProto&
ResolvedFunctionArgumentProto::_Internal::model(const ResolvedFunctionArgumentProto* msg) {
  return *msg->_impl_.model_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedFunctionArgumentProto::_Internal::connection(const ResolvedFunctionArgumentProto* msg) {
  return *msg->_impl_.connection_;
}
const ::zetasql::ResolvedDescriptorProto&
ResolvedFunctionArgumentProto::_Internal::descriptor_arg(const ResolvedFunctionArgumentProto* msg) {
  return *msg->_impl_.descriptor_arg_;
}
const ::zetasql::ResolvedInlineLambdaProto&
ResolvedFunctionArgumentProto::_Internal::inline_lambda(const ResolvedFunctionArgumentProto* msg) {
  return *msg->_impl_.inline_lambda_;
}
void ResolvedFunctionArgumentProto::clear_argument_column_list() {
  _impl_.argument_column_list_.Clear();
}
ResolvedFunctionArgumentProto::ResolvedFunctionArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFunctionArgumentProto)
}
ResolvedFunctionArgumentProto::ResolvedFunctionArgumentProto(const ResolvedFunctionArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFunctionArgumentProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_column_list_){from._impl_.argument_column_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.scan_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.descriptor_arg_){nullptr}
    , decltype(_impl_.inline_lambda_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  if (from._internal_has_scan()) {
    _this->_impl_.scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.scan_);
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::zetasql::ResolvedModelProto(*from._impl_.model_);
  }
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::zetasql::ResolvedConnectionProto(*from._impl_.connection_);
  }
  if (from._internal_has_descriptor_arg()) {
    _this->_impl_.descriptor_arg_ = new ::zetasql::ResolvedDescriptorProto(*from._impl_.descriptor_arg_);
  }
  if (from._internal_has_inline_lambda()) {
    _this->_impl_.inline_lambda_ = new ::zetasql::ResolvedInlineLambdaProto(*from._impl_.inline_lambda_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFunctionArgumentProto)
}

inline void ResolvedFunctionArgumentProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.scan_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.descriptor_arg_){nullptr}
    , decltype(_impl_.inline_lambda_){nullptr}
  };
}

ResolvedFunctionArgumentProto::~ResolvedFunctionArgumentProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFunctionArgumentProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFunctionArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
  if (this != internal_default_instance()) delete _impl_.scan_;
  if (this != internal_default_instance()) delete _impl_.model_;
  if (this != internal_default_instance()) delete _impl_.connection_;
  if (this != internal_default_instance()) delete _impl_.descriptor_arg_;
  if (this != internal_default_instance()) delete _impl_.inline_lambda_;
}

void ResolvedFunctionArgumentProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFunctionArgumentProto::InternalSwap(ResolvedFunctionArgumentProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFunctionArgumentProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[74]);
}

// ===================================================================

class AnyResolvedStatementProto::_Internal {
 public:
  static const ::zetasql::ResolvedExplainStmtProto& resolved_explain_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedQueryStmtProto& resolved_query_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::AnyResolvedCreateStatementProto& resolved_create_statement_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedExportDataStmtProto& resolved_export_data_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDefineTableStmtProto& resolved_define_table_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDescribeStmtProto& resolved_describe_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedShowStmtProto& resolved_show_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedBeginStmtProto& resolved_begin_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCommitStmtProto& resolved_commit_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedRollbackStmtProto& resolved_rollback_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropStmtProto& resolved_drop_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedInsertStmtProto& resolved_insert_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDeleteStmtProto& resolved_delete_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedUpdateStmtProto& resolved_update_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::AnyResolvedGrantOrRevokeStmtProto& resolved_grant_or_revoke_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAlterTableSetOptionsStmtProto& resolved_alter_table_set_options_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedRenameStmtProto& resolved_rename_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCreateRowAccessPolicyStmtProto& resolved_create_row_access_policy_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropRowAccessPolicyStmtProto& resolved_drop_row_access_policy_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropFunctionStmtProto& resolved_drop_function_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCallStmtProto& resolved_call_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedImportStmtProto& resolved_import_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedModuleStmtProto& resolved_module_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCreateDatabaseStmtProto& resolved_create_database_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAssertStmtProto& resolved_assert_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedMergeStmtProto& resolved_merge_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::AnyResolvedAlterObjectStmtProto& resolved_alter_object_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedSetTransactionStmtProto& resolved_set_transaction_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropMaterializedViewStmtProto& resolved_drop_materialized_view_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedStartBatchStmtProto& resolved_start_batch_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedRunBatchStmtProto& resolved_run_batch_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAbortBatchStmtProto& resolved_abort_batch_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedTruncateStmtProto& resolved_truncate_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedExecuteImmediateStmtProto& resolved_execute_immediate_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAssignmentStmtProto& resolved_assignment_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedExportModelStmtProto& resolved_export_model_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropTableFunctionStmtProto& resolved_drop_table_function_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCloneDataStmtProto& resolved_clone_data_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAnalyzeStmtProto& resolved_analyze_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropSnapshotTableStmtProto& resolved_drop_snapshot_table_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAuxLoadDataStmtProto& resolved_aux_load_data_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropSearchIndexStmtProto& resolved_drop_search_index_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto& resolved_drop_privilege_restriction_stmt_node(const AnyResolvedStatementProto* msg);
};

const ::zetasql::ResolvedExplainStmtProto&
AnyResolvedStatementProto::_Internal::resolved_explain_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_explain_stmt_node_;
}
const ::zetasql::ResolvedQueryStmtProto&
AnyResolvedStatementProto::_Internal::resolved_query_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_query_stmt_node_;
}
const ::zetasql::AnyResolvedCreateStatementProto&
AnyResolvedStatementProto::_Internal::resolved_create_statement_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_statement_node_;
}
const ::zetasql::ResolvedExportDataStmtProto&
AnyResolvedStatementProto::_Internal::resolved_export_data_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_export_data_stmt_node_;
}
const ::zetasql::ResolvedDefineTableStmtProto&
AnyResolvedStatementProto::_Internal::resolved_define_table_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_define_table_stmt_node_;
}
const ::zetasql::ResolvedDescribeStmtProto&
AnyResolvedStatementProto::_Internal::resolved_describe_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_describe_stmt_node_;
}
const ::zetasql::ResolvedShowStmtProto&
AnyResolvedStatementProto::_Internal::resolved_show_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_show_stmt_node_;
}
const ::zetasql::ResolvedBeginStmtProto&
AnyResolvedStatementProto::_Internal::resolved_begin_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_begin_stmt_node_;
}
const ::zetasql::ResolvedCommitStmtProto&
AnyResolvedStatementProto::_Internal::resolved_commit_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_commit_stmt_node_;
}
const ::zetasql::ResolvedRollbackStmtProto&
AnyResolvedStatementProto::_Internal::resolved_rollback_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_rollback_stmt_node_;
}
const ::zetasql::ResolvedDropStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_drop_stmt_node_;
}
const ::zetasql::ResolvedInsertStmtProto&
AnyResolvedStatementProto::_Internal::resolved_insert_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_insert_stmt_node_;
}
const ::zetasql::ResolvedDeleteStmtProto&
AnyResolvedStatementProto::_Internal::resolved_delete_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_delete_stmt_node_;
}
const ::zetasql::ResolvedUpdateStmtProto&
AnyResolvedStatementProto::_Internal::resolved_update_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_update_stmt_node_;
}
const ::zetasql::AnyResolvedGrantOrRevokeStmtProto&
AnyResolvedStatementProto::_Internal::resolved_grant_or_revoke_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_grant_or_revoke_stmt_node_;
}
const ::zetasql::ResolvedAlterTableSetOptionsStmtProto&
AnyResolvedStatementProto::_Internal::resolved_alter_table_set_options_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_alter_table_set_options_stmt_node_;
}
const ::zetasql::ResolvedRenameStmtProto&
AnyResolvedStatementProto::_Internal::resolved_rename_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_rename_stmt_node_;
}
const ::zetasql::ResolvedCreateRowAccessPolicyStmtProto&
AnyResolvedStatementProto::_Internal::resolved_create_row_access_policy_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_row_access_policy_stmt_node_;
}
const ::zetasql::ResolvedDropRowAccessPolicyStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_row_access_policy_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_drop_row_access_policy_stmt_node_;
}
const ::zetasql::ResolvedDropFunctionStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_function_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_drop_function_stmt_node_;
}
const ::zetasql::ResolvedCallStmtProto&
AnyResolvedStatementProto::_Internal::resolved_call_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_call_stmt_node_;
}
const ::zetasql::ResolvedImportStmtProto&
AnyResolvedStatementProto::_Internal::resolved_import_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_import_stmt_node_;
}
const ::zetasql::ResolvedModuleStmtProto&
AnyResolvedStatementProto::_Internal::resolved_module_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_module_stmt_node_;
}
const ::zetasql::ResolvedCreateDatabaseStmtProto&
AnyResolvedStatementProto::_Internal::resolved_create_database_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_database_stmt_node_;
}
const ::zetasql::ResolvedAssertStmtProto&
AnyResolvedStatementProto::_Internal::resolved_assert_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_assert_stmt_node_;
}
const ::zetasql::ResolvedMergeStmtProto&
AnyResolvedStatementProto::_Internal::resolved_merge_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_merge_stmt_node_;
}
const ::zetasql::AnyResolvedAlterObjectStmtProto&
AnyResolvedStatementProto::_Internal::resolved_alter_object_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_alter_object_stmt_node_;
}
const ::zetasql::ResolvedSetTransactionStmtProto&
AnyResolvedStatementProto::_Internal::resolved_set_transaction_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_set_transaction_stmt_node_;
}
const ::zetasql::ResolvedDropMaterializedViewStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_materialized_view_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_drop_materialized_view_stmt_node_;
}
const ::zetasql::ResolvedStartBatchStmtProto&
AnyResolvedStatementProto::_Internal::resolved_start_batch_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_start_batch_stmt_node_;
}
const ::zetasql::ResolvedRunBatchStmtProto&
AnyResolvedStatementProto::_Internal::resolved_run_batch_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_run_batch_stmt_node_;
}
const ::zetasql::ResolvedAbortBatchStmtProto&
AnyResolvedStatementProto::_Internal::resolved_abort_batch_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_abort_batch_stmt_node_;
}
const ::zetasql::ResolvedTruncateStmtProto&
AnyResolvedStatementProto::_Internal::resolved_truncate_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_truncate_stmt_node_;
}
const ::zetasql::ResolvedExecuteImmediateStmtProto&
AnyResolvedStatementProto::_Internal::resolved_execute_immediate_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_execute_immediate_stmt_node_;
}
const ::zetasql::ResolvedAssignmentStmtProto&
AnyResolvedStatementProto::_Internal::resolved_assignment_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_assignment_stmt_node_;
}
const ::zetasql::ResolvedExportModelStmtProto&
AnyResolvedStatementProto::_Internal::resolved_export_model_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_export_model_stmt_node_;
}
const ::zetasql::ResolvedDropTableFunctionStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_table_function_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_drop_table_function_stmt_node_;
}
const ::zetasql::ResolvedCloneDataStmtProto&
AnyResolvedStatementProto::_Internal::resolved_clone_data_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_clone_data_stmt_node_;
}
const ::zetasql::ResolvedAnalyzeStmtProto&
AnyResolvedStatementProto::_Internal::resolved_analyze_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_analyze_stmt_node_;
}
const ::zetasql::ResolvedDropSnapshotTableStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_snapshot_table_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_drop_snapshot_table_stmt_node_;
}
const ::zetasql::ResolvedAuxLoadDataStmtProto&
AnyResolvedStatementProto::_Internal::resolved_aux_load_data_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_aux_load_data_stmt_node_;
}
const ::zetasql::ResolvedDropSearchIndexStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_search_index_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_drop_search_index_stmt_node_;
}
const ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_privilege_restriction_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->_impl_.node_.resolved_drop_privilege_restriction_stmt_node_;
}
void AnyResolvedStatementProto::set_allocated_resolved_explain_stmt_node(::zetasql::ResolvedExplainStmtProto* resolved_explain_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_explain_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_explain_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_explain_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_explain_stmt_node, submessage_arena);
    }
    set_has_resolved_explain_stmt_node();
    _impl_.node_.resolved_explain_stmt_node_ = resolved_explain_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_explain_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_query_stmt_node(::zetasql::ResolvedQueryStmtProto* resolved_query_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_query_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_query_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_query_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_query_stmt_node, submessage_arena);
    }
    set_has_resolved_query_stmt_node();
    _impl_.node_.resolved_query_stmt_node_ = resolved_query_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_query_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_create_statement_node(::zetasql::AnyResolvedCreateStatementProto* resolved_create_statement_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_statement_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_statement_node);
    if (message_arena != submessage_arena) {
      resolved_create_statement_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_statement_node, submessage_arena);
    }
    set_has_resolved_create_statement_node();
    _impl_.node_.resolved_create_statement_node_ = resolved_create_statement_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_create_statement_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_export_data_stmt_node(::zetasql::ResolvedExportDataStmtProto* resolved_export_data_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_export_data_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_export_data_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_export_data_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_export_data_stmt_node, submessage_arena);
    }
    set_has_resolved_export_data_stmt_node();
    _impl_.node_.resolved_export_data_stmt_node_ = resolved_export_data_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_export_data_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_define_table_stmt_node(::zetasql::ResolvedDefineTableStmtProto* resolved_define_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_define_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_define_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_define_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_define_table_stmt_node, submessage_arena);
    }
    set_has_resolved_define_table_stmt_node();
    _impl_.node_.resolved_define_table_stmt_node_ = resolved_define_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_define_table_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_describe_stmt_node(::zetasql::ResolvedDescribeStmtProto* resolved_describe_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_describe_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_describe_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_describe_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_describe_stmt_node, submessage_arena);
    }
    set_has_resolved_describe_stmt_node();
    _impl_.node_.resolved_describe_stmt_node_ = resolved_describe_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_describe_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_show_stmt_node(::zetasql::ResolvedShowStmtProto* resolved_show_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_show_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_show_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_show_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_show_stmt_node, submessage_arena);
    }
    set_has_resolved_show_stmt_node();
    _impl_.node_.resolved_show_stmt_node_ = resolved_show_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_show_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_begin_stmt_node(::zetasql::ResolvedBeginStmtProto* resolved_begin_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_begin_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_begin_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_begin_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_begin_stmt_node, submessage_arena);
    }
    set_has_resolved_begin_stmt_node();
    _impl_.node_.resolved_begin_stmt_node_ = resolved_begin_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_begin_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_commit_stmt_node(::zetasql::ResolvedCommitStmtProto* resolved_commit_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_commit_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_commit_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_commit_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_commit_stmt_node, submessage_arena);
    }
    set_has_resolved_commit_stmt_node();
    _impl_.node_.resolved_commit_stmt_node_ = resolved_commit_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_commit_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_rollback_stmt_node(::zetasql::ResolvedRollbackStmtProto* resolved_rollback_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_rollback_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_rollback_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_rollback_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_rollback_stmt_node, submessage_arena);
    }
    set_has_resolved_rollback_stmt_node();
    _impl_.node_.resolved_rollback_stmt_node_ = resolved_rollback_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_rollback_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_stmt_node(::zetasql::ResolvedDropStmtProto* resolved_drop_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_stmt_node();
    _impl_.node_.resolved_drop_stmt_node_ = resolved_drop_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_insert_stmt_node(::zetasql::ResolvedInsertStmtProto* resolved_insert_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_insert_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_insert_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_insert_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_insert_stmt_node, submessage_arena);
    }
    set_has_resolved_insert_stmt_node();
    _impl_.node_.resolved_insert_stmt_node_ = resolved_insert_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_insert_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_delete_stmt_node(::zetasql::ResolvedDeleteStmtProto* resolved_delete_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_delete_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_delete_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_delete_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_delete_stmt_node, submessage_arena);
    }
    set_has_resolved_delete_stmt_node();
    _impl_.node_.resolved_delete_stmt_node_ = resolved_delete_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_delete_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_update_stmt_node(::zetasql::ResolvedUpdateStmtProto* resolved_update_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_update_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_update_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_update_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_update_stmt_node, submessage_arena);
    }
    set_has_resolved_update_stmt_node();
    _impl_.node_.resolved_update_stmt_node_ = resolved_update_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_update_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_grant_or_revoke_stmt_node(::zetasql::AnyResolvedGrantOrRevokeStmtProto* resolved_grant_or_revoke_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_grant_or_revoke_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_grant_or_revoke_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_grant_or_revoke_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_grant_or_revoke_stmt_node, submessage_arena);
    }
    set_has_resolved_grant_or_revoke_stmt_node();
    _impl_.node_.resolved_grant_or_revoke_stmt_node_ = resolved_grant_or_revoke_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_grant_or_revoke_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_alter_table_set_options_stmt_node(::zetasql::ResolvedAlterTableSetOptionsStmtProto* resolved_alter_table_set_options_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_table_set_options_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_table_set_options_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_table_set_options_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_table_set_options_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_table_set_options_stmt_node();
    _impl_.node_.resolved_alter_table_set_options_stmt_node_ = resolved_alter_table_set_options_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_alter_table_set_options_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_rename_stmt_node(::zetasql::ResolvedRenameStmtProto* resolved_rename_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_rename_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_rename_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_rename_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_rename_stmt_node, submessage_arena);
    }
    set_has_resolved_rename_stmt_node();
    _impl_.node_.resolved_rename_stmt_node_ = resolved_rename_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_rename_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_create_row_access_policy_stmt_node(::zetasql::ResolvedCreateRowAccessPolicyStmtProto* resolved_create_row_access_policy_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_row_access_policy_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_row_access_policy_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_row_access_policy_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_row_access_policy_stmt_node, submessage_arena);
    }
    set_has_resolved_create_row_access_policy_stmt_node();
    _impl_.node_.resolved_create_row_access_policy_stmt_node_ = resolved_create_row_access_policy_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_create_row_access_policy_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_row_access_policy_stmt_node(::zetasql::ResolvedDropRowAccessPolicyStmtProto* resolved_drop_row_access_policy_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_row_access_policy_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_row_access_policy_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_row_access_policy_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_row_access_policy_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_row_access_policy_stmt_node();
    _impl_.node_.resolved_drop_row_access_policy_stmt_node_ = resolved_drop_row_access_policy_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_row_access_policy_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_function_stmt_node(::zetasql::ResolvedDropFunctionStmtProto* resolved_drop_function_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_function_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_function_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_function_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_function_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_function_stmt_node();
    _impl_.node_.resolved_drop_function_stmt_node_ = resolved_drop_function_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_function_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_call_stmt_node(::zetasql::ResolvedCallStmtProto* resolved_call_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_call_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_call_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_call_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_call_stmt_node, submessage_arena);
    }
    set_has_resolved_call_stmt_node();
    _impl_.node_.resolved_call_stmt_node_ = resolved_call_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_call_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_import_stmt_node(::zetasql::ResolvedImportStmtProto* resolved_import_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_import_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_import_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_import_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_import_stmt_node, submessage_arena);
    }
    set_has_resolved_import_stmt_node();
    _impl_.node_.resolved_import_stmt_node_ = resolved_import_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_import_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_module_stmt_node(::zetasql::ResolvedModuleStmtProto* resolved_module_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_module_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_module_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_module_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_module_stmt_node, submessage_arena);
    }
    set_has_resolved_module_stmt_node();
    _impl_.node_.resolved_module_stmt_node_ = resolved_module_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_module_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_create_database_stmt_node(::zetasql::ResolvedCreateDatabaseStmtProto* resolved_create_database_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_database_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_database_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_database_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_database_stmt_node, submessage_arena);
    }
    set_has_resolved_create_database_stmt_node();
    _impl_.node_.resolved_create_database_stmt_node_ = resolved_create_database_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_create_database_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_assert_stmt_node(::zetasql::ResolvedAssertStmtProto* resolved_assert_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_assert_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_assert_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_assert_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_assert_stmt_node, submessage_arena);
    }
    set_has_resolved_assert_stmt_node();
    _impl_.node_.resolved_assert_stmt_node_ = resolved_assert_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_assert_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_merge_stmt_node(::zetasql::ResolvedMergeStmtProto* resolved_merge_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_merge_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_merge_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_merge_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_merge_stmt_node, submessage_arena);
    }
    set_has_resolved_merge_stmt_node();
    _impl_.node_.resolved_merge_stmt_node_ = resolved_merge_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_merge_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_alter_object_stmt_node(::zetasql::AnyResolvedAlterObjectStmtProto* resolved_alter_object_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_object_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_object_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_object_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_object_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_object_stmt_node();
    _impl_.node_.resolved_alter_object_stmt_node_ = resolved_alter_object_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_alter_object_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_set_transaction_stmt_node(::zetasql::ResolvedSetTransactionStmtProto* resolved_set_transaction_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_transaction_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_set_transaction_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_set_transaction_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_transaction_stmt_node, submessage_arena);
    }
    set_has_resolved_set_transaction_stmt_node();
    _impl_.node_.resolved_set_transaction_stmt_node_ = resolved_set_transaction_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_set_transaction_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_materialized_view_stmt_node(::zetasql::ResolvedDropMaterializedViewStmtProto* resolved_drop_materialized_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_materialized_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_materialized_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_materialized_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_materialized_view_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_materialized_view_stmt_node();
    _impl_.node_.resolved_drop_materialized_view_stmt_node_ = resolved_drop_materialized_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_materialized_view_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_start_batch_stmt_node(::zetasql::ResolvedStartBatchStmtProto* resolved_start_batch_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_start_batch_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_start_batch_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_start_batch_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_start_batch_stmt_node, submessage_arena);
    }
    set_has_resolved_start_batch_stmt_node();
    _impl_.node_.resolved_start_batch_stmt_node_ = resolved_start_batch_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_start_batch_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_run_batch_stmt_node(::zetasql::ResolvedRunBatchStmtProto* resolved_run_batch_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_run_batch_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_run_batch_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_run_batch_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_run_batch_stmt_node, submessage_arena);
    }
    set_has_resolved_run_batch_stmt_node();
    _impl_.node_.resolved_run_batch_stmt_node_ = resolved_run_batch_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_run_batch_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_abort_batch_stmt_node(::zetasql::ResolvedAbortBatchStmtProto* resolved_abort_batch_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_abort_batch_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_abort_batch_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_abort_batch_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_abort_batch_stmt_node, submessage_arena);
    }
    set_has_resolved_abort_batch_stmt_node();
    _impl_.node_.resolved_abort_batch_stmt_node_ = resolved_abort_batch_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_abort_batch_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_truncate_stmt_node(::zetasql::ResolvedTruncateStmtProto* resolved_truncate_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_truncate_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_truncate_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_truncate_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_truncate_stmt_node, submessage_arena);
    }
    set_has_resolved_truncate_stmt_node();
    _impl_.node_.resolved_truncate_stmt_node_ = resolved_truncate_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_truncate_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_execute_immediate_stmt_node(::zetasql::ResolvedExecuteImmediateStmtProto* resolved_execute_immediate_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_execute_immediate_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_execute_immediate_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_execute_immediate_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_execute_immediate_stmt_node, submessage_arena);
    }
    set_has_resolved_execute_immediate_stmt_node();
    _impl_.node_.resolved_execute_immediate_stmt_node_ = resolved_execute_immediate_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_execute_immediate_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_assignment_stmt_node(::zetasql::ResolvedAssignmentStmtProto* resolved_assignment_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_assignment_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_assignment_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_assignment_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_assignment_stmt_node, submessage_arena);
    }
    set_has_resolved_assignment_stmt_node();
    _impl_.node_.resolved_assignment_stmt_node_ = resolved_assignment_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_assignment_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_export_model_stmt_node(::zetasql::ResolvedExportModelStmtProto* resolved_export_model_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_export_model_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_export_model_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_export_model_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_export_model_stmt_node, submessage_arena);
    }
    set_has_resolved_export_model_stmt_node();
    _impl_.node_.resolved_export_model_stmt_node_ = resolved_export_model_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_export_model_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_table_function_stmt_node(::zetasql::ResolvedDropTableFunctionStmtProto* resolved_drop_table_function_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_table_function_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_table_function_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_table_function_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_table_function_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_table_function_stmt_node();
    _impl_.node_.resolved_drop_table_function_stmt_node_ = resolved_drop_table_function_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_table_function_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_clone_data_stmt_node(::zetasql::ResolvedCloneDataStmtProto* resolved_clone_data_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_clone_data_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_clone_data_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_clone_data_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_clone_data_stmt_node, submessage_arena);
    }
    set_has_resolved_clone_data_stmt_node();
    _impl_.node_.resolved_clone_data_stmt_node_ = resolved_clone_data_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_clone_data_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_analyze_stmt_node(::zetasql::ResolvedAnalyzeStmtProto* resolved_analyze_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_analyze_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_analyze_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_analyze_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_analyze_stmt_node, submessage_arena);
    }
    set_has_resolved_analyze_stmt_node();
    _impl_.node_.resolved_analyze_stmt_node_ = resolved_analyze_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_analyze_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_snapshot_table_stmt_node(::zetasql::ResolvedDropSnapshotTableStmtProto* resolved_drop_snapshot_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_snapshot_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_snapshot_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_snapshot_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_snapshot_table_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_snapshot_table_stmt_node();
    _impl_.node_.resolved_drop_snapshot_table_stmt_node_ = resolved_drop_snapshot_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_snapshot_table_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_aux_load_data_stmt_node(::zetasql::ResolvedAuxLoadDataStmtProto* resolved_aux_load_data_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aux_load_data_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_aux_load_data_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_aux_load_data_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aux_load_data_stmt_node, submessage_arena);
    }
    set_has_resolved_aux_load_data_stmt_node();
    _impl_.node_.resolved_aux_load_data_stmt_node_ = resolved_aux_load_data_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_aux_load_data_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_search_index_stmt_node(::zetasql::ResolvedDropSearchIndexStmtProto* resolved_drop_search_index_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_search_index_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_search_index_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_search_index_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_search_index_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_search_index_stmt_node();
    _impl_.node_.resolved_drop_search_index_stmt_node_ = resolved_drop_search_index_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_search_index_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_privilege_restriction_stmt_node(::zetasql::ResolvedDropPrivilegeRestrictionStmtProto* resolved_drop_privilege_restriction_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_privilege_restriction_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_privilege_restriction_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_privilege_restriction_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_privilege_restriction_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_privilege_restriction_stmt_node();
    _impl_.node_.resolved_drop_privilege_restriction_stmt_node_ = resolved_drop_privilege_restriction_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_privilege_restriction_stmt_node)
}
AnyResolvedStatementProto::AnyResolvedStatementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedStatementProto)
}
AnyResolvedStatementProto::AnyResolvedStatementProto(const AnyResolvedStatementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedStatementProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedExplainStmtNode: {
      _this->_internal_mutable_resolved_explain_stmt_node()->::zetasql::ResolvedExplainStmtProto::MergeFrom(
          from._internal_resolved_explain_stmt_node());
      break;
    }
    case kResolvedQueryStmtNode: {
      _this->_internal_mutable_resolved_query_stmt_node()->::zetasql::ResolvedQueryStmtProto::MergeFrom(
          from._internal_resolved_query_stmt_node());
      break;
    }
    case kResolvedCreateStatementNode: {
      _this->_internal_mutable_resolved_create_statement_node()->::zetasql::AnyResolvedCreateStatementProto::MergeFrom(
          from._internal_resolved_create_statement_node());
      break;
    }
    case kResolvedExportDataStmtNode: {
      _this->_internal_mutable_resolved_export_data_stmt_node()->::zetasql::ResolvedExportDataStmtProto::MergeFrom(
          from._internal_resolved_export_data_stmt_node());
      break;
    }
    case kResolvedDefineTableStmtNode: {
      _this->_internal_mutable_resolved_define_table_stmt_node()->::zetasql::ResolvedDefineTableStmtProto::MergeFrom(
          from._internal_resolved_define_table_stmt_node());
      break;
    }
    case kResolvedDescribeStmtNode: {
      _this->_internal_mutable_resolved_describe_stmt_node()->::zetasql::ResolvedDescribeStmtProto::MergeFrom(
          from._internal_resolved_describe_stmt_node());
      break;
    }
    case kResolvedShowStmtNode: {
      _this->_internal_mutable_resolved_show_stmt_node()->::zetasql::ResolvedShowStmtProto::MergeFrom(
          from._internal_resolved_show_stmt_node());
      break;
    }
    case kResolvedBeginStmtNode: {
      _this->_internal_mutable_resolved_begin_stmt_node()->::zetasql::ResolvedBeginStmtProto::MergeFrom(
          from._internal_resolved_begin_stmt_node());
      break;
    }
    case kResolvedCommitStmtNode: {
      _this->_internal_mutable_resolved_commit_stmt_node()->::zetasql::ResolvedCommitStmtProto::MergeFrom(
          from._internal_resolved_commit_stmt_node());
      break;
    }
    case kResolvedRollbackStmtNode: {
      _this->_internal_mutable_resolved_rollback_stmt_node()->::zetasql::ResolvedRollbackStmtProto::MergeFrom(
          from._internal_resolved_rollback_stmt_node());
      break;
    }
    case kResolvedDropStmtNode: {
      _this->_internal_mutable_resolved_drop_stmt_node()->::zetasql::ResolvedDropStmtProto::MergeFrom(
          from._internal_resolved_drop_stmt_node());
      break;
    }
    case kResolvedInsertStmtNode: {
      _this->_internal_mutable_resolved_insert_stmt_node()->::zetasql::ResolvedInsertStmtProto::MergeFrom(
          from._internal_resolved_insert_stmt_node());
      break;
    }
    case kResolvedDeleteStmtNode: {
      _this->_internal_mutable_resolved_delete_stmt_node()->::zetasql::ResolvedDeleteStmtProto::MergeFrom(
          from._internal_resolved_delete_stmt_node());
      break;
    }
    case kResolvedUpdateStmtNode: {
      _this->_internal_mutable_resolved_update_stmt_node()->::zetasql::ResolvedUpdateStmtProto::MergeFrom(
          from._internal_resolved_update_stmt_node());
      break;
    }
    case kResolvedGrantOrRevokeStmtNode: {
      _this->_internal_mutable_resolved_grant_or_revoke_stmt_node()->::zetasql::AnyResolvedGrantOrRevokeStmtProto::MergeFrom(
          from._internal_resolved_grant_or_revoke_stmt_node());
      break;
    }
    case kResolvedAlterTableSetOptionsStmtNode: {
      _this->_internal_mutable_resolved_alter_table_set_options_stmt_node()->::zetasql::ResolvedAlterTableSetOptionsStmtProto::MergeFrom(
          from._internal_resolved_alter_table_set_options_stmt_node());
      break;
    }
    case kResolvedRenameStmtNode: {
      _this->_internal_mutable_resolved_rename_stmt_node()->::zetasql::ResolvedRenameStmtProto::MergeFrom(
          from._internal_resolved_rename_stmt_node());
      break;
    }
    case kResolvedCreateRowAccessPolicyStmtNode: {
      _this->_internal_mutable_resolved_create_row_access_policy_stmt_node()->::zetasql::ResolvedCreateRowAccessPolicyStmtProto::MergeFrom(
          from._internal_resolved_create_row_access_policy_stmt_node());
      break;
    }
    case kResolvedDropRowAccessPolicyStmtNode: {
      _this->_internal_mutable_resolved_drop_row_access_policy_stmt_node()->::zetasql::ResolvedDropRowAccessPolicyStmtProto::MergeFrom(
          from._internal_resolved_drop_row_access_policy_stmt_node());
      break;
    }
    case kResolvedDropFunctionStmtNode: {
      _this->_internal_mutable_resolved_drop_function_stmt_node()->::zetasql::ResolvedDropFunctionStmtProto::MergeFrom(
          from._internal_resolved_drop_function_stmt_node());
      break;
    }
    case kResolvedCallStmtNode: {
      _this->_internal_mutable_resolved_call_stmt_node()->::zetasql::ResolvedCallStmtProto::MergeFrom(
          from._internal_resolved_call_stmt_node());
      break;
    }
    case kResolvedImportStmtNode: {
      _this->_internal_mutable_resolved_import_stmt_node()->::zetasql::ResolvedImportStmtProto::MergeFrom(
          from._internal_resolved_import_stmt_node());
      break;
    }
    case kResolvedModuleStmtNode: {
      _this->_internal_mutable_resolved_module_stmt_node()->::zetasql::ResolvedModuleStmtProto::MergeFrom(
          from._internal_resolved_module_stmt_node());
      break;
    }
    case kResolvedCreateDatabaseStmtNode: {
      _this->_internal_mutable_resolved_create_database_stmt_node()->::zetasql::ResolvedCreateDatabaseStmtProto::MergeFrom(
          from._internal_resolved_create_database_stmt_node());
      break;
    }
    case kResolvedAssertStmtNode: {
      _this->_internal_mutable_resolved_assert_stmt_node()->::zetasql::ResolvedAssertStmtProto::MergeFrom(
          from._internal_resolved_assert_stmt_node());
      break;
    }
    case kResolvedMergeStmtNode: {
      _this->_internal_mutable_resolved_merge_stmt_node()->::zetasql::ResolvedMergeStmtProto::MergeFrom(
          from._internal_resolved_merge_stmt_node());
      break;
    }
    case kResolvedAlterObjectStmtNode: {
      _this->_internal_mutable_resolved_alter_object_stmt_node()->::zetasql::AnyResolvedAlterObjectStmtProto::MergeFrom(
          from._internal_resolved_alter_object_stmt_node());
      break;
    }
    case kResolvedSetTransactionStmtNode: {
      _this->_internal_mutable_resolved_set_transaction_stmt_node()->::zetasql::ResolvedSetTransactionStmtProto::MergeFrom(
          from._internal_resolved_set_transaction_stmt_node());
      break;
    }
    case kResolvedDropMaterializedViewStmtNode: {
      _this->_internal_mutable_resolved_drop_materialized_view_stmt_node()->::zetasql::ResolvedDropMaterializedViewStmtProto::MergeFrom(
          from._internal_resolved_drop_materialized_view_stmt_node());
      break;
    }
    case kResolvedStartBatchStmtNode: {
      _this->_internal_mutable_resolved_start_batch_stmt_node()->::zetasql::ResolvedStartBatchStmtProto::MergeFrom(
          from._internal_resolved_start_batch_stmt_node());
      break;
    }
    case kResolvedRunBatchStmtNode: {
      _this->_internal_mutable_resolved_run_batch_stmt_node()->::zetasql::ResolvedRunBatchStmtProto::MergeFrom(
          from._internal_resolved_run_batch_stmt_node());
      break;
    }
    case kResolvedAbortBatchStmtNode: {
      _this->_internal_mutable_resolved_abort_batch_stmt_node()->::zetasql::ResolvedAbortBatchStmtProto::MergeFrom(
          from._internal_resolved_abort_batch_stmt_node());
      break;
    }
    case kResolvedTruncateStmtNode: {
      _this->_internal_mutable_resolved_truncate_stmt_node()->::zetasql::ResolvedTruncateStmtProto::MergeFrom(
          from._internal_resolved_truncate_stmt_node());
      break;
    }
    case kResolvedExecuteImmediateStmtNode: {
      _this->_internal_mutable_resolved_execute_immediate_stmt_node()->::zetasql::ResolvedExecuteImmediateStmtProto::MergeFrom(
          from._internal_resolved_execute_immediate_stmt_node());
      break;
    }
    case kResolvedAssignmentStmtNode: {
      _this->_internal_mutable_resolved_assignment_stmt_node()->::zetasql::ResolvedAssignmentStmtProto::MergeFrom(
          from._internal_resolved_assignment_stmt_node());
      break;
    }
    case kResolvedExportModelStmtNode: {
      _this->_internal_mutable_resolved_export_model_stmt_node()->::zetasql::ResolvedExportModelStmtProto::MergeFrom(
          from._internal_resolved_export_model_stmt_node());
      break;
    }
    case kResolvedDropTableFunctionStmtNode: {
      _this->_internal_mutable_resolved_drop_table_function_stmt_node()->::zetasql::ResolvedDropTableFunctionStmtProto::MergeFrom(
          from._internal_resolved_drop_table_function_stmt_node());
      break;
    }
    case kResolvedCloneDataStmtNode: {
      _this->_internal_mutable_resolved_clone_data_stmt_node()->::zetasql::ResolvedCloneDataStmtProto::MergeFrom(
          from._internal_resolved_clone_data_stmt_node());
      break;
    }
    case kResolvedAnalyzeStmtNode: {
      _this->_internal_mutable_resolved_analyze_stmt_node()->::zetasql::ResolvedAnalyzeStmtProto::MergeFrom(
          from._internal_resolved_analyze_stmt_node());
      break;
    }
    case kResolvedDropSnapshotTableStmtNode: {
      _this->_internal_mutable_resolved_drop_snapshot_table_stmt_node()->::zetasql::ResolvedDropSnapshotTableStmtProto::MergeFrom(
          from._internal_resolved_drop_snapshot_table_stmt_node());
      break;
    }
    case kResolvedAuxLoadDataStmtNode: {
      _this->_internal_mutable_resolved_aux_load_data_stmt_node()->::zetasql::ResolvedAuxLoadDataStmtProto::MergeFrom(
          from._internal_resolved_aux_load_data_stmt_node());
      break;
    }
    case kResolvedDropSearchIndexStmtNode: {
      _this->_internal_mutable_resolved_drop_search_index_stmt_node()->::zetasql::ResolvedDropSearchIndexStmtProto::MergeFrom(
          from._internal_resolved_drop_search_index_stmt_node());
      break;
    }
    case kResolvedDropPrivilegeRestrictionStmtNode: {
      _this->_internal_mutable_resolved_drop_privilege_restriction_stmt_node()->::zetasql::ResolvedDropPrivilegeRestrictionStmtProto::MergeFrom(
          from._internal_resolved_drop_privilege_restriction_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedStatementProto)
}

inline void AnyResolvedStatementProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedStatementProto::~AnyResolvedStatementProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedStatementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedStatementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedStatementProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedStatementProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedStatementProto)
  switch (node_case()) {
    case kResolvedExplainStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_explain_stmt_node_;
      }
      break;
    }
    case kResolvedQueryStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_query_stmt_node_;
      }
      break;
    }
    case kResolvedCreateStatementNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_statement_node_;
      }
      break;
    }
    case kResolvedExportDataStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_export_data_stmt_node_;
      }
      break;
    }
    case kResolvedDefineTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_define_table_stmt_node_;
      }
      break;
    }
    case kResolvedDescribeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_describe_stmt_node_;
      }
      break;
    }
    case kResolvedShowStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_show_stmt_node_;
      }
      break;
    }
    case kResolvedBeginStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_begin_stmt_node_;
      }
      break;
    }
    case kResolvedCommitStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_commit_stmt_node_;
      }
      break;
    }
    case kResolvedRollbackStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_rollback_stmt_node_;
      }
      break;
    }
    case kResolvedDropStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_stmt_node_;
      }
      break;
    }
    case kResolvedInsertStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_insert_stmt_node_;
      }
      break;
    }
    case kResolvedDeleteStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_delete_stmt_node_;
      }
      break;
    }
    case kResolvedUpdateStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_update_stmt_node_;
      }
      break;
    }
    case kResolvedGrantOrRevokeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_grant_or_revoke_stmt_node_;
      }
      break;
    }
    case kResolvedAlterTableSetOptionsStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_table_set_options_stmt_node_;
      }
      break;
    }
    case kResolvedRenameStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_rename_stmt_node_;
      }
      break;
    }
    case kResolvedCreateRowAccessPolicyStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_row_access_policy_stmt_node_;
      }
      break;
    }
    case kResolvedDropRowAccessPolicyStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_row_access_policy_stmt_node_;
      }
      break;
    }
    case kResolvedDropFunctionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_function_stmt_node_;
      }
      break;
    }
    case kResolvedCallStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_call_stmt_node_;
      }
      break;
    }
    case kResolvedImportStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_import_stmt_node_;
      }
      break;
    }
    case kResolvedModuleStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_module_stmt_node_;
      }
      break;
    }
    case kResolvedCreateDatabaseStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_database_stmt_node_;
      }
      break;
    }
    case kResolvedAssertStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_assert_stmt_node_;
      }
      break;
    }
    case kResolvedMergeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_merge_stmt_node_;
      }
      break;
    }
    case kResolvedAlterObjectStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_object_stmt_node_;
      }
      break;
    }
    case kResolvedSetTransactionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_set_transaction_stmt_node_;
      }
      break;
    }
    case kResolvedDropMaterializedViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_materialized_view_stmt_node_;
      }
      break;
    }
    case kResolvedStartBatchStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_start_batch_stmt_node_;
      }
      break;
    }
    case kResolvedRunBatchStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_run_batch_stmt_node_;
      }
      break;
    }
    case kResolvedAbortBatchStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_abort_batch_stmt_node_;
      }
      break;
    }
    case kResolvedTruncateStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_truncate_stmt_node_;
      }
      break;
    }
    case kResolvedExecuteImmediateStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_execute_immediate_stmt_node_;
      }
      break;
    }
    case kResolvedAssignmentStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_assignment_stmt_node_;
      }
      break;
    }
    case kResolvedExportModelStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_export_model_stmt_node_;
      }
      break;
    }
    case kResolvedDropTableFunctionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_table_function_stmt_node_;
      }
      break;
    }
    case kResolvedCloneDataStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_clone_data_stmt_node_;
      }
      break;
    }
    case kResolvedAnalyzeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_analyze_stmt_node_;
      }
      break;
    }
    case kResolvedDropSnapshotTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_snapshot_table_stmt_node_;
      }
      break;
    }
    case kResolvedAuxLoadDataStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_aux_load_data_stmt_node_;
      }
      break;
    }
    case kResolvedDropSearchIndexStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_search_index_stmt_node_;
      }
      break;
    }
    case kResolvedDropPrivilegeRestrictionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_privilege_restriction_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedStatementProto::InternalSwap(AnyResolvedStatementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedStatementProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[75]);
}

// ===================================================================

class ResolvedStatementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedStatementProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedNodeProto& parent(const ResolvedStatementProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedNodeProto&
ResolvedStatementProto::_Internal::parent(const ResolvedStatementProto* msg) {
  return *msg->_impl_.parent_;
}
void ResolvedStatementProto::clear_parent() {
  if (_impl_.parent_ != nullptr) _impl_.parent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ResolvedStatementProto::ResolvedStatementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedStatementProto)
}
ResolvedStatementProto::ResolvedStatementProto(const ResolvedStatementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedStatementProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hint_list_){from._impl_.hint_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedNodeProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedStatementProto)
}

inline void ResolvedStatementProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hint_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedStatementProto::~ResolvedStatementProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedStatementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedStatementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hint_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedStatementProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedStatementProto::InternalSwap(ResolvedStatementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedStatementProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[76]);
}

// ===================================================================

class ResolvedExplainStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExplainStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedExplainStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedStatementProto& statement(const ResolvedExplainStmtProto* msg);
  static void set_has_statement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedExplainStmtProto::_Internal::parent(const ResolvedExplainStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedStatementProto&
ResolvedExplainStmtProto::_Internal::statement(const ResolvedExplainStmtProto* msg) {
  return *msg->_impl_.statement_;
}
ResolvedExplainStmtProto::ResolvedExplainStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExplainStmtProto)
}
ResolvedExplainStmtProto::ResolvedExplainStmtProto(const ResolvedExplainStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedExplainStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.statement_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_statement()) {
    _this->_impl_.statement_ = new ::zetasql::AnyResolvedStatementProto(*from._impl_.statement_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExplainStmtProto)
}

inline void ResolvedExplainStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.statement_){nullptr}
  };
}

ResolvedExplainStmtProto::~ResolvedExplainStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExplainStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedExplainStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.statement_;
}

void ResolvedExplainStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedExplainStmtProto::InternalSwap(ResolvedExplainStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExplainStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[77]);
}

// ===================================================================

class ResolvedQueryStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedQueryStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedQueryStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedQueryStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedQueryStmtProto::_Internal::parent(const ResolvedQueryStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedQueryStmtProto::_Internal::query(const ResolvedQueryStmtProto* msg) {
  return *msg->_impl_.query_;
}
ResolvedQueryStmtProto::ResolvedQueryStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedQueryStmtProto)
}
ResolvedQueryStmtProto::ResolvedQueryStmtProto(const ResolvedQueryStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedQueryStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_column_list_){from._impl_.output_column_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.is_value_table_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.query_);
  }
  _this->_impl_.is_value_table_ = from._impl_.is_value_table_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedQueryStmtProto)
}

inline void ResolvedQueryStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.is_value_table_){false}
  };
}

ResolvedQueryStmtProto::~ResolvedQueryStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedQueryStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedQueryStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.query_;
}

void ResolvedQueryStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedQueryStmtProto::InternalSwap(ResolvedQueryStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedQueryStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[78]);
}

// ===================================================================

class ResolvedCreateDatabaseStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateDatabaseStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCreateDatabaseStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCreateDatabaseStmtProto::_Internal::parent(const ResolvedCreateDatabaseStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedCreateDatabaseStmtProto::ResolvedCreateDatabaseStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateDatabaseStmtProto)
}
ResolvedCreateDatabaseStmtProto::ResolvedCreateDatabaseStmtProto(const ResolvedCreateDatabaseStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateDatabaseStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateDatabaseStmtProto)
}

inline void ResolvedCreateDatabaseStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedCreateDatabaseStmtProto::~ResolvedCreateDatabaseStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateDatabaseStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateDatabaseStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedCreateDatabaseStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateDatabaseStmtProto::InternalSwap(ResolvedCreateDatabaseStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateDatabaseStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[79]);
}

// ===================================================================

class AnyResolvedCreateStatementProto::_Internal {
 public:
  static const ::zetasql::ResolvedCreateFunctionStmtProto& resolved_create_function_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateTableFunctionStmtProto& resolved_create_table_function_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateIndexStmtProto& resolved_create_index_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateConstantStmtProto& resolved_create_constant_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::AnyResolvedCreateTableStmtBaseProto& resolved_create_table_stmt_base_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateModelStmtProto& resolved_create_model_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::AnyResolvedCreateViewBaseProto& resolved_create_view_base_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateProcedureStmtProto& resolved_create_procedure_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateEntityStmtProto& resolved_create_entity_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateSchemaStmtProto& resolved_create_schema_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateSnapshotTableStmtProto& resolved_create_snapshot_table_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto& resolved_create_privilege_restriction_stmt_node(const AnyResolvedCreateStatementProto* msg);
};

const ::zetasql::ResolvedCreateFunctionStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_function_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_function_stmt_node_;
}
const ::zetasql::ResolvedCreateTableFunctionStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_table_function_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_table_function_stmt_node_;
}
const ::zetasql::ResolvedCreateIndexStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_index_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_index_stmt_node_;
}
const ::zetasql::ResolvedCreateConstantStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_constant_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_constant_stmt_node_;
}
const ::zetasql::AnyResolvedCreateTableStmtBaseProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_table_stmt_base_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_table_stmt_base_node_;
}
const ::zetasql::ResolvedCreateModelStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_model_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_model_stmt_node_;
}
const ::zetasql::AnyResolvedCreateViewBaseProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_view_base_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_view_base_node_;
}
const ::zetasql::ResolvedCreateProcedureStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_procedure_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_procedure_stmt_node_;
}
const ::zetasql::ResolvedCreateEntityStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_entity_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_entity_stmt_node_;
}
const ::zetasql::ResolvedCreateSchemaStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_schema_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_schema_stmt_node_;
}
const ::zetasql::ResolvedCreateSnapshotTableStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_snapshot_table_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_snapshot_table_stmt_node_;
}
const ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_privilege_restriction_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->_impl_.node_.resolved_create_privilege_restriction_stmt_node_;
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_function_stmt_node(::zetasql::ResolvedCreateFunctionStmtProto* resolved_create_function_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_function_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_function_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_function_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_function_stmt_node, submessage_arena);
    }
    set_has_resolved_create_function_stmt_node();
    _impl_.node_.resolved_create_function_stmt_node_ = resolved_create_function_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_function_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_table_function_stmt_node(::zetasql::ResolvedCreateTableFunctionStmtProto* resolved_create_table_function_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_table_function_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_table_function_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_table_function_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_table_function_stmt_node, submessage_arena);
    }
    set_has_resolved_create_table_function_stmt_node();
    _impl_.node_.resolved_create_table_function_stmt_node_ = resolved_create_table_function_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_function_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_index_stmt_node(::zetasql::ResolvedCreateIndexStmtProto* resolved_create_index_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_index_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_index_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_index_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_index_stmt_node, submessage_arena);
    }
    set_has_resolved_create_index_stmt_node();
    _impl_.node_.resolved_create_index_stmt_node_ = resolved_create_index_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_index_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_constant_stmt_node(::zetasql::ResolvedCreateConstantStmtProto* resolved_create_constant_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_constant_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_constant_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_constant_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_constant_stmt_node, submessage_arena);
    }
    set_has_resolved_create_constant_stmt_node();
    _impl_.node_.resolved_create_constant_stmt_node_ = resolved_create_constant_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_constant_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_table_stmt_base_node(::zetasql::AnyResolvedCreateTableStmtBaseProto* resolved_create_table_stmt_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_table_stmt_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_table_stmt_base_node);
    if (message_arena != submessage_arena) {
      resolved_create_table_stmt_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_table_stmt_base_node, submessage_arena);
    }
    set_has_resolved_create_table_stmt_base_node();
    _impl_.node_.resolved_create_table_stmt_base_node_ = resolved_create_table_stmt_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_stmt_base_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_model_stmt_node(::zetasql::ResolvedCreateModelStmtProto* resolved_create_model_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_model_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_model_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_model_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_model_stmt_node, submessage_arena);
    }
    set_has_resolved_create_model_stmt_node();
    _impl_.node_.resolved_create_model_stmt_node_ = resolved_create_model_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_model_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_view_base_node(::zetasql::AnyResolvedCreateViewBaseProto* resolved_create_view_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_view_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_view_base_node);
    if (message_arena != submessage_arena) {
      resolved_create_view_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_view_base_node, submessage_arena);
    }
    set_has_resolved_create_view_base_node();
    _impl_.node_.resolved_create_view_base_node_ = resolved_create_view_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_view_base_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_procedure_stmt_node(::zetasql::ResolvedCreateProcedureStmtProto* resolved_create_procedure_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_procedure_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_procedure_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_procedure_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_procedure_stmt_node, submessage_arena);
    }
    set_has_resolved_create_procedure_stmt_node();
    _impl_.node_.resolved_create_procedure_stmt_node_ = resolved_create_procedure_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_procedure_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_entity_stmt_node(::zetasql::ResolvedCreateEntityStmtProto* resolved_create_entity_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_entity_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_entity_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_entity_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_entity_stmt_node, submessage_arena);
    }
    set_has_resolved_create_entity_stmt_node();
    _impl_.node_.resolved_create_entity_stmt_node_ = resolved_create_entity_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_entity_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_schema_stmt_node(::zetasql::ResolvedCreateSchemaStmtProto* resolved_create_schema_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_schema_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_schema_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_schema_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_schema_stmt_node, submessage_arena);
    }
    set_has_resolved_create_schema_stmt_node();
    _impl_.node_.resolved_create_schema_stmt_node_ = resolved_create_schema_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_schema_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_snapshot_table_stmt_node(::zetasql::ResolvedCreateSnapshotTableStmtProto* resolved_create_snapshot_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_snapshot_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_snapshot_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_snapshot_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_snapshot_table_stmt_node, submessage_arena);
    }
    set_has_resolved_create_snapshot_table_stmt_node();
    _impl_.node_.resolved_create_snapshot_table_stmt_node_ = resolved_create_snapshot_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_snapshot_table_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_privilege_restriction_stmt_node(::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto* resolved_create_privilege_restriction_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_privilege_restriction_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_privilege_restriction_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_privilege_restriction_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_privilege_restriction_stmt_node, submessage_arena);
    }
    set_has_resolved_create_privilege_restriction_stmt_node();
    _impl_.node_.resolved_create_privilege_restriction_stmt_node_ = resolved_create_privilege_restriction_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_privilege_restriction_stmt_node)
}
AnyResolvedCreateStatementProto::AnyResolvedCreateStatementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedCreateStatementProto)
}
AnyResolvedCreateStatementProto::AnyResolvedCreateStatementProto(const AnyResolvedCreateStatementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedCreateStatementProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedCreateFunctionStmtNode: {
      _this->_internal_mutable_resolved_create_function_stmt_node()->::zetasql::ResolvedCreateFunctionStmtProto::MergeFrom(
          from._internal_resolved_create_function_stmt_node());
      break;
    }
    case kResolvedCreateTableFunctionStmtNode: {
      _this->_internal_mutable_resolved_create_table_function_stmt_node()->::zetasql::ResolvedCreateTableFunctionStmtProto::MergeFrom(
          from._internal_resolved_create_table_function_stmt_node());
      break;
    }
    case kResolvedCreateIndexStmtNode: {
      _this->_internal_mutable_resolved_create_index_stmt_node()->::zetasql::ResolvedCreateIndexStmtProto::MergeFrom(
          from._internal_resolved_create_index_stmt_node());
      break;
    }
    case kResolvedCreateConstantStmtNode: {
      _this->_internal_mutable_resolved_create_constant_stmt_node()->::zetasql::ResolvedCreateConstantStmtProto::MergeFrom(
          from._internal_resolved_create_constant_stmt_node());
      break;
    }
    case kResolvedCreateTableStmtBaseNode: {
      _this->_internal_mutable_resolved_create_table_stmt_base_node()->::zetasql::AnyResolvedCreateTableStmtBaseProto::MergeFrom(
          from._internal_resolved_create_table_stmt_base_node());
      break;
    }
    case kResolvedCreateModelStmtNode: {
      _this->_internal_mutable_resolved_create_model_stmt_node()->::zetasql::ResolvedCreateModelStmtProto::MergeFrom(
          from._internal_resolved_create_model_stmt_node());
      break;
    }
    case kResolvedCreateViewBaseNode: {
      _this->_internal_mutable_resolved_create_view_base_node()->::zetasql::AnyResolvedCreateViewBaseProto::MergeFrom(
          from._internal_resolved_create_view_base_node());
      break;
    }
    case kResolvedCreateProcedureStmtNode: {
      _this->_internal_mutable_resolved_create_procedure_stmt_node()->::zetasql::ResolvedCreateProcedureStmtProto::MergeFrom(
          from._internal_resolved_create_procedure_stmt_node());
      break;
    }
    case kResolvedCreateEntityStmtNode: {
      _this->_internal_mutable_resolved_create_entity_stmt_node()->::zetasql::ResolvedCreateEntityStmtProto::MergeFrom(
          from._internal_resolved_create_entity_stmt_node());
      break;
    }
    case kResolvedCreateSchemaStmtNode: {
      _this->_internal_mutable_resolved_create_schema_stmt_node()->::zetasql::ResolvedCreateSchemaStmtProto::MergeFrom(
          from._internal_resolved_create_schema_stmt_node());
      break;
    }
    case kResolvedCreateSnapshotTableStmtNode: {
      _this->_internal_mutable_resolved_create_snapshot_table_stmt_node()->::zetasql::ResolvedCreateSnapshotTableStmtProto::MergeFrom(
          from._internal_resolved_create_snapshot_table_stmt_node());
      break;
    }
    case kResolvedCreatePrivilegeRestrictionStmtNode: {
      _this->_internal_mutable_resolved_create_privilege_restriction_stmt_node()->::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto::MergeFrom(
          from._internal_resolved_create_privilege_restriction_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedCreateStatementProto)
}

inline void AnyResolvedCreateStatementProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedCreateStatementProto::~AnyResolvedCreateStatementProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedCreateStatementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedCreateStatementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedCreateStatementProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedCreateStatementProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedCreateStatementProto)
  switch (node_case()) {
    case kResolvedCreateFunctionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_function_stmt_node_;
      }
      break;
    }
    case kResolvedCreateTableFunctionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_table_function_stmt_node_;
      }
      break;
    }
    case kResolvedCreateIndexStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_index_stmt_node_;
      }
      break;
    }
    case kResolvedCreateConstantStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_constant_stmt_node_;
      }
      break;
    }
    case kResolvedCreateTableStmtBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_table_stmt_base_node_;
      }
      break;
    }
    case kResolvedCreateModelStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_model_stmt_node_;
      }
      break;
    }
    case kResolvedCreateViewBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_view_base_node_;
      }
      break;
    }
    case kResolvedCreateProcedureStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_procedure_stmt_node_;
      }
      break;
    }
    case kResolvedCreateEntityStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_entity_stmt_node_;
      }
      break;
    }
    case kResolvedCreateSchemaStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_schema_stmt_node_;
      }
      break;
    }
    case kResolvedCreateSnapshotTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_snapshot_table_stmt_node_;
      }
      break;
    }
    case kResolvedCreatePrivilegeRestrictionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_privilege_restriction_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedCreateStatementProto::InternalSwap(AnyResolvedCreateStatementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedCreateStatementProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[80]);
}

// ===================================================================

class ResolvedCreateStatementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateStatementProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCreateStatementProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_create_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_create_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCreateStatementProto::_Internal::parent(const ResolvedCreateStatementProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedCreateStatementProto::ResolvedCreateStatementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateStatementProto)
}
ResolvedCreateStatementProto::ResolvedCreateStatementProto(const ResolvedCreateStatementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateStatementProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.create_mode_){}
    , decltype(_impl_.create_scope_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  ::memcpy(&_impl_.create_mode_, &from._impl_.create_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.create_scope_) -
    reinterpret_cast<char*>(&_impl_.create_mode_)) + sizeof(_impl_.create_scope_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateStatementProto)
}

inline void ResolvedCreateStatementProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.create_mode_){0}
    , decltype(_impl_.create_scope_){0}
  };
}

ResolvedCreateStatementProto::~ResolvedCreateStatementProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateStatementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateStatementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedCreateStatementProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateStatementProto::InternalSwap(ResolvedCreateStatementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateStatementProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[81]);
}

// ===================================================================

class ResolvedIndexItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedIndexItemProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedIndexItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnRefProto& column_ref(const ResolvedIndexItemProto* msg);
  static void set_has_column_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_descending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedIndexItemProto::_Internal::parent(const ResolvedIndexItemProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnRefProto&
ResolvedIndexItemProto::_Internal::column_ref(const ResolvedIndexItemProto* msg) {
  return *msg->_impl_.column_ref_;
}
ResolvedIndexItemProto::ResolvedIndexItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedIndexItemProto)
}
ResolvedIndexItemProto::ResolvedIndexItemProto(const ResolvedIndexItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedIndexItemProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_ref_){nullptr}
    , decltype(_impl_.descending_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_column_ref()) {
    _this->_impl_.column_ref_ = new ::zetasql::ResolvedColumnRefProto(*from._impl_.column_ref_);
  }
  _this->_impl_.descending_ = from._impl_.descending_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedIndexItemProto)
}

inline void ResolvedIndexItemProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_ref_){nullptr}
    , decltype(_impl_.descending_){false}
  };
}

ResolvedIndexItemProto::~ResolvedIndexItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedIndexItemProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedIndexItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.column_ref_;
}

void ResolvedIndexItemProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedIndexItemProto::InternalSwap(ResolvedIndexItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedIndexItemProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[82]);
}

// ===================================================================

class ResolvedUnnestItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUnnestItemProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedUnnestItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& array_expr(const ResolvedUnnestItemProto* msg);
  static void set_has_array_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedColumnProto& element_column(const ResolvedUnnestItemProto* msg);
  static void set_has_element_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& array_offset_column(const ResolvedUnnestItemProto* msg);
  static void set_has_array_offset_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedUnnestItemProto::_Internal::parent(const ResolvedUnnestItemProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedUnnestItemProto::_Internal::array_expr(const ResolvedUnnestItemProto* msg) {
  return *msg->_impl_.array_expr_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedUnnestItemProto::_Internal::element_column(const ResolvedUnnestItemProto* msg) {
  return *msg->_impl_.element_column_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedUnnestItemProto::_Internal::array_offset_column(const ResolvedUnnestItemProto* msg) {
  return *msg->_impl_.array_offset_column_;
}
void ResolvedUnnestItemProto::clear_element_column() {
  if (_impl_.element_column_ != nullptr) _impl_.element_column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedUnnestItemProto::ResolvedUnnestItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUnnestItemProto)
}
ResolvedUnnestItemProto::ResolvedUnnestItemProto(const ResolvedUnnestItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedUnnestItemProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.array_expr_){nullptr}
    , decltype(_impl_.element_column_){nullptr}
    , decltype(_impl_.array_offset_column_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_array_expr()) {
    _this->_impl_.array_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.array_expr_);
  }
  if (from._internal_has_element_column()) {
    _this->_impl_.element_column_ = new ::zetasql::ResolvedColumnProto(*from._impl_.element_column_);
  }
  if (from._internal_has_array_offset_column()) {
    _this->_impl_.array_offset_column_ = new ::zetasql::ResolvedColumnHolderProto(*from._impl_.array_offset_column_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUnnestItemProto)
}

inline void ResolvedUnnestItemProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.array_expr_){nullptr}
    , decltype(_impl_.element_column_){nullptr}
    , decltype(_impl_.array_offset_column_){nullptr}
  };
}

ResolvedUnnestItemProto::~ResolvedUnnestItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUnnestItemProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedUnnestItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.array_expr_;
  if (this != internal_default_instance()) delete _impl_.element_column_;
  if (this != internal_default_instance()) delete _impl_.array_offset_column_;
}

void ResolvedUnnestItemProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedUnnestItemProto::InternalSwap(ResolvedUnnestItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUnnestItemProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[83]);
}

// ===================================================================

class ResolvedCreateIndexStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateIndexStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateIndexStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedCreateIndexStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_unique(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_search(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index_all_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateIndexStmtProto::_Internal::parent(const ResolvedCreateIndexStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedCreateIndexStmtProto::_Internal::table_scan(const ResolvedCreateIndexStmtProto* msg) {
  return *msg->_impl_.table_scan_;
}
ResolvedCreateIndexStmtProto::ResolvedCreateIndexStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateIndexStmtProto)
}
ResolvedCreateIndexStmtProto::ResolvedCreateIndexStmtProto(const ResolvedCreateIndexStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateIndexStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_name_path_){from._impl_.table_name_path_}
    , decltype(_impl_.index_item_list_){from._impl_.index_item_list_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.computed_columns_list_){from._impl_.computed_columns_list_}
    , decltype(_impl_.unnest_expressions_list_){from._impl_.unnest_expressions_list_}
    , decltype(_impl_.storing_expression_list_){from._impl_.storing_expression_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.is_unique_){}
    , decltype(_impl_.is_search_){}
    , decltype(_impl_.index_all_columns_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_table_scan()) {
    _this->_impl_.table_scan_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.table_scan_);
  }
  ::memcpy(&_impl_.is_unique_, &from._impl_.is_unique_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_all_columns_) -
    reinterpret_cast<char*>(&_impl_.is_unique_)) + sizeof(_impl_.index_all_columns_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateIndexStmtProto)
}

inline void ResolvedCreateIndexStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_name_path_){arena}
    , decltype(_impl_.index_item_list_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.computed_columns_list_){arena}
    , decltype(_impl_.unnest_expressions_list_){arena}
    , decltype(_impl_.storing_expression_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.is_unique_){false}
    , decltype(_impl_.is_search_){false}
    , decltype(_impl_.index_all_columns_){false}
  };
}

ResolvedCreateIndexStmtProto::~ResolvedCreateIndexStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateIndexStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateIndexStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_path_.~RepeatedPtrField();
  _impl_.index_item_list_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.computed_columns_list_.~RepeatedPtrField();
  _impl_.unnest_expressions_list_.~RepeatedPtrField();
  _impl_.storing_expression_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_scan_;
}

void ResolvedCreateIndexStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateIndexStmtProto::InternalSwap(ResolvedCreateIndexStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateIndexStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[84]);
}

// ===================================================================

class ResolvedCreateSchemaStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateSchemaStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateSchemaStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedCreateSchemaStmtProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateSchemaStmtProto::_Internal::parent(const ResolvedCreateSchemaStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateSchemaStmtProto::_Internal::collation_name(const ResolvedCreateSchemaStmtProto* msg) {
  return *msg->_impl_.collation_name_;
}
ResolvedCreateSchemaStmtProto::ResolvedCreateSchemaStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateSchemaStmtProto)
}
ResolvedCreateSchemaStmtProto::ResolvedCreateSchemaStmtProto(const ResolvedCreateSchemaStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateSchemaStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_collation_name()) {
    _this->_impl_.collation_name_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.collation_name_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateSchemaStmtProto)
}

inline void ResolvedCreateSchemaStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}
  };
}

ResolvedCreateSchemaStmtProto::~ResolvedCreateSchemaStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateSchemaStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateSchemaStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.collation_name_;
}

void ResolvedCreateSchemaStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateSchemaStmtProto::InternalSwap(ResolvedCreateSchemaStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateSchemaStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[85]);
}

// ===================================================================

class AnyResolvedCreateTableStmtBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedCreateTableAsSelectStmtProto& resolved_create_table_as_select_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg);
  static const ::zetasql::ResolvedCreateExternalTableStmtProto& resolved_create_external_table_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg);
  static const ::zetasql::ResolvedCreateTableStmtProto& resolved_create_table_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg);
};

const ::zetasql::ResolvedCreateTableAsSelectStmtProto&
AnyResolvedCreateTableStmtBaseProto::_Internal::resolved_create_table_as_select_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg) {
  return *msg->_impl_.node_.resolved_create_table_as_select_stmt_node_;
}
const ::zetasql::ResolvedCreateExternalTableStmtProto&
AnyResolvedCreateTableStmtBaseProto::_Internal::resolved_create_external_table_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg) {
  return *msg->_impl_.node_.resolved_create_external_table_stmt_node_;
}
const ::zetasql::ResolvedCreateTableStmtProto&
AnyResolvedCreateTableStmtBaseProto::_Internal::resolved_create_table_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg) {
  return *msg->_impl_.node_.resolved_create_table_stmt_node_;
}
void AnyResolvedCreateTableStmtBaseProto::set_allocated_resolved_create_table_as_select_stmt_node(::zetasql::ResolvedCreateTableAsSelectStmtProto* resolved_create_table_as_select_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_table_as_select_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_table_as_select_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_table_as_select_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_table_as_select_stmt_node, submessage_arena);
    }
    set_has_resolved_create_table_as_select_stmt_node();
    _impl_.node_.resolved_create_table_as_select_stmt_node_ = resolved_create_table_as_select_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_as_select_stmt_node)
}
void AnyResolvedCreateTableStmtBaseProto::set_allocated_resolved_create_external_table_stmt_node(::zetasql::ResolvedCreateExternalTableStmtProto* resolved_create_external_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_external_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_external_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_external_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_external_table_stmt_node, submessage_arena);
    }
    set_has_resolved_create_external_table_stmt_node();
    _impl_.node_.resolved_create_external_table_stmt_node_ = resolved_create_external_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_external_table_stmt_node)
}
void AnyResolvedCreateTableStmtBaseProto::set_allocated_resolved_create_table_stmt_node(::zetasql::ResolvedCreateTableStmtProto* resolved_create_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_table_stmt_node, submessage_arena);
    }
    set_has_resolved_create_table_stmt_node();
    _impl_.node_.resolved_create_table_stmt_node_ = resolved_create_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_stmt_node)
}
AnyResolvedCreateTableStmtBaseProto::AnyResolvedCreateTableStmtBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedCreateTableStmtBaseProto)
}
AnyResolvedCreateTableStmtBaseProto::AnyResolvedCreateTableStmtBaseProto(const AnyResolvedCreateTableStmtBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedCreateTableStmtBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedCreateTableAsSelectStmtNode: {
      _this->_internal_mutable_resolved_create_table_as_select_stmt_node()->::zetasql::ResolvedCreateTableAsSelectStmtProto::MergeFrom(
          from._internal_resolved_create_table_as_select_stmt_node());
      break;
    }
    case kResolvedCreateExternalTableStmtNode: {
      _this->_internal_mutable_resolved_create_external_table_stmt_node()->::zetasql::ResolvedCreateExternalTableStmtProto::MergeFrom(
          from._internal_resolved_create_external_table_stmt_node());
      break;
    }
    case kResolvedCreateTableStmtNode: {
      _this->_internal_mutable_resolved_create_table_stmt_node()->::zetasql::ResolvedCreateTableStmtProto::MergeFrom(
          from._internal_resolved_create_table_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedCreateTableStmtBaseProto)
}

inline void AnyResolvedCreateTableStmtBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedCreateTableStmtBaseProto::~AnyResolvedCreateTableStmtBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedCreateTableStmtBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedCreateTableStmtBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedCreateTableStmtBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedCreateTableStmtBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedCreateTableStmtBaseProto)
  switch (node_case()) {
    case kResolvedCreateTableAsSelectStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_table_as_select_stmt_node_;
      }
      break;
    }
    case kResolvedCreateExternalTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_external_table_stmt_node_;
      }
      break;
    }
    case kResolvedCreateTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_table_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedCreateTableStmtBaseProto::InternalSwap(AnyResolvedCreateTableStmtBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedCreateTableStmtBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[86]);
}

// ===================================================================

class ResolvedCreateTableStmtBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateTableStmtBaseProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateTableStmtBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedPrimaryKeyProto& primary_key(const ResolvedCreateTableStmtBaseProto* msg);
  static void set_has_primary_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::TableRefProto& like_table(const ResolvedCreateTableStmtBaseProto* msg);
  static void set_has_like_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedCreateTableStmtBaseProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateTableStmtBaseProto::_Internal::parent(const ResolvedCreateTableStmtBaseProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedPrimaryKeyProto&
ResolvedCreateTableStmtBaseProto::_Internal::primary_key(const ResolvedCreateTableStmtBaseProto* msg) {
  return *msg->_impl_.primary_key_;
}
const ::zetasql::TableRefProto&
ResolvedCreateTableStmtBaseProto::_Internal::like_table(const ResolvedCreateTableStmtBaseProto* msg) {
  return *msg->_impl_.like_table_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateTableStmtBaseProto::_Internal::collation_name(const ResolvedCreateTableStmtBaseProto* msg) {
  return *msg->_impl_.collation_name_;
}
void ResolvedCreateTableStmtBaseProto::clear_pseudo_column_list() {
  _impl_.pseudo_column_list_.Clear();
}
void ResolvedCreateTableStmtBaseProto::clear_like_table() {
  if (_impl_.like_table_ != nullptr) _impl_.like_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedCreateTableStmtBaseProto::ResolvedCreateTableStmtBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateTableStmtBaseProto)
}
ResolvedCreateTableStmtBaseProto::ResolvedCreateTableStmtBaseProto(const ResolvedCreateTableStmtBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateTableStmtBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.column_definition_list_){from._impl_.column_definition_list_}
    , decltype(_impl_.pseudo_column_list_){from._impl_.pseudo_column_list_}
    , decltype(_impl_.foreign_key_list_){from._impl_.foreign_key_list_}
    , decltype(_impl_.check_constraint_list_){from._impl_.check_constraint_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.primary_key_){nullptr}
    , decltype(_impl_.like_table_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}
    , decltype(_impl_.is_value_table_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_primary_key()) {
    _this->_impl_.primary_key_ = new ::zetasql::ResolvedPrimaryKeyProto(*from._impl_.primary_key_);
  }
  if (from._internal_has_like_table()) {
    _this->_impl_.like_table_ = new ::zetasql::TableRefProto(*from._impl_.like_table_);
  }
  if (from._internal_has_collation_name()) {
    _this->_impl_.collation_name_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.collation_name_);
  }
  _this->_impl_.is_value_table_ = from._impl_.is_value_table_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateTableStmtBaseProto)
}

inline void ResolvedCreateTableStmtBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.column_definition_list_){arena}
    , decltype(_impl_.pseudo_column_list_){arena}
    , decltype(_impl_.foreign_key_list_){arena}
    , decltype(_impl_.check_constraint_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.primary_key_){nullptr}
    , decltype(_impl_.like_table_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}
    , decltype(_impl_.is_value_table_){false}
  };
}

ResolvedCreateTableStmtBaseProto::~ResolvedCreateTableStmtBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateTableStmtBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateTableStmtBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.column_definition_list_.~RepeatedPtrField();
  _impl_.pseudo_column_list_.~RepeatedPtrField();
  _impl_.foreign_key_list_.~RepeatedPtrField();
  _impl_.check_constraint_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.primary_key_;
  if (this != internal_default_instance()) delete _impl_.like_table_;
  if (this != internal_default_instance()) delete _impl_.collation_name_;
}

void ResolvedCreateTableStmtBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateTableStmtBaseProto::InternalSwap(ResolvedCreateTableStmtBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateTableStmtBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[87]);
}

// ===================================================================

class ResolvedCreateTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateTableStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateTableStmtBaseProto& parent(const ResolvedCreateTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& clone_from(const ResolvedCreateTableStmtProto* msg);
  static void set_has_clone_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& copy_from(const ResolvedCreateTableStmtProto* msg);
  static void set_has_copy_from(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedCreateTableStmtBaseProto&
ResolvedCreateTableStmtProto::_Internal::parent(const ResolvedCreateTableStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateTableStmtProto::_Internal::clone_from(const ResolvedCreateTableStmtProto* msg) {
  return *msg->_impl_.clone_from_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateTableStmtProto::_Internal::copy_from(const ResolvedCreateTableStmtProto* msg) {
  return *msg->_impl_.copy_from_;
}
ResolvedCreateTableStmtProto::ResolvedCreateTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateTableStmtProto)
}
ResolvedCreateTableStmtProto::ResolvedCreateTableStmtProto(const ResolvedCreateTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateTableStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.partition_by_list_){from._impl_.partition_by_list_}
    , decltype(_impl_.cluster_by_list_){from._impl_.cluster_by_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.clone_from_){nullptr}
    , decltype(_impl_.copy_from_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateTableStmtBaseProto(*from._impl_.parent_);
  }
  if (from._internal_has_clone_from()) {
    _this->_impl_.clone_from_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.clone_from_);
  }
  if (from._internal_has_copy_from()) {
    _this->_impl_.copy_from_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.copy_from_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateTableStmtProto)
}

inline void ResolvedCreateTableStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.partition_by_list_){arena}
    , decltype(_impl_.cluster_by_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.clone_from_){nullptr}
    , decltype(_impl_.copy_from_){nullptr}
  };
}

ResolvedCreateTableStmtProto::~ResolvedCreateTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateTableStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_by_list_.~RepeatedPtrField();
  _impl_.cluster_by_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.clone_from_;
  if (this != internal_default_instance()) delete _impl_.copy_from_;
}

void ResolvedCreateTableStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateTableStmtProto::InternalSwap(ResolvedCreateTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateTableStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[88]);
}

// ===================================================================

class ResolvedCreateTableAsSelectStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateTableAsSelectStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateTableStmtBaseProto& parent(const ResolvedCreateTableAsSelectStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedCreateTableAsSelectStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateTableStmtBaseProto&
ResolvedCreateTableAsSelectStmtProto::_Internal::parent(const ResolvedCreateTableAsSelectStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateTableAsSelectStmtProto::_Internal::query(const ResolvedCreateTableAsSelectStmtProto* msg) {
  return *msg->_impl_.query_;
}
ResolvedCreateTableAsSelectStmtProto::ResolvedCreateTableAsSelectStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateTableAsSelectStmtProto)
}
ResolvedCreateTableAsSelectStmtProto::ResolvedCreateTableAsSelectStmtProto(const ResolvedCreateTableAsSelectStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateTableAsSelectStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_column_list_){from._impl_.output_column_list_}
    , decltype(_impl_.partition_by_list_){from._impl_.partition_by_list_}
    , decltype(_impl_.cluster_by_list_){from._impl_.cluster_by_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateTableStmtBaseProto(*from._impl_.parent_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateTableAsSelectStmtProto)
}

inline void ResolvedCreateTableAsSelectStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_column_list_){arena}
    , decltype(_impl_.partition_by_list_){arena}
    , decltype(_impl_.cluster_by_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
  };
}

ResolvedCreateTableAsSelectStmtProto::~ResolvedCreateTableAsSelectStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateTableAsSelectStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateTableAsSelectStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_column_list_.~RepeatedPtrField();
  _impl_.partition_by_list_.~RepeatedPtrField();
  _impl_.cluster_by_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.query_;
}

void ResolvedCreateTableAsSelectStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateTableAsSelectStmtProto::InternalSwap(ResolvedCreateTableAsSelectStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateTableAsSelectStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[89]);
}

// ===================================================================

class ResolvedCreateModelStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateModelStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateModelStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedCreateModelStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateModelStmtProto::_Internal::parent(const ResolvedCreateModelStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateModelStmtProto::_Internal::query(const ResolvedCreateModelStmtProto* msg) {
  return *msg->_impl_.query_;
}
ResolvedCreateModelStmtProto::ResolvedCreateModelStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateModelStmtProto)
}
ResolvedCreateModelStmtProto::ResolvedCreateModelStmtProto(const ResolvedCreateModelStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateModelStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.output_column_list_){from._impl_.output_column_list_}
    , decltype(_impl_.transform_list_){from._impl_.transform_list_}
    , decltype(_impl_.transform_output_column_list_){from._impl_.transform_output_column_list_}
    , decltype(_impl_.transform_analytic_function_group_list_){from._impl_.transform_analytic_function_group_list_}
    , decltype(_impl_.transform_input_column_list_){from._impl_.transform_input_column_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateModelStmtProto)
}

inline void ResolvedCreateModelStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.output_column_list_){arena}
    , decltype(_impl_.transform_list_){arena}
    , decltype(_impl_.transform_output_column_list_){arena}
    , decltype(_impl_.transform_analytic_function_group_list_){arena}
    , decltype(_impl_.transform_input_column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
  };
}

ResolvedCreateModelStmtProto::~ResolvedCreateModelStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateModelStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateModelStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.output_column_list_.~RepeatedPtrField();
  _impl_.transform_list_.~RepeatedPtrField();
  _impl_.transform_output_column_list_.~RepeatedPtrField();
  _impl_.transform_analytic_function_group_list_.~RepeatedPtrField();
  _impl_.transform_input_column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.query_;
}

void ResolvedCreateModelStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateModelStmtProto::InternalSwap(ResolvedCreateModelStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateModelStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[90]);
}

// ===================================================================

class AnyResolvedCreateViewBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedCreateViewStmtProto& resolved_create_view_stmt_node(const AnyResolvedCreateViewBaseProto* msg);
  static const ::zetasql::ResolvedCreateMaterializedViewStmtProto& resolved_create_materialized_view_stmt_node(const AnyResolvedCreateViewBaseProto* msg);
};

const ::zetasql::ResolvedCreateViewStmtProto&
AnyResolvedCreateViewBaseProto::_Internal::resolved_create_view_stmt_node(const AnyResolvedCreateViewBaseProto* msg) {
  return *msg->_impl_.node_.resolved_create_view_stmt_node_;
}
const ::zetasql::ResolvedCreateMaterializedViewStmtProto&
AnyResolvedCreateViewBaseProto::_Internal::resolved_create_materialized_view_stmt_node(const AnyResolvedCreateViewBaseProto* msg) {
  return *msg->_impl_.node_.resolved_create_materialized_view_stmt_node_;
}
void AnyResolvedCreateViewBaseProto::set_allocated_resolved_create_view_stmt_node(::zetasql::ResolvedCreateViewStmtProto* resolved_create_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_view_stmt_node, submessage_arena);
    }
    set_has_resolved_create_view_stmt_node();
    _impl_.node_.resolved_create_view_stmt_node_ = resolved_create_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_view_stmt_node)
}
void AnyResolvedCreateViewBaseProto::set_allocated_resolved_create_materialized_view_stmt_node(::zetasql::ResolvedCreateMaterializedViewStmtProto* resolved_create_materialized_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_materialized_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_create_materialized_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_materialized_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_materialized_view_stmt_node, submessage_arena);
    }
    set_has_resolved_create_materialized_view_stmt_node();
    _impl_.node_.resolved_create_materialized_view_stmt_node_ = resolved_create_materialized_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_materialized_view_stmt_node)
}
AnyResolvedCreateViewBaseProto::AnyResolvedCreateViewBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedCreateViewBaseProto)
}
AnyResolvedCreateViewBaseProto::AnyResolvedCreateViewBaseProto(const AnyResolvedCreateViewBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedCreateViewBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedCreateViewStmtNode: {
      _this->_internal_mutable_resolved_create_view_stmt_node()->::zetasql::ResolvedCreateViewStmtProto::MergeFrom(
          from._internal_resolved_create_view_stmt_node());
      break;
    }
    case kResolvedCreateMaterializedViewStmtNode: {
      _this->_internal_mutable_resolved_create_materialized_view_stmt_node()->::zetasql::ResolvedCreateMaterializedViewStmtProto::MergeFrom(
          from._internal_resolved_create_materialized_view_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedCreateViewBaseProto)
}

inline void AnyResolvedCreateViewBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedCreateViewBaseProto::~AnyResolvedCreateViewBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedCreateViewBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedCreateViewBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedCreateViewBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedCreateViewBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedCreateViewBaseProto)
  switch (node_case()) {
    case kResolvedCreateViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_view_stmt_node_;
      }
      break;
    }
    case kResolvedCreateMaterializedViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_create_materialized_view_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedCreateViewBaseProto::InternalSwap(AnyResolvedCreateViewBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedCreateViewBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[91]);
}

// ===================================================================

class ResolvedCreateViewBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateViewBaseProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateViewBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_explicit_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedCreateViewBaseProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sql(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sql_security(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_recursive(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateViewBaseProto::_Internal::parent(const ResolvedCreateViewBaseProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateViewBaseProto::_Internal::query(const ResolvedCreateViewBaseProto* msg) {
  return *msg->_impl_.query_;
}
ResolvedCreateViewBaseProto::ResolvedCreateViewBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateViewBaseProto)
}
ResolvedCreateViewBaseProto::ResolvedCreateViewBaseProto(const ResolvedCreateViewBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateViewBaseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.output_column_list_){from._impl_.output_column_list_}
    , decltype(_impl_.sql_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.sql_security_){}
    , decltype(_impl_.has_explicit_columns_){}
    , decltype(_impl_.is_value_table_){}
    , decltype(_impl_.recursive_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sql_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sql()) {
    _this->_impl_.sql_.Set(from._internal_sql(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.query_);
  }
  ::memcpy(&_impl_.sql_security_, &from._impl_.sql_security_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recursive_) -
    reinterpret_cast<char*>(&_impl_.sql_security_)) + sizeof(_impl_.recursive_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateViewBaseProto)
}

inline void ResolvedCreateViewBaseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.output_column_list_){arena}
    , decltype(_impl_.sql_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.sql_security_){0}
    , decltype(_impl_.has_explicit_columns_){false}
    , decltype(_impl_.is_value_table_){false}
    , decltype(_impl_.recursive_){false}
  };
  _impl_.sql_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedCreateViewBaseProto::~ResolvedCreateViewBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateViewBaseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateViewBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.output_column_list_.~RepeatedPtrField();
  _impl_.sql_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.query_;
}

void ResolvedCreateViewBaseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateViewBaseProto::InternalSwap(ResolvedCreateViewBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateViewBaseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[92]);
}

// ===================================================================

class ResolvedCreateViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateViewStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateViewBaseProto& parent(const ResolvedCreateViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedCreateViewBaseProto&
ResolvedCreateViewStmtProto::_Internal::parent(const ResolvedCreateViewStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedCreateViewStmtProto::ResolvedCreateViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateViewStmtProto)
}
ResolvedCreateViewStmtProto::ResolvedCreateViewStmtProto(const ResolvedCreateViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateViewStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateViewBaseProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateViewStmtProto)
}

inline void ResolvedCreateViewStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedCreateViewStmtProto::~ResolvedCreateViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateViewStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedCreateViewStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateViewStmtProto::InternalSwap(ResolvedCreateViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateViewStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[93]);
}

// ===================================================================

class ResolvedWithPartitionColumnsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWithPartitionColumnsProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWithPartitionColumnsProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWithPartitionColumnsProto::_Internal::parent(const ResolvedWithPartitionColumnsProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedWithPartitionColumnsProto::ResolvedWithPartitionColumnsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWithPartitionColumnsProto)
}
ResolvedWithPartitionColumnsProto::ResolvedWithPartitionColumnsProto(const ResolvedWithPartitionColumnsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedWithPartitionColumnsProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_definition_list_){from._impl_.column_definition_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWithPartitionColumnsProto)
}

inline void ResolvedWithPartitionColumnsProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_definition_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedWithPartitionColumnsProto::~ResolvedWithPartitionColumnsProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWithPartitionColumnsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedWithPartitionColumnsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_definition_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedWithPartitionColumnsProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedWithPartitionColumnsProto::InternalSwap(ResolvedWithPartitionColumnsProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWithPartitionColumnsProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[94]);
}

// ===================================================================

class ResolvedCreateSnapshotTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateSnapshotTableStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateSnapshotTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& clone_from(const ResolvedCreateSnapshotTableStmtProto* msg);
  static void set_has_clone_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateSnapshotTableStmtProto::_Internal::parent(const ResolvedCreateSnapshotTableStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateSnapshotTableStmtProto::_Internal::clone_from(const ResolvedCreateSnapshotTableStmtProto* msg) {
  return *msg->_impl_.clone_from_;
}
ResolvedCreateSnapshotTableStmtProto::ResolvedCreateSnapshotTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateSnapshotTableStmtProto)
}
ResolvedCreateSnapshotTableStmtProto::ResolvedCreateSnapshotTableStmtProto(const ResolvedCreateSnapshotTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateSnapshotTableStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.clone_from_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_clone_from()) {
    _this->_impl_.clone_from_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.clone_from_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateSnapshotTableStmtProto)
}

inline void ResolvedCreateSnapshotTableStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.clone_from_){nullptr}
  };
}

ResolvedCreateSnapshotTableStmtProto::~ResolvedCreateSnapshotTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateSnapshotTableStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateSnapshotTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.clone_from_;
}

void ResolvedCreateSnapshotTableStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateSnapshotTableStmtProto::InternalSwap(ResolvedCreateSnapshotTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateSnapshotTableStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[95]);
}

// ===================================================================

class ResolvedCreateExternalTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateExternalTableStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateTableStmtBaseProto& parent(const ResolvedCreateExternalTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedWithPartitionColumnsProto& with_partition_columns(const ResolvedCreateExternalTableStmtProto* msg);
  static void set_has_with_partition_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedCreateExternalTableStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedCreateTableStmtBaseProto&
ResolvedCreateExternalTableStmtProto::_Internal::parent(const ResolvedCreateExternalTableStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedWithPartitionColumnsProto&
ResolvedCreateExternalTableStmtProto::_Internal::with_partition_columns(const ResolvedCreateExternalTableStmtProto* msg) {
  return *msg->_impl_.with_partition_columns_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedCreateExternalTableStmtProto::_Internal::connection(const ResolvedCreateExternalTableStmtProto* msg) {
  return *msg->_impl_.connection_;
}
ResolvedCreateExternalTableStmtProto::ResolvedCreateExternalTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateExternalTableStmtProto)
}
ResolvedCreateExternalTableStmtProto::ResolvedCreateExternalTableStmtProto(const ResolvedCreateExternalTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateExternalTableStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.with_partition_columns_){nullptr}
    , decltype(_impl_.connection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateTableStmtBaseProto(*from._impl_.parent_);
  }
  if (from._internal_has_with_partition_columns()) {
    _this->_impl_.with_partition_columns_ = new ::zetasql::ResolvedWithPartitionColumnsProto(*from._impl_.with_partition_columns_);
  }
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::zetasql::ResolvedConnectionProto(*from._impl_.connection_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateExternalTableStmtProto)
}

inline void ResolvedCreateExternalTableStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.with_partition_columns_){nullptr}
    , decltype(_impl_.connection_){nullptr}
  };
}

ResolvedCreateExternalTableStmtProto::~ResolvedCreateExternalTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateExternalTableStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateExternalTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.with_partition_columns_;
  if (this != internal_default_instance()) delete _impl_.connection_;
}

void ResolvedCreateExternalTableStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateExternalTableStmtProto::InternalSwap(ResolvedCreateExternalTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateExternalTableStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[96]);
}

// ===================================================================

class ResolvedExportModelStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExportModelStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedExportModelStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedExportModelStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedExportModelStmtProto::_Internal::parent(const ResolvedExportModelStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedExportModelStmtProto::_Internal::connection(const ResolvedExportModelStmtProto* msg) {
  return *msg->_impl_.connection_;
}
ResolvedExportModelStmtProto::ResolvedExportModelStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExportModelStmtProto)
}
ResolvedExportModelStmtProto::ResolvedExportModelStmtProto(const ResolvedExportModelStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedExportModelStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_name_path_){from._impl_.model_name_path_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.connection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::zetasql::ResolvedConnectionProto(*from._impl_.connection_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExportModelStmtProto)
}

inline void ResolvedExportModelStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_name_path_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.connection_){nullptr}
  };
}

ResolvedExportModelStmtProto::~ResolvedExportModelStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExportModelStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedExportModelStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_name_path_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.connection_;
}

void ResolvedExportModelStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedExportModelStmtProto::InternalSwap(ResolvedExportModelStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExportModelStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[97]);
}

// ===================================================================

class ResolvedExportDataStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExportDataStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedExportDataStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedExportDataStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedExportDataStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedExportDataStmtProto::_Internal::parent(const ResolvedExportDataStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedExportDataStmtProto::_Internal::connection(const ResolvedExportDataStmtProto* msg) {
  return *msg->_impl_.connection_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedExportDataStmtProto::_Internal::query(const ResolvedExportDataStmtProto* msg) {
  return *msg->_impl_.query_;
}
ResolvedExportDataStmtProto::ResolvedExportDataStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExportDataStmtProto)
}
ResolvedExportDataStmtProto::ResolvedExportDataStmtProto(const ResolvedExportDataStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedExportDataStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.output_column_list_){from._impl_.output_column_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.is_value_table_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.query_);
  }
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::zetasql::ResolvedConnectionProto(*from._impl_.connection_);
  }
  _this->_impl_.is_value_table_ = from._impl_.is_value_table_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExportDataStmtProto)
}

inline void ResolvedExportDataStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.output_column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.is_value_table_){false}
  };
}

ResolvedExportDataStmtProto::~ResolvedExportDataStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExportDataStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedExportDataStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.output_column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.query_;
  if (this != internal_default_instance()) delete _impl_.connection_;
}

void ResolvedExportDataStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedExportDataStmtProto::InternalSwap(ResolvedExportDataStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExportDataStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[98]);
}

// ===================================================================

class ResolvedDefineTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDefineTableStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDefineTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDefineTableStmtProto::_Internal::parent(const ResolvedDefineTableStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDefineTableStmtProto::ResolvedDefineTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDefineTableStmtProto)
}
ResolvedDefineTableStmtProto::ResolvedDefineTableStmtProto(const ResolvedDefineTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDefineTableStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDefineTableStmtProto)
}

inline void ResolvedDefineTableStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedDefineTableStmtProto::~ResolvedDefineTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDefineTableStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDefineTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDefineTableStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDefineTableStmtProto::InternalSwap(ResolvedDefineTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDefineTableStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[99]);
}

// ===================================================================

class ResolvedDescribeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDescribeStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDescribeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDescribeStmtProto::_Internal::parent(const ResolvedDescribeStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDescribeStmtProto::ResolvedDescribeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDescribeStmtProto)
}
ResolvedDescribeStmtProto::ResolvedDescribeStmtProto(const ResolvedDescribeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDescribeStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.from_name_path_){from._impl_.from_name_path_}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    _this->_impl_.object_type_.Set(from._internal_object_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDescribeStmtProto)
}

inline void ResolvedDescribeStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.from_name_path_){arena}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedDescribeStmtProto::~ResolvedDescribeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDescribeStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDescribeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.from_name_path_.~RepeatedPtrField();
  _impl_.object_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDescribeStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDescribeStmtProto::InternalSwap(ResolvedDescribeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDescribeStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[100]);
}

// ===================================================================

class ResolvedShowStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedShowStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedShowStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedLiteralProto& like_expr(const ResolvedShowStmtProto* msg);
  static void set_has_like_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedShowStmtProto::_Internal::parent(const ResolvedShowStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedLiteralProto&
ResolvedShowStmtProto::_Internal::like_expr(const ResolvedShowStmtProto* msg) {
  return *msg->_impl_.like_expr_;
}
ResolvedShowStmtProto::ResolvedShowStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedShowStmtProto)
}
ResolvedShowStmtProto::ResolvedShowStmtProto(const ResolvedShowStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedShowStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.like_expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_like_expr()) {
    _this->_impl_.like_expr_ = new ::zetasql::ResolvedLiteralProto(*from._impl_.like_expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedShowStmtProto)
}

inline void ResolvedShowStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.like_expr_){nullptr}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedShowStmtProto::~ResolvedShowStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedShowStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedShowStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.like_expr_;
}

void ResolvedShowStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedShowStmtProto::InternalSwap(ResolvedShowStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedShowStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[101]);
}

// ===================================================================

class ResolvedBeginStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedBeginStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedBeginStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read_write_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedBeginStmtProto::_Internal::parent(const ResolvedBeginStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedBeginStmtProto::ResolvedBeginStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedBeginStmtProto)
}
ResolvedBeginStmtProto::ResolvedBeginStmtProto(const ResolvedBeginStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedBeginStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isolation_level_list_){from._impl_.isolation_level_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.read_write_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.read_write_mode_ = from._impl_.read_write_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedBeginStmtProto)
}

inline void ResolvedBeginStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isolation_level_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.read_write_mode_){0}
  };
}

ResolvedBeginStmtProto::~ResolvedBeginStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedBeginStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedBeginStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.isolation_level_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedBeginStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedBeginStmtProto::InternalSwap(ResolvedBeginStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedBeginStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[102]);
}

// ===================================================================

class ResolvedSetTransactionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetTransactionStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedSetTransactionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read_write_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedSetTransactionStmtProto::_Internal::parent(const ResolvedSetTransactionStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedSetTransactionStmtProto::ResolvedSetTransactionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetTransactionStmtProto)
}
ResolvedSetTransactionStmtProto::ResolvedSetTransactionStmtProto(const ResolvedSetTransactionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSetTransactionStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isolation_level_list_){from._impl_.isolation_level_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.read_write_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.read_write_mode_ = from._impl_.read_write_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetTransactionStmtProto)
}

inline void ResolvedSetTransactionStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isolation_level_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.read_write_mode_){0}
  };
}

ResolvedSetTransactionStmtProto::~ResolvedSetTransactionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetTransactionStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSetTransactionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.isolation_level_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedSetTransactionStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSetTransactionStmtProto::InternalSwap(ResolvedSetTransactionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetTransactionStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[103]);
}

// ===================================================================

class ResolvedCommitStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCommitStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCommitStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCommitStmtProto::_Internal::parent(const ResolvedCommitStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedCommitStmtProto::ResolvedCommitStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCommitStmtProto)
}
ResolvedCommitStmtProto::ResolvedCommitStmtProto(const ResolvedCommitStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCommitStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCommitStmtProto)
}

inline void ResolvedCommitStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedCommitStmtProto::~ResolvedCommitStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCommitStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCommitStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedCommitStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCommitStmtProto::InternalSwap(ResolvedCommitStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCommitStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[104]);
}

// ===================================================================

class ResolvedRollbackStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRollbackStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedRollbackStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedRollbackStmtProto::_Internal::parent(const ResolvedRollbackStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRollbackStmtProto::ResolvedRollbackStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRollbackStmtProto)
}
ResolvedRollbackStmtProto::ResolvedRollbackStmtProto(const ResolvedRollbackStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRollbackStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRollbackStmtProto)
}

inline void ResolvedRollbackStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedRollbackStmtProto::~ResolvedRollbackStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRollbackStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRollbackStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRollbackStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRollbackStmtProto::InternalSwap(ResolvedRollbackStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRollbackStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[105]);
}

// ===================================================================

class ResolvedStartBatchStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedStartBatchStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedStartBatchStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedStartBatchStmtProto::_Internal::parent(const ResolvedStartBatchStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedStartBatchStmtProto::ResolvedStartBatchStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedStartBatchStmtProto)
}
ResolvedStartBatchStmtProto::ResolvedStartBatchStmtProto(const ResolvedStartBatchStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedStartBatchStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.batch_type_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.batch_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_batch_type()) {
    _this->_impl_.batch_type_.Set(from._internal_batch_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedStartBatchStmtProto)
}

inline void ResolvedStartBatchStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.batch_type_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.batch_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedStartBatchStmtProto::~ResolvedStartBatchStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedStartBatchStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedStartBatchStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.batch_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedStartBatchStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedStartBatchStmtProto::InternalSwap(ResolvedStartBatchStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedStartBatchStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[106]);
}

// ===================================================================

class ResolvedRunBatchStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRunBatchStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedRunBatchStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedRunBatchStmtProto::_Internal::parent(const ResolvedRunBatchStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRunBatchStmtProto::ResolvedRunBatchStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRunBatchStmtProto)
}
ResolvedRunBatchStmtProto::ResolvedRunBatchStmtProto(const ResolvedRunBatchStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRunBatchStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRunBatchStmtProto)
}

inline void ResolvedRunBatchStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedRunBatchStmtProto::~ResolvedRunBatchStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRunBatchStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRunBatchStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRunBatchStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRunBatchStmtProto::InternalSwap(ResolvedRunBatchStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRunBatchStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[107]);
}

// ===================================================================

class ResolvedAbortBatchStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAbortBatchStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAbortBatchStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAbortBatchStmtProto::_Internal::parent(const ResolvedAbortBatchStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAbortBatchStmtProto::ResolvedAbortBatchStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAbortBatchStmtProto)
}
ResolvedAbortBatchStmtProto::ResolvedAbortBatchStmtProto(const ResolvedAbortBatchStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAbortBatchStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAbortBatchStmtProto)
}

inline void ResolvedAbortBatchStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAbortBatchStmtProto::~ResolvedAbortBatchStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAbortBatchStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAbortBatchStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAbortBatchStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAbortBatchStmtProto::InternalSwap(ResolvedAbortBatchStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAbortBatchStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[108]);
}

// ===================================================================

class ResolvedDropStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drop_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropStmtProto::_Internal::parent(const ResolvedDropStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropStmtProto::ResolvedDropStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropStmtProto)
}
ResolvedDropStmtProto::ResolvedDropStmtProto(const ResolvedDropStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}
    , decltype(_impl_.drop_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    _this->_impl_.object_type_.Set(from._internal_object_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  ::memcpy(&_impl_.is_if_exists_, &from._impl_.is_if_exists_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.drop_mode_) -
    reinterpret_cast<char*>(&_impl_.is_if_exists_)) + sizeof(_impl_.drop_mode_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropStmtProto)
}

inline void ResolvedDropStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
    , decltype(_impl_.drop_mode_){0}
  };
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedDropStmtProto::~ResolvedDropStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.object_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropStmtProto::InternalSwap(ResolvedDropStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[109]);
}

// ===================================================================

class ResolvedDropMaterializedViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropMaterializedViewStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropMaterializedViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropMaterializedViewStmtProto::_Internal::parent(const ResolvedDropMaterializedViewStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropMaterializedViewStmtProto::ResolvedDropMaterializedViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropMaterializedViewStmtProto)
}
ResolvedDropMaterializedViewStmtProto::ResolvedDropMaterializedViewStmtProto(const ResolvedDropMaterializedViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropMaterializedViewStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropMaterializedViewStmtProto)
}

inline void ResolvedDropMaterializedViewStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
}

ResolvedDropMaterializedViewStmtProto::~ResolvedDropMaterializedViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropMaterializedViewStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropMaterializedViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropMaterializedViewStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropMaterializedViewStmtProto::InternalSwap(ResolvedDropMaterializedViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropMaterializedViewStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[110]);
}

// ===================================================================

class ResolvedDropSnapshotTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropSnapshotTableStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropSnapshotTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropSnapshotTableStmtProto::_Internal::parent(const ResolvedDropSnapshotTableStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropSnapshotTableStmtProto::ResolvedDropSnapshotTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropSnapshotTableStmtProto)
}
ResolvedDropSnapshotTableStmtProto::ResolvedDropSnapshotTableStmtProto(const ResolvedDropSnapshotTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropSnapshotTableStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropSnapshotTableStmtProto)
}

inline void ResolvedDropSnapshotTableStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
}

ResolvedDropSnapshotTableStmtProto::~ResolvedDropSnapshotTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropSnapshotTableStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropSnapshotTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropSnapshotTableStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropSnapshotTableStmtProto::InternalSwap(ResolvedDropSnapshotTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropSnapshotTableStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[111]);
}

// ===================================================================

class ResolvedRecursiveRefScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRecursiveRefScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedRecursiveRefScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedRecursiveRefScanProto::_Internal::parent(const ResolvedRecursiveRefScanProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRecursiveRefScanProto::ResolvedRecursiveRefScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRecursiveRefScanProto)
}
ResolvedRecursiveRefScanProto::ResolvedRecursiveRefScanProto(const ResolvedRecursiveRefScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRecursiveRefScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRecursiveRefScanProto)
}

inline void ResolvedRecursiveRefScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedRecursiveRefScanProto::~ResolvedRecursiveRefScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRecursiveRefScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRecursiveRefScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRecursiveRefScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRecursiveRefScanProto::InternalSwap(ResolvedRecursiveRefScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRecursiveRefScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[112]);
}

// ===================================================================

class ResolvedRecursiveScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRecursiveScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedRecursiveScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_op_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedSetOperationItemProto& non_recursive_term(const ResolvedRecursiveScanProto* msg);
  static void set_has_non_recursive_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedSetOperationItemProto& recursive_term(const ResolvedRecursiveScanProto* msg);
  static void set_has_recursive_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedRecursiveScanProto::_Internal::parent(const ResolvedRecursiveScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedSetOperationItemProto&
ResolvedRecursiveScanProto::_Internal::non_recursive_term(const ResolvedRecursiveScanProto* msg) {
  return *msg->_impl_.non_recursive_term_;
}
const ::zetasql::ResolvedSetOperationItemProto&
ResolvedRecursiveScanProto::_Internal::recursive_term(const ResolvedRecursiveScanProto* msg) {
  return *msg->_impl_.recursive_term_;
}
ResolvedRecursiveScanProto::ResolvedRecursiveScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRecursiveScanProto)
}
ResolvedRecursiveScanProto::ResolvedRecursiveScanProto(const ResolvedRecursiveScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRecursiveScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.non_recursive_term_){nullptr}
    , decltype(_impl_.recursive_term_){nullptr}
    , decltype(_impl_.op_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_non_recursive_term()) {
    _this->_impl_.non_recursive_term_ = new ::zetasql::ResolvedSetOperationItemProto(*from._impl_.non_recursive_term_);
  }
  if (from._internal_has_recursive_term()) {
    _this->_impl_.recursive_term_ = new ::zetasql::ResolvedSetOperationItemProto(*from._impl_.recursive_term_);
  }
  _this->_impl_.op_type_ = from._impl_.op_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRecursiveScanProto)
}

inline void ResolvedRecursiveScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.non_recursive_term_){nullptr}
    , decltype(_impl_.recursive_term_){nullptr}
    , decltype(_impl_.op_type_){0}
  };
}

ResolvedRecursiveScanProto::~ResolvedRecursiveScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRecursiveScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRecursiveScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.non_recursive_term_;
  if (this != internal_default_instance()) delete _impl_.recursive_term_;
}

void ResolvedRecursiveScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRecursiveScanProto::InternalSwap(ResolvedRecursiveScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRecursiveScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[113]);
}

// ===================================================================

class ResolvedWithScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWithScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedWithScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedWithScanProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recursive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedWithScanProto::_Internal::parent(const ResolvedWithScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedWithScanProto::_Internal::query(const ResolvedWithScanProto* msg) {
  return *msg->_impl_.query_;
}
ResolvedWithScanProto::ResolvedWithScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWithScanProto)
}
ResolvedWithScanProto::ResolvedWithScanProto(const ResolvedWithScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedWithScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_entry_list_){from._impl_.with_entry_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.recursive_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.query_);
  }
  _this->_impl_.recursive_ = from._impl_.recursive_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWithScanProto)
}

inline void ResolvedWithScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_entry_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.recursive_){false}
  };
}

ResolvedWithScanProto::~ResolvedWithScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWithScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedWithScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.with_entry_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.query_;
}

void ResolvedWithScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedWithScanProto::InternalSwap(ResolvedWithScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWithScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[114]);
}

// ===================================================================

class ResolvedWithEntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWithEntryProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWithEntryProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_with_query_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& with_subquery(const ResolvedWithEntryProto* msg);
  static void set_has_with_subquery(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWithEntryProto::_Internal::parent(const ResolvedWithEntryProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedWithEntryProto::_Internal::with_subquery(const ResolvedWithEntryProto* msg) {
  return *msg->_impl_.with_subquery_;
}
ResolvedWithEntryProto::ResolvedWithEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWithEntryProto)
}
ResolvedWithEntryProto::ResolvedWithEntryProto(const ResolvedWithEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedWithEntryProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_query_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.with_subquery_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.with_query_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.with_query_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_with_query_name()) {
    _this->_impl_.with_query_name_.Set(from._internal_with_query_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_with_subquery()) {
    _this->_impl_.with_subquery_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.with_subquery_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWithEntryProto)
}

inline void ResolvedWithEntryProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.with_query_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.with_subquery_){nullptr}
  };
  _impl_.with_query_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.with_query_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedWithEntryProto::~ResolvedWithEntryProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWithEntryProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedWithEntryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.with_query_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.with_subquery_;
}

void ResolvedWithEntryProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedWithEntryProto::InternalSwap(ResolvedWithEntryProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWithEntryProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[115]);
}

// ===================================================================

class ResolvedOptionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedOptionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedOptionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& value(const ResolvedOptionProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedOptionProto::_Internal::parent(const ResolvedOptionProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedOptionProto::_Internal::value(const ResolvedOptionProto* msg) {
  return *msg->_impl_.value_;
}
ResolvedOptionProto::ResolvedOptionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedOptionProto)
}
ResolvedOptionProto::ResolvedOptionProto(const ResolvedOptionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedOptionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qualifier_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.qualifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qualifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_qualifier()) {
    _this->_impl_.qualifier_.Set(from._internal_qualifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedOptionProto)
}

inline void ResolvedOptionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qualifier_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.value_){nullptr}
  };
  _impl_.qualifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qualifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedOptionProto::~ResolvedOptionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedOptionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedOptionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qualifier_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void ResolvedOptionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedOptionProto::InternalSwap(ResolvedOptionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedOptionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[116]);
}

// ===================================================================

class ResolvedWindowPartitioningProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWindowPartitioningProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWindowPartitioningProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWindowPartitioningProto::_Internal::parent(const ResolvedWindowPartitioningProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedWindowPartitioningProto::ResolvedWindowPartitioningProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWindowPartitioningProto)
}
ResolvedWindowPartitioningProto::ResolvedWindowPartitioningProto(const ResolvedWindowPartitioningProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedWindowPartitioningProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.partition_by_list_){from._impl_.partition_by_list_}
    , decltype(_impl_.hint_list_){from._impl_.hint_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWindowPartitioningProto)
}

inline void ResolvedWindowPartitioningProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.partition_by_list_){arena}
    , decltype(_impl_.hint_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedWindowPartitioningProto::~ResolvedWindowPartitioningProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWindowPartitioningProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedWindowPartitioningProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_by_list_.~RepeatedPtrField();
  _impl_.hint_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedWindowPartitioningProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedWindowPartitioningProto::InternalSwap(ResolvedWindowPartitioningProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWindowPartitioningProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[117]);
}

// ===================================================================

class ResolvedWindowOrderingProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWindowOrderingProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWindowOrderingProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWindowOrderingProto::_Internal::parent(const ResolvedWindowOrderingProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedWindowOrderingProto::ResolvedWindowOrderingProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWindowOrderingProto)
}
ResolvedWindowOrderingProto::ResolvedWindowOrderingProto(const ResolvedWindowOrderingProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedWindowOrderingProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_by_item_list_){from._impl_.order_by_item_list_}
    , decltype(_impl_.hint_list_){from._impl_.hint_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWindowOrderingProto)
}

inline void ResolvedWindowOrderingProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_by_item_list_){arena}
    , decltype(_impl_.hint_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedWindowOrderingProto::~ResolvedWindowOrderingProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWindowOrderingProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedWindowOrderingProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_by_item_list_.~RepeatedPtrField();
  _impl_.hint_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedWindowOrderingProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedWindowOrderingProto::InternalSwap(ResolvedWindowOrderingProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWindowOrderingProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[118]);
}

// ===================================================================

class ResolvedWindowFrameProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWindowFrameProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWindowFrameProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedWindowFrameExprProto& start_expr(const ResolvedWindowFrameProto* msg);
  static void set_has_start_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedWindowFrameExprProto& end_expr(const ResolvedWindowFrameProto* msg);
  static void set_has_end_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWindowFrameProto::_Internal::parent(const ResolvedWindowFrameProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedWindowFrameExprProto&
ResolvedWindowFrameProto::_Internal::start_expr(const ResolvedWindowFrameProto* msg) {
  return *msg->_impl_.start_expr_;
}
const ::zetasql::ResolvedWindowFrameExprProto&
ResolvedWindowFrameProto::_Internal::end_expr(const ResolvedWindowFrameProto* msg) {
  return *msg->_impl_.end_expr_;
}
ResolvedWindowFrameProto::ResolvedWindowFrameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWindowFrameProto)
}
ResolvedWindowFrameProto::ResolvedWindowFrameProto(const ResolvedWindowFrameProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedWindowFrameProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.start_expr_){nullptr}
    , decltype(_impl_.end_expr_){nullptr}
    , decltype(_impl_.frame_unit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_start_expr()) {
    _this->_impl_.start_expr_ = new ::zetasql::ResolvedWindowFrameExprProto(*from._impl_.start_expr_);
  }
  if (from._internal_has_end_expr()) {
    _this->_impl_.end_expr_ = new ::zetasql::ResolvedWindowFrameExprProto(*from._impl_.end_expr_);
  }
  _this->_impl_.frame_unit_ = from._impl_.frame_unit_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWindowFrameProto)
}

inline void ResolvedWindowFrameProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.start_expr_){nullptr}
    , decltype(_impl_.end_expr_){nullptr}
    , decltype(_impl_.frame_unit_){0}
  };
}

ResolvedWindowFrameProto::~ResolvedWindowFrameProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWindowFrameProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedWindowFrameProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.start_expr_;
  if (this != internal_default_instance()) delete _impl_.end_expr_;
}

void ResolvedWindowFrameProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedWindowFrameProto::InternalSwap(ResolvedWindowFrameProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWindowFrameProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[119]);
}

// ===================================================================

class ResolvedAnalyticFunctionGroupProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnalyticFunctionGroupProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedAnalyticFunctionGroupProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedWindowPartitioningProto& partition_by(const ResolvedAnalyticFunctionGroupProto* msg);
  static void set_has_partition_by(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedWindowOrderingProto& order_by(const ResolvedAnalyticFunctionGroupProto* msg);
  static void set_has_order_by(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedAnalyticFunctionGroupProto::_Internal::parent(const ResolvedAnalyticFunctionGroupProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedWindowPartitioningProto&
ResolvedAnalyticFunctionGroupProto::_Internal::partition_by(const ResolvedAnalyticFunctionGroupProto* msg) {
  return *msg->_impl_.partition_by_;
}
const ::zetasql::ResolvedWindowOrderingProto&
ResolvedAnalyticFunctionGroupProto::_Internal::order_by(const ResolvedAnalyticFunctionGroupProto* msg) {
  return *msg->_impl_.order_by_;
}
ResolvedAnalyticFunctionGroupProto::ResolvedAnalyticFunctionGroupProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnalyticFunctionGroupProto)
}
ResolvedAnalyticFunctionGroupProto::ResolvedAnalyticFunctionGroupProto(const ResolvedAnalyticFunctionGroupProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAnalyticFunctionGroupProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.analytic_function_list_){from._impl_.analytic_function_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.partition_by_){nullptr}
    , decltype(_impl_.order_by_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_partition_by()) {
    _this->_impl_.partition_by_ = new ::zetasql::ResolvedWindowPartitioningProto(*from._impl_.partition_by_);
  }
  if (from._internal_has_order_by()) {
    _this->_impl_.order_by_ = new ::zetasql::ResolvedWindowOrderingProto(*from._impl_.order_by_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnalyticFunctionGroupProto)
}

inline void ResolvedAnalyticFunctionGroupProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.analytic_function_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.partition_by_){nullptr}
    , decltype(_impl_.order_by_){nullptr}
  };
}

ResolvedAnalyticFunctionGroupProto::~ResolvedAnalyticFunctionGroupProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnalyticFunctionGroupProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAnalyticFunctionGroupProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.analytic_function_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.partition_by_;
  if (this != internal_default_instance()) delete _impl_.order_by_;
}

void ResolvedAnalyticFunctionGroupProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAnalyticFunctionGroupProto::InternalSwap(ResolvedAnalyticFunctionGroupProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnalyticFunctionGroupProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[120]);
}

// ===================================================================

class ResolvedWindowFrameExprProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWindowFrameExprProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWindowFrameExprProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_boundary_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedWindowFrameExprProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWindowFrameExprProto::_Internal::parent(const ResolvedWindowFrameExprProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedWindowFrameExprProto::_Internal::expression(const ResolvedWindowFrameExprProto* msg) {
  return *msg->_impl_.expression_;
}
ResolvedWindowFrameExprProto::ResolvedWindowFrameExprProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWindowFrameExprProto)
}
ResolvedWindowFrameExprProto::ResolvedWindowFrameExprProto(const ResolvedWindowFrameExprProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedWindowFrameExprProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.boundary_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_expression()) {
    _this->_impl_.expression_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expression_);
  }
  _this->_impl_.boundary_type_ = from._impl_.boundary_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWindowFrameExprProto)
}

inline void ResolvedWindowFrameExprProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.boundary_type_){0}
  };
}

ResolvedWindowFrameExprProto::~ResolvedWindowFrameExprProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWindowFrameExprProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedWindowFrameExprProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expression_;
}

void ResolvedWindowFrameExprProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedWindowFrameExprProto::InternalSwap(ResolvedWindowFrameExprProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWindowFrameExprProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[121]);
}

// ===================================================================

class ResolvedDMLValueProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDMLValueProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedDMLValueProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& value(const ResolvedDMLValueProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedDMLValueProto::_Internal::parent(const ResolvedDMLValueProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedDMLValueProto::_Internal::value(const ResolvedDMLValueProto* msg) {
  return *msg->_impl_.value_;
}
ResolvedDMLValueProto::ResolvedDMLValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDMLValueProto)
}
ResolvedDMLValueProto::ResolvedDMLValueProto(const ResolvedDMLValueProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDMLValueProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDMLValueProto)
}

inline void ResolvedDMLValueProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.value_){nullptr}
  };
}

ResolvedDMLValueProto::~ResolvedDMLValueProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDMLValueProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDMLValueProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void ResolvedDMLValueProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDMLValueProto::InternalSwap(ResolvedDMLValueProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDMLValueProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[122]);
}

// ===================================================================

class ResolvedDMLDefaultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDMLDefaultProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedDMLDefaultProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedDMLDefaultProto::_Internal::parent(const ResolvedDMLDefaultProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDMLDefaultProto::ResolvedDMLDefaultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDMLDefaultProto)
}
ResolvedDMLDefaultProto::ResolvedDMLDefaultProto(const ResolvedDMLDefaultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDMLDefaultProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDMLDefaultProto)
}

inline void ResolvedDMLDefaultProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedDMLDefaultProto::~ResolvedDMLDefaultProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDMLDefaultProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDMLDefaultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDMLDefaultProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDMLDefaultProto::InternalSwap(ResolvedDMLDefaultProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDMLDefaultProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[123]);
}

// ===================================================================

class ResolvedAssertStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAssertStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAssertStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedAssertStmtProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAssertStmtProto::_Internal::parent(const ResolvedAssertStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAssertStmtProto::_Internal::expression(const ResolvedAssertStmtProto* msg) {
  return *msg->_impl_.expression_;
}
ResolvedAssertStmtProto::ResolvedAssertStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAssertStmtProto)
}
ResolvedAssertStmtProto::ResolvedAssertStmtProto(const ResolvedAssertStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAssertStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.description_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_expression()) {
    _this->_impl_.expression_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expression_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAssertStmtProto)
}

inline void ResolvedAssertStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.description_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedAssertStmtProto::~ResolvedAssertStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAssertStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAssertStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expression_;
}

void ResolvedAssertStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAssertStmtProto::InternalSwap(ResolvedAssertStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAssertStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[124]);
}

// ===================================================================

class ResolvedAssertRowsModifiedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAssertRowsModifiedProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedAssertRowsModifiedProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& rows(const ResolvedAssertRowsModifiedProto* msg);
  static void set_has_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedAssertRowsModifiedProto::_Internal::parent(const ResolvedAssertRowsModifiedProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAssertRowsModifiedProto::_Internal::rows(const ResolvedAssertRowsModifiedProto* msg) {
  return *msg->_impl_.rows_;
}
ResolvedAssertRowsModifiedProto::ResolvedAssertRowsModifiedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAssertRowsModifiedProto)
}
ResolvedAssertRowsModifiedProto::ResolvedAssertRowsModifiedProto(const ResolvedAssertRowsModifiedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAssertRowsModifiedProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.rows_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_rows()) {
    _this->_impl_.rows_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.rows_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAssertRowsModifiedProto)
}

inline void ResolvedAssertRowsModifiedProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.rows_){nullptr}
  };
}

ResolvedAssertRowsModifiedProto::~ResolvedAssertRowsModifiedProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAssertRowsModifiedProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAssertRowsModifiedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.rows_;
}

void ResolvedAssertRowsModifiedProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAssertRowsModifiedProto::InternalSwap(ResolvedAssertRowsModifiedProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAssertRowsModifiedProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[125]);
}

// ===================================================================

class ResolvedInsertRowProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedInsertRowProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedInsertRowProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedInsertRowProto::_Internal::parent(const ResolvedInsertRowProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedInsertRowProto::ResolvedInsertRowProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedInsertRowProto)
}
ResolvedInsertRowProto::ResolvedInsertRowProto(const ResolvedInsertRowProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedInsertRowProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_list_){from._impl_.value_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedInsertRowProto)
}

inline void ResolvedInsertRowProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedInsertRowProto::~ResolvedInsertRowProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedInsertRowProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedInsertRowProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedInsertRowProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedInsertRowProto::InternalSwap(ResolvedInsertRowProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedInsertRowProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[126]);
}

// ===================================================================

class ResolvedInsertStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedInsertStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedInsertStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedInsertStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_insert_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedAssertRowsModifiedProto& assert_rows_modified(const ResolvedInsertStmtProto* msg);
  static void set_has_assert_rows_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedReturningClauseProto& returning(const ResolvedInsertStmtProto* msg);
  static void set_has_returning(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedInsertStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedInsertStmtProto::_Internal::parent(const ResolvedInsertStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedInsertStmtProto::_Internal::table_scan(const ResolvedInsertStmtProto* msg) {
  return *msg->_impl_.table_scan_;
}
const ::zetasql::ResolvedAssertRowsModifiedProto&
ResolvedInsertStmtProto::_Internal::assert_rows_modified(const ResolvedInsertStmtProto* msg) {
  return *msg->_impl_.assert_rows_modified_;
}
const ::zetasql::ResolvedReturningClauseProto&
ResolvedInsertStmtProto::_Internal::returning(const ResolvedInsertStmtProto* msg) {
  return *msg->_impl_.returning_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedInsertStmtProto::_Internal::query(const ResolvedInsertStmtProto* msg) {
  return *msg->_impl_.query_;
}
void ResolvedInsertStmtProto::clear_insert_column_list() {
  _impl_.insert_column_list_.Clear();
}
void ResolvedInsertStmtProto::clear_query_output_column_list() {
  _impl_.query_output_column_list_.Clear();
}
ResolvedInsertStmtProto::ResolvedInsertStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedInsertStmtProto)
}
ResolvedInsertStmtProto::ResolvedInsertStmtProto(const ResolvedInsertStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedInsertStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.insert_column_list_){from._impl_.insert_column_list_}
    , decltype(_impl_.row_list_){from._impl_.row_list_}
    , decltype(_impl_.query_output_column_list_){from._impl_.query_output_column_list_}
    , decltype(_impl_.query_parameter_list_){from._impl_.query_parameter_list_}
    , decltype(_impl_.column_access_list_){from._impl_.column_access_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.assert_rows_modified_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.returning_){nullptr}
    , decltype(_impl_.insert_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_table_scan()) {
    _this->_impl_.table_scan_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.table_scan_);
  }
  if (from._internal_has_assert_rows_modified()) {
    _this->_impl_.assert_rows_modified_ = new ::zetasql::ResolvedAssertRowsModifiedProto(*from._impl_.assert_rows_modified_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.query_);
  }
  if (from._internal_has_returning()) {
    _this->_impl_.returning_ = new ::zetasql::ResolvedReturningClauseProto(*from._impl_.returning_);
  }
  _this->_impl_.insert_mode_ = from._impl_.insert_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedInsertStmtProto)
}

inline void ResolvedInsertStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.insert_column_list_){arena}
    , decltype(_impl_.row_list_){arena}
    , decltype(_impl_.query_output_column_list_){arena}
    , decltype(_impl_.query_parameter_list_){arena}
    , decltype(_impl_.column_access_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.assert_rows_modified_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.returning_){nullptr}
    , decltype(_impl_.insert_mode_){0}
  };
}

ResolvedInsertStmtProto::~ResolvedInsertStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedInsertStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedInsertStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.insert_column_list_.~RepeatedPtrField();
  _impl_.row_list_.~RepeatedPtrField();
  _impl_.query_output_column_list_.~RepeatedPtrField();
  _impl_.query_parameter_list_.~RepeatedPtrField();
  _impl_.column_access_list_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_scan_;
  if (this != internal_default_instance()) delete _impl_.assert_rows_modified_;
  if (this != internal_default_instance()) delete _impl_.query_;
  if (this != internal_default_instance()) delete _impl_.returning_;
}

void ResolvedInsertStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedInsertStmtProto::InternalSwap(ResolvedInsertStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedInsertStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[127]);
}

// ===================================================================

class ResolvedDeleteStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDeleteStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDeleteStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedDeleteStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedAssertRowsModifiedProto& assert_rows_modified(const ResolvedDeleteStmtProto* msg);
  static void set_has_assert_rows_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedReturningClauseProto& returning(const ResolvedDeleteStmtProto* msg);
  static void set_has_returning(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& array_offset_column(const ResolvedDeleteStmtProto* msg);
  static void set_has_array_offset_column(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedExprProto& where_expr(const ResolvedDeleteStmtProto* msg);
  static void set_has_where_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDeleteStmtProto::_Internal::parent(const ResolvedDeleteStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedDeleteStmtProto::_Internal::table_scan(const ResolvedDeleteStmtProto* msg) {
  return *msg->_impl_.table_scan_;
}
const ::zetasql::ResolvedAssertRowsModifiedProto&
ResolvedDeleteStmtProto::_Internal::assert_rows_modified(const ResolvedDeleteStmtProto* msg) {
  return *msg->_impl_.assert_rows_modified_;
}
const ::zetasql::ResolvedReturningClauseProto&
ResolvedDeleteStmtProto::_Internal::returning(const ResolvedDeleteStmtProto* msg) {
  return *msg->_impl_.returning_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedDeleteStmtProto::_Internal::array_offset_column(const ResolvedDeleteStmtProto* msg) {
  return *msg->_impl_.array_offset_column_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedDeleteStmtProto::_Internal::where_expr(const ResolvedDeleteStmtProto* msg) {
  return *msg->_impl_.where_expr_;
}
ResolvedDeleteStmtProto::ResolvedDeleteStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDeleteStmtProto)
}
ResolvedDeleteStmtProto::ResolvedDeleteStmtProto(const ResolvedDeleteStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDeleteStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_access_list_){from._impl_.column_access_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.assert_rows_modified_){nullptr}
    , decltype(_impl_.where_expr_){nullptr}
    , decltype(_impl_.array_offset_column_){nullptr}
    , decltype(_impl_.returning_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_table_scan()) {
    _this->_impl_.table_scan_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.table_scan_);
  }
  if (from._internal_has_assert_rows_modified()) {
    _this->_impl_.assert_rows_modified_ = new ::zetasql::ResolvedAssertRowsModifiedProto(*from._impl_.assert_rows_modified_);
  }
  if (from._internal_has_where_expr()) {
    _this->_impl_.where_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.where_expr_);
  }
  if (from._internal_has_array_offset_column()) {
    _this->_impl_.array_offset_column_ = new ::zetasql::ResolvedColumnHolderProto(*from._impl_.array_offset_column_);
  }
  if (from._internal_has_returning()) {
    _this->_impl_.returning_ = new ::zetasql::ResolvedReturningClauseProto(*from._impl_.returning_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDeleteStmtProto)
}

inline void ResolvedDeleteStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_access_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.assert_rows_modified_){nullptr}
    , decltype(_impl_.where_expr_){nullptr}
    , decltype(_impl_.array_offset_column_){nullptr}
    , decltype(_impl_.returning_){nullptr}
  };
}

ResolvedDeleteStmtProto::~ResolvedDeleteStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDeleteStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDeleteStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_access_list_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_scan_;
  if (this != internal_default_instance()) delete _impl_.assert_rows_modified_;
  if (this != internal_default_instance()) delete _impl_.where_expr_;
  if (this != internal_default_instance()) delete _impl_.array_offset_column_;
  if (this != internal_default_instance()) delete _impl_.returning_;
}

void ResolvedDeleteStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDeleteStmtProto::InternalSwap(ResolvedDeleteStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDeleteStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[128]);
}

// ===================================================================

class ResolvedUpdateItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUpdateItemProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedUpdateItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& target(const ResolvedUpdateItemProto* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedDMLValueProto& set_value(const ResolvedUpdateItemProto* msg);
  static void set_has_set_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& element_column(const ResolvedUpdateItemProto* msg);
  static void set_has_element_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedUpdateItemProto::_Internal::parent(const ResolvedUpdateItemProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedUpdateItemProto::_Internal::target(const ResolvedUpdateItemProto* msg) {
  return *msg->_impl_.target_;
}
const ::zetasql::ResolvedDMLValueProto&
ResolvedUpdateItemProto::_Internal::set_value(const ResolvedUpdateItemProto* msg) {
  return *msg->_impl_.set_value_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedUpdateItemProto::_Internal::element_column(const ResolvedUpdateItemProto* msg) {
  return *msg->_impl_.element_column_;
}
ResolvedUpdateItemProto::ResolvedUpdateItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUpdateItemProto)
}
ResolvedUpdateItemProto::ResolvedUpdateItemProto(const ResolvedUpdateItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedUpdateItemProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delete_list_){from._impl_.delete_list_}
    , decltype(_impl_.update_list_){from._impl_.update_list_}
    , decltype(_impl_.insert_list_){from._impl_.insert_list_}
    , decltype(_impl_.array_update_list_){from._impl_.array_update_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.set_value_){nullptr}
    , decltype(_impl_.element_column_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.target_);
  }
  if (from._internal_has_set_value()) {
    _this->_impl_.set_value_ = new ::zetasql::ResolvedDMLValueProto(*from._impl_.set_value_);
  }
  if (from._internal_has_element_column()) {
    _this->_impl_.element_column_ = new ::zetasql::ResolvedColumnHolderProto(*from._impl_.element_column_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUpdateItemProto)
}

inline void ResolvedUpdateItemProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delete_list_){arena}
    , decltype(_impl_.update_list_){arena}
    , decltype(_impl_.insert_list_){arena}
    , decltype(_impl_.array_update_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.set_value_){nullptr}
    , decltype(_impl_.element_column_){nullptr}
  };
}

ResolvedUpdateItemProto::~ResolvedUpdateItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUpdateItemProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedUpdateItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delete_list_.~RepeatedPtrField();
  _impl_.update_list_.~RepeatedPtrField();
  _impl_.insert_list_.~RepeatedPtrField();
  _impl_.array_update_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.set_value_;
  if (this != internal_default_instance()) delete _impl_.element_column_;
}

void ResolvedUpdateItemProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedUpdateItemProto::InternalSwap(ResolvedUpdateItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUpdateItemProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[129]);
}

// ===================================================================

class ResolvedUpdateArrayItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUpdateArrayItemProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedUpdateArrayItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& offset(const ResolvedUpdateArrayItemProto* msg);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedUpdateItemProto& update_item(const ResolvedUpdateArrayItemProto* msg);
  static void set_has_update_item(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedUpdateArrayItemProto::_Internal::parent(const ResolvedUpdateArrayItemProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedUpdateArrayItemProto::_Internal::offset(const ResolvedUpdateArrayItemProto* msg) {
  return *msg->_impl_.offset_;
}
const ::zetasql::ResolvedUpdateItemProto&
ResolvedUpdateArrayItemProto::_Internal::update_item(const ResolvedUpdateArrayItemProto* msg) {
  return *msg->_impl_.update_item_;
}
ResolvedUpdateArrayItemProto::ResolvedUpdateArrayItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUpdateArrayItemProto)
}
ResolvedUpdateArrayItemProto::ResolvedUpdateArrayItemProto(const ResolvedUpdateArrayItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedUpdateArrayItemProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.offset_){nullptr}
    , decltype(_impl_.update_item_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_offset()) {
    _this->_impl_.offset_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.offset_);
  }
  if (from._internal_has_update_item()) {
    _this->_impl_.update_item_ = new ::zetasql::ResolvedUpdateItemProto(*from._impl_.update_item_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUpdateArrayItemProto)
}

inline void ResolvedUpdateArrayItemProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.offset_){nullptr}
    , decltype(_impl_.update_item_){nullptr}
  };
}

ResolvedUpdateArrayItemProto::~ResolvedUpdateArrayItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUpdateArrayItemProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedUpdateArrayItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.offset_;
  if (this != internal_default_instance()) delete _impl_.update_item_;
}

void ResolvedUpdateArrayItemProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedUpdateArrayItemProto::InternalSwap(ResolvedUpdateArrayItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUpdateArrayItemProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[130]);
}

// ===================================================================

class ResolvedUpdateStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUpdateStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedUpdateStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedUpdateStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedAssertRowsModifiedProto& assert_rows_modified(const ResolvedUpdateStmtProto* msg);
  static void set_has_assert_rows_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedReturningClauseProto& returning(const ResolvedUpdateStmtProto* msg);
  static void set_has_returning(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& array_offset_column(const ResolvedUpdateStmtProto* msg);
  static void set_has_array_offset_column(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::AnyResolvedExprProto& where_expr(const ResolvedUpdateStmtProto* msg);
  static void set_has_where_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedScanProto& from_scan(const ResolvedUpdateStmtProto* msg);
  static void set_has_from_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedUpdateStmtProto::_Internal::parent(const ResolvedUpdateStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedUpdateStmtProto::_Internal::table_scan(const ResolvedUpdateStmtProto* msg) {
  return *msg->_impl_.table_scan_;
}
const ::zetasql::ResolvedAssertRowsModifiedProto&
ResolvedUpdateStmtProto::_Internal::assert_rows_modified(const ResolvedUpdateStmtProto* msg) {
  return *msg->_impl_.assert_rows_modified_;
}
const ::zetasql::ResolvedReturningClauseProto&
ResolvedUpdateStmtProto::_Internal::returning(const ResolvedUpdateStmtProto* msg) {
  return *msg->_impl_.returning_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedUpdateStmtProto::_Internal::array_offset_column(const ResolvedUpdateStmtProto* msg) {
  return *msg->_impl_.array_offset_column_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedUpdateStmtProto::_Internal::where_expr(const ResolvedUpdateStmtProto* msg) {
  return *msg->_impl_.where_expr_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedUpdateStmtProto::_Internal::from_scan(const ResolvedUpdateStmtProto* msg) {
  return *msg->_impl_.from_scan_;
}
ResolvedUpdateStmtProto::ResolvedUpdateStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUpdateStmtProto)
}
ResolvedUpdateStmtProto::ResolvedUpdateStmtProto(const ResolvedUpdateStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedUpdateStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.update_item_list_){from._impl_.update_item_list_}
    , decltype(_impl_.column_access_list_){from._impl_.column_access_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.assert_rows_modified_){nullptr}
    , decltype(_impl_.where_expr_){nullptr}
    , decltype(_impl_.from_scan_){nullptr}
    , decltype(_impl_.array_offset_column_){nullptr}
    , decltype(_impl_.returning_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_table_scan()) {
    _this->_impl_.table_scan_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.table_scan_);
  }
  if (from._internal_has_assert_rows_modified()) {
    _this->_impl_.assert_rows_modified_ = new ::zetasql::ResolvedAssertRowsModifiedProto(*from._impl_.assert_rows_modified_);
  }
  if (from._internal_has_where_expr()) {
    _this->_impl_.where_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.where_expr_);
  }
  if (from._internal_has_from_scan()) {
    _this->_impl_.from_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.from_scan_);
  }
  if (from._internal_has_array_offset_column()) {
    _this->_impl_.array_offset_column_ = new ::zetasql::ResolvedColumnHolderProto(*from._impl_.array_offset_column_);
  }
  if (from._internal_has_returning()) {
    _this->_impl_.returning_ = new ::zetasql::ResolvedReturningClauseProto(*from._impl_.returning_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUpdateStmtProto)
}

inline void ResolvedUpdateStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.update_item_list_){arena}
    , decltype(_impl_.column_access_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.assert_rows_modified_){nullptr}
    , decltype(_impl_.where_expr_){nullptr}
    , decltype(_impl_.from_scan_){nullptr}
    , decltype(_impl_.array_offset_column_){nullptr}
    , decltype(_impl_.returning_){nullptr}
  };
}

ResolvedUpdateStmtProto::~ResolvedUpdateStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUpdateStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedUpdateStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.update_item_list_.~RepeatedPtrField();
  _impl_.column_access_list_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_scan_;
  if (this != internal_default_instance()) delete _impl_.assert_rows_modified_;
  if (this != internal_default_instance()) delete _impl_.where_expr_;
  if (this != internal_default_instance()) delete _impl_.from_scan_;
  if (this != internal_default_instance()) delete _impl_.array_offset_column_;
  if (this != internal_default_instance()) delete _impl_.returning_;
}

void ResolvedUpdateStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedUpdateStmtProto::InternalSwap(ResolvedUpdateStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUpdateStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[131]);
}

// ===================================================================

class ResolvedMergeWhenProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMergeWhenProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedMergeWhenProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedExprProto& match_expr(const ResolvedMergeWhenProto* msg);
  static void set_has_match_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedInsertRowProto& insert_row(const ResolvedMergeWhenProto* msg);
  static void set_has_insert_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedMergeWhenProto::_Internal::parent(const ResolvedMergeWhenProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedMergeWhenProto::_Internal::match_expr(const ResolvedMergeWhenProto* msg) {
  return *msg->_impl_.match_expr_;
}
const ::zetasql::ResolvedInsertRowProto&
ResolvedMergeWhenProto::_Internal::insert_row(const ResolvedMergeWhenProto* msg) {
  return *msg->_impl_.insert_row_;
}
void ResolvedMergeWhenProto::clear_insert_column_list() {
  _impl_.insert_column_list_.Clear();
}
ResolvedMergeWhenProto::ResolvedMergeWhenProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMergeWhenProto)
}
ResolvedMergeWhenProto::ResolvedMergeWhenProto(const ResolvedMergeWhenProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedMergeWhenProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.insert_column_list_){from._impl_.insert_column_list_}
    , decltype(_impl_.update_item_list_){from._impl_.update_item_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.match_expr_){nullptr}
    , decltype(_impl_.insert_row_){nullptr}
    , decltype(_impl_.match_type_){}
    , decltype(_impl_.action_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_match_expr()) {
    _this->_impl_.match_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.match_expr_);
  }
  if (from._internal_has_insert_row()) {
    _this->_impl_.insert_row_ = new ::zetasql::ResolvedInsertRowProto(*from._impl_.insert_row_);
  }
  ::memcpy(&_impl_.match_type_, &from._impl_.match_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_type_) -
    reinterpret_cast<char*>(&_impl_.match_type_)) + sizeof(_impl_.action_type_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMergeWhenProto)
}

inline void ResolvedMergeWhenProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.insert_column_list_){arena}
    , decltype(_impl_.update_item_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.match_expr_){nullptr}
    , decltype(_impl_.insert_row_){nullptr}
    , decltype(_impl_.match_type_){0}
    , decltype(_impl_.action_type_){0}
  };
}

ResolvedMergeWhenProto::~ResolvedMergeWhenProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMergeWhenProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedMergeWhenProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.insert_column_list_.~RepeatedPtrField();
  _impl_.update_item_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.match_expr_;
  if (this != internal_default_instance()) delete _impl_.insert_row_;
}

void ResolvedMergeWhenProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedMergeWhenProto::InternalSwap(ResolvedMergeWhenProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMergeWhenProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[132]);
}

// ===================================================================

class ResolvedMergeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMergeStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedMergeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedMergeStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& from_scan(const ResolvedMergeStmtProto* msg);
  static void set_has_from_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& merge_expr(const ResolvedMergeStmtProto* msg);
  static void set_has_merge_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedMergeStmtProto::_Internal::parent(const ResolvedMergeStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedMergeStmtProto::_Internal::table_scan(const ResolvedMergeStmtProto* msg) {
  return *msg->_impl_.table_scan_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedMergeStmtProto::_Internal::from_scan(const ResolvedMergeStmtProto* msg) {
  return *msg->_impl_.from_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedMergeStmtProto::_Internal::merge_expr(const ResolvedMergeStmtProto* msg) {
  return *msg->_impl_.merge_expr_;
}
ResolvedMergeStmtProto::ResolvedMergeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMergeStmtProto)
}
ResolvedMergeStmtProto::ResolvedMergeStmtProto(const ResolvedMergeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedMergeStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.when_clause_list_){from._impl_.when_clause_list_}
    , decltype(_impl_.column_access_list_){from._impl_.column_access_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.from_scan_){nullptr}
    , decltype(_impl_.merge_expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_table_scan()) {
    _this->_impl_.table_scan_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.table_scan_);
  }
  if (from._internal_has_from_scan()) {
    _this->_impl_.from_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.from_scan_);
  }
  if (from._internal_has_merge_expr()) {
    _this->_impl_.merge_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.merge_expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMergeStmtProto)
}

inline void ResolvedMergeStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.when_clause_list_){arena}
    , decltype(_impl_.column_access_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.from_scan_){nullptr}
    , decltype(_impl_.merge_expr_){nullptr}
  };
}

ResolvedMergeStmtProto::~ResolvedMergeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMergeStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedMergeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.when_clause_list_.~RepeatedPtrField();
  _impl_.column_access_list_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_scan_;
  if (this != internal_default_instance()) delete _impl_.from_scan_;
  if (this != internal_default_instance()) delete _impl_.merge_expr_;
}

void ResolvedMergeStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedMergeStmtProto::InternalSwap(ResolvedMergeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMergeStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[133]);
}

// ===================================================================

class ResolvedTruncateStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedTruncateStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedTruncateStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedTruncateStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& where_expr(const ResolvedTruncateStmtProto* msg);
  static void set_has_where_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedTruncateStmtProto::_Internal::parent(const ResolvedTruncateStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedTruncateStmtProto::_Internal::table_scan(const ResolvedTruncateStmtProto* msg) {
  return *msg->_impl_.table_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedTruncateStmtProto::_Internal::where_expr(const ResolvedTruncateStmtProto* msg) {
  return *msg->_impl_.where_expr_;
}
ResolvedTruncateStmtProto::ResolvedTruncateStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedTruncateStmtProto)
}
ResolvedTruncateStmtProto::ResolvedTruncateStmtProto(const ResolvedTruncateStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedTruncateStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.where_expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_table_scan()) {
    _this->_impl_.table_scan_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.table_scan_);
  }
  if (from._internal_has_where_expr()) {
    _this->_impl_.where_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.where_expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedTruncateStmtProto)
}

inline void ResolvedTruncateStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.where_expr_){nullptr}
  };
}

ResolvedTruncateStmtProto::~ResolvedTruncateStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedTruncateStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedTruncateStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_scan_;
  if (this != internal_default_instance()) delete _impl_.where_expr_;
}

void ResolvedTruncateStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedTruncateStmtProto::InternalSwap(ResolvedTruncateStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedTruncateStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[134]);
}

// ===================================================================

class ResolvedObjectUnitProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedObjectUnitProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedObjectUnitProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedObjectUnitProto::_Internal::parent(const ResolvedObjectUnitProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedObjectUnitProto::ResolvedObjectUnitProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedObjectUnitProto)
}
ResolvedObjectUnitProto::ResolvedObjectUnitProto(const ResolvedObjectUnitProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedObjectUnitProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedObjectUnitProto)
}

inline void ResolvedObjectUnitProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedObjectUnitProto::~ResolvedObjectUnitProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedObjectUnitProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedObjectUnitProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedObjectUnitProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedObjectUnitProto::InternalSwap(ResolvedObjectUnitProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedObjectUnitProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[135]);
}

// ===================================================================

class ResolvedPrivilegeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedPrivilegeProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedPrivilegeProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedPrivilegeProto::_Internal::parent(const ResolvedPrivilegeProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedPrivilegeProto::ResolvedPrivilegeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedPrivilegeProto)
}
ResolvedPrivilegeProto::ResolvedPrivilegeProto(const ResolvedPrivilegeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedPrivilegeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_list_){from._impl_.unit_list_}
    , decltype(_impl_.action_type_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action_type()) {
    _this->_impl_.action_type_.Set(from._internal_action_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedPrivilegeProto)
}

inline void ResolvedPrivilegeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_list_){arena}
    , decltype(_impl_.action_type_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.action_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedPrivilegeProto::~ResolvedPrivilegeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedPrivilegeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedPrivilegeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unit_list_.~RepeatedPtrField();
  _impl_.action_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedPrivilegeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedPrivilegeProto::InternalSwap(ResolvedPrivilegeProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedPrivilegeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[136]);
}

// ===================================================================

class AnyResolvedGrantOrRevokeStmtProto::_Internal {
 public:
  static const ::zetasql::ResolvedGrantStmtProto& resolved_grant_stmt_node(const AnyResolvedGrantOrRevokeStmtProto* msg);
  static const ::zetasql::ResolvedRevokeStmtProto& resolved_revoke_stmt_node(const AnyResolvedGrantOrRevokeStmtProto* msg);
};

const ::zetasql::ResolvedGrantStmtProto&
AnyResolvedGrantOrRevokeStmtProto::_Internal::resolved_grant_stmt_node(const AnyResolvedGrantOrRevokeStmtProto* msg) {
  return *msg->_impl_.node_.resolved_grant_stmt_node_;
}
const ::zetasql::ResolvedRevokeStmtProto&
AnyResolvedGrantOrRevokeStmtProto::_Internal::resolved_revoke_stmt_node(const AnyResolvedGrantOrRevokeStmtProto* msg) {
  return *msg->_impl_.node_.resolved_revoke_stmt_node_;
}
void AnyResolvedGrantOrRevokeStmtProto::set_allocated_resolved_grant_stmt_node(::zetasql::ResolvedGrantStmtProto* resolved_grant_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_grant_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_grant_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_grant_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_grant_stmt_node, submessage_arena);
    }
    set_has_resolved_grant_stmt_node();
    _impl_.node_.resolved_grant_stmt_node_ = resolved_grant_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_grant_stmt_node)
}
void AnyResolvedGrantOrRevokeStmtProto::set_allocated_resolved_revoke_stmt_node(::zetasql::ResolvedRevokeStmtProto* resolved_revoke_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_revoke_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_revoke_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_revoke_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_revoke_stmt_node, submessage_arena);
    }
    set_has_resolved_revoke_stmt_node();
    _impl_.node_.resolved_revoke_stmt_node_ = resolved_revoke_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_revoke_stmt_node)
}
AnyResolvedGrantOrRevokeStmtProto::AnyResolvedGrantOrRevokeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedGrantOrRevokeStmtProto)
}
AnyResolvedGrantOrRevokeStmtProto::AnyResolvedGrantOrRevokeStmtProto(const AnyResolvedGrantOrRevokeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedGrantOrRevokeStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedGrantStmtNode: {
      _this->_internal_mutable_resolved_grant_stmt_node()->::zetasql::ResolvedGrantStmtProto::MergeFrom(
          from._internal_resolved_grant_stmt_node());
      break;
    }
    case kResolvedRevokeStmtNode: {
      _this->_internal_mutable_resolved_revoke_stmt_node()->::zetasql::ResolvedRevokeStmtProto::MergeFrom(
          from._internal_resolved_revoke_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedGrantOrRevokeStmtProto)
}

inline void AnyResolvedGrantOrRevokeStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedGrantOrRevokeStmtProto::~AnyResolvedGrantOrRevokeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedGrantOrRevokeStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedGrantOrRevokeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedGrantOrRevokeStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedGrantOrRevokeStmtProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedGrantOrRevokeStmtProto)
  switch (node_case()) {
    case kResolvedGrantStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_grant_stmt_node_;
      }
      break;
    }
    case kResolvedRevokeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_revoke_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedGrantOrRevokeStmtProto::InternalSwap(AnyResolvedGrantOrRevokeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedGrantOrRevokeStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[137]);
}

// ===================================================================

class ResolvedGrantOrRevokeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGrantOrRevokeStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedGrantOrRevokeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedGrantOrRevokeStmtProto::_Internal::parent(const ResolvedGrantOrRevokeStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedGrantOrRevokeStmtProto::ResolvedGrantOrRevokeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGrantOrRevokeStmtProto)
}
ResolvedGrantOrRevokeStmtProto::ResolvedGrantOrRevokeStmtProto(const ResolvedGrantOrRevokeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedGrantOrRevokeStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_list_){from._impl_.privilege_list_}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.grantee_list_){from._impl_.grantee_list_}
    , decltype(_impl_.grantee_expr_list_){from._impl_.grantee_expr_list_}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    _this->_impl_.object_type_.Set(from._internal_object_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGrantOrRevokeStmtProto)
}

inline void ResolvedGrantOrRevokeStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_list_){arena}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.grantee_list_){arena}
    , decltype(_impl_.grantee_expr_list_){arena}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedGrantOrRevokeStmtProto::~ResolvedGrantOrRevokeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGrantOrRevokeStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedGrantOrRevokeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.privilege_list_.~RepeatedPtrField();
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.grantee_list_.~RepeatedPtrField();
  _impl_.grantee_expr_list_.~RepeatedPtrField();
  _impl_.object_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedGrantOrRevokeStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedGrantOrRevokeStmtProto::InternalSwap(ResolvedGrantOrRevokeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGrantOrRevokeStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[138]);
}

// ===================================================================

class ResolvedGrantStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGrantStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedGrantOrRevokeStmtProto& parent(const ResolvedGrantStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedGrantOrRevokeStmtProto&
ResolvedGrantStmtProto::_Internal::parent(const ResolvedGrantStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedGrantStmtProto::ResolvedGrantStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGrantStmtProto)
}
ResolvedGrantStmtProto::ResolvedGrantStmtProto(const ResolvedGrantStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedGrantStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedGrantOrRevokeStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGrantStmtProto)
}

inline void ResolvedGrantStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedGrantStmtProto::~ResolvedGrantStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGrantStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedGrantStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedGrantStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedGrantStmtProto::InternalSwap(ResolvedGrantStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGrantStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[139]);
}

// ===================================================================

class ResolvedRevokeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRevokeStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedGrantOrRevokeStmtProto& parent(const ResolvedRevokeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedGrantOrRevokeStmtProto&
ResolvedRevokeStmtProto::_Internal::parent(const ResolvedRevokeStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRevokeStmtProto::ResolvedRevokeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRevokeStmtProto)
}
ResolvedRevokeStmtProto::ResolvedRevokeStmtProto(const ResolvedRevokeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRevokeStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedGrantOrRevokeStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRevokeStmtProto)
}

inline void ResolvedRevokeStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedRevokeStmtProto::~ResolvedRevokeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRevokeStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRevokeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRevokeStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRevokeStmtProto::InternalSwap(ResolvedRevokeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRevokeStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[140]);
}

// ===================================================================

class AnyResolvedAlterObjectStmtProto::_Internal {
 public:
  static const ::zetasql::ResolvedAlterRowAccessPolicyStmtProto& resolved_alter_row_access_policy_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterTableStmtProto& resolved_alter_table_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterViewStmtProto& resolved_alter_view_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterMaterializedViewStmtProto& resolved_alter_materialized_view_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterDatabaseStmtProto& resolved_alter_database_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto& resolved_alter_all_row_access_policies_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterEntityStmtProto& resolved_alter_entity_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterSchemaStmtProto& resolved_alter_schema_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto& resolved_alter_privilege_restriction_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterModelStmtProto& resolved_alter_model_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
};

const ::zetasql::ResolvedAlterRowAccessPolicyStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_row_access_policy_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_row_access_policy_stmt_node_;
}
const ::zetasql::ResolvedAlterTableStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_table_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_table_stmt_node_;
}
const ::zetasql::ResolvedAlterViewStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_view_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_view_stmt_node_;
}
const ::zetasql::ResolvedAlterMaterializedViewStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_materialized_view_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_materialized_view_stmt_node_;
}
const ::zetasql::ResolvedAlterDatabaseStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_database_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_database_stmt_node_;
}
const ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_all_row_access_policies_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_all_row_access_policies_stmt_node_;
}
const ::zetasql::ResolvedAlterEntityStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_entity_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_entity_stmt_node_;
}
const ::zetasql::ResolvedAlterSchemaStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_schema_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_schema_stmt_node_;
}
const ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_privilege_restriction_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_privilege_restriction_stmt_node_;
}
const ::zetasql::ResolvedAlterModelStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_model_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.node_.resolved_alter_model_stmt_node_;
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_row_access_policy_stmt_node(::zetasql::ResolvedAlterRowAccessPolicyStmtProto* resolved_alter_row_access_policy_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_row_access_policy_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_row_access_policy_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_row_access_policy_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_row_access_policy_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_row_access_policy_stmt_node();
    _impl_.node_.resolved_alter_row_access_policy_stmt_node_ = resolved_alter_row_access_policy_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_row_access_policy_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_table_stmt_node(::zetasql::ResolvedAlterTableStmtProto* resolved_alter_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_table_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_table_stmt_node();
    _impl_.node_.resolved_alter_table_stmt_node_ = resolved_alter_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_table_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_view_stmt_node(::zetasql::ResolvedAlterViewStmtProto* resolved_alter_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_view_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_view_stmt_node();
    _impl_.node_.resolved_alter_view_stmt_node_ = resolved_alter_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_view_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_materialized_view_stmt_node(::zetasql::ResolvedAlterMaterializedViewStmtProto* resolved_alter_materialized_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_materialized_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_materialized_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_materialized_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_materialized_view_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_materialized_view_stmt_node();
    _impl_.node_.resolved_alter_materialized_view_stmt_node_ = resolved_alter_materialized_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_materialized_view_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_database_stmt_node(::zetasql::ResolvedAlterDatabaseStmtProto* resolved_alter_database_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_database_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_database_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_database_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_database_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_database_stmt_node();
    _impl_.node_.resolved_alter_database_stmt_node_ = resolved_alter_database_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_database_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_all_row_access_policies_stmt_node(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* resolved_alter_all_row_access_policies_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_all_row_access_policies_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_all_row_access_policies_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_all_row_access_policies_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_all_row_access_policies_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_all_row_access_policies_stmt_node();
    _impl_.node_.resolved_alter_all_row_access_policies_stmt_node_ = resolved_alter_all_row_access_policies_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_all_row_access_policies_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_entity_stmt_node(::zetasql::ResolvedAlterEntityStmtProto* resolved_alter_entity_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_entity_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_entity_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_entity_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_entity_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_entity_stmt_node();
    _impl_.node_.resolved_alter_entity_stmt_node_ = resolved_alter_entity_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_entity_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_schema_stmt_node(::zetasql::ResolvedAlterSchemaStmtProto* resolved_alter_schema_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_schema_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_schema_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_schema_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_schema_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_schema_stmt_node();
    _impl_.node_.resolved_alter_schema_stmt_node_ = resolved_alter_schema_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_schema_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_privilege_restriction_stmt_node(::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto* resolved_alter_privilege_restriction_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_privilege_restriction_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_privilege_restriction_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_privilege_restriction_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_privilege_restriction_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_privilege_restriction_stmt_node();
    _impl_.node_.resolved_alter_privilege_restriction_stmt_node_ = resolved_alter_privilege_restriction_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_privilege_restriction_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_model_stmt_node(::zetasql::ResolvedAlterModelStmtProto* resolved_alter_model_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_model_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_model_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_model_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_model_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_model_stmt_node();
    _impl_.node_.resolved_alter_model_stmt_node_ = resolved_alter_model_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_model_stmt_node)
}
AnyResolvedAlterObjectStmtProto::AnyResolvedAlterObjectStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedAlterObjectStmtProto)
}
AnyResolvedAlterObjectStmtProto::AnyResolvedAlterObjectStmtProto(const AnyResolvedAlterObjectStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedAlterObjectStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedAlterRowAccessPolicyStmtNode: {
      _this->_internal_mutable_resolved_alter_row_access_policy_stmt_node()->::zetasql::ResolvedAlterRowAccessPolicyStmtProto::MergeFrom(
          from._internal_resolved_alter_row_access_policy_stmt_node());
      break;
    }
    case kResolvedAlterTableStmtNode: {
      _this->_internal_mutable_resolved_alter_table_stmt_node()->::zetasql::ResolvedAlterTableStmtProto::MergeFrom(
          from._internal_resolved_alter_table_stmt_node());
      break;
    }
    case kResolvedAlterViewStmtNode: {
      _this->_internal_mutable_resolved_alter_view_stmt_node()->::zetasql::ResolvedAlterViewStmtProto::MergeFrom(
          from._internal_resolved_alter_view_stmt_node());
      break;
    }
    case kResolvedAlterMaterializedViewStmtNode: {
      _this->_internal_mutable_resolved_alter_materialized_view_stmt_node()->::zetasql::ResolvedAlterMaterializedViewStmtProto::MergeFrom(
          from._internal_resolved_alter_materialized_view_stmt_node());
      break;
    }
    case kResolvedAlterDatabaseStmtNode: {
      _this->_internal_mutable_resolved_alter_database_stmt_node()->::zetasql::ResolvedAlterDatabaseStmtProto::MergeFrom(
          from._internal_resolved_alter_database_stmt_node());
      break;
    }
    case kResolvedAlterAllRowAccessPoliciesStmtNode: {
      _this->_internal_mutable_resolved_alter_all_row_access_policies_stmt_node()->::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto::MergeFrom(
          from._internal_resolved_alter_all_row_access_policies_stmt_node());
      break;
    }
    case kResolvedAlterEntityStmtNode: {
      _this->_internal_mutable_resolved_alter_entity_stmt_node()->::zetasql::ResolvedAlterEntityStmtProto::MergeFrom(
          from._internal_resolved_alter_entity_stmt_node());
      break;
    }
    case kResolvedAlterSchemaStmtNode: {
      _this->_internal_mutable_resolved_alter_schema_stmt_node()->::zetasql::ResolvedAlterSchemaStmtProto::MergeFrom(
          from._internal_resolved_alter_schema_stmt_node());
      break;
    }
    case kResolvedAlterPrivilegeRestrictionStmtNode: {
      _this->_internal_mutable_resolved_alter_privilege_restriction_stmt_node()->::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto::MergeFrom(
          from._internal_resolved_alter_privilege_restriction_stmt_node());
      break;
    }
    case kResolvedAlterModelStmtNode: {
      _this->_internal_mutable_resolved_alter_model_stmt_node()->::zetasql::ResolvedAlterModelStmtProto::MergeFrom(
          from._internal_resolved_alter_model_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedAlterObjectStmtProto)
}

inline void AnyResolvedAlterObjectStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedAlterObjectStmtProto::~AnyResolvedAlterObjectStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedAlterObjectStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedAlterObjectStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedAlterObjectStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedAlterObjectStmtProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedAlterObjectStmtProto)
  switch (node_case()) {
    case kResolvedAlterRowAccessPolicyStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_row_access_policy_stmt_node_;
      }
      break;
    }
    case kResolvedAlterTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_table_stmt_node_;
      }
      break;
    }
    case kResolvedAlterViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_view_stmt_node_;
      }
      break;
    }
    case kResolvedAlterMaterializedViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_materialized_view_stmt_node_;
      }
      break;
    }
    case kResolvedAlterDatabaseStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_database_stmt_node_;
      }
      break;
    }
    case kResolvedAlterAllRowAccessPoliciesStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_all_row_access_policies_stmt_node_;
      }
      break;
    }
    case kResolvedAlterEntityStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_entity_stmt_node_;
      }
      break;
    }
    case kResolvedAlterSchemaStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_schema_stmt_node_;
      }
      break;
    }
    case kResolvedAlterPrivilegeRestrictionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_privilege_restriction_stmt_node_;
      }
      break;
    }
    case kResolvedAlterModelStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_model_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedAlterObjectStmtProto::InternalSwap(AnyResolvedAlterObjectStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedAlterObjectStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[141]);
}

// ===================================================================

class ResolvedAlterObjectStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterObjectStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAlterObjectStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAlterObjectStmtProto::_Internal::parent(const ResolvedAlterObjectStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterObjectStmtProto::ResolvedAlterObjectStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterObjectStmtProto)
}
ResolvedAlterObjectStmtProto::ResolvedAlterObjectStmtProto(const ResolvedAlterObjectStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterObjectStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.alter_action_list_){from._impl_.alter_action_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterObjectStmtProto)
}

inline void ResolvedAlterObjectStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.alter_action_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
}

ResolvedAlterObjectStmtProto::~ResolvedAlterObjectStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterObjectStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterObjectStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.alter_action_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterObjectStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterObjectStmtProto::InternalSwap(ResolvedAlterObjectStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterObjectStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[142]);
}

// ===================================================================

class ResolvedAlterDatabaseStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterDatabaseStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterDatabaseStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterDatabaseStmtProto::_Internal::parent(const ResolvedAlterDatabaseStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterDatabaseStmtProto::ResolvedAlterDatabaseStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterDatabaseStmtProto)
}
ResolvedAlterDatabaseStmtProto::ResolvedAlterDatabaseStmtProto(const ResolvedAlterDatabaseStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterDatabaseStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterDatabaseStmtProto)
}

inline void ResolvedAlterDatabaseStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterDatabaseStmtProto::~ResolvedAlterDatabaseStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterDatabaseStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterDatabaseStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterDatabaseStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterDatabaseStmtProto::InternalSwap(ResolvedAlterDatabaseStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterDatabaseStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[143]);
}

// ===================================================================

class ResolvedAlterMaterializedViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterMaterializedViewStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterMaterializedViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterMaterializedViewStmtProto::_Internal::parent(const ResolvedAlterMaterializedViewStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterMaterializedViewStmtProto::ResolvedAlterMaterializedViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterMaterializedViewStmtProto)
}
ResolvedAlterMaterializedViewStmtProto::ResolvedAlterMaterializedViewStmtProto(const ResolvedAlterMaterializedViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterMaterializedViewStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterMaterializedViewStmtProto)
}

inline void ResolvedAlterMaterializedViewStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterMaterializedViewStmtProto::~ResolvedAlterMaterializedViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterMaterializedViewStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterMaterializedViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterMaterializedViewStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterMaterializedViewStmtProto::InternalSwap(ResolvedAlterMaterializedViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterMaterializedViewStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[144]);
}

// ===================================================================

class ResolvedAlterSchemaStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterSchemaStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterSchemaStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterSchemaStmtProto::_Internal::parent(const ResolvedAlterSchemaStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterSchemaStmtProto::ResolvedAlterSchemaStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterSchemaStmtProto)
}
ResolvedAlterSchemaStmtProto::ResolvedAlterSchemaStmtProto(const ResolvedAlterSchemaStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterSchemaStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterSchemaStmtProto)
}

inline void ResolvedAlterSchemaStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterSchemaStmtProto::~ResolvedAlterSchemaStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterSchemaStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterSchemaStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterSchemaStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterSchemaStmtProto::InternalSwap(ResolvedAlterSchemaStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterSchemaStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[145]);
}

// ===================================================================

class ResolvedAlterModelStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterModelStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterModelStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterModelStmtProto::_Internal::parent(const ResolvedAlterModelStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterModelStmtProto::ResolvedAlterModelStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterModelStmtProto)
}
ResolvedAlterModelStmtProto::ResolvedAlterModelStmtProto(const ResolvedAlterModelStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterModelStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterModelStmtProto)
}

inline void ResolvedAlterModelStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterModelStmtProto::~ResolvedAlterModelStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterModelStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterModelStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterModelStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterModelStmtProto::InternalSwap(ResolvedAlterModelStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterModelStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[146]);
}

// ===================================================================

class ResolvedAlterTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterTableStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterTableStmtProto::_Internal::parent(const ResolvedAlterTableStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterTableStmtProto::ResolvedAlterTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterTableStmtProto)
}
ResolvedAlterTableStmtProto::ResolvedAlterTableStmtProto(const ResolvedAlterTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterTableStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterTableStmtProto)
}

inline void ResolvedAlterTableStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterTableStmtProto::~ResolvedAlterTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterTableStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterTableStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterTableStmtProto::InternalSwap(ResolvedAlterTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterTableStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[147]);
}

// ===================================================================

class ResolvedAlterViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterViewStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterViewStmtProto::_Internal::parent(const ResolvedAlterViewStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterViewStmtProto::ResolvedAlterViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterViewStmtProto)
}
ResolvedAlterViewStmtProto::ResolvedAlterViewStmtProto(const ResolvedAlterViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterViewStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterViewStmtProto)
}

inline void ResolvedAlterViewStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterViewStmtProto::~ResolvedAlterViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterViewStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterViewStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterViewStmtProto::InternalSwap(ResolvedAlterViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterViewStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[148]);
}

// ===================================================================

class AnyResolvedAlterActionProto::_Internal {
 public:
  static const ::zetasql::ResolvedSetOptionsActionProto& resolved_set_options_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAddColumnActionProto& resolved_add_column_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedDropColumnActionProto& resolved_drop_column_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedGrantToActionProto& resolved_grant_to_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedFilterUsingActionProto& resolved_filter_using_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedRevokeFromActionProto& resolved_revoke_from_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedRenameToActionProto& resolved_rename_to_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedSetAsActionProto& resolved_set_as_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAddConstraintActionProto& resolved_add_constraint_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedDropConstraintActionProto& resolved_drop_constraint_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedDropPrimaryKeyActionProto& resolved_drop_primary_key_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedRenameColumnActionProto& resolved_rename_column_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedSetCollateClauseProto& resolved_set_collate_clause_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedRestrictToActionProto& resolved_restrict_to_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAddToRestricteeListActionProto& resolved_add_to_restrictee_list_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedRemoveFromRestricteeListActionProto& resolved_remove_from_restrictee_list_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::AnyResolvedAlterColumnActionProto& resolved_alter_column_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAlterSubEntityActionProto& resolved_alter_sub_entity_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAddSubEntityActionProto& resolved_add_sub_entity_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedDropSubEntityActionProto& resolved_drop_sub_entity_action_node(const AnyResolvedAlterActionProto* msg);
};

const ::zetasql::ResolvedSetOptionsActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_set_options_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_set_options_action_node_;
}
const ::zetasql::ResolvedAddColumnActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_add_column_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_add_column_action_node_;
}
const ::zetasql::ResolvedDropColumnActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_drop_column_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_drop_column_action_node_;
}
const ::zetasql::ResolvedGrantToActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_grant_to_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_grant_to_action_node_;
}
const ::zetasql::ResolvedFilterUsingActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_filter_using_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_filter_using_action_node_;
}
const ::zetasql::ResolvedRevokeFromActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_revoke_from_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_revoke_from_action_node_;
}
const ::zetasql::ResolvedRenameToActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_rename_to_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_rename_to_action_node_;
}
const ::zetasql::ResolvedSetAsActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_set_as_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_set_as_action_node_;
}
const ::zetasql::ResolvedAddConstraintActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_add_constraint_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_add_constraint_action_node_;
}
const ::zetasql::ResolvedDropConstraintActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_drop_constraint_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_drop_constraint_action_node_;
}
const ::zetasql::ResolvedDropPrimaryKeyActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_drop_primary_key_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_drop_primary_key_action_node_;
}
const ::zetasql::ResolvedRenameColumnActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_rename_column_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_rename_column_action_node_;
}
const ::zetasql::ResolvedSetCollateClauseProto&
AnyResolvedAlterActionProto::_Internal::resolved_set_collate_clause_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_set_collate_clause_node_;
}
const ::zetasql::ResolvedRestrictToActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_restrict_to_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_restrict_to_action_node_;
}
const ::zetasql::ResolvedAddToRestricteeListActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_add_to_restrictee_list_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_add_to_restrictee_list_action_node_;
}
const ::zetasql::ResolvedRemoveFromRestricteeListActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_remove_from_restrictee_list_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_remove_from_restrictee_list_action_node_;
}
const ::zetasql::AnyResolvedAlterColumnActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_alter_column_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_alter_column_action_node_;
}
const ::zetasql::ResolvedAlterSubEntityActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_alter_sub_entity_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_alter_sub_entity_action_node_;
}
const ::zetasql::ResolvedAddSubEntityActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_add_sub_entity_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_add_sub_entity_action_node_;
}
const ::zetasql::ResolvedDropSubEntityActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_drop_sub_entity_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->_impl_.node_.resolved_drop_sub_entity_action_node_;
}
void AnyResolvedAlterActionProto::set_allocated_resolved_set_options_action_node(::zetasql::ResolvedSetOptionsActionProto* resolved_set_options_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_options_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_set_options_action_node);
    if (message_arena != submessage_arena) {
      resolved_set_options_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_options_action_node, submessage_arena);
    }
    set_has_resolved_set_options_action_node();
    _impl_.node_.resolved_set_options_action_node_ = resolved_set_options_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_set_options_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_add_column_action_node(::zetasql::ResolvedAddColumnActionProto* resolved_add_column_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_add_column_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_add_column_action_node);
    if (message_arena != submessage_arena) {
      resolved_add_column_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_add_column_action_node, submessage_arena);
    }
    set_has_resolved_add_column_action_node();
    _impl_.node_.resolved_add_column_action_node_ = resolved_add_column_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_add_column_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_drop_column_action_node(::zetasql::ResolvedDropColumnActionProto* resolved_drop_column_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_column_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_column_action_node);
    if (message_arena != submessage_arena) {
      resolved_drop_column_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_column_action_node, submessage_arena);
    }
    set_has_resolved_drop_column_action_node();
    _impl_.node_.resolved_drop_column_action_node_ = resolved_drop_column_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_drop_column_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_grant_to_action_node(::zetasql::ResolvedGrantToActionProto* resolved_grant_to_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_grant_to_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_grant_to_action_node);
    if (message_arena != submessage_arena) {
      resolved_grant_to_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_grant_to_action_node, submessage_arena);
    }
    set_has_resolved_grant_to_action_node();
    _impl_.node_.resolved_grant_to_action_node_ = resolved_grant_to_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_grant_to_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_filter_using_action_node(::zetasql::ResolvedFilterUsingActionProto* resolved_filter_using_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_filter_using_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_filter_using_action_node);
    if (message_arena != submessage_arena) {
      resolved_filter_using_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_filter_using_action_node, submessage_arena);
    }
    set_has_resolved_filter_using_action_node();
    _impl_.node_.resolved_filter_using_action_node_ = resolved_filter_using_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_filter_using_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_revoke_from_action_node(::zetasql::ResolvedRevokeFromActionProto* resolved_revoke_from_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_revoke_from_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_revoke_from_action_node);
    if (message_arena != submessage_arena) {
      resolved_revoke_from_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_revoke_from_action_node, submessage_arena);
    }
    set_has_resolved_revoke_from_action_node();
    _impl_.node_.resolved_revoke_from_action_node_ = resolved_revoke_from_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_revoke_from_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_rename_to_action_node(::zetasql::ResolvedRenameToActionProto* resolved_rename_to_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_rename_to_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_rename_to_action_node);
    if (message_arena != submessage_arena) {
      resolved_rename_to_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_rename_to_action_node, submessage_arena);
    }
    set_has_resolved_rename_to_action_node();
    _impl_.node_.resolved_rename_to_action_node_ = resolved_rename_to_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_rename_to_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_set_as_action_node(::zetasql::ResolvedSetAsActionProto* resolved_set_as_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_as_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_set_as_action_node);
    if (message_arena != submessage_arena) {
      resolved_set_as_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_as_action_node, submessage_arena);
    }
    set_has_resolved_set_as_action_node();
    _impl_.node_.resolved_set_as_action_node_ = resolved_set_as_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_set_as_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_add_constraint_action_node(::zetasql::ResolvedAddConstraintActionProto* resolved_add_constraint_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_add_constraint_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_add_constraint_action_node);
    if (message_arena != submessage_arena) {
      resolved_add_constraint_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_add_constraint_action_node, submessage_arena);
    }
    set_has_resolved_add_constraint_action_node();
    _impl_.node_.resolved_add_constraint_action_node_ = resolved_add_constraint_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_add_constraint_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_drop_constraint_action_node(::zetasql::ResolvedDropConstraintActionProto* resolved_drop_constraint_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_constraint_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_constraint_action_node);
    if (message_arena != submessage_arena) {
      resolved_drop_constraint_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_constraint_action_node, submessage_arena);
    }
    set_has_resolved_drop_constraint_action_node();
    _impl_.node_.resolved_drop_constraint_action_node_ = resolved_drop_constraint_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_drop_constraint_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_drop_primary_key_action_node(::zetasql::ResolvedDropPrimaryKeyActionProto* resolved_drop_primary_key_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_primary_key_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_primary_key_action_node);
    if (message_arena != submessage_arena) {
      resolved_drop_primary_key_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_primary_key_action_node, submessage_arena);
    }
    set_has_resolved_drop_primary_key_action_node();
    _impl_.node_.resolved_drop_primary_key_action_node_ = resolved_drop_primary_key_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_drop_primary_key_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_rename_column_action_node(::zetasql::ResolvedRenameColumnActionProto* resolved_rename_column_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_rename_column_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_rename_column_action_node);
    if (message_arena != submessage_arena) {
      resolved_rename_column_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_rename_column_action_node, submessage_arena);
    }
    set_has_resolved_rename_column_action_node();
    _impl_.node_.resolved_rename_column_action_node_ = resolved_rename_column_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_rename_column_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_set_collate_clause_node(::zetasql::ResolvedSetCollateClauseProto* resolved_set_collate_clause_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_collate_clause_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_set_collate_clause_node);
    if (message_arena != submessage_arena) {
      resolved_set_collate_clause_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_collate_clause_node, submessage_arena);
    }
    set_has_resolved_set_collate_clause_node();
    _impl_.node_.resolved_set_collate_clause_node_ = resolved_set_collate_clause_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_set_collate_clause_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_restrict_to_action_node(::zetasql::ResolvedRestrictToActionProto* resolved_restrict_to_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_restrict_to_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_restrict_to_action_node);
    if (message_arena != submessage_arena) {
      resolved_restrict_to_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_restrict_to_action_node, submessage_arena);
    }
    set_has_resolved_restrict_to_action_node();
    _impl_.node_.resolved_restrict_to_action_node_ = resolved_restrict_to_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_restrict_to_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_add_to_restrictee_list_action_node(::zetasql::ResolvedAddToRestricteeListActionProto* resolved_add_to_restrictee_list_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_add_to_restrictee_list_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_add_to_restrictee_list_action_node);
    if (message_arena != submessage_arena) {
      resolved_add_to_restrictee_list_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_add_to_restrictee_list_action_node, submessage_arena);
    }
    set_has_resolved_add_to_restrictee_list_action_node();
    _impl_.node_.resolved_add_to_restrictee_list_action_node_ = resolved_add_to_restrictee_list_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_add_to_restrictee_list_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_remove_from_restrictee_list_action_node(::zetasql::ResolvedRemoveFromRestricteeListActionProto* resolved_remove_from_restrictee_list_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_remove_from_restrictee_list_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_remove_from_restrictee_list_action_node);
    if (message_arena != submessage_arena) {
      resolved_remove_from_restrictee_list_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_remove_from_restrictee_list_action_node, submessage_arena);
    }
    set_has_resolved_remove_from_restrictee_list_action_node();
    _impl_.node_.resolved_remove_from_restrictee_list_action_node_ = resolved_remove_from_restrictee_list_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_remove_from_restrictee_list_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_alter_column_action_node(::zetasql::AnyResolvedAlterColumnActionProto* resolved_alter_column_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_column_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_column_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_column_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_column_action_node, submessage_arena);
    }
    set_has_resolved_alter_column_action_node();
    _impl_.node_.resolved_alter_column_action_node_ = resolved_alter_column_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_alter_column_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_alter_sub_entity_action_node(::zetasql::ResolvedAlterSubEntityActionProto* resolved_alter_sub_entity_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_sub_entity_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_sub_entity_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_sub_entity_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_sub_entity_action_node, submessage_arena);
    }
    set_has_resolved_alter_sub_entity_action_node();
    _impl_.node_.resolved_alter_sub_entity_action_node_ = resolved_alter_sub_entity_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_alter_sub_entity_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_add_sub_entity_action_node(::zetasql::ResolvedAddSubEntityActionProto* resolved_add_sub_entity_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_add_sub_entity_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_add_sub_entity_action_node);
    if (message_arena != submessage_arena) {
      resolved_add_sub_entity_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_add_sub_entity_action_node, submessage_arena);
    }
    set_has_resolved_add_sub_entity_action_node();
    _impl_.node_.resolved_add_sub_entity_action_node_ = resolved_add_sub_entity_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_add_sub_entity_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_drop_sub_entity_action_node(::zetasql::ResolvedDropSubEntityActionProto* resolved_drop_sub_entity_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_sub_entity_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_drop_sub_entity_action_node);
    if (message_arena != submessage_arena) {
      resolved_drop_sub_entity_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_sub_entity_action_node, submessage_arena);
    }
    set_has_resolved_drop_sub_entity_action_node();
    _impl_.node_.resolved_drop_sub_entity_action_node_ = resolved_drop_sub_entity_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_drop_sub_entity_action_node)
}
AnyResolvedAlterActionProto::AnyResolvedAlterActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedAlterActionProto)
}
AnyResolvedAlterActionProto::AnyResolvedAlterActionProto(const AnyResolvedAlterActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedAlterActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedSetOptionsActionNode: {
      _this->_internal_mutable_resolved_set_options_action_node()->::zetasql::ResolvedSetOptionsActionProto::MergeFrom(
          from._internal_resolved_set_options_action_node());
      break;
    }
    case kResolvedAddColumnActionNode: {
      _this->_internal_mutable_resolved_add_column_action_node()->::zetasql::ResolvedAddColumnActionProto::MergeFrom(
          from._internal_resolved_add_column_action_node());
      break;
    }
    case kResolvedDropColumnActionNode: {
      _this->_internal_mutable_resolved_drop_column_action_node()->::zetasql::ResolvedDropColumnActionProto::MergeFrom(
          from._internal_resolved_drop_column_action_node());
      break;
    }
    case kResolvedGrantToActionNode: {
      _this->_internal_mutable_resolved_grant_to_action_node()->::zetasql::ResolvedGrantToActionProto::MergeFrom(
          from._internal_resolved_grant_to_action_node());
      break;
    }
    case kResolvedFilterUsingActionNode: {
      _this->_internal_mutable_resolved_filter_using_action_node()->::zetasql::ResolvedFilterUsingActionProto::MergeFrom(
          from._internal_resolved_filter_using_action_node());
      break;
    }
    case kResolvedRevokeFromActionNode: {
      _this->_internal_mutable_resolved_revoke_from_action_node()->::zetasql::ResolvedRevokeFromActionProto::MergeFrom(
          from._internal_resolved_revoke_from_action_node());
      break;
    }
    case kResolvedRenameToActionNode: {
      _this->_internal_mutable_resolved_rename_to_action_node()->::zetasql::ResolvedRenameToActionProto::MergeFrom(
          from._internal_resolved_rename_to_action_node());
      break;
    }
    case kResolvedSetAsActionNode: {
      _this->_internal_mutable_resolved_set_as_action_node()->::zetasql::ResolvedSetAsActionProto::MergeFrom(
          from._internal_resolved_set_as_action_node());
      break;
    }
    case kResolvedAddConstraintActionNode: {
      _this->_internal_mutable_resolved_add_constraint_action_node()->::zetasql::ResolvedAddConstraintActionProto::MergeFrom(
          from._internal_resolved_add_constraint_action_node());
      break;
    }
    case kResolvedDropConstraintActionNode: {
      _this->_internal_mutable_resolved_drop_constraint_action_node()->::zetasql::ResolvedDropConstraintActionProto::MergeFrom(
          from._internal_resolved_drop_constraint_action_node());
      break;
    }
    case kResolvedDropPrimaryKeyActionNode: {
      _this->_internal_mutable_resolved_drop_primary_key_action_node()->::zetasql::ResolvedDropPrimaryKeyActionProto::MergeFrom(
          from._internal_resolved_drop_primary_key_action_node());
      break;
    }
    case kResolvedRenameColumnActionNode: {
      _this->_internal_mutable_resolved_rename_column_action_node()->::zetasql::ResolvedRenameColumnActionProto::MergeFrom(
          from._internal_resolved_rename_column_action_node());
      break;
    }
    case kResolvedSetCollateClauseNode: {
      _this->_internal_mutable_resolved_set_collate_clause_node()->::zetasql::ResolvedSetCollateClauseProto::MergeFrom(
          from._internal_resolved_set_collate_clause_node());
      break;
    }
    case kResolvedRestrictToActionNode: {
      _this->_internal_mutable_resolved_restrict_to_action_node()->::zetasql::ResolvedRestrictToActionProto::MergeFrom(
          from._internal_resolved_restrict_to_action_node());
      break;
    }
    case kResolvedAddToRestricteeListActionNode: {
      _this->_internal_mutable_resolved_add_to_restrictee_list_action_node()->::zetasql::ResolvedAddToRestricteeListActionProto::MergeFrom(
          from._internal_resolved_add_to_restrictee_list_action_node());
      break;
    }
    case kResolvedRemoveFromRestricteeListActionNode: {
      _this->_internal_mutable_resolved_remove_from_restrictee_list_action_node()->::zetasql::ResolvedRemoveFromRestricteeListActionProto::MergeFrom(
          from._internal_resolved_remove_from_restrictee_list_action_node());
      break;
    }
    case kResolvedAlterColumnActionNode: {
      _this->_internal_mutable_resolved_alter_column_action_node()->::zetasql::AnyResolvedAlterColumnActionProto::MergeFrom(
          from._internal_resolved_alter_column_action_node());
      break;
    }
    case kResolvedAlterSubEntityActionNode: {
      _this->_internal_mutable_resolved_alter_sub_entity_action_node()->::zetasql::ResolvedAlterSubEntityActionProto::MergeFrom(
          from._internal_resolved_alter_sub_entity_action_node());
      break;
    }
    case kResolvedAddSubEntityActionNode: {
      _this->_internal_mutable_resolved_add_sub_entity_action_node()->::zetasql::ResolvedAddSubEntityActionProto::MergeFrom(
          from._internal_resolved_add_sub_entity_action_node());
      break;
    }
    case kResolvedDropSubEntityActionNode: {
      _this->_internal_mutable_resolved_drop_sub_entity_action_node()->::zetasql::ResolvedDropSubEntityActionProto::MergeFrom(
          from._internal_resolved_drop_sub_entity_action_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedAlterActionProto)
}

inline void AnyResolvedAlterActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedAlterActionProto::~AnyResolvedAlterActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedAlterActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedAlterActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedAlterActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedAlterActionProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedAlterActionProto)
  switch (node_case()) {
    case kResolvedSetOptionsActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_set_options_action_node_;
      }
      break;
    }
    case kResolvedAddColumnActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_add_column_action_node_;
      }
      break;
    }
    case kResolvedDropColumnActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_column_action_node_;
      }
      break;
    }
    case kResolvedGrantToActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_grant_to_action_node_;
      }
      break;
    }
    case kResolvedFilterUsingActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_filter_using_action_node_;
      }
      break;
    }
    case kResolvedRevokeFromActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_revoke_from_action_node_;
      }
      break;
    }
    case kResolvedRenameToActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_rename_to_action_node_;
      }
      break;
    }
    case kResolvedSetAsActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_set_as_action_node_;
      }
      break;
    }
    case kResolvedAddConstraintActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_add_constraint_action_node_;
      }
      break;
    }
    case kResolvedDropConstraintActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_constraint_action_node_;
      }
      break;
    }
    case kResolvedDropPrimaryKeyActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_primary_key_action_node_;
      }
      break;
    }
    case kResolvedRenameColumnActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_rename_column_action_node_;
      }
      break;
    }
    case kResolvedSetCollateClauseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_set_collate_clause_node_;
      }
      break;
    }
    case kResolvedRestrictToActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_restrict_to_action_node_;
      }
      break;
    }
    case kResolvedAddToRestricteeListActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_add_to_restrictee_list_action_node_;
      }
      break;
    }
    case kResolvedRemoveFromRestricteeListActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_remove_from_restrictee_list_action_node_;
      }
      break;
    }
    case kResolvedAlterColumnActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_column_action_node_;
      }
      break;
    }
    case kResolvedAlterSubEntityActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_sub_entity_action_node_;
      }
      break;
    }
    case kResolvedAddSubEntityActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_add_sub_entity_action_node_;
      }
      break;
    }
    case kResolvedDropSubEntityActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_drop_sub_entity_action_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedAlterActionProto::InternalSwap(AnyResolvedAlterActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedAlterActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[149]);
}

// ===================================================================

class ResolvedAlterActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedAlterActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedAlterActionProto::_Internal::parent(const ResolvedAlterActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterActionProto::ResolvedAlterActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterActionProto)
}
ResolvedAlterActionProto::ResolvedAlterActionProto(const ResolvedAlterActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterActionProto)
}

inline void ResolvedAlterActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterActionProto::~ResolvedAlterActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterActionProto::InternalSwap(ResolvedAlterActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[150]);
}

// ===================================================================

class AnyResolvedAlterColumnActionProto::_Internal {
 public:
  static const ::zetasql::ResolvedAlterColumnOptionsActionProto& resolved_alter_column_options_action_node(const AnyResolvedAlterColumnActionProto* msg);
  static const ::zetasql::ResolvedAlterColumnDropNotNullActionProto& resolved_alter_column_drop_not_null_action_node(const AnyResolvedAlterColumnActionProto* msg);
  static const ::zetasql::ResolvedAlterColumnSetDataTypeActionProto& resolved_alter_column_set_data_type_action_node(const AnyResolvedAlterColumnActionProto* msg);
  static const ::zetasql::ResolvedAlterColumnSetDefaultActionProto& resolved_alter_column_set_default_action_node(const AnyResolvedAlterColumnActionProto* msg);
  static const ::zetasql::ResolvedAlterColumnDropDefaultActionProto& resolved_alter_column_drop_default_action_node(const AnyResolvedAlterColumnActionProto* msg);
};

const ::zetasql::ResolvedAlterColumnOptionsActionProto&
AnyResolvedAlterColumnActionProto::_Internal::resolved_alter_column_options_action_node(const AnyResolvedAlterColumnActionProto* msg) {
  return *msg->_impl_.node_.resolved_alter_column_options_action_node_;
}
const ::zetasql::ResolvedAlterColumnDropNotNullActionProto&
AnyResolvedAlterColumnActionProto::_Internal::resolved_alter_column_drop_not_null_action_node(const AnyResolvedAlterColumnActionProto* msg) {
  return *msg->_impl_.node_.resolved_alter_column_drop_not_null_action_node_;
}
const ::zetasql::ResolvedAlterColumnSetDataTypeActionProto&
AnyResolvedAlterColumnActionProto::_Internal::resolved_alter_column_set_data_type_action_node(const AnyResolvedAlterColumnActionProto* msg) {
  return *msg->_impl_.node_.resolved_alter_column_set_data_type_action_node_;
}
const ::zetasql::ResolvedAlterColumnSetDefaultActionProto&
AnyResolvedAlterColumnActionProto::_Internal::resolved_alter_column_set_default_action_node(const AnyResolvedAlterColumnActionProto* msg) {
  return *msg->_impl_.node_.resolved_alter_column_set_default_action_node_;
}
const ::zetasql::ResolvedAlterColumnDropDefaultActionProto&
AnyResolvedAlterColumnActionProto::_Internal::resolved_alter_column_drop_default_action_node(const AnyResolvedAlterColumnActionProto* msg) {
  return *msg->_impl_.node_.resolved_alter_column_drop_default_action_node_;
}
void AnyResolvedAlterColumnActionProto::set_allocated_resolved_alter_column_options_action_node(::zetasql::ResolvedAlterColumnOptionsActionProto* resolved_alter_column_options_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_column_options_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_column_options_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_column_options_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_column_options_action_node, submessage_arena);
    }
    set_has_resolved_alter_column_options_action_node();
    _impl_.node_.resolved_alter_column_options_action_node_ = resolved_alter_column_options_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_options_action_node)
}
void AnyResolvedAlterColumnActionProto::set_allocated_resolved_alter_column_drop_not_null_action_node(::zetasql::ResolvedAlterColumnDropNotNullActionProto* resolved_alter_column_drop_not_null_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_column_drop_not_null_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_column_drop_not_null_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_column_drop_not_null_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_column_drop_not_null_action_node, submessage_arena);
    }
    set_has_resolved_alter_column_drop_not_null_action_node();
    _impl_.node_.resolved_alter_column_drop_not_null_action_node_ = resolved_alter_column_drop_not_null_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_drop_not_null_action_node)
}
void AnyResolvedAlterColumnActionProto::set_allocated_resolved_alter_column_set_data_type_action_node(::zetasql::ResolvedAlterColumnSetDataTypeActionProto* resolved_alter_column_set_data_type_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_column_set_data_type_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_column_set_data_type_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_column_set_data_type_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_column_set_data_type_action_node, submessage_arena);
    }
    set_has_resolved_alter_column_set_data_type_action_node();
    _impl_.node_.resolved_alter_column_set_data_type_action_node_ = resolved_alter_column_set_data_type_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_set_data_type_action_node)
}
void AnyResolvedAlterColumnActionProto::set_allocated_resolved_alter_column_set_default_action_node(::zetasql::ResolvedAlterColumnSetDefaultActionProto* resolved_alter_column_set_default_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_column_set_default_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_column_set_default_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_column_set_default_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_column_set_default_action_node, submessage_arena);
    }
    set_has_resolved_alter_column_set_default_action_node();
    _impl_.node_.resolved_alter_column_set_default_action_node_ = resolved_alter_column_set_default_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_set_default_action_node)
}
void AnyResolvedAlterColumnActionProto::set_allocated_resolved_alter_column_drop_default_action_node(::zetasql::ResolvedAlterColumnDropDefaultActionProto* resolved_alter_column_drop_default_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_column_drop_default_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolved_alter_column_drop_default_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_column_drop_default_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_column_drop_default_action_node, submessage_arena);
    }
    set_has_resolved_alter_column_drop_default_action_node();
    _impl_.node_.resolved_alter_column_drop_default_action_node_ = resolved_alter_column_drop_default_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterColumnActionProto.resolved_alter_column_drop_default_action_node)
}
AnyResolvedAlterColumnActionProto::AnyResolvedAlterColumnActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedAlterColumnActionProto)
}
AnyResolvedAlterColumnActionProto::AnyResolvedAlterColumnActionProto(const AnyResolvedAlterColumnActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyResolvedAlterColumnActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedAlterColumnOptionsActionNode: {
      _this->_internal_mutable_resolved_alter_column_options_action_node()->::zetasql::ResolvedAlterColumnOptionsActionProto::MergeFrom(
          from._internal_resolved_alter_column_options_action_node());
      break;
    }
    case kResolvedAlterColumnDropNotNullActionNode: {
      _this->_internal_mutable_resolved_alter_column_drop_not_null_action_node()->::zetasql::ResolvedAlterColumnDropNotNullActionProto::MergeFrom(
          from._internal_resolved_alter_column_drop_not_null_action_node());
      break;
    }
    case kResolvedAlterColumnSetDataTypeActionNode: {
      _this->_internal_mutable_resolved_alter_column_set_data_type_action_node()->::zetasql::ResolvedAlterColumnSetDataTypeActionProto::MergeFrom(
          from._internal_resolved_alter_column_set_data_type_action_node());
      break;
    }
    case kResolvedAlterColumnSetDefaultActionNode: {
      _this->_internal_mutable_resolved_alter_column_set_default_action_node()->::zetasql::ResolvedAlterColumnSetDefaultActionProto::MergeFrom(
          from._internal_resolved_alter_column_set_default_action_node());
      break;
    }
    case kResolvedAlterColumnDropDefaultActionNode: {
      _this->_internal_mutable_resolved_alter_column_drop_default_action_node()->::zetasql::ResolvedAlterColumnDropDefaultActionProto::MergeFrom(
          from._internal_resolved_alter_column_drop_default_action_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedAlterColumnActionProto)
}

inline void AnyResolvedAlterColumnActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

AnyResolvedAlterColumnActionProto::~AnyResolvedAlterColumnActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedAlterColumnActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyResolvedAlterColumnActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedAlterColumnActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyResolvedAlterColumnActionProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedAlterColumnActionProto)
  switch (node_case()) {
    case kResolvedAlterColumnOptionsActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_column_options_action_node_;
      }
      break;
    }
    case kResolvedAlterColumnDropNotNullActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_column_drop_not_null_action_node_;
      }
      break;
    }
    case kResolvedAlterColumnSetDataTypeActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_column_set_data_type_action_node_;
      }
      break;
    }
    case kResolvedAlterColumnSetDefaultActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_column_set_default_action_node_;
      }
      break;
    }
    case kResolvedAlterColumnDropDefaultActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.resolved_alter_column_drop_default_action_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedAlterColumnActionProto::InternalSwap(AnyResolvedAlterColumnActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedAlterColumnActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[151]);
}

// ===================================================================

class ResolvedAlterColumnActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterColumnActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAlterColumnActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAlterColumnActionProto::_Internal::parent(const ResolvedAlterColumnActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterColumnActionProto::ResolvedAlterColumnActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterColumnActionProto)
}
ResolvedAlterColumnActionProto::ResolvedAlterColumnActionProto(const ResolvedAlterColumnActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterColumnActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_column()) {
    _this->_impl_.column_.Set(from._internal_column(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterColumnActionProto)
}

inline void ResolvedAlterColumnActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
  _impl_.column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedAlterColumnActionProto::~ResolvedAlterColumnActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterColumnActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterColumnActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterColumnActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterColumnActionProto::InternalSwap(ResolvedAlterColumnActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterColumnActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[152]);
}

// ===================================================================

class ResolvedSetOptionsActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetOptionsActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedSetOptionsActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedSetOptionsActionProto::_Internal::parent(const ResolvedSetOptionsActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedSetOptionsActionProto::ResolvedSetOptionsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetOptionsActionProto)
}
ResolvedSetOptionsActionProto::ResolvedSetOptionsActionProto(const ResolvedSetOptionsActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSetOptionsActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetOptionsActionProto)
}

inline void ResolvedSetOptionsActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedSetOptionsActionProto::~ResolvedSetOptionsActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetOptionsActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSetOptionsActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedSetOptionsActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSetOptionsActionProto::InternalSwap(ResolvedSetOptionsActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetOptionsActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[153]);
}

// ===================================================================

class ResolvedAlterSubEntityActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterSubEntityActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAlterSubEntityActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedAlterActionProto& alter_action(const ResolvedAlterSubEntityActionProto* msg);
  static void set_has_alter_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAlterSubEntityActionProto::_Internal::parent(const ResolvedAlterSubEntityActionProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedAlterActionProto&
ResolvedAlterSubEntityActionProto::_Internal::alter_action(const ResolvedAlterSubEntityActionProto* msg) {
  return *msg->_impl_.alter_action_;
}
ResolvedAlterSubEntityActionProto::ResolvedAlterSubEntityActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterSubEntityActionProto)
}
ResolvedAlterSubEntityActionProto::ResolvedAlterSubEntityActionProto(const ResolvedAlterSubEntityActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterSubEntityActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.alter_action_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_type()) {
    _this->_impl_.entity_type_.Set(from._internal_entity_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  if (from._internal_has_alter_action()) {
    _this->_impl_.alter_action_ = new ::zetasql::AnyResolvedAlterActionProto(*from._impl_.alter_action_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterSubEntityActionProto)
}

inline void ResolvedAlterSubEntityActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.alter_action_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedAlterSubEntityActionProto::~ResolvedAlterSubEntityActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterSubEntityActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterSubEntityActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_type_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.alter_action_;
}

void ResolvedAlterSubEntityActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterSubEntityActionProto::InternalSwap(ResolvedAlterSubEntityActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterSubEntityActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[154]);
}

// ===================================================================

class ResolvedAddSubEntityActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAddSubEntityActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAddSubEntityActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_not_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAddSubEntityActionProto::_Internal::parent(const ResolvedAddSubEntityActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAddSubEntityActionProto::ResolvedAddSubEntityActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAddSubEntityActionProto)
}
ResolvedAddSubEntityActionProto::ResolvedAddSubEntityActionProto(const ResolvedAddSubEntityActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAddSubEntityActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.options_list_){from._impl_.options_list_}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_not_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_type()) {
    _this->_impl_.entity_type_.Set(from._internal_entity_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_not_exists_ = from._impl_.is_if_not_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAddSubEntityActionProto)
}

inline void ResolvedAddSubEntityActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.options_list_){arena}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_not_exists_){false}
  };
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedAddSubEntityActionProto::~ResolvedAddSubEntityActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAddSubEntityActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAddSubEntityActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.options_list_.~RepeatedPtrField();
  _impl_.entity_type_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAddSubEntityActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAddSubEntityActionProto::InternalSwap(ResolvedAddSubEntityActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAddSubEntityActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[155]);
}

// ===================================================================

class ResolvedDropSubEntityActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropSubEntityActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedDropSubEntityActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedDropSubEntityActionProto::_Internal::parent(const ResolvedDropSubEntityActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropSubEntityActionProto::ResolvedDropSubEntityActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropSubEntityActionProto)
}
ResolvedDropSubEntityActionProto::ResolvedDropSubEntityActionProto(const ResolvedDropSubEntityActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropSubEntityActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_type()) {
    _this->_impl_.entity_type_.Set(from._internal_entity_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropSubEntityActionProto)
}

inline void ResolvedDropSubEntityActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedDropSubEntityActionProto::~ResolvedDropSubEntityActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropSubEntityActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropSubEntityActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_type_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropSubEntityActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropSubEntityActionProto::InternalSwap(ResolvedDropSubEntityActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropSubEntityActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[156]);
}

// ===================================================================

class ResolvedAddColumnActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAddColumnActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAddColumnActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_not_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnDefinitionProto& column_definition(const ResolvedAddColumnActionProto* msg);
  static void set_has_column_definition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAddColumnActionProto::_Internal::parent(const ResolvedAddColumnActionProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnDefinitionProto&
ResolvedAddColumnActionProto::_Internal::column_definition(const ResolvedAddColumnActionProto* msg) {
  return *msg->_impl_.column_definition_;
}
ResolvedAddColumnActionProto::ResolvedAddColumnActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAddColumnActionProto)
}
ResolvedAddColumnActionProto::ResolvedAddColumnActionProto(const ResolvedAddColumnActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAddColumnActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_definition_){nullptr}
    , decltype(_impl_.is_if_not_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  if (from._internal_has_column_definition()) {
    _this->_impl_.column_definition_ = new ::zetasql::ResolvedColumnDefinitionProto(*from._impl_.column_definition_);
  }
  _this->_impl_.is_if_not_exists_ = from._impl_.is_if_not_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAddColumnActionProto)
}

inline void ResolvedAddColumnActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_definition_){nullptr}
    , decltype(_impl_.is_if_not_exists_){false}
  };
}

ResolvedAddColumnActionProto::~ResolvedAddColumnActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAddColumnActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAddColumnActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.column_definition_;
}

void ResolvedAddColumnActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAddColumnActionProto::InternalSwap(ResolvedAddColumnActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAddColumnActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[157]);
}

// ===================================================================

class ResolvedAddConstraintActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAddConstraintActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAddConstraintActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_not_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedConstraintProto& constraint(const ResolvedAddConstraintActionProto* msg);
  static void set_has_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TableRefProto& table(const ResolvedAddConstraintActionProto* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAddConstraintActionProto::_Internal::parent(const ResolvedAddConstraintActionProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedConstraintProto&
ResolvedAddConstraintActionProto::_Internal::constraint(const ResolvedAddConstraintActionProto* msg) {
  return *msg->_impl_.constraint_;
}
const ::zetasql::TableRefProto&
ResolvedAddConstraintActionProto::_Internal::table(const ResolvedAddConstraintActionProto* msg) {
  return *msg->_impl_.table_;
}
void ResolvedAddConstraintActionProto::clear_table() {
  if (_impl_.table_ != nullptr) _impl_.table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedAddConstraintActionProto::ResolvedAddConstraintActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAddConstraintActionProto)
}
ResolvedAddConstraintActionProto::ResolvedAddConstraintActionProto(const ResolvedAddConstraintActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAddConstraintActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.constraint_){nullptr}
    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.is_if_not_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  if (from._internal_has_constraint()) {
    _this->_impl_.constraint_ = new ::zetasql::AnyResolvedConstraintProto(*from._impl_.constraint_);
  }
  if (from._internal_has_table()) {
    _this->_impl_.table_ = new ::zetasql::TableRefProto(*from._impl_.table_);
  }
  _this->_impl_.is_if_not_exists_ = from._impl_.is_if_not_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAddConstraintActionProto)
}

inline void ResolvedAddConstraintActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.constraint_){nullptr}
    , decltype(_impl_.table_){nullptr}
    , decltype(_impl_.is_if_not_exists_){false}
  };
}

ResolvedAddConstraintActionProto::~ResolvedAddConstraintActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAddConstraintActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAddConstraintActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.constraint_;
  if (this != internal_default_instance()) delete _impl_.table_;
}

void ResolvedAddConstraintActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAddConstraintActionProto::InternalSwap(ResolvedAddConstraintActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAddConstraintActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[158]);
}

// ===================================================================

class ResolvedDropConstraintActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropConstraintActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedDropConstraintActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedDropConstraintActionProto::_Internal::parent(const ResolvedDropConstraintActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropConstraintActionProto::ResolvedDropConstraintActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropConstraintActionProto)
}
ResolvedDropConstraintActionProto::ResolvedDropConstraintActionProto(const ResolvedDropConstraintActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropConstraintActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropConstraintActionProto)
}

inline void ResolvedDropConstraintActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedDropConstraintActionProto::~ResolvedDropConstraintActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropConstraintActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropConstraintActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropConstraintActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropConstraintActionProto::InternalSwap(ResolvedDropConstraintActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropConstraintActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[159]);
}

// ===================================================================

class ResolvedDropPrimaryKeyActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropPrimaryKeyActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedDropPrimaryKeyActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedDropPrimaryKeyActionProto::_Internal::parent(const ResolvedDropPrimaryKeyActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropPrimaryKeyActionProto::ResolvedDropPrimaryKeyActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropPrimaryKeyActionProto)
}
ResolvedDropPrimaryKeyActionProto::ResolvedDropPrimaryKeyActionProto(const ResolvedDropPrimaryKeyActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropPrimaryKeyActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropPrimaryKeyActionProto)
}

inline void ResolvedDropPrimaryKeyActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
}

ResolvedDropPrimaryKeyActionProto::~ResolvedDropPrimaryKeyActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropPrimaryKeyActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropPrimaryKeyActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropPrimaryKeyActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropPrimaryKeyActionProto::InternalSwap(ResolvedDropPrimaryKeyActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropPrimaryKeyActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[160]);
}

// ===================================================================

class ResolvedAlterColumnOptionsActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterColumnOptionsActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterColumnActionProto& parent(const ResolvedAlterColumnOptionsActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterColumnActionProto&
ResolvedAlterColumnOptionsActionProto::_Internal::parent(const ResolvedAlterColumnOptionsActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterColumnOptionsActionProto::ResolvedAlterColumnOptionsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterColumnOptionsActionProto)
}
ResolvedAlterColumnOptionsActionProto::ResolvedAlterColumnOptionsActionProto(const ResolvedAlterColumnOptionsActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterColumnOptionsActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterColumnActionProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterColumnOptionsActionProto)
}

inline void ResolvedAlterColumnOptionsActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterColumnOptionsActionProto::~ResolvedAlterColumnOptionsActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterColumnOptionsActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterColumnOptionsActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterColumnOptionsActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterColumnOptionsActionProto::InternalSwap(ResolvedAlterColumnOptionsActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterColumnOptionsActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[161]);
}

// ===================================================================

class ResolvedAlterColumnDropNotNullActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterColumnDropNotNullActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterColumnActionProto& parent(const ResolvedAlterColumnDropNotNullActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterColumnActionProto&
ResolvedAlterColumnDropNotNullActionProto::_Internal::parent(const ResolvedAlterColumnDropNotNullActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterColumnDropNotNullActionProto::ResolvedAlterColumnDropNotNullActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterColumnDropNotNullActionProto)
}
ResolvedAlterColumnDropNotNullActionProto::ResolvedAlterColumnDropNotNullActionProto(const ResolvedAlterColumnDropNotNullActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterColumnDropNotNullActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterColumnActionProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterColumnDropNotNullActionProto)
}

inline void ResolvedAlterColumnDropNotNullActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterColumnDropNotNullActionProto::~ResolvedAlterColumnDropNotNullActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterColumnDropNotNullActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterColumnDropNotNullActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterColumnDropNotNullActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterColumnDropNotNullActionProto::InternalSwap(ResolvedAlterColumnDropNotNullActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterColumnDropNotNullActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[162]);
}

// ===================================================================

class ResolvedAlterColumnSetDataTypeActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterColumnSetDataTypeActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterColumnActionProto& parent(const ResolvedAlterColumnSetDataTypeActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& updated_type(const ResolvedAlterColumnSetDataTypeActionProto* msg);
  static void set_has_updated_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TypeParametersProto& updated_type_parameters(const ResolvedAlterColumnSetDataTypeActionProto* msg);
  static void set_has_updated_type_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnAnnotationsProto& updated_annotations(const ResolvedAlterColumnSetDataTypeActionProto* msg);
  static void set_has_updated_annotations(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedAlterColumnActionProto&
ResolvedAlterColumnSetDataTypeActionProto::_Internal::parent(const ResolvedAlterColumnSetDataTypeActionProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TypeProto&
ResolvedAlterColumnSetDataTypeActionProto::_Internal::updated_type(const ResolvedAlterColumnSetDataTypeActionProto* msg) {
  return *msg->_impl_.updated_type_;
}
const ::zetasql::TypeParametersProto&
ResolvedAlterColumnSetDataTypeActionProto::_Internal::updated_type_parameters(const ResolvedAlterColumnSetDataTypeActionProto* msg) {
  return *msg->_impl_.updated_type_parameters_;
}
const ::zetasql::ResolvedColumnAnnotationsProto&
ResolvedAlterColumnSetDataTypeActionProto::_Internal::updated_annotations(const ResolvedAlterColumnSetDataTypeActionProto* msg) {
  return *msg->_impl_.updated_annotations_;
}
void ResolvedAlterColumnSetDataTypeActionProto::clear_updated_type() {
  if (_impl_.updated_type_ != nullptr) _impl_.updated_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ResolvedAlterColumnSetDataTypeActionProto::clear_updated_type_parameters() {
  if (_impl_.updated_type_parameters_ != nullptr) _impl_.updated_type_parameters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedAlterColumnSetDataTypeActionProto::ResolvedAlterColumnSetDataTypeActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterColumnSetDataTypeActionProto)
}
ResolvedAlterColumnSetDataTypeActionProto::ResolvedAlterColumnSetDataTypeActionProto(const ResolvedAlterColumnSetDataTypeActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterColumnSetDataTypeActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.updated_type_){nullptr}
    , decltype(_impl_.updated_type_parameters_){nullptr}
    , decltype(_impl_.updated_annotations_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterColumnActionProto(*from._impl_.parent_);
  }
  if (from._internal_has_updated_type()) {
    _this->_impl_.updated_type_ = new ::zetasql::TypeProto(*from._impl_.updated_type_);
  }
  if (from._internal_has_updated_type_parameters()) {
    _this->_impl_.updated_type_parameters_ = new ::zetasql::TypeParametersProto(*from._impl_.updated_type_parameters_);
  }
  if (from._internal_has_updated_annotations()) {
    _this->_impl_.updated_annotations_ = new ::zetasql::ResolvedColumnAnnotationsProto(*from._impl_.updated_annotations_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterColumnSetDataTypeActionProto)
}

inline void ResolvedAlterColumnSetDataTypeActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.updated_type_){nullptr}
    , decltype(_impl_.updated_type_parameters_){nullptr}
    , decltype(_impl_.updated_annotations_){nullptr}
  };
}

ResolvedAlterColumnSetDataTypeActionProto::~ResolvedAlterColumnSetDataTypeActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterColumnSetDataTypeActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterColumnSetDataTypeActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.updated_type_;
  if (this != internal_default_instance()) delete _impl_.updated_type_parameters_;
  if (this != internal_default_instance()) delete _impl_.updated_annotations_;
}

void ResolvedAlterColumnSetDataTypeActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterColumnSetDataTypeActionProto::InternalSwap(ResolvedAlterColumnSetDataTypeActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterColumnSetDataTypeActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[163]);
}

// ===================================================================

class ResolvedAlterColumnSetDefaultActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterColumnSetDefaultActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterColumnActionProto& parent(const ResolvedAlterColumnSetDefaultActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnDefaultValueProto& default_value(const ResolvedAlterColumnSetDefaultActionProto* msg);
  static void set_has_default_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterColumnActionProto&
ResolvedAlterColumnSetDefaultActionProto::_Internal::parent(const ResolvedAlterColumnSetDefaultActionProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnDefaultValueProto&
ResolvedAlterColumnSetDefaultActionProto::_Internal::default_value(const ResolvedAlterColumnSetDefaultActionProto* msg) {
  return *msg->_impl_.default_value_;
}
ResolvedAlterColumnSetDefaultActionProto::ResolvedAlterColumnSetDefaultActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterColumnSetDefaultActionProto)
}
ResolvedAlterColumnSetDefaultActionProto::ResolvedAlterColumnSetDefaultActionProto(const ResolvedAlterColumnSetDefaultActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterColumnSetDefaultActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.default_value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterColumnActionProto(*from._impl_.parent_);
  }
  if (from._internal_has_default_value()) {
    _this->_impl_.default_value_ = new ::zetasql::ResolvedColumnDefaultValueProto(*from._impl_.default_value_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterColumnSetDefaultActionProto)
}

inline void ResolvedAlterColumnSetDefaultActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.default_value_){nullptr}
  };
}

ResolvedAlterColumnSetDefaultActionProto::~ResolvedAlterColumnSetDefaultActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterColumnSetDefaultActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterColumnSetDefaultActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.default_value_;
}

void ResolvedAlterColumnSetDefaultActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterColumnSetDefaultActionProto::InternalSwap(ResolvedAlterColumnSetDefaultActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterColumnSetDefaultActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[164]);
}

// ===================================================================

class ResolvedAlterColumnDropDefaultActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterColumnDropDefaultActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterColumnActionProto& parent(const ResolvedAlterColumnDropDefaultActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterColumnActionProto&
ResolvedAlterColumnDropDefaultActionProto::_Internal::parent(const ResolvedAlterColumnDropDefaultActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterColumnDropDefaultActionProto::ResolvedAlterColumnDropDefaultActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterColumnDropDefaultActionProto)
}
ResolvedAlterColumnDropDefaultActionProto::ResolvedAlterColumnDropDefaultActionProto(const ResolvedAlterColumnDropDefaultActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterColumnDropDefaultActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterColumnActionProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterColumnDropDefaultActionProto)
}

inline void ResolvedAlterColumnDropDefaultActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAlterColumnDropDefaultActionProto::~ResolvedAlterColumnDropDefaultActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterColumnDropDefaultActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterColumnDropDefaultActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterColumnDropDefaultActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterColumnDropDefaultActionProto::InternalSwap(ResolvedAlterColumnDropDefaultActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterColumnDropDefaultActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[165]);
}

// ===================================================================

class ResolvedDropColumnActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropColumnActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedDropColumnActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedDropColumnActionProto::_Internal::parent(const ResolvedDropColumnActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropColumnActionProto::ResolvedDropColumnActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropColumnActionProto)
}
ResolvedDropColumnActionProto::ResolvedDropColumnActionProto(const ResolvedDropColumnActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropColumnActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropColumnActionProto)
}

inline void ResolvedDropColumnActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedDropColumnActionProto::~ResolvedDropColumnActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropColumnActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropColumnActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropColumnActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropColumnActionProto::InternalSwap(ResolvedDropColumnActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropColumnActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[166]);
}

// ===================================================================

class ResolvedRenameColumnActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRenameColumnActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedRenameColumnActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedRenameColumnActionProto::_Internal::parent(const ResolvedRenameColumnActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRenameColumnActionProto::ResolvedRenameColumnActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRenameColumnActionProto)
}
ResolvedRenameColumnActionProto::ResolvedRenameColumnActionProto(const ResolvedRenameColumnActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRenameColumnActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.new_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_name()) {
    _this->_impl_.new_name_.Set(from._internal_new_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRenameColumnActionProto)
}

inline void ResolvedRenameColumnActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.new_name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedRenameColumnActionProto::~ResolvedRenameColumnActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRenameColumnActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRenameColumnActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.new_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRenameColumnActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRenameColumnActionProto::InternalSwap(ResolvedRenameColumnActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRenameColumnActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[167]);
}

// ===================================================================

class ResolvedSetAsActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetAsActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedSetAsActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entity_body_json(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_body_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedSetAsActionProto::_Internal::parent(const ResolvedSetAsActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedSetAsActionProto::ResolvedSetAsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetAsActionProto)
}
ResolvedSetAsActionProto::ResolvedSetAsActionProto(const ResolvedSetAsActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSetAsActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_body_json_){}
    , decltype(_impl_.entity_body_text_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_body_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_body_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_body_json()) {
    _this->_impl_.entity_body_json_.Set(from._internal_entity_body_json(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entity_body_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_body_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_body_text()) {
    _this->_impl_.entity_body_text_.Set(from._internal_entity_body_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetAsActionProto)
}

inline void ResolvedSetAsActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_body_json_){}
    , decltype(_impl_.entity_body_text_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.entity_body_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_body_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entity_body_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_body_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedSetAsActionProto::~ResolvedSetAsActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetAsActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSetAsActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_body_json_.Destroy();
  _impl_.entity_body_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedSetAsActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSetAsActionProto::InternalSwap(ResolvedSetAsActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetAsActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[168]);
}

// ===================================================================

class ResolvedSetCollateClauseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetCollateClauseProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedSetCollateClauseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedSetCollateClauseProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedSetCollateClauseProto::_Internal::parent(const ResolvedSetCollateClauseProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedSetCollateClauseProto::_Internal::collation_name(const ResolvedSetCollateClauseProto* msg) {
  return *msg->_impl_.collation_name_;
}
ResolvedSetCollateClauseProto::ResolvedSetCollateClauseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetCollateClauseProto)
}
ResolvedSetCollateClauseProto::ResolvedSetCollateClauseProto(const ResolvedSetCollateClauseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedSetCollateClauseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  if (from._internal_has_collation_name()) {
    _this->_impl_.collation_name_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.collation_name_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetCollateClauseProto)
}

inline void ResolvedSetCollateClauseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.collation_name_){nullptr}
  };
}

ResolvedSetCollateClauseProto::~ResolvedSetCollateClauseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetCollateClauseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedSetCollateClauseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.collation_name_;
}

void ResolvedSetCollateClauseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedSetCollateClauseProto::InternalSwap(ResolvedSetCollateClauseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetCollateClauseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[169]);
}

// ===================================================================

class ResolvedAlterTableSetOptionsStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterTableSetOptionsStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAlterTableSetOptionsStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAlterTableSetOptionsStmtProto::_Internal::parent(const ResolvedAlterTableSetOptionsStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterTableSetOptionsStmtProto::ResolvedAlterTableSetOptionsStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterTableSetOptionsStmtProto)
}
ResolvedAlterTableSetOptionsStmtProto::ResolvedAlterTableSetOptionsStmtProto(const ResolvedAlterTableSetOptionsStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterTableSetOptionsStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterTableSetOptionsStmtProto)
}

inline void ResolvedAlterTableSetOptionsStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
}

ResolvedAlterTableSetOptionsStmtProto::~ResolvedAlterTableSetOptionsStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterTableSetOptionsStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterTableSetOptionsStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterTableSetOptionsStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterTableSetOptionsStmtProto::InternalSwap(ResolvedAlterTableSetOptionsStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterTableSetOptionsStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[170]);
}

// ===================================================================

class ResolvedRenameStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRenameStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedRenameStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedRenameStmtProto::_Internal::parent(const ResolvedRenameStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRenameStmtProto::ResolvedRenameStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRenameStmtProto)
}
ResolvedRenameStmtProto::ResolvedRenameStmtProto(const ResolvedRenameStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRenameStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_name_path_){from._impl_.old_name_path_}
    , decltype(_impl_.new_name_path_){from._impl_.new_name_path_}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    _this->_impl_.object_type_.Set(from._internal_object_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRenameStmtProto)
}

inline void ResolvedRenameStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_name_path_){arena}
    , decltype(_impl_.new_name_path_){arena}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedRenameStmtProto::~ResolvedRenameStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRenameStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRenameStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_name_path_.~RepeatedPtrField();
  _impl_.new_name_path_.~RepeatedPtrField();
  _impl_.object_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRenameStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRenameStmtProto::InternalSwap(ResolvedRenameStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRenameStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[171]);
}

// ===================================================================

class ResolvedCreatePrivilegeRestrictionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreatePrivilegeRestrictionStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreatePrivilegeRestrictionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreatePrivilegeRestrictionStmtProto::_Internal::parent(const ResolvedCreatePrivilegeRestrictionStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedCreatePrivilegeRestrictionStmtProto::ResolvedCreatePrivilegeRestrictionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto)
}
ResolvedCreatePrivilegeRestrictionStmtProto::ResolvedCreatePrivilegeRestrictionStmtProto(const ResolvedCreatePrivilegeRestrictionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreatePrivilegeRestrictionStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_privilege_list_){from._impl_.column_privilege_list_}
    , decltype(_impl_.restrictee_list_){from._impl_.restrictee_list_}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    _this->_impl_.object_type_.Set(from._internal_object_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto)
}

inline void ResolvedCreatePrivilegeRestrictionStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_privilege_list_){arena}
    , decltype(_impl_.restrictee_list_){arena}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedCreatePrivilegeRestrictionStmtProto::~ResolvedCreatePrivilegeRestrictionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreatePrivilegeRestrictionStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreatePrivilegeRestrictionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_privilege_list_.~RepeatedPtrField();
  _impl_.restrictee_list_.~RepeatedPtrField();
  _impl_.object_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedCreatePrivilegeRestrictionStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreatePrivilegeRestrictionStmtProto::InternalSwap(ResolvedCreatePrivilegeRestrictionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreatePrivilegeRestrictionStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[172]);
}

// ===================================================================

class ResolvedCreateRowAccessPolicyStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateRowAccessPolicyStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCreateRowAccessPolicyStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_create_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedCreateRowAccessPolicyStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedExprProto& predicate(const ResolvedCreateRowAccessPolicyStmtProto* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_predicate_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCreateRowAccessPolicyStmtProto::_Internal::parent(const ResolvedCreateRowAccessPolicyStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedCreateRowAccessPolicyStmtProto::_Internal::table_scan(const ResolvedCreateRowAccessPolicyStmtProto* msg) {
  return *msg->_impl_.table_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateRowAccessPolicyStmtProto::_Internal::predicate(const ResolvedCreateRowAccessPolicyStmtProto* msg) {
  return *msg->_impl_.predicate_;
}
ResolvedCreateRowAccessPolicyStmtProto::ResolvedCreateRowAccessPolicyStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateRowAccessPolicyStmtProto)
}
ResolvedCreateRowAccessPolicyStmtProto::ResolvedCreateRowAccessPolicyStmtProto(const ResolvedCreateRowAccessPolicyStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateRowAccessPolicyStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_name_path_){from._impl_.target_name_path_}
    , decltype(_impl_.grantee_list_){from._impl_.grantee_list_}
    , decltype(_impl_.grantee_expr_list_){from._impl_.grantee_expr_list_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.predicate_str_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.predicate_){nullptr}
    , decltype(_impl_.create_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.predicate_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_predicate_str()) {
    _this->_impl_.predicate_str_.Set(from._internal_predicate_str(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_table_scan()) {
    _this->_impl_.table_scan_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.table_scan_);
  }
  if (from._internal_has_predicate()) {
    _this->_impl_.predicate_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.predicate_);
  }
  _this->_impl_.create_mode_ = from._impl_.create_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateRowAccessPolicyStmtProto)
}

inline void ResolvedCreateRowAccessPolicyStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_name_path_){arena}
    , decltype(_impl_.grantee_list_){arena}
    , decltype(_impl_.grantee_expr_list_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.predicate_str_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
    , decltype(_impl_.predicate_){nullptr}
    , decltype(_impl_.create_mode_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.predicate_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedCreateRowAccessPolicyStmtProto::~ResolvedCreateRowAccessPolicyStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateRowAccessPolicyStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateRowAccessPolicyStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_name_path_.~RepeatedPtrField();
  _impl_.grantee_list_.~RepeatedPtrField();
  _impl_.grantee_expr_list_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.predicate_str_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_scan_;
  if (this != internal_default_instance()) delete _impl_.predicate_;
}

void ResolvedCreateRowAccessPolicyStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateRowAccessPolicyStmtProto::InternalSwap(ResolvedCreateRowAccessPolicyStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateRowAccessPolicyStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[173]);
}

// ===================================================================

class ResolvedDropPrivilegeRestrictionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropPrivilegeRestrictionStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropPrivilegeRestrictionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropPrivilegeRestrictionStmtProto::_Internal::parent(const ResolvedDropPrivilegeRestrictionStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropPrivilegeRestrictionStmtProto::ResolvedDropPrivilegeRestrictionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropPrivilegeRestrictionStmtProto)
}
ResolvedDropPrivilegeRestrictionStmtProto::ResolvedDropPrivilegeRestrictionStmtProto(const ResolvedDropPrivilegeRestrictionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropPrivilegeRestrictionStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.column_privilege_list_){from._impl_.column_privilege_list_}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    _this->_impl_.object_type_.Set(from._internal_object_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropPrivilegeRestrictionStmtProto)
}

inline void ResolvedDropPrivilegeRestrictionStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.column_privilege_list_){arena}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedDropPrivilegeRestrictionStmtProto::~ResolvedDropPrivilegeRestrictionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropPrivilegeRestrictionStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropPrivilegeRestrictionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.column_privilege_list_.~RepeatedPtrField();
  _impl_.object_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropPrivilegeRestrictionStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropPrivilegeRestrictionStmtProto::InternalSwap(ResolvedDropPrivilegeRestrictionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropPrivilegeRestrictionStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[174]);
}

// ===================================================================

class ResolvedDropRowAccessPolicyStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropRowAccessPolicyStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropRowAccessPolicyStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_drop_all(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropRowAccessPolicyStmtProto::_Internal::parent(const ResolvedDropRowAccessPolicyStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropRowAccessPolicyStmtProto::ResolvedDropRowAccessPolicyStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropRowAccessPolicyStmtProto)
}
ResolvedDropRowAccessPolicyStmtProto::ResolvedDropRowAccessPolicyStmtProto(const ResolvedDropRowAccessPolicyStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropRowAccessPolicyStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_name_path_){from._impl_.target_name_path_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_drop_all_){}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  ::memcpy(&_impl_.is_drop_all_, &from._impl_.is_drop_all_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_if_exists_) -
    reinterpret_cast<char*>(&_impl_.is_drop_all_)) + sizeof(_impl_.is_if_exists_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropRowAccessPolicyStmtProto)
}

inline void ResolvedDropRowAccessPolicyStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_name_path_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_drop_all_){false}
    , decltype(_impl_.is_if_exists_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedDropRowAccessPolicyStmtProto::~ResolvedDropRowAccessPolicyStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropRowAccessPolicyStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropRowAccessPolicyStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_name_path_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropRowAccessPolicyStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropRowAccessPolicyStmtProto::InternalSwap(ResolvedDropRowAccessPolicyStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropRowAccessPolicyStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[175]);
}

// ===================================================================

class ResolvedDropSearchIndexStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropSearchIndexStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropSearchIndexStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropSearchIndexStmtProto::_Internal::parent(const ResolvedDropSearchIndexStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropSearchIndexStmtProto::ResolvedDropSearchIndexStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropSearchIndexStmtProto)
}
ResolvedDropSearchIndexStmtProto::ResolvedDropSearchIndexStmtProto(const ResolvedDropSearchIndexStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropSearchIndexStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_name_path_){from._impl_.table_name_path_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropSearchIndexStmtProto)
}

inline void ResolvedDropSearchIndexStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_name_path_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedDropSearchIndexStmtProto::~ResolvedDropSearchIndexStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropSearchIndexStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropSearchIndexStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_name_path_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropSearchIndexStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropSearchIndexStmtProto::InternalSwap(ResolvedDropSearchIndexStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropSearchIndexStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[176]);
}

// ===================================================================

class ResolvedGrantToActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGrantToActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedGrantToActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedGrantToActionProto::_Internal::parent(const ResolvedGrantToActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedGrantToActionProto::ResolvedGrantToActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGrantToActionProto)
}
ResolvedGrantToActionProto::ResolvedGrantToActionProto(const ResolvedGrantToActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedGrantToActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grantee_expr_list_){from._impl_.grantee_expr_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGrantToActionProto)
}

inline void ResolvedGrantToActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grantee_expr_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedGrantToActionProto::~ResolvedGrantToActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGrantToActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedGrantToActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grantee_expr_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedGrantToActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedGrantToActionProto::InternalSwap(ResolvedGrantToActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGrantToActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[177]);
}

// ===================================================================

class ResolvedRestrictToActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRestrictToActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedRestrictToActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedRestrictToActionProto::_Internal::parent(const ResolvedRestrictToActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRestrictToActionProto::ResolvedRestrictToActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRestrictToActionProto)
}
ResolvedRestrictToActionProto::ResolvedRestrictToActionProto(const ResolvedRestrictToActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRestrictToActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restrictee_list_){from._impl_.restrictee_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRestrictToActionProto)
}

inline void ResolvedRestrictToActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restrictee_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedRestrictToActionProto::~ResolvedRestrictToActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRestrictToActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRestrictToActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.restrictee_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRestrictToActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRestrictToActionProto::InternalSwap(ResolvedRestrictToActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRestrictToActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[178]);
}

// ===================================================================

class ResolvedAddToRestricteeListActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAddToRestricteeListActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAddToRestricteeListActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_not_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAddToRestricteeListActionProto::_Internal::parent(const ResolvedAddToRestricteeListActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAddToRestricteeListActionProto::ResolvedAddToRestricteeListActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAddToRestricteeListActionProto)
}
ResolvedAddToRestricteeListActionProto::ResolvedAddToRestricteeListActionProto(const ResolvedAddToRestricteeListActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAddToRestricteeListActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restrictee_list_){from._impl_.restrictee_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_not_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_not_exists_ = from._impl_.is_if_not_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAddToRestricteeListActionProto)
}

inline void ResolvedAddToRestricteeListActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restrictee_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_not_exists_){false}
  };
}

ResolvedAddToRestricteeListActionProto::~ResolvedAddToRestricteeListActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAddToRestricteeListActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAddToRestricteeListActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.restrictee_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAddToRestricteeListActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAddToRestricteeListActionProto::InternalSwap(ResolvedAddToRestricteeListActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAddToRestricteeListActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[179]);
}

// ===================================================================

class ResolvedRemoveFromRestricteeListActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRemoveFromRestricteeListActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedRemoveFromRestricteeListActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedRemoveFromRestricteeListActionProto::_Internal::parent(const ResolvedRemoveFromRestricteeListActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRemoveFromRestricteeListActionProto::ResolvedRemoveFromRestricteeListActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRemoveFromRestricteeListActionProto)
}
ResolvedRemoveFromRestricteeListActionProto::ResolvedRemoveFromRestricteeListActionProto(const ResolvedRemoveFromRestricteeListActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRemoveFromRestricteeListActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restrictee_list_){from._impl_.restrictee_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRemoveFromRestricteeListActionProto)
}

inline void ResolvedRemoveFromRestricteeListActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restrictee_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
}

ResolvedRemoveFromRestricteeListActionProto::~ResolvedRemoveFromRestricteeListActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRemoveFromRestricteeListActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRemoveFromRestricteeListActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.restrictee_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRemoveFromRestricteeListActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRemoveFromRestricteeListActionProto::InternalSwap(ResolvedRemoveFromRestricteeListActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRemoveFromRestricteeListActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[180]);
}

// ===================================================================

class ResolvedFilterUsingActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFilterUsingActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedFilterUsingActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& predicate(const ResolvedFilterUsingActionProto* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_predicate_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedFilterUsingActionProto::_Internal::parent(const ResolvedFilterUsingActionProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFilterUsingActionProto::_Internal::predicate(const ResolvedFilterUsingActionProto* msg) {
  return *msg->_impl_.predicate_;
}
ResolvedFilterUsingActionProto::ResolvedFilterUsingActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFilterUsingActionProto)
}
ResolvedFilterUsingActionProto::ResolvedFilterUsingActionProto(const ResolvedFilterUsingActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFilterUsingActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_str_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.predicate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.predicate_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_predicate_str()) {
    _this->_impl_.predicate_str_.Set(from._internal_predicate_str(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  if (from._internal_has_predicate()) {
    _this->_impl_.predicate_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.predicate_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFilterUsingActionProto)
}

inline void ResolvedFilterUsingActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_str_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.predicate_){nullptr}
  };
  _impl_.predicate_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedFilterUsingActionProto::~ResolvedFilterUsingActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFilterUsingActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFilterUsingActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.predicate_str_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.predicate_;
}

void ResolvedFilterUsingActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFilterUsingActionProto::InternalSwap(ResolvedFilterUsingActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFilterUsingActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[181]);
}

// ===================================================================

class ResolvedRevokeFromActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRevokeFromActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedRevokeFromActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_revoke_from_all(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedRevokeFromActionProto::_Internal::parent(const ResolvedRevokeFromActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRevokeFromActionProto::ResolvedRevokeFromActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRevokeFromActionProto)
}
ResolvedRevokeFromActionProto::ResolvedRevokeFromActionProto(const ResolvedRevokeFromActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRevokeFromActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.revokee_expr_list_){from._impl_.revokee_expr_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_revoke_from_all_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  _this->_impl_.is_revoke_from_all_ = from._impl_.is_revoke_from_all_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRevokeFromActionProto)
}

inline void ResolvedRevokeFromActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.revokee_expr_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_revoke_from_all_){false}
  };
}

ResolvedRevokeFromActionProto::~ResolvedRevokeFromActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRevokeFromActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRevokeFromActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.revokee_expr_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRevokeFromActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRevokeFromActionProto::InternalSwap(ResolvedRevokeFromActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRevokeFromActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[182]);
}

// ===================================================================

class ResolvedRenameToActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRenameToActionProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedRenameToActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedRenameToActionProto::_Internal::parent(const ResolvedRenameToActionProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRenameToActionProto::ResolvedRenameToActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRenameToActionProto)
}
ResolvedRenameToActionProto::ResolvedRenameToActionProto(const ResolvedRenameToActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRenameToActionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_path_){from._impl_.new_path_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterActionProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRenameToActionProto)
}

inline void ResolvedRenameToActionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_path_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedRenameToActionProto::~ResolvedRenameToActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRenameToActionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRenameToActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRenameToActionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRenameToActionProto::InternalSwap(ResolvedRenameToActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRenameToActionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[183]);
}

// ===================================================================

class ResolvedAlterPrivilegeRestrictionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterPrivilegeRestrictionStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterPrivilegeRestrictionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterPrivilegeRestrictionStmtProto::_Internal::parent(const ResolvedAlterPrivilegeRestrictionStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterPrivilegeRestrictionStmtProto::ResolvedAlterPrivilegeRestrictionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto)
}
ResolvedAlterPrivilegeRestrictionStmtProto::ResolvedAlterPrivilegeRestrictionStmtProto(const ResolvedAlterPrivilegeRestrictionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterPrivilegeRestrictionStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_privilege_list_){from._impl_.column_privilege_list_}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    _this->_impl_.object_type_.Set(from._internal_object_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto)
}

inline void ResolvedAlterPrivilegeRestrictionStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_privilege_list_){arena}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.object_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedAlterPrivilegeRestrictionStmtProto::~ResolvedAlterPrivilegeRestrictionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterPrivilegeRestrictionStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterPrivilegeRestrictionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_privilege_list_.~RepeatedPtrField();
  _impl_.object_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterPrivilegeRestrictionStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterPrivilegeRestrictionStmtProto::InternalSwap(ResolvedAlterPrivilegeRestrictionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterPrivilegeRestrictionStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[184]);
}

// ===================================================================

class ResolvedAlterRowAccessPolicyStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterRowAccessPolicyStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterRowAccessPolicyStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedAlterRowAccessPolicyStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterRowAccessPolicyStmtProto::_Internal::parent(const ResolvedAlterRowAccessPolicyStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedAlterRowAccessPolicyStmtProto::_Internal::table_scan(const ResolvedAlterRowAccessPolicyStmtProto* msg) {
  return *msg->_impl_.table_scan_;
}
ResolvedAlterRowAccessPolicyStmtProto::ResolvedAlterRowAccessPolicyStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterRowAccessPolicyStmtProto)
}
ResolvedAlterRowAccessPolicyStmtProto::ResolvedAlterRowAccessPolicyStmtProto(const ResolvedAlterRowAccessPolicyStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterRowAccessPolicyStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  if (from._internal_has_table_scan()) {
    _this->_impl_.table_scan_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.table_scan_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterRowAccessPolicyStmtProto)
}

inline void ResolvedAlterRowAccessPolicyStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedAlterRowAccessPolicyStmtProto::~ResolvedAlterRowAccessPolicyStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterRowAccessPolicyStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterRowAccessPolicyStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_scan_;
}

void ResolvedAlterRowAccessPolicyStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterRowAccessPolicyStmtProto::InternalSwap(ResolvedAlterRowAccessPolicyStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterRowAccessPolicyStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[185]);
}

// ===================================================================

class ResolvedAlterAllRowAccessPoliciesStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterAllRowAccessPoliciesStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterAllRowAccessPoliciesStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedAlterAllRowAccessPoliciesStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterAllRowAccessPoliciesStmtProto::_Internal::parent(const ResolvedAlterAllRowAccessPoliciesStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedAlterAllRowAccessPoliciesStmtProto::_Internal::table_scan(const ResolvedAlterAllRowAccessPoliciesStmtProto* msg) {
  return *msg->_impl_.table_scan_;
}
ResolvedAlterAllRowAccessPoliciesStmtProto::ResolvedAlterAllRowAccessPoliciesStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto)
}
ResolvedAlterAllRowAccessPoliciesStmtProto::ResolvedAlterAllRowAccessPoliciesStmtProto(const ResolvedAlterAllRowAccessPoliciesStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterAllRowAccessPoliciesStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  if (from._internal_has_table_scan()) {
    _this->_impl_.table_scan_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.table_scan_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto)
}

inline void ResolvedAlterAllRowAccessPoliciesStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_scan_){nullptr}
  };
}

ResolvedAlterAllRowAccessPoliciesStmtProto::~ResolvedAlterAllRowAccessPoliciesStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterAllRowAccessPoliciesStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_scan_;
}

void ResolvedAlterAllRowAccessPoliciesStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterAllRowAccessPoliciesStmtProto::InternalSwap(ResolvedAlterAllRowAccessPoliciesStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterAllRowAccessPoliciesStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[186]);
}

// ===================================================================

class ResolvedCreateConstantStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateConstantStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateConstantStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedCreateConstantStmtProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateConstantStmtProto::_Internal::parent(const ResolvedCreateConstantStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateConstantStmtProto::_Internal::expr(const ResolvedCreateConstantStmtProto* msg) {
  return *msg->_impl_.expr_;
}
ResolvedCreateConstantStmtProto::ResolvedCreateConstantStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateConstantStmtProto)
}
ResolvedCreateConstantStmtProto::ResolvedCreateConstantStmtProto(const ResolvedCreateConstantStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateConstantStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateConstantStmtProto)
}

inline void ResolvedCreateConstantStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expr_){nullptr}
  };
}

ResolvedCreateConstantStmtProto::~ResolvedCreateConstantStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateConstantStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateConstantStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedCreateConstantStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateConstantStmtProto::InternalSwap(ResolvedCreateConstantStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateConstantStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[187]);
}

// ===================================================================

class ResolvedCreateFunctionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateFunctionStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateFunctionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_explicit_return_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::zetasql::TypeProto& return_type(const ResolvedCreateFunctionStmtProto* msg);
  static void set_has_return_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedCreateFunctionStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_aggregate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& function_expression(const ResolvedCreateFunctionStmtProto* msg);
  static void set_has_function_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sql_security(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_determinism_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedCreateFunctionStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateFunctionStmtProto::_Internal::parent(const ResolvedCreateFunctionStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TypeProto&
ResolvedCreateFunctionStmtProto::_Internal::return_type(const ResolvedCreateFunctionStmtProto* msg) {
  return *msg->_impl_.return_type_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedCreateFunctionStmtProto::_Internal::signature(const ResolvedCreateFunctionStmtProto* msg) {
  return *msg->_impl_.signature_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateFunctionStmtProto::_Internal::function_expression(const ResolvedCreateFunctionStmtProto* msg) {
  return *msg->_impl_.function_expression_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedCreateFunctionStmtProto::_Internal::connection(const ResolvedCreateFunctionStmtProto* msg) {
  return *msg->_impl_.connection_;
}
void ResolvedCreateFunctionStmtProto::clear_return_type() {
  if (_impl_.return_type_ != nullptr) _impl_.return_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ResolvedCreateFunctionStmtProto::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
ResolvedCreateFunctionStmtProto::ResolvedCreateFunctionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateFunctionStmtProto)
}
ResolvedCreateFunctionStmtProto::ResolvedCreateFunctionStmtProto(const ResolvedCreateFunctionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateFunctionStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.aggregate_expression_list_){from._impl_.aggregate_expression_list_}
    , decltype(_impl_.argument_name_list_){from._impl_.argument_name_list_}
    , decltype(_impl_.language_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.return_type_){nullptr}
    , decltype(_impl_.function_expression_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.sql_security_){}
    , decltype(_impl_.has_explicit_return_type_){}
    , decltype(_impl_.is_aggregate_){}
    , decltype(_impl_.is_remote_){}
    , decltype(_impl_.determinism_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_return_type()) {
    _this->_impl_.return_type_ = new ::zetasql::TypeProto(*from._impl_.return_type_);
  }
  if (from._internal_has_function_expression()) {
    _this->_impl_.function_expression_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.function_expression_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::zetasql::FunctionSignatureProto(*from._impl_.signature_);
  }
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::zetasql::ResolvedConnectionProto(*from._impl_.connection_);
  }
  ::memcpy(&_impl_.sql_security_, &from._impl_.sql_security_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.determinism_level_) -
    reinterpret_cast<char*>(&_impl_.sql_security_)) + sizeof(_impl_.determinism_level_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateFunctionStmtProto)
}

inline void ResolvedCreateFunctionStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.aggregate_expression_list_){arena}
    , decltype(_impl_.argument_name_list_){arena}
    , decltype(_impl_.language_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.return_type_){nullptr}
    , decltype(_impl_.function_expression_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.sql_security_){0}
    , decltype(_impl_.has_explicit_return_type_){false}
    , decltype(_impl_.is_aggregate_){false}
    , decltype(_impl_.is_remote_){false}
    , decltype(_impl_.determinism_level_){0}
  };
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedCreateFunctionStmtProto::~ResolvedCreateFunctionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateFunctionStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateFunctionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.aggregate_expression_list_.~RepeatedPtrField();
  _impl_.argument_name_list_.~RepeatedPtrField();
  _impl_.language_.Destroy();
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.return_type_;
  if (this != internal_default_instance()) delete _impl_.function_expression_;
  if (this != internal_default_instance()) delete _impl_.signature_;
  if (this != internal_default_instance()) delete _impl_.connection_;
}

void ResolvedCreateFunctionStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateFunctionStmtProto::InternalSwap(ResolvedCreateFunctionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateFunctionStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[188]);
}

// ===================================================================

class ResolvedArgumentDefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArgumentDefProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedArgumentDefProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const ResolvedArgumentDefProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_argument_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedArgumentDefProto::_Internal::parent(const ResolvedArgumentDefProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TypeProto&
ResolvedArgumentDefProto::_Internal::type(const ResolvedArgumentDefProto* msg) {
  return *msg->_impl_.type_;
}
void ResolvedArgumentDefProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedArgumentDefProto::ResolvedArgumentDefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArgumentDefProto)
}
ResolvedArgumentDefProto::ResolvedArgumentDefProto(const ResolvedArgumentDefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedArgumentDefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.argument_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  _this->_impl_.argument_kind_ = from._impl_.argument_kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArgumentDefProto)
}

inline void ResolvedArgumentDefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.argument_kind_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedArgumentDefProto::~ResolvedArgumentDefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArgumentDefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedArgumentDefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.type_;
}

void ResolvedArgumentDefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedArgumentDefProto::InternalSwap(ResolvedArgumentDefProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArgumentDefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[189]);
}

// ===================================================================

class ResolvedArgumentRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArgumentRefProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedArgumentRefProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_argument_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedArgumentRefProto::_Internal::parent(const ResolvedArgumentRefProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedArgumentRefProto::ResolvedArgumentRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArgumentRefProto)
}
ResolvedArgumentRefProto::ResolvedArgumentRefProto(const ResolvedArgumentRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedArgumentRefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.argument_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedExprProto(*from._impl_.parent_);
  }
  _this->_impl_.argument_kind_ = from._impl_.argument_kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArgumentRefProto)
}

inline void ResolvedArgumentRefProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.argument_kind_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedArgumentRefProto::~ResolvedArgumentRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArgumentRefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedArgumentRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedArgumentRefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedArgumentRefProto::InternalSwap(ResolvedArgumentRefProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArgumentRefProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[190]);
}

// ===================================================================

class ResolvedCreateTableFunctionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateTableFunctionStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateTableFunctionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedCreateTableFunctionStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_explicit_return_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedCreateTableFunctionStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sql_security(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateTableFunctionStmtProto::_Internal::parent(const ResolvedCreateTableFunctionStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedCreateTableFunctionStmtProto::_Internal::signature(const ResolvedCreateTableFunctionStmtProto* msg) {
  return *msg->_impl_.signature_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateTableFunctionStmtProto::_Internal::query(const ResolvedCreateTableFunctionStmtProto* msg) {
  return *msg->_impl_.query_;
}
void ResolvedCreateTableFunctionStmtProto::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ResolvedCreateTableFunctionStmtProto::ResolvedCreateTableFunctionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateTableFunctionStmtProto)
}
ResolvedCreateTableFunctionStmtProto::ResolvedCreateTableFunctionStmtProto(const ResolvedCreateTableFunctionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateTableFunctionStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_name_list_){from._impl_.argument_name_list_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.output_column_list_){from._impl_.output_column_list_}
    , decltype(_impl_.language_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.sql_security_){}
    , decltype(_impl_.has_explicit_return_schema_){}
    , decltype(_impl_.is_value_table_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::zetasql::FunctionSignatureProto(*from._impl_.signature_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.query_);
  }
  ::memcpy(&_impl_.sql_security_, &from._impl_.sql_security_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_value_table_) -
    reinterpret_cast<char*>(&_impl_.sql_security_)) + sizeof(_impl_.is_value_table_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateTableFunctionStmtProto)
}

inline void ResolvedCreateTableFunctionStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_name_list_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.output_column_list_){arena}
    , decltype(_impl_.language_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.sql_security_){0}
    , decltype(_impl_.has_explicit_return_schema_){false}
    , decltype(_impl_.is_value_table_){false}
  };
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedCreateTableFunctionStmtProto::~ResolvedCreateTableFunctionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateTableFunctionStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateTableFunctionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_name_list_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.output_column_list_.~RepeatedPtrField();
  _impl_.language_.Destroy();
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.signature_;
  if (this != internal_default_instance()) delete _impl_.query_;
}

void ResolvedCreateTableFunctionStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateTableFunctionStmtProto::InternalSwap(ResolvedCreateTableFunctionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateTableFunctionStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[191]);
}

// ===================================================================

class ResolvedRelationArgumentScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRelationArgumentScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedRelationArgumentScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedRelationArgumentScanProto::_Internal::parent(const ResolvedRelationArgumentScanProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedRelationArgumentScanProto::ResolvedRelationArgumentScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRelationArgumentScanProto)
}
ResolvedRelationArgumentScanProto::ResolvedRelationArgumentScanProto(const ResolvedRelationArgumentScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedRelationArgumentScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_value_table_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  _this->_impl_.is_value_table_ = from._impl_.is_value_table_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRelationArgumentScanProto)
}

inline void ResolvedRelationArgumentScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_value_table_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedRelationArgumentScanProto::~ResolvedRelationArgumentScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRelationArgumentScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedRelationArgumentScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedRelationArgumentScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedRelationArgumentScanProto::InternalSwap(ResolvedRelationArgumentScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRelationArgumentScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[192]);
}

// ===================================================================

class ResolvedArgumentListProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArgumentListProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedArgumentListProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedArgumentListProto::_Internal::parent(const ResolvedArgumentListProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedArgumentListProto::ResolvedArgumentListProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArgumentListProto)
}
ResolvedArgumentListProto::ResolvedArgumentListProto(const ResolvedArgumentListProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedArgumentListProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arg_list_){from._impl_.arg_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArgumentListProto)
}

inline void ResolvedArgumentListProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arg_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedArgumentListProto::~ResolvedArgumentListProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArgumentListProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedArgumentListProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arg_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedArgumentListProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedArgumentListProto::InternalSwap(ResolvedArgumentListProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArgumentListProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[193]);
}

// ===================================================================

class ResolvedFunctionSignatureHolderProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFunctionSignatureHolderProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedFunctionSignatureHolderProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedFunctionSignatureHolderProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedFunctionSignatureHolderProto::_Internal::parent(const ResolvedFunctionSignatureHolderProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedFunctionSignatureHolderProto::_Internal::signature(const ResolvedFunctionSignatureHolderProto* msg) {
  return *msg->_impl_.signature_;
}
void ResolvedFunctionSignatureHolderProto::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedFunctionSignatureHolderProto::ResolvedFunctionSignatureHolderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFunctionSignatureHolderProto)
}
ResolvedFunctionSignatureHolderProto::ResolvedFunctionSignatureHolderProto(const ResolvedFunctionSignatureHolderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedFunctionSignatureHolderProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.signature_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::zetasql::FunctionSignatureProto(*from._impl_.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFunctionSignatureHolderProto)
}

inline void ResolvedFunctionSignatureHolderProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.signature_){nullptr}
  };
}

ResolvedFunctionSignatureHolderProto::~ResolvedFunctionSignatureHolderProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFunctionSignatureHolderProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedFunctionSignatureHolderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void ResolvedFunctionSignatureHolderProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedFunctionSignatureHolderProto::InternalSwap(ResolvedFunctionSignatureHolderProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFunctionSignatureHolderProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[194]);
}

// ===================================================================

class ResolvedDropFunctionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropFunctionStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropFunctionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedArgumentListProto& arguments(const ResolvedDropFunctionStmtProto* msg);
  static void set_has_arguments(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedFunctionSignatureHolderProto& signature(const ResolvedDropFunctionStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropFunctionStmtProto::_Internal::parent(const ResolvedDropFunctionStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedArgumentListProto&
ResolvedDropFunctionStmtProto::_Internal::arguments(const ResolvedDropFunctionStmtProto* msg) {
  return *msg->_impl_.arguments_;
}
const ::zetasql::ResolvedFunctionSignatureHolderProto&
ResolvedDropFunctionStmtProto::_Internal::signature(const ResolvedDropFunctionStmtProto* msg) {
  return *msg->_impl_.signature_;
}
ResolvedDropFunctionStmtProto::ResolvedDropFunctionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropFunctionStmtProto)
}
ResolvedDropFunctionStmtProto::ResolvedDropFunctionStmtProto(const ResolvedDropFunctionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropFunctionStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.arguments_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_arguments()) {
    _this->_impl_.arguments_ = new ::zetasql::ResolvedArgumentListProto(*from._impl_.arguments_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::zetasql::ResolvedFunctionSignatureHolderProto(*from._impl_.signature_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropFunctionStmtProto)
}

inline void ResolvedDropFunctionStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.arguments_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
}

ResolvedDropFunctionStmtProto::~ResolvedDropFunctionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropFunctionStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropFunctionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.arguments_;
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void ResolvedDropFunctionStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropFunctionStmtProto::InternalSwap(ResolvedDropFunctionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropFunctionStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[195]);
}

// ===================================================================

class ResolvedDropTableFunctionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropTableFunctionStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropTableFunctionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropTableFunctionStmtProto::_Internal::parent(const ResolvedDropTableFunctionStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedDropTableFunctionStmtProto::ResolvedDropTableFunctionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropTableFunctionStmtProto)
}
ResolvedDropTableFunctionStmtProto::ResolvedDropTableFunctionStmtProto(const ResolvedDropTableFunctionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedDropTableFunctionStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.is_if_exists_ = from._impl_.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropTableFunctionStmtProto)
}

inline void ResolvedDropTableFunctionStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.is_if_exists_){false}
  };
}

ResolvedDropTableFunctionStmtProto::~ResolvedDropTableFunctionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropTableFunctionStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedDropTableFunctionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedDropTableFunctionStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedDropTableFunctionStmtProto::InternalSwap(ResolvedDropTableFunctionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropTableFunctionStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[196]);
}

// ===================================================================

class ResolvedCallStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCallStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCallStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ProcedureRefProto& procedure(const ResolvedCallStmtProto* msg);
  static void set_has_procedure(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedCallStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCallStmtProto::_Internal::parent(const ResolvedCallStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ProcedureRefProto&
ResolvedCallStmtProto::_Internal::procedure(const ResolvedCallStmtProto* msg) {
  return *msg->_impl_.procedure_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedCallStmtProto::_Internal::signature(const ResolvedCallStmtProto* msg) {
  return *msg->_impl_.signature_;
}
void ResolvedCallStmtProto::clear_procedure() {
  if (_impl_.procedure_ != nullptr) _impl_.procedure_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ResolvedCallStmtProto::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedCallStmtProto::ResolvedCallStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCallStmtProto)
}
ResolvedCallStmtProto::ResolvedCallStmtProto(const ResolvedCallStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCallStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_list_){from._impl_.argument_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.procedure_){nullptr}
    , decltype(_impl_.signature_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_procedure()) {
    _this->_impl_.procedure_ = new ::zetasql::ProcedureRefProto(*from._impl_.procedure_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::zetasql::FunctionSignatureProto(*from._impl_.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCallStmtProto)
}

inline void ResolvedCallStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.procedure_){nullptr}
    , decltype(_impl_.signature_){nullptr}
  };
}

ResolvedCallStmtProto::~ResolvedCallStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCallStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCallStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.procedure_;
  if (this != internal_default_instance()) delete _impl_.signature_;
}

void ResolvedCallStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCallStmtProto::InternalSwap(ResolvedCallStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCallStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[197]);
}

// ===================================================================

class ResolvedImportStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedImportStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedImportStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_import_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedImportStmtProto::_Internal::parent(const ResolvedImportStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedImportStmtProto::ResolvedImportStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedImportStmtProto)
}
ResolvedImportStmtProto::ResolvedImportStmtProto(const ResolvedImportStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedImportStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.alias_path_){from._impl_.alias_path_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.into_alias_path_){from._impl_.into_alias_path_}
    , decltype(_impl_.file_path_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.import_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_path()) {
    _this->_impl_.file_path_.Set(from._internal_file_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  _this->_impl_.import_kind_ = from._impl_.import_kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedImportStmtProto)
}

inline void ResolvedImportStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.alias_path_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.into_alias_path_){arena}
    , decltype(_impl_.file_path_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.import_kind_){0}
  };
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedImportStmtProto::~ResolvedImportStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedImportStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedImportStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.alias_path_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.into_alias_path_.~RepeatedPtrField();
  _impl_.file_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedImportStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedImportStmtProto::InternalSwap(ResolvedImportStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedImportStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[198]);
}

// ===================================================================

class ResolvedModuleStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedModuleStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedModuleStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedModuleStmtProto::_Internal::parent(const ResolvedModuleStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedModuleStmtProto::ResolvedModuleStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedModuleStmtProto)
}
ResolvedModuleStmtProto::ResolvedModuleStmtProto(const ResolvedModuleStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedModuleStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedModuleStmtProto)
}

inline void ResolvedModuleStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedModuleStmtProto::~ResolvedModuleStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedModuleStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedModuleStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedModuleStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedModuleStmtProto::InternalSwap(ResolvedModuleStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedModuleStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[199]);
}

// ===================================================================

class ResolvedAggregateHavingModifierProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAggregateHavingModifierProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedAggregateHavingModifierProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& having_expr(const ResolvedAggregateHavingModifierProto* msg);
  static void set_has_having_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedAggregateHavingModifierProto::_Internal::parent(const ResolvedAggregateHavingModifierProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAggregateHavingModifierProto::_Internal::having_expr(const ResolvedAggregateHavingModifierProto* msg) {
  return *msg->_impl_.having_expr_;
}
ResolvedAggregateHavingModifierProto::ResolvedAggregateHavingModifierProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAggregateHavingModifierProto)
}
ResolvedAggregateHavingModifierProto::ResolvedAggregateHavingModifierProto(const ResolvedAggregateHavingModifierProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAggregateHavingModifierProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.having_expr_){nullptr}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_having_expr()) {
    _this->_impl_.having_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.having_expr_);
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAggregateHavingModifierProto)
}

inline void ResolvedAggregateHavingModifierProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.having_expr_){nullptr}
    , decltype(_impl_.kind_){0}
  };
}

ResolvedAggregateHavingModifierProto::~ResolvedAggregateHavingModifierProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAggregateHavingModifierProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAggregateHavingModifierProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.having_expr_;
}

void ResolvedAggregateHavingModifierProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAggregateHavingModifierProto::InternalSwap(ResolvedAggregateHavingModifierProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAggregateHavingModifierProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[200]);
}

// ===================================================================

class ResolvedCreateMaterializedViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateMaterializedViewStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateViewBaseProto& parent(const ResolvedCreateMaterializedViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedCreateViewBaseProto&
ResolvedCreateMaterializedViewStmtProto::_Internal::parent(const ResolvedCreateMaterializedViewStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedCreateMaterializedViewStmtProto::ResolvedCreateMaterializedViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateMaterializedViewStmtProto)
}
ResolvedCreateMaterializedViewStmtProto::ResolvedCreateMaterializedViewStmtProto(const ResolvedCreateMaterializedViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateMaterializedViewStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_definition_list_){from._impl_.column_definition_list_}
    , decltype(_impl_.partition_by_list_){from._impl_.partition_by_list_}
    , decltype(_impl_.cluster_by_list_){from._impl_.cluster_by_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateViewBaseProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateMaterializedViewStmtProto)
}

inline void ResolvedCreateMaterializedViewStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_definition_list_){arena}
    , decltype(_impl_.partition_by_list_){arena}
    , decltype(_impl_.cluster_by_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedCreateMaterializedViewStmtProto::~ResolvedCreateMaterializedViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateMaterializedViewStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateMaterializedViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_definition_list_.~RepeatedPtrField();
  _impl_.partition_by_list_.~RepeatedPtrField();
  _impl_.cluster_by_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedCreateMaterializedViewStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateMaterializedViewStmtProto::InternalSwap(ResolvedCreateMaterializedViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateMaterializedViewStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[201]);
}

// ===================================================================

class ResolvedCreateProcedureStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateProcedureStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateProcedureStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedCreateProcedureStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_procedure_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedCreateProcedureStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateProcedureStmtProto::_Internal::parent(const ResolvedCreateProcedureStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedCreateProcedureStmtProto::_Internal::signature(const ResolvedCreateProcedureStmtProto* msg) {
  return *msg->_impl_.signature_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedCreateProcedureStmtProto::_Internal::connection(const ResolvedCreateProcedureStmtProto* msg) {
  return *msg->_impl_.connection_;
}
void ResolvedCreateProcedureStmtProto::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ResolvedCreateProcedureStmtProto::ResolvedCreateProcedureStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateProcedureStmtProto)
}
ResolvedCreateProcedureStmtProto::ResolvedCreateProcedureStmtProto(const ResolvedCreateProcedureStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateProcedureStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_name_list_){from._impl_.argument_name_list_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.procedure_body_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.connection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.procedure_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procedure_body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_procedure_body()) {
    _this->_impl_.procedure_body_.Set(from._internal_procedure_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_signature()) {
    _this->_impl_.signature_ = new ::zetasql::FunctionSignatureProto(*from._impl_.signature_);
  }
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::zetasql::ResolvedConnectionProto(*from._impl_.connection_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateProcedureStmtProto)
}

inline void ResolvedCreateProcedureStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.argument_name_list_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.procedure_body_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.signature_){nullptr}
    , decltype(_impl_.connection_){nullptr}
  };
  _impl_.procedure_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procedure_body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedCreateProcedureStmtProto::~ResolvedCreateProcedureStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateProcedureStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateProcedureStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_name_list_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.procedure_body_.Destroy();
  _impl_.language_.Destroy();
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.signature_;
  if (this != internal_default_instance()) delete _impl_.connection_;
}

void ResolvedCreateProcedureStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateProcedureStmtProto::InternalSwap(ResolvedCreateProcedureStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateProcedureStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[202]);
}

// ===================================================================

class ResolvedExecuteImmediateArgumentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExecuteImmediateArgumentProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedExecuteImmediateArgumentProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedExecuteImmediateArgumentProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedExecuteImmediateArgumentProto::_Internal::parent(const ResolvedExecuteImmediateArgumentProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedExecuteImmediateArgumentProto::_Internal::expression(const ResolvedExecuteImmediateArgumentProto* msg) {
  return *msg->_impl_.expression_;
}
ResolvedExecuteImmediateArgumentProto::ResolvedExecuteImmediateArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExecuteImmediateArgumentProto)
}
ResolvedExecuteImmediateArgumentProto::ResolvedExecuteImmediateArgumentProto(const ResolvedExecuteImmediateArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedExecuteImmediateArgumentProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_expression()) {
    _this->_impl_.expression_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expression_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExecuteImmediateArgumentProto)
}

inline void ResolvedExecuteImmediateArgumentProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.expression_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedExecuteImmediateArgumentProto::~ResolvedExecuteImmediateArgumentProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExecuteImmediateArgumentProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedExecuteImmediateArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.expression_;
}

void ResolvedExecuteImmediateArgumentProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedExecuteImmediateArgumentProto::InternalSwap(ResolvedExecuteImmediateArgumentProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExecuteImmediateArgumentProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[203]);
}

// ===================================================================

class ResolvedExecuteImmediateStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExecuteImmediateStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedExecuteImmediateStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& sql(const ResolvedExecuteImmediateStmtProto* msg);
  static void set_has_sql(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedExecuteImmediateStmtProto::_Internal::parent(const ResolvedExecuteImmediateStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedExecuteImmediateStmtProto::_Internal::sql(const ResolvedExecuteImmediateStmtProto* msg) {
  return *msg->_impl_.sql_;
}
ResolvedExecuteImmediateStmtProto::ResolvedExecuteImmediateStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExecuteImmediateStmtProto)
}
ResolvedExecuteImmediateStmtProto::ResolvedExecuteImmediateStmtProto(const ResolvedExecuteImmediateStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedExecuteImmediateStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.into_identifier_list_){from._impl_.into_identifier_list_}
    , decltype(_impl_.using_argument_list_){from._impl_.using_argument_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.sql_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_sql()) {
    _this->_impl_.sql_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.sql_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExecuteImmediateStmtProto)
}

inline void ResolvedExecuteImmediateStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.into_identifier_list_){arena}
    , decltype(_impl_.using_argument_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.sql_){nullptr}
  };
}

ResolvedExecuteImmediateStmtProto::~ResolvedExecuteImmediateStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExecuteImmediateStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedExecuteImmediateStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.into_identifier_list_.~RepeatedPtrField();
  _impl_.using_argument_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.sql_;
}

void ResolvedExecuteImmediateStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedExecuteImmediateStmtProto::InternalSwap(ResolvedExecuteImmediateStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExecuteImmediateStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[204]);
}

// ===================================================================

class ResolvedAssignmentStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAssignmentStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAssignmentStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& target(const ResolvedAssignmentStmtProto* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedAssignmentStmtProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAssignmentStmtProto::_Internal::parent(const ResolvedAssignmentStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAssignmentStmtProto::_Internal::target(const ResolvedAssignmentStmtProto* msg) {
  return *msg->_impl_.target_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAssignmentStmtProto::_Internal::expr(const ResolvedAssignmentStmtProto* msg) {
  return *msg->_impl_.expr_;
}
ResolvedAssignmentStmtProto::ResolvedAssignmentStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAssignmentStmtProto)
}
ResolvedAssignmentStmtProto::ResolvedAssignmentStmtProto(const ResolvedAssignmentStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAssignmentStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.target_);
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAssignmentStmtProto)
}

inline void ResolvedAssignmentStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.expr_){nullptr}
  };
}

ResolvedAssignmentStmtProto::~ResolvedAssignmentStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAssignmentStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAssignmentStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.expr_;
}

void ResolvedAssignmentStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAssignmentStmtProto::InternalSwap(ResolvedAssignmentStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAssignmentStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[205]);
}

// ===================================================================

class ResolvedCreateEntityStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateEntityStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateEntityStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_body_json(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_body_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateEntityStmtProto::_Internal::parent(const ResolvedCreateEntityStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedCreateEntityStmtProto::ResolvedCreateEntityStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateEntityStmtProto)
}
ResolvedCreateEntityStmtProto::ResolvedCreateEntityStmtProto(const ResolvedCreateEntityStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCreateEntityStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.entity_body_json_){}
    , decltype(_impl_.entity_body_text_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_type()) {
    _this->_impl_.entity_type_.Set(from._internal_entity_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entity_body_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_body_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_body_json()) {
    _this->_impl_.entity_body_json_.Set(from._internal_entity_body_json(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entity_body_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_body_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_body_text()) {
    _this->_impl_.entity_body_text_.Set(from._internal_entity_body_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedCreateStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateEntityStmtProto)
}

inline void ResolvedCreateEntityStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.entity_body_json_){}
    , decltype(_impl_.entity_body_text_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entity_body_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_body_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entity_body_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_body_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedCreateEntityStmtProto::~ResolvedCreateEntityStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateEntityStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCreateEntityStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.entity_type_.Destroy();
  _impl_.entity_body_json_.Destroy();
  _impl_.entity_body_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedCreateEntityStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCreateEntityStmtProto::InternalSwap(ResolvedCreateEntityStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateEntityStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[206]);
}

// ===================================================================

class ResolvedAlterEntityStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterEntityStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterEntityStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterEntityStmtProto::_Internal::parent(const ResolvedAlterEntityStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAlterEntityStmtProto::ResolvedAlterEntityStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterEntityStmtProto)
}
ResolvedAlterEntityStmtProto::ResolvedAlterEntityStmtProto(const ResolvedAlterEntityStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAlterEntityStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_type()) {
    _this->_impl_.entity_type_.Set(from._internal_entity_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterEntityStmtProto)
}

inline void ResolvedAlterEntityStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.parent_){nullptr}
  };
  _impl_.entity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResolvedAlterEntityStmtProto::~ResolvedAlterEntityStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterEntityStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAlterEntityStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAlterEntityStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAlterEntityStmtProto::InternalSwap(ResolvedAlterEntityStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterEntityStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[207]);
}

// ===================================================================

class ResolvedPivotColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedPivotColumnProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedPivotColumnProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedPivotColumnProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pivot_expr_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pivot_value_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedPivotColumnProto::_Internal::parent(const ResolvedPivotColumnProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedPivotColumnProto::_Internal::column(const ResolvedPivotColumnProto* msg) {
  return *msg->_impl_.column_;
}
void ResolvedPivotColumnProto::clear_column() {
  if (_impl_.column_ != nullptr) _impl_.column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedPivotColumnProto::ResolvedPivotColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedPivotColumnProto)
}
ResolvedPivotColumnProto::ResolvedPivotColumnProto(const ResolvedPivotColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedPivotColumnProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}
    , decltype(_impl_.pivot_expr_index_){}
    , decltype(_impl_.pivot_value_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_column()) {
    _this->_impl_.column_ = new ::zetasql::ResolvedColumnProto(*from._impl_.column_);
  }
  ::memcpy(&_impl_.pivot_expr_index_, &from._impl_.pivot_expr_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pivot_value_index_) -
    reinterpret_cast<char*>(&_impl_.pivot_expr_index_)) + sizeof(_impl_.pivot_value_index_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedPivotColumnProto)
}

inline void ResolvedPivotColumnProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.column_){nullptr}
    , decltype(_impl_.pivot_expr_index_){int64_t{0}}
    , decltype(_impl_.pivot_value_index_){int64_t{0}}
  };
}

ResolvedPivotColumnProto::~ResolvedPivotColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedPivotColumnProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedPivotColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.column_;
}

void ResolvedPivotColumnProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedPivotColumnProto::InternalSwap(ResolvedPivotColumnProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedPivotColumnProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[208]);
}

// ===================================================================

class ResolvedPivotScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedPivotScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedPivotScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedPivotScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& for_expr(const ResolvedPivotScanProto* msg);
  static void set_has_for_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedPivotScanProto::_Internal::parent(const ResolvedPivotScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedPivotScanProto::_Internal::input_scan(const ResolvedPivotScanProto* msg) {
  return *msg->_impl_.input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedPivotScanProto::_Internal::for_expr(const ResolvedPivotScanProto* msg) {
  return *msg->_impl_.for_expr_;
}
ResolvedPivotScanProto::ResolvedPivotScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedPivotScanProto)
}
ResolvedPivotScanProto::ResolvedPivotScanProto(const ResolvedPivotScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedPivotScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_list_){from._impl_.group_by_list_}
    , decltype(_impl_.pivot_expr_list_){from._impl_.pivot_expr_list_}
    , decltype(_impl_.pivot_value_list_){from._impl_.pivot_value_list_}
    , decltype(_impl_.pivot_column_list_){from._impl_.pivot_column_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.for_expr_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  if (from._internal_has_for_expr()) {
    _this->_impl_.for_expr_ = new ::zetasql::AnyResolvedExprProto(*from._impl_.for_expr_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedPivotScanProto)
}

inline void ResolvedPivotScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_list_){arena}
    , decltype(_impl_.pivot_expr_list_){arena}
    , decltype(_impl_.pivot_value_list_){arena}
    , decltype(_impl_.pivot_column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.for_expr_){nullptr}
  };
}

ResolvedPivotScanProto::~ResolvedPivotScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedPivotScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedPivotScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_by_list_.~RepeatedPtrField();
  _impl_.pivot_expr_list_.~RepeatedPtrField();
  _impl_.pivot_value_list_.~RepeatedPtrField();
  _impl_.pivot_column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
  if (this != internal_default_instance()) delete _impl_.for_expr_;
}

void ResolvedPivotScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedPivotScanProto::InternalSwap(ResolvedPivotScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedPivotScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[209]);
}

// ===================================================================

class ResolvedReturningClauseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedReturningClauseProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedReturningClauseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& action_column(const ResolvedReturningClauseProto* msg);
  static void set_has_action_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedReturningClauseProto::_Internal::parent(const ResolvedReturningClauseProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedReturningClauseProto::_Internal::action_column(const ResolvedReturningClauseProto* msg) {
  return *msg->_impl_.action_column_;
}
ResolvedReturningClauseProto::ResolvedReturningClauseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedReturningClauseProto)
}
ResolvedReturningClauseProto::ResolvedReturningClauseProto(const ResolvedReturningClauseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedReturningClauseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_column_list_){from._impl_.output_column_list_}
    , decltype(_impl_.expr_list_){from._impl_.expr_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.action_column_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_action_column()) {
    _this->_impl_.action_column_ = new ::zetasql::ResolvedColumnHolderProto(*from._impl_.action_column_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedReturningClauseProto)
}

inline void ResolvedReturningClauseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_column_list_){arena}
    , decltype(_impl_.expr_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.action_column_){nullptr}
  };
}

ResolvedReturningClauseProto::~ResolvedReturningClauseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedReturningClauseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedReturningClauseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_column_list_.~RepeatedPtrField();
  _impl_.expr_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.action_column_;
}

void ResolvedReturningClauseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedReturningClauseProto::InternalSwap(ResolvedReturningClauseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedReturningClauseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[210]);
}

// ===================================================================

class ResolvedUnpivotArgProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUnpivotArgProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedUnpivotArgProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedUnpivotArgProto::_Internal::parent(const ResolvedUnpivotArgProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedUnpivotArgProto::ResolvedUnpivotArgProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUnpivotArgProto)
}
ResolvedUnpivotArgProto::ResolvedUnpivotArgProto(const ResolvedUnpivotArgProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedUnpivotArgProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_list_){from._impl_.column_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUnpivotArgProto)
}

inline void ResolvedUnpivotArgProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedUnpivotArgProto::~ResolvedUnpivotArgProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUnpivotArgProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedUnpivotArgProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedUnpivotArgProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedUnpivotArgProto::InternalSwap(ResolvedUnpivotArgProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUnpivotArgProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[211]);
}

// ===================================================================

class ResolvedUnpivotScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUnpivotScanProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedUnpivotScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedUnpivotScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedColumnProto& label_column(const ResolvedUnpivotScanProto* msg);
  static void set_has_label_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_include_nulls(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedUnpivotScanProto::_Internal::parent(const ResolvedUnpivotScanProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedUnpivotScanProto::_Internal::input_scan(const ResolvedUnpivotScanProto* msg) {
  return *msg->_impl_.input_scan_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedUnpivotScanProto::_Internal::label_column(const ResolvedUnpivotScanProto* msg) {
  return *msg->_impl_.label_column_;
}
void ResolvedUnpivotScanProto::clear_value_column_list() {
  _impl_.value_column_list_.Clear();
}
void ResolvedUnpivotScanProto::clear_label_column() {
  if (_impl_.label_column_ != nullptr) _impl_.label_column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResolvedUnpivotScanProto::ResolvedUnpivotScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUnpivotScanProto)
}
ResolvedUnpivotScanProto::ResolvedUnpivotScanProto(const ResolvedUnpivotScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedUnpivotScanProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_column_list_){from._impl_.value_column_list_}
    , decltype(_impl_.label_list_){from._impl_.label_list_}
    , decltype(_impl_.unpivot_arg_list_){from._impl_.unpivot_arg_list_}
    , decltype(_impl_.projected_input_column_list_){from._impl_.projected_input_column_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.label_column_){nullptr}
    , decltype(_impl_.include_nulls_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedScanProto(*from._impl_.parent_);
  }
  if (from._internal_has_input_scan()) {
    _this->_impl_.input_scan_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.input_scan_);
  }
  if (from._internal_has_label_column()) {
    _this->_impl_.label_column_ = new ::zetasql::ResolvedColumnProto(*from._impl_.label_column_);
  }
  _this->_impl_.include_nulls_ = from._impl_.include_nulls_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUnpivotScanProto)
}

inline void ResolvedUnpivotScanProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_column_list_){arena}
    , decltype(_impl_.label_list_){arena}
    , decltype(_impl_.unpivot_arg_list_){arena}
    , decltype(_impl_.projected_input_column_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.input_scan_){nullptr}
    , decltype(_impl_.label_column_){nullptr}
    , decltype(_impl_.include_nulls_){false}
  };
}

ResolvedUnpivotScanProto::~ResolvedUnpivotScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUnpivotScanProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedUnpivotScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_column_list_.~RepeatedPtrField();
  _impl_.label_list_.~RepeatedPtrField();
  _impl_.unpivot_arg_list_.~RepeatedPtrField();
  _impl_.projected_input_column_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.input_scan_;
  if (this != internal_default_instance()) delete _impl_.label_column_;
}

void ResolvedUnpivotScanProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedUnpivotScanProto::InternalSwap(ResolvedUnpivotScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUnpivotScanProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[212]);
}

// ===================================================================

class ResolvedCloneDataStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCloneDataStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCloneDataStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& target_table(const ResolvedCloneDataStmtProto* msg);
  static void set_has_target_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& clone_from(const ResolvedCloneDataStmtProto* msg);
  static void set_has_clone_from(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCloneDataStmtProto::_Internal::parent(const ResolvedCloneDataStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedCloneDataStmtProto::_Internal::target_table(const ResolvedCloneDataStmtProto* msg) {
  return *msg->_impl_.target_table_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCloneDataStmtProto::_Internal::clone_from(const ResolvedCloneDataStmtProto* msg) {
  return *msg->_impl_.clone_from_;
}
ResolvedCloneDataStmtProto::ResolvedCloneDataStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCloneDataStmtProto)
}
ResolvedCloneDataStmtProto::ResolvedCloneDataStmtProto(const ResolvedCloneDataStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedCloneDataStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.target_table_){nullptr}
    , decltype(_impl_.clone_from_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_target_table()) {
    _this->_impl_.target_table_ = new ::zetasql::ResolvedTableScanProto(*from._impl_.target_table_);
  }
  if (from._internal_has_clone_from()) {
    _this->_impl_.clone_from_ = new ::zetasql::AnyResolvedScanProto(*from._impl_.clone_from_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCloneDataStmtProto)
}

inline void ResolvedCloneDataStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.target_table_){nullptr}
    , decltype(_impl_.clone_from_){nullptr}
  };
}

ResolvedCloneDataStmtProto::~ResolvedCloneDataStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCloneDataStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedCloneDataStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.target_table_;
  if (this != internal_default_instance()) delete _impl_.clone_from_;
}

void ResolvedCloneDataStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedCloneDataStmtProto::InternalSwap(ResolvedCloneDataStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCloneDataStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[213]);
}

// ===================================================================

class ResolvedTableAndColumnInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedTableAndColumnInfoProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedTableAndColumnInfoProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TableRefProto& table(const ResolvedTableAndColumnInfoProto* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedTableAndColumnInfoProto::_Internal::parent(const ResolvedTableAndColumnInfoProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::TableRefProto&
ResolvedTableAndColumnInfoProto::_Internal::table(const ResolvedTableAndColumnInfoProto* msg) {
  return *msg->_impl_.table_;
}
void ResolvedTableAndColumnInfoProto::clear_table() {
  if (_impl_.table_ != nullptr) _impl_.table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResolvedTableAndColumnInfoProto::ResolvedTableAndColumnInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedTableAndColumnInfoProto)
}
ResolvedTableAndColumnInfoProto::ResolvedTableAndColumnInfoProto(const ResolvedTableAndColumnInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedTableAndColumnInfoProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_index_list_){from._impl_.column_index_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedArgumentProto(*from._impl_.parent_);
  }
  if (from._internal_has_table()) {
    _this->_impl_.table_ = new ::zetasql::TableRefProto(*from._impl_.table_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedTableAndColumnInfoProto)
}

inline void ResolvedTableAndColumnInfoProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_index_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.table_){nullptr}
  };
}

ResolvedTableAndColumnInfoProto::~ResolvedTableAndColumnInfoProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedTableAndColumnInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedTableAndColumnInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_index_list_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.table_;
}

void ResolvedTableAndColumnInfoProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedTableAndColumnInfoProto::InternalSwap(ResolvedTableAndColumnInfoProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedTableAndColumnInfoProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[214]);
}

// ===================================================================

class ResolvedAnalyzeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnalyzeStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAnalyzeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAnalyzeStmtProto::_Internal::parent(const ResolvedAnalyzeStmtProto* msg) {
  return *msg->_impl_.parent_;
}
ResolvedAnalyzeStmtProto::ResolvedAnalyzeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnalyzeStmtProto)
}
ResolvedAnalyzeStmtProto::ResolvedAnalyzeStmtProto(const ResolvedAnalyzeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAnalyzeStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.table_and_column_index_list_){from._impl_.table_and_column_index_list_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnalyzeStmtProto)
}

inline void ResolvedAnalyzeStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.table_and_column_index_list_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

ResolvedAnalyzeStmtProto::~ResolvedAnalyzeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnalyzeStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAnalyzeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.table_and_column_index_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ResolvedAnalyzeStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAnalyzeStmtProto::InternalSwap(ResolvedAnalyzeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnalyzeStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[215]);
}

// ===================================================================

class ResolvedAuxLoadDataStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAuxLoadDataStmtProto>()._impl_._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAuxLoadDataStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_insertion_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedPrimaryKeyProto& primary_key(const ResolvedAuxLoadDataStmtProto* msg);
  static void set_has_primary_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedWithPartitionColumnsProto& with_partition_columns(const ResolvedAuxLoadDataStmtProto* msg);
  static void set_has_with_partition_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedAuxLoadDataStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAuxLoadDataStmtProto::_Internal::parent(const ResolvedAuxLoadDataStmtProto* msg) {
  return *msg->_impl_.parent_;
}
const ::zetasql::ResolvedPrimaryKeyProto&
ResolvedAuxLoadDataStmtProto::_Internal::primary_key(const ResolvedAuxLoadDataStmtProto* msg) {
  return *msg->_impl_.primary_key_;
}
const ::zetasql::ResolvedWithPartitionColumnsProto&
ResolvedAuxLoadDataStmtProto::_Internal::with_partition_columns(const ResolvedAuxLoadDataStmtProto* msg) {
  return *msg->_impl_.with_partition_columns_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedAuxLoadDataStmtProto::_Internal::connection(const ResolvedAuxLoadDataStmtProto* msg) {
  return *msg->_impl_.connection_;
}
void ResolvedAuxLoadDataStmtProto::clear_pseudo_column_list() {
  _impl_.pseudo_column_list_.Clear();
}
ResolvedAuxLoadDataStmtProto::ResolvedAuxLoadDataStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAuxLoadDataStmtProto)
}
ResolvedAuxLoadDataStmtProto::ResolvedAuxLoadDataStmtProto(const ResolvedAuxLoadDataStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedAuxLoadDataStmtProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){from._impl_.name_path_}
    , decltype(_impl_.output_column_list_){from._impl_.output_column_list_}
    , decltype(_impl_.column_definition_list_){from._impl_.column_definition_list_}
    , decltype(_impl_.pseudo_column_list_){from._impl_.pseudo_column_list_}
    , decltype(_impl_.foreign_key_list_){from._impl_.foreign_key_list_}
    , decltype(_impl_.check_constraint_list_){from._impl_.check_constraint_list_}
    , decltype(_impl_.partition_by_list_){from._impl_.partition_by_list_}
    , decltype(_impl_.cluster_by_list_){from._impl_.cluster_by_list_}
    , decltype(_impl_.option_list_){from._impl_.option_list_}
    , decltype(_impl_.from_files_option_list_){from._impl_.from_files_option_list_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.primary_key_){nullptr}
    , decltype(_impl_.with_partition_columns_){nullptr}
    , decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.insertion_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::zetasql::ResolvedStatementProto(*from._impl_.parent_);
  }
  if (from._internal_has_primary_key()) {
    _this->_impl_.primary_key_ = new ::zetasql::ResolvedPrimaryKeyProto(*from._impl_.primary_key_);
  }
  if (from._internal_has_with_partition_columns()) {
    _this->_impl_.with_partition_columns_ = new ::zetasql::ResolvedWithPartitionColumnsProto(*from._impl_.with_partition_columns_);
  }
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::zetasql::ResolvedConnectionProto(*from._impl_.connection_);
  }
  _this->_impl_.insertion_mode_ = from._impl_.insertion_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAuxLoadDataStmtProto)
}

inline void ResolvedAuxLoadDataStmtProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_path_){arena}
    , decltype(_impl_.output_column_list_){arena}
    , decltype(_impl_.column_definition_list_){arena}
    , decltype(_impl_.pseudo_column_list_){arena}
    , decltype(_impl_.foreign_key_list_){arena}
    , decltype(_impl_.check_constraint_list_){arena}
    , decltype(_impl_.partition_by_list_){arena}
    , decltype(_impl_.cluster_by_list_){arena}
    , decltype(_impl_.option_list_){arena}
    , decltype(_impl_.from_files_option_list_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.primary_key_){nullptr}
    , decltype(_impl_.with_partition_columns_){nullptr}
    , decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.insertion_mode_){0}
  };
}

ResolvedAuxLoadDataStmtProto::~ResolvedAuxLoadDataStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAuxLoadDataStmtProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedAuxLoadDataStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_path_.~RepeatedPtrField();
  _impl_.output_column_list_.~RepeatedPtrField();
  _impl_.column_definition_list_.~RepeatedPtrField();
  _impl_.pseudo_column_list_.~RepeatedPtrField();
  _impl_.foreign_key_list_.~RepeatedPtrField();
  _impl_.check_constraint_list_.~RepeatedPtrField();
  _impl_.partition_by_list_.~RepeatedPtrField();
  _impl_.cluster_by_list_.~RepeatedPtrField();
  _impl_.option_list_.~RepeatedPtrField();
  _impl_.from_files_option_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.primary_key_;
  if (this != internal_default_instance()) delete _impl_.with_partition_columns_;
  if (this != internal_default_instance()) delete _impl_.connection_;
}

void ResolvedAuxLoadDataStmtProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedAuxLoadDataStmtProto::InternalSwap(ResolvedAuxLoadDataStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAuxLoadDataStmtProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[216]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedNodeProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedNodeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedNodeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedArgumentProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArgumentProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedExprProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedExprProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedExprProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExprProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedExprProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExprProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedLiteralProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedLiteralProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedLiteralProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedParameterProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedParameterProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedParameterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExpressionColumnProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedExpressionColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExpressionColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnRefProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedConstantProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedConstantProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedConstantProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSystemVariableProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSystemVariableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSystemVariableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedInlineLambdaProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedInlineLambdaProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedInlineLambdaProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFilterFieldArgProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFilterFieldArgProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFilterFieldArgProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFilterFieldProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFilterFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFilterFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedFunctionCallBaseProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedFunctionCallBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedFunctionCallBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFunctionCallBaseProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFunctionCallBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFunctionCallBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFunctionCallProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFunctionCallProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFunctionCallProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedNonScalarFunctionCallBaseProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedNonScalarFunctionCallBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedNonScalarFunctionCallBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAggregateFunctionCallProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAggregateFunctionCallProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAggregateFunctionCallProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnalyticFunctionCallProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAnalyticFunctionCallProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnalyticFunctionCallProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExtendedCastElementProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedExtendedCastElementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExtendedCastElementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExtendedCastProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedExtendedCastProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExtendedCastProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCastProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCastProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCastProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMakeStructProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedMakeStructProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMakeStructProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMakeProtoProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedMakeProtoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMakeProtoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMakeProtoFieldProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedMakeProtoFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMakeProtoFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGetStructFieldProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedGetStructFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGetStructFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGetProtoFieldProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedGetProtoFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGetProtoFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGetJsonFieldProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedGetJsonFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGetJsonFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFlattenProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFlattenProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFlattenProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFlattenedArgProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFlattenedArgProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFlattenedArgProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedReplaceFieldItemProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedReplaceFieldItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedReplaceFieldItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedReplaceFieldProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedReplaceFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedReplaceFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSubqueryExprProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSubqueryExprProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSubqueryExprProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWithExprProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedWithExprProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWithExprProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedScanProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedModelProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedModelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedModelProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedConnectionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedConnectionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedConnectionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDescriptorProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDescriptorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDescriptorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSingleRowScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSingleRowScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSingleRowScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedTableScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedTableScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedTableScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedJoinScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedJoinScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedJoinScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArrayScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedArrayScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArrayScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnHolderProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnHolderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnHolderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFilterScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFilterScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFilterScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGroupingSetProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedGroupingSetProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGroupingSetProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedAggregateScanBaseProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedAggregateScanBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedAggregateScanBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAggregateScanBaseProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAggregateScanBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAggregateScanBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAggregateScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAggregateScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAggregateScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnonymizedAggregateScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAnonymizedAggregateScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnonymizedAggregateScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetOperationItemProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSetOperationItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetOperationItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetOperationScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSetOperationScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetOperationScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedOrderByScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedOrderByScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedOrderByScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedLimitOffsetScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedLimitOffsetScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedLimitOffsetScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWithRefScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedWithRefScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWithRefScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnalyticScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAnalyticScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnalyticScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSampleScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSampleScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSampleScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedComputedColumnProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedComputedColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedComputedColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedOrderByItemProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedOrderByItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedOrderByItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnAnnotationsProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnAnnotationsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnAnnotationsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGeneratedColumnInfoProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedGeneratedColumnInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGeneratedColumnInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnDefaultValueProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnDefaultValueProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnDefaultValueProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnDefinitionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnDefinitionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnDefinitionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedConstraintProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedConstraintProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedPrimaryKeyProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedPrimaryKeyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedPrimaryKeyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedForeignKeyProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedForeignKeyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedForeignKeyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCheckConstraintProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCheckConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCheckConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedOutputColumnProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedOutputColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedOutputColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedProjectScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedProjectScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedProjectScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedTVFScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedTVFScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedTVFScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGroupRowsScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedGroupRowsScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGroupRowsScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFunctionArgumentProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFunctionArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFunctionArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedStatementProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedStatementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedStatementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedStatementProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedStatementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedStatementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExplainStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedExplainStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExplainStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedQueryStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedQueryStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedQueryStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateDatabaseStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateDatabaseStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateDatabaseStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedCreateStatementProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedCreateStatementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedCreateStatementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateStatementProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateStatementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateStatementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedIndexItemProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedIndexItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedIndexItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUnnestItemProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedUnnestItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUnnestItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateIndexStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateIndexStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateIndexStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateSchemaStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateSchemaStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateSchemaStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedCreateTableStmtBaseProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedCreateTableStmtBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedCreateTableStmtBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateTableStmtBaseProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateTableStmtBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateTableStmtBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateTableStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateTableAsSelectStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateTableAsSelectStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateTableAsSelectStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateModelStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateModelStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateModelStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedCreateViewBaseProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedCreateViewBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedCreateViewBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateViewBaseProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateViewBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateViewBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateViewStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWithPartitionColumnsProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedWithPartitionColumnsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWithPartitionColumnsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateSnapshotTableStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateSnapshotTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateSnapshotTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateExternalTableStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateExternalTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateExternalTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExportModelStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedExportModelStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExportModelStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExportDataStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedExportDataStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExportDataStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDefineTableStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDefineTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDefineTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDescribeStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDescribeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDescribeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedShowStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedShowStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedShowStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedBeginStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedBeginStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedBeginStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetTransactionStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSetTransactionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetTransactionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCommitStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCommitStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCommitStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRollbackStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRollbackStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRollbackStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedStartBatchStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedStartBatchStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedStartBatchStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRunBatchStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRunBatchStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRunBatchStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAbortBatchStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAbortBatchStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAbortBatchStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropMaterializedViewStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropMaterializedViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropMaterializedViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropSnapshotTableStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropSnapshotTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropSnapshotTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRecursiveRefScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRecursiveRefScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRecursiveRefScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRecursiveScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRecursiveScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRecursiveScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWithScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedWithScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWithScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWithEntryProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedWithEntryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWithEntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedOptionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedOptionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedOptionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWindowPartitioningProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedWindowPartitioningProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWindowPartitioningProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWindowOrderingProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedWindowOrderingProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWindowOrderingProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWindowFrameProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedWindowFrameProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWindowFrameProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnalyticFunctionGroupProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAnalyticFunctionGroupProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnalyticFunctionGroupProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWindowFrameExprProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedWindowFrameExprProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWindowFrameExprProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDMLValueProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDMLValueProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDMLValueProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDMLDefaultProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDMLDefaultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDMLDefaultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAssertStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAssertStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAssertStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAssertRowsModifiedProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAssertRowsModifiedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAssertRowsModifiedProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedInsertRowProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedInsertRowProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedInsertRowProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedInsertStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedInsertStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedInsertStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDeleteStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDeleteStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDeleteStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUpdateItemProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedUpdateItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUpdateItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUpdateArrayItemProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedUpdateArrayItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUpdateArrayItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUpdateStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedUpdateStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUpdateStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMergeWhenProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedMergeWhenProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMergeWhenProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMergeStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedMergeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMergeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedTruncateStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedTruncateStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedTruncateStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedObjectUnitProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedObjectUnitProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedObjectUnitProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedPrivilegeProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedPrivilegeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedPrivilegeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedGrantOrRevokeStmtProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedGrantOrRevokeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedGrantOrRevokeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGrantOrRevokeStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedGrantOrRevokeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGrantOrRevokeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGrantStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedGrantStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGrantStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRevokeStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRevokeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRevokeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedAlterObjectStmtProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedAlterObjectStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedAlterObjectStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterObjectStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterObjectStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterObjectStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterDatabaseStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterDatabaseStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterDatabaseStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterMaterializedViewStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterMaterializedViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterMaterializedViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterSchemaStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterSchemaStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterSchemaStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterModelStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterModelStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterModelStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterTableStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterViewStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedAlterActionProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedAlterActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedAlterActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedAlterColumnActionProto*
Arena::CreateMaybeMessage< ::zetasql::AnyResolvedAlterColumnActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedAlterColumnActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterColumnActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterColumnActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterColumnActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetOptionsActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSetOptionsActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetOptionsActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterSubEntityActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterSubEntityActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterSubEntityActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAddSubEntityActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAddSubEntityActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAddSubEntityActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropSubEntityActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropSubEntityActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropSubEntityActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAddColumnActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAddColumnActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAddColumnActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAddConstraintActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAddConstraintActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAddConstraintActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropConstraintActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropConstraintActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropConstraintActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropPrimaryKeyActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropPrimaryKeyActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropPrimaryKeyActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterColumnOptionsActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterColumnOptionsActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterColumnOptionsActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterColumnDropNotNullActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterColumnDropNotNullActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterColumnDropNotNullActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterColumnSetDataTypeActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterColumnSetDataTypeActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterColumnSetDataTypeActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterColumnSetDefaultActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterColumnSetDefaultActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterColumnSetDefaultActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterColumnDropDefaultActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterColumnDropDefaultActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterColumnDropDefaultActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropColumnActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropColumnActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropColumnActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRenameColumnActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRenameColumnActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRenameColumnActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetAsActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSetAsActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetAsActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetCollateClauseProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedSetCollateClauseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetCollateClauseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterTableSetOptionsStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterTableSetOptionsStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterTableSetOptionsStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRenameStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRenameStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRenameStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreatePrivilegeRestrictionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateRowAccessPolicyStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateRowAccessPolicyStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateRowAccessPolicyStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropPrivilegeRestrictionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropRowAccessPolicyStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropRowAccessPolicyStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropRowAccessPolicyStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropSearchIndexStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropSearchIndexStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropSearchIndexStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGrantToActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedGrantToActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGrantToActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRestrictToActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRestrictToActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRestrictToActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAddToRestricteeListActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAddToRestricteeListActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAddToRestricteeListActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRemoveFromRestricteeListActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRemoveFromRestricteeListActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRemoveFromRestricteeListActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFilterUsingActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFilterUsingActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFilterUsingActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRevokeFromActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRevokeFromActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRevokeFromActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRenameToActionProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRenameToActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRenameToActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterPrivilegeRestrictionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterRowAccessPolicyStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterRowAccessPolicyStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterRowAccessPolicyStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateConstantStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateConstantStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateConstantStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateFunctionStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateFunctionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateFunctionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArgumentDefProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedArgumentDefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArgumentDefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArgumentRefProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedArgumentRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArgumentRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateTableFunctionStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateTableFunctionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateTableFunctionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRelationArgumentScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedRelationArgumentScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRelationArgumentScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArgumentListProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedArgumentListProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArgumentListProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFunctionSignatureHolderProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedFunctionSignatureHolderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFunctionSignatureHolderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropFunctionStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropFunctionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropFunctionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropTableFunctionStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedDropTableFunctionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropTableFunctionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCallStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCallStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCallStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedImportStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedImportStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedImportStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedModuleStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedModuleStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedModuleStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAggregateHavingModifierProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAggregateHavingModifierProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAggregateHavingModifierProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateMaterializedViewStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateMaterializedViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateMaterializedViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateProcedureStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateProcedureStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateProcedureStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExecuteImmediateArgumentProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedExecuteImmediateArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExecuteImmediateArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExecuteImmediateStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedExecuteImmediateStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExecuteImmediateStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAssignmentStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAssignmentStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAssignmentStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateEntityStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateEntityStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateEntityStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterEntityStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterEntityStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterEntityStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedPivotColumnProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedPivotColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedPivotColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedPivotScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedPivotScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedPivotScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedReturningClauseProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedReturningClauseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedReturningClauseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUnpivotArgProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedUnpivotArgProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUnpivotArgProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUnpivotScanProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedUnpivotScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUnpivotScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCloneDataStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedCloneDataStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCloneDataStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedTableAndColumnInfoProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedTableAndColumnInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedTableAndColumnInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnalyzeStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAnalyzeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnalyzeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAuxLoadDataStmtProto*
Arena::CreateMaybeMessage< ::zetasql::ResolvedAuxLoadDataStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAuxLoadDataStmtProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
