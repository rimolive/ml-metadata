// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/simple_table.proto

#include "zetasql/public/simple_table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR SimpleAnonymizationInfoProto::SimpleAnonymizationInfoProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_column_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleAnonymizationInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleAnonymizationInfoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleAnonymizationInfoProtoDefaultTypeInternal() {}
  union {
    SimpleAnonymizationInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleAnonymizationInfoProtoDefaultTypeInternal _SimpleAnonymizationInfoProto_default_instance_;
PROTOBUF_CONSTEXPR SimpleTableProto::SimpleTableProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_)*/{}
  , /*decltype(_impl_.primary_key_column_index_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_in_catalog_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.anonymization_info_)*/nullptr
  , /*decltype(_impl_.serialization_id_)*/int64_t{0}
  , /*decltype(_impl_.is_value_table_)*/false
  , /*decltype(_impl_.allow_anonymous_column_name_)*/false
  , /*decltype(_impl_.allow_duplicate_column_names_)*/false} {}
struct SimpleTableProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleTableProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleTableProtoDefaultTypeInternal() {}
  union {
    SimpleTableProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleTableProtoDefaultTypeInternal _SimpleTableProto_default_instance_;
PROTOBUF_CONSTEXPR SimpleColumnProto::SimpleColumnProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.annotation_map_)*/nullptr
  , /*decltype(_impl_.is_pseudo_column_)*/false
  , /*decltype(_impl_.can_update_unwritable_to_default_)*/false
  , /*decltype(_impl_.is_writable_column_)*/true} {}
struct SimpleColumnProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleColumnProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleColumnProtoDefaultTypeInternal() {}
  union {
    SimpleColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleColumnProtoDefaultTypeInternal _SimpleColumnProto_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fpublic_2fsimple_5ftable_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fpublic_2fsimple_5ftable_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2fsimple_5ftable_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2fsimple_5ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleAnonymizationInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleAnonymizationInfoProto, _impl_.userid_column_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.serialization_id_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.primary_key_column_index_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.name_in_catalog_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.allow_anonymous_column_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.allow_duplicate_column_names_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.anonymization_info_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleTableProto, _impl_.full_name_),
  0,
  4,
  5,
  ~0u,
  ~0u,
  1,
  6,
  7,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleColumnProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleColumnProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleColumnProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleColumnProto, _impl_.is_pseudo_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleColumnProto, _impl_.is_writable_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleColumnProto, _impl_.can_update_unwritable_to_default_),
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleColumnProto, _impl_.annotation_map_),
  0,
  1,
  3,
  5,
  4,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::zetasql::SimpleAnonymizationInfoProto)},
  { 7, 23, -1, sizeof(::zetasql::SimpleTableProto)},
  { 33, 45, -1, sizeof(::zetasql::SimpleColumnProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_SimpleAnonymizationInfoProto_default_instance_._instance,
  &::zetasql::_SimpleTableProto_default_instance_._instance,
  &::zetasql::_SimpleColumnProto_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fpublic_2fsimple_5ftable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!zetasql/public/simple_table.proto\022\007zet"
  "asql\032\037zetasql/public/annotation.proto\032\031z"
  "etasql/public/type.proto\":\n\034SimpleAnonym"
  "izationInfoProto\022\032\n\022userid_column_name\030\001"
  " \003(\t\"\332\002\n\020SimpleTableProto\022\014\n\004name\030\001 \001(\t\022"
  "\030\n\020serialization_id\030\002 \001(\003\022\026\n\016is_value_ta"
  "ble\030\003 \001(\010\022*\n\006column\030\004 \003(\0132\032.zetasql.Simp"
  "leColumnProto\022 \n\030primary_key_column_inde"
  "x\030\t \003(\005\022\027\n\017name_in_catalog\030\005 \001(\t\022#\n\033allo"
  "w_anonymous_column_name\030\006 \001(\010\022$\n\034allow_d"
  "uplicate_column_names\030\007 \001(\010\022A\n\022anonymiza"
  "tion_info\030\010 \001(\0132%.zetasql.SimpleAnonymiz"
  "ationInfoProto\022\021\n\tfull_name\030\n \001(\t\"\336\001\n\021Si"
  "mpleColumnProto\022\014\n\004name\030\001 \001(\t\022 \n\004type\030\002 "
  "\001(\0132\022.zetasql.TypeProto\022\030\n\020is_pseudo_col"
  "umn\030\003 \001(\010\022 \n\022is_writable_column\030\004 \001(\010:\004t"
  "rue\022(\n can_update_unwritable_to_default\030"
  "\006 \001(\010\0223\n\016annotation_map\030\005 \001(\0132\033.zetasql."
  "AnnotationMapProtoB\'\n\022com.google.zetasql"
  "B\021SimpleTableProtos"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_deps[2] = {
  &::descriptor_table_zetasql_2fpublic_2fannotation_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_2eproto,
};
static ::_pbi::once_flag descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto = {
    false, false, 779, descriptor_table_protodef_zetasql_2fpublic_2fsimple_5ftable_2eproto,
    "zetasql/public/simple_table.proto",
    &descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_once, descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_zetasql_2fpublic_2fsimple_5ftable_2eproto::offsets,
    file_level_metadata_zetasql_2fpublic_2fsimple_5ftable_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2fsimple_5ftable_2eproto,
    file_level_service_descriptors_zetasql_2fpublic_2fsimple_5ftable_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2fsimple_5ftable_2eproto(&descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto);
namespace zetasql {

// ===================================================================

class SimpleAnonymizationInfoProto::_Internal {
 public:
};

SimpleAnonymizationInfoProto::SimpleAnonymizationInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.SimpleAnonymizationInfoProto)
}
SimpleAnonymizationInfoProto::SimpleAnonymizationInfoProto(const SimpleAnonymizationInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleAnonymizationInfoProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_column_name_){from._impl_.userid_column_name_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.SimpleAnonymizationInfoProto)
}

inline void SimpleAnonymizationInfoProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_column_name_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SimpleAnonymizationInfoProto::~SimpleAnonymizationInfoProto() {
  // @@protoc_insertion_point(destructor:zetasql.SimpleAnonymizationInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleAnonymizationInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_column_name_.~RepeatedPtrField();
}

void SimpleAnonymizationInfoProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleAnonymizationInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.SimpleAnonymizationInfoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_column_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleAnonymizationInfoProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string userid_column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_userid_column_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "zetasql.SimpleAnonymizationInfoProto.userid_column_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleAnonymizationInfoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.SimpleAnonymizationInfoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string userid_column_name = 1;
  for (int i = 0, n = this->_internal_userid_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_userid_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.SimpleAnonymizationInfoProto.userid_column_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.SimpleAnonymizationInfoProto)
  return target;
}

size_t SimpleAnonymizationInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.SimpleAnonymizationInfoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string userid_column_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.userid_column_name_.size());
  for (int i = 0, n = _impl_.userid_column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.userid_column_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleAnonymizationInfoProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleAnonymizationInfoProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleAnonymizationInfoProto::GetClassData() const { return &_class_data_; }


void SimpleAnonymizationInfoProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleAnonymizationInfoProto*>(&to_msg);
  auto& from = static_cast<const SimpleAnonymizationInfoProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.SimpleAnonymizationInfoProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.userid_column_name_.MergeFrom(from._impl_.userid_column_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleAnonymizationInfoProto::CopyFrom(const SimpleAnonymizationInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.SimpleAnonymizationInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleAnonymizationInfoProto::IsInitialized() const {
  return true;
}

void SimpleAnonymizationInfoProto::InternalSwap(SimpleAnonymizationInfoProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.userid_column_name_.InternalSwap(&other->_impl_.userid_column_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleAnonymizationInfoProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_getter, &descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2fsimple_5ftable_2eproto[0]);
}

// ===================================================================

class SimpleTableProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleTableProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialization_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name_in_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allow_anonymous_column_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_allow_duplicate_column_names(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::zetasql::SimpleAnonymizationInfoProto& anonymization_info(const SimpleTableProto* msg);
  static void set_has_anonymization_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::SimpleAnonymizationInfoProto&
SimpleTableProto::_Internal::anonymization_info(const SimpleTableProto* msg) {
  return *msg->_impl_.anonymization_info_;
}
SimpleTableProto::SimpleTableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.SimpleTableProto)
}
SimpleTableProto::SimpleTableProto(const SimpleTableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleTableProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){from._impl_.column_}
    , decltype(_impl_.primary_key_column_index_){from._impl_.primary_key_column_index_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_in_catalog_){}
    , decltype(_impl_.full_name_){}
    , decltype(_impl_.anonymization_info_){nullptr}
    , decltype(_impl_.serialization_id_){}
    , decltype(_impl_.is_value_table_){}
    , decltype(_impl_.allow_anonymous_column_name_){}
    , decltype(_impl_.allow_duplicate_column_names_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_in_catalog_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_in_catalog_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_in_catalog()) {
    _this->_impl_.name_in_catalog_.Set(from._internal_name_in_catalog(), 
      _this->GetArenaForAllocation());
  }
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_name()) {
    _this->_impl_.full_name_.Set(from._internal_full_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_anonymization_info()) {
    _this->_impl_.anonymization_info_ = new ::zetasql::SimpleAnonymizationInfoProto(*from._impl_.anonymization_info_);
  }
  ::memcpy(&_impl_.serialization_id_, &from._impl_.serialization_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allow_duplicate_column_names_) -
    reinterpret_cast<char*>(&_impl_.serialization_id_)) + sizeof(_impl_.allow_duplicate_column_names_));
  // @@protoc_insertion_point(copy_constructor:zetasql.SimpleTableProto)
}

inline void SimpleTableProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){arena}
    , decltype(_impl_.primary_key_column_index_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.name_in_catalog_){}
    , decltype(_impl_.full_name_){}
    , decltype(_impl_.anonymization_info_){nullptr}
    , decltype(_impl_.serialization_id_){int64_t{0}}
    , decltype(_impl_.is_value_table_){false}
    , decltype(_impl_.allow_anonymous_column_name_){false}
    , decltype(_impl_.allow_duplicate_column_names_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_in_catalog_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_in_catalog_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleTableProto::~SimpleTableProto() {
  // @@protoc_insertion_point(destructor:zetasql.SimpleTableProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleTableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_.~RepeatedPtrField();
  _impl_.primary_key_column_index_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.name_in_catalog_.Destroy();
  _impl_.full_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.anonymization_info_;
}

void SimpleTableProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleTableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.SimpleTableProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_.Clear();
  _impl_.primary_key_column_index_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_in_catalog_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.full_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.anonymization_info_ != nullptr);
      _impl_.anonymization_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.serialization_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.allow_duplicate_column_names_) -
        reinterpret_cast<char*>(&_impl_.serialization_id_)) + sizeof(_impl_.allow_duplicate_column_names_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleTableProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.SimpleTableProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 serialization_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_serialization_id(&has_bits);
          _impl_.serialization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_value_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_value_table(&has_bits);
          _impl_.is_value_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.SimpleColumnProto column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name_in_catalog = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name_in_catalog();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.SimpleTableProto.name_in_catalog");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_anonymous_column_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_allow_anonymous_column_name(&has_bits);
          _impl_.allow_anonymous_column_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_duplicate_column_names = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_allow_duplicate_column_names(&has_bits);
          _impl_.allow_duplicate_column_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_anonymization_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 primary_key_column_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_primary_key_column_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_primary_key_column_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string full_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_full_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.SimpleTableProto.full_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleTableProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.SimpleTableProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.SimpleTableProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int64 serialization_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_serialization_id(), target);
  }

  // optional bool is_value_table = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_value_table(), target);
  }

  // repeated .zetasql.SimpleColumnProto column = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_size()); i < n; i++) {
    const auto& repfield = this->_internal_column(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string name_in_catalog = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_in_catalog().data(), static_cast<int>(this->_internal_name_in_catalog().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.SimpleTableProto.name_in_catalog");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name_in_catalog(), target);
  }

  // optional bool allow_anonymous_column_name = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_allow_anonymous_column_name(), target);
  }

  // optional bool allow_duplicate_column_names = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_allow_duplicate_column_names(), target);
  }

  // optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::anonymization_info(this),
        _Internal::anonymization_info(this).GetCachedSize(), target, stream);
  }

  // repeated int32 primary_key_column_index = 9;
  for (int i = 0, n = this->_internal_primary_key_column_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_primary_key_column_index(i), target);
  }

  // optional string full_name = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.SimpleTableProto.full_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_full_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.SimpleTableProto)
  return target;
}

size_t SimpleTableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.SimpleTableProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.SimpleColumnProto column = 4;
  total_size += 1UL * this->_internal_column_size();
  for (const auto& msg : this->_impl_.column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 primary_key_column_index = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.primary_key_column_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_primary_key_column_index_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_in_catalog = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_in_catalog());
    }

    // optional string full_name = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

    // optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.anonymization_info_);
    }

    // optional int64 serialization_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_serialization_id());
    }

    // optional bool is_value_table = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool allow_anonymous_column_name = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool allow_duplicate_column_names = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleTableProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleTableProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleTableProto::GetClassData() const { return &_class_data_; }


void SimpleTableProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleTableProto*>(&to_msg);
  auto& from = static_cast<const SimpleTableProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.SimpleTableProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_.MergeFrom(from._impl_.column_);
  _this->_impl_.primary_key_column_index_.MergeFrom(from._impl_.primary_key_column_index_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name_in_catalog(from._internal_name_in_catalog());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_full_name(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_anonymization_info()->::zetasql::SimpleAnonymizationInfoProto::MergeFrom(
          from._internal_anonymization_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.serialization_id_ = from._impl_.serialization_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_value_table_ = from._impl_.is_value_table_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.allow_anonymous_column_name_ = from._impl_.allow_anonymous_column_name_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.allow_duplicate_column_names_ = from._impl_.allow_duplicate_column_names_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleTableProto::CopyFrom(const SimpleTableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.SimpleTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleTableProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_))
    return false;
  return true;
}

void SimpleTableProto::InternalSwap(SimpleTableProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.column_.InternalSwap(&other->_impl_.column_);
  _impl_.primary_key_column_index_.InternalSwap(&other->_impl_.primary_key_column_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_in_catalog_, lhs_arena,
      &other->_impl_.name_in_catalog_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_name_, lhs_arena,
      &other->_impl_.full_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleTableProto, _impl_.allow_duplicate_column_names_)
      + sizeof(SimpleTableProto::_impl_.allow_duplicate_column_names_)
      - PROTOBUF_FIELD_OFFSET(SimpleTableProto, _impl_.anonymization_info_)>(
          reinterpret_cast<char*>(&_impl_.anonymization_info_),
          reinterpret_cast<char*>(&other->_impl_.anonymization_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleTableProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_getter, &descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2fsimple_5ftable_2eproto[1]);
}

// ===================================================================

class SimpleColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleColumnProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const SimpleColumnProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_pseudo_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_writable_column(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_update_unwritable_to_default(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnnotationMapProto& annotation_map(const SimpleColumnProto* msg);
  static void set_has_annotation_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::TypeProto&
SimpleColumnProto::_Internal::type(const SimpleColumnProto* msg) {
  return *msg->_impl_.type_;
}
const ::zetasql::AnnotationMapProto&
SimpleColumnProto::_Internal::annotation_map(const SimpleColumnProto* msg) {
  return *msg->_impl_.annotation_map_;
}
void SimpleColumnProto::clear_type() {
  if (_impl_.type_ != nullptr) _impl_.type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SimpleColumnProto::clear_annotation_map() {
  if (_impl_.annotation_map_ != nullptr) _impl_.annotation_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SimpleColumnProto::SimpleColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.SimpleColumnProto)
}
SimpleColumnProto::SimpleColumnProto(const SimpleColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleColumnProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.annotation_map_){nullptr}
    , decltype(_impl_.is_pseudo_column_){}
    , decltype(_impl_.can_update_unwritable_to_default_){}
    , decltype(_impl_.is_writable_column_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::zetasql::TypeProto(*from._impl_.type_);
  }
  if (from._internal_has_annotation_map()) {
    _this->_impl_.annotation_map_ = new ::zetasql::AnnotationMapProto(*from._impl_.annotation_map_);
  }
  ::memcpy(&_impl_.is_pseudo_column_, &from._impl_.is_pseudo_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_writable_column_) -
    reinterpret_cast<char*>(&_impl_.is_pseudo_column_)) + sizeof(_impl_.is_writable_column_));
  // @@protoc_insertion_point(copy_constructor:zetasql.SimpleColumnProto)
}

inline void SimpleColumnProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.annotation_map_){nullptr}
    , decltype(_impl_.is_pseudo_column_){false}
    , decltype(_impl_.can_update_unwritable_to_default_){false}
    , decltype(_impl_.is_writable_column_){true}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleColumnProto::~SimpleColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.SimpleColumnProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_;
  if (this != internal_default_instance()) delete _impl_.annotation_map_;
}

void SimpleColumnProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleColumnProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.SimpleColumnProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.type_ != nullptr);
      _impl_.type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.annotation_map_ != nullptr);
      _impl_.annotation_map_->Clear();
    }
  }
  ::memset(&_impl_.is_pseudo_column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.can_update_unwritable_to_default_) -
      reinterpret_cast<char*>(&_impl_.is_pseudo_column_)) + sizeof(_impl_.can_update_unwritable_to_default_));
  _impl_.is_writable_column_ = true;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleColumnProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.SimpleColumnProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_pseudo_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_pseudo_column(&has_bits);
          _impl_.is_pseudo_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_writable_column = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_writable_column(&has_bits);
          _impl_.is_writable_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.AnnotationMapProto annotation_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_update_unwritable_to_default = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_can_update_unwritable_to_default(&has_bits);
          _impl_.can_update_unwritable_to_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleColumnProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.SimpleColumnProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.SimpleColumnProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // optional bool is_pseudo_column = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_pseudo_column(), target);
  }

  // optional bool is_writable_column = 4 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_writable_column(), target);
  }

  // optional .zetasql.AnnotationMapProto annotation_map = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::annotation_map(this),
        _Internal::annotation_map(this).GetCachedSize(), target, stream);
  }

  // optional bool can_update_unwritable_to_default = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_can_update_unwritable_to_default(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.SimpleColumnProto)
  return target;
}

size_t SimpleColumnProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.SimpleColumnProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .zetasql.TypeProto type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_);
    }

    // optional .zetasql.AnnotationMapProto annotation_map = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.annotation_map_);
    }

    // optional bool is_pseudo_column = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool can_update_unwritable_to_default = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_writable_column = 4 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleColumnProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleColumnProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleColumnProto::GetClassData() const { return &_class_data_; }


void SimpleColumnProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleColumnProto*>(&to_msg);
  auto& from = static_cast<const SimpleColumnProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.SimpleColumnProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_type()->::zetasql::TypeProto::MergeFrom(
          from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_annotation_map()->::zetasql::AnnotationMapProto::MergeFrom(
          from._internal_annotation_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_pseudo_column_ = from._impl_.is_pseudo_column_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.can_update_unwritable_to_default_ = from._impl_.can_update_unwritable_to_default_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_writable_column_ = from._impl_.is_writable_column_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleColumnProto::CopyFrom(const SimpleColumnProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.SimpleColumnProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleColumnProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!_impl_.type_->IsInitialized()) return false;
  }
  return true;
}

void SimpleColumnProto::InternalSwap(SimpleColumnProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleColumnProto, _impl_.can_update_unwritable_to_default_)
      + sizeof(SimpleColumnProto::_impl_.can_update_unwritable_to_default_)
      - PROTOBUF_FIELD_OFFSET(SimpleColumnProto, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
  swap(_impl_.is_writable_column_, other->_impl_.is_writable_column_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleColumnProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_getter, &descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2fsimple_5ftable_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::SimpleAnonymizationInfoProto*
Arena::CreateMaybeMessage< ::zetasql::SimpleAnonymizationInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::SimpleAnonymizationInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::SimpleTableProto*
Arena::CreateMaybeMessage< ::zetasql::SimpleTableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::SimpleTableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::SimpleColumnProto*
Arena::CreateMaybeMessage< ::zetasql::SimpleColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::SimpleColumnProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
