// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/parse_location_range.proto

#include "zetasql/public/parse_location_range.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR ParseLocationRangeProto::ParseLocationRangeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_.end_)*/0} {}
struct ParseLocationRangeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParseLocationRangeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParseLocationRangeProtoDefaultTypeInternal() {}
  union {
    ParseLocationRangeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParseLocationRangeProtoDefaultTypeInternal _ParseLocationRangeProto_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::ParseLocationRangeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ParseLocationRangeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ParseLocationRangeProto, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ParseLocationRangeProto, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ParseLocationRangeProto, _impl_.end_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::zetasql::ParseLocationRangeProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_ParseLocationRangeProto_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)zetasql/public/parse_location_range.pr"
  "oto\022\007zetasql\"G\n\027ParseLocationRangeProto\022"
  "\020\n\010filename\030\001 \001(\t\022\r\n\005start\030\002 \001(\005\022\013\n\003end\030"
  "\003 \001(\005B2\n\022com.google.zetasqlB\032ZetaSqlPars"
  "eLocationProtosP\001"
  ;
static ::_pbi::once_flag descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto = {
    false, false, 177, descriptor_table_protodef_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto,
    "zetasql/public/parse_location_range.proto",
    &descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto::offsets,
    file_level_metadata_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto,
    file_level_service_descriptors_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto(&descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto);
namespace zetasql {

// ===================================================================

class ParseLocationRangeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ParseLocationRangeProto>()._impl_._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ParseLocationRangeProto::ParseLocationRangeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ParseLocationRangeProto)
}
ParseLocationRangeProto::ParseLocationRangeProto(const ParseLocationRangeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParseLocationRangeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.start_){}
    , decltype(_impl_.end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ParseLocationRangeProto)
}

inline void ParseLocationRangeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.start_){0}
    , decltype(_impl_.end_){0}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParseLocationRangeProto::~ParseLocationRangeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ParseLocationRangeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParseLocationRangeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
}

void ParseLocationRangeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParseLocationRangeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ParseLocationRangeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.filename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_) -
        reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParseLocationRangeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ParseLocationRangeProto.filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start(&has_bits);
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end(&has_bits);
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParseLocationRangeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ParseLocationRangeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ParseLocationRangeProto.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional int32 start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_start(), target);
  }

  // optional int32 end = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ParseLocationRangeProto)
  return target;
}

size_t ParseLocationRangeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ParseLocationRangeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional int32 start = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
    }

    // optional int32 end = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParseLocationRangeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParseLocationRangeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParseLocationRangeProto::GetClassData() const { return &_class_data_; }


void ParseLocationRangeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParseLocationRangeProto*>(&to_msg);
  auto& from = static_cast<const ParseLocationRangeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ParseLocationRangeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_ = from._impl_.start_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_ = from._impl_.end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParseLocationRangeProto::CopyFrom(const ParseLocationRangeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ParseLocationRangeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParseLocationRangeProto::IsInitialized() const {
  return true;
}

void ParseLocationRangeProto::InternalSwap(ParseLocationRangeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParseLocationRangeProto, _impl_.end_)
      + sizeof(ParseLocationRangeProto::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(ParseLocationRangeProto, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParseLocationRangeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto_getter, &descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::ParseLocationRangeProto*
Arena::CreateMaybeMessage< ::zetasql::ParseLocationRangeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ParseLocationRangeProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
