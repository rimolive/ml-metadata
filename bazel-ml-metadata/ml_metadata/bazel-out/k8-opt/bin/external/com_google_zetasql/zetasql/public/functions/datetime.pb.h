// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/functions/datetime.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ffunctions_2fdatetime_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ffunctions_2fdatetime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2ffunctions_2fdatetime_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2ffunctions_2fdatetime_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2ffunctions_2fdatetime_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {
namespace functions {

enum DateTimestampPart : int {
  __DateTimePart__switch_must_have_a_default__ = -1,
  YEAR = 1,
  MONTH = 2,
  DAY = 3,
  DAYOFWEEK = 4,
  DAYOFYEAR = 5,
  QUARTER = 6,
  HOUR = 7,
  MINUTE = 8,
  SECOND = 9,
  MILLISECOND = 10,
  MICROSECOND = 11,
  NANOSECOND = 12,
  DATE = 13,
  WEEK = 14,
  DATETIME = 15,
  TIME = 16,
  ISOYEAR = 17,
  ISOWEEK = 18,
  WEEK_MONDAY = 19,
  WEEK_TUESDAY = 20,
  WEEK_WEDNESDAY = 21,
  WEEK_THURSDAY = 22,
  WEEK_FRIDAY = 23,
  WEEK_SATURDAY = 24
};
bool DateTimestampPart_IsValid(int value);
constexpr DateTimestampPart DateTimestampPart_MIN = __DateTimePart__switch_must_have_a_default__;
constexpr DateTimestampPart DateTimestampPart_MAX = WEEK_SATURDAY;
constexpr int DateTimestampPart_ARRAYSIZE = DateTimestampPart_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTimestampPart_descriptor();
template<typename T>
inline const std::string& DateTimestampPart_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DateTimestampPart>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DateTimestampPart_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DateTimestampPart_descriptor(), enum_t_value);
}
inline bool DateTimestampPart_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DateTimestampPart* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DateTimestampPart>(
    DateTimestampPart_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace functions
}  // namespace zetasql

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zetasql::functions::DateTimestampPart> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::functions::DateTimestampPart>() {
  return ::zetasql::functions::DateTimestampPart_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ffunctions_2fdatetime_2eproto
