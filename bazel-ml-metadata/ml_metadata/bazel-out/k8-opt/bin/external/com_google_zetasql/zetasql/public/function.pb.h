// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/function.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ffunction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ffunction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2ffunction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2ffunction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2ffunction_2eproto;
namespace zetasql {
class FunctionEnums;
struct FunctionEnumsDefaultTypeInternal;
extern FunctionEnumsDefaultTypeInternal _FunctionEnums_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::FunctionEnums* Arena::CreateMaybeMessage<::zetasql::FunctionEnums>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

enum FunctionEnums_ArgumentCardinality : int {
  FunctionEnums_ArgumentCardinality_REQUIRED = 0,
  FunctionEnums_ArgumentCardinality_REPEATED = 1,
  FunctionEnums_ArgumentCardinality_OPTIONAL = 2
};
bool FunctionEnums_ArgumentCardinality_IsValid(int value);
constexpr FunctionEnums_ArgumentCardinality FunctionEnums_ArgumentCardinality_ArgumentCardinality_MIN = FunctionEnums_ArgumentCardinality_REQUIRED;
constexpr FunctionEnums_ArgumentCardinality FunctionEnums_ArgumentCardinality_ArgumentCardinality_MAX = FunctionEnums_ArgumentCardinality_OPTIONAL;
constexpr int FunctionEnums_ArgumentCardinality_ArgumentCardinality_ARRAYSIZE = FunctionEnums_ArgumentCardinality_ArgumentCardinality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_ArgumentCardinality_descriptor();
template<typename T>
inline const std::string& FunctionEnums_ArgumentCardinality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FunctionEnums_ArgumentCardinality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FunctionEnums_ArgumentCardinality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FunctionEnums_ArgumentCardinality_descriptor(), enum_t_value);
}
inline bool FunctionEnums_ArgumentCardinality_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FunctionEnums_ArgumentCardinality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FunctionEnums_ArgumentCardinality>(
    FunctionEnums_ArgumentCardinality_descriptor(), name, value);
}
enum FunctionEnums_ProcedureArgumentMode : int {
  FunctionEnums_ProcedureArgumentMode_NOT_SET = 0,
  FunctionEnums_ProcedureArgumentMode_IN = 1,
  FunctionEnums_ProcedureArgumentMode_OUT = 2,
  FunctionEnums_ProcedureArgumentMode_INOUT = 3
};
bool FunctionEnums_ProcedureArgumentMode_IsValid(int value);
constexpr FunctionEnums_ProcedureArgumentMode FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MIN = FunctionEnums_ProcedureArgumentMode_NOT_SET;
constexpr FunctionEnums_ProcedureArgumentMode FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MAX = FunctionEnums_ProcedureArgumentMode_INOUT;
constexpr int FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_ARRAYSIZE = FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_ProcedureArgumentMode_descriptor();
template<typename T>
inline const std::string& FunctionEnums_ProcedureArgumentMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FunctionEnums_ProcedureArgumentMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FunctionEnums_ProcedureArgumentMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FunctionEnums_ProcedureArgumentMode_descriptor(), enum_t_value);
}
inline bool FunctionEnums_ProcedureArgumentMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FunctionEnums_ProcedureArgumentMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FunctionEnums_ProcedureArgumentMode>(
    FunctionEnums_ProcedureArgumentMode_descriptor(), name, value);
}
enum FunctionEnums_WindowOrderSupport : int {
  FunctionEnums_WindowOrderSupport_ORDER_UNSUPPORTED = 0,
  FunctionEnums_WindowOrderSupport_ORDER_OPTIONAL = 1,
  FunctionEnums_WindowOrderSupport_ORDER_REQUIRED = 2
};
bool FunctionEnums_WindowOrderSupport_IsValid(int value);
constexpr FunctionEnums_WindowOrderSupport FunctionEnums_WindowOrderSupport_WindowOrderSupport_MIN = FunctionEnums_WindowOrderSupport_ORDER_UNSUPPORTED;
constexpr FunctionEnums_WindowOrderSupport FunctionEnums_WindowOrderSupport_WindowOrderSupport_MAX = FunctionEnums_WindowOrderSupport_ORDER_REQUIRED;
constexpr int FunctionEnums_WindowOrderSupport_WindowOrderSupport_ARRAYSIZE = FunctionEnums_WindowOrderSupport_WindowOrderSupport_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_WindowOrderSupport_descriptor();
template<typename T>
inline const std::string& FunctionEnums_WindowOrderSupport_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FunctionEnums_WindowOrderSupport>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FunctionEnums_WindowOrderSupport_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FunctionEnums_WindowOrderSupport_descriptor(), enum_t_value);
}
inline bool FunctionEnums_WindowOrderSupport_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FunctionEnums_WindowOrderSupport* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FunctionEnums_WindowOrderSupport>(
    FunctionEnums_WindowOrderSupport_descriptor(), name, value);
}
enum FunctionEnums_Mode : int {
  FunctionEnums_Mode_SCALAR = 1,
  FunctionEnums_Mode_AGGREGATE = 2,
  FunctionEnums_Mode_ANALYTIC = 3
};
bool FunctionEnums_Mode_IsValid(int value);
constexpr FunctionEnums_Mode FunctionEnums_Mode_Mode_MIN = FunctionEnums_Mode_SCALAR;
constexpr FunctionEnums_Mode FunctionEnums_Mode_Mode_MAX = FunctionEnums_Mode_ANALYTIC;
constexpr int FunctionEnums_Mode_Mode_ARRAYSIZE = FunctionEnums_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_Mode_descriptor();
template<typename T>
inline const std::string& FunctionEnums_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FunctionEnums_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FunctionEnums_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FunctionEnums_Mode_descriptor(), enum_t_value);
}
inline bool FunctionEnums_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FunctionEnums_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FunctionEnums_Mode>(
    FunctionEnums_Mode_descriptor(), name, value);
}
enum FunctionEnums_Volatility : int {
  FunctionEnums_Volatility_IMMUTABLE = 0,
  FunctionEnums_Volatility_STABLE = 1,
  FunctionEnums_Volatility_VOLATILE = 2
};
bool FunctionEnums_Volatility_IsValid(int value);
constexpr FunctionEnums_Volatility FunctionEnums_Volatility_Volatility_MIN = FunctionEnums_Volatility_IMMUTABLE;
constexpr FunctionEnums_Volatility FunctionEnums_Volatility_Volatility_MAX = FunctionEnums_Volatility_VOLATILE;
constexpr int FunctionEnums_Volatility_Volatility_ARRAYSIZE = FunctionEnums_Volatility_Volatility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_Volatility_descriptor();
template<typename T>
inline const std::string& FunctionEnums_Volatility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FunctionEnums_Volatility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FunctionEnums_Volatility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FunctionEnums_Volatility_descriptor(), enum_t_value);
}
inline bool FunctionEnums_Volatility_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FunctionEnums_Volatility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FunctionEnums_Volatility>(
    FunctionEnums_Volatility_descriptor(), name, value);
}
enum FunctionEnums_TableValuedFunctionType : int {
  FunctionEnums_TableValuedFunctionType_INVALID = 0,
  FunctionEnums_TableValuedFunctionType_FIXED_OUTPUT_SCHEMA_TVF = 1,
  FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_TVF = 2,
  FunctionEnums_TableValuedFunctionType_TEMPLATED_SQL_TVF = 3,
  FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_WITH_APPENDED_COLUMNS = 7
};
bool FunctionEnums_TableValuedFunctionType_IsValid(int value);
constexpr FunctionEnums_TableValuedFunctionType FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MIN = FunctionEnums_TableValuedFunctionType_INVALID;
constexpr FunctionEnums_TableValuedFunctionType FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MAX = FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_WITH_APPENDED_COLUMNS;
constexpr int FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_ARRAYSIZE = FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_TableValuedFunctionType_descriptor();
template<typename T>
inline const std::string& FunctionEnums_TableValuedFunctionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FunctionEnums_TableValuedFunctionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FunctionEnums_TableValuedFunctionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FunctionEnums_TableValuedFunctionType_descriptor(), enum_t_value);
}
inline bool FunctionEnums_TableValuedFunctionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FunctionEnums_TableValuedFunctionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FunctionEnums_TableValuedFunctionType>(
    FunctionEnums_TableValuedFunctionType_descriptor(), name, value);
}
enum FunctionEnums_ArgumentCollationMode : int {
  FunctionEnums_ArgumentCollationMode_AFFECTS_NONE = 0,
  FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION = 1,
  FunctionEnums_ArgumentCollationMode_AFFECTS_PROPAGATION = 2,
  FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION_AND_PROPAGATION = 3
};
bool FunctionEnums_ArgumentCollationMode_IsValid(int value);
constexpr FunctionEnums_ArgumentCollationMode FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MIN = FunctionEnums_ArgumentCollationMode_AFFECTS_NONE;
constexpr FunctionEnums_ArgumentCollationMode FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MAX = FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION_AND_PROPAGATION;
constexpr int FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_ARRAYSIZE = FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_ArgumentCollationMode_descriptor();
template<typename T>
inline const std::string& FunctionEnums_ArgumentCollationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FunctionEnums_ArgumentCollationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FunctionEnums_ArgumentCollationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FunctionEnums_ArgumentCollationMode_descriptor(), enum_t_value);
}
inline bool FunctionEnums_ArgumentCollationMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FunctionEnums_ArgumentCollationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FunctionEnums_ArgumentCollationMode>(
    FunctionEnums_ArgumentCollationMode_descriptor(), name, value);
}
enum SignatureArgumentKind : int {
  ARG_TYPE_FIXED = 0,
  ARG_TYPE_ANY_1 = 1,
  ARG_TYPE_ANY_2 = 2,
  ARG_ARRAY_TYPE_ANY_1 = 3,
  ARG_ARRAY_TYPE_ANY_2 = 4,
  ARG_PROTO_MAP_ANY = 14,
  ARG_PROTO_MAP_KEY_ANY = 15,
  ARG_PROTO_MAP_VALUE_ANY = 16,
  ARG_PROTO_ANY = 5,
  ARG_STRUCT_ANY = 6,
  ARG_ENUM_ANY = 7,
  ARG_TYPE_ARBITRARY = 8,
  ARG_TYPE_RELATION = 9,
  ARG_TYPE_VOID = 10,
  ARG_TYPE_MODEL = 11,
  ARG_TYPE_CONNECTION = 12,
  ARG_TYPE_DESCRIPTOR = 13,
  ARG_TYPE_LAMBDA = 17,
  __SignatureArgumentKind__switch_must_have_a_default__ = -1
};
bool SignatureArgumentKind_IsValid(int value);
constexpr SignatureArgumentKind SignatureArgumentKind_MIN = __SignatureArgumentKind__switch_must_have_a_default__;
constexpr SignatureArgumentKind SignatureArgumentKind_MAX = ARG_TYPE_LAMBDA;
constexpr int SignatureArgumentKind_ARRAYSIZE = SignatureArgumentKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignatureArgumentKind_descriptor();
template<typename T>
inline const std::string& SignatureArgumentKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SignatureArgumentKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SignatureArgumentKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SignatureArgumentKind_descriptor(), enum_t_value);
}
inline bool SignatureArgumentKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SignatureArgumentKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignatureArgumentKind>(
    SignatureArgumentKind_descriptor(), name, value);
}
// ===================================================================

class FunctionEnums final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:zetasql.FunctionEnums) */ {
 public:
  inline FunctionEnums() : FunctionEnums(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FunctionEnums(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionEnums(const FunctionEnums& from);
  FunctionEnums(FunctionEnums&& from) noexcept
    : FunctionEnums() {
    *this = ::std::move(from);
  }

  inline FunctionEnums& operator=(const FunctionEnums& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionEnums& operator=(FunctionEnums&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionEnums& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionEnums* internal_default_instance() {
    return reinterpret_cast<const FunctionEnums*>(
               &_FunctionEnums_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FunctionEnums& a, FunctionEnums& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionEnums* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionEnums* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionEnums* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionEnums>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FunctionEnums& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FunctionEnums& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.FunctionEnums";
  }
  protected:
  explicit FunctionEnums(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FunctionEnums_ArgumentCardinality ArgumentCardinality;
  static constexpr ArgumentCardinality REQUIRED =
    FunctionEnums_ArgumentCardinality_REQUIRED;
  static constexpr ArgumentCardinality REPEATED =
    FunctionEnums_ArgumentCardinality_REPEATED;
  static constexpr ArgumentCardinality OPTIONAL =
    FunctionEnums_ArgumentCardinality_OPTIONAL;
  static inline bool ArgumentCardinality_IsValid(int value) {
    return FunctionEnums_ArgumentCardinality_IsValid(value);
  }
  static constexpr ArgumentCardinality ArgumentCardinality_MIN =
    FunctionEnums_ArgumentCardinality_ArgumentCardinality_MIN;
  static constexpr ArgumentCardinality ArgumentCardinality_MAX =
    FunctionEnums_ArgumentCardinality_ArgumentCardinality_MAX;
  static constexpr int ArgumentCardinality_ARRAYSIZE =
    FunctionEnums_ArgumentCardinality_ArgumentCardinality_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ArgumentCardinality_descriptor() {
    return FunctionEnums_ArgumentCardinality_descriptor();
  }
  template<typename T>
  static inline const std::string& ArgumentCardinality_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ArgumentCardinality>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ArgumentCardinality_Name.");
    return FunctionEnums_ArgumentCardinality_Name(enum_t_value);
  }
  static inline bool ArgumentCardinality_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ArgumentCardinality* value) {
    return FunctionEnums_ArgumentCardinality_Parse(name, value);
  }

  typedef FunctionEnums_ProcedureArgumentMode ProcedureArgumentMode;
  static constexpr ProcedureArgumentMode NOT_SET =
    FunctionEnums_ProcedureArgumentMode_NOT_SET;
  static constexpr ProcedureArgumentMode IN =
    FunctionEnums_ProcedureArgumentMode_IN;
  static constexpr ProcedureArgumentMode OUT =
    FunctionEnums_ProcedureArgumentMode_OUT;
  static constexpr ProcedureArgumentMode INOUT =
    FunctionEnums_ProcedureArgumentMode_INOUT;
  static inline bool ProcedureArgumentMode_IsValid(int value) {
    return FunctionEnums_ProcedureArgumentMode_IsValid(value);
  }
  static constexpr ProcedureArgumentMode ProcedureArgumentMode_MIN =
    FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MIN;
  static constexpr ProcedureArgumentMode ProcedureArgumentMode_MAX =
    FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_MAX;
  static constexpr int ProcedureArgumentMode_ARRAYSIZE =
    FunctionEnums_ProcedureArgumentMode_ProcedureArgumentMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProcedureArgumentMode_descriptor() {
    return FunctionEnums_ProcedureArgumentMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ProcedureArgumentMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcedureArgumentMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcedureArgumentMode_Name.");
    return FunctionEnums_ProcedureArgumentMode_Name(enum_t_value);
  }
  static inline bool ProcedureArgumentMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProcedureArgumentMode* value) {
    return FunctionEnums_ProcedureArgumentMode_Parse(name, value);
  }

  typedef FunctionEnums_WindowOrderSupport WindowOrderSupport;
  static constexpr WindowOrderSupport ORDER_UNSUPPORTED =
    FunctionEnums_WindowOrderSupport_ORDER_UNSUPPORTED;
  static constexpr WindowOrderSupport ORDER_OPTIONAL =
    FunctionEnums_WindowOrderSupport_ORDER_OPTIONAL;
  static constexpr WindowOrderSupport ORDER_REQUIRED =
    FunctionEnums_WindowOrderSupport_ORDER_REQUIRED;
  static inline bool WindowOrderSupport_IsValid(int value) {
    return FunctionEnums_WindowOrderSupport_IsValid(value);
  }
  static constexpr WindowOrderSupport WindowOrderSupport_MIN =
    FunctionEnums_WindowOrderSupport_WindowOrderSupport_MIN;
  static constexpr WindowOrderSupport WindowOrderSupport_MAX =
    FunctionEnums_WindowOrderSupport_WindowOrderSupport_MAX;
  static constexpr int WindowOrderSupport_ARRAYSIZE =
    FunctionEnums_WindowOrderSupport_WindowOrderSupport_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WindowOrderSupport_descriptor() {
    return FunctionEnums_WindowOrderSupport_descriptor();
  }
  template<typename T>
  static inline const std::string& WindowOrderSupport_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WindowOrderSupport>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WindowOrderSupport_Name.");
    return FunctionEnums_WindowOrderSupport_Name(enum_t_value);
  }
  static inline bool WindowOrderSupport_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WindowOrderSupport* value) {
    return FunctionEnums_WindowOrderSupport_Parse(name, value);
  }

  typedef FunctionEnums_Mode Mode;
  static constexpr Mode SCALAR =
    FunctionEnums_Mode_SCALAR;
  static constexpr Mode AGGREGATE =
    FunctionEnums_Mode_AGGREGATE;
  static constexpr Mode ANALYTIC =
    FunctionEnums_Mode_ANALYTIC;
  static inline bool Mode_IsValid(int value) {
    return FunctionEnums_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    FunctionEnums_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    FunctionEnums_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    FunctionEnums_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return FunctionEnums_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return FunctionEnums_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return FunctionEnums_Mode_Parse(name, value);
  }

  typedef FunctionEnums_Volatility Volatility;
  static constexpr Volatility IMMUTABLE =
    FunctionEnums_Volatility_IMMUTABLE;
  static constexpr Volatility STABLE =
    FunctionEnums_Volatility_STABLE;
  static constexpr Volatility VOLATILE =
    FunctionEnums_Volatility_VOLATILE;
  static inline bool Volatility_IsValid(int value) {
    return FunctionEnums_Volatility_IsValid(value);
  }
  static constexpr Volatility Volatility_MIN =
    FunctionEnums_Volatility_Volatility_MIN;
  static constexpr Volatility Volatility_MAX =
    FunctionEnums_Volatility_Volatility_MAX;
  static constexpr int Volatility_ARRAYSIZE =
    FunctionEnums_Volatility_Volatility_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Volatility_descriptor() {
    return FunctionEnums_Volatility_descriptor();
  }
  template<typename T>
  static inline const std::string& Volatility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Volatility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Volatility_Name.");
    return FunctionEnums_Volatility_Name(enum_t_value);
  }
  static inline bool Volatility_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Volatility* value) {
    return FunctionEnums_Volatility_Parse(name, value);
  }

  typedef FunctionEnums_TableValuedFunctionType TableValuedFunctionType;
  static constexpr TableValuedFunctionType INVALID =
    FunctionEnums_TableValuedFunctionType_INVALID;
  static constexpr TableValuedFunctionType FIXED_OUTPUT_SCHEMA_TVF =
    FunctionEnums_TableValuedFunctionType_FIXED_OUTPUT_SCHEMA_TVF;
  static constexpr TableValuedFunctionType FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_TVF =
    FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_TVF;
  static constexpr TableValuedFunctionType TEMPLATED_SQL_TVF =
    FunctionEnums_TableValuedFunctionType_TEMPLATED_SQL_TVF;
  static constexpr TableValuedFunctionType FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_WITH_APPENDED_COLUMNS =
    FunctionEnums_TableValuedFunctionType_FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_WITH_APPENDED_COLUMNS;
  static inline bool TableValuedFunctionType_IsValid(int value) {
    return FunctionEnums_TableValuedFunctionType_IsValid(value);
  }
  static constexpr TableValuedFunctionType TableValuedFunctionType_MIN =
    FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MIN;
  static constexpr TableValuedFunctionType TableValuedFunctionType_MAX =
    FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_MAX;
  static constexpr int TableValuedFunctionType_ARRAYSIZE =
    FunctionEnums_TableValuedFunctionType_TableValuedFunctionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TableValuedFunctionType_descriptor() {
    return FunctionEnums_TableValuedFunctionType_descriptor();
  }
  template<typename T>
  static inline const std::string& TableValuedFunctionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TableValuedFunctionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TableValuedFunctionType_Name.");
    return FunctionEnums_TableValuedFunctionType_Name(enum_t_value);
  }
  static inline bool TableValuedFunctionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TableValuedFunctionType* value) {
    return FunctionEnums_TableValuedFunctionType_Parse(name, value);
  }

  typedef FunctionEnums_ArgumentCollationMode ArgumentCollationMode;
  static constexpr ArgumentCollationMode AFFECTS_NONE =
    FunctionEnums_ArgumentCollationMode_AFFECTS_NONE;
  static constexpr ArgumentCollationMode AFFECTS_OPERATION =
    FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION;
  static constexpr ArgumentCollationMode AFFECTS_PROPAGATION =
    FunctionEnums_ArgumentCollationMode_AFFECTS_PROPAGATION;
  static constexpr ArgumentCollationMode AFFECTS_OPERATION_AND_PROPAGATION =
    FunctionEnums_ArgumentCollationMode_AFFECTS_OPERATION_AND_PROPAGATION;
  static inline bool ArgumentCollationMode_IsValid(int value) {
    return FunctionEnums_ArgumentCollationMode_IsValid(value);
  }
  static constexpr ArgumentCollationMode ArgumentCollationMode_MIN =
    FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MIN;
  static constexpr ArgumentCollationMode ArgumentCollationMode_MAX =
    FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_MAX;
  static constexpr int ArgumentCollationMode_ARRAYSIZE =
    FunctionEnums_ArgumentCollationMode_ArgumentCollationMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ArgumentCollationMode_descriptor() {
    return FunctionEnums_ArgumentCollationMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ArgumentCollationMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ArgumentCollationMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ArgumentCollationMode_Name.");
    return FunctionEnums_ArgumentCollationMode_Name(enum_t_value);
  }
  static inline bool ArgumentCollationMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ArgumentCollationMode* value) {
    return FunctionEnums_ArgumentCollationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zetasql.FunctionEnums)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_zetasql_2fpublic_2ffunction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FunctionEnums

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zetasql::FunctionEnums_ArgumentCardinality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_ArgumentCardinality>() {
  return ::zetasql::FunctionEnums_ArgumentCardinality_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_ProcedureArgumentMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_ProcedureArgumentMode>() {
  return ::zetasql::FunctionEnums_ProcedureArgumentMode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_WindowOrderSupport> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_WindowOrderSupport>() {
  return ::zetasql::FunctionEnums_WindowOrderSupport_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_Mode>() {
  return ::zetasql::FunctionEnums_Mode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_Volatility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_Volatility>() {
  return ::zetasql::FunctionEnums_Volatility_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_TableValuedFunctionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_TableValuedFunctionType>() {
  return ::zetasql::FunctionEnums_TableValuedFunctionType_descriptor();
}
template <> struct is_proto_enum< ::zetasql::FunctionEnums_ArgumentCollationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FunctionEnums_ArgumentCollationMode>() {
  return ::zetasql::FunctionEnums_ArgumentCollationMode_descriptor();
}
template <> struct is_proto_enum< ::zetasql::SignatureArgumentKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::SignatureArgumentKind>() {
  return ::zetasql::SignatureArgumentKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ffunction_2eproto
