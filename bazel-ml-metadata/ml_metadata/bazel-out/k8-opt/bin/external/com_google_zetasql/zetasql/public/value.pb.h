// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/value.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fvalue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fvalue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2fvalue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2fvalue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2fvalue_2eproto;
namespace zetasql {
class ValueProto;
struct ValueProtoDefaultTypeInternal;
extern ValueProtoDefaultTypeInternal _ValueProto_default_instance_;
class ValueProto_Array;
struct ValueProto_ArrayDefaultTypeInternal;
extern ValueProto_ArrayDefaultTypeInternal _ValueProto_Array_default_instance_;
class ValueProto_Datetime;
struct ValueProto_DatetimeDefaultTypeInternal;
extern ValueProto_DatetimeDefaultTypeInternal _ValueProto_Datetime_default_instance_;
class ValueProto_Range;
struct ValueProto_RangeDefaultTypeInternal;
extern ValueProto_RangeDefaultTypeInternal _ValueProto_Range_default_instance_;
class ValueProto_Struct;
struct ValueProto_StructDefaultTypeInternal;
extern ValueProto_StructDefaultTypeInternal _ValueProto_Struct_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::ValueProto* Arena::CreateMaybeMessage<::zetasql::ValueProto>(Arena*);
template<> ::zetasql::ValueProto_Array* Arena::CreateMaybeMessage<::zetasql::ValueProto_Array>(Arena*);
template<> ::zetasql::ValueProto_Datetime* Arena::CreateMaybeMessage<::zetasql::ValueProto_Datetime>(Arena*);
template<> ::zetasql::ValueProto_Range* Arena::CreateMaybeMessage<::zetasql::ValueProto_Range>(Arena*);
template<> ::zetasql::ValueProto_Struct* Arena::CreateMaybeMessage<::zetasql::ValueProto_Struct>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class ValueProto_Array final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueProto.Array) */ {
 public:
  inline ValueProto_Array() : ValueProto_Array(nullptr) {}
  ~ValueProto_Array() override;
  explicit PROTOBUF_CONSTEXPR ValueProto_Array(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueProto_Array(const ValueProto_Array& from);
  ValueProto_Array(ValueProto_Array&& from) noexcept
    : ValueProto_Array() {
    *this = ::std::move(from);
  }

  inline ValueProto_Array& operator=(const ValueProto_Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueProto_Array& operator=(ValueProto_Array&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueProto_Array& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueProto_Array* internal_default_instance() {
    return reinterpret_cast<const ValueProto_Array*>(
               &_ValueProto_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ValueProto_Array& a, ValueProto_Array& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueProto_Array* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueProto_Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueProto_Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueProto_Array>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValueProto_Array& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValueProto_Array& from) {
    ValueProto_Array::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto_Array* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ValueProto.Array";
  }
  protected:
  explicit ValueProto_Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .zetasql.ValueProto element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::zetasql::ValueProto* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto >*
      mutable_element();
  private:
  const ::zetasql::ValueProto& _internal_element(int index) const;
  ::zetasql::ValueProto* _internal_add_element();
  public:
  const ::zetasql::ValueProto& element(int index) const;
  ::zetasql::ValueProto* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto >&
      element() const;

  // @@protoc_insertion_point(class_scope:zetasql.ValueProto.Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto > element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class ValueProto_Struct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueProto.Struct) */ {
 public:
  inline ValueProto_Struct() : ValueProto_Struct(nullptr) {}
  ~ValueProto_Struct() override;
  explicit PROTOBUF_CONSTEXPR ValueProto_Struct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueProto_Struct(const ValueProto_Struct& from);
  ValueProto_Struct(ValueProto_Struct&& from) noexcept
    : ValueProto_Struct() {
    *this = ::std::move(from);
  }

  inline ValueProto_Struct& operator=(const ValueProto_Struct& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueProto_Struct& operator=(ValueProto_Struct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueProto_Struct& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueProto_Struct* internal_default_instance() {
    return reinterpret_cast<const ValueProto_Struct*>(
               &_ValueProto_Struct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ValueProto_Struct& a, ValueProto_Struct& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueProto_Struct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueProto_Struct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueProto_Struct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueProto_Struct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValueProto_Struct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValueProto_Struct& from) {
    ValueProto_Struct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto_Struct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ValueProto.Struct";
  }
  protected:
  explicit ValueProto_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated .zetasql.ValueProto field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::zetasql::ValueProto* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto >*
      mutable_field();
  private:
  const ::zetasql::ValueProto& _internal_field(int index) const;
  ::zetasql::ValueProto* _internal_add_field();
  public:
  const ::zetasql::ValueProto& field(int index) const;
  ::zetasql::ValueProto* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto >&
      field() const;

  // @@protoc_insertion_point(class_scope:zetasql.ValueProto.Struct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto > field_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class ValueProto_Datetime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueProto.Datetime) */ {
 public:
  inline ValueProto_Datetime() : ValueProto_Datetime(nullptr) {}
  ~ValueProto_Datetime() override;
  explicit PROTOBUF_CONSTEXPR ValueProto_Datetime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueProto_Datetime(const ValueProto_Datetime& from);
  ValueProto_Datetime(ValueProto_Datetime&& from) noexcept
    : ValueProto_Datetime() {
    *this = ::std::move(from);
  }

  inline ValueProto_Datetime& operator=(const ValueProto_Datetime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueProto_Datetime& operator=(ValueProto_Datetime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueProto_Datetime& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueProto_Datetime* internal_default_instance() {
    return reinterpret_cast<const ValueProto_Datetime*>(
               &_ValueProto_Datetime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ValueProto_Datetime& a, ValueProto_Datetime& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueProto_Datetime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueProto_Datetime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueProto_Datetime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueProto_Datetime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValueProto_Datetime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValueProto_Datetime& from) {
    ValueProto_Datetime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto_Datetime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ValueProto.Datetime";
  }
  protected:
  explicit ValueProto_Datetime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitFieldDatetimeSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // optional int64 bit_field_datetime_seconds = 1;
  bool has_bit_field_datetime_seconds() const;
  private:
  bool _internal_has_bit_field_datetime_seconds() const;
  public:
  void clear_bit_field_datetime_seconds();
  int64_t bit_field_datetime_seconds() const;
  void set_bit_field_datetime_seconds(int64_t value);
  private:
  int64_t _internal_bit_field_datetime_seconds() const;
  void _internal_set_bit_field_datetime_seconds(int64_t value);
  public:

  // optional int32 nanos = 2;
  bool has_nanos() const;
  private:
  bool _internal_has_nanos() const;
  public:
  void clear_nanos();
  int32_t nanos() const;
  void set_nanos(int32_t value);
  private:
  int32_t _internal_nanos() const;
  void _internal_set_nanos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.ValueProto.Datetime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t bit_field_datetime_seconds_;
    int32_t nanos_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class ValueProto_Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueProto.Range) */ {
 public:
  inline ValueProto_Range() : ValueProto_Range(nullptr) {}
  ~ValueProto_Range() override;
  explicit PROTOBUF_CONSTEXPR ValueProto_Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueProto_Range(const ValueProto_Range& from);
  ValueProto_Range(ValueProto_Range&& from) noexcept
    : ValueProto_Range() {
    *this = ::std::move(from);
  }

  inline ValueProto_Range& operator=(const ValueProto_Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueProto_Range& operator=(ValueProto_Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueProto_Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueProto_Range* internal_default_instance() {
    return reinterpret_cast<const ValueProto_Range*>(
               &_ValueProto_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValueProto_Range& a, ValueProto_Range& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueProto_Range* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueProto_Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueProto_Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueProto_Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValueProto_Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValueProto_Range& from) {
    ValueProto_Range::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto_Range* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ValueProto.Range";
  }
  protected:
  explicit ValueProto_Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional .zetasql.ValueProto start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::zetasql::ValueProto& start() const;
  PROTOBUF_NODISCARD ::zetasql::ValueProto* release_start();
  ::zetasql::ValueProto* mutable_start();
  void set_allocated_start(::zetasql::ValueProto* start);
  private:
  const ::zetasql::ValueProto& _internal_start() const;
  ::zetasql::ValueProto* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::zetasql::ValueProto* start);
  ::zetasql::ValueProto* unsafe_arena_release_start();

  // optional .zetasql.ValueProto end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::zetasql::ValueProto& end() const;
  PROTOBUF_NODISCARD ::zetasql::ValueProto* release_end();
  ::zetasql::ValueProto* mutable_end();
  void set_allocated_end(::zetasql::ValueProto* end);
  private:
  const ::zetasql::ValueProto& _internal_end() const;
  ::zetasql::ValueProto* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::zetasql::ValueProto* end);
  ::zetasql::ValueProto* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:zetasql.ValueProto.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::zetasql::ValueProto* start_;
    ::zetasql::ValueProto* end_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class ValueProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ValueProto) */ {
 public:
  inline ValueProto() : ValueProto(nullptr) {}
  ~ValueProto() override;
  explicit PROTOBUF_CONSTEXPR ValueProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueProto(const ValueProto& from);
  ValueProto(ValueProto&& from) noexcept
    : ValueProto() {
    *this = ::std::move(from);
  }

  inline ValueProto& operator=(const ValueProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueProto& operator=(ValueProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueProto& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kInt32Value = 1,
    kInt64Value = 2,
    kUint32Value = 3,
    kUint64Value = 4,
    kBoolValue = 5,
    kFloatValue = 6,
    kDoubleValue = 7,
    kStringValue = 8,
    kBytesValue = 9,
    kDateValue = 10,
    kEnumValue = 12,
    kArrayValue = 13,
    kStructValue = 14,
    kProtoValue = 15,
    kTimestampValue = 16,
    kDatetimeValue = 17,
    kTimeValue = 18,
    kGeographyValue = 19,
    kNumericValue = 20,
    kBignumericValue = 21,
    kJsonValue = 23,
    kIntervalValue = 24,
    kRangeValue = 26,
    kValueProtoSwitchMustHaveADefault = 255,
    VALUE_NOT_SET = 0,
  };

  static inline const ValueProto* internal_default_instance() {
    return reinterpret_cast<const ValueProto*>(
               &_ValueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ValueProto& a, ValueProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValueProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValueProto& from) {
    ValueProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ValueProto";
  }
  protected:
  explicit ValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueProto_Array Array;
  typedef ValueProto_Struct Struct;
  typedef ValueProto_Datetime Datetime;
  typedef ValueProto_Range Range;

  // accessors -------------------------------------------------------

  enum : int {
    kInt32ValueFieldNumber = 1,
    kInt64ValueFieldNumber = 2,
    kUint32ValueFieldNumber = 3,
    kUint64ValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
    kFloatValueFieldNumber = 6,
    kDoubleValueFieldNumber = 7,
    kStringValueFieldNumber = 8,
    kBytesValueFieldNumber = 9,
    kDateValueFieldNumber = 10,
    kEnumValueFieldNumber = 12,
    kArrayValueFieldNumber = 13,
    kStructValueFieldNumber = 14,
    kProtoValueFieldNumber = 15,
    kTimestampValueFieldNumber = 16,
    kDatetimeValueFieldNumber = 17,
    kTimeValueFieldNumber = 18,
    kGeographyValueFieldNumber = 19,
    kNumericValueFieldNumber = 20,
    kBignumericValueFieldNumber = 21,
    kJsonValueFieldNumber = 23,
    kIntervalValueFieldNumber = 24,
    kRangeValueFieldNumber = 26,
    kValueProtoSwitchMustHaveADefaultFieldNumber = 255,
  };
  // int32 int32_value = 1;
  bool has_int32_value() const;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  int32_t int32_value() const;
  void set_int32_value(int32_t value);
  private:
  int32_t _internal_int32_value() const;
  void _internal_set_int32_value(int32_t value);
  public:

  // int64 int64_value = 2;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  int64_t int64_value() const;
  void set_int64_value(int64_t value);
  private:
  int64_t _internal_int64_value() const;
  void _internal_set_int64_value(int64_t value);
  public:

  // uint32 uint32_value = 3;
  bool has_uint32_value() const;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  uint32_t uint32_value() const;
  void set_uint32_value(uint32_t value);
  private:
  uint32_t _internal_uint32_value() const;
  void _internal_set_uint32_value(uint32_t value);
  public:

  // uint64 uint64_value = 4;
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  uint64_t uint64_value() const;
  void set_uint64_value(uint64_t value);
  private:
  uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(uint64_t value);
  public:

  // bool bool_value = 5;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // float float_value = 6;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // double double_value = 7;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 8;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes bytes_value = 9;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  // int32 date_value = 10;
  bool has_date_value() const;
  private:
  bool _internal_has_date_value() const;
  public:
  void clear_date_value();
  int32_t date_value() const;
  void set_date_value(int32_t value);
  private:
  int32_t _internal_date_value() const;
  void _internal_set_date_value(int32_t value);
  public:

  // int32 enum_value = 12;
  bool has_enum_value() const;
  private:
  bool _internal_has_enum_value() const;
  public:
  void clear_enum_value();
  int32_t enum_value() const;
  void set_enum_value(int32_t value);
  private:
  int32_t _internal_enum_value() const;
  void _internal_set_enum_value(int32_t value);
  public:

  // .zetasql.ValueProto.Array array_value = 13;
  bool has_array_value() const;
  private:
  bool _internal_has_array_value() const;
  public:
  void clear_array_value();
  const ::zetasql::ValueProto_Array& array_value() const;
  PROTOBUF_NODISCARD ::zetasql::ValueProto_Array* release_array_value();
  ::zetasql::ValueProto_Array* mutable_array_value();
  void set_allocated_array_value(::zetasql::ValueProto_Array* array_value);
  private:
  const ::zetasql::ValueProto_Array& _internal_array_value() const;
  ::zetasql::ValueProto_Array* _internal_mutable_array_value();
  public:
  void unsafe_arena_set_allocated_array_value(
      ::zetasql::ValueProto_Array* array_value);
  ::zetasql::ValueProto_Array* unsafe_arena_release_array_value();

  // .zetasql.ValueProto.Struct struct_value = 14;
  bool has_struct_value() const;
  private:
  bool _internal_has_struct_value() const;
  public:
  void clear_struct_value();
  const ::zetasql::ValueProto_Struct& struct_value() const;
  PROTOBUF_NODISCARD ::zetasql::ValueProto_Struct* release_struct_value();
  ::zetasql::ValueProto_Struct* mutable_struct_value();
  void set_allocated_struct_value(::zetasql::ValueProto_Struct* struct_value);
  private:
  const ::zetasql::ValueProto_Struct& _internal_struct_value() const;
  ::zetasql::ValueProto_Struct* _internal_mutable_struct_value();
  public:
  void unsafe_arena_set_allocated_struct_value(
      ::zetasql::ValueProto_Struct* struct_value);
  ::zetasql::ValueProto_Struct* unsafe_arena_release_struct_value();

  // bytes proto_value = 15;
  bool has_proto_value() const;
  private:
  bool _internal_has_proto_value() const;
  public:
  void clear_proto_value();
  const std::string& proto_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_value();
  PROTOBUF_NODISCARD std::string* release_proto_value();
  void set_allocated_proto_value(std::string* proto_value);
  private:
  const std::string& _internal_proto_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_value(const std::string& value);
  std::string* _internal_mutable_proto_value();
  public:

  // .google.protobuf.Timestamp timestamp_value = 16;
  bool has_timestamp_value() const;
  private:
  bool _internal_has_timestamp_value() const;
  public:
  void clear_timestamp_value();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp_value();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp_value();
  void set_allocated_timestamp_value(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp_value() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp_value();
  public:
  void unsafe_arena_set_allocated_timestamp_value(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp_value();

  // .zetasql.ValueProto.Datetime datetime_value = 17;
  bool has_datetime_value() const;
  private:
  bool _internal_has_datetime_value() const;
  public:
  void clear_datetime_value();
  const ::zetasql::ValueProto_Datetime& datetime_value() const;
  PROTOBUF_NODISCARD ::zetasql::ValueProto_Datetime* release_datetime_value();
  ::zetasql::ValueProto_Datetime* mutable_datetime_value();
  void set_allocated_datetime_value(::zetasql::ValueProto_Datetime* datetime_value);
  private:
  const ::zetasql::ValueProto_Datetime& _internal_datetime_value() const;
  ::zetasql::ValueProto_Datetime* _internal_mutable_datetime_value();
  public:
  void unsafe_arena_set_allocated_datetime_value(
      ::zetasql::ValueProto_Datetime* datetime_value);
  ::zetasql::ValueProto_Datetime* unsafe_arena_release_datetime_value();

  // int64 time_value = 18;
  bool has_time_value() const;
  private:
  bool _internal_has_time_value() const;
  public:
  void clear_time_value();
  int64_t time_value() const;
  void set_time_value(int64_t value);
  private:
  int64_t _internal_time_value() const;
  void _internal_set_time_value(int64_t value);
  public:

  // bytes geography_value = 19;
  bool has_geography_value() const;
  private:
  bool _internal_has_geography_value() const;
  public:
  void clear_geography_value();
  const std::string& geography_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_geography_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_geography_value();
  PROTOBUF_NODISCARD std::string* release_geography_value();
  void set_allocated_geography_value(std::string* geography_value);
  private:
  const std::string& _internal_geography_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_geography_value(const std::string& value);
  std::string* _internal_mutable_geography_value();
  public:

  // bytes numeric_value = 20;
  bool has_numeric_value() const;
  private:
  bool _internal_has_numeric_value() const;
  public:
  void clear_numeric_value();
  const std::string& numeric_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_numeric_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_numeric_value();
  PROTOBUF_NODISCARD std::string* release_numeric_value();
  void set_allocated_numeric_value(std::string* numeric_value);
  private:
  const std::string& _internal_numeric_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_numeric_value(const std::string& value);
  std::string* _internal_mutable_numeric_value();
  public:

  // bytes bignumeric_value = 21;
  bool has_bignumeric_value() const;
  private:
  bool _internal_has_bignumeric_value() const;
  public:
  void clear_bignumeric_value();
  const std::string& bignumeric_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bignumeric_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bignumeric_value();
  PROTOBUF_NODISCARD std::string* release_bignumeric_value();
  void set_allocated_bignumeric_value(std::string* bignumeric_value);
  private:
  const std::string& _internal_bignumeric_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bignumeric_value(const std::string& value);
  std::string* _internal_mutable_bignumeric_value();
  public:

  // string json_value = 23;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  // bytes interval_value = 24;
  bool has_interval_value() const;
  private:
  bool _internal_has_interval_value() const;
  public:
  void clear_interval_value();
  const std::string& interval_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interval_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interval_value();
  PROTOBUF_NODISCARD std::string* release_interval_value();
  void set_allocated_interval_value(std::string* interval_value);
  private:
  const std::string& _internal_interval_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interval_value(const std::string& value);
  std::string* _internal_mutable_interval_value();
  public:

  // .zetasql.ValueProto.Range range_value = 26;
  bool has_range_value() const;
  private:
  bool _internal_has_range_value() const;
  public:
  void clear_range_value();
  const ::zetasql::ValueProto_Range& range_value() const;
  PROTOBUF_NODISCARD ::zetasql::ValueProto_Range* release_range_value();
  ::zetasql::ValueProto_Range* mutable_range_value();
  void set_allocated_range_value(::zetasql::ValueProto_Range* range_value);
  private:
  const ::zetasql::ValueProto_Range& _internal_range_value() const;
  ::zetasql::ValueProto_Range* _internal_mutable_range_value();
  public:
  void unsafe_arena_set_allocated_range_value(
      ::zetasql::ValueProto_Range* range_value);
  ::zetasql::ValueProto_Range* unsafe_arena_release_range_value();

  // bool __ValueProto__switch_must_have_a_default = 255;
  bool has___valueproto__switch_must_have_a_default() const;
  private:
  bool _internal_has___valueproto__switch_must_have_a_default() const;
  public:
  void clear___valueproto__switch_must_have_a_default();
  bool __valueproto__switch_must_have_a_default() const;
  void set___valueproto__switch_must_have_a_default(bool value);
  private:
  bool _internal___valueproto__switch_must_have_a_default() const;
  void _internal_set___valueproto__switch_must_have_a_default(bool value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.ValueProto)
 private:
  class _Internal;
  void set_has_int32_value();
  void set_has_int64_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_bool_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_bytes_value();
  void set_has_date_value();
  void set_has_enum_value();
  void set_has_array_value();
  void set_has_struct_value();
  void set_has_proto_value();
  void set_has_timestamp_value();
  void set_has_datetime_value();
  void set_has_time_value();
  void set_has_geography_value();
  void set_has_numeric_value();
  void set_has_bignumeric_value();
  void set_has_json_value();
  void set_has_interval_value();
  void set_has_range_value();
  void set_has___valueproto__switch_must_have_a_default();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t int32_value_;
      int64_t int64_value_;
      uint32_t uint32_value_;
      uint64_t uint64_value_;
      bool bool_value_;
      float float_value_;
      double double_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
      int32_t date_value_;
      int32_t enum_value_;
      ::zetasql::ValueProto_Array* array_value_;
      ::zetasql::ValueProto_Struct* struct_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_value_;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value_;
      ::zetasql::ValueProto_Datetime* datetime_value_;
      int64_t time_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geography_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr numeric_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bignumeric_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interval_value_;
      ::zetasql::ValueProto_Range* range_value_;
      bool __valueproto__switch_must_have_a_default_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fvalue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ValueProto_Array

// repeated .zetasql.ValueProto element = 1;
inline int ValueProto_Array::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int ValueProto_Array::element_size() const {
  return _internal_element_size();
}
inline void ValueProto_Array::clear_element() {
  _impl_.element_.Clear();
}
inline ::zetasql::ValueProto* ValueProto_Array::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.Array.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto >*
ValueProto_Array::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ValueProto.Array.element)
  return &_impl_.element_;
}
inline const ::zetasql::ValueProto& ValueProto_Array::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::zetasql::ValueProto& ValueProto_Array::element(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Array.element)
  return _internal_element(index);
}
inline ::zetasql::ValueProto* ValueProto_Array::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::zetasql::ValueProto* ValueProto_Array::add_element() {
  ::zetasql::ValueProto* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:zetasql.ValueProto.Array.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto >&
ValueProto_Array::element() const {
  // @@protoc_insertion_point(field_list:zetasql.ValueProto.Array.element)
  return _impl_.element_;
}

// -------------------------------------------------------------------

// ValueProto_Struct

// repeated .zetasql.ValueProto field = 1;
inline int ValueProto_Struct::_internal_field_size() const {
  return _impl_.field_.size();
}
inline int ValueProto_Struct::field_size() const {
  return _internal_field_size();
}
inline void ValueProto_Struct::clear_field() {
  _impl_.field_.Clear();
}
inline ::zetasql::ValueProto* ValueProto_Struct::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.Struct.field)
  return _impl_.field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto >*
ValueProto_Struct::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ValueProto.Struct.field)
  return &_impl_.field_;
}
inline const ::zetasql::ValueProto& ValueProto_Struct::_internal_field(int index) const {
  return _impl_.field_.Get(index);
}
inline const ::zetasql::ValueProto& ValueProto_Struct::field(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Struct.field)
  return _internal_field(index);
}
inline ::zetasql::ValueProto* ValueProto_Struct::_internal_add_field() {
  return _impl_.field_.Add();
}
inline ::zetasql::ValueProto* ValueProto_Struct::add_field() {
  ::zetasql::ValueProto* _add = _internal_add_field();
  // @@protoc_insertion_point(field_add:zetasql.ValueProto.Struct.field)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ValueProto >&
ValueProto_Struct::field() const {
  // @@protoc_insertion_point(field_list:zetasql.ValueProto.Struct.field)
  return _impl_.field_;
}

// -------------------------------------------------------------------

// ValueProto_Datetime

// optional int64 bit_field_datetime_seconds = 1;
inline bool ValueProto_Datetime::_internal_has_bit_field_datetime_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ValueProto_Datetime::has_bit_field_datetime_seconds() const {
  return _internal_has_bit_field_datetime_seconds();
}
inline void ValueProto_Datetime::clear_bit_field_datetime_seconds() {
  _impl_.bit_field_datetime_seconds_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t ValueProto_Datetime::_internal_bit_field_datetime_seconds() const {
  return _impl_.bit_field_datetime_seconds_;
}
inline int64_t ValueProto_Datetime::bit_field_datetime_seconds() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Datetime.bit_field_datetime_seconds)
  return _internal_bit_field_datetime_seconds();
}
inline void ValueProto_Datetime::_internal_set_bit_field_datetime_seconds(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bit_field_datetime_seconds_ = value;
}
inline void ValueProto_Datetime::set_bit_field_datetime_seconds(int64_t value) {
  _internal_set_bit_field_datetime_seconds(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.Datetime.bit_field_datetime_seconds)
}

// optional int32 nanos = 2;
inline bool ValueProto_Datetime::_internal_has_nanos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ValueProto_Datetime::has_nanos() const {
  return _internal_has_nanos();
}
inline void ValueProto_Datetime::clear_nanos() {
  _impl_.nanos_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ValueProto_Datetime::_internal_nanos() const {
  return _impl_.nanos_;
}
inline int32_t ValueProto_Datetime::nanos() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Datetime.nanos)
  return _internal_nanos();
}
inline void ValueProto_Datetime::_internal_set_nanos(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nanos_ = value;
}
inline void ValueProto_Datetime::set_nanos(int32_t value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.Datetime.nanos)
}

// -------------------------------------------------------------------

// ValueProto_Range

// optional .zetasql.ValueProto start = 1;
inline bool ValueProto_Range::_internal_has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ != nullptr);
  return value;
}
inline bool ValueProto_Range::has_start() const {
  return _internal_has_start();
}
inline void ValueProto_Range::clear_start() {
  if (_impl_.start_ != nullptr) _impl_.start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::ValueProto& ValueProto_Range::_internal_start() const {
  const ::zetasql::ValueProto* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ValueProto&>(
      ::zetasql::_ValueProto_default_instance_);
}
inline const ::zetasql::ValueProto& ValueProto_Range::start() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Range.start)
  return _internal_start();
}
inline void ValueProto_Range::unsafe_arena_set_allocated_start(
    ::zetasql::ValueProto* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.Range.start)
}
inline ::zetasql::ValueProto* ValueProto_Range::release_start() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::ValueProto* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ValueProto* ValueProto_Range::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.Range.start)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::ValueProto* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::zetasql::ValueProto* ValueProto_Range::_internal_mutable_start() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ValueProto>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::zetasql::ValueProto* ValueProto_Range::mutable_start() {
  ::zetasql::ValueProto* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.Range.start)
  return _msg;
}
inline void ValueProto_Range::set_allocated_start(::zetasql::ValueProto* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.Range.start)
}

// optional .zetasql.ValueProto end = 2;
inline bool ValueProto_Range::_internal_has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ != nullptr);
  return value;
}
inline bool ValueProto_Range::has_end() const {
  return _internal_has_end();
}
inline void ValueProto_Range::clear_end() {
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ValueProto& ValueProto_Range::_internal_end() const {
  const ::zetasql::ValueProto* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ValueProto&>(
      ::zetasql::_ValueProto_default_instance_);
}
inline const ::zetasql::ValueProto& ValueProto_Range::end() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.Range.end)
  return _internal_end();
}
inline void ValueProto_Range::unsafe_arena_set_allocated_end(
    ::zetasql::ValueProto* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = end;
  if (end) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.Range.end)
}
inline ::zetasql::ValueProto* ValueProto_Range::release_end() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ValueProto* temp = _impl_.end_;
  _impl_.end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ValueProto* ValueProto_Range::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.Range.end)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ValueProto* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::zetasql::ValueProto* ValueProto_Range::_internal_mutable_end() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ValueProto>(GetArenaForAllocation());
    _impl_.end_ = p;
  }
  return _impl_.end_;
}
inline ::zetasql::ValueProto* ValueProto_Range::mutable_end() {
  ::zetasql::ValueProto* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.Range.end)
  return _msg;
}
inline void ValueProto_Range::set_allocated_end(::zetasql::ValueProto* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_ = end;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.Range.end)
}

// -------------------------------------------------------------------

// ValueProto

// int32 int32_value = 1;
inline bool ValueProto::_internal_has_int32_value() const {
  return value_case() == kInt32Value;
}
inline bool ValueProto::has_int32_value() const {
  return _internal_has_int32_value();
}
inline void ValueProto::set_has_int32_value() {
  _impl_._oneof_case_[0] = kInt32Value;
}
inline void ValueProto::clear_int32_value() {
  if (_internal_has_int32_value()) {
    _impl_.value_.int32_value_ = 0;
    clear_has_value();
  }
}
inline int32_t ValueProto::_internal_int32_value() const {
  if (_internal_has_int32_value()) {
    return _impl_.value_.int32_value_;
  }
  return 0;
}
inline void ValueProto::_internal_set_int32_value(int32_t value) {
  if (!_internal_has_int32_value()) {
    clear_value();
    set_has_int32_value();
  }
  _impl_.value_.int32_value_ = value;
}
inline int32_t ValueProto::int32_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.int32_value)
  return _internal_int32_value();
}
inline void ValueProto::set_int32_value(int32_t value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.int32_value)
}

// int64 int64_value = 2;
inline bool ValueProto::_internal_has_int64_value() const {
  return value_case() == kInt64Value;
}
inline bool ValueProto::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void ValueProto::set_has_int64_value() {
  _impl_._oneof_case_[0] = kInt64Value;
}
inline void ValueProto::clear_int64_value() {
  if (_internal_has_int64_value()) {
    _impl_.value_.int64_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t ValueProto::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return _impl_.value_.int64_value_;
  }
  return int64_t{0};
}
inline void ValueProto::_internal_set_int64_value(int64_t value) {
  if (!_internal_has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  _impl_.value_.int64_value_ = value;
}
inline int64_t ValueProto::int64_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.int64_value)
  return _internal_int64_value();
}
inline void ValueProto::set_int64_value(int64_t value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.int64_value)
}

// uint32 uint32_value = 3;
inline bool ValueProto::_internal_has_uint32_value() const {
  return value_case() == kUint32Value;
}
inline bool ValueProto::has_uint32_value() const {
  return _internal_has_uint32_value();
}
inline void ValueProto::set_has_uint32_value() {
  _impl_._oneof_case_[0] = kUint32Value;
}
inline void ValueProto::clear_uint32_value() {
  if (_internal_has_uint32_value()) {
    _impl_.value_.uint32_value_ = 0u;
    clear_has_value();
  }
}
inline uint32_t ValueProto::_internal_uint32_value() const {
  if (_internal_has_uint32_value()) {
    return _impl_.value_.uint32_value_;
  }
  return 0u;
}
inline void ValueProto::_internal_set_uint32_value(uint32_t value) {
  if (!_internal_has_uint32_value()) {
    clear_value();
    set_has_uint32_value();
  }
  _impl_.value_.uint32_value_ = value;
}
inline uint32_t ValueProto::uint32_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.uint32_value)
  return _internal_uint32_value();
}
inline void ValueProto::set_uint32_value(uint32_t value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.uint32_value)
}

// uint64 uint64_value = 4;
inline bool ValueProto::_internal_has_uint64_value() const {
  return value_case() == kUint64Value;
}
inline bool ValueProto::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void ValueProto::set_has_uint64_value() {
  _impl_._oneof_case_[0] = kUint64Value;
}
inline void ValueProto::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    _impl_.value_.uint64_value_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t ValueProto::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return _impl_.value_.uint64_value_;
  }
  return uint64_t{0u};
}
inline void ValueProto::_internal_set_uint64_value(uint64_t value) {
  if (!_internal_has_uint64_value()) {
    clear_value();
    set_has_uint64_value();
  }
  _impl_.value_.uint64_value_ = value;
}
inline uint64_t ValueProto::uint64_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.uint64_value)
  return _internal_uint64_value();
}
inline void ValueProto::set_uint64_value(uint64_t value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.uint64_value)
}

// bool bool_value = 5;
inline bool ValueProto::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool ValueProto::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void ValueProto::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void ValueProto::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ValueProto::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void ValueProto::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}
inline bool ValueProto::bool_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.bool_value)
  return _internal_bool_value();
}
inline void ValueProto::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.bool_value)
}

// float float_value = 6;
inline bool ValueProto::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool ValueProto::has_float_value() const {
  return _internal_has_float_value();
}
inline void ValueProto::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void ValueProto::clear_float_value() {
  if (_internal_has_float_value()) {
    _impl_.value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float ValueProto::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return _impl_.value_.float_value_;
  }
  return 0;
}
inline void ValueProto::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  _impl_.value_.float_value_ = value;
}
inline float ValueProto::float_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.float_value)
  return _internal_float_value();
}
inline void ValueProto::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.float_value)
}

// double double_value = 7;
inline bool ValueProto::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool ValueProto::has_double_value() const {
  return _internal_has_double_value();
}
inline void ValueProto::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void ValueProto::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double ValueProto::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void ValueProto::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}
inline double ValueProto::double_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.double_value)
  return _internal_double_value();
}
inline void ValueProto::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.double_value)
}

// string string_value = 8;
inline bool ValueProto::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool ValueProto::has_string_value() const {
  return _internal_has_string_value();
}
inline void ValueProto::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void ValueProto::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueProto::string_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueProto::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.string_value)
}
inline std::string* ValueProto::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.string_value)
  return _s;
}
inline const std::string& ValueProto::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueProto::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueProto::release_string_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueProto::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.string_value)
}

// bytes bytes_value = 9;
inline bool ValueProto::_internal_has_bytes_value() const {
  return value_case() == kBytesValue;
}
inline bool ValueProto::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void ValueProto::set_has_bytes_value() {
  _impl_._oneof_case_[0] = kBytesValue;
}
inline void ValueProto::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    _impl_.value_.bytes_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueProto::bytes_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueProto::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitDefault();
  }
  _impl_.value_.bytes_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.bytes_value)
}
inline std::string* ValueProto::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.bytes_value)
  return _s;
}
inline const std::string& ValueProto::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return _impl_.value_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitDefault();
  }
  _impl_.value_.bytes_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueProto::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitDefault();
  }
  return _impl_.value_.bytes_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueProto::release_bytes_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_value();
    return _impl_.value_.bytes_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueProto::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_value()) {
    clear_value();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitAllocated(bytes_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.bytes_value)
}

// int32 date_value = 10;
inline bool ValueProto::_internal_has_date_value() const {
  return value_case() == kDateValue;
}
inline bool ValueProto::has_date_value() const {
  return _internal_has_date_value();
}
inline void ValueProto::set_has_date_value() {
  _impl_._oneof_case_[0] = kDateValue;
}
inline void ValueProto::clear_date_value() {
  if (_internal_has_date_value()) {
    _impl_.value_.date_value_ = 0;
    clear_has_value();
  }
}
inline int32_t ValueProto::_internal_date_value() const {
  if (_internal_has_date_value()) {
    return _impl_.value_.date_value_;
  }
  return 0;
}
inline void ValueProto::_internal_set_date_value(int32_t value) {
  if (!_internal_has_date_value()) {
    clear_value();
    set_has_date_value();
  }
  _impl_.value_.date_value_ = value;
}
inline int32_t ValueProto::date_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.date_value)
  return _internal_date_value();
}
inline void ValueProto::set_date_value(int32_t value) {
  _internal_set_date_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.date_value)
}

// int32 enum_value = 12;
inline bool ValueProto::_internal_has_enum_value() const {
  return value_case() == kEnumValue;
}
inline bool ValueProto::has_enum_value() const {
  return _internal_has_enum_value();
}
inline void ValueProto::set_has_enum_value() {
  _impl_._oneof_case_[0] = kEnumValue;
}
inline void ValueProto::clear_enum_value() {
  if (_internal_has_enum_value()) {
    _impl_.value_.enum_value_ = 0;
    clear_has_value();
  }
}
inline int32_t ValueProto::_internal_enum_value() const {
  if (_internal_has_enum_value()) {
    return _impl_.value_.enum_value_;
  }
  return 0;
}
inline void ValueProto::_internal_set_enum_value(int32_t value) {
  if (!_internal_has_enum_value()) {
    clear_value();
    set_has_enum_value();
  }
  _impl_.value_.enum_value_ = value;
}
inline int32_t ValueProto::enum_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.enum_value)
  return _internal_enum_value();
}
inline void ValueProto::set_enum_value(int32_t value) {
  _internal_set_enum_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.enum_value)
}

// .zetasql.ValueProto.Array array_value = 13;
inline bool ValueProto::_internal_has_array_value() const {
  return value_case() == kArrayValue;
}
inline bool ValueProto::has_array_value() const {
  return _internal_has_array_value();
}
inline void ValueProto::set_has_array_value() {
  _impl_._oneof_case_[0] = kArrayValue;
}
inline void ValueProto::clear_array_value() {
  if (_internal_has_array_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.array_value_;
    }
    clear_has_value();
  }
}
inline ::zetasql::ValueProto_Array* ValueProto::release_array_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.array_value)
  if (_internal_has_array_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Array* temp = _impl_.value_.array_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasql::ValueProto_Array& ValueProto::_internal_array_value() const {
  return _internal_has_array_value()
      ? *_impl_.value_.array_value_
      : reinterpret_cast< ::zetasql::ValueProto_Array&>(::zetasql::_ValueProto_Array_default_instance_);
}
inline const ::zetasql::ValueProto_Array& ValueProto::array_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.array_value)
  return _internal_array_value();
}
inline ::zetasql::ValueProto_Array* ValueProto::unsafe_arena_release_array_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.array_value)
  if (_internal_has_array_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Array* temp = _impl_.value_.array_value_;
    _impl_.value_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_array_value(::zetasql::ValueProto_Array* array_value) {
  clear_value();
  if (array_value) {
    set_has_array_value();
    _impl_.value_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.array_value)
}
inline ::zetasql::ValueProto_Array* ValueProto::_internal_mutable_array_value() {
  if (!_internal_has_array_value()) {
    clear_value();
    set_has_array_value();
    _impl_.value_.array_value_ = CreateMaybeMessage< ::zetasql::ValueProto_Array >(GetArenaForAllocation());
  }
  return _impl_.value_.array_value_;
}
inline ::zetasql::ValueProto_Array* ValueProto::mutable_array_value() {
  ::zetasql::ValueProto_Array* _msg = _internal_mutable_array_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.array_value)
  return _msg;
}

// .zetasql.ValueProto.Struct struct_value = 14;
inline bool ValueProto::_internal_has_struct_value() const {
  return value_case() == kStructValue;
}
inline bool ValueProto::has_struct_value() const {
  return _internal_has_struct_value();
}
inline void ValueProto::set_has_struct_value() {
  _impl_._oneof_case_[0] = kStructValue;
}
inline void ValueProto::clear_struct_value() {
  if (_internal_has_struct_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.struct_value_;
    }
    clear_has_value();
  }
}
inline ::zetasql::ValueProto_Struct* ValueProto::release_struct_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.struct_value)
  if (_internal_has_struct_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Struct* temp = _impl_.value_.struct_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.struct_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasql::ValueProto_Struct& ValueProto::_internal_struct_value() const {
  return _internal_has_struct_value()
      ? *_impl_.value_.struct_value_
      : reinterpret_cast< ::zetasql::ValueProto_Struct&>(::zetasql::_ValueProto_Struct_default_instance_);
}
inline const ::zetasql::ValueProto_Struct& ValueProto::struct_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.struct_value)
  return _internal_struct_value();
}
inline ::zetasql::ValueProto_Struct* ValueProto::unsafe_arena_release_struct_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.struct_value)
  if (_internal_has_struct_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Struct* temp = _impl_.value_.struct_value_;
    _impl_.value_.struct_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_struct_value(::zetasql::ValueProto_Struct* struct_value) {
  clear_value();
  if (struct_value) {
    set_has_struct_value();
    _impl_.value_.struct_value_ = struct_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.struct_value)
}
inline ::zetasql::ValueProto_Struct* ValueProto::_internal_mutable_struct_value() {
  if (!_internal_has_struct_value()) {
    clear_value();
    set_has_struct_value();
    _impl_.value_.struct_value_ = CreateMaybeMessage< ::zetasql::ValueProto_Struct >(GetArenaForAllocation());
  }
  return _impl_.value_.struct_value_;
}
inline ::zetasql::ValueProto_Struct* ValueProto::mutable_struct_value() {
  ::zetasql::ValueProto_Struct* _msg = _internal_mutable_struct_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.struct_value)
  return _msg;
}

// bytes proto_value = 15;
inline bool ValueProto::_internal_has_proto_value() const {
  return value_case() == kProtoValue;
}
inline bool ValueProto::has_proto_value() const {
  return _internal_has_proto_value();
}
inline void ValueProto::set_has_proto_value() {
  _impl_._oneof_case_[0] = kProtoValue;
}
inline void ValueProto::clear_proto_value() {
  if (_internal_has_proto_value()) {
    _impl_.value_.proto_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueProto::proto_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.proto_value)
  return _internal_proto_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueProto::set_proto_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_proto_value()) {
    clear_value();
    set_has_proto_value();
    _impl_.value_.proto_value_.InitDefault();
  }
  _impl_.value_.proto_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.proto_value)
}
inline std::string* ValueProto::mutable_proto_value() {
  std::string* _s = _internal_mutable_proto_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.proto_value)
  return _s;
}
inline const std::string& ValueProto::_internal_proto_value() const {
  if (_internal_has_proto_value()) {
    return _impl_.value_.proto_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::_internal_set_proto_value(const std::string& value) {
  if (!_internal_has_proto_value()) {
    clear_value();
    set_has_proto_value();
    _impl_.value_.proto_value_.InitDefault();
  }
  _impl_.value_.proto_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueProto::_internal_mutable_proto_value() {
  if (!_internal_has_proto_value()) {
    clear_value();
    set_has_proto_value();
    _impl_.value_.proto_value_.InitDefault();
  }
  return _impl_.value_.proto_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueProto::release_proto_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.proto_value)
  if (_internal_has_proto_value()) {
    clear_has_value();
    return _impl_.value_.proto_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueProto::set_allocated_proto_value(std::string* proto_value) {
  if (has_value()) {
    clear_value();
  }
  if (proto_value != nullptr) {
    set_has_proto_value();
    _impl_.value_.proto_value_.InitAllocated(proto_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.proto_value)
}

// .google.protobuf.Timestamp timestamp_value = 16;
inline bool ValueProto::_internal_has_timestamp_value() const {
  return value_case() == kTimestampValue;
}
inline bool ValueProto::has_timestamp_value() const {
  return _internal_has_timestamp_value();
}
inline void ValueProto::set_has_timestamp_value() {
  _impl_._oneof_case_[0] = kTimestampValue;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ValueProto::release_timestamp_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.timestamp_value)
  if (_internal_has_timestamp_value()) {
    clear_has_value();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.value_.timestamp_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.timestamp_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ValueProto::_internal_timestamp_value() const {
  return _internal_has_timestamp_value()
      ? *_impl_.value_.timestamp_value_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ValueProto::timestamp_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.timestamp_value)
  return _internal_timestamp_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ValueProto::unsafe_arena_release_timestamp_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.timestamp_value)
  if (_internal_has_timestamp_value()) {
    clear_has_value();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.value_.timestamp_value_;
    _impl_.value_.timestamp_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_timestamp_value(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value) {
  clear_value();
  if (timestamp_value) {
    set_has_timestamp_value();
    _impl_.value_.timestamp_value_ = timestamp_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.timestamp_value)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ValueProto::_internal_mutable_timestamp_value() {
  if (!_internal_has_timestamp_value()) {
    clear_value();
    set_has_timestamp_value();
    _impl_.value_.timestamp_value_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.value_.timestamp_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ValueProto::mutable_timestamp_value() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.timestamp_value)
  return _msg;
}

// .zetasql.ValueProto.Datetime datetime_value = 17;
inline bool ValueProto::_internal_has_datetime_value() const {
  return value_case() == kDatetimeValue;
}
inline bool ValueProto::has_datetime_value() const {
  return _internal_has_datetime_value();
}
inline void ValueProto::set_has_datetime_value() {
  _impl_._oneof_case_[0] = kDatetimeValue;
}
inline void ValueProto::clear_datetime_value() {
  if (_internal_has_datetime_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.datetime_value_;
    }
    clear_has_value();
  }
}
inline ::zetasql::ValueProto_Datetime* ValueProto::release_datetime_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.datetime_value)
  if (_internal_has_datetime_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Datetime* temp = _impl_.value_.datetime_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.datetime_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasql::ValueProto_Datetime& ValueProto::_internal_datetime_value() const {
  return _internal_has_datetime_value()
      ? *_impl_.value_.datetime_value_
      : reinterpret_cast< ::zetasql::ValueProto_Datetime&>(::zetasql::_ValueProto_Datetime_default_instance_);
}
inline const ::zetasql::ValueProto_Datetime& ValueProto::datetime_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.datetime_value)
  return _internal_datetime_value();
}
inline ::zetasql::ValueProto_Datetime* ValueProto::unsafe_arena_release_datetime_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.datetime_value)
  if (_internal_has_datetime_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Datetime* temp = _impl_.value_.datetime_value_;
    _impl_.value_.datetime_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_datetime_value(::zetasql::ValueProto_Datetime* datetime_value) {
  clear_value();
  if (datetime_value) {
    set_has_datetime_value();
    _impl_.value_.datetime_value_ = datetime_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.datetime_value)
}
inline ::zetasql::ValueProto_Datetime* ValueProto::_internal_mutable_datetime_value() {
  if (!_internal_has_datetime_value()) {
    clear_value();
    set_has_datetime_value();
    _impl_.value_.datetime_value_ = CreateMaybeMessage< ::zetasql::ValueProto_Datetime >(GetArenaForAllocation());
  }
  return _impl_.value_.datetime_value_;
}
inline ::zetasql::ValueProto_Datetime* ValueProto::mutable_datetime_value() {
  ::zetasql::ValueProto_Datetime* _msg = _internal_mutable_datetime_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.datetime_value)
  return _msg;
}

// int64 time_value = 18;
inline bool ValueProto::_internal_has_time_value() const {
  return value_case() == kTimeValue;
}
inline bool ValueProto::has_time_value() const {
  return _internal_has_time_value();
}
inline void ValueProto::set_has_time_value() {
  _impl_._oneof_case_[0] = kTimeValue;
}
inline void ValueProto::clear_time_value() {
  if (_internal_has_time_value()) {
    _impl_.value_.time_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t ValueProto::_internal_time_value() const {
  if (_internal_has_time_value()) {
    return _impl_.value_.time_value_;
  }
  return int64_t{0};
}
inline void ValueProto::_internal_set_time_value(int64_t value) {
  if (!_internal_has_time_value()) {
    clear_value();
    set_has_time_value();
  }
  _impl_.value_.time_value_ = value;
}
inline int64_t ValueProto::time_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.time_value)
  return _internal_time_value();
}
inline void ValueProto::set_time_value(int64_t value) {
  _internal_set_time_value(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.time_value)
}

// bytes geography_value = 19;
inline bool ValueProto::_internal_has_geography_value() const {
  return value_case() == kGeographyValue;
}
inline bool ValueProto::has_geography_value() const {
  return _internal_has_geography_value();
}
inline void ValueProto::set_has_geography_value() {
  _impl_._oneof_case_[0] = kGeographyValue;
}
inline void ValueProto::clear_geography_value() {
  if (_internal_has_geography_value()) {
    _impl_.value_.geography_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueProto::geography_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.geography_value)
  return _internal_geography_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueProto::set_geography_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_geography_value()) {
    clear_value();
    set_has_geography_value();
    _impl_.value_.geography_value_.InitDefault();
  }
  _impl_.value_.geography_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.geography_value)
}
inline std::string* ValueProto::mutable_geography_value() {
  std::string* _s = _internal_mutable_geography_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.geography_value)
  return _s;
}
inline const std::string& ValueProto::_internal_geography_value() const {
  if (_internal_has_geography_value()) {
    return _impl_.value_.geography_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::_internal_set_geography_value(const std::string& value) {
  if (!_internal_has_geography_value()) {
    clear_value();
    set_has_geography_value();
    _impl_.value_.geography_value_.InitDefault();
  }
  _impl_.value_.geography_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueProto::_internal_mutable_geography_value() {
  if (!_internal_has_geography_value()) {
    clear_value();
    set_has_geography_value();
    _impl_.value_.geography_value_.InitDefault();
  }
  return _impl_.value_.geography_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueProto::release_geography_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.geography_value)
  if (_internal_has_geography_value()) {
    clear_has_value();
    return _impl_.value_.geography_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueProto::set_allocated_geography_value(std::string* geography_value) {
  if (has_value()) {
    clear_value();
  }
  if (geography_value != nullptr) {
    set_has_geography_value();
    _impl_.value_.geography_value_.InitAllocated(geography_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.geography_value)
}

// bytes numeric_value = 20;
inline bool ValueProto::_internal_has_numeric_value() const {
  return value_case() == kNumericValue;
}
inline bool ValueProto::has_numeric_value() const {
  return _internal_has_numeric_value();
}
inline void ValueProto::set_has_numeric_value() {
  _impl_._oneof_case_[0] = kNumericValue;
}
inline void ValueProto::clear_numeric_value() {
  if (_internal_has_numeric_value()) {
    _impl_.value_.numeric_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueProto::numeric_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.numeric_value)
  return _internal_numeric_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueProto::set_numeric_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_numeric_value()) {
    clear_value();
    set_has_numeric_value();
    _impl_.value_.numeric_value_.InitDefault();
  }
  _impl_.value_.numeric_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.numeric_value)
}
inline std::string* ValueProto::mutable_numeric_value() {
  std::string* _s = _internal_mutable_numeric_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.numeric_value)
  return _s;
}
inline const std::string& ValueProto::_internal_numeric_value() const {
  if (_internal_has_numeric_value()) {
    return _impl_.value_.numeric_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::_internal_set_numeric_value(const std::string& value) {
  if (!_internal_has_numeric_value()) {
    clear_value();
    set_has_numeric_value();
    _impl_.value_.numeric_value_.InitDefault();
  }
  _impl_.value_.numeric_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueProto::_internal_mutable_numeric_value() {
  if (!_internal_has_numeric_value()) {
    clear_value();
    set_has_numeric_value();
    _impl_.value_.numeric_value_.InitDefault();
  }
  return _impl_.value_.numeric_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueProto::release_numeric_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.numeric_value)
  if (_internal_has_numeric_value()) {
    clear_has_value();
    return _impl_.value_.numeric_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueProto::set_allocated_numeric_value(std::string* numeric_value) {
  if (has_value()) {
    clear_value();
  }
  if (numeric_value != nullptr) {
    set_has_numeric_value();
    _impl_.value_.numeric_value_.InitAllocated(numeric_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.numeric_value)
}

// bytes bignumeric_value = 21;
inline bool ValueProto::_internal_has_bignumeric_value() const {
  return value_case() == kBignumericValue;
}
inline bool ValueProto::has_bignumeric_value() const {
  return _internal_has_bignumeric_value();
}
inline void ValueProto::set_has_bignumeric_value() {
  _impl_._oneof_case_[0] = kBignumericValue;
}
inline void ValueProto::clear_bignumeric_value() {
  if (_internal_has_bignumeric_value()) {
    _impl_.value_.bignumeric_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueProto::bignumeric_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.bignumeric_value)
  return _internal_bignumeric_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueProto::set_bignumeric_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bignumeric_value()) {
    clear_value();
    set_has_bignumeric_value();
    _impl_.value_.bignumeric_value_.InitDefault();
  }
  _impl_.value_.bignumeric_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.bignumeric_value)
}
inline std::string* ValueProto::mutable_bignumeric_value() {
  std::string* _s = _internal_mutable_bignumeric_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.bignumeric_value)
  return _s;
}
inline const std::string& ValueProto::_internal_bignumeric_value() const {
  if (_internal_has_bignumeric_value()) {
    return _impl_.value_.bignumeric_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::_internal_set_bignumeric_value(const std::string& value) {
  if (!_internal_has_bignumeric_value()) {
    clear_value();
    set_has_bignumeric_value();
    _impl_.value_.bignumeric_value_.InitDefault();
  }
  _impl_.value_.bignumeric_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueProto::_internal_mutable_bignumeric_value() {
  if (!_internal_has_bignumeric_value()) {
    clear_value();
    set_has_bignumeric_value();
    _impl_.value_.bignumeric_value_.InitDefault();
  }
  return _impl_.value_.bignumeric_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueProto::release_bignumeric_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.bignumeric_value)
  if (_internal_has_bignumeric_value()) {
    clear_has_value();
    return _impl_.value_.bignumeric_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueProto::set_allocated_bignumeric_value(std::string* bignumeric_value) {
  if (has_value()) {
    clear_value();
  }
  if (bignumeric_value != nullptr) {
    set_has_bignumeric_value();
    _impl_.value_.bignumeric_value_.InitAllocated(bignumeric_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.bignumeric_value)
}

// string json_value = 23;
inline bool ValueProto::_internal_has_json_value() const {
  return value_case() == kJsonValue;
}
inline bool ValueProto::has_json_value() const {
  return _internal_has_json_value();
}
inline void ValueProto::set_has_json_value() {
  _impl_._oneof_case_[0] = kJsonValue;
}
inline void ValueProto::clear_json_value() {
  if (_internal_has_json_value()) {
    _impl_.value_.json_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueProto::json_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueProto::set_json_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_json_value()) {
    clear_value();
    set_has_json_value();
    _impl_.value_.json_value_.InitDefault();
  }
  _impl_.value_.json_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.json_value)
}
inline std::string* ValueProto::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.json_value)
  return _s;
}
inline const std::string& ValueProto::_internal_json_value() const {
  if (_internal_has_json_value()) {
    return _impl_.value_.json_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::_internal_set_json_value(const std::string& value) {
  if (!_internal_has_json_value()) {
    clear_value();
    set_has_json_value();
    _impl_.value_.json_value_.InitDefault();
  }
  _impl_.value_.json_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueProto::_internal_mutable_json_value() {
  if (!_internal_has_json_value()) {
    clear_value();
    set_has_json_value();
    _impl_.value_.json_value_.InitDefault();
  }
  return _impl_.value_.json_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueProto::release_json_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.json_value)
  if (_internal_has_json_value()) {
    clear_has_value();
    return _impl_.value_.json_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueProto::set_allocated_json_value(std::string* json_value) {
  if (has_value()) {
    clear_value();
  }
  if (json_value != nullptr) {
    set_has_json_value();
    _impl_.value_.json_value_.InitAllocated(json_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.json_value)
}

// bytes interval_value = 24;
inline bool ValueProto::_internal_has_interval_value() const {
  return value_case() == kIntervalValue;
}
inline bool ValueProto::has_interval_value() const {
  return _internal_has_interval_value();
}
inline void ValueProto::set_has_interval_value() {
  _impl_._oneof_case_[0] = kIntervalValue;
}
inline void ValueProto::clear_interval_value() {
  if (_internal_has_interval_value()) {
    _impl_.value_.interval_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ValueProto::interval_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.interval_value)
  return _internal_interval_value();
}
template <typename ArgT0, typename... ArgT>
inline void ValueProto::set_interval_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_interval_value()) {
    clear_value();
    set_has_interval_value();
    _impl_.value_.interval_value_.InitDefault();
  }
  _impl_.value_.interval_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.interval_value)
}
inline std::string* ValueProto::mutable_interval_value() {
  std::string* _s = _internal_mutable_interval_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.interval_value)
  return _s;
}
inline const std::string& ValueProto::_internal_interval_value() const {
  if (_internal_has_interval_value()) {
    return _impl_.value_.interval_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueProto::_internal_set_interval_value(const std::string& value) {
  if (!_internal_has_interval_value()) {
    clear_value();
    set_has_interval_value();
    _impl_.value_.interval_value_.InitDefault();
  }
  _impl_.value_.interval_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ValueProto::_internal_mutable_interval_value() {
  if (!_internal_has_interval_value()) {
    clear_value();
    set_has_interval_value();
    _impl_.value_.interval_value_.InitDefault();
  }
  return _impl_.value_.interval_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ValueProto::release_interval_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.interval_value)
  if (_internal_has_interval_value()) {
    clear_has_value();
    return _impl_.value_.interval_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ValueProto::set_allocated_interval_value(std::string* interval_value) {
  if (has_value()) {
    clear_value();
  }
  if (interval_value != nullptr) {
    set_has_interval_value();
    _impl_.value_.interval_value_.InitAllocated(interval_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.ValueProto.interval_value)
}

// .zetasql.ValueProto.Range range_value = 26;
inline bool ValueProto::_internal_has_range_value() const {
  return value_case() == kRangeValue;
}
inline bool ValueProto::has_range_value() const {
  return _internal_has_range_value();
}
inline void ValueProto::set_has_range_value() {
  _impl_._oneof_case_[0] = kRangeValue;
}
inline void ValueProto::clear_range_value() {
  if (_internal_has_range_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.range_value_;
    }
    clear_has_value();
  }
}
inline ::zetasql::ValueProto_Range* ValueProto::release_range_value() {
  // @@protoc_insertion_point(field_release:zetasql.ValueProto.range_value)
  if (_internal_has_range_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Range* temp = _impl_.value_.range_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.range_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasql::ValueProto_Range& ValueProto::_internal_range_value() const {
  return _internal_has_range_value()
      ? *_impl_.value_.range_value_
      : reinterpret_cast< ::zetasql::ValueProto_Range&>(::zetasql::_ValueProto_Range_default_instance_);
}
inline const ::zetasql::ValueProto_Range& ValueProto::range_value() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.range_value)
  return _internal_range_value();
}
inline ::zetasql::ValueProto_Range* ValueProto::unsafe_arena_release_range_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.ValueProto.range_value)
  if (_internal_has_range_value()) {
    clear_has_value();
    ::zetasql::ValueProto_Range* temp = _impl_.value_.range_value_;
    _impl_.value_.range_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueProto::unsafe_arena_set_allocated_range_value(::zetasql::ValueProto_Range* range_value) {
  clear_value();
  if (range_value) {
    set_has_range_value();
    _impl_.value_.range_value_ = range_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ValueProto.range_value)
}
inline ::zetasql::ValueProto_Range* ValueProto::_internal_mutable_range_value() {
  if (!_internal_has_range_value()) {
    clear_value();
    set_has_range_value();
    _impl_.value_.range_value_ = CreateMaybeMessage< ::zetasql::ValueProto_Range >(GetArenaForAllocation());
  }
  return _impl_.value_.range_value_;
}
inline ::zetasql::ValueProto_Range* ValueProto::mutable_range_value() {
  ::zetasql::ValueProto_Range* _msg = _internal_mutable_range_value();
  // @@protoc_insertion_point(field_mutable:zetasql.ValueProto.range_value)
  return _msg;
}

// bool __ValueProto__switch_must_have_a_default = 255;
inline bool ValueProto::_internal_has___valueproto__switch_must_have_a_default() const {
  return value_case() == kValueProtoSwitchMustHaveADefault;
}
inline bool ValueProto::has___valueproto__switch_must_have_a_default() const {
  return _internal_has___valueproto__switch_must_have_a_default();
}
inline void ValueProto::set_has___valueproto__switch_must_have_a_default() {
  _impl_._oneof_case_[0] = kValueProtoSwitchMustHaveADefault;
}
inline void ValueProto::clear___valueproto__switch_must_have_a_default() {
  if (_internal_has___valueproto__switch_must_have_a_default()) {
    _impl_.value_.__valueproto__switch_must_have_a_default_ = false;
    clear_has_value();
  }
}
inline bool ValueProto::_internal___valueproto__switch_must_have_a_default() const {
  if (_internal_has___valueproto__switch_must_have_a_default()) {
    return _impl_.value_.__valueproto__switch_must_have_a_default_;
  }
  return false;
}
inline void ValueProto::_internal_set___valueproto__switch_must_have_a_default(bool value) {
  if (!_internal_has___valueproto__switch_must_have_a_default()) {
    clear_value();
    set_has___valueproto__switch_must_have_a_default();
  }
  _impl_.value_.__valueproto__switch_must_have_a_default_ = value;
}
inline bool ValueProto::__valueproto__switch_must_have_a_default() const {
  // @@protoc_insertion_point(field_get:zetasql.ValueProto.__ValueProto__switch_must_have_a_default)
  return _internal___valueproto__switch_must_have_a_default();
}
inline void ValueProto::set___valueproto__switch_must_have_a_default(bool value) {
  _internal_set___valueproto__switch_must_have_a_default(value);
  // @@protoc_insertion_point(field_set:zetasql.ValueProto.__ValueProto__switch_must_have_a_default)
}

inline bool ValueProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ValueProto::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline ValueProto::ValueCase ValueProto::value_case() const {
  return ValueProto::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fvalue_2eproto
