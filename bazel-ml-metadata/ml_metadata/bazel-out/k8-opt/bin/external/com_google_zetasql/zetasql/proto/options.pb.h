// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/proto/options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/builtin_function.pb.h"
#include "zetasql/public/options.pb.h"
#include "zetasql/public/type.pb.h"
#include "zetasql/resolved_ast/resolved_node_kind.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fproto_2foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fproto_2foptions_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fproto_2foptions_2eproto;
namespace zetasql {
class AllowedHintsAndOptionsProto;
struct AllowedHintsAndOptionsProtoDefaultTypeInternal;
extern AllowedHintsAndOptionsProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_default_instance_;
class AllowedHintsAndOptionsProto_HintProto;
struct AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal;
extern AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_HintProto_default_instance_;
class AllowedHintsAndOptionsProto_OptionProto;
struct AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal;
extern AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_OptionProto_default_instance_;
class AnalyzerOptionsProto;
struct AnalyzerOptionsProtoDefaultTypeInternal;
extern AnalyzerOptionsProtoDefaultTypeInternal _AnalyzerOptionsProto_default_instance_;
class AnalyzerOptionsProto_QueryParameterProto;
struct AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal;
extern AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal _AnalyzerOptionsProto_QueryParameterProto_default_instance_;
class AnalyzerOptionsProto_SystemVariableProto;
struct AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal;
extern AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal _AnalyzerOptionsProto_SystemVariableProto_default_instance_;
class LanguageOptionsProto;
struct LanguageOptionsProtoDefaultTypeInternal;
extern LanguageOptionsProtoDefaultTypeInternal _LanguageOptionsProto_default_instance_;
class ZetaSQLBuiltinFunctionOptionsProto;
struct ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal;
extern ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal _ZetaSQLBuiltinFunctionOptionsProto_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::AllowedHintsAndOptionsProto* Arena::CreateMaybeMessage<::zetasql::AllowedHintsAndOptionsProto>(Arena*);
template<> ::zetasql::AllowedHintsAndOptionsProto_HintProto* Arena::CreateMaybeMessage<::zetasql::AllowedHintsAndOptionsProto_HintProto>(Arena*);
template<> ::zetasql::AllowedHintsAndOptionsProto_OptionProto* Arena::CreateMaybeMessage<::zetasql::AllowedHintsAndOptionsProto_OptionProto>(Arena*);
template<> ::zetasql::AnalyzerOptionsProto* Arena::CreateMaybeMessage<::zetasql::AnalyzerOptionsProto>(Arena*);
template<> ::zetasql::AnalyzerOptionsProto_QueryParameterProto* Arena::CreateMaybeMessage<::zetasql::AnalyzerOptionsProto_QueryParameterProto>(Arena*);
template<> ::zetasql::AnalyzerOptionsProto_SystemVariableProto* Arena::CreateMaybeMessage<::zetasql::AnalyzerOptionsProto_SystemVariableProto>(Arena*);
template<> ::zetasql::LanguageOptionsProto* Arena::CreateMaybeMessage<::zetasql::LanguageOptionsProto>(Arena*);
template<> ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* Arena::CreateMaybeMessage<::zetasql::ZetaSQLBuiltinFunctionOptionsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class ZetaSQLBuiltinFunctionOptionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ZetaSQLBuiltinFunctionOptionsProto) */ {
 public:
  inline ZetaSQLBuiltinFunctionOptionsProto() : ZetaSQLBuiltinFunctionOptionsProto(nullptr) {}
  ~ZetaSQLBuiltinFunctionOptionsProto() override;
  explicit PROTOBUF_CONSTEXPR ZetaSQLBuiltinFunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZetaSQLBuiltinFunctionOptionsProto(const ZetaSQLBuiltinFunctionOptionsProto& from);
  ZetaSQLBuiltinFunctionOptionsProto(ZetaSQLBuiltinFunctionOptionsProto&& from) noexcept
    : ZetaSQLBuiltinFunctionOptionsProto() {
    *this = ::std::move(from);
  }

  inline ZetaSQLBuiltinFunctionOptionsProto& operator=(const ZetaSQLBuiltinFunctionOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZetaSQLBuiltinFunctionOptionsProto& operator=(ZetaSQLBuiltinFunctionOptionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZetaSQLBuiltinFunctionOptionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZetaSQLBuiltinFunctionOptionsProto* internal_default_instance() {
    return reinterpret_cast<const ZetaSQLBuiltinFunctionOptionsProto*>(
               &_ZetaSQLBuiltinFunctionOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZetaSQLBuiltinFunctionOptionsProto& a, ZetaSQLBuiltinFunctionOptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ZetaSQLBuiltinFunctionOptionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZetaSQLBuiltinFunctionOptionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZetaSQLBuiltinFunctionOptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZetaSQLBuiltinFunctionOptionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZetaSQLBuiltinFunctionOptionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZetaSQLBuiltinFunctionOptionsProto& from) {
    ZetaSQLBuiltinFunctionOptionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZetaSQLBuiltinFunctionOptionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ZetaSQLBuiltinFunctionOptionsProto";
  }
  protected:
  explicit ZetaSQLBuiltinFunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeFunctionIdsFieldNumber = 2,
    kExcludeFunctionIdsFieldNumber = 3,
    kLanguageOptionsFieldNumber = 1,
  };
  // repeated .zetasql.FunctionSignatureId include_function_ids = 2;
  int include_function_ids_size() const;
  private:
  int _internal_include_function_ids_size() const;
  public:
  void clear_include_function_ids();
  private:
  ::zetasql::FunctionSignatureId _internal_include_function_ids(int index) const;
  void _internal_add_include_function_ids(::zetasql::FunctionSignatureId value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_include_function_ids();
  public:
  ::zetasql::FunctionSignatureId include_function_ids(int index) const;
  void set_include_function_ids(int index, ::zetasql::FunctionSignatureId value);
  void add_include_function_ids(::zetasql::FunctionSignatureId value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& include_function_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_include_function_ids();

  // repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
  int exclude_function_ids_size() const;
  private:
  int _internal_exclude_function_ids_size() const;
  public:
  void clear_exclude_function_ids();
  private:
  ::zetasql::FunctionSignatureId _internal_exclude_function_ids(int index) const;
  void _internal_add_exclude_function_ids(::zetasql::FunctionSignatureId value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_exclude_function_ids();
  public:
  ::zetasql::FunctionSignatureId exclude_function_ids(int index) const;
  void set_exclude_function_ids(int index, ::zetasql::FunctionSignatureId value);
  void add_exclude_function_ids(::zetasql::FunctionSignatureId value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& exclude_function_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_exclude_function_ids();

  // optional .zetasql.LanguageOptionsProto language_options = 1;
  bool has_language_options() const;
  private:
  bool _internal_has_language_options() const;
  public:
  void clear_language_options();
  const ::zetasql::LanguageOptionsProto& language_options() const;
  PROTOBUF_NODISCARD ::zetasql::LanguageOptionsProto* release_language_options();
  ::zetasql::LanguageOptionsProto* mutable_language_options();
  void set_allocated_language_options(::zetasql::LanguageOptionsProto* language_options);
  private:
  const ::zetasql::LanguageOptionsProto& _internal_language_options() const;
  ::zetasql::LanguageOptionsProto* _internal_mutable_language_options();
  public:
  void unsafe_arena_set_allocated_language_options(
      ::zetasql::LanguageOptionsProto* language_options);
  ::zetasql::LanguageOptionsProto* unsafe_arena_release_language_options();

  // @@protoc_insertion_point(class_scope:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> include_function_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> exclude_function_ids_;
    ::zetasql::LanguageOptionsProto* language_options_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2foptions_2eproto;
};
// -------------------------------------------------------------------

class LanguageOptionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.LanguageOptionsProto) */ {
 public:
  inline LanguageOptionsProto() : LanguageOptionsProto(nullptr) {}
  ~LanguageOptionsProto() override;
  explicit PROTOBUF_CONSTEXPR LanguageOptionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LanguageOptionsProto(const LanguageOptionsProto& from);
  LanguageOptionsProto(LanguageOptionsProto&& from) noexcept
    : LanguageOptionsProto() {
    *this = ::std::move(from);
  }

  inline LanguageOptionsProto& operator=(const LanguageOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LanguageOptionsProto& operator=(LanguageOptionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LanguageOptionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LanguageOptionsProto* internal_default_instance() {
    return reinterpret_cast<const LanguageOptionsProto*>(
               &_LanguageOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LanguageOptionsProto& a, LanguageOptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LanguageOptionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LanguageOptionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LanguageOptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LanguageOptionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LanguageOptionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LanguageOptionsProto& from) {
    LanguageOptionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanguageOptionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.LanguageOptionsProto";
  }
  protected:
  explicit LanguageOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledLanguageFeaturesFieldNumber = 5,
    kSupportedStatementKindsFieldNumber = 6,
    kSupportedGenericEntityTypesFieldNumber = 7,
    kReservedKeywordsFieldNumber = 8,
    kSupportedGenericSubEntityTypesFieldNumber = 9,
    kNameResolutionModeFieldNumber = 2,
    kProductModeFieldNumber = 3,
    kErrorOnDeprecatedSyntaxFieldNumber = 4,
  };
  // repeated .zetasql.LanguageFeature enabled_language_features = 5;
  int enabled_language_features_size() const;
  private:
  int _internal_enabled_language_features_size() const;
  public:
  void clear_enabled_language_features();
  private:
  ::zetasql::LanguageFeature _internal_enabled_language_features(int index) const;
  void _internal_add_enabled_language_features(::zetasql::LanguageFeature value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enabled_language_features();
  public:
  ::zetasql::LanguageFeature enabled_language_features(int index) const;
  void set_enabled_language_features(int index, ::zetasql::LanguageFeature value);
  void add_enabled_language_features(::zetasql::LanguageFeature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enabled_language_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enabled_language_features();

  // repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
  int supported_statement_kinds_size() const;
  private:
  int _internal_supported_statement_kinds_size() const;
  public:
  void clear_supported_statement_kinds();
  private:
  ::zetasql::ResolvedNodeKind _internal_supported_statement_kinds(int index) const;
  void _internal_add_supported_statement_kinds(::zetasql::ResolvedNodeKind value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_statement_kinds();
  public:
  ::zetasql::ResolvedNodeKind supported_statement_kinds(int index) const;
  void set_supported_statement_kinds(int index, ::zetasql::ResolvedNodeKind value);
  void add_supported_statement_kinds(::zetasql::ResolvedNodeKind value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_statement_kinds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_statement_kinds();

  // repeated string supported_generic_entity_types = 7;
  int supported_generic_entity_types_size() const;
  private:
  int _internal_supported_generic_entity_types_size() const;
  public:
  void clear_supported_generic_entity_types();
  const std::string& supported_generic_entity_types(int index) const;
  std::string* mutable_supported_generic_entity_types(int index);
  void set_supported_generic_entity_types(int index, const std::string& value);
  void set_supported_generic_entity_types(int index, std::string&& value);
  void set_supported_generic_entity_types(int index, const char* value);
  void set_supported_generic_entity_types(int index, const char* value, size_t size);
  std::string* add_supported_generic_entity_types();
  void add_supported_generic_entity_types(const std::string& value);
  void add_supported_generic_entity_types(std::string&& value);
  void add_supported_generic_entity_types(const char* value);
  void add_supported_generic_entity_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& supported_generic_entity_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_supported_generic_entity_types();
  private:
  const std::string& _internal_supported_generic_entity_types(int index) const;
  std::string* _internal_add_supported_generic_entity_types();
  public:

  // repeated string reserved_keywords = 8;
  int reserved_keywords_size() const;
  private:
  int _internal_reserved_keywords_size() const;
  public:
  void clear_reserved_keywords();
  const std::string& reserved_keywords(int index) const;
  std::string* mutable_reserved_keywords(int index);
  void set_reserved_keywords(int index, const std::string& value);
  void set_reserved_keywords(int index, std::string&& value);
  void set_reserved_keywords(int index, const char* value);
  void set_reserved_keywords(int index, const char* value, size_t size);
  std::string* add_reserved_keywords();
  void add_reserved_keywords(const std::string& value);
  void add_reserved_keywords(std::string&& value);
  void add_reserved_keywords(const char* value);
  void add_reserved_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reserved_keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reserved_keywords();
  private:
  const std::string& _internal_reserved_keywords(int index) const;
  std::string* _internal_add_reserved_keywords();
  public:

  // repeated string supported_generic_sub_entity_types = 9;
  int supported_generic_sub_entity_types_size() const;
  private:
  int _internal_supported_generic_sub_entity_types_size() const;
  public:
  void clear_supported_generic_sub_entity_types();
  const std::string& supported_generic_sub_entity_types(int index) const;
  std::string* mutable_supported_generic_sub_entity_types(int index);
  void set_supported_generic_sub_entity_types(int index, const std::string& value);
  void set_supported_generic_sub_entity_types(int index, std::string&& value);
  void set_supported_generic_sub_entity_types(int index, const char* value);
  void set_supported_generic_sub_entity_types(int index, const char* value, size_t size);
  std::string* add_supported_generic_sub_entity_types();
  void add_supported_generic_sub_entity_types(const std::string& value);
  void add_supported_generic_sub_entity_types(std::string&& value);
  void add_supported_generic_sub_entity_types(const char* value);
  void add_supported_generic_sub_entity_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& supported_generic_sub_entity_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_supported_generic_sub_entity_types();
  private:
  const std::string& _internal_supported_generic_sub_entity_types(int index) const;
  std::string* _internal_add_supported_generic_sub_entity_types();
  public:

  // optional .zetasql.NameResolutionMode name_resolution_mode = 2;
  bool has_name_resolution_mode() const;
  private:
  bool _internal_has_name_resolution_mode() const;
  public:
  void clear_name_resolution_mode();
  ::zetasql::NameResolutionMode name_resolution_mode() const;
  void set_name_resolution_mode(::zetasql::NameResolutionMode value);
  private:
  ::zetasql::NameResolutionMode _internal_name_resolution_mode() const;
  void _internal_set_name_resolution_mode(::zetasql::NameResolutionMode value);
  public:

  // optional .zetasql.ProductMode product_mode = 3;
  bool has_product_mode() const;
  private:
  bool _internal_has_product_mode() const;
  public:
  void clear_product_mode();
  ::zetasql::ProductMode product_mode() const;
  void set_product_mode(::zetasql::ProductMode value);
  private:
  ::zetasql::ProductMode _internal_product_mode() const;
  void _internal_set_product_mode(::zetasql::ProductMode value);
  public:

  // optional bool error_on_deprecated_syntax = 4;
  bool has_error_on_deprecated_syntax() const;
  private:
  bool _internal_has_error_on_deprecated_syntax() const;
  public:
  void clear_error_on_deprecated_syntax();
  bool error_on_deprecated_syntax() const;
  void set_error_on_deprecated_syntax(bool value);
  private:
  bool _internal_error_on_deprecated_syntax() const;
  void _internal_set_error_on_deprecated_syntax(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.LanguageOptionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enabled_language_features_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_statement_kinds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> supported_generic_entity_types_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reserved_keywords_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> supported_generic_sub_entity_types_;
    int name_resolution_mode_;
    int product_mode_;
    bool error_on_deprecated_syntax_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2foptions_2eproto;
};
// -------------------------------------------------------------------

class AllowedHintsAndOptionsProto_HintProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.AllowedHintsAndOptionsProto.HintProto) */ {
 public:
  inline AllowedHintsAndOptionsProto_HintProto() : AllowedHintsAndOptionsProto_HintProto(nullptr) {}
  ~AllowedHintsAndOptionsProto_HintProto() override;
  explicit PROTOBUF_CONSTEXPR AllowedHintsAndOptionsProto_HintProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllowedHintsAndOptionsProto_HintProto(const AllowedHintsAndOptionsProto_HintProto& from);
  AllowedHintsAndOptionsProto_HintProto(AllowedHintsAndOptionsProto_HintProto&& from) noexcept
    : AllowedHintsAndOptionsProto_HintProto() {
    *this = ::std::move(from);
  }

  inline AllowedHintsAndOptionsProto_HintProto& operator=(const AllowedHintsAndOptionsProto_HintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowedHintsAndOptionsProto_HintProto& operator=(AllowedHintsAndOptionsProto_HintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllowedHintsAndOptionsProto_HintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllowedHintsAndOptionsProto_HintProto* internal_default_instance() {
    return reinterpret_cast<const AllowedHintsAndOptionsProto_HintProto*>(
               &_AllowedHintsAndOptionsProto_HintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AllowedHintsAndOptionsProto_HintProto& a, AllowedHintsAndOptionsProto_HintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowedHintsAndOptionsProto_HintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowedHintsAndOptionsProto_HintProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllowedHintsAndOptionsProto_HintProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllowedHintsAndOptionsProto_HintProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllowedHintsAndOptionsProto_HintProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllowedHintsAndOptionsProto_HintProto& from) {
    AllowedHintsAndOptionsProto_HintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowedHintsAndOptionsProto_HintProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.AllowedHintsAndOptionsProto.HintProto";
  }
  protected:
  explicit AllowedHintsAndOptionsProto_HintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQualifierFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kAllowUnqualifiedFieldNumber = 4,
  };
  // optional string qualifier = 1;
  bool has_qualifier() const;
  private:
  bool _internal_has_qualifier() const;
  public:
  void clear_qualifier();
  const std::string& qualifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_qualifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_qualifier();
  PROTOBUF_NODISCARD std::string* release_qualifier();
  void set_allocated_qualifier(std::string* qualifier);
  private:
  const std::string& _internal_qualifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_qualifier(const std::string& value);
  std::string* _internal_mutable_qualifier();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .zetasql.TypeProto type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zetasql::TypeProto& type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  ::zetasql::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // optional bool allow_unqualified = 4;
  bool has_allow_unqualified() const;
  private:
  bool _internal_has_allow_unqualified() const;
  public:
  void clear_allow_unqualified();
  bool allow_unqualified() const;
  void set_allow_unqualified(bool value);
  private:
  bool _internal_allow_unqualified() const;
  void _internal_set_allow_unqualified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.AllowedHintsAndOptionsProto.HintProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qualifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::zetasql::TypeProto* type_;
    bool allow_unqualified_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2foptions_2eproto;
};
// -------------------------------------------------------------------

class AllowedHintsAndOptionsProto_OptionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.AllowedHintsAndOptionsProto.OptionProto) */ {
 public:
  inline AllowedHintsAndOptionsProto_OptionProto() : AllowedHintsAndOptionsProto_OptionProto(nullptr) {}
  ~AllowedHintsAndOptionsProto_OptionProto() override;
  explicit PROTOBUF_CONSTEXPR AllowedHintsAndOptionsProto_OptionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllowedHintsAndOptionsProto_OptionProto(const AllowedHintsAndOptionsProto_OptionProto& from);
  AllowedHintsAndOptionsProto_OptionProto(AllowedHintsAndOptionsProto_OptionProto&& from) noexcept
    : AllowedHintsAndOptionsProto_OptionProto() {
    *this = ::std::move(from);
  }

  inline AllowedHintsAndOptionsProto_OptionProto& operator=(const AllowedHintsAndOptionsProto_OptionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowedHintsAndOptionsProto_OptionProto& operator=(AllowedHintsAndOptionsProto_OptionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllowedHintsAndOptionsProto_OptionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllowedHintsAndOptionsProto_OptionProto* internal_default_instance() {
    return reinterpret_cast<const AllowedHintsAndOptionsProto_OptionProto*>(
               &_AllowedHintsAndOptionsProto_OptionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AllowedHintsAndOptionsProto_OptionProto& a, AllowedHintsAndOptionsProto_OptionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowedHintsAndOptionsProto_OptionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowedHintsAndOptionsProto_OptionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllowedHintsAndOptionsProto_OptionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllowedHintsAndOptionsProto_OptionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllowedHintsAndOptionsProto_OptionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllowedHintsAndOptionsProto_OptionProto& from) {
    AllowedHintsAndOptionsProto_OptionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowedHintsAndOptionsProto_OptionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.AllowedHintsAndOptionsProto.OptionProto";
  }
  protected:
  explicit AllowedHintsAndOptionsProto_OptionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zetasql::TypeProto& type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  ::zetasql::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:zetasql.AllowedHintsAndOptionsProto.OptionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::zetasql::TypeProto* type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2foptions_2eproto;
};
// -------------------------------------------------------------------

class AllowedHintsAndOptionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.AllowedHintsAndOptionsProto) */ {
 public:
  inline AllowedHintsAndOptionsProto() : AllowedHintsAndOptionsProto(nullptr) {}
  ~AllowedHintsAndOptionsProto() override;
  explicit PROTOBUF_CONSTEXPR AllowedHintsAndOptionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllowedHintsAndOptionsProto(const AllowedHintsAndOptionsProto& from);
  AllowedHintsAndOptionsProto(AllowedHintsAndOptionsProto&& from) noexcept
    : AllowedHintsAndOptionsProto() {
    *this = ::std::move(from);
  }

  inline AllowedHintsAndOptionsProto& operator=(const AllowedHintsAndOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowedHintsAndOptionsProto& operator=(AllowedHintsAndOptionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllowedHintsAndOptionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllowedHintsAndOptionsProto* internal_default_instance() {
    return reinterpret_cast<const AllowedHintsAndOptionsProto*>(
               &_AllowedHintsAndOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AllowedHintsAndOptionsProto& a, AllowedHintsAndOptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowedHintsAndOptionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowedHintsAndOptionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllowedHintsAndOptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllowedHintsAndOptionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllowedHintsAndOptionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllowedHintsAndOptionsProto& from) {
    AllowedHintsAndOptionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowedHintsAndOptionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.AllowedHintsAndOptionsProto";
  }
  protected:
  explicit AllowedHintsAndOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AllowedHintsAndOptionsProto_HintProto HintProto;
  typedef AllowedHintsAndOptionsProto_OptionProto OptionProto;

  // accessors -------------------------------------------------------

  enum : int {
    kDisallowUnknownHintsWithQualifierFieldNumber = 2,
    kHintFieldNumber = 3,
    kOptionFieldNumber = 4,
    kDisallowUnknownOptionsFieldNumber = 1,
  };
  // repeated string disallow_unknown_hints_with_qualifier = 2;
  int disallow_unknown_hints_with_qualifier_size() const;
  private:
  int _internal_disallow_unknown_hints_with_qualifier_size() const;
  public:
  void clear_disallow_unknown_hints_with_qualifier();
  const std::string& disallow_unknown_hints_with_qualifier(int index) const;
  std::string* mutable_disallow_unknown_hints_with_qualifier(int index);
  void set_disallow_unknown_hints_with_qualifier(int index, const std::string& value);
  void set_disallow_unknown_hints_with_qualifier(int index, std::string&& value);
  void set_disallow_unknown_hints_with_qualifier(int index, const char* value);
  void set_disallow_unknown_hints_with_qualifier(int index, const char* value, size_t size);
  std::string* add_disallow_unknown_hints_with_qualifier();
  void add_disallow_unknown_hints_with_qualifier(const std::string& value);
  void add_disallow_unknown_hints_with_qualifier(std::string&& value);
  void add_disallow_unknown_hints_with_qualifier(const char* value);
  void add_disallow_unknown_hints_with_qualifier(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& disallow_unknown_hints_with_qualifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_disallow_unknown_hints_with_qualifier();
  private:
  const std::string& _internal_disallow_unknown_hints_with_qualifier(int index) const;
  std::string* _internal_add_disallow_unknown_hints_with_qualifier();
  public:

  // repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
  int hint_size() const;
  private:
  int _internal_hint_size() const;
  public:
  void clear_hint();
  ::zetasql::AllowedHintsAndOptionsProto_HintProto* mutable_hint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto >*
      mutable_hint();
  private:
  const ::zetasql::AllowedHintsAndOptionsProto_HintProto& _internal_hint(int index) const;
  ::zetasql::AllowedHintsAndOptionsProto_HintProto* _internal_add_hint();
  public:
  const ::zetasql::AllowedHintsAndOptionsProto_HintProto& hint(int index) const;
  ::zetasql::AllowedHintsAndOptionsProto_HintProto* add_hint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto >&
      hint() const;

  // repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
  int option_size() const;
  private:
  int _internal_option_size() const;
  public:
  void clear_option();
  ::zetasql::AllowedHintsAndOptionsProto_OptionProto* mutable_option(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >*
      mutable_option();
  private:
  const ::zetasql::AllowedHintsAndOptionsProto_OptionProto& _internal_option(int index) const;
  ::zetasql::AllowedHintsAndOptionsProto_OptionProto* _internal_add_option();
  public:
  const ::zetasql::AllowedHintsAndOptionsProto_OptionProto& option(int index) const;
  ::zetasql::AllowedHintsAndOptionsProto_OptionProto* add_option();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >&
      option() const;

  // optional bool disallow_unknown_options = 1;
  bool has_disallow_unknown_options() const;
  private:
  bool _internal_has_disallow_unknown_options() const;
  public:
  void clear_disallow_unknown_options();
  bool disallow_unknown_options() const;
  void set_disallow_unknown_options(bool value);
  private:
  bool _internal_disallow_unknown_options() const;
  void _internal_set_disallow_unknown_options(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.AllowedHintsAndOptionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> disallow_unknown_hints_with_qualifier_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto > hint_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto > option_;
    bool disallow_unknown_options_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2foptions_2eproto;
};
// -------------------------------------------------------------------

class AnalyzerOptionsProto_QueryParameterProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.AnalyzerOptionsProto.QueryParameterProto) */ {
 public:
  inline AnalyzerOptionsProto_QueryParameterProto() : AnalyzerOptionsProto_QueryParameterProto(nullptr) {}
  ~AnalyzerOptionsProto_QueryParameterProto() override;
  explicit PROTOBUF_CONSTEXPR AnalyzerOptionsProto_QueryParameterProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalyzerOptionsProto_QueryParameterProto(const AnalyzerOptionsProto_QueryParameterProto& from);
  AnalyzerOptionsProto_QueryParameterProto(AnalyzerOptionsProto_QueryParameterProto&& from) noexcept
    : AnalyzerOptionsProto_QueryParameterProto() {
    *this = ::std::move(from);
  }

  inline AnalyzerOptionsProto_QueryParameterProto& operator=(const AnalyzerOptionsProto_QueryParameterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyzerOptionsProto_QueryParameterProto& operator=(AnalyzerOptionsProto_QueryParameterProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyzerOptionsProto_QueryParameterProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyzerOptionsProto_QueryParameterProto* internal_default_instance() {
    return reinterpret_cast<const AnalyzerOptionsProto_QueryParameterProto*>(
               &_AnalyzerOptionsProto_QueryParameterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AnalyzerOptionsProto_QueryParameterProto& a, AnalyzerOptionsProto_QueryParameterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalyzerOptionsProto_QueryParameterProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyzerOptionsProto_QueryParameterProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyzerOptionsProto_QueryParameterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalyzerOptionsProto_QueryParameterProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalyzerOptionsProto_QueryParameterProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnalyzerOptionsProto_QueryParameterProto& from) {
    AnalyzerOptionsProto_QueryParameterProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzerOptionsProto_QueryParameterProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.AnalyzerOptionsProto.QueryParameterProto";
  }
  protected:
  explicit AnalyzerOptionsProto_QueryParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zetasql::TypeProto& type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  ::zetasql::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:zetasql.AnalyzerOptionsProto.QueryParameterProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::zetasql::TypeProto* type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2foptions_2eproto;
};
// -------------------------------------------------------------------

class AnalyzerOptionsProto_SystemVariableProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.AnalyzerOptionsProto.SystemVariableProto) */ {
 public:
  inline AnalyzerOptionsProto_SystemVariableProto() : AnalyzerOptionsProto_SystemVariableProto(nullptr) {}
  ~AnalyzerOptionsProto_SystemVariableProto() override;
  explicit PROTOBUF_CONSTEXPR AnalyzerOptionsProto_SystemVariableProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalyzerOptionsProto_SystemVariableProto(const AnalyzerOptionsProto_SystemVariableProto& from);
  AnalyzerOptionsProto_SystemVariableProto(AnalyzerOptionsProto_SystemVariableProto&& from) noexcept
    : AnalyzerOptionsProto_SystemVariableProto() {
    *this = ::std::move(from);
  }

  inline AnalyzerOptionsProto_SystemVariableProto& operator=(const AnalyzerOptionsProto_SystemVariableProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyzerOptionsProto_SystemVariableProto& operator=(AnalyzerOptionsProto_SystemVariableProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyzerOptionsProto_SystemVariableProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyzerOptionsProto_SystemVariableProto* internal_default_instance() {
    return reinterpret_cast<const AnalyzerOptionsProto_SystemVariableProto*>(
               &_AnalyzerOptionsProto_SystemVariableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AnalyzerOptionsProto_SystemVariableProto& a, AnalyzerOptionsProto_SystemVariableProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalyzerOptionsProto_SystemVariableProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyzerOptionsProto_SystemVariableProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyzerOptionsProto_SystemVariableProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalyzerOptionsProto_SystemVariableProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalyzerOptionsProto_SystemVariableProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnalyzerOptionsProto_SystemVariableProto& from) {
    AnalyzerOptionsProto_SystemVariableProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzerOptionsProto_SystemVariableProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.AnalyzerOptionsProto.SystemVariableProto";
  }
  protected:
  explicit AnalyzerOptionsProto_SystemVariableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamePathFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated string name_path = 1;
  int name_path_size() const;
  private:
  int _internal_name_path_size() const;
  public:
  void clear_name_path();
  const std::string& name_path(int index) const;
  std::string* mutable_name_path(int index);
  void set_name_path(int index, const std::string& value);
  void set_name_path(int index, std::string&& value);
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  std::string* add_name_path();
  void add_name_path(const std::string& value);
  void add_name_path(std::string&& value);
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_path();
  private:
  const std::string& _internal_name_path(int index) const;
  std::string* _internal_add_name_path();
  public:

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zetasql::TypeProto& type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  ::zetasql::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:zetasql.AnalyzerOptionsProto.SystemVariableProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_path_;
    ::zetasql::TypeProto* type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2foptions_2eproto;
};
// -------------------------------------------------------------------

class AnalyzerOptionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.AnalyzerOptionsProto) */ {
 public:
  inline AnalyzerOptionsProto() : AnalyzerOptionsProto(nullptr) {}
  ~AnalyzerOptionsProto() override;
  explicit PROTOBUF_CONSTEXPR AnalyzerOptionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalyzerOptionsProto(const AnalyzerOptionsProto& from);
  AnalyzerOptionsProto(AnalyzerOptionsProto&& from) noexcept
    : AnalyzerOptionsProto() {
    *this = ::std::move(from);
  }

  inline AnalyzerOptionsProto& operator=(const AnalyzerOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyzerOptionsProto& operator=(AnalyzerOptionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyzerOptionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyzerOptionsProto* internal_default_instance() {
    return reinterpret_cast<const AnalyzerOptionsProto*>(
               &_AnalyzerOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AnalyzerOptionsProto& a, AnalyzerOptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalyzerOptionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyzerOptionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyzerOptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalyzerOptionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalyzerOptionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnalyzerOptionsProto& from) {
    AnalyzerOptionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzerOptionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.AnalyzerOptionsProto";
  }
  protected:
  explicit AnalyzerOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnalyzerOptionsProto_QueryParameterProto QueryParameterProto;
  typedef AnalyzerOptionsProto_SystemVariableProto SystemVariableProto;

  // accessors -------------------------------------------------------

  enum : int {
    kQueryParametersFieldNumber = 2,
    kExpressionColumnsFieldNumber = 3,
    kPositionalQueryParametersFieldNumber = 12,
    kDdlPseudoColumnsFieldNumber = 15,
    kSystemVariablesFieldNumber = 18,
    kTargetColumnTypesFieldNumber = 19,
    kEnabledRewritesFieldNumber = 21,
    kDefaultTimezoneFieldNumber = 7,
    kDefaultAnonFunctionReportFormatFieldNumber = 25,
    kLanguageOptionsFieldNumber = 1,
    kInScopeExpressionColumnFieldNumber = 4,
    kAllowedHintsAndOptionsFieldNumber = 11,
    kErrorMessageModeFieldNumber = 6,
    kParameterModeFieldNumber = 13,
    kStatementContextFieldNumber = 14,
    kCreateNewColumnForEachProjectedOutputFieldNumber = 20,
    kPruneUnusedColumnsFieldNumber = 9,
    kAllowUndeclaredParametersFieldNumber = 10,
    kPreserveColumnAliasesFieldNumber = 17,
    kParseLocationRecordTypeFieldNumber = 23,
    kPreserveUnnecessaryCastFieldNumber = 24,
    kDefaultAnonKappaValueFieldNumber = 26,
  };
  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
  int query_parameters_size() const;
  private:
  int _internal_query_parameters_size() const;
  public:
  void clear_query_parameters();
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* mutable_query_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
      mutable_query_parameters();
  private:
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& _internal_query_parameters(int index) const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* _internal_add_query_parameters();
  public:
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& query_parameters(int index) const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* add_query_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
      query_parameters() const;

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
  int expression_columns_size() const;
  private:
  int _internal_expression_columns_size() const;
  public:
  void clear_expression_columns();
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* mutable_expression_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
      mutable_expression_columns();
  private:
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& _internal_expression_columns(int index) const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* _internal_add_expression_columns();
  public:
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& expression_columns(int index) const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* add_expression_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
      expression_columns() const;

  // repeated .zetasql.TypeProto positional_query_parameters = 12;
  int positional_query_parameters_size() const;
  private:
  int _internal_positional_query_parameters_size() const;
  public:
  void clear_positional_query_parameters();
  ::zetasql::TypeProto* mutable_positional_query_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto >*
      mutable_positional_query_parameters();
  private:
  const ::zetasql::TypeProto& _internal_positional_query_parameters(int index) const;
  ::zetasql::TypeProto* _internal_add_positional_query_parameters();
  public:
  const ::zetasql::TypeProto& positional_query_parameters(int index) const;
  ::zetasql::TypeProto* add_positional_query_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto >&
      positional_query_parameters() const;

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
  int ddl_pseudo_columns_size() const;
  private:
  int _internal_ddl_pseudo_columns_size() const;
  public:
  void clear_ddl_pseudo_columns();
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* mutable_ddl_pseudo_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
      mutable_ddl_pseudo_columns();
  private:
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& _internal_ddl_pseudo_columns(int index) const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* _internal_add_ddl_pseudo_columns();
  public:
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& ddl_pseudo_columns(int index) const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* add_ddl_pseudo_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
      ddl_pseudo_columns() const;

  // repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
  int system_variables_size() const;
  private:
  int _internal_system_variables_size() const;
  public:
  void clear_system_variables();
  ::zetasql::AnalyzerOptionsProto_SystemVariableProto* mutable_system_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >*
      mutable_system_variables();
  private:
  const ::zetasql::AnalyzerOptionsProto_SystemVariableProto& _internal_system_variables(int index) const;
  ::zetasql::AnalyzerOptionsProto_SystemVariableProto* _internal_add_system_variables();
  public:
  const ::zetasql::AnalyzerOptionsProto_SystemVariableProto& system_variables(int index) const;
  ::zetasql::AnalyzerOptionsProto_SystemVariableProto* add_system_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >&
      system_variables() const;

  // repeated .zetasql.TypeProto target_column_types = 19;
  int target_column_types_size() const;
  private:
  int _internal_target_column_types_size() const;
  public:
  void clear_target_column_types();
  ::zetasql::TypeProto* mutable_target_column_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto >*
      mutable_target_column_types();
  private:
  const ::zetasql::TypeProto& _internal_target_column_types(int index) const;
  ::zetasql::TypeProto* _internal_add_target_column_types();
  public:
  const ::zetasql::TypeProto& target_column_types(int index) const;
  ::zetasql::TypeProto* add_target_column_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto >&
      target_column_types() const;

  // repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
  int enabled_rewrites_size() const;
  private:
  int _internal_enabled_rewrites_size() const;
  public:
  void clear_enabled_rewrites();
  private:
  ::zetasql::ResolvedASTRewrite _internal_enabled_rewrites(int index) const;
  void _internal_add_enabled_rewrites(::zetasql::ResolvedASTRewrite value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enabled_rewrites();
  public:
  ::zetasql::ResolvedASTRewrite enabled_rewrites(int index) const;
  void set_enabled_rewrites(int index, ::zetasql::ResolvedASTRewrite value);
  void add_enabled_rewrites(::zetasql::ResolvedASTRewrite value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enabled_rewrites() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enabled_rewrites();

  // optional string default_timezone = 7;
  bool has_default_timezone() const;
  private:
  bool _internal_has_default_timezone() const;
  public:
  void clear_default_timezone();
  const std::string& default_timezone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_timezone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_timezone();
  PROTOBUF_NODISCARD std::string* release_default_timezone();
  void set_allocated_default_timezone(std::string* default_timezone);
  private:
  const std::string& _internal_default_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_timezone(const std::string& value);
  std::string* _internal_mutable_default_timezone();
  public:

  // optional string default_anon_function_report_format = 25;
  bool has_default_anon_function_report_format() const;
  private:
  bool _internal_has_default_anon_function_report_format() const;
  public:
  void clear_default_anon_function_report_format();
  const std::string& default_anon_function_report_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_anon_function_report_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_anon_function_report_format();
  PROTOBUF_NODISCARD std::string* release_default_anon_function_report_format();
  void set_allocated_default_anon_function_report_format(std::string* default_anon_function_report_format);
  private:
  const std::string& _internal_default_anon_function_report_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_anon_function_report_format(const std::string& value);
  std::string* _internal_mutable_default_anon_function_report_format();
  public:

  // optional .zetasql.LanguageOptionsProto language_options = 1;
  bool has_language_options() const;
  private:
  bool _internal_has_language_options() const;
  public:
  void clear_language_options();
  const ::zetasql::LanguageOptionsProto& language_options() const;
  PROTOBUF_NODISCARD ::zetasql::LanguageOptionsProto* release_language_options();
  ::zetasql::LanguageOptionsProto* mutable_language_options();
  void set_allocated_language_options(::zetasql::LanguageOptionsProto* language_options);
  private:
  const ::zetasql::LanguageOptionsProto& _internal_language_options() const;
  ::zetasql::LanguageOptionsProto* _internal_mutable_language_options();
  public:
  void unsafe_arena_set_allocated_language_options(
      ::zetasql::LanguageOptionsProto* language_options);
  ::zetasql::LanguageOptionsProto* unsafe_arena_release_language_options();

  // optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
  bool has_in_scope_expression_column() const;
  private:
  bool _internal_has_in_scope_expression_column() const;
  public:
  void clear_in_scope_expression_column();
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& in_scope_expression_column() const;
  PROTOBUF_NODISCARD ::zetasql::AnalyzerOptionsProto_QueryParameterProto* release_in_scope_expression_column();
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* mutable_in_scope_expression_column();
  void set_allocated_in_scope_expression_column(::zetasql::AnalyzerOptionsProto_QueryParameterProto* in_scope_expression_column);
  private:
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& _internal_in_scope_expression_column() const;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* _internal_mutable_in_scope_expression_column();
  public:
  void unsafe_arena_set_allocated_in_scope_expression_column(
      ::zetasql::AnalyzerOptionsProto_QueryParameterProto* in_scope_expression_column);
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* unsafe_arena_release_in_scope_expression_column();

  // optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
  bool has_allowed_hints_and_options() const;
  private:
  bool _internal_has_allowed_hints_and_options() const;
  public:
  void clear_allowed_hints_and_options();
  const ::zetasql::AllowedHintsAndOptionsProto& allowed_hints_and_options() const;
  PROTOBUF_NODISCARD ::zetasql::AllowedHintsAndOptionsProto* release_allowed_hints_and_options();
  ::zetasql::AllowedHintsAndOptionsProto* mutable_allowed_hints_and_options();
  void set_allocated_allowed_hints_and_options(::zetasql::AllowedHintsAndOptionsProto* allowed_hints_and_options);
  private:
  const ::zetasql::AllowedHintsAndOptionsProto& _internal_allowed_hints_and_options() const;
  ::zetasql::AllowedHintsAndOptionsProto* _internal_mutable_allowed_hints_and_options();
  public:
  void unsafe_arena_set_allocated_allowed_hints_and_options(
      ::zetasql::AllowedHintsAndOptionsProto* allowed_hints_and_options);
  ::zetasql::AllowedHintsAndOptionsProto* unsafe_arena_release_allowed_hints_and_options();

  // optional .zetasql.ErrorMessageMode error_message_mode = 6;
  bool has_error_message_mode() const;
  private:
  bool _internal_has_error_message_mode() const;
  public:
  void clear_error_message_mode();
  ::zetasql::ErrorMessageMode error_message_mode() const;
  void set_error_message_mode(::zetasql::ErrorMessageMode value);
  private:
  ::zetasql::ErrorMessageMode _internal_error_message_mode() const;
  void _internal_set_error_message_mode(::zetasql::ErrorMessageMode value);
  public:

  // optional .zetasql.ParameterMode parameter_mode = 13;
  bool has_parameter_mode() const;
  private:
  bool _internal_has_parameter_mode() const;
  public:
  void clear_parameter_mode();
  ::zetasql::ParameterMode parameter_mode() const;
  void set_parameter_mode(::zetasql::ParameterMode value);
  private:
  ::zetasql::ParameterMode _internal_parameter_mode() const;
  void _internal_set_parameter_mode(::zetasql::ParameterMode value);
  public:

  // optional .zetasql.StatementContext statement_context = 14;
  bool has_statement_context() const;
  private:
  bool _internal_has_statement_context() const;
  public:
  void clear_statement_context();
  ::zetasql::StatementContext statement_context() const;
  void set_statement_context(::zetasql::StatementContext value);
  private:
  ::zetasql::StatementContext _internal_statement_context() const;
  void _internal_set_statement_context(::zetasql::StatementContext value);
  public:

  // optional bool create_new_column_for_each_projected_output = 20;
  bool has_create_new_column_for_each_projected_output() const;
  private:
  bool _internal_has_create_new_column_for_each_projected_output() const;
  public:
  void clear_create_new_column_for_each_projected_output();
  bool create_new_column_for_each_projected_output() const;
  void set_create_new_column_for_each_projected_output(bool value);
  private:
  bool _internal_create_new_column_for_each_projected_output() const;
  void _internal_set_create_new_column_for_each_projected_output(bool value);
  public:

  // optional bool prune_unused_columns = 9;
  bool has_prune_unused_columns() const;
  private:
  bool _internal_has_prune_unused_columns() const;
  public:
  void clear_prune_unused_columns();
  bool prune_unused_columns() const;
  void set_prune_unused_columns(bool value);
  private:
  bool _internal_prune_unused_columns() const;
  void _internal_set_prune_unused_columns(bool value);
  public:

  // optional bool allow_undeclared_parameters = 10;
  bool has_allow_undeclared_parameters() const;
  private:
  bool _internal_has_allow_undeclared_parameters() const;
  public:
  void clear_allow_undeclared_parameters();
  bool allow_undeclared_parameters() const;
  void set_allow_undeclared_parameters(bool value);
  private:
  bool _internal_allow_undeclared_parameters() const;
  void _internal_set_allow_undeclared_parameters(bool value);
  public:

  // optional bool preserve_column_aliases = 17;
  bool has_preserve_column_aliases() const;
  private:
  bool _internal_has_preserve_column_aliases() const;
  public:
  void clear_preserve_column_aliases();
  bool preserve_column_aliases() const;
  void set_preserve_column_aliases(bool value);
  private:
  bool _internal_preserve_column_aliases() const;
  void _internal_set_preserve_column_aliases(bool value);
  public:

  // optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
  bool has_parse_location_record_type() const;
  private:
  bool _internal_has_parse_location_record_type() const;
  public:
  void clear_parse_location_record_type();
  ::zetasql::ParseLocationRecordType parse_location_record_type() const;
  void set_parse_location_record_type(::zetasql::ParseLocationRecordType value);
  private:
  ::zetasql::ParseLocationRecordType _internal_parse_location_record_type() const;
  void _internal_set_parse_location_record_type(::zetasql::ParseLocationRecordType value);
  public:

  // optional bool preserve_unnecessary_cast = 24;
  bool has_preserve_unnecessary_cast() const;
  private:
  bool _internal_has_preserve_unnecessary_cast() const;
  public:
  void clear_preserve_unnecessary_cast();
  bool preserve_unnecessary_cast() const;
  void set_preserve_unnecessary_cast(bool value);
  private:
  bool _internal_preserve_unnecessary_cast() const;
  void _internal_set_preserve_unnecessary_cast(bool value);
  public:

  // optional int64 default_anon_kappa_value = 26;
  bool has_default_anon_kappa_value() const;
  private:
  bool _internal_has_default_anon_kappa_value() const;
  public:
  void clear_default_anon_kappa_value();
  int64_t default_anon_kappa_value() const;
  void set_default_anon_kappa_value(int64_t value);
  private:
  int64_t _internal_default_anon_kappa_value() const;
  void _internal_set_default_anon_kappa_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.AnalyzerOptionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto > query_parameters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto > expression_columns_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto > positional_query_parameters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto > ddl_pseudo_columns_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto > system_variables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto > target_column_types_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enabled_rewrites_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_timezone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_anon_function_report_format_;
    ::zetasql::LanguageOptionsProto* language_options_;
    ::zetasql::AnalyzerOptionsProto_QueryParameterProto* in_scope_expression_column_;
    ::zetasql::AllowedHintsAndOptionsProto* allowed_hints_and_options_;
    int error_message_mode_;
    int parameter_mode_;
    int statement_context_;
    bool create_new_column_for_each_projected_output_;
    bool prune_unused_columns_;
    bool allow_undeclared_parameters_;
    bool preserve_column_aliases_;
    int parse_location_record_type_;
    bool preserve_unnecessary_cast_;
    int64_t default_anon_kappa_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZetaSQLBuiltinFunctionOptionsProto

// optional .zetasql.LanguageOptionsProto language_options = 1;
inline bool ZetaSQLBuiltinFunctionOptionsProto::_internal_has_language_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.language_options_ != nullptr);
  return value;
}
inline bool ZetaSQLBuiltinFunctionOptionsProto::has_language_options() const {
  return _internal_has_language_options();
}
inline void ZetaSQLBuiltinFunctionOptionsProto::clear_language_options() {
  if (_impl_.language_options_ != nullptr) _impl_.language_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::LanguageOptionsProto& ZetaSQLBuiltinFunctionOptionsProto::_internal_language_options() const {
  const ::zetasql::LanguageOptionsProto* p = _impl_.language_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::LanguageOptionsProto&>(
      ::zetasql::_LanguageOptionsProto_default_instance_);
}
inline const ::zetasql::LanguageOptionsProto& ZetaSQLBuiltinFunctionOptionsProto::language_options() const {
  // @@protoc_insertion_point(field_get:zetasql.ZetaSQLBuiltinFunctionOptionsProto.language_options)
  return _internal_language_options();
}
inline void ZetaSQLBuiltinFunctionOptionsProto::unsafe_arena_set_allocated_language_options(
    ::zetasql::LanguageOptionsProto* language_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.language_options_);
  }
  _impl_.language_options_ = language_options;
  if (language_options) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ZetaSQLBuiltinFunctionOptionsProto.language_options)
}
inline ::zetasql::LanguageOptionsProto* ZetaSQLBuiltinFunctionOptionsProto::release_language_options() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::LanguageOptionsProto* temp = _impl_.language_options_;
  _impl_.language_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::LanguageOptionsProto* ZetaSQLBuiltinFunctionOptionsProto::unsafe_arena_release_language_options() {
  // @@protoc_insertion_point(field_release:zetasql.ZetaSQLBuiltinFunctionOptionsProto.language_options)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::LanguageOptionsProto* temp = _impl_.language_options_;
  _impl_.language_options_ = nullptr;
  return temp;
}
inline ::zetasql::LanguageOptionsProto* ZetaSQLBuiltinFunctionOptionsProto::_internal_mutable_language_options() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.language_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::LanguageOptionsProto>(GetArenaForAllocation());
    _impl_.language_options_ = p;
  }
  return _impl_.language_options_;
}
inline ::zetasql::LanguageOptionsProto* ZetaSQLBuiltinFunctionOptionsProto::mutable_language_options() {
  ::zetasql::LanguageOptionsProto* _msg = _internal_mutable_language_options();
  // @@protoc_insertion_point(field_mutable:zetasql.ZetaSQLBuiltinFunctionOptionsProto.language_options)
  return _msg;
}
inline void ZetaSQLBuiltinFunctionOptionsProto::set_allocated_language_options(::zetasql::LanguageOptionsProto* language_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.language_options_;
  }
  if (language_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(language_options);
    if (message_arena != submessage_arena) {
      language_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, language_options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.language_options_ = language_options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ZetaSQLBuiltinFunctionOptionsProto.language_options)
}

// repeated .zetasql.FunctionSignatureId include_function_ids = 2;
inline int ZetaSQLBuiltinFunctionOptionsProto::_internal_include_function_ids_size() const {
  return _impl_.include_function_ids_.size();
}
inline int ZetaSQLBuiltinFunctionOptionsProto::include_function_ids_size() const {
  return _internal_include_function_ids_size();
}
inline void ZetaSQLBuiltinFunctionOptionsProto::clear_include_function_ids() {
  _impl_.include_function_ids_.Clear();
}
inline ::zetasql::FunctionSignatureId ZetaSQLBuiltinFunctionOptionsProto::_internal_include_function_ids(int index) const {
  return static_cast< ::zetasql::FunctionSignatureId >(_impl_.include_function_ids_.Get(index));
}
inline ::zetasql::FunctionSignatureId ZetaSQLBuiltinFunctionOptionsProto::include_function_ids(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
  return _internal_include_function_ids(index);
}
inline void ZetaSQLBuiltinFunctionOptionsProto::set_include_function_ids(int index, ::zetasql::FunctionSignatureId value) {
  assert(::zetasql::FunctionSignatureId_IsValid(value));
  _impl_.include_function_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
}
inline void ZetaSQLBuiltinFunctionOptionsProto::_internal_add_include_function_ids(::zetasql::FunctionSignatureId value) {
  assert(::zetasql::FunctionSignatureId_IsValid(value));
  _impl_.include_function_ids_.Add(value);
}
inline void ZetaSQLBuiltinFunctionOptionsProto::add_include_function_ids(::zetasql::FunctionSignatureId value) {
  _internal_add_include_function_ids(value);
  // @@protoc_insertion_point(field_add:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ZetaSQLBuiltinFunctionOptionsProto::include_function_ids() const {
  // @@protoc_insertion_point(field_list:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
  return _impl_.include_function_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ZetaSQLBuiltinFunctionOptionsProto::_internal_mutable_include_function_ids() {
  return &_impl_.include_function_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ZetaSQLBuiltinFunctionOptionsProto::mutable_include_function_ids() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ZetaSQLBuiltinFunctionOptionsProto.include_function_ids)
  return _internal_mutable_include_function_ids();
}

// repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
inline int ZetaSQLBuiltinFunctionOptionsProto::_internal_exclude_function_ids_size() const {
  return _impl_.exclude_function_ids_.size();
}
inline int ZetaSQLBuiltinFunctionOptionsProto::exclude_function_ids_size() const {
  return _internal_exclude_function_ids_size();
}
inline void ZetaSQLBuiltinFunctionOptionsProto::clear_exclude_function_ids() {
  _impl_.exclude_function_ids_.Clear();
}
inline ::zetasql::FunctionSignatureId ZetaSQLBuiltinFunctionOptionsProto::_internal_exclude_function_ids(int index) const {
  return static_cast< ::zetasql::FunctionSignatureId >(_impl_.exclude_function_ids_.Get(index));
}
inline ::zetasql::FunctionSignatureId ZetaSQLBuiltinFunctionOptionsProto::exclude_function_ids(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
  return _internal_exclude_function_ids(index);
}
inline void ZetaSQLBuiltinFunctionOptionsProto::set_exclude_function_ids(int index, ::zetasql::FunctionSignatureId value) {
  assert(::zetasql::FunctionSignatureId_IsValid(value));
  _impl_.exclude_function_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
}
inline void ZetaSQLBuiltinFunctionOptionsProto::_internal_add_exclude_function_ids(::zetasql::FunctionSignatureId value) {
  assert(::zetasql::FunctionSignatureId_IsValid(value));
  _impl_.exclude_function_ids_.Add(value);
}
inline void ZetaSQLBuiltinFunctionOptionsProto::add_exclude_function_ids(::zetasql::FunctionSignatureId value) {
  _internal_add_exclude_function_ids(value);
  // @@protoc_insertion_point(field_add:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ZetaSQLBuiltinFunctionOptionsProto::exclude_function_ids() const {
  // @@protoc_insertion_point(field_list:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
  return _impl_.exclude_function_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ZetaSQLBuiltinFunctionOptionsProto::_internal_mutable_exclude_function_ids() {
  return &_impl_.exclude_function_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ZetaSQLBuiltinFunctionOptionsProto::mutable_exclude_function_ids() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ZetaSQLBuiltinFunctionOptionsProto.exclude_function_ids)
  return _internal_mutable_exclude_function_ids();
}

// -------------------------------------------------------------------

// LanguageOptionsProto

// optional .zetasql.NameResolutionMode name_resolution_mode = 2;
inline bool LanguageOptionsProto::_internal_has_name_resolution_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LanguageOptionsProto::has_name_resolution_mode() const {
  return _internal_has_name_resolution_mode();
}
inline void LanguageOptionsProto::clear_name_resolution_mode() {
  _impl_.name_resolution_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::zetasql::NameResolutionMode LanguageOptionsProto::_internal_name_resolution_mode() const {
  return static_cast< ::zetasql::NameResolutionMode >(_impl_.name_resolution_mode_);
}
inline ::zetasql::NameResolutionMode LanguageOptionsProto::name_resolution_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.name_resolution_mode)
  return _internal_name_resolution_mode();
}
inline void LanguageOptionsProto::_internal_set_name_resolution_mode(::zetasql::NameResolutionMode value) {
  assert(::zetasql::NameResolutionMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_resolution_mode_ = value;
}
inline void LanguageOptionsProto::set_name_resolution_mode(::zetasql::NameResolutionMode value) {
  _internal_set_name_resolution_mode(value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.name_resolution_mode)
}

// optional .zetasql.ProductMode product_mode = 3;
inline bool LanguageOptionsProto::_internal_has_product_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LanguageOptionsProto::has_product_mode() const {
  return _internal_has_product_mode();
}
inline void LanguageOptionsProto::clear_product_mode() {
  _impl_.product_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::zetasql::ProductMode LanguageOptionsProto::_internal_product_mode() const {
  return static_cast< ::zetasql::ProductMode >(_impl_.product_mode_);
}
inline ::zetasql::ProductMode LanguageOptionsProto::product_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.product_mode)
  return _internal_product_mode();
}
inline void LanguageOptionsProto::_internal_set_product_mode(::zetasql::ProductMode value) {
  assert(::zetasql::ProductMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.product_mode_ = value;
}
inline void LanguageOptionsProto::set_product_mode(::zetasql::ProductMode value) {
  _internal_set_product_mode(value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.product_mode)
}

// optional bool error_on_deprecated_syntax = 4;
inline bool LanguageOptionsProto::_internal_has_error_on_deprecated_syntax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LanguageOptionsProto::has_error_on_deprecated_syntax() const {
  return _internal_has_error_on_deprecated_syntax();
}
inline void LanguageOptionsProto::clear_error_on_deprecated_syntax() {
  _impl_.error_on_deprecated_syntax_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool LanguageOptionsProto::_internal_error_on_deprecated_syntax() const {
  return _impl_.error_on_deprecated_syntax_;
}
inline bool LanguageOptionsProto::error_on_deprecated_syntax() const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.error_on_deprecated_syntax)
  return _internal_error_on_deprecated_syntax();
}
inline void LanguageOptionsProto::_internal_set_error_on_deprecated_syntax(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_on_deprecated_syntax_ = value;
}
inline void LanguageOptionsProto::set_error_on_deprecated_syntax(bool value) {
  _internal_set_error_on_deprecated_syntax(value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.error_on_deprecated_syntax)
}

// repeated .zetasql.LanguageFeature enabled_language_features = 5;
inline int LanguageOptionsProto::_internal_enabled_language_features_size() const {
  return _impl_.enabled_language_features_.size();
}
inline int LanguageOptionsProto::enabled_language_features_size() const {
  return _internal_enabled_language_features_size();
}
inline void LanguageOptionsProto::clear_enabled_language_features() {
  _impl_.enabled_language_features_.Clear();
}
inline ::zetasql::LanguageFeature LanguageOptionsProto::_internal_enabled_language_features(int index) const {
  return static_cast< ::zetasql::LanguageFeature >(_impl_.enabled_language_features_.Get(index));
}
inline ::zetasql::LanguageFeature LanguageOptionsProto::enabled_language_features(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.enabled_language_features)
  return _internal_enabled_language_features(index);
}
inline void LanguageOptionsProto::set_enabled_language_features(int index, ::zetasql::LanguageFeature value) {
  assert(::zetasql::LanguageFeature_IsValid(value));
  _impl_.enabled_language_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.enabled_language_features)
}
inline void LanguageOptionsProto::_internal_add_enabled_language_features(::zetasql::LanguageFeature value) {
  assert(::zetasql::LanguageFeature_IsValid(value));
  _impl_.enabled_language_features_.Add(value);
}
inline void LanguageOptionsProto::add_enabled_language_features(::zetasql::LanguageFeature value) {
  _internal_add_enabled_language_features(value);
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.enabled_language_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
LanguageOptionsProto::enabled_language_features() const {
  // @@protoc_insertion_point(field_list:zetasql.LanguageOptionsProto.enabled_language_features)
  return _impl_.enabled_language_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
LanguageOptionsProto::_internal_mutable_enabled_language_features() {
  return &_impl_.enabled_language_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
LanguageOptionsProto::mutable_enabled_language_features() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.LanguageOptionsProto.enabled_language_features)
  return _internal_mutable_enabled_language_features();
}

// repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
inline int LanguageOptionsProto::_internal_supported_statement_kinds_size() const {
  return _impl_.supported_statement_kinds_.size();
}
inline int LanguageOptionsProto::supported_statement_kinds_size() const {
  return _internal_supported_statement_kinds_size();
}
inline void LanguageOptionsProto::clear_supported_statement_kinds() {
  _impl_.supported_statement_kinds_.Clear();
}
inline ::zetasql::ResolvedNodeKind LanguageOptionsProto::_internal_supported_statement_kinds(int index) const {
  return static_cast< ::zetasql::ResolvedNodeKind >(_impl_.supported_statement_kinds_.Get(index));
}
inline ::zetasql::ResolvedNodeKind LanguageOptionsProto::supported_statement_kinds(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.supported_statement_kinds)
  return _internal_supported_statement_kinds(index);
}
inline void LanguageOptionsProto::set_supported_statement_kinds(int index, ::zetasql::ResolvedNodeKind value) {
  assert(::zetasql::ResolvedNodeKind_IsValid(value));
  _impl_.supported_statement_kinds_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.supported_statement_kinds)
}
inline void LanguageOptionsProto::_internal_add_supported_statement_kinds(::zetasql::ResolvedNodeKind value) {
  assert(::zetasql::ResolvedNodeKind_IsValid(value));
  _impl_.supported_statement_kinds_.Add(value);
}
inline void LanguageOptionsProto::add_supported_statement_kinds(::zetasql::ResolvedNodeKind value) {
  _internal_add_supported_statement_kinds(value);
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.supported_statement_kinds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
LanguageOptionsProto::supported_statement_kinds() const {
  // @@protoc_insertion_point(field_list:zetasql.LanguageOptionsProto.supported_statement_kinds)
  return _impl_.supported_statement_kinds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
LanguageOptionsProto::_internal_mutable_supported_statement_kinds() {
  return &_impl_.supported_statement_kinds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
LanguageOptionsProto::mutable_supported_statement_kinds() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.LanguageOptionsProto.supported_statement_kinds)
  return _internal_mutable_supported_statement_kinds();
}

// repeated string supported_generic_entity_types = 7;
inline int LanguageOptionsProto::_internal_supported_generic_entity_types_size() const {
  return _impl_.supported_generic_entity_types_.size();
}
inline int LanguageOptionsProto::supported_generic_entity_types_size() const {
  return _internal_supported_generic_entity_types_size();
}
inline void LanguageOptionsProto::clear_supported_generic_entity_types() {
  _impl_.supported_generic_entity_types_.Clear();
}
inline std::string* LanguageOptionsProto::add_supported_generic_entity_types() {
  std::string* _s = _internal_add_supported_generic_entity_types();
  // @@protoc_insertion_point(field_add_mutable:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return _s;
}
inline const std::string& LanguageOptionsProto::_internal_supported_generic_entity_types(int index) const {
  return _impl_.supported_generic_entity_types_.Get(index);
}
inline const std::string& LanguageOptionsProto::supported_generic_entity_types(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return _internal_supported_generic_entity_types(index);
}
inline std::string* LanguageOptionsProto::mutable_supported_generic_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return _impl_.supported_generic_entity_types_.Mutable(index);
}
inline void LanguageOptionsProto::set_supported_generic_entity_types(int index, const std::string& value) {
  _impl_.supported_generic_entity_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline void LanguageOptionsProto::set_supported_generic_entity_types(int index, std::string&& value) {
  _impl_.supported_generic_entity_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline void LanguageOptionsProto::set_supported_generic_entity_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.supported_generic_entity_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline void LanguageOptionsProto::set_supported_generic_entity_types(int index, const char* value, size_t size) {
  _impl_.supported_generic_entity_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline std::string* LanguageOptionsProto::_internal_add_supported_generic_entity_types() {
  return _impl_.supported_generic_entity_types_.Add();
}
inline void LanguageOptionsProto::add_supported_generic_entity_types(const std::string& value) {
  _impl_.supported_generic_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline void LanguageOptionsProto::add_supported_generic_entity_types(std::string&& value) {
  _impl_.supported_generic_entity_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline void LanguageOptionsProto::add_supported_generic_entity_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.supported_generic_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline void LanguageOptionsProto::add_supported_generic_entity_types(const char* value, size_t size) {
  _impl_.supported_generic_entity_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.LanguageOptionsProto.supported_generic_entity_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LanguageOptionsProto::supported_generic_entity_types() const {
  // @@protoc_insertion_point(field_list:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return _impl_.supported_generic_entity_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LanguageOptionsProto::mutable_supported_generic_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.LanguageOptionsProto.supported_generic_entity_types)
  return &_impl_.supported_generic_entity_types_;
}

// repeated string reserved_keywords = 8;
inline int LanguageOptionsProto::_internal_reserved_keywords_size() const {
  return _impl_.reserved_keywords_.size();
}
inline int LanguageOptionsProto::reserved_keywords_size() const {
  return _internal_reserved_keywords_size();
}
inline void LanguageOptionsProto::clear_reserved_keywords() {
  _impl_.reserved_keywords_.Clear();
}
inline std::string* LanguageOptionsProto::add_reserved_keywords() {
  std::string* _s = _internal_add_reserved_keywords();
  // @@protoc_insertion_point(field_add_mutable:zetasql.LanguageOptionsProto.reserved_keywords)
  return _s;
}
inline const std::string& LanguageOptionsProto::_internal_reserved_keywords(int index) const {
  return _impl_.reserved_keywords_.Get(index);
}
inline const std::string& LanguageOptionsProto::reserved_keywords(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.reserved_keywords)
  return _internal_reserved_keywords(index);
}
inline std::string* LanguageOptionsProto::mutable_reserved_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.LanguageOptionsProto.reserved_keywords)
  return _impl_.reserved_keywords_.Mutable(index);
}
inline void LanguageOptionsProto::set_reserved_keywords(int index, const std::string& value) {
  _impl_.reserved_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline void LanguageOptionsProto::set_reserved_keywords(int index, std::string&& value) {
  _impl_.reserved_keywords_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline void LanguageOptionsProto::set_reserved_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reserved_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline void LanguageOptionsProto::set_reserved_keywords(int index, const char* value, size_t size) {
  _impl_.reserved_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline std::string* LanguageOptionsProto::_internal_add_reserved_keywords() {
  return _impl_.reserved_keywords_.Add();
}
inline void LanguageOptionsProto::add_reserved_keywords(const std::string& value) {
  _impl_.reserved_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline void LanguageOptionsProto::add_reserved_keywords(std::string&& value) {
  _impl_.reserved_keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline void LanguageOptionsProto::add_reserved_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reserved_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline void LanguageOptionsProto::add_reserved_keywords(const char* value, size_t size) {
  _impl_.reserved_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.LanguageOptionsProto.reserved_keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LanguageOptionsProto::reserved_keywords() const {
  // @@protoc_insertion_point(field_list:zetasql.LanguageOptionsProto.reserved_keywords)
  return _impl_.reserved_keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LanguageOptionsProto::mutable_reserved_keywords() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.LanguageOptionsProto.reserved_keywords)
  return &_impl_.reserved_keywords_;
}

// repeated string supported_generic_sub_entity_types = 9;
inline int LanguageOptionsProto::_internal_supported_generic_sub_entity_types_size() const {
  return _impl_.supported_generic_sub_entity_types_.size();
}
inline int LanguageOptionsProto::supported_generic_sub_entity_types_size() const {
  return _internal_supported_generic_sub_entity_types_size();
}
inline void LanguageOptionsProto::clear_supported_generic_sub_entity_types() {
  _impl_.supported_generic_sub_entity_types_.Clear();
}
inline std::string* LanguageOptionsProto::add_supported_generic_sub_entity_types() {
  std::string* _s = _internal_add_supported_generic_sub_entity_types();
  // @@protoc_insertion_point(field_add_mutable:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
  return _s;
}
inline const std::string& LanguageOptionsProto::_internal_supported_generic_sub_entity_types(int index) const {
  return _impl_.supported_generic_sub_entity_types_.Get(index);
}
inline const std::string& LanguageOptionsProto::supported_generic_sub_entity_types(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
  return _internal_supported_generic_sub_entity_types(index);
}
inline std::string* LanguageOptionsProto::mutable_supported_generic_sub_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
  return _impl_.supported_generic_sub_entity_types_.Mutable(index);
}
inline void LanguageOptionsProto::set_supported_generic_sub_entity_types(int index, const std::string& value) {
  _impl_.supported_generic_sub_entity_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
}
inline void LanguageOptionsProto::set_supported_generic_sub_entity_types(int index, std::string&& value) {
  _impl_.supported_generic_sub_entity_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
}
inline void LanguageOptionsProto::set_supported_generic_sub_entity_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.supported_generic_sub_entity_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
}
inline void LanguageOptionsProto::set_supported_generic_sub_entity_types(int index, const char* value, size_t size) {
  _impl_.supported_generic_sub_entity_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
}
inline std::string* LanguageOptionsProto::_internal_add_supported_generic_sub_entity_types() {
  return _impl_.supported_generic_sub_entity_types_.Add();
}
inline void LanguageOptionsProto::add_supported_generic_sub_entity_types(const std::string& value) {
  _impl_.supported_generic_sub_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
}
inline void LanguageOptionsProto::add_supported_generic_sub_entity_types(std::string&& value) {
  _impl_.supported_generic_sub_entity_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
}
inline void LanguageOptionsProto::add_supported_generic_sub_entity_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.supported_generic_sub_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
}
inline void LanguageOptionsProto::add_supported_generic_sub_entity_types(const char* value, size_t size) {
  _impl_.supported_generic_sub_entity_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LanguageOptionsProto::supported_generic_sub_entity_types() const {
  // @@protoc_insertion_point(field_list:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
  return _impl_.supported_generic_sub_entity_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LanguageOptionsProto::mutable_supported_generic_sub_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.LanguageOptionsProto.supported_generic_sub_entity_types)
  return &_impl_.supported_generic_sub_entity_types_;
}

// -------------------------------------------------------------------

// AllowedHintsAndOptionsProto_HintProto

// optional string qualifier = 1;
inline bool AllowedHintsAndOptionsProto_HintProto::_internal_has_qualifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllowedHintsAndOptionsProto_HintProto::has_qualifier() const {
  return _internal_has_qualifier();
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_qualifier() {
  _impl_.qualifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AllowedHintsAndOptionsProto_HintProto::qualifier() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
  return _internal_qualifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllowedHintsAndOptionsProto_HintProto::set_qualifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.qualifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
}
inline std::string* AllowedHintsAndOptionsProto_HintProto::mutable_qualifier() {
  std::string* _s = _internal_mutable_qualifier();
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
  return _s;
}
inline const std::string& AllowedHintsAndOptionsProto_HintProto::_internal_qualifier() const {
  return _impl_.qualifier_.Get();
}
inline void AllowedHintsAndOptionsProto_HintProto::_internal_set_qualifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.qualifier_.Set(value, GetArenaForAllocation());
}
inline std::string* AllowedHintsAndOptionsProto_HintProto::_internal_mutable_qualifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.qualifier_.Mutable(GetArenaForAllocation());
}
inline std::string* AllowedHintsAndOptionsProto_HintProto::release_qualifier() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
  if (!_internal_has_qualifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.qualifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.qualifier_.IsDefault()) {
    _impl_.qualifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_allocated_qualifier(std::string* qualifier) {
  if (qualifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.qualifier_.SetAllocated(qualifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.qualifier_.IsDefault()) {
    _impl_.qualifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier)
}

// optional string name = 2;
inline bool AllowedHintsAndOptionsProto_HintProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AllowedHintsAndOptionsProto_HintProto::has_name() const {
  return _internal_has_name();
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AllowedHintsAndOptionsProto_HintProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllowedHintsAndOptionsProto_HintProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
}
inline std::string* AllowedHintsAndOptionsProto_HintProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
  return _s;
}
inline const std::string& AllowedHintsAndOptionsProto_HintProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AllowedHintsAndOptionsProto_HintProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AllowedHintsAndOptionsProto_HintProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AllowedHintsAndOptionsProto_HintProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.HintProto.name)
}

// optional .zetasql.TypeProto type = 3;
inline bool AllowedHintsAndOptionsProto_HintProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool AllowedHintsAndOptionsProto_HintProto::has_type() const {
  return _internal_has_type();
}
inline const ::zetasql::TypeProto& AllowedHintsAndOptionsProto_HintProto::_internal_type() const {
  const ::zetasql::TypeProto* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& AllowedHintsAndOptionsProto_HintProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.HintProto.type)
  return _internal_type();
}
inline void AllowedHintsAndOptionsProto_HintProto::unsafe_arena_set_allocated_type(
    ::zetasql::TypeProto* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AllowedHintsAndOptionsProto.HintProto.type)
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_HintProto::release_type() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_HintProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.HintProto.type)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_HintProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_HintProto::mutable_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.HintProto.type)
  return _msg;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.HintProto.type)
}

// optional bool allow_unqualified = 4;
inline bool AllowedHintsAndOptionsProto_HintProto::_internal_has_allow_unqualified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AllowedHintsAndOptionsProto_HintProto::has_allow_unqualified() const {
  return _internal_has_allow_unqualified();
}
inline void AllowedHintsAndOptionsProto_HintProto::clear_allow_unqualified() {
  _impl_.allow_unqualified_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool AllowedHintsAndOptionsProto_HintProto::_internal_allow_unqualified() const {
  return _impl_.allow_unqualified_;
}
inline bool AllowedHintsAndOptionsProto_HintProto::allow_unqualified() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.HintProto.allow_unqualified)
  return _internal_allow_unqualified();
}
inline void AllowedHintsAndOptionsProto_HintProto::_internal_set_allow_unqualified(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.allow_unqualified_ = value;
}
inline void AllowedHintsAndOptionsProto_HintProto::set_allow_unqualified(bool value) {
  _internal_set_allow_unqualified(value);
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.HintProto.allow_unqualified)
}

// -------------------------------------------------------------------

// AllowedHintsAndOptionsProto_OptionProto

// optional string name = 1;
inline bool AllowedHintsAndOptionsProto_OptionProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllowedHintsAndOptionsProto_OptionProto::has_name() const {
  return _internal_has_name();
}
inline void AllowedHintsAndOptionsProto_OptionProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AllowedHintsAndOptionsProto_OptionProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllowedHintsAndOptionsProto_OptionProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
}
inline std::string* AllowedHintsAndOptionsProto_OptionProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
  return _s;
}
inline const std::string& AllowedHintsAndOptionsProto_OptionProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AllowedHintsAndOptionsProto_OptionProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AllowedHintsAndOptionsProto_OptionProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AllowedHintsAndOptionsProto_OptionProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AllowedHintsAndOptionsProto_OptionProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.OptionProto.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool AllowedHintsAndOptionsProto_OptionProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool AllowedHintsAndOptionsProto_OptionProto::has_type() const {
  return _internal_has_type();
}
inline const ::zetasql::TypeProto& AllowedHintsAndOptionsProto_OptionProto::_internal_type() const {
  const ::zetasql::TypeProto* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& AllowedHintsAndOptionsProto_OptionProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.OptionProto.type)
  return _internal_type();
}
inline void AllowedHintsAndOptionsProto_OptionProto::unsafe_arena_set_allocated_type(
    ::zetasql::TypeProto* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AllowedHintsAndOptionsProto.OptionProto.type)
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_OptionProto::release_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_OptionProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zetasql.AllowedHintsAndOptionsProto.OptionProto.type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_OptionProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::zetasql::TypeProto* AllowedHintsAndOptionsProto_OptionProto::mutable_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.OptionProto.type)
  return _msg;
}
inline void AllowedHintsAndOptionsProto_OptionProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AllowedHintsAndOptionsProto.OptionProto.type)
}

// -------------------------------------------------------------------

// AllowedHintsAndOptionsProto

// optional bool disallow_unknown_options = 1;
inline bool AllowedHintsAndOptionsProto::_internal_has_disallow_unknown_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllowedHintsAndOptionsProto::has_disallow_unknown_options() const {
  return _internal_has_disallow_unknown_options();
}
inline void AllowedHintsAndOptionsProto::clear_disallow_unknown_options() {
  _impl_.disallow_unknown_options_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool AllowedHintsAndOptionsProto::_internal_disallow_unknown_options() const {
  return _impl_.disallow_unknown_options_;
}
inline bool AllowedHintsAndOptionsProto::disallow_unknown_options() const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_options)
  return _internal_disallow_unknown_options();
}
inline void AllowedHintsAndOptionsProto::_internal_set_disallow_unknown_options(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.disallow_unknown_options_ = value;
}
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_options(bool value) {
  _internal_set_disallow_unknown_options(value);
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_options)
}

// repeated string disallow_unknown_hints_with_qualifier = 2;
inline int AllowedHintsAndOptionsProto::_internal_disallow_unknown_hints_with_qualifier_size() const {
  return _impl_.disallow_unknown_hints_with_qualifier_.size();
}
inline int AllowedHintsAndOptionsProto::disallow_unknown_hints_with_qualifier_size() const {
  return _internal_disallow_unknown_hints_with_qualifier_size();
}
inline void AllowedHintsAndOptionsProto::clear_disallow_unknown_hints_with_qualifier() {
  _impl_.disallow_unknown_hints_with_qualifier_.Clear();
}
inline std::string* AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier() {
  std::string* _s = _internal_add_disallow_unknown_hints_with_qualifier();
  // @@protoc_insertion_point(field_add_mutable:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return _s;
}
inline const std::string& AllowedHintsAndOptionsProto::_internal_disallow_unknown_hints_with_qualifier(int index) const {
  return _impl_.disallow_unknown_hints_with_qualifier_.Get(index);
}
inline const std::string& AllowedHintsAndOptionsProto::disallow_unknown_hints_with_qualifier(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return _internal_disallow_unknown_hints_with_qualifier(index);
}
inline std::string* AllowedHintsAndOptionsProto::mutable_disallow_unknown_hints_with_qualifier(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return _impl_.disallow_unknown_hints_with_qualifier_.Mutable(index);
}
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_hints_with_qualifier(int index, const std::string& value) {
  _impl_.disallow_unknown_hints_with_qualifier_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_hints_with_qualifier(int index, std::string&& value) {
  _impl_.disallow_unknown_hints_with_qualifier_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_hints_with_qualifier(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.disallow_unknown_hints_with_qualifier_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline void AllowedHintsAndOptionsProto::set_disallow_unknown_hints_with_qualifier(int index, const char* value, size_t size) {
  _impl_.disallow_unknown_hints_with_qualifier_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline std::string* AllowedHintsAndOptionsProto::_internal_add_disallow_unknown_hints_with_qualifier() {
  return _impl_.disallow_unknown_hints_with_qualifier_.Add();
}
inline void AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier(const std::string& value) {
  _impl_.disallow_unknown_hints_with_qualifier_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline void AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier(std::string&& value) {
  _impl_.disallow_unknown_hints_with_qualifier_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline void AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.disallow_unknown_hints_with_qualifier_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline void AllowedHintsAndOptionsProto::add_disallow_unknown_hints_with_qualifier(const char* value, size_t size) {
  _impl_.disallow_unknown_hints_with_qualifier_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AllowedHintsAndOptionsProto::disallow_unknown_hints_with_qualifier() const {
  // @@protoc_insertion_point(field_list:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return _impl_.disallow_unknown_hints_with_qualifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AllowedHintsAndOptionsProto::mutable_disallow_unknown_hints_with_qualifier() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier)
  return &_impl_.disallow_unknown_hints_with_qualifier_;
}

// repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
inline int AllowedHintsAndOptionsProto::_internal_hint_size() const {
  return _impl_.hint_.size();
}
inline int AllowedHintsAndOptionsProto::hint_size() const {
  return _internal_hint_size();
}
inline void AllowedHintsAndOptionsProto::clear_hint() {
  _impl_.hint_.Clear();
}
inline ::zetasql::AllowedHintsAndOptionsProto_HintProto* AllowedHintsAndOptionsProto::mutable_hint(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.hint)
  return _impl_.hint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto >*
AllowedHintsAndOptionsProto::mutable_hint() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AllowedHintsAndOptionsProto.hint)
  return &_impl_.hint_;
}
inline const ::zetasql::AllowedHintsAndOptionsProto_HintProto& AllowedHintsAndOptionsProto::_internal_hint(int index) const {
  return _impl_.hint_.Get(index);
}
inline const ::zetasql::AllowedHintsAndOptionsProto_HintProto& AllowedHintsAndOptionsProto::hint(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.hint)
  return _internal_hint(index);
}
inline ::zetasql::AllowedHintsAndOptionsProto_HintProto* AllowedHintsAndOptionsProto::_internal_add_hint() {
  return _impl_.hint_.Add();
}
inline ::zetasql::AllowedHintsAndOptionsProto_HintProto* AllowedHintsAndOptionsProto::add_hint() {
  ::zetasql::AllowedHintsAndOptionsProto_HintProto* _add = _internal_add_hint();
  // @@protoc_insertion_point(field_add:zetasql.AllowedHintsAndOptionsProto.hint)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_HintProto >&
AllowedHintsAndOptionsProto::hint() const {
  // @@protoc_insertion_point(field_list:zetasql.AllowedHintsAndOptionsProto.hint)
  return _impl_.hint_;
}

// repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
inline int AllowedHintsAndOptionsProto::_internal_option_size() const {
  return _impl_.option_.size();
}
inline int AllowedHintsAndOptionsProto::option_size() const {
  return _internal_option_size();
}
inline void AllowedHintsAndOptionsProto::clear_option() {
  _impl_.option_.Clear();
}
inline ::zetasql::AllowedHintsAndOptionsProto_OptionProto* AllowedHintsAndOptionsProto::mutable_option(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AllowedHintsAndOptionsProto.option)
  return _impl_.option_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >*
AllowedHintsAndOptionsProto::mutable_option() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AllowedHintsAndOptionsProto.option)
  return &_impl_.option_;
}
inline const ::zetasql::AllowedHintsAndOptionsProto_OptionProto& AllowedHintsAndOptionsProto::_internal_option(int index) const {
  return _impl_.option_.Get(index);
}
inline const ::zetasql::AllowedHintsAndOptionsProto_OptionProto& AllowedHintsAndOptionsProto::option(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AllowedHintsAndOptionsProto.option)
  return _internal_option(index);
}
inline ::zetasql::AllowedHintsAndOptionsProto_OptionProto* AllowedHintsAndOptionsProto::_internal_add_option() {
  return _impl_.option_.Add();
}
inline ::zetasql::AllowedHintsAndOptionsProto_OptionProto* AllowedHintsAndOptionsProto::add_option() {
  ::zetasql::AllowedHintsAndOptionsProto_OptionProto* _add = _internal_add_option();
  // @@protoc_insertion_point(field_add:zetasql.AllowedHintsAndOptionsProto.option)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >&
AllowedHintsAndOptionsProto::option() const {
  // @@protoc_insertion_point(field_list:zetasql.AllowedHintsAndOptionsProto.option)
  return _impl_.option_;
}

// -------------------------------------------------------------------

// AnalyzerOptionsProto_QueryParameterProto

// optional string name = 1;
inline bool AnalyzerOptionsProto_QueryParameterProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto_QueryParameterProto::has_name() const {
  return _internal_has_name();
}
inline void AnalyzerOptionsProto_QueryParameterProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AnalyzerOptionsProto_QueryParameterProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnalyzerOptionsProto_QueryParameterProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
}
inline std::string* AnalyzerOptionsProto_QueryParameterProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
  return _s;
}
inline const std::string& AnalyzerOptionsProto_QueryParameterProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AnalyzerOptionsProto_QueryParameterProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AnalyzerOptionsProto_QueryParameterProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AnalyzerOptionsProto_QueryParameterProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AnalyzerOptionsProto_QueryParameterProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.QueryParameterProto.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool AnalyzerOptionsProto_QueryParameterProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool AnalyzerOptionsProto_QueryParameterProto::has_type() const {
  return _internal_has_type();
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto_QueryParameterProto::_internal_type() const {
  const ::zetasql::TypeProto* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto_QueryParameterProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.QueryParameterProto.type)
  return _internal_type();
}
inline void AnalyzerOptionsProto_QueryParameterProto::unsafe_arena_set_allocated_type(
    ::zetasql::TypeProto* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AnalyzerOptionsProto.QueryParameterProto.type)
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_QueryParameterProto::release_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_QueryParameterProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.QueryParameterProto.type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_QueryParameterProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_QueryParameterProto::mutable_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.QueryParameterProto.type)
  return _msg;
}
inline void AnalyzerOptionsProto_QueryParameterProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.QueryParameterProto.type)
}

// -------------------------------------------------------------------

// AnalyzerOptionsProto_SystemVariableProto

// repeated string name_path = 1;
inline int AnalyzerOptionsProto_SystemVariableProto::_internal_name_path_size() const {
  return _impl_.name_path_.size();
}
inline int AnalyzerOptionsProto_SystemVariableProto::name_path_size() const {
  return _internal_name_path_size();
}
inline void AnalyzerOptionsProto_SystemVariableProto::clear_name_path() {
  _impl_.name_path_.Clear();
}
inline std::string* AnalyzerOptionsProto_SystemVariableProto::add_name_path() {
  std::string* _s = _internal_add_name_path();
  // @@protoc_insertion_point(field_add_mutable:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return _s;
}
inline const std::string& AnalyzerOptionsProto_SystemVariableProto::_internal_name_path(int index) const {
  return _impl_.name_path_.Get(index);
}
inline const std::string& AnalyzerOptionsProto_SystemVariableProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return _internal_name_path(index);
}
inline std::string* AnalyzerOptionsProto_SystemVariableProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return _impl_.name_path_.Mutable(index);
}
inline void AnalyzerOptionsProto_SystemVariableProto::set_name_path(int index, const std::string& value) {
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline void AnalyzerOptionsProto_SystemVariableProto::set_name_path(int index, std::string&& value) {
  _impl_.name_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline void AnalyzerOptionsProto_SystemVariableProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline void AnalyzerOptionsProto_SystemVariableProto::set_name_path(int index, const char* value, size_t size) {
  _impl_.name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline std::string* AnalyzerOptionsProto_SystemVariableProto::_internal_add_name_path() {
  return _impl_.name_path_.Add();
}
inline void AnalyzerOptionsProto_SystemVariableProto::add_name_path(const std::string& value) {
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline void AnalyzerOptionsProto_SystemVariableProto::add_name_path(std::string&& value) {
  _impl_.name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline void AnalyzerOptionsProto_SystemVariableProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline void AnalyzerOptionsProto_SystemVariableProto::add_name_path(const char* value, size_t size) {
  _impl_.name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnalyzerOptionsProto_SystemVariableProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return _impl_.name_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnalyzerOptionsProto_SystemVariableProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path)
  return &_impl_.name_path_;
}

// optional .zetasql.TypeProto type = 2;
inline bool AnalyzerOptionsProto_SystemVariableProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool AnalyzerOptionsProto_SystemVariableProto::has_type() const {
  return _internal_has_type();
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto_SystemVariableProto::_internal_type() const {
  const ::zetasql::TypeProto* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto_SystemVariableProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.SystemVariableProto.type)
  return _internal_type();
}
inline void AnalyzerOptionsProto_SystemVariableProto::unsafe_arena_set_allocated_type(
    ::zetasql::TypeProto* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AnalyzerOptionsProto.SystemVariableProto.type)
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_SystemVariableProto::release_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_SystemVariableProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.SystemVariableProto.type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_SystemVariableProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto_SystemVariableProto::mutable_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.SystemVariableProto.type)
  return _msg;
}
inline void AnalyzerOptionsProto_SystemVariableProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.SystemVariableProto.type)
}

// -------------------------------------------------------------------

// AnalyzerOptionsProto

// optional .zetasql.LanguageOptionsProto language_options = 1;
inline bool AnalyzerOptionsProto::_internal_has_language_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.language_options_ != nullptr);
  return value;
}
inline bool AnalyzerOptionsProto::has_language_options() const {
  return _internal_has_language_options();
}
inline void AnalyzerOptionsProto::clear_language_options() {
  if (_impl_.language_options_ != nullptr) _impl_.language_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::LanguageOptionsProto& AnalyzerOptionsProto::_internal_language_options() const {
  const ::zetasql::LanguageOptionsProto* p = _impl_.language_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::LanguageOptionsProto&>(
      ::zetasql::_LanguageOptionsProto_default_instance_);
}
inline const ::zetasql::LanguageOptionsProto& AnalyzerOptionsProto::language_options() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.language_options)
  return _internal_language_options();
}
inline void AnalyzerOptionsProto::unsafe_arena_set_allocated_language_options(
    ::zetasql::LanguageOptionsProto* language_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.language_options_);
  }
  _impl_.language_options_ = language_options;
  if (language_options) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AnalyzerOptionsProto.language_options)
}
inline ::zetasql::LanguageOptionsProto* AnalyzerOptionsProto::release_language_options() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::LanguageOptionsProto* temp = _impl_.language_options_;
  _impl_.language_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::LanguageOptionsProto* AnalyzerOptionsProto::unsafe_arena_release_language_options() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.language_options)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::LanguageOptionsProto* temp = _impl_.language_options_;
  _impl_.language_options_ = nullptr;
  return temp;
}
inline ::zetasql::LanguageOptionsProto* AnalyzerOptionsProto::_internal_mutable_language_options() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.language_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::LanguageOptionsProto>(GetArenaForAllocation());
    _impl_.language_options_ = p;
  }
  return _impl_.language_options_;
}
inline ::zetasql::LanguageOptionsProto* AnalyzerOptionsProto::mutable_language_options() {
  ::zetasql::LanguageOptionsProto* _msg = _internal_mutable_language_options();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.language_options)
  return _msg;
}
inline void AnalyzerOptionsProto::set_allocated_language_options(::zetasql::LanguageOptionsProto* language_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.language_options_;
  }
  if (language_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(language_options);
    if (message_arena != submessage_arena) {
      language_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, language_options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.language_options_ = language_options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.language_options)
}

// repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
inline int AnalyzerOptionsProto::_internal_query_parameters_size() const {
  return _impl_.query_parameters_.size();
}
inline int AnalyzerOptionsProto::query_parameters_size() const {
  return _internal_query_parameters_size();
}
inline void AnalyzerOptionsProto::clear_query_parameters() {
  _impl_.query_parameters_.Clear();
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::mutable_query_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.query_parameters)
  return _impl_.query_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
AnalyzerOptionsProto::mutable_query_parameters() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.query_parameters)
  return &_impl_.query_parameters_;
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::_internal_query_parameters(int index) const {
  return _impl_.query_parameters_.Get(index);
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::query_parameters(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.query_parameters)
  return _internal_query_parameters(index);
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::_internal_add_query_parameters() {
  return _impl_.query_parameters_.Add();
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::add_query_parameters() {
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* _add = _internal_add_query_parameters();
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.query_parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
AnalyzerOptionsProto::query_parameters() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.query_parameters)
  return _impl_.query_parameters_;
}

// repeated .zetasql.TypeProto positional_query_parameters = 12;
inline int AnalyzerOptionsProto::_internal_positional_query_parameters_size() const {
  return _impl_.positional_query_parameters_.size();
}
inline int AnalyzerOptionsProto::positional_query_parameters_size() const {
  return _internal_positional_query_parameters_size();
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::mutable_positional_query_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return _impl_.positional_query_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto >*
AnalyzerOptionsProto::mutable_positional_query_parameters() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return &_impl_.positional_query_parameters_;
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto::_internal_positional_query_parameters(int index) const {
  return _impl_.positional_query_parameters_.Get(index);
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto::positional_query_parameters(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return _internal_positional_query_parameters(index);
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::_internal_add_positional_query_parameters() {
  return _impl_.positional_query_parameters_.Add();
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::add_positional_query_parameters() {
  ::zetasql::TypeProto* _add = _internal_add_positional_query_parameters();
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto >&
AnalyzerOptionsProto::positional_query_parameters() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.positional_query_parameters)
  return _impl_.positional_query_parameters_;
}

// repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
inline int AnalyzerOptionsProto::_internal_expression_columns_size() const {
  return _impl_.expression_columns_.size();
}
inline int AnalyzerOptionsProto::expression_columns_size() const {
  return _internal_expression_columns_size();
}
inline void AnalyzerOptionsProto::clear_expression_columns() {
  _impl_.expression_columns_.Clear();
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::mutable_expression_columns(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.expression_columns)
  return _impl_.expression_columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
AnalyzerOptionsProto::mutable_expression_columns() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.expression_columns)
  return &_impl_.expression_columns_;
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::_internal_expression_columns(int index) const {
  return _impl_.expression_columns_.Get(index);
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::expression_columns(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.expression_columns)
  return _internal_expression_columns(index);
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::_internal_add_expression_columns() {
  return _impl_.expression_columns_.Add();
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::add_expression_columns() {
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* _add = _internal_add_expression_columns();
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.expression_columns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
AnalyzerOptionsProto::expression_columns() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.expression_columns)
  return _impl_.expression_columns_;
}

// optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
inline bool AnalyzerOptionsProto::_internal_has_in_scope_expression_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.in_scope_expression_column_ != nullptr);
  return value;
}
inline bool AnalyzerOptionsProto::has_in_scope_expression_column() const {
  return _internal_has_in_scope_expression_column();
}
inline void AnalyzerOptionsProto::clear_in_scope_expression_column() {
  if (_impl_.in_scope_expression_column_ != nullptr) _impl_.in_scope_expression_column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::_internal_in_scope_expression_column() const {
  const ::zetasql::AnalyzerOptionsProto_QueryParameterProto* p = _impl_.in_scope_expression_column_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::AnalyzerOptionsProto_QueryParameterProto&>(
      ::zetasql::_AnalyzerOptionsProto_QueryParameterProto_default_instance_);
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::in_scope_expression_column() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.in_scope_expression_column)
  return _internal_in_scope_expression_column();
}
inline void AnalyzerOptionsProto::unsafe_arena_set_allocated_in_scope_expression_column(
    ::zetasql::AnalyzerOptionsProto_QueryParameterProto* in_scope_expression_column) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.in_scope_expression_column_);
  }
  _impl_.in_scope_expression_column_ = in_scope_expression_column;
  if (in_scope_expression_column) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AnalyzerOptionsProto.in_scope_expression_column)
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::release_in_scope_expression_column() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* temp = _impl_.in_scope_expression_column_;
  _impl_.in_scope_expression_column_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::unsafe_arena_release_in_scope_expression_column() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.in_scope_expression_column)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* temp = _impl_.in_scope_expression_column_;
  _impl_.in_scope_expression_column_ = nullptr;
  return temp;
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::_internal_mutable_in_scope_expression_column() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.in_scope_expression_column_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::AnalyzerOptionsProto_QueryParameterProto>(GetArenaForAllocation());
    _impl_.in_scope_expression_column_ = p;
  }
  return _impl_.in_scope_expression_column_;
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::mutable_in_scope_expression_column() {
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* _msg = _internal_mutable_in_scope_expression_column();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.in_scope_expression_column)
  return _msg;
}
inline void AnalyzerOptionsProto::set_allocated_in_scope_expression_column(::zetasql::AnalyzerOptionsProto_QueryParameterProto* in_scope_expression_column) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.in_scope_expression_column_;
  }
  if (in_scope_expression_column) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(in_scope_expression_column);
    if (message_arena != submessage_arena) {
      in_scope_expression_column = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_scope_expression_column, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.in_scope_expression_column_ = in_scope_expression_column;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.in_scope_expression_column)
}

// repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
inline int AnalyzerOptionsProto::_internal_ddl_pseudo_columns_size() const {
  return _impl_.ddl_pseudo_columns_.size();
}
inline int AnalyzerOptionsProto::ddl_pseudo_columns_size() const {
  return _internal_ddl_pseudo_columns_size();
}
inline void AnalyzerOptionsProto::clear_ddl_pseudo_columns() {
  _impl_.ddl_pseudo_columns_.Clear();
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::mutable_ddl_pseudo_columns(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return _impl_.ddl_pseudo_columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >*
AnalyzerOptionsProto::mutable_ddl_pseudo_columns() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return &_impl_.ddl_pseudo_columns_;
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::_internal_ddl_pseudo_columns(int index) const {
  return _impl_.ddl_pseudo_columns_.Get(index);
}
inline const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& AnalyzerOptionsProto::ddl_pseudo_columns(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return _internal_ddl_pseudo_columns(index);
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::_internal_add_ddl_pseudo_columns() {
  return _impl_.ddl_pseudo_columns_.Add();
}
inline ::zetasql::AnalyzerOptionsProto_QueryParameterProto* AnalyzerOptionsProto::add_ddl_pseudo_columns() {
  ::zetasql::AnalyzerOptionsProto_QueryParameterProto* _add = _internal_add_ddl_pseudo_columns();
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >&
AnalyzerOptionsProto::ddl_pseudo_columns() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.ddl_pseudo_columns)
  return _impl_.ddl_pseudo_columns_;
}

// optional .zetasql.ErrorMessageMode error_message_mode = 6;
inline bool AnalyzerOptionsProto::_internal_has_error_message_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_error_message_mode() const {
  return _internal_has_error_message_mode();
}
inline void AnalyzerOptionsProto::clear_error_message_mode() {
  _impl_.error_message_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::zetasql::ErrorMessageMode AnalyzerOptionsProto::_internal_error_message_mode() const {
  return static_cast< ::zetasql::ErrorMessageMode >(_impl_.error_message_mode_);
}
inline ::zetasql::ErrorMessageMode AnalyzerOptionsProto::error_message_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.error_message_mode)
  return _internal_error_message_mode();
}
inline void AnalyzerOptionsProto::_internal_set_error_message_mode(::zetasql::ErrorMessageMode value) {
  assert(::zetasql::ErrorMessageMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.error_message_mode_ = value;
}
inline void AnalyzerOptionsProto::set_error_message_mode(::zetasql::ErrorMessageMode value) {
  _internal_set_error_message_mode(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.error_message_mode)
}

// optional string default_timezone = 7;
inline bool AnalyzerOptionsProto::_internal_has_default_timezone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_default_timezone() const {
  return _internal_has_default_timezone();
}
inline void AnalyzerOptionsProto::clear_default_timezone() {
  _impl_.default_timezone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AnalyzerOptionsProto::default_timezone() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.default_timezone)
  return _internal_default_timezone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnalyzerOptionsProto::set_default_timezone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.default_timezone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.default_timezone)
}
inline std::string* AnalyzerOptionsProto::mutable_default_timezone() {
  std::string* _s = _internal_mutable_default_timezone();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.default_timezone)
  return _s;
}
inline const std::string& AnalyzerOptionsProto::_internal_default_timezone() const {
  return _impl_.default_timezone_.Get();
}
inline void AnalyzerOptionsProto::_internal_set_default_timezone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.default_timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* AnalyzerOptionsProto::_internal_mutable_default_timezone() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.default_timezone_.Mutable(GetArenaForAllocation());
}
inline std::string* AnalyzerOptionsProto::release_default_timezone() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.default_timezone)
  if (!_internal_has_default_timezone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.default_timezone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_timezone_.IsDefault()) {
    _impl_.default_timezone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AnalyzerOptionsProto::set_allocated_default_timezone(std::string* default_timezone) {
  if (default_timezone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.default_timezone_.SetAllocated(default_timezone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_timezone_.IsDefault()) {
    _impl_.default_timezone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.default_timezone)
}

// optional bool create_new_column_for_each_projected_output = 20;
inline bool AnalyzerOptionsProto::_internal_has_create_new_column_for_each_projected_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_create_new_column_for_each_projected_output() const {
  return _internal_has_create_new_column_for_each_projected_output();
}
inline void AnalyzerOptionsProto::clear_create_new_column_for_each_projected_output() {
  _impl_.create_new_column_for_each_projected_output_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool AnalyzerOptionsProto::_internal_create_new_column_for_each_projected_output() const {
  return _impl_.create_new_column_for_each_projected_output_;
}
inline bool AnalyzerOptionsProto::create_new_column_for_each_projected_output() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.create_new_column_for_each_projected_output)
  return _internal_create_new_column_for_each_projected_output();
}
inline void AnalyzerOptionsProto::_internal_set_create_new_column_for_each_projected_output(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.create_new_column_for_each_projected_output_ = value;
}
inline void AnalyzerOptionsProto::set_create_new_column_for_each_projected_output(bool value) {
  _internal_set_create_new_column_for_each_projected_output(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.create_new_column_for_each_projected_output)
}

// optional bool prune_unused_columns = 9;
inline bool AnalyzerOptionsProto::_internal_has_prune_unused_columns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_prune_unused_columns() const {
  return _internal_has_prune_unused_columns();
}
inline void AnalyzerOptionsProto::clear_prune_unused_columns() {
  _impl_.prune_unused_columns_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool AnalyzerOptionsProto::_internal_prune_unused_columns() const {
  return _impl_.prune_unused_columns_;
}
inline bool AnalyzerOptionsProto::prune_unused_columns() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.prune_unused_columns)
  return _internal_prune_unused_columns();
}
inline void AnalyzerOptionsProto::_internal_set_prune_unused_columns(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.prune_unused_columns_ = value;
}
inline void AnalyzerOptionsProto::set_prune_unused_columns(bool value) {
  _internal_set_prune_unused_columns(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.prune_unused_columns)
}

// optional bool allow_undeclared_parameters = 10;
inline bool AnalyzerOptionsProto::_internal_has_allow_undeclared_parameters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_allow_undeclared_parameters() const {
  return _internal_has_allow_undeclared_parameters();
}
inline void AnalyzerOptionsProto::clear_allow_undeclared_parameters() {
  _impl_.allow_undeclared_parameters_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool AnalyzerOptionsProto::_internal_allow_undeclared_parameters() const {
  return _impl_.allow_undeclared_parameters_;
}
inline bool AnalyzerOptionsProto::allow_undeclared_parameters() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.allow_undeclared_parameters)
  return _internal_allow_undeclared_parameters();
}
inline void AnalyzerOptionsProto::_internal_set_allow_undeclared_parameters(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.allow_undeclared_parameters_ = value;
}
inline void AnalyzerOptionsProto::set_allow_undeclared_parameters(bool value) {
  _internal_set_allow_undeclared_parameters(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.allow_undeclared_parameters)
}

// optional .zetasql.ParameterMode parameter_mode = 13;
inline bool AnalyzerOptionsProto::_internal_has_parameter_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_parameter_mode() const {
  return _internal_has_parameter_mode();
}
inline void AnalyzerOptionsProto::clear_parameter_mode() {
  _impl_.parameter_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::zetasql::ParameterMode AnalyzerOptionsProto::_internal_parameter_mode() const {
  return static_cast< ::zetasql::ParameterMode >(_impl_.parameter_mode_);
}
inline ::zetasql::ParameterMode AnalyzerOptionsProto::parameter_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.parameter_mode)
  return _internal_parameter_mode();
}
inline void AnalyzerOptionsProto::_internal_set_parameter_mode(::zetasql::ParameterMode value) {
  assert(::zetasql::ParameterMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.parameter_mode_ = value;
}
inline void AnalyzerOptionsProto::set_parameter_mode(::zetasql::ParameterMode value) {
  _internal_set_parameter_mode(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.parameter_mode)
}

// optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
inline bool AnalyzerOptionsProto::_internal_has_allowed_hints_and_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.allowed_hints_and_options_ != nullptr);
  return value;
}
inline bool AnalyzerOptionsProto::has_allowed_hints_and_options() const {
  return _internal_has_allowed_hints_and_options();
}
inline void AnalyzerOptionsProto::clear_allowed_hints_and_options() {
  if (_impl_.allowed_hints_and_options_ != nullptr) _impl_.allowed_hints_and_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::zetasql::AllowedHintsAndOptionsProto& AnalyzerOptionsProto::_internal_allowed_hints_and_options() const {
  const ::zetasql::AllowedHintsAndOptionsProto* p = _impl_.allowed_hints_and_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::AllowedHintsAndOptionsProto&>(
      ::zetasql::_AllowedHintsAndOptionsProto_default_instance_);
}
inline const ::zetasql::AllowedHintsAndOptionsProto& AnalyzerOptionsProto::allowed_hints_and_options() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.allowed_hints_and_options)
  return _internal_allowed_hints_and_options();
}
inline void AnalyzerOptionsProto::unsafe_arena_set_allocated_allowed_hints_and_options(
    ::zetasql::AllowedHintsAndOptionsProto* allowed_hints_and_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allowed_hints_and_options_);
  }
  _impl_.allowed_hints_and_options_ = allowed_hints_and_options;
  if (allowed_hints_and_options) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AnalyzerOptionsProto.allowed_hints_and_options)
}
inline ::zetasql::AllowedHintsAndOptionsProto* AnalyzerOptionsProto::release_allowed_hints_and_options() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::AllowedHintsAndOptionsProto* temp = _impl_.allowed_hints_and_options_;
  _impl_.allowed_hints_and_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::AllowedHintsAndOptionsProto* AnalyzerOptionsProto::unsafe_arena_release_allowed_hints_and_options() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.allowed_hints_and_options)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::AllowedHintsAndOptionsProto* temp = _impl_.allowed_hints_and_options_;
  _impl_.allowed_hints_and_options_ = nullptr;
  return temp;
}
inline ::zetasql::AllowedHintsAndOptionsProto* AnalyzerOptionsProto::_internal_mutable_allowed_hints_and_options() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.allowed_hints_and_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::AllowedHintsAndOptionsProto>(GetArenaForAllocation());
    _impl_.allowed_hints_and_options_ = p;
  }
  return _impl_.allowed_hints_and_options_;
}
inline ::zetasql::AllowedHintsAndOptionsProto* AnalyzerOptionsProto::mutable_allowed_hints_and_options() {
  ::zetasql::AllowedHintsAndOptionsProto* _msg = _internal_mutable_allowed_hints_and_options();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.allowed_hints_and_options)
  return _msg;
}
inline void AnalyzerOptionsProto::set_allocated_allowed_hints_and_options(::zetasql::AllowedHintsAndOptionsProto* allowed_hints_and_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.allowed_hints_and_options_;
  }
  if (allowed_hints_and_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(allowed_hints_and_options);
    if (message_arena != submessage_arena) {
      allowed_hints_and_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowed_hints_and_options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.allowed_hints_and_options_ = allowed_hints_and_options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.allowed_hints_and_options)
}

// optional .zetasql.StatementContext statement_context = 14;
inline bool AnalyzerOptionsProto::_internal_has_statement_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_statement_context() const {
  return _internal_has_statement_context();
}
inline void AnalyzerOptionsProto::clear_statement_context() {
  _impl_.statement_context_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::zetasql::StatementContext AnalyzerOptionsProto::_internal_statement_context() const {
  return static_cast< ::zetasql::StatementContext >(_impl_.statement_context_);
}
inline ::zetasql::StatementContext AnalyzerOptionsProto::statement_context() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.statement_context)
  return _internal_statement_context();
}
inline void AnalyzerOptionsProto::_internal_set_statement_context(::zetasql::StatementContext value) {
  assert(::zetasql::StatementContext_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.statement_context_ = value;
}
inline void AnalyzerOptionsProto::set_statement_context(::zetasql::StatementContext value) {
  _internal_set_statement_context(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.statement_context)
}

// optional bool preserve_column_aliases = 17;
inline bool AnalyzerOptionsProto::_internal_has_preserve_column_aliases() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_preserve_column_aliases() const {
  return _internal_has_preserve_column_aliases();
}
inline void AnalyzerOptionsProto::clear_preserve_column_aliases() {
  _impl_.preserve_column_aliases_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool AnalyzerOptionsProto::_internal_preserve_column_aliases() const {
  return _impl_.preserve_column_aliases_;
}
inline bool AnalyzerOptionsProto::preserve_column_aliases() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.preserve_column_aliases)
  return _internal_preserve_column_aliases();
}
inline void AnalyzerOptionsProto::_internal_set_preserve_column_aliases(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.preserve_column_aliases_ = value;
}
inline void AnalyzerOptionsProto::set_preserve_column_aliases(bool value) {
  _internal_set_preserve_column_aliases(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.preserve_column_aliases)
}

// repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
inline int AnalyzerOptionsProto::_internal_system_variables_size() const {
  return _impl_.system_variables_.size();
}
inline int AnalyzerOptionsProto::system_variables_size() const {
  return _internal_system_variables_size();
}
inline void AnalyzerOptionsProto::clear_system_variables() {
  _impl_.system_variables_.Clear();
}
inline ::zetasql::AnalyzerOptionsProto_SystemVariableProto* AnalyzerOptionsProto::mutable_system_variables(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.system_variables)
  return _impl_.system_variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >*
AnalyzerOptionsProto::mutable_system_variables() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.system_variables)
  return &_impl_.system_variables_;
}
inline const ::zetasql::AnalyzerOptionsProto_SystemVariableProto& AnalyzerOptionsProto::_internal_system_variables(int index) const {
  return _impl_.system_variables_.Get(index);
}
inline const ::zetasql::AnalyzerOptionsProto_SystemVariableProto& AnalyzerOptionsProto::system_variables(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.system_variables)
  return _internal_system_variables(index);
}
inline ::zetasql::AnalyzerOptionsProto_SystemVariableProto* AnalyzerOptionsProto::_internal_add_system_variables() {
  return _impl_.system_variables_.Add();
}
inline ::zetasql::AnalyzerOptionsProto_SystemVariableProto* AnalyzerOptionsProto::add_system_variables() {
  ::zetasql::AnalyzerOptionsProto_SystemVariableProto* _add = _internal_add_system_variables();
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.system_variables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >&
AnalyzerOptionsProto::system_variables() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.system_variables)
  return _impl_.system_variables_;
}

// repeated .zetasql.TypeProto target_column_types = 19;
inline int AnalyzerOptionsProto::_internal_target_column_types_size() const {
  return _impl_.target_column_types_.size();
}
inline int AnalyzerOptionsProto::target_column_types_size() const {
  return _internal_target_column_types_size();
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::mutable_target_column_types(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.target_column_types)
  return _impl_.target_column_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto >*
AnalyzerOptionsProto::mutable_target_column_types() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.target_column_types)
  return &_impl_.target_column_types_;
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto::_internal_target_column_types(int index) const {
  return _impl_.target_column_types_.Get(index);
}
inline const ::zetasql::TypeProto& AnalyzerOptionsProto::target_column_types(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.target_column_types)
  return _internal_target_column_types(index);
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::_internal_add_target_column_types() {
  return _impl_.target_column_types_.Add();
}
inline ::zetasql::TypeProto* AnalyzerOptionsProto::add_target_column_types() {
  ::zetasql::TypeProto* _add = _internal_add_target_column_types();
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.target_column_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeProto >&
AnalyzerOptionsProto::target_column_types() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.target_column_types)
  return _impl_.target_column_types_;
}

// repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
inline int AnalyzerOptionsProto::_internal_enabled_rewrites_size() const {
  return _impl_.enabled_rewrites_.size();
}
inline int AnalyzerOptionsProto::enabled_rewrites_size() const {
  return _internal_enabled_rewrites_size();
}
inline void AnalyzerOptionsProto::clear_enabled_rewrites() {
  _impl_.enabled_rewrites_.Clear();
}
inline ::zetasql::ResolvedASTRewrite AnalyzerOptionsProto::_internal_enabled_rewrites(int index) const {
  return static_cast< ::zetasql::ResolvedASTRewrite >(_impl_.enabled_rewrites_.Get(index));
}
inline ::zetasql::ResolvedASTRewrite AnalyzerOptionsProto::enabled_rewrites(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.enabled_rewrites)
  return _internal_enabled_rewrites(index);
}
inline void AnalyzerOptionsProto::set_enabled_rewrites(int index, ::zetasql::ResolvedASTRewrite value) {
  assert(::zetasql::ResolvedASTRewrite_IsValid(value));
  _impl_.enabled_rewrites_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.enabled_rewrites)
}
inline void AnalyzerOptionsProto::_internal_add_enabled_rewrites(::zetasql::ResolvedASTRewrite value) {
  assert(::zetasql::ResolvedASTRewrite_IsValid(value));
  _impl_.enabled_rewrites_.Add(value);
}
inline void AnalyzerOptionsProto::add_enabled_rewrites(::zetasql::ResolvedASTRewrite value) {
  _internal_add_enabled_rewrites(value);
  // @@protoc_insertion_point(field_add:zetasql.AnalyzerOptionsProto.enabled_rewrites)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AnalyzerOptionsProto::enabled_rewrites() const {
  // @@protoc_insertion_point(field_list:zetasql.AnalyzerOptionsProto.enabled_rewrites)
  return _impl_.enabled_rewrites_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AnalyzerOptionsProto::_internal_mutable_enabled_rewrites() {
  return &_impl_.enabled_rewrites_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AnalyzerOptionsProto::mutable_enabled_rewrites() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnalyzerOptionsProto.enabled_rewrites)
  return _internal_mutable_enabled_rewrites();
}

// optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
inline bool AnalyzerOptionsProto::_internal_has_parse_location_record_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_parse_location_record_type() const {
  return _internal_has_parse_location_record_type();
}
inline void AnalyzerOptionsProto::clear_parse_location_record_type() {
  _impl_.parse_location_record_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::zetasql::ParseLocationRecordType AnalyzerOptionsProto::_internal_parse_location_record_type() const {
  return static_cast< ::zetasql::ParseLocationRecordType >(_impl_.parse_location_record_type_);
}
inline ::zetasql::ParseLocationRecordType AnalyzerOptionsProto::parse_location_record_type() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.parse_location_record_type)
  return _internal_parse_location_record_type();
}
inline void AnalyzerOptionsProto::_internal_set_parse_location_record_type(::zetasql::ParseLocationRecordType value) {
  assert(::zetasql::ParseLocationRecordType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.parse_location_record_type_ = value;
}
inline void AnalyzerOptionsProto::set_parse_location_record_type(::zetasql::ParseLocationRecordType value) {
  _internal_set_parse_location_record_type(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.parse_location_record_type)
}

// optional bool preserve_unnecessary_cast = 24;
inline bool AnalyzerOptionsProto::_internal_has_preserve_unnecessary_cast() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_preserve_unnecessary_cast() const {
  return _internal_has_preserve_unnecessary_cast();
}
inline void AnalyzerOptionsProto::clear_preserve_unnecessary_cast() {
  _impl_.preserve_unnecessary_cast_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool AnalyzerOptionsProto::_internal_preserve_unnecessary_cast() const {
  return _impl_.preserve_unnecessary_cast_;
}
inline bool AnalyzerOptionsProto::preserve_unnecessary_cast() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.preserve_unnecessary_cast)
  return _internal_preserve_unnecessary_cast();
}
inline void AnalyzerOptionsProto::_internal_set_preserve_unnecessary_cast(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.preserve_unnecessary_cast_ = value;
}
inline void AnalyzerOptionsProto::set_preserve_unnecessary_cast(bool value) {
  _internal_set_preserve_unnecessary_cast(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.preserve_unnecessary_cast)
}

// optional string default_anon_function_report_format = 25;
inline bool AnalyzerOptionsProto::_internal_has_default_anon_function_report_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_default_anon_function_report_format() const {
  return _internal_has_default_anon_function_report_format();
}
inline void AnalyzerOptionsProto::clear_default_anon_function_report_format() {
  _impl_.default_anon_function_report_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AnalyzerOptionsProto::default_anon_function_report_format() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.default_anon_function_report_format)
  return _internal_default_anon_function_report_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnalyzerOptionsProto::set_default_anon_function_report_format(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.default_anon_function_report_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.default_anon_function_report_format)
}
inline std::string* AnalyzerOptionsProto::mutable_default_anon_function_report_format() {
  std::string* _s = _internal_mutable_default_anon_function_report_format();
  // @@protoc_insertion_point(field_mutable:zetasql.AnalyzerOptionsProto.default_anon_function_report_format)
  return _s;
}
inline const std::string& AnalyzerOptionsProto::_internal_default_anon_function_report_format() const {
  return _impl_.default_anon_function_report_format_.Get();
}
inline void AnalyzerOptionsProto::_internal_set_default_anon_function_report_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.default_anon_function_report_format_.Set(value, GetArenaForAllocation());
}
inline std::string* AnalyzerOptionsProto::_internal_mutable_default_anon_function_report_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.default_anon_function_report_format_.Mutable(GetArenaForAllocation());
}
inline std::string* AnalyzerOptionsProto::release_default_anon_function_report_format() {
  // @@protoc_insertion_point(field_release:zetasql.AnalyzerOptionsProto.default_anon_function_report_format)
  if (!_internal_has_default_anon_function_report_format()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.default_anon_function_report_format_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_anon_function_report_format_.IsDefault()) {
    _impl_.default_anon_function_report_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AnalyzerOptionsProto::set_allocated_default_anon_function_report_format(std::string* default_anon_function_report_format) {
  if (default_anon_function_report_format != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.default_anon_function_report_format_.SetAllocated(default_anon_function_report_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default_anon_function_report_format_.IsDefault()) {
    _impl_.default_anon_function_report_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnalyzerOptionsProto.default_anon_function_report_format)
}

// optional int64 default_anon_kappa_value = 26;
inline bool AnalyzerOptionsProto::_internal_has_default_anon_kappa_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AnalyzerOptionsProto::has_default_anon_kappa_value() const {
  return _internal_has_default_anon_kappa_value();
}
inline void AnalyzerOptionsProto::clear_default_anon_kappa_value() {
  _impl_.default_anon_kappa_value_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int64_t AnalyzerOptionsProto::_internal_default_anon_kappa_value() const {
  return _impl_.default_anon_kappa_value_;
}
inline int64_t AnalyzerOptionsProto::default_anon_kappa_value() const {
  // @@protoc_insertion_point(field_get:zetasql.AnalyzerOptionsProto.default_anon_kappa_value)
  return _internal_default_anon_kappa_value();
}
inline void AnalyzerOptionsProto::_internal_set_default_anon_kappa_value(int64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.default_anon_kappa_value_ = value;
}
inline void AnalyzerOptionsProto::set_default_anon_kappa_value(int64_t value) {
  _internal_set_default_anon_kappa_value(value);
  // @@protoc_insertion_point(field_set:zetasql.AnalyzerOptionsProto.default_anon_kappa_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2foptions_2eproto
