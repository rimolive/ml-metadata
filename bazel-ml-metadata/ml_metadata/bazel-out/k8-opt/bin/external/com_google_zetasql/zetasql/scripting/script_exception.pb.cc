// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/scripting/script_exception.proto

#include "zetasql/scripting/script_exception.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR ScriptException_StackTraceFrame::ScriptException_StackTraceFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_)*/int64_t{0}
  , /*decltype(_impl_.column_)*/int64_t{0}} {}
struct ScriptException_StackTraceFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScriptException_StackTraceFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScriptException_StackTraceFrameDefaultTypeInternal() {}
  union {
    ScriptException_StackTraceFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScriptException_StackTraceFrameDefaultTypeInternal _ScriptException_StackTraceFrame_default_instance_;
PROTOBUF_CONSTEXPR ScriptException_Internal::ScriptException_Internal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stack_trace_)*/{}
  , /*decltype(_impl_.statement_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ScriptException_InternalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScriptException_InternalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScriptException_InternalDefaultTypeInternal() {}
  union {
    ScriptException_Internal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScriptException_InternalDefaultTypeInternal _ScriptException_Internal_default_instance_;
PROTOBUF_CONSTEXPR ScriptException::ScriptException(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.internal_)*/nullptr} {}
struct ScriptExceptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScriptExceptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScriptExceptionDefaultTypeInternal() {}
  union {
    ScriptException _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScriptExceptionDefaultTypeInternal _ScriptException_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fscripting_2fscript_5fexception_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fscripting_2fscript_5fexception_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fscripting_2fscript_5fexception_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fscripting_2fscript_5fexception_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_StackTraceFrame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_StackTraceFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_StackTraceFrame, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_StackTraceFrame, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_StackTraceFrame, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_StackTraceFrame, _impl_.location_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_Internal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_Internal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_Internal, _impl_.statement_text_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException_Internal, _impl_.stack_trace_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ScriptException, _impl_.internal_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::zetasql::ScriptException_StackTraceFrame)},
  { 14, 22, -1, sizeof(::zetasql::ScriptException_Internal)},
  { 24, 32, -1, sizeof(::zetasql::ScriptException)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_ScriptException_StackTraceFrame_default_instance_._instance,
  &::zetasql::_ScriptException_Internal_default_instance_._instance,
  &::zetasql::_ScriptException_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fscripting_2fscript_5fexception_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(zetasql/scripting/script_exception.pro"
  "to\022\007zetasql\"\217\002\n\017ScriptException\022\017\n\007messa"
  "ge\030\001 \001(\t\0223\n\010internal\030\002 \001(\0132!.zetasql.Scr"
  "iptException.Internal\032S\n\017StackTraceFrame"
  "\022\014\n\004line\030\001 \001(\003\022\016\n\006column\030\002 \001(\003\022\020\n\010filena"
  "me\030\003 \001(\t\022\020\n\010location\030\004 \001(\t\032a\n\010Internal\022\026"
  "\n\016statement_text\030\001 \001(\t\022=\n\013stack_trace\030\002 "
  "\003(\0132(.zetasql.ScriptException.StackTrace"
  "Frame"
  ;
static ::_pbi::once_flag descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto = {
    false, false, 325, descriptor_table_protodef_zetasql_2fscripting_2fscript_5fexception_2eproto,
    "zetasql/scripting/script_exception.proto",
    &descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_zetasql_2fscripting_2fscript_5fexception_2eproto::offsets,
    file_level_metadata_zetasql_2fscripting_2fscript_5fexception_2eproto, file_level_enum_descriptors_zetasql_2fscripting_2fscript_5fexception_2eproto,
    file_level_service_descriptors_zetasql_2fscripting_2fscript_5fexception_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto_getter() {
  return &descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fscripting_2fscript_5fexception_2eproto(&descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto);
namespace zetasql {

// ===================================================================

class ScriptException_StackTraceFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<ScriptException_StackTraceFrame>()._impl_._has_bits_);
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScriptException_StackTraceFrame::ScriptException_StackTraceFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ScriptException.StackTraceFrame)
}
ScriptException_StackTraceFrame::ScriptException_StackTraceFrame(const ScriptException_StackTraceFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScriptException_StackTraceFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.line_){}
    , decltype(_impl_.column_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_location()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.line_, &from._impl_.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_) -
    reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.column_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ScriptException.StackTraceFrame)
}

inline void ScriptException_StackTraceFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.line_){int64_t{0}}
    , decltype(_impl_.column_){int64_t{0}}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScriptException_StackTraceFrame::~ScriptException_StackTraceFrame() {
  // @@protoc_insertion_point(destructor:zetasql.ScriptException.StackTraceFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScriptException_StackTraceFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.location_.Destroy();
}

void ScriptException_StackTraceFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScriptException_StackTraceFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ScriptException.StackTraceFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.location_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.line_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.column_) -
        reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.column_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScriptException_StackTraceFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_line(&has_bits);
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ScriptException.StackTraceFrame.filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ScriptException.StackTraceFrame.location");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScriptException_StackTraceFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ScriptException.StackTraceFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 line = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_line(), target);
  }

  // optional int64 column = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_column(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ScriptException.StackTraceFrame.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // optional string location = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ScriptException.StackTraceFrame.location");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ScriptException.StackTraceFrame)
  return target;
}

size_t ScriptException_StackTraceFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ScriptException.StackTraceFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string filename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location());
    }

    // optional int64 line = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_line());
    }

    // optional int64 column = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_column());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScriptException_StackTraceFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScriptException_StackTraceFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScriptException_StackTraceFrame::GetClassData() const { return &_class_data_; }


void ScriptException_StackTraceFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScriptException_StackTraceFrame*>(&to_msg);
  auto& from = static_cast<const ScriptException_StackTraceFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ScriptException.StackTraceFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_location(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.line_ = from._impl_.line_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScriptException_StackTraceFrame::CopyFrom(const ScriptException_StackTraceFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ScriptException.StackTraceFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScriptException_StackTraceFrame::IsInitialized() const {
  return true;
}

void ScriptException_StackTraceFrame::InternalSwap(ScriptException_StackTraceFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScriptException_StackTraceFrame, _impl_.column_)
      + sizeof(ScriptException_StackTraceFrame::_impl_.column_)
      - PROTOBUF_FIELD_OFFSET(ScriptException_StackTraceFrame, _impl_.line_)>(
          reinterpret_cast<char*>(&_impl_.line_),
          reinterpret_cast<char*>(&other->_impl_.line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScriptException_StackTraceFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto_getter, &descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto_once,
      file_level_metadata_zetasql_2fscripting_2fscript_5fexception_2eproto[0]);
}

// ===================================================================

class ScriptException_Internal::_Internal {
 public:
  using HasBits = decltype(std::declval<ScriptException_Internal>()._impl_._has_bits_);
  static void set_has_statement_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScriptException_Internal::ScriptException_Internal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ScriptException.Internal)
}
ScriptException_Internal::ScriptException_Internal(const ScriptException_Internal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScriptException_Internal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stack_trace_){from._impl_.stack_trace_}
    , decltype(_impl_.statement_text_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.statement_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statement_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_statement_text()) {
    _this->_impl_.statement_text_.Set(from._internal_statement_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ScriptException.Internal)
}

inline void ScriptException_Internal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stack_trace_){arena}
    , decltype(_impl_.statement_text_){}
  };
  _impl_.statement_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statement_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScriptException_Internal::~ScriptException_Internal() {
  // @@protoc_insertion_point(destructor:zetasql.ScriptException.Internal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScriptException_Internal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stack_trace_.~RepeatedPtrField();
  _impl_.statement_text_.Destroy();
}

void ScriptException_Internal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScriptException_Internal::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ScriptException.Internal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stack_trace_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.statement_text_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScriptException_Internal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string statement_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_statement_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ScriptException.Internal.statement_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.ScriptException.StackTraceFrame stack_trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stack_trace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScriptException_Internal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ScriptException.Internal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string statement_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_statement_text().data(), static_cast<int>(this->_internal_statement_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ScriptException.Internal.statement_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_statement_text(), target);
  }

  // repeated .zetasql.ScriptException.StackTraceFrame stack_trace = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stack_trace_size()); i < n; i++) {
    const auto& repfield = this->_internal_stack_trace(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ScriptException.Internal)
  return target;
}

size_t ScriptException_Internal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ScriptException.Internal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.ScriptException.StackTraceFrame stack_trace = 2;
  total_size += 1UL * this->_internal_stack_trace_size();
  for (const auto& msg : this->_impl_.stack_trace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string statement_text = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statement_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScriptException_Internal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScriptException_Internal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScriptException_Internal::GetClassData() const { return &_class_data_; }


void ScriptException_Internal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScriptException_Internal*>(&to_msg);
  auto& from = static_cast<const ScriptException_Internal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ScriptException.Internal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stack_trace_.MergeFrom(from._impl_.stack_trace_);
  if (from._internal_has_statement_text()) {
    _this->_internal_set_statement_text(from._internal_statement_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScriptException_Internal::CopyFrom(const ScriptException_Internal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ScriptException.Internal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScriptException_Internal::IsInitialized() const {
  return true;
}

void ScriptException_Internal::InternalSwap(ScriptException_Internal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stack_trace_.InternalSwap(&other->_impl_.stack_trace_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.statement_text_, lhs_arena,
      &other->_impl_.statement_text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ScriptException_Internal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto_getter, &descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto_once,
      file_level_metadata_zetasql_2fscripting_2fscript_5fexception_2eproto[1]);
}

// ===================================================================

class ScriptException::_Internal {
 public:
  using HasBits = decltype(std::declval<ScriptException>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ScriptException_Internal& internal(const ScriptException* msg);
  static void set_has_internal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ScriptException_Internal&
ScriptException::_Internal::internal(const ScriptException* msg) {
  return *msg->_impl_.internal_;
}
ScriptException::ScriptException(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ScriptException)
}
ScriptException::ScriptException(const ScriptException& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScriptException* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.internal_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_internal()) {
    _this->_impl_.internal_ = new ::zetasql::ScriptException_Internal(*from._impl_.internal_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ScriptException)
}

inline void ScriptException::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.internal_){nullptr}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScriptException::~ScriptException() {
  // @@protoc_insertion_point(destructor:zetasql.ScriptException)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScriptException::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.internal_;
}

void ScriptException::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScriptException::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ScriptException)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.internal_ != nullptr);
      _impl_.internal_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScriptException::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ScriptException.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ScriptException.Internal internal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScriptException::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ScriptException)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ScriptException.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // optional .zetasql.ScriptException.Internal internal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::internal(this),
        _Internal::internal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ScriptException)
  return target;
}

size_t ScriptException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ScriptException)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .zetasql.ScriptException.Internal internal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.internal_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScriptException::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScriptException::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScriptException::GetClassData() const { return &_class_data_; }


void ScriptException::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScriptException*>(&to_msg);
  auto& from = static_cast<const ScriptException&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ScriptException)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_internal()->::zetasql::ScriptException_Internal::MergeFrom(
          from._internal_internal());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScriptException::CopyFrom(const ScriptException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ScriptException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScriptException::IsInitialized() const {
  return true;
}

void ScriptException::InternalSwap(ScriptException* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.internal_, other->_impl_.internal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScriptException::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto_getter, &descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto_once,
      file_level_metadata_zetasql_2fscripting_2fscript_5fexception_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::ScriptException_StackTraceFrame*
Arena::CreateMaybeMessage< ::zetasql::ScriptException_StackTraceFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ScriptException_StackTraceFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ScriptException_Internal*
Arena::CreateMaybeMessage< ::zetasql::ScriptException_Internal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ScriptException_Internal >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ScriptException*
Arena::CreateMaybeMessage< ::zetasql::ScriptException >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ScriptException >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
