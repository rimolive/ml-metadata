// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/proto/simple_catalog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2fsimple_5fcatalog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2fsimple_5fcatalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/proto/function.pb.h"
#include "zetasql/proto/options.pb.h"
#include "zetasql/public/simple_constant.pb.h"
#include "zetasql/public/simple_table.pb.h"
#include "zetasql/public/type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fproto_2fsimple_5fcatalog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fproto_2fsimple_5fcatalog_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fproto_2fsimple_5fcatalog_2eproto;
namespace zetasql {
class SimpleCatalogProto;
struct SimpleCatalogProtoDefaultTypeInternal;
extern SimpleCatalogProtoDefaultTypeInternal _SimpleCatalogProto_default_instance_;
class SimpleCatalogProto_NamedTypeProto;
struct SimpleCatalogProto_NamedTypeProtoDefaultTypeInternal;
extern SimpleCatalogProto_NamedTypeProtoDefaultTypeInternal _SimpleCatalogProto_NamedTypeProto_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::SimpleCatalogProto* Arena::CreateMaybeMessage<::zetasql::SimpleCatalogProto>(Arena*);
template<> ::zetasql::SimpleCatalogProto_NamedTypeProto* Arena::CreateMaybeMessage<::zetasql::SimpleCatalogProto_NamedTypeProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class SimpleCatalogProto_NamedTypeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleCatalogProto.NamedTypeProto) */ {
 public:
  inline SimpleCatalogProto_NamedTypeProto() : SimpleCatalogProto_NamedTypeProto(nullptr) {}
  ~SimpleCatalogProto_NamedTypeProto() override;
  explicit PROTOBUF_CONSTEXPR SimpleCatalogProto_NamedTypeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleCatalogProto_NamedTypeProto(const SimpleCatalogProto_NamedTypeProto& from);
  SimpleCatalogProto_NamedTypeProto(SimpleCatalogProto_NamedTypeProto&& from) noexcept
    : SimpleCatalogProto_NamedTypeProto() {
    *this = ::std::move(from);
  }

  inline SimpleCatalogProto_NamedTypeProto& operator=(const SimpleCatalogProto_NamedTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleCatalogProto_NamedTypeProto& operator=(SimpleCatalogProto_NamedTypeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleCatalogProto_NamedTypeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleCatalogProto_NamedTypeProto* internal_default_instance() {
    return reinterpret_cast<const SimpleCatalogProto_NamedTypeProto*>(
               &_SimpleCatalogProto_NamedTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimpleCatalogProto_NamedTypeProto& a, SimpleCatalogProto_NamedTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleCatalogProto_NamedTypeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleCatalogProto_NamedTypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleCatalogProto_NamedTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleCatalogProto_NamedTypeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleCatalogProto_NamedTypeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleCatalogProto_NamedTypeProto& from) {
    SimpleCatalogProto_NamedTypeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleCatalogProto_NamedTypeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.SimpleCatalogProto.NamedTypeProto";
  }
  protected:
  explicit SimpleCatalogProto_NamedTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zetasql::TypeProto& type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  ::zetasql::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:zetasql.SimpleCatalogProto.NamedTypeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::zetasql::TypeProto* type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2fsimple_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class SimpleCatalogProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleCatalogProto) */ {
 public:
  inline SimpleCatalogProto() : SimpleCatalogProto(nullptr) {}
  ~SimpleCatalogProto() override;
  explicit PROTOBUF_CONSTEXPR SimpleCatalogProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleCatalogProto(const SimpleCatalogProto& from);
  SimpleCatalogProto(SimpleCatalogProto&& from) noexcept
    : SimpleCatalogProto() {
    *this = ::std::move(from);
  }

  inline SimpleCatalogProto& operator=(const SimpleCatalogProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleCatalogProto& operator=(SimpleCatalogProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleCatalogProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleCatalogProto* internal_default_instance() {
    return reinterpret_cast<const SimpleCatalogProto*>(
               &_SimpleCatalogProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimpleCatalogProto& a, SimpleCatalogProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleCatalogProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleCatalogProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleCatalogProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleCatalogProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleCatalogProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleCatalogProto& from) {
    SimpleCatalogProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleCatalogProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.SimpleCatalogProto";
  }
  protected:
  explicit SimpleCatalogProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimpleCatalogProto_NamedTypeProto NamedTypeProto;

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 2,
    kNamedTypeFieldNumber = 3,
    kCatalogFieldNumber = 4,
    kCustomFunctionFieldNumber = 6,
    kProcedureFieldNumber = 8,
    kCustomTvfFieldNumber = 9,
    kConstantFieldNumber = 10,
    kNameFieldNumber = 1,
    kBuiltinFunctionOptionsFieldNumber = 5,
    kFileDescriptorSetIndexFieldNumber = 7,
  };
  // repeated .zetasql.SimpleTableProto table = 2;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  ::zetasql::SimpleTableProto* mutable_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleTableProto >*
      mutable_table();
  private:
  const ::zetasql::SimpleTableProto& _internal_table(int index) const;
  ::zetasql::SimpleTableProto* _internal_add_table();
  public:
  const ::zetasql::SimpleTableProto& table(int index) const;
  ::zetasql::SimpleTableProto* add_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleTableProto >&
      table() const;

  // repeated .zetasql.SimpleCatalogProto.NamedTypeProto named_type = 3;
  int named_type_size() const;
  private:
  int _internal_named_type_size() const;
  public:
  void clear_named_type();
  ::zetasql::SimpleCatalogProto_NamedTypeProto* mutable_named_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto >*
      mutable_named_type();
  private:
  const ::zetasql::SimpleCatalogProto_NamedTypeProto& _internal_named_type(int index) const;
  ::zetasql::SimpleCatalogProto_NamedTypeProto* _internal_add_named_type();
  public:
  const ::zetasql::SimpleCatalogProto_NamedTypeProto& named_type(int index) const;
  ::zetasql::SimpleCatalogProto_NamedTypeProto* add_named_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto >&
      named_type() const;

  // repeated .zetasql.SimpleCatalogProto catalog = 4;
  int catalog_size() const;
  private:
  int _internal_catalog_size() const;
  public:
  void clear_catalog();
  ::zetasql::SimpleCatalogProto* mutable_catalog(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto >*
      mutable_catalog();
  private:
  const ::zetasql::SimpleCatalogProto& _internal_catalog(int index) const;
  ::zetasql::SimpleCatalogProto* _internal_add_catalog();
  public:
  const ::zetasql::SimpleCatalogProto& catalog(int index) const;
  ::zetasql::SimpleCatalogProto* add_catalog();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto >&
      catalog() const;

  // repeated .zetasql.FunctionProto custom_function = 6;
  int custom_function_size() const;
  private:
  int _internal_custom_function_size() const;
  public:
  void clear_custom_function();
  ::zetasql::FunctionProto* mutable_custom_function(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionProto >*
      mutable_custom_function();
  private:
  const ::zetasql::FunctionProto& _internal_custom_function(int index) const;
  ::zetasql::FunctionProto* _internal_add_custom_function();
  public:
  const ::zetasql::FunctionProto& custom_function(int index) const;
  ::zetasql::FunctionProto* add_custom_function();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionProto >&
      custom_function() const;

  // repeated .zetasql.ProcedureProto procedure = 8;
  int procedure_size() const;
  private:
  int _internal_procedure_size() const;
  public:
  void clear_procedure();
  ::zetasql::ProcedureProto* mutable_procedure(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ProcedureProto >*
      mutable_procedure();
  private:
  const ::zetasql::ProcedureProto& _internal_procedure(int index) const;
  ::zetasql::ProcedureProto* _internal_add_procedure();
  public:
  const ::zetasql::ProcedureProto& procedure(int index) const;
  ::zetasql::ProcedureProto* add_procedure();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ProcedureProto >&
      procedure() const;

  // repeated .zetasql.TableValuedFunctionProto custom_tvf = 9;
  int custom_tvf_size() const;
  private:
  int _internal_custom_tvf_size() const;
  public:
  void clear_custom_tvf();
  ::zetasql::TableValuedFunctionProto* mutable_custom_tvf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TableValuedFunctionProto >*
      mutable_custom_tvf();
  private:
  const ::zetasql::TableValuedFunctionProto& _internal_custom_tvf(int index) const;
  ::zetasql::TableValuedFunctionProto* _internal_add_custom_tvf();
  public:
  const ::zetasql::TableValuedFunctionProto& custom_tvf(int index) const;
  ::zetasql::TableValuedFunctionProto* add_custom_tvf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TableValuedFunctionProto >&
      custom_tvf() const;

  // repeated .zetasql.SimpleConstantProto constant = 10;
  int constant_size() const;
  private:
  int _internal_constant_size() const;
  public:
  void clear_constant();
  ::zetasql::SimpleConstantProto* mutable_constant(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleConstantProto >*
      mutable_constant();
  private:
  const ::zetasql::SimpleConstantProto& _internal_constant(int index) const;
  ::zetasql::SimpleConstantProto* _internal_add_constant();
  public:
  const ::zetasql::SimpleConstantProto& constant(int index) const;
  ::zetasql::SimpleConstantProto* add_constant();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleConstantProto >&
      constant() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .zetasql.ZetaSQLBuiltinFunctionOptionsProto builtin_function_options = 5;
  bool has_builtin_function_options() const;
  private:
  bool _internal_has_builtin_function_options() const;
  public:
  void clear_builtin_function_options();
  const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto& builtin_function_options() const;
  PROTOBUF_NODISCARD ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* release_builtin_function_options();
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* mutable_builtin_function_options();
  void set_allocated_builtin_function_options(::zetasql::ZetaSQLBuiltinFunctionOptionsProto* builtin_function_options);
  private:
  const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto& _internal_builtin_function_options() const;
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* _internal_mutable_builtin_function_options();
  public:
  void unsafe_arena_set_allocated_builtin_function_options(
      ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* builtin_function_options);
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* unsafe_arena_release_builtin_function_options();

  // optional int32 file_descriptor_set_index = 7 [default = -1];
  bool has_file_descriptor_set_index() const;
  private:
  bool _internal_has_file_descriptor_set_index() const;
  public:
  void clear_file_descriptor_set_index();
  int32_t file_descriptor_set_index() const;
  void set_file_descriptor_set_index(int32_t value);
  private:
  int32_t _internal_file_descriptor_set_index() const;
  void _internal_set_file_descriptor_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.SimpleCatalogProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleTableProto > table_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto > named_type_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto > catalog_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionProto > custom_function_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ProcedureProto > procedure_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TableValuedFunctionProto > custom_tvf_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleConstantProto > constant_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* builtin_function_options_;
    int32_t file_descriptor_set_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2fsimple_5fcatalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleCatalogProto_NamedTypeProto

// optional string name = 1;
inline bool SimpleCatalogProto_NamedTypeProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimpleCatalogProto_NamedTypeProto::has_name() const {
  return _internal_has_name();
}
inline void SimpleCatalogProto_NamedTypeProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleCatalogProto_NamedTypeProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.NamedTypeProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleCatalogProto_NamedTypeProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.SimpleCatalogProto.NamedTypeProto.name)
}
inline std::string* SimpleCatalogProto_NamedTypeProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.NamedTypeProto.name)
  return _s;
}
inline const std::string& SimpleCatalogProto_NamedTypeProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SimpleCatalogProto_NamedTypeProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleCatalogProto_NamedTypeProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleCatalogProto_NamedTypeProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleCatalogProto.NamedTypeProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SimpleCatalogProto_NamedTypeProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleCatalogProto.NamedTypeProto.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool SimpleCatalogProto_NamedTypeProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool SimpleCatalogProto_NamedTypeProto::has_type() const {
  return _internal_has_type();
}
inline const ::zetasql::TypeProto& SimpleCatalogProto_NamedTypeProto::_internal_type() const {
  const ::zetasql::TypeProto* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& SimpleCatalogProto_NamedTypeProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.NamedTypeProto.type)
  return _internal_type();
}
inline void SimpleCatalogProto_NamedTypeProto::unsafe_arena_set_allocated_type(
    ::zetasql::TypeProto* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.SimpleCatalogProto.NamedTypeProto.type)
}
inline ::zetasql::TypeProto* SimpleCatalogProto_NamedTypeProto::release_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* SimpleCatalogProto_NamedTypeProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleCatalogProto.NamedTypeProto.type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* SimpleCatalogProto_NamedTypeProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::zetasql::TypeProto* SimpleCatalogProto_NamedTypeProto::mutable_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.NamedTypeProto.type)
  return _msg;
}
inline void SimpleCatalogProto_NamedTypeProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleCatalogProto.NamedTypeProto.type)
}

// -------------------------------------------------------------------

// SimpleCatalogProto

// optional string name = 1;
inline bool SimpleCatalogProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimpleCatalogProto::has_name() const {
  return _internal_has_name();
}
inline void SimpleCatalogProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleCatalogProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleCatalogProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.SimpleCatalogProto.name)
}
inline std::string* SimpleCatalogProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.name)
  return _s;
}
inline const std::string& SimpleCatalogProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SimpleCatalogProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleCatalogProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleCatalogProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleCatalogProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SimpleCatalogProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleCatalogProto.name)
}

// repeated .zetasql.SimpleTableProto table = 2;
inline int SimpleCatalogProto::_internal_table_size() const {
  return _impl_.table_.size();
}
inline int SimpleCatalogProto::table_size() const {
  return _internal_table_size();
}
inline ::zetasql::SimpleTableProto* SimpleCatalogProto::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.table)
  return _impl_.table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleTableProto >*
SimpleCatalogProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.table)
  return &_impl_.table_;
}
inline const ::zetasql::SimpleTableProto& SimpleCatalogProto::_internal_table(int index) const {
  return _impl_.table_.Get(index);
}
inline const ::zetasql::SimpleTableProto& SimpleCatalogProto::table(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.table)
  return _internal_table(index);
}
inline ::zetasql::SimpleTableProto* SimpleCatalogProto::_internal_add_table() {
  return _impl_.table_.Add();
}
inline ::zetasql::SimpleTableProto* SimpleCatalogProto::add_table() {
  ::zetasql::SimpleTableProto* _add = _internal_add_table();
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.table)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleTableProto >&
SimpleCatalogProto::table() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.table)
  return _impl_.table_;
}

// repeated .zetasql.SimpleCatalogProto.NamedTypeProto named_type = 3;
inline int SimpleCatalogProto::_internal_named_type_size() const {
  return _impl_.named_type_.size();
}
inline int SimpleCatalogProto::named_type_size() const {
  return _internal_named_type_size();
}
inline void SimpleCatalogProto::clear_named_type() {
  _impl_.named_type_.Clear();
}
inline ::zetasql::SimpleCatalogProto_NamedTypeProto* SimpleCatalogProto::mutable_named_type(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.named_type)
  return _impl_.named_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto >*
SimpleCatalogProto::mutable_named_type() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.named_type)
  return &_impl_.named_type_;
}
inline const ::zetasql::SimpleCatalogProto_NamedTypeProto& SimpleCatalogProto::_internal_named_type(int index) const {
  return _impl_.named_type_.Get(index);
}
inline const ::zetasql::SimpleCatalogProto_NamedTypeProto& SimpleCatalogProto::named_type(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.named_type)
  return _internal_named_type(index);
}
inline ::zetasql::SimpleCatalogProto_NamedTypeProto* SimpleCatalogProto::_internal_add_named_type() {
  return _impl_.named_type_.Add();
}
inline ::zetasql::SimpleCatalogProto_NamedTypeProto* SimpleCatalogProto::add_named_type() {
  ::zetasql::SimpleCatalogProto_NamedTypeProto* _add = _internal_add_named_type();
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.named_type)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto_NamedTypeProto >&
SimpleCatalogProto::named_type() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.named_type)
  return _impl_.named_type_;
}

// repeated .zetasql.SimpleCatalogProto catalog = 4;
inline int SimpleCatalogProto::_internal_catalog_size() const {
  return _impl_.catalog_.size();
}
inline int SimpleCatalogProto::catalog_size() const {
  return _internal_catalog_size();
}
inline void SimpleCatalogProto::clear_catalog() {
  _impl_.catalog_.Clear();
}
inline ::zetasql::SimpleCatalogProto* SimpleCatalogProto::mutable_catalog(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.catalog)
  return _impl_.catalog_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto >*
SimpleCatalogProto::mutable_catalog() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.catalog)
  return &_impl_.catalog_;
}
inline const ::zetasql::SimpleCatalogProto& SimpleCatalogProto::_internal_catalog(int index) const {
  return _impl_.catalog_.Get(index);
}
inline const ::zetasql::SimpleCatalogProto& SimpleCatalogProto::catalog(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.catalog)
  return _internal_catalog(index);
}
inline ::zetasql::SimpleCatalogProto* SimpleCatalogProto::_internal_add_catalog() {
  return _impl_.catalog_.Add();
}
inline ::zetasql::SimpleCatalogProto* SimpleCatalogProto::add_catalog() {
  ::zetasql::SimpleCatalogProto* _add = _internal_add_catalog();
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.catalog)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleCatalogProto >&
SimpleCatalogProto::catalog() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.catalog)
  return _impl_.catalog_;
}

// optional .zetasql.ZetaSQLBuiltinFunctionOptionsProto builtin_function_options = 5;
inline bool SimpleCatalogProto::_internal_has_builtin_function_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.builtin_function_options_ != nullptr);
  return value;
}
inline bool SimpleCatalogProto::has_builtin_function_options() const {
  return _internal_has_builtin_function_options();
}
inline const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto& SimpleCatalogProto::_internal_builtin_function_options() const {
  const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* p = _impl_.builtin_function_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto&>(
      ::zetasql::_ZetaSQLBuiltinFunctionOptionsProto_default_instance_);
}
inline const ::zetasql::ZetaSQLBuiltinFunctionOptionsProto& SimpleCatalogProto::builtin_function_options() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.builtin_function_options)
  return _internal_builtin_function_options();
}
inline void SimpleCatalogProto::unsafe_arena_set_allocated_builtin_function_options(
    ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* builtin_function_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.builtin_function_options_);
  }
  _impl_.builtin_function_options_ = builtin_function_options;
  if (builtin_function_options) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.SimpleCatalogProto.builtin_function_options)
}
inline ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* SimpleCatalogProto::release_builtin_function_options() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* temp = _impl_.builtin_function_options_;
  _impl_.builtin_function_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* SimpleCatalogProto::unsafe_arena_release_builtin_function_options() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleCatalogProto.builtin_function_options)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* temp = _impl_.builtin_function_options_;
  _impl_.builtin_function_options_ = nullptr;
  return temp;
}
inline ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* SimpleCatalogProto::_internal_mutable_builtin_function_options() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.builtin_function_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ZetaSQLBuiltinFunctionOptionsProto>(GetArenaForAllocation());
    _impl_.builtin_function_options_ = p;
  }
  return _impl_.builtin_function_options_;
}
inline ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* SimpleCatalogProto::mutable_builtin_function_options() {
  ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* _msg = _internal_mutable_builtin_function_options();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.builtin_function_options)
  return _msg;
}
inline void SimpleCatalogProto::set_allocated_builtin_function_options(::zetasql::ZetaSQLBuiltinFunctionOptionsProto* builtin_function_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.builtin_function_options_);
  }
  if (builtin_function_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(builtin_function_options));
    if (message_arena != submessage_arena) {
      builtin_function_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, builtin_function_options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.builtin_function_options_ = builtin_function_options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleCatalogProto.builtin_function_options)
}

// repeated .zetasql.FunctionProto custom_function = 6;
inline int SimpleCatalogProto::_internal_custom_function_size() const {
  return _impl_.custom_function_.size();
}
inline int SimpleCatalogProto::custom_function_size() const {
  return _internal_custom_function_size();
}
inline ::zetasql::FunctionProto* SimpleCatalogProto::mutable_custom_function(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.custom_function)
  return _impl_.custom_function_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionProto >*
SimpleCatalogProto::mutable_custom_function() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.custom_function)
  return &_impl_.custom_function_;
}
inline const ::zetasql::FunctionProto& SimpleCatalogProto::_internal_custom_function(int index) const {
  return _impl_.custom_function_.Get(index);
}
inline const ::zetasql::FunctionProto& SimpleCatalogProto::custom_function(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.custom_function)
  return _internal_custom_function(index);
}
inline ::zetasql::FunctionProto* SimpleCatalogProto::_internal_add_custom_function() {
  return _impl_.custom_function_.Add();
}
inline ::zetasql::FunctionProto* SimpleCatalogProto::add_custom_function() {
  ::zetasql::FunctionProto* _add = _internal_add_custom_function();
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.custom_function)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionProto >&
SimpleCatalogProto::custom_function() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.custom_function)
  return _impl_.custom_function_;
}

// repeated .zetasql.TableValuedFunctionProto custom_tvf = 9;
inline int SimpleCatalogProto::_internal_custom_tvf_size() const {
  return _impl_.custom_tvf_.size();
}
inline int SimpleCatalogProto::custom_tvf_size() const {
  return _internal_custom_tvf_size();
}
inline ::zetasql::TableValuedFunctionProto* SimpleCatalogProto::mutable_custom_tvf(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.custom_tvf)
  return _impl_.custom_tvf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TableValuedFunctionProto >*
SimpleCatalogProto::mutable_custom_tvf() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.custom_tvf)
  return &_impl_.custom_tvf_;
}
inline const ::zetasql::TableValuedFunctionProto& SimpleCatalogProto::_internal_custom_tvf(int index) const {
  return _impl_.custom_tvf_.Get(index);
}
inline const ::zetasql::TableValuedFunctionProto& SimpleCatalogProto::custom_tvf(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.custom_tvf)
  return _internal_custom_tvf(index);
}
inline ::zetasql::TableValuedFunctionProto* SimpleCatalogProto::_internal_add_custom_tvf() {
  return _impl_.custom_tvf_.Add();
}
inline ::zetasql::TableValuedFunctionProto* SimpleCatalogProto::add_custom_tvf() {
  ::zetasql::TableValuedFunctionProto* _add = _internal_add_custom_tvf();
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.custom_tvf)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TableValuedFunctionProto >&
SimpleCatalogProto::custom_tvf() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.custom_tvf)
  return _impl_.custom_tvf_;
}

// optional int32 file_descriptor_set_index = 7 [default = -1];
inline bool SimpleCatalogProto::_internal_has_file_descriptor_set_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SimpleCatalogProto::has_file_descriptor_set_index() const {
  return _internal_has_file_descriptor_set_index();
}
inline void SimpleCatalogProto::clear_file_descriptor_set_index() {
  _impl_.file_descriptor_set_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t SimpleCatalogProto::_internal_file_descriptor_set_index() const {
  return _impl_.file_descriptor_set_index_;
}
inline int32_t SimpleCatalogProto::file_descriptor_set_index() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.file_descriptor_set_index)
  return _internal_file_descriptor_set_index();
}
inline void SimpleCatalogProto::_internal_set_file_descriptor_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.file_descriptor_set_index_ = value;
}
inline void SimpleCatalogProto::set_file_descriptor_set_index(int32_t value) {
  _internal_set_file_descriptor_set_index(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleCatalogProto.file_descriptor_set_index)
}

// repeated .zetasql.ProcedureProto procedure = 8;
inline int SimpleCatalogProto::_internal_procedure_size() const {
  return _impl_.procedure_.size();
}
inline int SimpleCatalogProto::procedure_size() const {
  return _internal_procedure_size();
}
inline ::zetasql::ProcedureProto* SimpleCatalogProto::mutable_procedure(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.procedure)
  return _impl_.procedure_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ProcedureProto >*
SimpleCatalogProto::mutable_procedure() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.procedure)
  return &_impl_.procedure_;
}
inline const ::zetasql::ProcedureProto& SimpleCatalogProto::_internal_procedure(int index) const {
  return _impl_.procedure_.Get(index);
}
inline const ::zetasql::ProcedureProto& SimpleCatalogProto::procedure(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.procedure)
  return _internal_procedure(index);
}
inline ::zetasql::ProcedureProto* SimpleCatalogProto::_internal_add_procedure() {
  return _impl_.procedure_.Add();
}
inline ::zetasql::ProcedureProto* SimpleCatalogProto::add_procedure() {
  ::zetasql::ProcedureProto* _add = _internal_add_procedure();
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.procedure)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ProcedureProto >&
SimpleCatalogProto::procedure() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.procedure)
  return _impl_.procedure_;
}

// repeated .zetasql.SimpleConstantProto constant = 10;
inline int SimpleCatalogProto::_internal_constant_size() const {
  return _impl_.constant_.size();
}
inline int SimpleCatalogProto::constant_size() const {
  return _internal_constant_size();
}
inline ::zetasql::SimpleConstantProto* SimpleCatalogProto::mutable_constant(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleCatalogProto.constant)
  return _impl_.constant_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleConstantProto >*
SimpleCatalogProto::mutable_constant() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleCatalogProto.constant)
  return &_impl_.constant_;
}
inline const ::zetasql::SimpleConstantProto& SimpleCatalogProto::_internal_constant(int index) const {
  return _impl_.constant_.Get(index);
}
inline const ::zetasql::SimpleConstantProto& SimpleCatalogProto::constant(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleCatalogProto.constant)
  return _internal_constant(index);
}
inline ::zetasql::SimpleConstantProto* SimpleCatalogProto::_internal_add_constant() {
  return _impl_.constant_.Add();
}
inline ::zetasql::SimpleConstantProto* SimpleCatalogProto::add_constant() {
  ::zetasql::SimpleConstantProto* _add = _internal_add_constant();
  // @@protoc_insertion_point(field_add:zetasql.SimpleCatalogProto.constant)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleConstantProto >&
SimpleCatalogProto::constant() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleCatalogProto.constant)
  return _impl_.constant_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2fsimple_5fcatalog_2eproto
