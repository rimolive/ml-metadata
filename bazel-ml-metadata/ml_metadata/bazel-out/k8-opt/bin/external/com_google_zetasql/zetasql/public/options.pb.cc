// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/options.proto

#include "zetasql/public/options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR LanguageFeatureOptions::LanguageFeatureOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.in_development_)*/false
  , /*decltype(_impl_.ideally_enabled_)*/true} {}
struct LanguageFeatureOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LanguageFeatureOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LanguageFeatureOptionsDefaultTypeInternal() {}
  union {
    LanguageFeatureOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LanguageFeatureOptionsDefaultTypeInternal _LanguageFeatureOptions_default_instance_;
PROTOBUF_CONSTEXPR ResolvedASTRewriteOptions::ResolvedASTRewriteOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.default_enabled_)*/false
  , /*decltype(_impl_.in_development_)*/false} {}
struct ResolvedASTRewriteOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolvedASTRewriteOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolvedASTRewriteOptionsDefaultTypeInternal() {}
  union {
    ResolvedASTRewriteOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolvedASTRewriteOptionsDefaultTypeInternal _ResolvedASTRewriteOptions_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fpublic_2foptions_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2foptions_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, _impl_.ideally_enabled_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, _impl_.in_development_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, _impl_.default_enabled_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, _impl_.in_development_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::zetasql::LanguageFeatureOptions)},
  { 10, 18, -1, sizeof(::zetasql::ResolvedASTRewriteOptions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_LanguageFeatureOptions_default_instance_._instance,
  &::zetasql::_ResolvedASTRewriteOptions_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fpublic_2foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034zetasql/public/options.proto\022\007zetasql\032"
  " google/protobuf/descriptor.proto\"V\n\026Lan"
  "guageFeatureOptions\022\035\n\017ideally_enabled\030\001"
  " \001(\010:\004true\022\035\n\016in_development\030\002 \001(\010:\005fals"
  "e\"S\n\031ResolvedASTRewriteOptions\022\027\n\017defaul"
  "t_enabled\030\001 \001(\010\022\035\n\016in_development\030\002 \001(\010:"
  "\005false*\276\001\n\017LanguageVersion\022\023\n\017VERSION_CU"
  "RRENT\020\001\022\020\n\013VERSION_1_0\020\220N\022\020\n\013VERSION_1_1"
  "\020\370U\022\020\n\013VERSION_1_2\020\340]\022\020\n\013VERSION_1_3\020\310e\022"
  "\020\n\013VERSION_1_4\020\260m\022<\n/__LanguageVersion__"
  "switch_must_have_a_default__\020\377\377\377\377\377\377\377\377\377\001*"
  "\355-\n\017LanguageFeature\022\036\n\032FEATURE_ANALYTIC_"
  "FUNCTIONS\020\001\022\027\n\023FEATURE_TABLESAMPLE\020\002\022-\n\037"
  "FEATURE_DISALLOW_GROUP_BY_FLOAT\020\003\032\010\332\361\252\211\005"
  "\002\010\000\022\033\n\027FEATURE_TIMESTAMP_NANOS\020\005\022 \n\034FEAT"
  "URE_DML_UPDATE_WITH_JOIN\020\006\022\"\n\036FEATURE_TA"
  "BLE_VALUED_FUNCTIONS\020\010\022%\n!FEATURE_CREATE"
  "_AGGREGATE_FUNCTION\020\t\022!\n\035FEATURE_CREATE_"
  "TABLE_FUNCTION\020\n\022\033\n\027FEATURE_GROUP_BY_ROL"
  "LUP\020\014\022\036\n\032FEATURE_TEMPLATE_FUNCTIONS\020\r\022%\n"
  "!FEATURE_CREATE_TABLE_PARTITION_BY\020\016\022#\n\037"
  "FEATURE_CREATE_TABLE_CLUSTER_BY\020\017\022\030\n\024FEA"
  "TURE_NUMERIC_TYPE\020\020\022!\n\035FEATURE_CREATE_TA"
  "BLE_NOT_NULL\020\021\022*\n&FEATURE_CREATE_TABLE_F"
  "IELD_ANNOTATIONS\020\022\022.\n*FEATURE_CREATE_TAB"
  "LE_AS_SELECT_COLUMN_LIST\020\023\0220\n\"FEATURE_DI"
  "SALLOW_NULL_PRIMARY_KEYS\020\024\032\010\332\361\252\211\005\002\010\000\0222\n$"
  "FEATURE_DISALLOW_PRIMARY_KEY_UPDATES\020\025\032\010"
  "\332\361\252\211\005\002\010\000\0223\n/FEATURE_TABLESAMPLE_FROM_TAB"
  "LE_VALUED_FUNCTIONS\020\026\022\026\n\022FEATURE_ENCRYPT"
  "ION\020\027\022#\n\025FEATURE_ANONYMIZATION\020\030\032\010\332\361\252\211\005\002"
  "\020\001\022\025\n\021FEATURE_GEOGRAPHY\020\031\022,\n(FEATURE_STR"
  "ATIFIED_RESERVOIR_TABLESAMPLE\020\032\022\030\n\024FEATU"
  "RE_FOREIGN_KEYS\020\033\022*\n\034FEATURE_BETWEEN_UIN"
  "T64_INT64\020\034\032\010\332\361\252\211\005\002\020\001\022\034\n\030FEATURE_CHECK_C"
  "ONSTRAINT\020\035\022&\n\"FEATURE_PARAMETERS_IN_GRA"
  "NTEE_LIST\020\036\022\033\n\027FEATURE_NAMED_ARGUMENTS\020\037"
  "\0221\n-FEATURE_ALLOW_LEGACY_ROW_ACCESS_POLI"
  "CY_SYNTAX\020 \0221\n-FEATURE_CREATE_MATERIALIZ"
  "ED_VIEW_PARTITION_BY\020!\022/\n+FEATURE_CREATE"
  "_MATERIALIZED_VIEW_CLUSTER_BY\020\"\0229\n5FEATU"
  "RE_CREATE_EXTERNAL_TABLE_WITH_TABLE_ELEM"
  "ENT_LIST\020#\022#\n\037FEATURE_UNENFORCED_PRIMARY"
  "_KEYS\020(\022\033\n\027FEATURE_BIGNUMERIC_TYPE\020)\022$\n\026"
  "FEATURE_EXTENDED_TYPES\020*\032\010\332\361\252\211\005\002\020\001\022\037\n\021FE"
  "ATURE_JSON_TYPE\020+\032\010\332\361\252\211\005\002\020\001\022(\n\032FEATURE_J"
  "SON_NO_VALIDATION\020,\032\010\332\361\252\211\005\002\010\000\022\'\n\031FEATURE"
  "_JSON_LEGACY_PARSE\020.\032\010\332\361\252\211\005\002\010\000\022B\n4FEATUR"
  "E_CREATE_EXTERNAL_TABLE_WITH_PARTITION_C"
  "OLUMNS\020/\032\010\332\361\252\211\005\002\020\001\022#\n\025FEATURE_INTERVAL_T"
  "YPE\0201\032\010\332\361\252\211\005\002\020\001\0220\n\"FEATURE_JSON_STRICT_N"
  "UMBER_PARSING\0204\032\010\332\361\252\211\005\002\010\000\0224\n0FEATURE_FUN"
  "CTION_ARGUMENT_NAMES_HIDE_LOCAL_NAMES\0207\022"
  "\037\n\033FEATURE_PARAMETERIZED_TYPES\0208\022\035\n\031FEAT"
  "URE_CREATE_TABLE_LIKE\0209\022 \n\034FEATURE_JSON_"
  "ARRAY_FUNCTIONS\020:\022(\n$FEATURE_CREATE_VIEW"
  "_WITH_COLUMN_LIST\020;\022(\n\032FEATURE_CREATE_TA"
  "BLE_CLONE\020<\032\010\332\361\252\211\005\002\020\001\022 \n\022FEATURE_CLONE_D"
  "ATA\020=\032\010\332\361\252\211\005\002\020\001\0220\n\"FEATURE_ALTER_COLUMN_"
  "SET_DATA_TYPE\020>\032\010\332\361\252\211\005\002\020\001\022!\n\035FEATURE_CRE"
  "ATE_SNAPSHOT_TABLE\020\?\022,\n(FEATURE_FUNCTION"
  "_ARGUMENTS_WITH_DEFAULTS\020@\0221\n-FEATURE_CR"
  "EATE_EXTERNAL_TABLE_WITH_CONNECTION\020A\022\035\n"
  "\031FEATURE_CREATE_TABLE_COPY\020B\022%\n!FEATURE_"
  "ALTER_TABLE_RENAME_COLUMN\020C\0225\n\'FEATURE_J"
  "SON_VALUE_EXTRACTION_FUNCTIONS\020D\032\010\332\361\252\211\005\002"
  "\020\001\022\?\n)FEATURE_DISALLOW_LEGACY_UNICODE_CO"
  "LLATION\020E\032\020\332\361\252\211\005\002\020\001\332\361\252\211\005\002\010\000\0226\n2FEATURE_A"
  "LLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DD"
  "L\020F\022+\n\035FEATURE_TIME_BUCKET_FUNCTIONS\020G\032\010"
  "\332\361\252\211\005\002\020\001\022,\n\036FEATURE_INVERSE_TRIG_FUNCTIO"
  "NS\020H\032\010\332\361\252\211\005\002\020\001\022 \n\022FEATURE_RANGE_TYPE\020I\032\010"
  "\332\361\252\211\005\002\020\001\022\'\n\031FEATURE_NON_SQL_PROCEDURE\020K\032"
  "\010\332\361\252\211\005\002\020\001\022.\n FEATURE_ROUND_WITH_ROUNDING"
  "_MODE\020L\032\010\332\361\252\211\005\002\020\001\022$\n\026FEATURE_CBRT_FUNCTI"
  "ONS\020M\032\010\332\361\252\211\005\002\020\001\022*\n\032FEATURE_SPANNER_LEGAC"
  "Y_DDL\020N\032\n\332\361\252\211\005\004\010\000\020\001\022#\n\036FEATURE_V_1_1_ORD"
  "ER_BY_COLLATE\020\371U\022#\n\036FEATURE_V_1_1_WITH_O"
  "N_SUBQUERY\020\372U\022-\n(FEATURE_V_1_1_SELECT_ST"
  "AR_EXCEPT_REPLACE\020\373U\022(\n#FEATURE_V_1_1_OR"
  "DER_BY_IN_AGGREGATE\020\374U\022-\n(FEATURE_V_1_1_"
  "CAST_DIFFERENT_ARRAY_TYPES\020\375U\022!\n\034FEATURE"
  "_V_1_1_ARRAY_EQUALITY\020\376U\022%\n FEATURE_V_1_"
  "1_LIMIT_IN_AGGREGATE\020\377U\022&\n!FEATURE_V_1_1"
  "_HAVING_IN_AGGREGATE\020\200V\0225\n0FEATURE_V_1_1"
  "_NULL_HANDLING_MODIFIER_IN_ANALYTIC\020\201V\0226"
  "\n1FEATURE_V_1_1_NULL_HANDLING_MODIFIER_I"
  "N_AGGREGATE\020\202V\022(\n#FEATURE_V_1_1_FOR_SYST"
  "EM_TIME_AS_OF\020\203V\022\035\n\030FEATURE_V_1_2_CIVIL_"
  "TIME\020\341]\022%\n FEATURE_V_1_2_SAFE_FUNCTION_C"
  "ALL\020\342]\022\"\n\035FEATURE_V_1_2_GROUP_BY_STRUCT\020"
  "\343]\022,\n\'FEATURE_V_1_2_PROTO_EXTENSIONS_WIT"
  "H_NEW\020\344]\022!\n\034FEATURE_V_1_2_GROUP_BY_ARRAY"
  "\020\345]\022,\n\'FEATURE_V_1_2_PROTO_EXTENSIONS_WI"
  "TH_SET\020\346]\0220\n+FEATURE_V_1_2_CORRELATED_RE"
  "FS_IN_NESTED_DML\020\347]\022$\n\037FEATURE_V_1_2_WEE"
  "K_WITH_WEEKDAY\020\350]\022*\n%FEATURE_V_1_2_ARRAY"
  "_ELEMENTS_WITH_SET\020\351]\0223\n.FEATURE_V_1_2_N"
  "ESTED_UPDATE_DELETE_WITH_OFFSET\020\352]\022$\n\037FE"
  "ATURE_V_1_2_GENERATED_COLUMNS\020\353]\022(\n#FEAT"
  "URE_V_1_3_PROTO_DEFAULT_IF_NULL\020\311e\022%\n FE"
  "ATURE_V_1_3_EXTRACT_FROM_PROTO\020\312e\022H\n9FEA"
  "TURE_V_1_3_DEPRECATED_DISALLOW_PROTO3_HA"
  "S_SCALAR_FIELD\020\313e\032\010\332\361\252\211\005\002\010\000\022!\n\034FEATURE_V"
  "_1_3_ARRAY_ORDERING\020\314e\022*\n%FEATURE_V_1_3_"
  "OMIT_INSERT_COLUMN_LIST\020\315e\022-\n(FEATURE_V_"
  "1_3_IGNORE_PROTO3_USE_DEFAULTS\020\316e\022!\n\034FEA"
  "TURE_V_1_3_REPLACE_FIELDS\020\317e\022/\n*FEATURE_"
  "V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY\020\320e\022-\n"
  "(FEATURE_V_1_3_ALLOW_DASHES_IN_TABLE_NAM"
  "E\020\321e\022%\n FEATURE_V_1_3_CONCAT_MIXED_TYPES"
  "\020\322e\022!\n\034FEATURE_V_1_3_WITH_RECURSIVE\020\323e\022\035"
  "\n\030FEATURE_V_1_3_PROTO_MAPS\020\324e\022.\n)FEATURE"
  "_V_1_3_ENUM_VALUE_DESCRIPTOR_PROTO\020\325e\022 \n"
  "\033FEATURE_V_1_3_DECIMAL_ALIAS\020\326e\022,\n\'FEATU"
  "RE_V_1_3_UNNEST_AND_FLATTEN_ARRAYS\020\327e\022\'\n"
  "\"FEATURE_V_1_3_ALLOW_CONSECUTIVE_ON\020\330e\0221"
  "\n,FEATURE_V_1_3_ALLOW_REGEXP_EXTRACT_OPT"
  "IONALS\020\331e\022)\n$FEATURE_V_1_3_DATE_TIME_CON"
  "STRUCTORS\020\332e\022#\n\036FEATURE_V_1_3_DATE_ARITH"
  "METICS\020\333e\022.\n)FEATURE_V_1_3_ADDITIONAL_ST"
  "RING_FUNCTIONS\020\334e\022\"\n\035FEATURE_V_1_3_WITH_"
  "GROUP_ROWS\020\335e\0220\n+FEATURE_V_1_3_EXTENDED_"
  "DATE_TIME_SIGNATURES\020\336e\022-\n(FEATURE_V_1_3"
  "_EXTENDED_GEOGRAPHY_PARSERS\020\337e\022)\n$FEATUR"
  "E_V_1_3_INLINE_LAMBDA_ARGUMENT\020\340e\022\030\n\023FEA"
  "TURE_V_1_3_PIVOT\020\341e\022\'\n\"FEATURE_V_1_3_ANN"
  "OTATION_FRAMEWORK\020\342e\022.\n\037FEATURE_V_1_3_CO"
  "LLATION_SUPPORT\020\343e\032\010\332\361\252\211\005\002\020\001\022\036\n\031FEATURE_"
  "V_1_3_IS_DISTINCT\020\344e\022!\n\034FEATURE_V_1_3_FO"
  "RMAT_IN_CAST\020\345e\022\032\n\025FEATURE_V_1_3_UNPIVOT"
  "\020\346e\022 \n\033FEATURE_V_1_3_DML_RETURNING\020\347e\022 \n"
  "\033FEATURE_V_1_3_FILTER_FIELDS\020\350e\022\032\n\025FEATU"
  "RE_V_1_3_QUALIFY\020\351e\022\031\n\024FEATURE_V_1_3_REP"
  "EAT\020\352e\022\'\n\"FEATURE_V_1_3_COLUMN_DEFAULT_V"
  "ALUE\020\353e\022\031\n\024FEATURE_V_1_3_FOR_IN\020\354e\022\036\n\031FE"
  "ATURE_V_1_3_KLL_WEIGHTS\020\355e\022.\n\037FEATURE_V_"
  "1_3_LIKE_ANY_SOME_ALL\020\356e\032\010\332\361\252\211\005\002\020\001\022\034\n\027FE"
  "ATURE_V_1_3_CASE_STMT\020\357e\022$\n\037FEATURE_V_1_"
  "3_ALLOW_SLASH_PATHS\020\360e\022\"\n\035FEATURE_V_1_3_"
  "TYPEOF_FUNCTION\020\361e\022\037\n\032FEATURE_V_1_3_SCRI"
  "PT_LABEL\020\362e\022\"\n\035FEATURE_V_1_3_REMOTE_FUNC"
  "TION\020\363e\022\'\n\"FEATURE_V_1_3_ARRAY_GREATEST_"
  "LEAST\020\364e\022,\n\'FEATURE_V_1_3_BRACED_PROTO_C"
  "ONSTRUCTORS\020\365e\022\"\n\035FEATURE_V_1_4_WITH_EXP"
  "RESSION\020\260m\022.\n\037FEATURE_V_1_4_COLLATION_IN"
  "_TYPE\020\261m\032\010\332\361\252\211\005\002\020\001\0221\n\"FEATURE_V_1_4_ORDE"
  "RED_PRIMARY_KEYS\020\262m\032\010\332\361\252\211\005\002\020\001\022 \n\021FEATURE"
  "_V_1_4_TTL\020\263m\032\010\332\361\252\211\005\002\020\001\022$\n\037FEATURE_V_1_4"
  "_BARE_ARRAY_ACCESS\020\264m\022,\n\034FEATURE_EXPERIM"
  "ENTAL_MODULES\020\332\374<\032\010\332\361\252\211\005\002\020\001\022\?\n/FEATURE_T"
  "EST_IDEALLY_ENABLED_BUT_IN_DEVELOPMENT\020\267"
  "\204=\032\010\332\361\252\211\005\002\020\001\022-\n\035FEATURE_TEST_IDEALLY_DIS"
  "ABLED\020\270\204=\032\010\332\361\252\211\005\002\010\000\022B\n0FEATURE_TEST_IDEA"
  "LLY_DISABLED_AND_IN_DEVELOPMENT\020\271\204=\032\n\332\361\252"
  "\211\005\004\010\000\020\001\022<\n/__LanguageFeature__switch_mus"
  "t_have_a_default__\020\377\377\377\377\377\377\377\377\377\001\"\004\010$\020\'\"\004\010-\020"
  "-\"\004\0100\0200\"\004\010J\020J\"\006\010\366e\020\366e\"\010\010\333\374<\020\333\374<*\370\004\n\022Reso"
  "lvedASTRewrite\022\036\n\032REWRITE_INVALID_DO_NOT"
  "_USE\020\000\022\035\n\017REWRITE_FLATTEN\020\001\032\010\202\207\335\204\n\002\010\001\022#\n"
  "\025REWRITE_ANONYMIZATION\020\002\032\010\202\207\335\204\n\002\010\000\022#\n\025RE"
  "WRITE_PROTO_MAP_FNS\020\003\032\010\202\207\335\204\n\002\010\001\022,\n\036REWRI"
  "TE_ARRAY_FILTER_TRANSFORM\020\004\032\010\202\207\335\204\n\002\010\001\022\035\n"
  "\017REWRITE_UNPIVOT\020\005\032\010\202\207\335\204\n\002\010\001\022\033\n\rREWRITE_"
  "PIVOT\020\006\032\010\202\207\335\204\n\002\010\001\022$\n\026REWRITE_ARRAY_INCLU"
  "DES\020\007\032\010\202\207\335\204\n\002\010\001\022%\n\027REWRITE_TYPEOF_FUNCTI"
  "ON\020\010\032\010\202\207\335\204\n\002\010\001\022\037\n\021REWRITE_WITH_EXPR\020\t\032\010\202"
  "\207\335\204\n\002\010\001\0222\n\034REWRITE_INLINE_SQL_FUNCTIONS\020"
  "\n\032\020\202\207\335\204\n\002\010\000\202\207\335\204\n\002\020\001\022-\n\027REWRITE_INLINE_SQ"
  "L_TVFS\020\013\032\020\202\207\335\204\n\002\010\000\202\207\335\204\n\002\020\001\022*\n\034REWRITE_NU"
  "LLIFERROR_FUNCTION\020\014\032\010\202\207\335\204\n\002\010\001\022%\n\027REWRIT"
  "E_UNARY_FUNCTIONS\020\r\032\010\202\207\335\204\n\002\010\001\022\"\n\024REWRITE"
  "_LIKE_ANY_ALL\020\016\032\010\202\207\335\204\n\002\010\001\022\'\n\031REWRITE_TER"
  "NARY_FUNCTIONS\020\017\032\010\202\207\335\204\n\002\010\001*M\n\022NameResolu"
  "tionMode\022\033\n\027NAME_RESOLUTION_DEFAULT\020\000\022\032\n"
  "\026NAME_RESOLUTION_STRICT\020\001*9\n\013ProductMode"
  "\022\024\n\020PRODUCT_INTERNAL\020\000\022\024\n\020PRODUCT_EXTERN"
  "AL\020\001*;\n\020StatementContext\022\023\n\017CONTEXT_DEFA"
  "ULT\020\000\022\022\n\016CONTEXT_MODULE\020\001*w\n\020ErrorMessag"
  "eMode\022\036\n\032ERROR_MESSAGE_WITH_PAYLOAD\020\000\022\032\n"
  "\026ERROR_MESSAGE_ONE_LINE\020\001\022\'\n#ERROR_MESSA"
  "GE_MULTI_LINE_WITH_CARET\020\002*R\n\rParameterM"
  "ode\022\023\n\017PARAMETER_NAMED\020\000\022\030\n\024PARAMETER_PO"
  "SITIONAL\020\001\022\022\n\016PARAMETER_NONE\020\002*\213\001\n\027Parse"
  "LocationRecordType\022\036\n\032PARSE_LOCATION_REC"
  "ORD_NONE\020\000\022)\n%PARSE_LOCATION_RECORD_FULL"
  "_NODE_SCOPE\020\001\022%\n!PARSE_LOCATION_RECORD_C"
  "ODE_SEARCH\020\002:g\n\030language_feature_options"
  "\022!.google.protobuf.EnumValueOptions\030\233\256\225Q"
  " \001(\0132\037.zetasql.LanguageFeatureOptions:b\n"
  "\017rewrite_options\022!.google.protobuf.EnumV"
  "alueOptions\030\360\320\313\240\001 \001(\0132\".zetasql.Resolved"
  "ASTRewriteOptionsB$\n\022com.google.zetasqlB"
  "\016ZetaSQLOptions"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zetasql_2fpublic_2foptions_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_zetasql_2fpublic_2foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fpublic_2foptions_2eproto = {
    false, false, 7735, descriptor_table_protodef_zetasql_2fpublic_2foptions_2eproto,
    "zetasql/public/options.proto",
    &descriptor_table_zetasql_2fpublic_2foptions_2eproto_once, descriptor_table_zetasql_2fpublic_2foptions_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_zetasql_2fpublic_2foptions_2eproto::offsets,
    file_level_metadata_zetasql_2fpublic_2foptions_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto,
    file_level_service_descriptors_zetasql_2fpublic_2foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fpublic_2foptions_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2foptions_2eproto(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
namespace zetasql {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[0];
}
bool LanguageVersion_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 10000:
    case 11000:
    case 12000:
    case 13000:
    case 14000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageFeature_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[1];
}
bool LanguageFeature_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 46:
    case 47:
    case 49:
    case 52:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 75:
    case 76:
    case 77:
    case 78:
    case 11001:
    case 11002:
    case 11003:
    case 11004:
    case 11005:
    case 11006:
    case 11007:
    case 11008:
    case 11009:
    case 11010:
    case 11011:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12011:
    case 13001:
    case 13002:
    case 13003:
    case 13004:
    case 13005:
    case 13006:
    case 13007:
    case 13008:
    case 13009:
    case 13010:
    case 13011:
    case 13012:
    case 13013:
    case 13014:
    case 13015:
    case 13016:
    case 13017:
    case 13018:
    case 13019:
    case 13020:
    case 13021:
    case 13022:
    case 13023:
    case 13024:
    case 13025:
    case 13026:
    case 13027:
    case 13028:
    case 13029:
    case 13030:
    case 13031:
    case 13032:
    case 13033:
    case 13034:
    case 13035:
    case 13036:
    case 13037:
    case 13038:
    case 13039:
    case 13040:
    case 13041:
    case 13042:
    case 13043:
    case 13044:
    case 13045:
    case 14000:
    case 14001:
    case 14002:
    case 14003:
    case 14004:
    case 999002:
    case 999991:
    case 999992:
    case 999993:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResolvedASTRewrite_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[2];
}
bool ResolvedASTRewrite_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NameResolutionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[3];
}
bool NameResolutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[4];
}
bool ProductMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatementContext_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[5];
}
bool StatementContext_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorMessageMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[6];
}
bool ErrorMessageMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[7];
}
bool ParameterMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParseLocationRecordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[8];
}
bool ParseLocationRecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LanguageFeatureOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<LanguageFeatureOptions>()._impl_._has_bits_);
  static void set_has_ideally_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_in_development(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LanguageFeatureOptions::LanguageFeatureOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.LanguageFeatureOptions)
}
LanguageFeatureOptions::LanguageFeatureOptions(const LanguageFeatureOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LanguageFeatureOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.in_development_){}
    , decltype(_impl_.ideally_enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.in_development_, &from._impl_.in_development_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ideally_enabled_) -
    reinterpret_cast<char*>(&_impl_.in_development_)) + sizeof(_impl_.ideally_enabled_));
  // @@protoc_insertion_point(copy_constructor:zetasql.LanguageFeatureOptions)
}

inline void LanguageFeatureOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.in_development_){false}
    , decltype(_impl_.ideally_enabled_){true}
  };
}

LanguageFeatureOptions::~LanguageFeatureOptions() {
  // @@protoc_insertion_point(destructor:zetasql.LanguageFeatureOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LanguageFeatureOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LanguageFeatureOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LanguageFeatureOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.LanguageFeatureOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.in_development_ = false;
    _impl_.ideally_enabled_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanguageFeatureOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ideally_enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ideally_enabled(&has_bits);
          _impl_.ideally_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_development = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_in_development(&has_bits);
          _impl_.in_development_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LanguageFeatureOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.LanguageFeatureOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ideally_enabled = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ideally_enabled(), target);
  }

  // optional bool in_development = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_in_development(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.LanguageFeatureOptions)
  return target;
}

size_t LanguageFeatureOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.LanguageFeatureOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool in_development = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool ideally_enabled = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LanguageFeatureOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LanguageFeatureOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LanguageFeatureOptions::GetClassData() const { return &_class_data_; }


void LanguageFeatureOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LanguageFeatureOptions*>(&to_msg);
  auto& from = static_cast<const LanguageFeatureOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.LanguageFeatureOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.in_development_ = from._impl_.in_development_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ideally_enabled_ = from._impl_.ideally_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LanguageFeatureOptions::CopyFrom(const LanguageFeatureOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.LanguageFeatureOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanguageFeatureOptions::IsInitialized() const {
  return true;
}

void LanguageFeatureOptions::InternalSwap(LanguageFeatureOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.in_development_, other->_impl_.in_development_);
  swap(_impl_.ideally_enabled_, other->_impl_.ideally_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LanguageFeatureOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2foptions_2eproto_getter, &descriptor_table_zetasql_2fpublic_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2foptions_2eproto[0]);
}

// ===================================================================

class ResolvedASTRewriteOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedASTRewriteOptions>()._impl_._has_bits_);
  static void set_has_default_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_development(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ResolvedASTRewriteOptions::ResolvedASTRewriteOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedASTRewriteOptions)
}
ResolvedASTRewriteOptions::ResolvedASTRewriteOptions(const ResolvedASTRewriteOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResolvedASTRewriteOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_enabled_){}
    , decltype(_impl_.in_development_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.default_enabled_, &from._impl_.default_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.in_development_) -
    reinterpret_cast<char*>(&_impl_.default_enabled_)) + sizeof(_impl_.in_development_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedASTRewriteOptions)
}

inline void ResolvedASTRewriteOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_enabled_){false}
    , decltype(_impl_.in_development_){false}
  };
}

ResolvedASTRewriteOptions::~ResolvedASTRewriteOptions() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedASTRewriteOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResolvedASTRewriteOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResolvedASTRewriteOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResolvedASTRewriteOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ResolvedASTRewriteOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.default_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.in_development_) -
      reinterpret_cast<char*>(&_impl_.default_enabled_)) + sizeof(_impl_.in_development_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolvedASTRewriteOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool default_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_default_enabled(&has_bits);
          _impl_.default_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_development = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_in_development(&has_bits);
          _impl_.in_development_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResolvedASTRewriteOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ResolvedASTRewriteOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool default_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_default_enabled(), target);
  }

  // optional bool in_development = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_in_development(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ResolvedASTRewriteOptions)
  return target;
}

size_t ResolvedASTRewriteOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ResolvedASTRewriteOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool default_enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool in_development = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResolvedASTRewriteOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResolvedASTRewriteOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResolvedASTRewriteOptions::GetClassData() const { return &_class_data_; }


void ResolvedASTRewriteOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResolvedASTRewriteOptions*>(&to_msg);
  auto& from = static_cast<const ResolvedASTRewriteOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ResolvedASTRewriteOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.default_enabled_ = from._impl_.default_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.in_development_ = from._impl_.in_development_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResolvedASTRewriteOptions::CopyFrom(const ResolvedASTRewriteOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ResolvedASTRewriteOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedASTRewriteOptions::IsInitialized() const {
  return true;
}

void ResolvedASTRewriteOptions::InternalSwap(ResolvedASTRewriteOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResolvedASTRewriteOptions, _impl_.in_development_)
      + sizeof(ResolvedASTRewriteOptions::_impl_.in_development_)
      - PROTOBUF_FIELD_OFFSET(ResolvedASTRewriteOptions, _impl_.default_enabled_)>(
          reinterpret_cast<char*>(&_impl_.default_enabled_),
          reinterpret_cast<char*>(&other->_impl_.default_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedASTRewriteOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2foptions_2eproto_getter, &descriptor_table_zetasql_2fpublic_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2foptions_2eproto[1]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::zetasql::LanguageFeatureOptions >, 11, false>
  language_feature_options(kLanguageFeatureOptionsFieldNumber, ::zetasql::LanguageFeatureOptions::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::zetasql::ResolvedASTRewriteOptions >, 11, false>
  rewrite_options(kRewriteOptionsFieldNumber, ::zetasql::ResolvedASTRewriteOptions::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::LanguageFeatureOptions*
Arena::CreateMaybeMessage< ::zetasql::LanguageFeatureOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::LanguageFeatureOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedASTRewriteOptions*
Arena::CreateMaybeMessage< ::zetasql::ResolvedASTRewriteOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedASTRewriteOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
