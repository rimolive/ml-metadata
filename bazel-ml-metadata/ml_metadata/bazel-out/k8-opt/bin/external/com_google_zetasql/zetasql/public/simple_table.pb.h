// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/simple_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5ftable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5ftable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/annotation.pb.h"
#include "zetasql/public/type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2fsimple_5ftable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2fsimple_5ftable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto;
namespace zetasql {
class SimpleAnonymizationInfoProto;
struct SimpleAnonymizationInfoProtoDefaultTypeInternal;
extern SimpleAnonymizationInfoProtoDefaultTypeInternal _SimpleAnonymizationInfoProto_default_instance_;
class SimpleColumnProto;
struct SimpleColumnProtoDefaultTypeInternal;
extern SimpleColumnProtoDefaultTypeInternal _SimpleColumnProto_default_instance_;
class SimpleTableProto;
struct SimpleTableProtoDefaultTypeInternal;
extern SimpleTableProtoDefaultTypeInternal _SimpleTableProto_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::SimpleAnonymizationInfoProto* Arena::CreateMaybeMessage<::zetasql::SimpleAnonymizationInfoProto>(Arena*);
template<> ::zetasql::SimpleColumnProto* Arena::CreateMaybeMessage<::zetasql::SimpleColumnProto>(Arena*);
template<> ::zetasql::SimpleTableProto* Arena::CreateMaybeMessage<::zetasql::SimpleTableProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class SimpleAnonymizationInfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleAnonymizationInfoProto) */ {
 public:
  inline SimpleAnonymizationInfoProto() : SimpleAnonymizationInfoProto(nullptr) {}
  ~SimpleAnonymizationInfoProto() override;
  explicit PROTOBUF_CONSTEXPR SimpleAnonymizationInfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleAnonymizationInfoProto(const SimpleAnonymizationInfoProto& from);
  SimpleAnonymizationInfoProto(SimpleAnonymizationInfoProto&& from) noexcept
    : SimpleAnonymizationInfoProto() {
    *this = ::std::move(from);
  }

  inline SimpleAnonymizationInfoProto& operator=(const SimpleAnonymizationInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleAnonymizationInfoProto& operator=(SimpleAnonymizationInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleAnonymizationInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleAnonymizationInfoProto* internal_default_instance() {
    return reinterpret_cast<const SimpleAnonymizationInfoProto*>(
               &_SimpleAnonymizationInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimpleAnonymizationInfoProto& a, SimpleAnonymizationInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleAnonymizationInfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleAnonymizationInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleAnonymizationInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleAnonymizationInfoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleAnonymizationInfoProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleAnonymizationInfoProto& from) {
    SimpleAnonymizationInfoProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleAnonymizationInfoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.SimpleAnonymizationInfoProto";
  }
  protected:
  explicit SimpleAnonymizationInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridColumnNameFieldNumber = 1,
  };
  // repeated string userid_column_name = 1;
  int userid_column_name_size() const;
  private:
  int _internal_userid_column_name_size() const;
  public:
  void clear_userid_column_name();
  const std::string& userid_column_name(int index) const;
  std::string* mutable_userid_column_name(int index);
  void set_userid_column_name(int index, const std::string& value);
  void set_userid_column_name(int index, std::string&& value);
  void set_userid_column_name(int index, const char* value);
  void set_userid_column_name(int index, const char* value, size_t size);
  std::string* add_userid_column_name();
  void add_userid_column_name(const std::string& value);
  void add_userid_column_name(std::string&& value);
  void add_userid_column_name(const char* value);
  void add_userid_column_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& userid_column_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_userid_column_name();
  private:
  const std::string& _internal_userid_column_name(int index) const;
  std::string* _internal_add_userid_column_name();
  public:

  // @@protoc_insertion_point(class_scope:zetasql.SimpleAnonymizationInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> userid_column_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fsimple_5ftable_2eproto;
};
// -------------------------------------------------------------------

class SimpleTableProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleTableProto) */ {
 public:
  inline SimpleTableProto() : SimpleTableProto(nullptr) {}
  ~SimpleTableProto() override;
  explicit PROTOBUF_CONSTEXPR SimpleTableProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleTableProto(const SimpleTableProto& from);
  SimpleTableProto(SimpleTableProto&& from) noexcept
    : SimpleTableProto() {
    *this = ::std::move(from);
  }

  inline SimpleTableProto& operator=(const SimpleTableProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleTableProto& operator=(SimpleTableProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleTableProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleTableProto* internal_default_instance() {
    return reinterpret_cast<const SimpleTableProto*>(
               &_SimpleTableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimpleTableProto& a, SimpleTableProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleTableProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleTableProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleTableProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleTableProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleTableProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleTableProto& from) {
    SimpleTableProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleTableProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.SimpleTableProto";
  }
  protected:
  explicit SimpleTableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 4,
    kPrimaryKeyColumnIndexFieldNumber = 9,
    kNameFieldNumber = 1,
    kNameInCatalogFieldNumber = 5,
    kFullNameFieldNumber = 10,
    kAnonymizationInfoFieldNumber = 8,
    kSerializationIdFieldNumber = 2,
    kIsValueTableFieldNumber = 3,
    kAllowAnonymousColumnNameFieldNumber = 6,
    kAllowDuplicateColumnNamesFieldNumber = 7,
  };
  // repeated .zetasql.SimpleColumnProto column = 4;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  ::zetasql::SimpleColumnProto* mutable_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleColumnProto >*
      mutable_column();
  private:
  const ::zetasql::SimpleColumnProto& _internal_column(int index) const;
  ::zetasql::SimpleColumnProto* _internal_add_column();
  public:
  const ::zetasql::SimpleColumnProto& column(int index) const;
  ::zetasql::SimpleColumnProto* add_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleColumnProto >&
      column() const;

  // repeated int32 primary_key_column_index = 9;
  int primary_key_column_index_size() const;
  private:
  int _internal_primary_key_column_index_size() const;
  public:
  void clear_primary_key_column_index();
  private:
  int32_t _internal_primary_key_column_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_primary_key_column_index() const;
  void _internal_add_primary_key_column_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_primary_key_column_index();
  public:
  int32_t primary_key_column_index(int index) const;
  void set_primary_key_column_index(int index, int32_t value);
  void add_primary_key_column_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      primary_key_column_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_primary_key_column_index();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_in_catalog = 5;
  bool has_name_in_catalog() const;
  private:
  bool _internal_has_name_in_catalog() const;
  public:
  void clear_name_in_catalog();
  const std::string& name_in_catalog() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_in_catalog(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_in_catalog();
  PROTOBUF_NODISCARD std::string* release_name_in_catalog();
  void set_allocated_name_in_catalog(std::string* name_in_catalog);
  private:
  const std::string& _internal_name_in_catalog() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_in_catalog(const std::string& value);
  std::string* _internal_mutable_name_in_catalog();
  public:

  // optional string full_name = 10;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const std::string& full_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 8;
  bool has_anonymization_info() const;
  private:
  bool _internal_has_anonymization_info() const;
  public:
  void clear_anonymization_info();
  const ::zetasql::SimpleAnonymizationInfoProto& anonymization_info() const;
  PROTOBUF_NODISCARD ::zetasql::SimpleAnonymizationInfoProto* release_anonymization_info();
  ::zetasql::SimpleAnonymizationInfoProto* mutable_anonymization_info();
  void set_allocated_anonymization_info(::zetasql::SimpleAnonymizationInfoProto* anonymization_info);
  private:
  const ::zetasql::SimpleAnonymizationInfoProto& _internal_anonymization_info() const;
  ::zetasql::SimpleAnonymizationInfoProto* _internal_mutable_anonymization_info();
  public:
  void unsafe_arena_set_allocated_anonymization_info(
      ::zetasql::SimpleAnonymizationInfoProto* anonymization_info);
  ::zetasql::SimpleAnonymizationInfoProto* unsafe_arena_release_anonymization_info();

  // optional int64 serialization_id = 2;
  bool has_serialization_id() const;
  private:
  bool _internal_has_serialization_id() const;
  public:
  void clear_serialization_id();
  int64_t serialization_id() const;
  void set_serialization_id(int64_t value);
  private:
  int64_t _internal_serialization_id() const;
  void _internal_set_serialization_id(int64_t value);
  public:

  // optional bool is_value_table = 3;
  bool has_is_value_table() const;
  private:
  bool _internal_has_is_value_table() const;
  public:
  void clear_is_value_table();
  bool is_value_table() const;
  void set_is_value_table(bool value);
  private:
  bool _internal_is_value_table() const;
  void _internal_set_is_value_table(bool value);
  public:

  // optional bool allow_anonymous_column_name = 6;
  bool has_allow_anonymous_column_name() const;
  private:
  bool _internal_has_allow_anonymous_column_name() const;
  public:
  void clear_allow_anonymous_column_name();
  bool allow_anonymous_column_name() const;
  void set_allow_anonymous_column_name(bool value);
  private:
  bool _internal_allow_anonymous_column_name() const;
  void _internal_set_allow_anonymous_column_name(bool value);
  public:

  // optional bool allow_duplicate_column_names = 7;
  bool has_allow_duplicate_column_names() const;
  private:
  bool _internal_has_allow_duplicate_column_names() const;
  public:
  void clear_allow_duplicate_column_names();
  bool allow_duplicate_column_names() const;
  void set_allow_duplicate_column_names(bool value);
  private:
  bool _internal_allow_duplicate_column_names() const;
  void _internal_set_allow_duplicate_column_names(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.SimpleTableProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleColumnProto > column_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > primary_key_column_index_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_in_catalog_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
    ::zetasql::SimpleAnonymizationInfoProto* anonymization_info_;
    int64_t serialization_id_;
    bool is_value_table_;
    bool allow_anonymous_column_name_;
    bool allow_duplicate_column_names_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fsimple_5ftable_2eproto;
};
// -------------------------------------------------------------------

class SimpleColumnProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.SimpleColumnProto) */ {
 public:
  inline SimpleColumnProto() : SimpleColumnProto(nullptr) {}
  ~SimpleColumnProto() override;
  explicit PROTOBUF_CONSTEXPR SimpleColumnProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleColumnProto(const SimpleColumnProto& from);
  SimpleColumnProto(SimpleColumnProto&& from) noexcept
    : SimpleColumnProto() {
    *this = ::std::move(from);
  }

  inline SimpleColumnProto& operator=(const SimpleColumnProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleColumnProto& operator=(SimpleColumnProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleColumnProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleColumnProto* internal_default_instance() {
    return reinterpret_cast<const SimpleColumnProto*>(
               &_SimpleColumnProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimpleColumnProto& a, SimpleColumnProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleColumnProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleColumnProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleColumnProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleColumnProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleColumnProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleColumnProto& from) {
    SimpleColumnProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleColumnProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.SimpleColumnProto";
  }
  protected:
  explicit SimpleColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAnnotationMapFieldNumber = 5,
    kIsPseudoColumnFieldNumber = 3,
    kCanUpdateUnwritableToDefaultFieldNumber = 6,
    kIsWritableColumnFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zetasql::TypeProto& type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  ::zetasql::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // optional .zetasql.AnnotationMapProto annotation_map = 5;
  bool has_annotation_map() const;
  private:
  bool _internal_has_annotation_map() const;
  public:
  void clear_annotation_map();
  const ::zetasql::AnnotationMapProto& annotation_map() const;
  PROTOBUF_NODISCARD ::zetasql::AnnotationMapProto* release_annotation_map();
  ::zetasql::AnnotationMapProto* mutable_annotation_map();
  void set_allocated_annotation_map(::zetasql::AnnotationMapProto* annotation_map);
  private:
  const ::zetasql::AnnotationMapProto& _internal_annotation_map() const;
  ::zetasql::AnnotationMapProto* _internal_mutable_annotation_map();
  public:
  void unsafe_arena_set_allocated_annotation_map(
      ::zetasql::AnnotationMapProto* annotation_map);
  ::zetasql::AnnotationMapProto* unsafe_arena_release_annotation_map();

  // optional bool is_pseudo_column = 3;
  bool has_is_pseudo_column() const;
  private:
  bool _internal_has_is_pseudo_column() const;
  public:
  void clear_is_pseudo_column();
  bool is_pseudo_column() const;
  void set_is_pseudo_column(bool value);
  private:
  bool _internal_is_pseudo_column() const;
  void _internal_set_is_pseudo_column(bool value);
  public:

  // optional bool can_update_unwritable_to_default = 6;
  bool has_can_update_unwritable_to_default() const;
  private:
  bool _internal_has_can_update_unwritable_to_default() const;
  public:
  void clear_can_update_unwritable_to_default();
  bool can_update_unwritable_to_default() const;
  void set_can_update_unwritable_to_default(bool value);
  private:
  bool _internal_can_update_unwritable_to_default() const;
  void _internal_set_can_update_unwritable_to_default(bool value);
  public:

  // optional bool is_writable_column = 4 [default = true];
  bool has_is_writable_column() const;
  private:
  bool _internal_has_is_writable_column() const;
  public:
  void clear_is_writable_column();
  bool is_writable_column() const;
  void set_is_writable_column(bool value);
  private:
  bool _internal_is_writable_column() const;
  void _internal_set_is_writable_column(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.SimpleColumnProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::zetasql::TypeProto* type_;
    ::zetasql::AnnotationMapProto* annotation_map_;
    bool is_pseudo_column_;
    bool can_update_unwritable_to_default_;
    bool is_writable_column_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2fsimple_5ftable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleAnonymizationInfoProto

// repeated string userid_column_name = 1;
inline int SimpleAnonymizationInfoProto::_internal_userid_column_name_size() const {
  return _impl_.userid_column_name_.size();
}
inline int SimpleAnonymizationInfoProto::userid_column_name_size() const {
  return _internal_userid_column_name_size();
}
inline void SimpleAnonymizationInfoProto::clear_userid_column_name() {
  _impl_.userid_column_name_.Clear();
}
inline std::string* SimpleAnonymizationInfoProto::add_userid_column_name() {
  std::string* _s = _internal_add_userid_column_name();
  // @@protoc_insertion_point(field_add_mutable:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return _s;
}
inline const std::string& SimpleAnonymizationInfoProto::_internal_userid_column_name(int index) const {
  return _impl_.userid_column_name_.Get(index);
}
inline const std::string& SimpleAnonymizationInfoProto::userid_column_name(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return _internal_userid_column_name(index);
}
inline std::string* SimpleAnonymizationInfoProto::mutable_userid_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return _impl_.userid_column_name_.Mutable(index);
}
inline void SimpleAnonymizationInfoProto::set_userid_column_name(int index, const std::string& value) {
  _impl_.userid_column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline void SimpleAnonymizationInfoProto::set_userid_column_name(int index, std::string&& value) {
  _impl_.userid_column_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline void SimpleAnonymizationInfoProto::set_userid_column_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.userid_column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline void SimpleAnonymizationInfoProto::set_userid_column_name(int index, const char* value, size_t size) {
  _impl_.userid_column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline std::string* SimpleAnonymizationInfoProto::_internal_add_userid_column_name() {
  return _impl_.userid_column_name_.Add();
}
inline void SimpleAnonymizationInfoProto::add_userid_column_name(const std::string& value) {
  _impl_.userid_column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline void SimpleAnonymizationInfoProto::add_userid_column_name(std::string&& value) {
  _impl_.userid_column_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline void SimpleAnonymizationInfoProto::add_userid_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.userid_column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline void SimpleAnonymizationInfoProto::add_userid_column_name(const char* value, size_t size) {
  _impl_.userid_column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SimpleAnonymizationInfoProto::userid_column_name() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return _impl_.userid_column_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SimpleAnonymizationInfoProto::mutable_userid_column_name() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleAnonymizationInfoProto.userid_column_name)
  return &_impl_.userid_column_name_;
}

// -------------------------------------------------------------------

// SimpleTableProto

// optional string name = 1;
inline bool SimpleTableProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimpleTableProto::has_name() const {
  return _internal_has_name();
}
inline void SimpleTableProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleTableProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleTableProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.name)
}
inline std::string* SimpleTableProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.name)
  return _s;
}
inline const std::string& SimpleTableProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SimpleTableProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleTableProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleTableProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleTableProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SimpleTableProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleTableProto.name)
}

// optional int64 serialization_id = 2;
inline bool SimpleTableProto::_internal_has_serialization_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SimpleTableProto::has_serialization_id() const {
  return _internal_has_serialization_id();
}
inline void SimpleTableProto::clear_serialization_id() {
  _impl_.serialization_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t SimpleTableProto::_internal_serialization_id() const {
  return _impl_.serialization_id_;
}
inline int64_t SimpleTableProto::serialization_id() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.serialization_id)
  return _internal_serialization_id();
}
inline void SimpleTableProto::_internal_set_serialization_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.serialization_id_ = value;
}
inline void SimpleTableProto::set_serialization_id(int64_t value) {
  _internal_set_serialization_id(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.serialization_id)
}

// optional bool is_value_table = 3;
inline bool SimpleTableProto::_internal_has_is_value_table() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SimpleTableProto::has_is_value_table() const {
  return _internal_has_is_value_table();
}
inline void SimpleTableProto::clear_is_value_table() {
  _impl_.is_value_table_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool SimpleTableProto::_internal_is_value_table() const {
  return _impl_.is_value_table_;
}
inline bool SimpleTableProto::is_value_table() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.is_value_table)
  return _internal_is_value_table();
}
inline void SimpleTableProto::_internal_set_is_value_table(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_value_table_ = value;
}
inline void SimpleTableProto::set_is_value_table(bool value) {
  _internal_set_is_value_table(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.is_value_table)
}

// repeated .zetasql.SimpleColumnProto column = 4;
inline int SimpleTableProto::_internal_column_size() const {
  return _impl_.column_.size();
}
inline int SimpleTableProto::column_size() const {
  return _internal_column_size();
}
inline void SimpleTableProto::clear_column() {
  _impl_.column_.Clear();
}
inline ::zetasql::SimpleColumnProto* SimpleTableProto::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.column)
  return _impl_.column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleColumnProto >*
SimpleTableProto::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleTableProto.column)
  return &_impl_.column_;
}
inline const ::zetasql::SimpleColumnProto& SimpleTableProto::_internal_column(int index) const {
  return _impl_.column_.Get(index);
}
inline const ::zetasql::SimpleColumnProto& SimpleTableProto::column(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.column)
  return _internal_column(index);
}
inline ::zetasql::SimpleColumnProto* SimpleTableProto::_internal_add_column() {
  return _impl_.column_.Add();
}
inline ::zetasql::SimpleColumnProto* SimpleTableProto::add_column() {
  ::zetasql::SimpleColumnProto* _add = _internal_add_column();
  // @@protoc_insertion_point(field_add:zetasql.SimpleTableProto.column)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleColumnProto >&
SimpleTableProto::column() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleTableProto.column)
  return _impl_.column_;
}

// repeated int32 primary_key_column_index = 9;
inline int SimpleTableProto::_internal_primary_key_column_index_size() const {
  return _impl_.primary_key_column_index_.size();
}
inline int SimpleTableProto::primary_key_column_index_size() const {
  return _internal_primary_key_column_index_size();
}
inline void SimpleTableProto::clear_primary_key_column_index() {
  _impl_.primary_key_column_index_.Clear();
}
inline int32_t SimpleTableProto::_internal_primary_key_column_index(int index) const {
  return _impl_.primary_key_column_index_.Get(index);
}
inline int32_t SimpleTableProto::primary_key_column_index(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.primary_key_column_index)
  return _internal_primary_key_column_index(index);
}
inline void SimpleTableProto::set_primary_key_column_index(int index, int32_t value) {
  _impl_.primary_key_column_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.primary_key_column_index)
}
inline void SimpleTableProto::_internal_add_primary_key_column_index(int32_t value) {
  _impl_.primary_key_column_index_.Add(value);
}
inline void SimpleTableProto::add_primary_key_column_index(int32_t value) {
  _internal_add_primary_key_column_index(value);
  // @@protoc_insertion_point(field_add:zetasql.SimpleTableProto.primary_key_column_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SimpleTableProto::_internal_primary_key_column_index() const {
  return _impl_.primary_key_column_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SimpleTableProto::primary_key_column_index() const {
  // @@protoc_insertion_point(field_list:zetasql.SimpleTableProto.primary_key_column_index)
  return _internal_primary_key_column_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SimpleTableProto::_internal_mutable_primary_key_column_index() {
  return &_impl_.primary_key_column_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SimpleTableProto::mutable_primary_key_column_index() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.SimpleTableProto.primary_key_column_index)
  return _internal_mutable_primary_key_column_index();
}

// optional string name_in_catalog = 5;
inline bool SimpleTableProto::_internal_has_name_in_catalog() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SimpleTableProto::has_name_in_catalog() const {
  return _internal_has_name_in_catalog();
}
inline void SimpleTableProto::clear_name_in_catalog() {
  _impl_.name_in_catalog_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SimpleTableProto::name_in_catalog() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.name_in_catalog)
  return _internal_name_in_catalog();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleTableProto::set_name_in_catalog(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_in_catalog_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.name_in_catalog)
}
inline std::string* SimpleTableProto::mutable_name_in_catalog() {
  std::string* _s = _internal_mutable_name_in_catalog();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.name_in_catalog)
  return _s;
}
inline const std::string& SimpleTableProto::_internal_name_in_catalog() const {
  return _impl_.name_in_catalog_.Get();
}
inline void SimpleTableProto::_internal_set_name_in_catalog(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_in_catalog_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleTableProto::_internal_mutable_name_in_catalog() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_in_catalog_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleTableProto::release_name_in_catalog() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleTableProto.name_in_catalog)
  if (!_internal_has_name_in_catalog()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_in_catalog_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_in_catalog_.IsDefault()) {
    _impl_.name_in_catalog_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SimpleTableProto::set_allocated_name_in_catalog(std::string* name_in_catalog) {
  if (name_in_catalog != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_in_catalog_.SetAllocated(name_in_catalog, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_in_catalog_.IsDefault()) {
    _impl_.name_in_catalog_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleTableProto.name_in_catalog)
}

// optional bool allow_anonymous_column_name = 6;
inline bool SimpleTableProto::_internal_has_allow_anonymous_column_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SimpleTableProto::has_allow_anonymous_column_name() const {
  return _internal_has_allow_anonymous_column_name();
}
inline void SimpleTableProto::clear_allow_anonymous_column_name() {
  _impl_.allow_anonymous_column_name_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool SimpleTableProto::_internal_allow_anonymous_column_name() const {
  return _impl_.allow_anonymous_column_name_;
}
inline bool SimpleTableProto::allow_anonymous_column_name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.allow_anonymous_column_name)
  return _internal_allow_anonymous_column_name();
}
inline void SimpleTableProto::_internal_set_allow_anonymous_column_name(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.allow_anonymous_column_name_ = value;
}
inline void SimpleTableProto::set_allow_anonymous_column_name(bool value) {
  _internal_set_allow_anonymous_column_name(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.allow_anonymous_column_name)
}

// optional bool allow_duplicate_column_names = 7;
inline bool SimpleTableProto::_internal_has_allow_duplicate_column_names() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SimpleTableProto::has_allow_duplicate_column_names() const {
  return _internal_has_allow_duplicate_column_names();
}
inline void SimpleTableProto::clear_allow_duplicate_column_names() {
  _impl_.allow_duplicate_column_names_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool SimpleTableProto::_internal_allow_duplicate_column_names() const {
  return _impl_.allow_duplicate_column_names_;
}
inline bool SimpleTableProto::allow_duplicate_column_names() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.allow_duplicate_column_names)
  return _internal_allow_duplicate_column_names();
}
inline void SimpleTableProto::_internal_set_allow_duplicate_column_names(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.allow_duplicate_column_names_ = value;
}
inline void SimpleTableProto::set_allow_duplicate_column_names(bool value) {
  _internal_set_allow_duplicate_column_names(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.allow_duplicate_column_names)
}

// optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 8;
inline bool SimpleTableProto::_internal_has_anonymization_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.anonymization_info_ != nullptr);
  return value;
}
inline bool SimpleTableProto::has_anonymization_info() const {
  return _internal_has_anonymization_info();
}
inline void SimpleTableProto::clear_anonymization_info() {
  if (_impl_.anonymization_info_ != nullptr) _impl_.anonymization_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::SimpleAnonymizationInfoProto& SimpleTableProto::_internal_anonymization_info() const {
  const ::zetasql::SimpleAnonymizationInfoProto* p = _impl_.anonymization_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::SimpleAnonymizationInfoProto&>(
      ::zetasql::_SimpleAnonymizationInfoProto_default_instance_);
}
inline const ::zetasql::SimpleAnonymizationInfoProto& SimpleTableProto::anonymization_info() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.anonymization_info)
  return _internal_anonymization_info();
}
inline void SimpleTableProto::unsafe_arena_set_allocated_anonymization_info(
    ::zetasql::SimpleAnonymizationInfoProto* anonymization_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anonymization_info_);
  }
  _impl_.anonymization_info_ = anonymization_info;
  if (anonymization_info) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.SimpleTableProto.anonymization_info)
}
inline ::zetasql::SimpleAnonymizationInfoProto* SimpleTableProto::release_anonymization_info() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::SimpleAnonymizationInfoProto* temp = _impl_.anonymization_info_;
  _impl_.anonymization_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::SimpleAnonymizationInfoProto* SimpleTableProto::unsafe_arena_release_anonymization_info() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleTableProto.anonymization_info)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::SimpleAnonymizationInfoProto* temp = _impl_.anonymization_info_;
  _impl_.anonymization_info_ = nullptr;
  return temp;
}
inline ::zetasql::SimpleAnonymizationInfoProto* SimpleTableProto::_internal_mutable_anonymization_info() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.anonymization_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::SimpleAnonymizationInfoProto>(GetArenaForAllocation());
    _impl_.anonymization_info_ = p;
  }
  return _impl_.anonymization_info_;
}
inline ::zetasql::SimpleAnonymizationInfoProto* SimpleTableProto::mutable_anonymization_info() {
  ::zetasql::SimpleAnonymizationInfoProto* _msg = _internal_mutable_anonymization_info();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.anonymization_info)
  return _msg;
}
inline void SimpleTableProto::set_allocated_anonymization_info(::zetasql::SimpleAnonymizationInfoProto* anonymization_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.anonymization_info_;
  }
  if (anonymization_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(anonymization_info);
    if (message_arena != submessage_arena) {
      anonymization_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anonymization_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.anonymization_info_ = anonymization_info;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleTableProto.anonymization_info)
}

// optional string full_name = 10;
inline bool SimpleTableProto::_internal_has_full_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SimpleTableProto::has_full_name() const {
  return _internal_has_full_name();
}
inline void SimpleTableProto::clear_full_name() {
  _impl_.full_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SimpleTableProto::full_name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleTableProto.full_name)
  return _internal_full_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleTableProto::set_full_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.full_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.SimpleTableProto.full_name)
}
inline std::string* SimpleTableProto::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleTableProto.full_name)
  return _s;
}
inline const std::string& SimpleTableProto::_internal_full_name() const {
  return _impl_.full_name_.Get();
}
inline void SimpleTableProto::_internal_set_full_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleTableProto::_internal_mutable_full_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.full_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleTableProto::release_full_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleTableProto.full_name)
  if (!_internal_has_full_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.full_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SimpleTableProto::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.full_name_.SetAllocated(full_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleTableProto.full_name)
}

// -------------------------------------------------------------------

// SimpleColumnProto

// optional string name = 1;
inline bool SimpleColumnProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimpleColumnProto::has_name() const {
  return _internal_has_name();
}
inline void SimpleColumnProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleColumnProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleColumnProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.SimpleColumnProto.name)
}
inline std::string* SimpleColumnProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleColumnProto.name)
  return _s;
}
inline const std::string& SimpleColumnProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SimpleColumnProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleColumnProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleColumnProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleColumnProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SimpleColumnProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleColumnProto.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool SimpleColumnProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool SimpleColumnProto::has_type() const {
  return _internal_has_type();
}
inline const ::zetasql::TypeProto& SimpleColumnProto::_internal_type() const {
  const ::zetasql::TypeProto* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& SimpleColumnProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.type)
  return _internal_type();
}
inline void SimpleColumnProto::unsafe_arena_set_allocated_type(
    ::zetasql::TypeProto* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.SimpleColumnProto.type)
}
inline ::zetasql::TypeProto* SimpleColumnProto::release_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* SimpleColumnProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleColumnProto.type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* SimpleColumnProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::zetasql::TypeProto* SimpleColumnProto::mutable_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleColumnProto.type)
  return _msg;
}
inline void SimpleColumnProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleColumnProto.type)
}

// optional bool is_pseudo_column = 3;
inline bool SimpleColumnProto::_internal_has_is_pseudo_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SimpleColumnProto::has_is_pseudo_column() const {
  return _internal_has_is_pseudo_column();
}
inline void SimpleColumnProto::clear_is_pseudo_column() {
  _impl_.is_pseudo_column_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool SimpleColumnProto::_internal_is_pseudo_column() const {
  return _impl_.is_pseudo_column_;
}
inline bool SimpleColumnProto::is_pseudo_column() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.is_pseudo_column)
  return _internal_is_pseudo_column();
}
inline void SimpleColumnProto::_internal_set_is_pseudo_column(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_pseudo_column_ = value;
}
inline void SimpleColumnProto::set_is_pseudo_column(bool value) {
  _internal_set_is_pseudo_column(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleColumnProto.is_pseudo_column)
}

// optional bool is_writable_column = 4 [default = true];
inline bool SimpleColumnProto::_internal_has_is_writable_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SimpleColumnProto::has_is_writable_column() const {
  return _internal_has_is_writable_column();
}
inline void SimpleColumnProto::clear_is_writable_column() {
  _impl_.is_writable_column_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool SimpleColumnProto::_internal_is_writable_column() const {
  return _impl_.is_writable_column_;
}
inline bool SimpleColumnProto::is_writable_column() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.is_writable_column)
  return _internal_is_writable_column();
}
inline void SimpleColumnProto::_internal_set_is_writable_column(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_writable_column_ = value;
}
inline void SimpleColumnProto::set_is_writable_column(bool value) {
  _internal_set_is_writable_column(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleColumnProto.is_writable_column)
}

// optional bool can_update_unwritable_to_default = 6;
inline bool SimpleColumnProto::_internal_has_can_update_unwritable_to_default() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SimpleColumnProto::has_can_update_unwritable_to_default() const {
  return _internal_has_can_update_unwritable_to_default();
}
inline void SimpleColumnProto::clear_can_update_unwritable_to_default() {
  _impl_.can_update_unwritable_to_default_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool SimpleColumnProto::_internal_can_update_unwritable_to_default() const {
  return _impl_.can_update_unwritable_to_default_;
}
inline bool SimpleColumnProto::can_update_unwritable_to_default() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.can_update_unwritable_to_default)
  return _internal_can_update_unwritable_to_default();
}
inline void SimpleColumnProto::_internal_set_can_update_unwritable_to_default(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.can_update_unwritable_to_default_ = value;
}
inline void SimpleColumnProto::set_can_update_unwritable_to_default(bool value) {
  _internal_set_can_update_unwritable_to_default(value);
  // @@protoc_insertion_point(field_set:zetasql.SimpleColumnProto.can_update_unwritable_to_default)
}

// optional .zetasql.AnnotationMapProto annotation_map = 5;
inline bool SimpleColumnProto::_internal_has_annotation_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.annotation_map_ != nullptr);
  return value;
}
inline bool SimpleColumnProto::has_annotation_map() const {
  return _internal_has_annotation_map();
}
inline const ::zetasql::AnnotationMapProto& SimpleColumnProto::_internal_annotation_map() const {
  const ::zetasql::AnnotationMapProto* p = _impl_.annotation_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::AnnotationMapProto&>(
      ::zetasql::_AnnotationMapProto_default_instance_);
}
inline const ::zetasql::AnnotationMapProto& SimpleColumnProto::annotation_map() const {
  // @@protoc_insertion_point(field_get:zetasql.SimpleColumnProto.annotation_map)
  return _internal_annotation_map();
}
inline void SimpleColumnProto::unsafe_arena_set_allocated_annotation_map(
    ::zetasql::AnnotationMapProto* annotation_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotation_map_);
  }
  _impl_.annotation_map_ = annotation_map;
  if (annotation_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.SimpleColumnProto.annotation_map)
}
inline ::zetasql::AnnotationMapProto* SimpleColumnProto::release_annotation_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::AnnotationMapProto* temp = _impl_.annotation_map_;
  _impl_.annotation_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::AnnotationMapProto* SimpleColumnProto::unsafe_arena_release_annotation_map() {
  // @@protoc_insertion_point(field_release:zetasql.SimpleColumnProto.annotation_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::AnnotationMapProto* temp = _impl_.annotation_map_;
  _impl_.annotation_map_ = nullptr;
  return temp;
}
inline ::zetasql::AnnotationMapProto* SimpleColumnProto::_internal_mutable_annotation_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.annotation_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::AnnotationMapProto>(GetArenaForAllocation());
    _impl_.annotation_map_ = p;
  }
  return _impl_.annotation_map_;
}
inline ::zetasql::AnnotationMapProto* SimpleColumnProto::mutable_annotation_map() {
  ::zetasql::AnnotationMapProto* _msg = _internal_mutable_annotation_map();
  // @@protoc_insertion_point(field_mutable:zetasql.SimpleColumnProto.annotation_map)
  return _msg;
}
inline void SimpleColumnProto::set_allocated_annotation_map(::zetasql::AnnotationMapProto* annotation_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotation_map_);
  }
  if (annotation_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_map));
    if (message_arena != submessage_arena) {
      annotation_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.annotation_map_ = annotation_map;
  // @@protoc_insertion_point(field_set_allocated:zetasql.SimpleColumnProto.annotation_map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fsimple_5ftable_2eproto
