// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/proto/function.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2ffunction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2ffunction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/deprecation_warning.pb.h"
#include "zetasql/public/function.pb.h"
#include "zetasql/public/options.pb.h"
#include "zetasql/public/parse_location_range.pb.h"
#include "zetasql/public/parse_resume_location.pb.h"
#include "zetasql/public/simple_table.pb.h"
#include "zetasql/public/type.pb.h"
#include "zetasql/public/value.pb.h"
#include "zetasql/resolved_ast/serialization.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fproto_2ffunction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fproto_2ffunction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fproto_2ffunction_2eproto;
namespace zetasql {
class ArgumentTypeLambdaProto;
struct ArgumentTypeLambdaProtoDefaultTypeInternal;
extern ArgumentTypeLambdaProtoDefaultTypeInternal _ArgumentTypeLambdaProto_default_instance_;
class FunctionArgumentTypeOptionsProto;
struct FunctionArgumentTypeOptionsProtoDefaultTypeInternal;
extern FunctionArgumentTypeOptionsProtoDefaultTypeInternal _FunctionArgumentTypeOptionsProto_default_instance_;
class FunctionArgumentTypeProto;
struct FunctionArgumentTypeProtoDefaultTypeInternal;
extern FunctionArgumentTypeProtoDefaultTypeInternal _FunctionArgumentTypeProto_default_instance_;
class FunctionOptionsProto;
struct FunctionOptionsProtoDefaultTypeInternal;
extern FunctionOptionsProtoDefaultTypeInternal _FunctionOptionsProto_default_instance_;
class FunctionProto;
struct FunctionProtoDefaultTypeInternal;
extern FunctionProtoDefaultTypeInternal _FunctionProto_default_instance_;
class FunctionSignatureOptionsProto;
struct FunctionSignatureOptionsProtoDefaultTypeInternal;
extern FunctionSignatureOptionsProtoDefaultTypeInternal _FunctionSignatureOptionsProto_default_instance_;
class FunctionSignatureProto;
struct FunctionSignatureProtoDefaultTypeInternal;
extern FunctionSignatureProtoDefaultTypeInternal _FunctionSignatureProto_default_instance_;
class ProcedureProto;
struct ProcedureProtoDefaultTypeInternal;
extern ProcedureProtoDefaultTypeInternal _ProcedureProto_default_instance_;
class ResolvedFunctionCallInfoProto;
struct ResolvedFunctionCallInfoProtoDefaultTypeInternal;
extern ResolvedFunctionCallInfoProtoDefaultTypeInternal _ResolvedFunctionCallInfoProto_default_instance_;
class TVFArgumentProto;
struct TVFArgumentProtoDefaultTypeInternal;
extern TVFArgumentProtoDefaultTypeInternal _TVFArgumentProto_default_instance_;
class TVFConnectionProto;
struct TVFConnectionProtoDefaultTypeInternal;
extern TVFConnectionProtoDefaultTypeInternal _TVFConnectionProto_default_instance_;
class TVFDescriptorProto;
struct TVFDescriptorProtoDefaultTypeInternal;
extern TVFDescriptorProtoDefaultTypeInternal _TVFDescriptorProto_default_instance_;
class TVFModelProto;
struct TVFModelProtoDefaultTypeInternal;
extern TVFModelProtoDefaultTypeInternal _TVFModelProto_default_instance_;
class TVFRelationColumnProto;
struct TVFRelationColumnProtoDefaultTypeInternal;
extern TVFRelationColumnProtoDefaultTypeInternal _TVFRelationColumnProto_default_instance_;
class TVFRelationProto;
struct TVFRelationProtoDefaultTypeInternal;
extern TVFRelationProtoDefaultTypeInternal _TVFRelationProto_default_instance_;
class TVFSignatureOptionsProto;
struct TVFSignatureOptionsProtoDefaultTypeInternal;
extern TVFSignatureOptionsProtoDefaultTypeInternal _TVFSignatureOptionsProto_default_instance_;
class TVFSignatureProto;
struct TVFSignatureProtoDefaultTypeInternal;
extern TVFSignatureProtoDefaultTypeInternal _TVFSignatureProto_default_instance_;
class TableValuedFunctionOptionsProto;
struct TableValuedFunctionOptionsProtoDefaultTypeInternal;
extern TableValuedFunctionOptionsProtoDefaultTypeInternal _TableValuedFunctionOptionsProto_default_instance_;
class TableValuedFunctionProto;
struct TableValuedFunctionProtoDefaultTypeInternal;
extern TableValuedFunctionProtoDefaultTypeInternal _TableValuedFunctionProto_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::ArgumentTypeLambdaProto* Arena::CreateMaybeMessage<::zetasql::ArgumentTypeLambdaProto>(Arena*);
template<> ::zetasql::FunctionArgumentTypeOptionsProto* Arena::CreateMaybeMessage<::zetasql::FunctionArgumentTypeOptionsProto>(Arena*);
template<> ::zetasql::FunctionArgumentTypeProto* Arena::CreateMaybeMessage<::zetasql::FunctionArgumentTypeProto>(Arena*);
template<> ::zetasql::FunctionOptionsProto* Arena::CreateMaybeMessage<::zetasql::FunctionOptionsProto>(Arena*);
template<> ::zetasql::FunctionProto* Arena::CreateMaybeMessage<::zetasql::FunctionProto>(Arena*);
template<> ::zetasql::FunctionSignatureOptionsProto* Arena::CreateMaybeMessage<::zetasql::FunctionSignatureOptionsProto>(Arena*);
template<> ::zetasql::FunctionSignatureProto* Arena::CreateMaybeMessage<::zetasql::FunctionSignatureProto>(Arena*);
template<> ::zetasql::ProcedureProto* Arena::CreateMaybeMessage<::zetasql::ProcedureProto>(Arena*);
template<> ::zetasql::ResolvedFunctionCallInfoProto* Arena::CreateMaybeMessage<::zetasql::ResolvedFunctionCallInfoProto>(Arena*);
template<> ::zetasql::TVFArgumentProto* Arena::CreateMaybeMessage<::zetasql::TVFArgumentProto>(Arena*);
template<> ::zetasql::TVFConnectionProto* Arena::CreateMaybeMessage<::zetasql::TVFConnectionProto>(Arena*);
template<> ::zetasql::TVFDescriptorProto* Arena::CreateMaybeMessage<::zetasql::TVFDescriptorProto>(Arena*);
template<> ::zetasql::TVFModelProto* Arena::CreateMaybeMessage<::zetasql::TVFModelProto>(Arena*);
template<> ::zetasql::TVFRelationColumnProto* Arena::CreateMaybeMessage<::zetasql::TVFRelationColumnProto>(Arena*);
template<> ::zetasql::TVFRelationProto* Arena::CreateMaybeMessage<::zetasql::TVFRelationProto>(Arena*);
template<> ::zetasql::TVFSignatureOptionsProto* Arena::CreateMaybeMessage<::zetasql::TVFSignatureOptionsProto>(Arena*);
template<> ::zetasql::TVFSignatureProto* Arena::CreateMaybeMessage<::zetasql::TVFSignatureProto>(Arena*);
template<> ::zetasql::TableValuedFunctionOptionsProto* Arena::CreateMaybeMessage<::zetasql::TableValuedFunctionOptionsProto>(Arena*);
template<> ::zetasql::TableValuedFunctionProto* Arena::CreateMaybeMessage<::zetasql::TableValuedFunctionProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class TVFRelationColumnProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TVFRelationColumnProto) */ {
 public:
  inline TVFRelationColumnProto() : TVFRelationColumnProto(nullptr) {}
  ~TVFRelationColumnProto() override;
  explicit PROTOBUF_CONSTEXPR TVFRelationColumnProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TVFRelationColumnProto(const TVFRelationColumnProto& from);
  TVFRelationColumnProto(TVFRelationColumnProto&& from) noexcept
    : TVFRelationColumnProto() {
    *this = ::std::move(from);
  }

  inline TVFRelationColumnProto& operator=(const TVFRelationColumnProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVFRelationColumnProto& operator=(TVFRelationColumnProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TVFRelationColumnProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TVFRelationColumnProto* internal_default_instance() {
    return reinterpret_cast<const TVFRelationColumnProto*>(
               &_TVFRelationColumnProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TVFRelationColumnProto& a, TVFRelationColumnProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TVFRelationColumnProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TVFRelationColumnProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TVFRelationColumnProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TVFRelationColumnProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TVFRelationColumnProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TVFRelationColumnProto& from) {
    TVFRelationColumnProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TVFRelationColumnProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TVFRelationColumnProto";
  }
  protected:
  explicit TVFRelationColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kNameParseLocationRangeFieldNumber = 4,
    kTypeParseLocationRangeFieldNumber = 5,
    kIsPseudoColumnFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zetasql::TypeProto& type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  ::zetasql::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // optional .zetasql.ParseLocationRangeProto name_parse_location_range = 4;
  bool has_name_parse_location_range() const;
  private:
  bool _internal_has_name_parse_location_range() const;
  public:
  void clear_name_parse_location_range();
  const ::zetasql::ParseLocationRangeProto& name_parse_location_range() const;
  PROTOBUF_NODISCARD ::zetasql::ParseLocationRangeProto* release_name_parse_location_range();
  ::zetasql::ParseLocationRangeProto* mutable_name_parse_location_range();
  void set_allocated_name_parse_location_range(::zetasql::ParseLocationRangeProto* name_parse_location_range);
  private:
  const ::zetasql::ParseLocationRangeProto& _internal_name_parse_location_range() const;
  ::zetasql::ParseLocationRangeProto* _internal_mutable_name_parse_location_range();
  public:
  void unsafe_arena_set_allocated_name_parse_location_range(
      ::zetasql::ParseLocationRangeProto* name_parse_location_range);
  ::zetasql::ParseLocationRangeProto* unsafe_arena_release_name_parse_location_range();

  // optional .zetasql.ParseLocationRangeProto type_parse_location_range = 5;
  bool has_type_parse_location_range() const;
  private:
  bool _internal_has_type_parse_location_range() const;
  public:
  void clear_type_parse_location_range();
  const ::zetasql::ParseLocationRangeProto& type_parse_location_range() const;
  PROTOBUF_NODISCARD ::zetasql::ParseLocationRangeProto* release_type_parse_location_range();
  ::zetasql::ParseLocationRangeProto* mutable_type_parse_location_range();
  void set_allocated_type_parse_location_range(::zetasql::ParseLocationRangeProto* type_parse_location_range);
  private:
  const ::zetasql::ParseLocationRangeProto& _internal_type_parse_location_range() const;
  ::zetasql::ParseLocationRangeProto* _internal_mutable_type_parse_location_range();
  public:
  void unsafe_arena_set_allocated_type_parse_location_range(
      ::zetasql::ParseLocationRangeProto* type_parse_location_range);
  ::zetasql::ParseLocationRangeProto* unsafe_arena_release_type_parse_location_range();

  // optional bool is_pseudo_column = 3;
  bool has_is_pseudo_column() const;
  private:
  bool _internal_has_is_pseudo_column() const;
  public:
  void clear_is_pseudo_column();
  bool is_pseudo_column() const;
  void set_is_pseudo_column(bool value);
  private:
  bool _internal_is_pseudo_column() const;
  void _internal_set_is_pseudo_column(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.TVFRelationColumnProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::zetasql::TypeProto* type_;
    ::zetasql::ParseLocationRangeProto* name_parse_location_range_;
    ::zetasql::ParseLocationRangeProto* type_parse_location_range_;
    bool is_pseudo_column_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class TVFRelationProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TVFRelationProto) */ {
 public:
  inline TVFRelationProto() : TVFRelationProto(nullptr) {}
  ~TVFRelationProto() override;
  explicit PROTOBUF_CONSTEXPR TVFRelationProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TVFRelationProto(const TVFRelationProto& from);
  TVFRelationProto(TVFRelationProto&& from) noexcept
    : TVFRelationProto() {
    *this = ::std::move(from);
  }

  inline TVFRelationProto& operator=(const TVFRelationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVFRelationProto& operator=(TVFRelationProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TVFRelationProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TVFRelationProto* internal_default_instance() {
    return reinterpret_cast<const TVFRelationProto*>(
               &_TVFRelationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TVFRelationProto& a, TVFRelationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TVFRelationProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TVFRelationProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TVFRelationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TVFRelationProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TVFRelationProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TVFRelationProto& from) {
    TVFRelationProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TVFRelationProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TVFRelationProto";
  }
  protected:
  explicit TVFRelationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kIsValueTableFieldNumber = 2,
  };
  // repeated .zetasql.TVFRelationColumnProto column = 1;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  ::zetasql::TVFRelationColumnProto* mutable_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFRelationColumnProto >*
      mutable_column();
  private:
  const ::zetasql::TVFRelationColumnProto& _internal_column(int index) const;
  ::zetasql::TVFRelationColumnProto* _internal_add_column();
  public:
  const ::zetasql::TVFRelationColumnProto& column(int index) const;
  ::zetasql::TVFRelationColumnProto* add_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFRelationColumnProto >&
      column() const;

  // optional bool is_value_table = 2 [default = false];
  bool has_is_value_table() const;
  private:
  bool _internal_has_is_value_table() const;
  public:
  void clear_is_value_table();
  bool is_value_table() const;
  void set_is_value_table(bool value);
  private:
  bool _internal_is_value_table() const;
  void _internal_set_is_value_table(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.TVFRelationProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFRelationColumnProto > column_;
    bool is_value_table_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class TVFModelProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TVFModelProto) */ {
 public:
  inline TVFModelProto() : TVFModelProto(nullptr) {}
  ~TVFModelProto() override;
  explicit PROTOBUF_CONSTEXPR TVFModelProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TVFModelProto(const TVFModelProto& from);
  TVFModelProto(TVFModelProto&& from) noexcept
    : TVFModelProto() {
    *this = ::std::move(from);
  }

  inline TVFModelProto& operator=(const TVFModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVFModelProto& operator=(TVFModelProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TVFModelProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TVFModelProto* internal_default_instance() {
    return reinterpret_cast<const TVFModelProto*>(
               &_TVFModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TVFModelProto& a, TVFModelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TVFModelProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TVFModelProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TVFModelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TVFModelProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TVFModelProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TVFModelProto& from) {
    TVFModelProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TVFModelProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TVFModelProto";
  }
  protected:
  explicit TVFModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFullNameFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string full_name = 2;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const std::string& full_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // @@protoc_insertion_point(class_scope:zetasql.TVFModelProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class TVFConnectionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TVFConnectionProto) */ {
 public:
  inline TVFConnectionProto() : TVFConnectionProto(nullptr) {}
  ~TVFConnectionProto() override;
  explicit PROTOBUF_CONSTEXPR TVFConnectionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TVFConnectionProto(const TVFConnectionProto& from);
  TVFConnectionProto(TVFConnectionProto&& from) noexcept
    : TVFConnectionProto() {
    *this = ::std::move(from);
  }

  inline TVFConnectionProto& operator=(const TVFConnectionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVFConnectionProto& operator=(TVFConnectionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TVFConnectionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TVFConnectionProto* internal_default_instance() {
    return reinterpret_cast<const TVFConnectionProto*>(
               &_TVFConnectionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TVFConnectionProto& a, TVFConnectionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TVFConnectionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TVFConnectionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TVFConnectionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TVFConnectionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TVFConnectionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TVFConnectionProto& from) {
    TVFConnectionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TVFConnectionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TVFConnectionProto";
  }
  protected:
  explicit TVFConnectionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFullNameFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string full_name = 2;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const std::string& full_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // @@protoc_insertion_point(class_scope:zetasql.TVFConnectionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class TVFDescriptorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TVFDescriptorProto) */ {
 public:
  inline TVFDescriptorProto() : TVFDescriptorProto(nullptr) {}
  ~TVFDescriptorProto() override;
  explicit PROTOBUF_CONSTEXPR TVFDescriptorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TVFDescriptorProto(const TVFDescriptorProto& from);
  TVFDescriptorProto(TVFDescriptorProto&& from) noexcept
    : TVFDescriptorProto() {
    *this = ::std::move(from);
  }

  inline TVFDescriptorProto& operator=(const TVFDescriptorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVFDescriptorProto& operator=(TVFDescriptorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TVFDescriptorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TVFDescriptorProto* internal_default_instance() {
    return reinterpret_cast<const TVFDescriptorProto*>(
               &_TVFDescriptorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TVFDescriptorProto& a, TVFDescriptorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TVFDescriptorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TVFDescriptorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TVFDescriptorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TVFDescriptorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TVFDescriptorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TVFDescriptorProto& from) {
    TVFDescriptorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TVFDescriptorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TVFDescriptorProto";
  }
  protected:
  explicit TVFDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNameFieldNumber = 1,
  };
  // repeated string column_name = 1;
  int column_name_size() const;
  private:
  int _internal_column_name_size() const;
  public:
  void clear_column_name();
  const std::string& column_name(int index) const;
  std::string* mutable_column_name(int index);
  void set_column_name(int index, const std::string& value);
  void set_column_name(int index, std::string&& value);
  void set_column_name(int index, const char* value);
  void set_column_name(int index, const char* value, size_t size);
  std::string* add_column_name();
  void add_column_name(const std::string& value);
  void add_column_name(std::string&& value);
  void add_column_name(const char* value);
  void add_column_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_name();
  private:
  const std::string& _internal_column_name(int index) const;
  std::string* _internal_add_column_name();
  public:

  // @@protoc_insertion_point(class_scope:zetasql.TVFDescriptorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class FunctionArgumentTypeOptionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.FunctionArgumentTypeOptionsProto) */ {
 public:
  inline FunctionArgumentTypeOptionsProto() : FunctionArgumentTypeOptionsProto(nullptr) {}
  ~FunctionArgumentTypeOptionsProto() override;
  explicit PROTOBUF_CONSTEXPR FunctionArgumentTypeOptionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionArgumentTypeOptionsProto(const FunctionArgumentTypeOptionsProto& from);
  FunctionArgumentTypeOptionsProto(FunctionArgumentTypeOptionsProto&& from) noexcept
    : FunctionArgumentTypeOptionsProto() {
    *this = ::std::move(from);
  }

  inline FunctionArgumentTypeOptionsProto& operator=(const FunctionArgumentTypeOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionArgumentTypeOptionsProto& operator=(FunctionArgumentTypeOptionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionArgumentTypeOptionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionArgumentTypeOptionsProto* internal_default_instance() {
    return reinterpret_cast<const FunctionArgumentTypeOptionsProto*>(
               &_FunctionArgumentTypeOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FunctionArgumentTypeOptionsProto& a, FunctionArgumentTypeOptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionArgumentTypeOptionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionArgumentTypeOptionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionArgumentTypeOptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionArgumentTypeOptionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionArgumentTypeOptionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionArgumentTypeOptionsProto& from) {
    FunctionArgumentTypeOptionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionArgumentTypeOptionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.FunctionArgumentTypeOptionsProto";
  }
  protected:
  explicit FunctionArgumentTypeOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentNameFieldNumber = 11,
    kRelationInputSchemaFieldNumber = 10,
    kArgumentNameParseLocationFieldNumber = 12,
    kArgumentTypeParseLocationFieldNumber = 13,
    kDefaultValueFieldNumber = 17,
    kDefaultValueTypeFieldNumber = 18,
    kCardinalityFieldNumber = 1,
    kMustBeConstantFieldNumber = 2,
    kMustBeNonNullFieldNumber = 3,
    kIsNotAggregateFieldNumber = 4,
    kMustSupportEqualityFieldNumber = 5,
    kMinValueFieldNumber = 7,
    kMaxValueFieldNumber = 8,
    kMustSupportOrderingFieldNumber = 6,
    kExtraRelationInputColumnsAllowedFieldNumber = 9,
    kArgumentNameIsMandatoryFieldNumber = 15,
    kUsesArrayElementForCollationFieldNumber = 20,
    kProcedureArgumentModeFieldNumber = 14,
    kDescriptorResolutionTableOffsetFieldNumber = 16,
    kArgumentCollationModeFieldNumber = 19,
  };
  // optional string argument_name = 11;
  bool has_argument_name() const;
  private:
  bool _internal_has_argument_name() const;
  public:
  void clear_argument_name();
  const std::string& argument_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_argument_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_argument_name();
  PROTOBUF_NODISCARD std::string* release_argument_name();
  void set_allocated_argument_name(std::string* argument_name);
  private:
  const std::string& _internal_argument_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_argument_name(const std::string& value);
  std::string* _internal_mutable_argument_name();
  public:

  // optional .zetasql.TVFRelationProto relation_input_schema = 10;
  bool has_relation_input_schema() const;
  private:
  bool _internal_has_relation_input_schema() const;
  public:
  void clear_relation_input_schema();
  const ::zetasql::TVFRelationProto& relation_input_schema() const;
  PROTOBUF_NODISCARD ::zetasql::TVFRelationProto* release_relation_input_schema();
  ::zetasql::TVFRelationProto* mutable_relation_input_schema();
  void set_allocated_relation_input_schema(::zetasql::TVFRelationProto* relation_input_schema);
  private:
  const ::zetasql::TVFRelationProto& _internal_relation_input_schema() const;
  ::zetasql::TVFRelationProto* _internal_mutable_relation_input_schema();
  public:
  void unsafe_arena_set_allocated_relation_input_schema(
      ::zetasql::TVFRelationProto* relation_input_schema);
  ::zetasql::TVFRelationProto* unsafe_arena_release_relation_input_schema();

  // optional .zetasql.ParseLocationRangeProto argument_name_parse_location = 12;
  bool has_argument_name_parse_location() const;
  private:
  bool _internal_has_argument_name_parse_location() const;
  public:
  void clear_argument_name_parse_location();
  const ::zetasql::ParseLocationRangeProto& argument_name_parse_location() const;
  PROTOBUF_NODISCARD ::zetasql::ParseLocationRangeProto* release_argument_name_parse_location();
  ::zetasql::ParseLocationRangeProto* mutable_argument_name_parse_location();
  void set_allocated_argument_name_parse_location(::zetasql::ParseLocationRangeProto* argument_name_parse_location);
  private:
  const ::zetasql::ParseLocationRangeProto& _internal_argument_name_parse_location() const;
  ::zetasql::ParseLocationRangeProto* _internal_mutable_argument_name_parse_location();
  public:
  void unsafe_arena_set_allocated_argument_name_parse_location(
      ::zetasql::ParseLocationRangeProto* argument_name_parse_location);
  ::zetasql::ParseLocationRangeProto* unsafe_arena_release_argument_name_parse_location();

  // optional .zetasql.ParseLocationRangeProto argument_type_parse_location = 13;
  bool has_argument_type_parse_location() const;
  private:
  bool _internal_has_argument_type_parse_location() const;
  public:
  void clear_argument_type_parse_location();
  const ::zetasql::ParseLocationRangeProto& argument_type_parse_location() const;
  PROTOBUF_NODISCARD ::zetasql::ParseLocationRangeProto* release_argument_type_parse_location();
  ::zetasql::ParseLocationRangeProto* mutable_argument_type_parse_location();
  void set_allocated_argument_type_parse_location(::zetasql::ParseLocationRangeProto* argument_type_parse_location);
  private:
  const ::zetasql::ParseLocationRangeProto& _internal_argument_type_parse_location() const;
  ::zetasql::ParseLocationRangeProto* _internal_mutable_argument_type_parse_location();
  public:
  void unsafe_arena_set_allocated_argument_type_parse_location(
      ::zetasql::ParseLocationRangeProto* argument_type_parse_location);
  ::zetasql::ParseLocationRangeProto* unsafe_arena_release_argument_type_parse_location();

  // optional .zetasql.ValueProto default_value = 17;
  bool has_default_value() const;
  private:
  bool _internal_has_default_value() const;
  public:
  void clear_default_value();
  const ::zetasql::ValueProto& default_value() const;
  PROTOBUF_NODISCARD ::zetasql::ValueProto* release_default_value();
  ::zetasql::ValueProto* mutable_default_value();
  void set_allocated_default_value(::zetasql::ValueProto* default_value);
  private:
  const ::zetasql::ValueProto& _internal_default_value() const;
  ::zetasql::ValueProto* _internal_mutable_default_value();
  public:
  void unsafe_arena_set_allocated_default_value(
      ::zetasql::ValueProto* default_value);
  ::zetasql::ValueProto* unsafe_arena_release_default_value();

  // optional .zetasql.TypeProto default_value_type = 18;
  bool has_default_value_type() const;
  private:
  bool _internal_has_default_value_type() const;
  public:
  void clear_default_value_type();
  const ::zetasql::TypeProto& default_value_type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_default_value_type();
  ::zetasql::TypeProto* mutable_default_value_type();
  void set_allocated_default_value_type(::zetasql::TypeProto* default_value_type);
  private:
  const ::zetasql::TypeProto& _internal_default_value_type() const;
  ::zetasql::TypeProto* _internal_mutable_default_value_type();
  public:
  void unsafe_arena_set_allocated_default_value_type(
      ::zetasql::TypeProto* default_value_type);
  ::zetasql::TypeProto* unsafe_arena_release_default_value_type();

  // optional .zetasql.FunctionEnums.ArgumentCardinality cardinality = 1;
  bool has_cardinality() const;
  private:
  bool _internal_has_cardinality() const;
  public:
  void clear_cardinality();
  ::zetasql::FunctionEnums_ArgumentCardinality cardinality() const;
  void set_cardinality(::zetasql::FunctionEnums_ArgumentCardinality value);
  private:
  ::zetasql::FunctionEnums_ArgumentCardinality _internal_cardinality() const;
  void _internal_set_cardinality(::zetasql::FunctionEnums_ArgumentCardinality value);
  public:

  // optional bool must_be_constant = 2;
  bool has_must_be_constant() const;
  private:
  bool _internal_has_must_be_constant() const;
  public:
  void clear_must_be_constant();
  bool must_be_constant() const;
  void set_must_be_constant(bool value);
  private:
  bool _internal_must_be_constant() const;
  void _internal_set_must_be_constant(bool value);
  public:

  // optional bool must_be_non_null = 3;
  bool has_must_be_non_null() const;
  private:
  bool _internal_has_must_be_non_null() const;
  public:
  void clear_must_be_non_null();
  bool must_be_non_null() const;
  void set_must_be_non_null(bool value);
  private:
  bool _internal_must_be_non_null() const;
  void _internal_set_must_be_non_null(bool value);
  public:

  // optional bool is_not_aggregate = 4;
  bool has_is_not_aggregate() const;
  private:
  bool _internal_has_is_not_aggregate() const;
  public:
  void clear_is_not_aggregate();
  bool is_not_aggregate() const;
  void set_is_not_aggregate(bool value);
  private:
  bool _internal_is_not_aggregate() const;
  void _internal_set_is_not_aggregate(bool value);
  public:

  // optional bool must_support_equality = 5;
  bool has_must_support_equality() const;
  private:
  bool _internal_has_must_support_equality() const;
  public:
  void clear_must_support_equality();
  bool must_support_equality() const;
  void set_must_support_equality(bool value);
  private:
  bool _internal_must_support_equality() const;
  void _internal_set_must_support_equality(bool value);
  public:

  // optional int64 min_value = 7;
  bool has_min_value() const;
  private:
  bool _internal_has_min_value() const;
  public:
  void clear_min_value();
  int64_t min_value() const;
  void set_min_value(int64_t value);
  private:
  int64_t _internal_min_value() const;
  void _internal_set_min_value(int64_t value);
  public:

  // optional int64 max_value = 8;
  bool has_max_value() const;
  private:
  bool _internal_has_max_value() const;
  public:
  void clear_max_value();
  int64_t max_value() const;
  void set_max_value(int64_t value);
  private:
  int64_t _internal_max_value() const;
  void _internal_set_max_value(int64_t value);
  public:

  // optional bool must_support_ordering = 6;
  bool has_must_support_ordering() const;
  private:
  bool _internal_has_must_support_ordering() const;
  public:
  void clear_must_support_ordering();
  bool must_support_ordering() const;
  void set_must_support_ordering(bool value);
  private:
  bool _internal_must_support_ordering() const;
  void _internal_set_must_support_ordering(bool value);
  public:

  // optional bool extra_relation_input_columns_allowed = 9;
  bool has_extra_relation_input_columns_allowed() const;
  private:
  bool _internal_has_extra_relation_input_columns_allowed() const;
  public:
  void clear_extra_relation_input_columns_allowed();
  bool extra_relation_input_columns_allowed() const;
  void set_extra_relation_input_columns_allowed(bool value);
  private:
  bool _internal_extra_relation_input_columns_allowed() const;
  void _internal_set_extra_relation_input_columns_allowed(bool value);
  public:

  // optional bool argument_name_is_mandatory = 15 [default = false];
  bool has_argument_name_is_mandatory() const;
  private:
  bool _internal_has_argument_name_is_mandatory() const;
  public:
  void clear_argument_name_is_mandatory();
  bool argument_name_is_mandatory() const;
  void set_argument_name_is_mandatory(bool value);
  private:
  bool _internal_argument_name_is_mandatory() const;
  void _internal_set_argument_name_is_mandatory(bool value);
  public:

  // optional bool uses_array_element_for_collation = 20;
  bool has_uses_array_element_for_collation() const;
  private:
  bool _internal_has_uses_array_element_for_collation() const;
  public:
  void clear_uses_array_element_for_collation();
  bool uses_array_element_for_collation() const;
  void set_uses_array_element_for_collation(bool value);
  private:
  bool _internal_uses_array_element_for_collation() const;
  void _internal_set_uses_array_element_for_collation(bool value);
  public:

  // optional .zetasql.FunctionEnums.ProcedureArgumentMode procedure_argument_mode = 14;
  bool has_procedure_argument_mode() const;
  private:
  bool _internal_has_procedure_argument_mode() const;
  public:
  void clear_procedure_argument_mode();
  ::zetasql::FunctionEnums_ProcedureArgumentMode procedure_argument_mode() const;
  void set_procedure_argument_mode(::zetasql::FunctionEnums_ProcedureArgumentMode value);
  private:
  ::zetasql::FunctionEnums_ProcedureArgumentMode _internal_procedure_argument_mode() const;
  void _internal_set_procedure_argument_mode(::zetasql::FunctionEnums_ProcedureArgumentMode value);
  public:

  // optional int32 descriptor_resolution_table_offset = 16 [default = -1];
  bool has_descriptor_resolution_table_offset() const;
  private:
  bool _internal_has_descriptor_resolution_table_offset() const;
  public:
  void clear_descriptor_resolution_table_offset();
  int32_t descriptor_resolution_table_offset() const;
  void set_descriptor_resolution_table_offset(int32_t value);
  private:
  int32_t _internal_descriptor_resolution_table_offset() const;
  void _internal_set_descriptor_resolution_table_offset(int32_t value);
  public:

  // optional .zetasql.FunctionEnums.ArgumentCollationMode argument_collation_mode = 19 [default = AFFECTS_OPERATION_AND_PROPAGATION];
  bool has_argument_collation_mode() const;
  private:
  bool _internal_has_argument_collation_mode() const;
  public:
  void clear_argument_collation_mode();
  ::zetasql::FunctionEnums_ArgumentCollationMode argument_collation_mode() const;
  void set_argument_collation_mode(::zetasql::FunctionEnums_ArgumentCollationMode value);
  private:
  ::zetasql::FunctionEnums_ArgumentCollationMode _internal_argument_collation_mode() const;
  void _internal_set_argument_collation_mode(::zetasql::FunctionEnums_ArgumentCollationMode value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.FunctionArgumentTypeOptionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr argument_name_;
    ::zetasql::TVFRelationProto* relation_input_schema_;
    ::zetasql::ParseLocationRangeProto* argument_name_parse_location_;
    ::zetasql::ParseLocationRangeProto* argument_type_parse_location_;
    ::zetasql::ValueProto* default_value_;
    ::zetasql::TypeProto* default_value_type_;
    int cardinality_;
    bool must_be_constant_;
    bool must_be_non_null_;
    bool is_not_aggregate_;
    bool must_support_equality_;
    int64_t min_value_;
    int64_t max_value_;
    bool must_support_ordering_;
    bool extra_relation_input_columns_allowed_;
    bool argument_name_is_mandatory_;
    bool uses_array_element_for_collation_;
    int procedure_argument_mode_;
    int32_t descriptor_resolution_table_offset_;
    int argument_collation_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class ArgumentTypeLambdaProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ArgumentTypeLambdaProto) */ {
 public:
  inline ArgumentTypeLambdaProto() : ArgumentTypeLambdaProto(nullptr) {}
  ~ArgumentTypeLambdaProto() override;
  explicit PROTOBUF_CONSTEXPR ArgumentTypeLambdaProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArgumentTypeLambdaProto(const ArgumentTypeLambdaProto& from);
  ArgumentTypeLambdaProto(ArgumentTypeLambdaProto&& from) noexcept
    : ArgumentTypeLambdaProto() {
    *this = ::std::move(from);
  }

  inline ArgumentTypeLambdaProto& operator=(const ArgumentTypeLambdaProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArgumentTypeLambdaProto& operator=(ArgumentTypeLambdaProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArgumentTypeLambdaProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArgumentTypeLambdaProto* internal_default_instance() {
    return reinterpret_cast<const ArgumentTypeLambdaProto*>(
               &_ArgumentTypeLambdaProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ArgumentTypeLambdaProto& a, ArgumentTypeLambdaProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ArgumentTypeLambdaProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArgumentTypeLambdaProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArgumentTypeLambdaProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArgumentTypeLambdaProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArgumentTypeLambdaProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArgumentTypeLambdaProto& from) {
    ArgumentTypeLambdaProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgumentTypeLambdaProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ArgumentTypeLambdaProto";
  }
  protected:
  explicit ArgumentTypeLambdaProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentFieldNumber = 5,
    kBodyFieldNumber = 6,
  };
  // repeated .zetasql.FunctionArgumentTypeProto argument = 5;
  int argument_size() const;
  private:
  int _internal_argument_size() const;
  public:
  void clear_argument();
  ::zetasql::FunctionArgumentTypeProto* mutable_argument(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto >*
      mutable_argument();
  private:
  const ::zetasql::FunctionArgumentTypeProto& _internal_argument(int index) const;
  ::zetasql::FunctionArgumentTypeProto* _internal_add_argument();
  public:
  const ::zetasql::FunctionArgumentTypeProto& argument(int index) const;
  ::zetasql::FunctionArgumentTypeProto* add_argument();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto >&
      argument() const;

  // optional .zetasql.FunctionArgumentTypeProto body = 6;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::zetasql::FunctionArgumentTypeProto& body() const;
  PROTOBUF_NODISCARD ::zetasql::FunctionArgumentTypeProto* release_body();
  ::zetasql::FunctionArgumentTypeProto* mutable_body();
  void set_allocated_body(::zetasql::FunctionArgumentTypeProto* body);
  private:
  const ::zetasql::FunctionArgumentTypeProto& _internal_body() const;
  ::zetasql::FunctionArgumentTypeProto* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::zetasql::FunctionArgumentTypeProto* body);
  ::zetasql::FunctionArgumentTypeProto* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:zetasql.ArgumentTypeLambdaProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto > argument_;
    ::zetasql::FunctionArgumentTypeProto* body_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class FunctionArgumentTypeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.FunctionArgumentTypeProto) */ {
 public:
  inline FunctionArgumentTypeProto() : FunctionArgumentTypeProto(nullptr) {}
  ~FunctionArgumentTypeProto() override;
  explicit PROTOBUF_CONSTEXPR FunctionArgumentTypeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionArgumentTypeProto(const FunctionArgumentTypeProto& from);
  FunctionArgumentTypeProto(FunctionArgumentTypeProto&& from) noexcept
    : FunctionArgumentTypeProto() {
    *this = ::std::move(from);
  }

  inline FunctionArgumentTypeProto& operator=(const FunctionArgumentTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionArgumentTypeProto& operator=(FunctionArgumentTypeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionArgumentTypeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionArgumentTypeProto* internal_default_instance() {
    return reinterpret_cast<const FunctionArgumentTypeProto*>(
               &_FunctionArgumentTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FunctionArgumentTypeProto& a, FunctionArgumentTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionArgumentTypeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionArgumentTypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionArgumentTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionArgumentTypeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionArgumentTypeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionArgumentTypeProto& from) {
    FunctionArgumentTypeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionArgumentTypeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.FunctionArgumentTypeProto";
  }
  protected:
  explicit FunctionArgumentTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kOptionsFieldNumber = 3,
    kLambdaFieldNumber = 5,
    kKindFieldNumber = 1,
    kNumOccurrencesFieldNumber = 4,
  };
  // optional .zetasql.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::zetasql::TypeProto& type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_type();
  ::zetasql::TypeProto* mutable_type();
  void set_allocated_type(::zetasql::TypeProto* type);
  private:
  const ::zetasql::TypeProto& _internal_type() const;
  ::zetasql::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::zetasql::TypeProto* type);
  ::zetasql::TypeProto* unsafe_arena_release_type();

  // optional .zetasql.FunctionArgumentTypeOptionsProto options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::zetasql::FunctionArgumentTypeOptionsProto& options() const;
  PROTOBUF_NODISCARD ::zetasql::FunctionArgumentTypeOptionsProto* release_options();
  ::zetasql::FunctionArgumentTypeOptionsProto* mutable_options();
  void set_allocated_options(::zetasql::FunctionArgumentTypeOptionsProto* options);
  private:
  const ::zetasql::FunctionArgumentTypeOptionsProto& _internal_options() const;
  ::zetasql::FunctionArgumentTypeOptionsProto* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::zetasql::FunctionArgumentTypeOptionsProto* options);
  ::zetasql::FunctionArgumentTypeOptionsProto* unsafe_arena_release_options();

  // optional .zetasql.ArgumentTypeLambdaProto lambda = 5;
  bool has_lambda() const;
  private:
  bool _internal_has_lambda() const;
  public:
  void clear_lambda();
  const ::zetasql::ArgumentTypeLambdaProto& lambda() const;
  PROTOBUF_NODISCARD ::zetasql::ArgumentTypeLambdaProto* release_lambda();
  ::zetasql::ArgumentTypeLambdaProto* mutable_lambda();
  void set_allocated_lambda(::zetasql::ArgumentTypeLambdaProto* lambda);
  private:
  const ::zetasql::ArgumentTypeLambdaProto& _internal_lambda() const;
  ::zetasql::ArgumentTypeLambdaProto* _internal_mutable_lambda();
  public:
  void unsafe_arena_set_allocated_lambda(
      ::zetasql::ArgumentTypeLambdaProto* lambda);
  ::zetasql::ArgumentTypeLambdaProto* unsafe_arena_release_lambda();

  // optional .zetasql.SignatureArgumentKind kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::zetasql::SignatureArgumentKind kind() const;
  void set_kind(::zetasql::SignatureArgumentKind value);
  private:
  ::zetasql::SignatureArgumentKind _internal_kind() const;
  void _internal_set_kind(::zetasql::SignatureArgumentKind value);
  public:

  // optional int32 num_occurrences = 4;
  bool has_num_occurrences() const;
  private:
  bool _internal_has_num_occurrences() const;
  public:
  void clear_num_occurrences();
  int32_t num_occurrences() const;
  void set_num_occurrences(int32_t value);
  private:
  int32_t _internal_num_occurrences() const;
  void _internal_set_num_occurrences(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.FunctionArgumentTypeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::zetasql::TypeProto* type_;
    ::zetasql::FunctionArgumentTypeOptionsProto* options_;
    ::zetasql::ArgumentTypeLambdaProto* lambda_;
    int kind_;
    int32_t num_occurrences_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class FunctionSignatureOptionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.FunctionSignatureOptionsProto) */ {
 public:
  inline FunctionSignatureOptionsProto() : FunctionSignatureOptionsProto(nullptr) {}
  ~FunctionSignatureOptionsProto() override;
  explicit PROTOBUF_CONSTEXPR FunctionSignatureOptionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionSignatureOptionsProto(const FunctionSignatureOptionsProto& from);
  FunctionSignatureOptionsProto(FunctionSignatureOptionsProto&& from) noexcept
    : FunctionSignatureOptionsProto() {
    *this = ::std::move(from);
  }

  inline FunctionSignatureOptionsProto& operator=(const FunctionSignatureOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionSignatureOptionsProto& operator=(FunctionSignatureOptionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionSignatureOptionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionSignatureOptionsProto* internal_default_instance() {
    return reinterpret_cast<const FunctionSignatureOptionsProto*>(
               &_FunctionSignatureOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FunctionSignatureOptionsProto& a, FunctionSignatureOptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionSignatureOptionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionSignatureOptionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionSignatureOptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionSignatureOptionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionSignatureOptionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionSignatureOptionsProto& from) {
    FunctionSignatureOptionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionSignatureOptionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.FunctionSignatureOptionsProto";
  }
  protected:
  explicit FunctionSignatureOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalDeprecationWarningFieldNumber = 3,
    kRequiredLanguageFeatureFieldNumber = 4,
    kIsDeprecatedFieldNumber = 2,
    kIsAliasedSignatureFieldNumber = 5,
    kUsesOperationCollationFieldNumber = 7,
    kRejectsCollationFieldNumber = 8,
    kPropagatesCollationFieldNumber = 6,
  };
  // repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 3;
  int additional_deprecation_warning_size() const;
  private:
  int _internal_additional_deprecation_warning_size() const;
  public:
  void clear_additional_deprecation_warning();
  ::zetasql::FreestandingDeprecationWarning* mutable_additional_deprecation_warning(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning >*
      mutable_additional_deprecation_warning();
  private:
  const ::zetasql::FreestandingDeprecationWarning& _internal_additional_deprecation_warning(int index) const;
  ::zetasql::FreestandingDeprecationWarning* _internal_add_additional_deprecation_warning();
  public:
  const ::zetasql::FreestandingDeprecationWarning& additional_deprecation_warning(int index) const;
  ::zetasql::FreestandingDeprecationWarning* add_additional_deprecation_warning();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning >&
      additional_deprecation_warning() const;

  // repeated .zetasql.LanguageFeature required_language_feature = 4;
  int required_language_feature_size() const;
  private:
  int _internal_required_language_feature_size() const;
  public:
  void clear_required_language_feature();
  private:
  ::zetasql::LanguageFeature _internal_required_language_feature(int index) const;
  void _internal_add_required_language_feature(::zetasql::LanguageFeature value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_required_language_feature();
  public:
  ::zetasql::LanguageFeature required_language_feature(int index) const;
  void set_required_language_feature(int index, ::zetasql::LanguageFeature value);
  void add_required_language_feature(::zetasql::LanguageFeature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& required_language_feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_required_language_feature();

  // optional bool is_deprecated = 2 [default = false];
  bool has_is_deprecated() const;
  private:
  bool _internal_has_is_deprecated() const;
  public:
  void clear_is_deprecated();
  bool is_deprecated() const;
  void set_is_deprecated(bool value);
  private:
  bool _internal_is_deprecated() const;
  void _internal_set_is_deprecated(bool value);
  public:

  // optional bool is_aliased_signature = 5 [default = false];
  bool has_is_aliased_signature() const;
  private:
  bool _internal_has_is_aliased_signature() const;
  public:
  void clear_is_aliased_signature();
  bool is_aliased_signature() const;
  void set_is_aliased_signature(bool value);
  private:
  bool _internal_is_aliased_signature() const;
  void _internal_set_is_aliased_signature(bool value);
  public:

  // optional bool uses_operation_collation = 7 [default = false];
  bool has_uses_operation_collation() const;
  private:
  bool _internal_has_uses_operation_collation() const;
  public:
  void clear_uses_operation_collation();
  bool uses_operation_collation() const;
  void set_uses_operation_collation(bool value);
  private:
  bool _internal_uses_operation_collation() const;
  void _internal_set_uses_operation_collation(bool value);
  public:

  // optional bool rejects_collation = 8 [default = false];
  bool has_rejects_collation() const;
  private:
  bool _internal_has_rejects_collation() const;
  public:
  void clear_rejects_collation();
  bool rejects_collation() const;
  void set_rejects_collation(bool value);
  private:
  bool _internal_rejects_collation() const;
  void _internal_set_rejects_collation(bool value);
  public:

  // optional bool propagates_collation = 6 [default = true];
  bool has_propagates_collation() const;
  private:
  bool _internal_has_propagates_collation() const;
  public:
  void clear_propagates_collation();
  bool propagates_collation() const;
  void set_propagates_collation(bool value);
  private:
  bool _internal_propagates_collation() const;
  void _internal_set_propagates_collation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.FunctionSignatureOptionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning > additional_deprecation_warning_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> required_language_feature_;
    bool is_deprecated_;
    bool is_aliased_signature_;
    bool uses_operation_collation_;
    bool rejects_collation_;
    bool propagates_collation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class FunctionSignatureProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.FunctionSignatureProto) */ {
 public:
  inline FunctionSignatureProto() : FunctionSignatureProto(nullptr) {}
  ~FunctionSignatureProto() override;
  explicit PROTOBUF_CONSTEXPR FunctionSignatureProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionSignatureProto(const FunctionSignatureProto& from);
  FunctionSignatureProto(FunctionSignatureProto&& from) noexcept
    : FunctionSignatureProto() {
    *this = ::std::move(from);
  }

  inline FunctionSignatureProto& operator=(const FunctionSignatureProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionSignatureProto& operator=(FunctionSignatureProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionSignatureProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionSignatureProto* internal_default_instance() {
    return reinterpret_cast<const FunctionSignatureProto*>(
               &_FunctionSignatureProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FunctionSignatureProto& a, FunctionSignatureProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionSignatureProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionSignatureProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionSignatureProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionSignatureProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionSignatureProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionSignatureProto& from) {
    FunctionSignatureProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionSignatureProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.FunctionSignatureProto";
  }
  protected:
  explicit FunctionSignatureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentFieldNumber = 1,
    kReturnTypeFieldNumber = 2,
    kOptionsFieldNumber = 4,
    kContextIdFieldNumber = 3,
  };
  // repeated .zetasql.FunctionArgumentTypeProto argument = 1;
  int argument_size() const;
  private:
  int _internal_argument_size() const;
  public:
  void clear_argument();
  ::zetasql::FunctionArgumentTypeProto* mutable_argument(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto >*
      mutable_argument();
  private:
  const ::zetasql::FunctionArgumentTypeProto& _internal_argument(int index) const;
  ::zetasql::FunctionArgumentTypeProto* _internal_add_argument();
  public:
  const ::zetasql::FunctionArgumentTypeProto& argument(int index) const;
  ::zetasql::FunctionArgumentTypeProto* add_argument();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto >&
      argument() const;

  // optional .zetasql.FunctionArgumentTypeProto return_type = 2;
  bool has_return_type() const;
  private:
  bool _internal_has_return_type() const;
  public:
  void clear_return_type();
  const ::zetasql::FunctionArgumentTypeProto& return_type() const;
  PROTOBUF_NODISCARD ::zetasql::FunctionArgumentTypeProto* release_return_type();
  ::zetasql::FunctionArgumentTypeProto* mutable_return_type();
  void set_allocated_return_type(::zetasql::FunctionArgumentTypeProto* return_type);
  private:
  const ::zetasql::FunctionArgumentTypeProto& _internal_return_type() const;
  ::zetasql::FunctionArgumentTypeProto* _internal_mutable_return_type();
  public:
  void unsafe_arena_set_allocated_return_type(
      ::zetasql::FunctionArgumentTypeProto* return_type);
  ::zetasql::FunctionArgumentTypeProto* unsafe_arena_release_return_type();

  // optional .zetasql.FunctionSignatureOptionsProto options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::zetasql::FunctionSignatureOptionsProto& options() const;
  PROTOBUF_NODISCARD ::zetasql::FunctionSignatureOptionsProto* release_options();
  ::zetasql::FunctionSignatureOptionsProto* mutable_options();
  void set_allocated_options(::zetasql::FunctionSignatureOptionsProto* options);
  private:
  const ::zetasql::FunctionSignatureOptionsProto& _internal_options() const;
  ::zetasql::FunctionSignatureOptionsProto* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::zetasql::FunctionSignatureOptionsProto* options);
  ::zetasql::FunctionSignatureOptionsProto* unsafe_arena_release_options();

  // optional int64 context_id = 3;
  bool has_context_id() const;
  private:
  bool _internal_has_context_id() const;
  public:
  void clear_context_id();
  int64_t context_id() const;
  void set_context_id(int64_t value);
  private:
  int64_t _internal_context_id() const;
  void _internal_set_context_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.FunctionSignatureProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto > argument_;
    ::zetasql::FunctionArgumentTypeProto* return_type_;
    ::zetasql::FunctionSignatureOptionsProto* options_;
    int64_t context_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class FunctionOptionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.FunctionOptionsProto) */ {
 public:
  inline FunctionOptionsProto() : FunctionOptionsProto(nullptr) {}
  ~FunctionOptionsProto() override;
  explicit PROTOBUF_CONSTEXPR FunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionOptionsProto(const FunctionOptionsProto& from);
  FunctionOptionsProto(FunctionOptionsProto&& from) noexcept
    : FunctionOptionsProto() {
    *this = ::std::move(from);
  }

  inline FunctionOptionsProto& operator=(const FunctionOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionOptionsProto& operator=(FunctionOptionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionOptionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionOptionsProto* internal_default_instance() {
    return reinterpret_cast<const FunctionOptionsProto*>(
               &_FunctionOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FunctionOptionsProto& a, FunctionOptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionOptionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionOptionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionOptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionOptionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionOptionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionOptionsProto& from) {
    FunctionOptionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionOptionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.FunctionOptionsProto";
  }
  protected:
  explicit FunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredLanguageFeatureFieldNumber = 11,
    kAliasNameFieldNumber = 6,
    kSqlNameFieldNumber = 7,
    kWindowOrderingSupportFieldNumber = 2,
    kSupportsOverClauseFieldNumber = 1,
    kSupportsWindowFramingFieldNumber = 3,
    kIsDeprecatedFieldNumber = 5,
    kSupportsOrderByFieldNumber = 10,
    kVolatilityFieldNumber = 9,
    kSupportsLimitFieldNumber = 12,
    kSupportsNullHandlingModifierFieldNumber = 13,
    kSupportsClampedBetweenModifierFieldNumber = 16,
    kArgumentsAreCoercibleFieldNumber = 4,
    kAllowExternalUsageFieldNumber = 8,
    kSupportsSafeErrorModeFieldNumber = 14,
    kSupportsHavingModifierFieldNumber = 15,
    kUsesUpperCaseSqlNameFieldNumber = 17,
  };
  // repeated .zetasql.LanguageFeature required_language_feature = 11;
  int required_language_feature_size() const;
  private:
  int _internal_required_language_feature_size() const;
  public:
  void clear_required_language_feature();
  private:
  ::zetasql::LanguageFeature _internal_required_language_feature(int index) const;
  void _internal_add_required_language_feature(::zetasql::LanguageFeature value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_required_language_feature();
  public:
  ::zetasql::LanguageFeature required_language_feature(int index) const;
  void set_required_language_feature(int index, ::zetasql::LanguageFeature value);
  void add_required_language_feature(::zetasql::LanguageFeature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& required_language_feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_required_language_feature();

  // optional string alias_name = 6;
  bool has_alias_name() const;
  private:
  bool _internal_has_alias_name() const;
  public:
  void clear_alias_name();
  const std::string& alias_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias_name();
  PROTOBUF_NODISCARD std::string* release_alias_name();
  void set_allocated_alias_name(std::string* alias_name);
  private:
  const std::string& _internal_alias_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias_name(const std::string& value);
  std::string* _internal_mutable_alias_name();
  public:

  // optional string sql_name = 7;
  bool has_sql_name() const;
  private:
  bool _internal_has_sql_name() const;
  public:
  void clear_sql_name();
  const std::string& sql_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sql_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sql_name();
  PROTOBUF_NODISCARD std::string* release_sql_name();
  void set_allocated_sql_name(std::string* sql_name);
  private:
  const std::string& _internal_sql_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql_name(const std::string& value);
  std::string* _internal_mutable_sql_name();
  public:

  // optional .zetasql.FunctionEnums.WindowOrderSupport window_ordering_support = 2 [default = ORDER_UNSUPPORTED];
  bool has_window_ordering_support() const;
  private:
  bool _internal_has_window_ordering_support() const;
  public:
  void clear_window_ordering_support();
  ::zetasql::FunctionEnums_WindowOrderSupport window_ordering_support() const;
  void set_window_ordering_support(::zetasql::FunctionEnums_WindowOrderSupport value);
  private:
  ::zetasql::FunctionEnums_WindowOrderSupport _internal_window_ordering_support() const;
  void _internal_set_window_ordering_support(::zetasql::FunctionEnums_WindowOrderSupport value);
  public:

  // optional bool supports_over_clause = 1 [default = false];
  bool has_supports_over_clause() const;
  private:
  bool _internal_has_supports_over_clause() const;
  public:
  void clear_supports_over_clause();
  bool supports_over_clause() const;
  void set_supports_over_clause(bool value);
  private:
  bool _internal_supports_over_clause() const;
  void _internal_set_supports_over_clause(bool value);
  public:

  // optional bool supports_window_framing = 3 [default = false];
  bool has_supports_window_framing() const;
  private:
  bool _internal_has_supports_window_framing() const;
  public:
  void clear_supports_window_framing();
  bool supports_window_framing() const;
  void set_supports_window_framing(bool value);
  private:
  bool _internal_supports_window_framing() const;
  void _internal_set_supports_window_framing(bool value);
  public:

  // optional bool is_deprecated = 5 [default = false];
  bool has_is_deprecated() const;
  private:
  bool _internal_has_is_deprecated() const;
  public:
  void clear_is_deprecated();
  bool is_deprecated() const;
  void set_is_deprecated(bool value);
  private:
  bool _internal_is_deprecated() const;
  void _internal_set_is_deprecated(bool value);
  public:

  // optional bool supports_order_by = 10 [default = false];
  bool has_supports_order_by() const;
  private:
  bool _internal_has_supports_order_by() const;
  public:
  void clear_supports_order_by();
  bool supports_order_by() const;
  void set_supports_order_by(bool value);
  private:
  bool _internal_supports_order_by() const;
  void _internal_set_supports_order_by(bool value);
  public:

  // optional .zetasql.FunctionEnums.Volatility volatility = 9 [default = IMMUTABLE];
  bool has_volatility() const;
  private:
  bool _internal_has_volatility() const;
  public:
  void clear_volatility();
  ::zetasql::FunctionEnums_Volatility volatility() const;
  void set_volatility(::zetasql::FunctionEnums_Volatility value);
  private:
  ::zetasql::FunctionEnums_Volatility _internal_volatility() const;
  void _internal_set_volatility(::zetasql::FunctionEnums_Volatility value);
  public:

  // optional bool supports_limit = 12 [default = false];
  bool has_supports_limit() const;
  private:
  bool _internal_has_supports_limit() const;
  public:
  void clear_supports_limit();
  bool supports_limit() const;
  void set_supports_limit(bool value);
  private:
  bool _internal_supports_limit() const;
  void _internal_set_supports_limit(bool value);
  public:

  // optional bool supports_null_handling_modifier = 13 [default = false];
  bool has_supports_null_handling_modifier() const;
  private:
  bool _internal_has_supports_null_handling_modifier() const;
  public:
  void clear_supports_null_handling_modifier();
  bool supports_null_handling_modifier() const;
  void set_supports_null_handling_modifier(bool value);
  private:
  bool _internal_supports_null_handling_modifier() const;
  void _internal_set_supports_null_handling_modifier(bool value);
  public:

  // optional bool supports_clamped_between_modifier = 16 [default = false];
  bool has_supports_clamped_between_modifier() const;
  private:
  bool _internal_has_supports_clamped_between_modifier() const;
  public:
  void clear_supports_clamped_between_modifier();
  bool supports_clamped_between_modifier() const;
  void set_supports_clamped_between_modifier(bool value);
  private:
  bool _internal_supports_clamped_between_modifier() const;
  void _internal_set_supports_clamped_between_modifier(bool value);
  public:

  // optional bool arguments_are_coercible = 4 [default = true];
  bool has_arguments_are_coercible() const;
  private:
  bool _internal_has_arguments_are_coercible() const;
  public:
  void clear_arguments_are_coercible();
  bool arguments_are_coercible() const;
  void set_arguments_are_coercible(bool value);
  private:
  bool _internal_arguments_are_coercible() const;
  void _internal_set_arguments_are_coercible(bool value);
  public:

  // optional bool allow_external_usage = 8 [default = true];
  bool has_allow_external_usage() const;
  private:
  bool _internal_has_allow_external_usage() const;
  public:
  void clear_allow_external_usage();
  bool allow_external_usage() const;
  void set_allow_external_usage(bool value);
  private:
  bool _internal_allow_external_usage() const;
  void _internal_set_allow_external_usage(bool value);
  public:

  // optional bool supports_safe_error_mode = 14 [default = true];
  bool has_supports_safe_error_mode() const;
  private:
  bool _internal_has_supports_safe_error_mode() const;
  public:
  void clear_supports_safe_error_mode();
  bool supports_safe_error_mode() const;
  void set_supports_safe_error_mode(bool value);
  private:
  bool _internal_supports_safe_error_mode() const;
  void _internal_set_supports_safe_error_mode(bool value);
  public:

  // optional bool supports_having_modifier = 15 [default = true];
  bool has_supports_having_modifier() const;
  private:
  bool _internal_has_supports_having_modifier() const;
  public:
  void clear_supports_having_modifier();
  bool supports_having_modifier() const;
  void set_supports_having_modifier(bool value);
  private:
  bool _internal_supports_having_modifier() const;
  void _internal_set_supports_having_modifier(bool value);
  public:

  // optional bool uses_upper_case_sql_name = 17 [default = true];
  bool has_uses_upper_case_sql_name() const;
  private:
  bool _internal_has_uses_upper_case_sql_name() const;
  public:
  void clear_uses_upper_case_sql_name();
  bool uses_upper_case_sql_name() const;
  void set_uses_upper_case_sql_name(bool value);
  private:
  bool _internal_uses_upper_case_sql_name() const;
  void _internal_set_uses_upper_case_sql_name(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.FunctionOptionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> required_language_feature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_name_;
    int window_ordering_support_;
    bool supports_over_clause_;
    bool supports_window_framing_;
    bool is_deprecated_;
    bool supports_order_by_;
    int volatility_;
    bool supports_limit_;
    bool supports_null_handling_modifier_;
    bool supports_clamped_between_modifier_;
    bool arguments_are_coercible_;
    bool allow_external_usage_;
    bool supports_safe_error_mode_;
    bool supports_having_modifier_;
    bool uses_upper_case_sql_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class FunctionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.FunctionProto) */ {
 public:
  inline FunctionProto() : FunctionProto(nullptr) {}
  ~FunctionProto() override;
  explicit PROTOBUF_CONSTEXPR FunctionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionProto(const FunctionProto& from);
  FunctionProto(FunctionProto&& from) noexcept
    : FunctionProto() {
    *this = ::std::move(from);
  }

  inline FunctionProto& operator=(const FunctionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionProto& operator=(FunctionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionProto* internal_default_instance() {
    return reinterpret_cast<const FunctionProto*>(
               &_FunctionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FunctionProto& a, FunctionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionProto& from) {
    FunctionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.FunctionProto";
  }
  protected:
  explicit FunctionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamePathFieldNumber = 1,
    kSignatureFieldNumber = 4,
    kTemplatedSqlFunctionArgumentNameFieldNumber = 7,
    kGroupFieldNumber = 2,
    kOptionsFieldNumber = 5,
    kParseResumeLocationFieldNumber = 8,
    kModeFieldNumber = 3,
  };
  // repeated string name_path = 1;
  int name_path_size() const;
  private:
  int _internal_name_path_size() const;
  public:
  void clear_name_path();
  const std::string& name_path(int index) const;
  std::string* mutable_name_path(int index);
  void set_name_path(int index, const std::string& value);
  void set_name_path(int index, std::string&& value);
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  std::string* add_name_path();
  void add_name_path(const std::string& value);
  void add_name_path(std::string&& value);
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_path();
  private:
  const std::string& _internal_name_path(int index) const;
  std::string* _internal_add_name_path();
  public:

  // repeated .zetasql.FunctionSignatureProto signature = 4;
  int signature_size() const;
  private:
  int _internal_signature_size() const;
  public:
  void clear_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionSignatureProto >*
      mutable_signature();
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature(int index) const;
  ::zetasql::FunctionSignatureProto* _internal_add_signature();
  public:
  const ::zetasql::FunctionSignatureProto& signature(int index) const;
  ::zetasql::FunctionSignatureProto* add_signature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionSignatureProto >&
      signature() const;

  // repeated string templated_sql_function_argument_name = 7;
  int templated_sql_function_argument_name_size() const;
  private:
  int _internal_templated_sql_function_argument_name_size() const;
  public:
  void clear_templated_sql_function_argument_name();
  const std::string& templated_sql_function_argument_name(int index) const;
  std::string* mutable_templated_sql_function_argument_name(int index);
  void set_templated_sql_function_argument_name(int index, const std::string& value);
  void set_templated_sql_function_argument_name(int index, std::string&& value);
  void set_templated_sql_function_argument_name(int index, const char* value);
  void set_templated_sql_function_argument_name(int index, const char* value, size_t size);
  std::string* add_templated_sql_function_argument_name();
  void add_templated_sql_function_argument_name(const std::string& value);
  void add_templated_sql_function_argument_name(std::string&& value);
  void add_templated_sql_function_argument_name(const char* value);
  void add_templated_sql_function_argument_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& templated_sql_function_argument_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_templated_sql_function_argument_name();
  private:
  const std::string& _internal_templated_sql_function_argument_name(int index) const;
  std::string* _internal_add_templated_sql_function_argument_name();
  public:

  // optional string group = 2;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const std::string& group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group();
  PROTOBUF_NODISCARD std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // optional .zetasql.FunctionOptionsProto options = 5;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::zetasql::FunctionOptionsProto& options() const;
  PROTOBUF_NODISCARD ::zetasql::FunctionOptionsProto* release_options();
  ::zetasql::FunctionOptionsProto* mutable_options();
  void set_allocated_options(::zetasql::FunctionOptionsProto* options);
  private:
  const ::zetasql::FunctionOptionsProto& _internal_options() const;
  ::zetasql::FunctionOptionsProto* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::zetasql::FunctionOptionsProto* options);
  ::zetasql::FunctionOptionsProto* unsafe_arena_release_options();

  // optional .zetasql.ParseResumeLocationProto parse_resume_location = 8;
  bool has_parse_resume_location() const;
  private:
  bool _internal_has_parse_resume_location() const;
  public:
  void clear_parse_resume_location();
  const ::zetasql::ParseResumeLocationProto& parse_resume_location() const;
  PROTOBUF_NODISCARD ::zetasql::ParseResumeLocationProto* release_parse_resume_location();
  ::zetasql::ParseResumeLocationProto* mutable_parse_resume_location();
  void set_allocated_parse_resume_location(::zetasql::ParseResumeLocationProto* parse_resume_location);
  private:
  const ::zetasql::ParseResumeLocationProto& _internal_parse_resume_location() const;
  ::zetasql::ParseResumeLocationProto* _internal_mutable_parse_resume_location();
  public:
  void unsafe_arena_set_allocated_parse_resume_location(
      ::zetasql::ParseResumeLocationProto* parse_resume_location);
  ::zetasql::ParseResumeLocationProto* unsafe_arena_release_parse_resume_location();

  // optional .zetasql.FunctionEnums.Mode mode = 3;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::zetasql::FunctionEnums_Mode mode() const;
  void set_mode(::zetasql::FunctionEnums_Mode value);
  private:
  ::zetasql::FunctionEnums_Mode _internal_mode() const;
  void _internal_set_mode(::zetasql::FunctionEnums_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.FunctionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_path_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionSignatureProto > signature_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> templated_sql_function_argument_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
    ::zetasql::FunctionOptionsProto* options_;
    ::zetasql::ParseResumeLocationProto* parse_resume_location_;
    int mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class ResolvedFunctionCallInfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:zetasql.ResolvedFunctionCallInfoProto) */ {
 public:
  inline ResolvedFunctionCallInfoProto() : ResolvedFunctionCallInfoProto(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ResolvedFunctionCallInfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResolvedFunctionCallInfoProto(const ResolvedFunctionCallInfoProto& from);
  ResolvedFunctionCallInfoProto(ResolvedFunctionCallInfoProto&& from) noexcept
    : ResolvedFunctionCallInfoProto() {
    *this = ::std::move(from);
  }

  inline ResolvedFunctionCallInfoProto& operator=(const ResolvedFunctionCallInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolvedFunctionCallInfoProto& operator=(ResolvedFunctionCallInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolvedFunctionCallInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolvedFunctionCallInfoProto* internal_default_instance() {
    return reinterpret_cast<const ResolvedFunctionCallInfoProto*>(
               &_ResolvedFunctionCallInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ResolvedFunctionCallInfoProto& a, ResolvedFunctionCallInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolvedFunctionCallInfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolvedFunctionCallInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolvedFunctionCallInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResolvedFunctionCallInfoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResolvedFunctionCallInfoProto& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResolvedFunctionCallInfoProto& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ResolvedFunctionCallInfoProto";
  }
  protected:
  explicit ResolvedFunctionCallInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zetasql.ResolvedFunctionCallInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class TableValuedFunctionOptionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TableValuedFunctionOptionsProto) */ {
 public:
  inline TableValuedFunctionOptionsProto() : TableValuedFunctionOptionsProto(nullptr) {}
  ~TableValuedFunctionOptionsProto() override;
  explicit PROTOBUF_CONSTEXPR TableValuedFunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableValuedFunctionOptionsProto(const TableValuedFunctionOptionsProto& from);
  TableValuedFunctionOptionsProto(TableValuedFunctionOptionsProto&& from) noexcept
    : TableValuedFunctionOptionsProto() {
    *this = ::std::move(from);
  }

  inline TableValuedFunctionOptionsProto& operator=(const TableValuedFunctionOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableValuedFunctionOptionsProto& operator=(TableValuedFunctionOptionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableValuedFunctionOptionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableValuedFunctionOptionsProto* internal_default_instance() {
    return reinterpret_cast<const TableValuedFunctionOptionsProto*>(
               &_TableValuedFunctionOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TableValuedFunctionOptionsProto& a, TableValuedFunctionOptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TableValuedFunctionOptionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableValuedFunctionOptionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableValuedFunctionOptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableValuedFunctionOptionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableValuedFunctionOptionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableValuedFunctionOptionsProto& from) {
    TableValuedFunctionOptionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableValuedFunctionOptionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TableValuedFunctionOptionsProto";
  }
  protected:
  explicit TableValuedFunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsesUpperCaseSqlNameFieldNumber = 1,
  };
  // optional bool uses_upper_case_sql_name = 1 [default = true];
  bool has_uses_upper_case_sql_name() const;
  private:
  bool _internal_has_uses_upper_case_sql_name() const;
  public:
  void clear_uses_upper_case_sql_name();
  bool uses_upper_case_sql_name() const;
  void set_uses_upper_case_sql_name(bool value);
  private:
  bool _internal_uses_upper_case_sql_name() const;
  void _internal_set_uses_upper_case_sql_name(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.TableValuedFunctionOptionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool uses_upper_case_sql_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class TableValuedFunctionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TableValuedFunctionProto) */ {
 public:
  inline TableValuedFunctionProto() : TableValuedFunctionProto(nullptr) {}
  ~TableValuedFunctionProto() override;
  explicit PROTOBUF_CONSTEXPR TableValuedFunctionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableValuedFunctionProto(const TableValuedFunctionProto& from);
  TableValuedFunctionProto(TableValuedFunctionProto&& from) noexcept
    : TableValuedFunctionProto() {
    *this = ::std::move(from);
  }

  inline TableValuedFunctionProto& operator=(const TableValuedFunctionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableValuedFunctionProto& operator=(TableValuedFunctionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableValuedFunctionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableValuedFunctionProto* internal_default_instance() {
    return reinterpret_cast<const TableValuedFunctionProto*>(
               &_TableValuedFunctionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TableValuedFunctionProto& a, TableValuedFunctionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TableValuedFunctionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableValuedFunctionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableValuedFunctionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableValuedFunctionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableValuedFunctionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableValuedFunctionProto& from) {
    TableValuedFunctionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableValuedFunctionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TableValuedFunctionProto";
  }
  protected:
  explicit TableValuedFunctionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamePathFieldNumber = 1,
    kArgumentNameFieldNumber = 5,
    kCustomContextFieldNumber = 7,
    kSignatureFieldNumber = 2,
    kParseResumeLocationFieldNumber = 6,
    kOptionsFieldNumber = 9,
    kAnonymizationInfoFieldNumber = 10,
    kTypeFieldNumber = 3,
    kVolatilityFieldNumber = 8,
  };
  // repeated string name_path = 1;
  int name_path_size() const;
  private:
  int _internal_name_path_size() const;
  public:
  void clear_name_path();
  const std::string& name_path(int index) const;
  std::string* mutable_name_path(int index);
  void set_name_path(int index, const std::string& value);
  void set_name_path(int index, std::string&& value);
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  std::string* add_name_path();
  void add_name_path(const std::string& value);
  void add_name_path(std::string&& value);
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_path();
  private:
  const std::string& _internal_name_path(int index) const;
  std::string* _internal_add_name_path();
  public:

  // repeated string argument_name = 5;
  int argument_name_size() const;
  private:
  int _internal_argument_name_size() const;
  public:
  void clear_argument_name();
  const std::string& argument_name(int index) const;
  std::string* mutable_argument_name(int index);
  void set_argument_name(int index, const std::string& value);
  void set_argument_name(int index, std::string&& value);
  void set_argument_name(int index, const char* value);
  void set_argument_name(int index, const char* value, size_t size);
  std::string* add_argument_name();
  void add_argument_name(const std::string& value);
  void add_argument_name(std::string&& value);
  void add_argument_name(const char* value);
  void add_argument_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& argument_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_argument_name();
  private:
  const std::string& _internal_argument_name(int index) const;
  std::string* _internal_add_argument_name();
  public:

  // optional string custom_context = 7;
  bool has_custom_context() const;
  private:
  bool _internal_has_custom_context() const;
  public:
  void clear_custom_context();
  const std::string& custom_context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_context();
  PROTOBUF_NODISCARD std::string* release_custom_context();
  void set_allocated_custom_context(std::string* custom_context);
  private:
  const std::string& _internal_custom_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_context(const std::string& value);
  std::string* _internal_mutable_custom_context();
  public:

  // optional .zetasql.FunctionSignatureProto signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::zetasql::FunctionSignatureProto& signature() const;
  PROTOBUF_NODISCARD ::zetasql::FunctionSignatureProto* release_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::FunctionSignatureProto* signature);
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature() const;
  ::zetasql::FunctionSignatureProto* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::zetasql::FunctionSignatureProto* signature);
  ::zetasql::FunctionSignatureProto* unsafe_arena_release_signature();

  // optional .zetasql.ParseResumeLocationProto parse_resume_location = 6;
  bool has_parse_resume_location() const;
  private:
  bool _internal_has_parse_resume_location() const;
  public:
  void clear_parse_resume_location();
  const ::zetasql::ParseResumeLocationProto& parse_resume_location() const;
  PROTOBUF_NODISCARD ::zetasql::ParseResumeLocationProto* release_parse_resume_location();
  ::zetasql::ParseResumeLocationProto* mutable_parse_resume_location();
  void set_allocated_parse_resume_location(::zetasql::ParseResumeLocationProto* parse_resume_location);
  private:
  const ::zetasql::ParseResumeLocationProto& _internal_parse_resume_location() const;
  ::zetasql::ParseResumeLocationProto* _internal_mutable_parse_resume_location();
  public:
  void unsafe_arena_set_allocated_parse_resume_location(
      ::zetasql::ParseResumeLocationProto* parse_resume_location);
  ::zetasql::ParseResumeLocationProto* unsafe_arena_release_parse_resume_location();

  // optional .zetasql.TableValuedFunctionOptionsProto options = 9;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::zetasql::TableValuedFunctionOptionsProto& options() const;
  PROTOBUF_NODISCARD ::zetasql::TableValuedFunctionOptionsProto* release_options();
  ::zetasql::TableValuedFunctionOptionsProto* mutable_options();
  void set_allocated_options(::zetasql::TableValuedFunctionOptionsProto* options);
  private:
  const ::zetasql::TableValuedFunctionOptionsProto& _internal_options() const;
  ::zetasql::TableValuedFunctionOptionsProto* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::zetasql::TableValuedFunctionOptionsProto* options);
  ::zetasql::TableValuedFunctionOptionsProto* unsafe_arena_release_options();

  // optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 10;
  bool has_anonymization_info() const;
  private:
  bool _internal_has_anonymization_info() const;
  public:
  void clear_anonymization_info();
  const ::zetasql::SimpleAnonymizationInfoProto& anonymization_info() const;
  PROTOBUF_NODISCARD ::zetasql::SimpleAnonymizationInfoProto* release_anonymization_info();
  ::zetasql::SimpleAnonymizationInfoProto* mutable_anonymization_info();
  void set_allocated_anonymization_info(::zetasql::SimpleAnonymizationInfoProto* anonymization_info);
  private:
  const ::zetasql::SimpleAnonymizationInfoProto& _internal_anonymization_info() const;
  ::zetasql::SimpleAnonymizationInfoProto* _internal_mutable_anonymization_info();
  public:
  void unsafe_arena_set_allocated_anonymization_info(
      ::zetasql::SimpleAnonymizationInfoProto* anonymization_info);
  ::zetasql::SimpleAnonymizationInfoProto* unsafe_arena_release_anonymization_info();

  // optional .zetasql.FunctionEnums.TableValuedFunctionType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::zetasql::FunctionEnums_TableValuedFunctionType type() const;
  void set_type(::zetasql::FunctionEnums_TableValuedFunctionType value);
  private:
  ::zetasql::FunctionEnums_TableValuedFunctionType _internal_type() const;
  void _internal_set_type(::zetasql::FunctionEnums_TableValuedFunctionType value);
  public:

  // optional .zetasql.FunctionEnums.Volatility volatility = 8;
  bool has_volatility() const;
  private:
  bool _internal_has_volatility() const;
  public:
  void clear_volatility();
  ::zetasql::FunctionEnums_Volatility volatility() const;
  void set_volatility(::zetasql::FunctionEnums_Volatility value);
  private:
  ::zetasql::FunctionEnums_Volatility _internal_volatility() const;
  void _internal_set_volatility(::zetasql::FunctionEnums_Volatility value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.TableValuedFunctionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_path_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> argument_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_context_;
    ::zetasql::FunctionSignatureProto* signature_;
    ::zetasql::ParseResumeLocationProto* parse_resume_location_;
    ::zetasql::TableValuedFunctionOptionsProto* options_;
    ::zetasql::SimpleAnonymizationInfoProto* anonymization_info_;
    int type_;
    int volatility_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class TVFArgumentProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TVFArgumentProto) */ {
 public:
  inline TVFArgumentProto() : TVFArgumentProto(nullptr) {}
  ~TVFArgumentProto() override;
  explicit PROTOBUF_CONSTEXPR TVFArgumentProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TVFArgumentProto(const TVFArgumentProto& from);
  TVFArgumentProto(TVFArgumentProto&& from) noexcept
    : TVFArgumentProto() {
    *this = ::std::move(from);
  }

  inline TVFArgumentProto& operator=(const TVFArgumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVFArgumentProto& operator=(TVFArgumentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TVFArgumentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TVFArgumentProto* internal_default_instance() {
    return reinterpret_cast<const TVFArgumentProto*>(
               &_TVFArgumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TVFArgumentProto& a, TVFArgumentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TVFArgumentProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TVFArgumentProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TVFArgumentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TVFArgumentProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TVFArgumentProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TVFArgumentProto& from) {
    TVFArgumentProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TVFArgumentProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TVFArgumentProto";
  }
  protected:
  explicit TVFArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarArgumentFieldNumber = 1,
    kRelationArgumentFieldNumber = 2,
    kModelArgumentFieldNumber = 3,
    kConnectionArgumentFieldNumber = 4,
    kDescriptorArgumentFieldNumber = 5,
  };
  // optional .zetasql.ValueWithTypeProto scalar_argument = 1;
  bool has_scalar_argument() const;
  private:
  bool _internal_has_scalar_argument() const;
  public:
  void clear_scalar_argument();
  const ::zetasql::ValueWithTypeProto& scalar_argument() const;
  PROTOBUF_NODISCARD ::zetasql::ValueWithTypeProto* release_scalar_argument();
  ::zetasql::ValueWithTypeProto* mutable_scalar_argument();
  void set_allocated_scalar_argument(::zetasql::ValueWithTypeProto* scalar_argument);
  private:
  const ::zetasql::ValueWithTypeProto& _internal_scalar_argument() const;
  ::zetasql::ValueWithTypeProto* _internal_mutable_scalar_argument();
  public:
  void unsafe_arena_set_allocated_scalar_argument(
      ::zetasql::ValueWithTypeProto* scalar_argument);
  ::zetasql::ValueWithTypeProto* unsafe_arena_release_scalar_argument();

  // optional .zetasql.TVFRelationProto relation_argument = 2;
  bool has_relation_argument() const;
  private:
  bool _internal_has_relation_argument() const;
  public:
  void clear_relation_argument();
  const ::zetasql::TVFRelationProto& relation_argument() const;
  PROTOBUF_NODISCARD ::zetasql::TVFRelationProto* release_relation_argument();
  ::zetasql::TVFRelationProto* mutable_relation_argument();
  void set_allocated_relation_argument(::zetasql::TVFRelationProto* relation_argument);
  private:
  const ::zetasql::TVFRelationProto& _internal_relation_argument() const;
  ::zetasql::TVFRelationProto* _internal_mutable_relation_argument();
  public:
  void unsafe_arena_set_allocated_relation_argument(
      ::zetasql::TVFRelationProto* relation_argument);
  ::zetasql::TVFRelationProto* unsafe_arena_release_relation_argument();

  // optional .zetasql.TVFModelProto model_argument = 3;
  bool has_model_argument() const;
  private:
  bool _internal_has_model_argument() const;
  public:
  void clear_model_argument();
  const ::zetasql::TVFModelProto& model_argument() const;
  PROTOBUF_NODISCARD ::zetasql::TVFModelProto* release_model_argument();
  ::zetasql::TVFModelProto* mutable_model_argument();
  void set_allocated_model_argument(::zetasql::TVFModelProto* model_argument);
  private:
  const ::zetasql::TVFModelProto& _internal_model_argument() const;
  ::zetasql::TVFModelProto* _internal_mutable_model_argument();
  public:
  void unsafe_arena_set_allocated_model_argument(
      ::zetasql::TVFModelProto* model_argument);
  ::zetasql::TVFModelProto* unsafe_arena_release_model_argument();

  // optional .zetasql.TVFConnectionProto connection_argument = 4;
  bool has_connection_argument() const;
  private:
  bool _internal_has_connection_argument() const;
  public:
  void clear_connection_argument();
  const ::zetasql::TVFConnectionProto& connection_argument() const;
  PROTOBUF_NODISCARD ::zetasql::TVFConnectionProto* release_connection_argument();
  ::zetasql::TVFConnectionProto* mutable_connection_argument();
  void set_allocated_connection_argument(::zetasql::TVFConnectionProto* connection_argument);
  private:
  const ::zetasql::TVFConnectionProto& _internal_connection_argument() const;
  ::zetasql::TVFConnectionProto* _internal_mutable_connection_argument();
  public:
  void unsafe_arena_set_allocated_connection_argument(
      ::zetasql::TVFConnectionProto* connection_argument);
  ::zetasql::TVFConnectionProto* unsafe_arena_release_connection_argument();

  // optional .zetasql.TVFDescriptorProto descriptor_argument = 5;
  bool has_descriptor_argument() const;
  private:
  bool _internal_has_descriptor_argument() const;
  public:
  void clear_descriptor_argument();
  const ::zetasql::TVFDescriptorProto& descriptor_argument() const;
  PROTOBUF_NODISCARD ::zetasql::TVFDescriptorProto* release_descriptor_argument();
  ::zetasql::TVFDescriptorProto* mutable_descriptor_argument();
  void set_allocated_descriptor_argument(::zetasql::TVFDescriptorProto* descriptor_argument);
  private:
  const ::zetasql::TVFDescriptorProto& _internal_descriptor_argument() const;
  ::zetasql::TVFDescriptorProto* _internal_mutable_descriptor_argument();
  public:
  void unsafe_arena_set_allocated_descriptor_argument(
      ::zetasql::TVFDescriptorProto* descriptor_argument);
  ::zetasql::TVFDescriptorProto* unsafe_arena_release_descriptor_argument();

  // @@protoc_insertion_point(class_scope:zetasql.TVFArgumentProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::zetasql::ValueWithTypeProto* scalar_argument_;
    ::zetasql::TVFRelationProto* relation_argument_;
    ::zetasql::TVFModelProto* model_argument_;
    ::zetasql::TVFConnectionProto* connection_argument_;
    ::zetasql::TVFDescriptorProto* descriptor_argument_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class TVFSignatureOptionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TVFSignatureOptionsProto) */ {
 public:
  inline TVFSignatureOptionsProto() : TVFSignatureOptionsProto(nullptr) {}
  ~TVFSignatureOptionsProto() override;
  explicit PROTOBUF_CONSTEXPR TVFSignatureOptionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TVFSignatureOptionsProto(const TVFSignatureOptionsProto& from);
  TVFSignatureOptionsProto(TVFSignatureOptionsProto&& from) noexcept
    : TVFSignatureOptionsProto() {
    *this = ::std::move(from);
  }

  inline TVFSignatureOptionsProto& operator=(const TVFSignatureOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVFSignatureOptionsProto& operator=(TVFSignatureOptionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TVFSignatureOptionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TVFSignatureOptionsProto* internal_default_instance() {
    return reinterpret_cast<const TVFSignatureOptionsProto*>(
               &_TVFSignatureOptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TVFSignatureOptionsProto& a, TVFSignatureOptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TVFSignatureOptionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TVFSignatureOptionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TVFSignatureOptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TVFSignatureOptionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TVFSignatureOptionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TVFSignatureOptionsProto& from) {
    TVFSignatureOptionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TVFSignatureOptionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TVFSignatureOptionsProto";
  }
  protected:
  explicit TVFSignatureOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalDeprecationWarningFieldNumber = 1,
  };
  // repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 1;
  int additional_deprecation_warning_size() const;
  private:
  int _internal_additional_deprecation_warning_size() const;
  public:
  void clear_additional_deprecation_warning();
  ::zetasql::FreestandingDeprecationWarning* mutable_additional_deprecation_warning(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning >*
      mutable_additional_deprecation_warning();
  private:
  const ::zetasql::FreestandingDeprecationWarning& _internal_additional_deprecation_warning(int index) const;
  ::zetasql::FreestandingDeprecationWarning* _internal_add_additional_deprecation_warning();
  public:
  const ::zetasql::FreestandingDeprecationWarning& additional_deprecation_warning(int index) const;
  ::zetasql::FreestandingDeprecationWarning* add_additional_deprecation_warning();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning >&
      additional_deprecation_warning() const;

  // @@protoc_insertion_point(class_scope:zetasql.TVFSignatureOptionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning > additional_deprecation_warning_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class TVFSignatureProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TVFSignatureProto) */ {
 public:
  inline TVFSignatureProto() : TVFSignatureProto(nullptr) {}
  ~TVFSignatureProto() override;
  explicit PROTOBUF_CONSTEXPR TVFSignatureProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TVFSignatureProto(const TVFSignatureProto& from);
  TVFSignatureProto(TVFSignatureProto&& from) noexcept
    : TVFSignatureProto() {
    *this = ::std::move(from);
  }

  inline TVFSignatureProto& operator=(const TVFSignatureProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVFSignatureProto& operator=(TVFSignatureProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TVFSignatureProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TVFSignatureProto* internal_default_instance() {
    return reinterpret_cast<const TVFSignatureProto*>(
               &_TVFSignatureProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TVFSignatureProto& a, TVFSignatureProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TVFSignatureProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TVFSignatureProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TVFSignatureProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TVFSignatureProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TVFSignatureProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TVFSignatureProto& from) {
    TVFSignatureProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TVFSignatureProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TVFSignatureProto";
  }
  protected:
  explicit TVFSignatureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentFieldNumber = 1,
    kOutputSchemaFieldNumber = 2,
    kOptionsFieldNumber = 3,
  };
  // repeated .zetasql.TVFArgumentProto argument = 1;
  int argument_size() const;
  private:
  int _internal_argument_size() const;
  public:
  void clear_argument();
  ::zetasql::TVFArgumentProto* mutable_argument(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFArgumentProto >*
      mutable_argument();
  private:
  const ::zetasql::TVFArgumentProto& _internal_argument(int index) const;
  ::zetasql::TVFArgumentProto* _internal_add_argument();
  public:
  const ::zetasql::TVFArgumentProto& argument(int index) const;
  ::zetasql::TVFArgumentProto* add_argument();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFArgumentProto >&
      argument() const;

  // optional .zetasql.TVFRelationProto output_schema = 2;
  bool has_output_schema() const;
  private:
  bool _internal_has_output_schema() const;
  public:
  void clear_output_schema();
  const ::zetasql::TVFRelationProto& output_schema() const;
  PROTOBUF_NODISCARD ::zetasql::TVFRelationProto* release_output_schema();
  ::zetasql::TVFRelationProto* mutable_output_schema();
  void set_allocated_output_schema(::zetasql::TVFRelationProto* output_schema);
  private:
  const ::zetasql::TVFRelationProto& _internal_output_schema() const;
  ::zetasql::TVFRelationProto* _internal_mutable_output_schema();
  public:
  void unsafe_arena_set_allocated_output_schema(
      ::zetasql::TVFRelationProto* output_schema);
  ::zetasql::TVFRelationProto* unsafe_arena_release_output_schema();

  // optional .zetasql.TVFSignatureOptionsProto options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::zetasql::TVFSignatureOptionsProto& options() const;
  PROTOBUF_NODISCARD ::zetasql::TVFSignatureOptionsProto* release_options();
  ::zetasql::TVFSignatureOptionsProto* mutable_options();
  void set_allocated_options(::zetasql::TVFSignatureOptionsProto* options);
  private:
  const ::zetasql::TVFSignatureOptionsProto& _internal_options() const;
  ::zetasql::TVFSignatureOptionsProto* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::zetasql::TVFSignatureOptionsProto* options);
  ::zetasql::TVFSignatureOptionsProto* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:zetasql.TVFSignatureProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFArgumentProto > argument_;
    ::zetasql::TVFRelationProto* output_schema_;
    ::zetasql::TVFSignatureOptionsProto* options_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// -------------------------------------------------------------------

class ProcedureProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ProcedureProto) */ {
 public:
  inline ProcedureProto() : ProcedureProto(nullptr) {}
  ~ProcedureProto() override;
  explicit PROTOBUF_CONSTEXPR ProcedureProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcedureProto(const ProcedureProto& from);
  ProcedureProto(ProcedureProto&& from) noexcept
    : ProcedureProto() {
    *this = ::std::move(from);
  }

  inline ProcedureProto& operator=(const ProcedureProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcedureProto& operator=(ProcedureProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcedureProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcedureProto* internal_default_instance() {
    return reinterpret_cast<const ProcedureProto*>(
               &_ProcedureProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ProcedureProto& a, ProcedureProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcedureProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcedureProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcedureProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcedureProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcedureProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcedureProto& from) {
    ProcedureProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ProcedureProto";
  }
  protected:
  explicit ProcedureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamePathFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // repeated string name_path = 1;
  int name_path_size() const;
  private:
  int _internal_name_path_size() const;
  public:
  void clear_name_path();
  const std::string& name_path(int index) const;
  std::string* mutable_name_path(int index);
  void set_name_path(int index, const std::string& value);
  void set_name_path(int index, std::string&& value);
  void set_name_path(int index, const char* value);
  void set_name_path(int index, const char* value, size_t size);
  std::string* add_name_path();
  void add_name_path(const std::string& value);
  void add_name_path(std::string&& value);
  void add_name_path(const char* value);
  void add_name_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_path();
  private:
  const std::string& _internal_name_path(int index) const;
  std::string* _internal_add_name_path();
  public:

  // optional .zetasql.FunctionSignatureProto signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::zetasql::FunctionSignatureProto& signature() const;
  PROTOBUF_NODISCARD ::zetasql::FunctionSignatureProto* release_signature();
  ::zetasql::FunctionSignatureProto* mutable_signature();
  void set_allocated_signature(::zetasql::FunctionSignatureProto* signature);
  private:
  const ::zetasql::FunctionSignatureProto& _internal_signature() const;
  ::zetasql::FunctionSignatureProto* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::zetasql::FunctionSignatureProto* signature);
  ::zetasql::FunctionSignatureProto* unsafe_arena_release_signature();

  // @@protoc_insertion_point(class_scope:zetasql.ProcedureProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_path_;
    ::zetasql::FunctionSignatureProto* signature_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2ffunction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TVFRelationColumnProto

// optional string name = 1;
inline bool TVFRelationColumnProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TVFRelationColumnProto::has_name() const {
  return _internal_has_name();
}
inline void TVFRelationColumnProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TVFRelationColumnProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFRelationColumnProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TVFRelationColumnProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.TVFRelationColumnProto.name)
}
inline std::string* TVFRelationColumnProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFRelationColumnProto.name)
  return _s;
}
inline const std::string& TVFRelationColumnProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TVFRelationColumnProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TVFRelationColumnProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TVFRelationColumnProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.TVFRelationColumnProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TVFRelationColumnProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFRelationColumnProto.name)
}

// optional .zetasql.TypeProto type = 2;
inline bool TVFRelationColumnProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool TVFRelationColumnProto::has_type() const {
  return _internal_has_type();
}
inline const ::zetasql::TypeProto& TVFRelationColumnProto::_internal_type() const {
  const ::zetasql::TypeProto* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& TVFRelationColumnProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFRelationColumnProto.type)
  return _internal_type();
}
inline void TVFRelationColumnProto::unsafe_arena_set_allocated_type(
    ::zetasql::TypeProto* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFRelationColumnProto.type)
}
inline ::zetasql::TypeProto* TVFRelationColumnProto::release_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* TVFRelationColumnProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zetasql.TVFRelationColumnProto.type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* TVFRelationColumnProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::zetasql::TypeProto* TVFRelationColumnProto::mutable_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFRelationColumnProto.type)
  return _msg;
}
inline void TVFRelationColumnProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFRelationColumnProto.type)
}

// optional bool is_pseudo_column = 3;
inline bool TVFRelationColumnProto::_internal_has_is_pseudo_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TVFRelationColumnProto::has_is_pseudo_column() const {
  return _internal_has_is_pseudo_column();
}
inline void TVFRelationColumnProto::clear_is_pseudo_column() {
  _impl_.is_pseudo_column_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool TVFRelationColumnProto::_internal_is_pseudo_column() const {
  return _impl_.is_pseudo_column_;
}
inline bool TVFRelationColumnProto::is_pseudo_column() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFRelationColumnProto.is_pseudo_column)
  return _internal_is_pseudo_column();
}
inline void TVFRelationColumnProto::_internal_set_is_pseudo_column(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_pseudo_column_ = value;
}
inline void TVFRelationColumnProto::set_is_pseudo_column(bool value) {
  _internal_set_is_pseudo_column(value);
  // @@protoc_insertion_point(field_set:zetasql.TVFRelationColumnProto.is_pseudo_column)
}

// optional .zetasql.ParseLocationRangeProto name_parse_location_range = 4;
inline bool TVFRelationColumnProto::_internal_has_name_parse_location_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.name_parse_location_range_ != nullptr);
  return value;
}
inline bool TVFRelationColumnProto::has_name_parse_location_range() const {
  return _internal_has_name_parse_location_range();
}
inline const ::zetasql::ParseLocationRangeProto& TVFRelationColumnProto::_internal_name_parse_location_range() const {
  const ::zetasql::ParseLocationRangeProto* p = _impl_.name_parse_location_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ParseLocationRangeProto&>(
      ::zetasql::_ParseLocationRangeProto_default_instance_);
}
inline const ::zetasql::ParseLocationRangeProto& TVFRelationColumnProto::name_parse_location_range() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFRelationColumnProto.name_parse_location_range)
  return _internal_name_parse_location_range();
}
inline void TVFRelationColumnProto::unsafe_arena_set_allocated_name_parse_location_range(
    ::zetasql::ParseLocationRangeProto* name_parse_location_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_parse_location_range_);
  }
  _impl_.name_parse_location_range_ = name_parse_location_range;
  if (name_parse_location_range) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFRelationColumnProto.name_parse_location_range)
}
inline ::zetasql::ParseLocationRangeProto* TVFRelationColumnProto::release_name_parse_location_range() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ParseLocationRangeProto* temp = _impl_.name_parse_location_range_;
  _impl_.name_parse_location_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ParseLocationRangeProto* TVFRelationColumnProto::unsafe_arena_release_name_parse_location_range() {
  // @@protoc_insertion_point(field_release:zetasql.TVFRelationColumnProto.name_parse_location_range)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ParseLocationRangeProto* temp = _impl_.name_parse_location_range_;
  _impl_.name_parse_location_range_ = nullptr;
  return temp;
}
inline ::zetasql::ParseLocationRangeProto* TVFRelationColumnProto::_internal_mutable_name_parse_location_range() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.name_parse_location_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ParseLocationRangeProto>(GetArenaForAllocation());
    _impl_.name_parse_location_range_ = p;
  }
  return _impl_.name_parse_location_range_;
}
inline ::zetasql::ParseLocationRangeProto* TVFRelationColumnProto::mutable_name_parse_location_range() {
  ::zetasql::ParseLocationRangeProto* _msg = _internal_mutable_name_parse_location_range();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFRelationColumnProto.name_parse_location_range)
  return _msg;
}
inline void TVFRelationColumnProto::set_allocated_name_parse_location_range(::zetasql::ParseLocationRangeProto* name_parse_location_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_parse_location_range_);
  }
  if (name_parse_location_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_parse_location_range));
    if (message_arena != submessage_arena) {
      name_parse_location_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_parse_location_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.name_parse_location_range_ = name_parse_location_range;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFRelationColumnProto.name_parse_location_range)
}

// optional .zetasql.ParseLocationRangeProto type_parse_location_range = 5;
inline bool TVFRelationColumnProto::_internal_has_type_parse_location_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_parse_location_range_ != nullptr);
  return value;
}
inline bool TVFRelationColumnProto::has_type_parse_location_range() const {
  return _internal_has_type_parse_location_range();
}
inline const ::zetasql::ParseLocationRangeProto& TVFRelationColumnProto::_internal_type_parse_location_range() const {
  const ::zetasql::ParseLocationRangeProto* p = _impl_.type_parse_location_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ParseLocationRangeProto&>(
      ::zetasql::_ParseLocationRangeProto_default_instance_);
}
inline const ::zetasql::ParseLocationRangeProto& TVFRelationColumnProto::type_parse_location_range() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFRelationColumnProto.type_parse_location_range)
  return _internal_type_parse_location_range();
}
inline void TVFRelationColumnProto::unsafe_arena_set_allocated_type_parse_location_range(
    ::zetasql::ParseLocationRangeProto* type_parse_location_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_parse_location_range_);
  }
  _impl_.type_parse_location_range_ = type_parse_location_range;
  if (type_parse_location_range) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFRelationColumnProto.type_parse_location_range)
}
inline ::zetasql::ParseLocationRangeProto* TVFRelationColumnProto::release_type_parse_location_range() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::ParseLocationRangeProto* temp = _impl_.type_parse_location_range_;
  _impl_.type_parse_location_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ParseLocationRangeProto* TVFRelationColumnProto::unsafe_arena_release_type_parse_location_range() {
  // @@protoc_insertion_point(field_release:zetasql.TVFRelationColumnProto.type_parse_location_range)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::ParseLocationRangeProto* temp = _impl_.type_parse_location_range_;
  _impl_.type_parse_location_range_ = nullptr;
  return temp;
}
inline ::zetasql::ParseLocationRangeProto* TVFRelationColumnProto::_internal_mutable_type_parse_location_range() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.type_parse_location_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ParseLocationRangeProto>(GetArenaForAllocation());
    _impl_.type_parse_location_range_ = p;
  }
  return _impl_.type_parse_location_range_;
}
inline ::zetasql::ParseLocationRangeProto* TVFRelationColumnProto::mutable_type_parse_location_range() {
  ::zetasql::ParseLocationRangeProto* _msg = _internal_mutable_type_parse_location_range();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFRelationColumnProto.type_parse_location_range)
  return _msg;
}
inline void TVFRelationColumnProto::set_allocated_type_parse_location_range(::zetasql::ParseLocationRangeProto* type_parse_location_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_parse_location_range_);
  }
  if (type_parse_location_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_parse_location_range));
    if (message_arena != submessage_arena) {
      type_parse_location_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_parse_location_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.type_parse_location_range_ = type_parse_location_range;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFRelationColumnProto.type_parse_location_range)
}

// -------------------------------------------------------------------

// TVFRelationProto

// repeated .zetasql.TVFRelationColumnProto column = 1;
inline int TVFRelationProto::_internal_column_size() const {
  return _impl_.column_.size();
}
inline int TVFRelationProto::column_size() const {
  return _internal_column_size();
}
inline void TVFRelationProto::clear_column() {
  _impl_.column_.Clear();
}
inline ::zetasql::TVFRelationColumnProto* TVFRelationProto::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.TVFRelationProto.column)
  return _impl_.column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFRelationColumnProto >*
TVFRelationProto::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.TVFRelationProto.column)
  return &_impl_.column_;
}
inline const ::zetasql::TVFRelationColumnProto& TVFRelationProto::_internal_column(int index) const {
  return _impl_.column_.Get(index);
}
inline const ::zetasql::TVFRelationColumnProto& TVFRelationProto::column(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.TVFRelationProto.column)
  return _internal_column(index);
}
inline ::zetasql::TVFRelationColumnProto* TVFRelationProto::_internal_add_column() {
  return _impl_.column_.Add();
}
inline ::zetasql::TVFRelationColumnProto* TVFRelationProto::add_column() {
  ::zetasql::TVFRelationColumnProto* _add = _internal_add_column();
  // @@protoc_insertion_point(field_add:zetasql.TVFRelationProto.column)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFRelationColumnProto >&
TVFRelationProto::column() const {
  // @@protoc_insertion_point(field_list:zetasql.TVFRelationProto.column)
  return _impl_.column_;
}

// optional bool is_value_table = 2 [default = false];
inline bool TVFRelationProto::_internal_has_is_value_table() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TVFRelationProto::has_is_value_table() const {
  return _internal_has_is_value_table();
}
inline void TVFRelationProto::clear_is_value_table() {
  _impl_.is_value_table_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool TVFRelationProto::_internal_is_value_table() const {
  return _impl_.is_value_table_;
}
inline bool TVFRelationProto::is_value_table() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFRelationProto.is_value_table)
  return _internal_is_value_table();
}
inline void TVFRelationProto::_internal_set_is_value_table(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_value_table_ = value;
}
inline void TVFRelationProto::set_is_value_table(bool value) {
  _internal_set_is_value_table(value);
  // @@protoc_insertion_point(field_set:zetasql.TVFRelationProto.is_value_table)
}

// -------------------------------------------------------------------

// TVFModelProto

// optional string name = 1;
inline bool TVFModelProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TVFModelProto::has_name() const {
  return _internal_has_name();
}
inline void TVFModelProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TVFModelProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFModelProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TVFModelProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.TVFModelProto.name)
}
inline std::string* TVFModelProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFModelProto.name)
  return _s;
}
inline const std::string& TVFModelProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TVFModelProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TVFModelProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TVFModelProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.TVFModelProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TVFModelProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFModelProto.name)
}

// optional string full_name = 2;
inline bool TVFModelProto::_internal_has_full_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TVFModelProto::has_full_name() const {
  return _internal_has_full_name();
}
inline void TVFModelProto::clear_full_name() {
  _impl_.full_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TVFModelProto::full_name() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFModelProto.full_name)
  return _internal_full_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TVFModelProto::set_full_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.full_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.TVFModelProto.full_name)
}
inline std::string* TVFModelProto::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFModelProto.full_name)
  return _s;
}
inline const std::string& TVFModelProto::_internal_full_name() const {
  return _impl_.full_name_.Get();
}
inline void TVFModelProto::_internal_set_full_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TVFModelProto::_internal_mutable_full_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.full_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TVFModelProto::release_full_name() {
  // @@protoc_insertion_point(field_release:zetasql.TVFModelProto.full_name)
  if (!_internal_has_full_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.full_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TVFModelProto::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.full_name_.SetAllocated(full_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFModelProto.full_name)
}

// -------------------------------------------------------------------

// TVFConnectionProto

// optional string name = 1;
inline bool TVFConnectionProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TVFConnectionProto::has_name() const {
  return _internal_has_name();
}
inline void TVFConnectionProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TVFConnectionProto::name() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFConnectionProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TVFConnectionProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.TVFConnectionProto.name)
}
inline std::string* TVFConnectionProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFConnectionProto.name)
  return _s;
}
inline const std::string& TVFConnectionProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TVFConnectionProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TVFConnectionProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TVFConnectionProto::release_name() {
  // @@protoc_insertion_point(field_release:zetasql.TVFConnectionProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TVFConnectionProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFConnectionProto.name)
}

// optional string full_name = 2;
inline bool TVFConnectionProto::_internal_has_full_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TVFConnectionProto::has_full_name() const {
  return _internal_has_full_name();
}
inline void TVFConnectionProto::clear_full_name() {
  _impl_.full_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TVFConnectionProto::full_name() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFConnectionProto.full_name)
  return _internal_full_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TVFConnectionProto::set_full_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.full_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.TVFConnectionProto.full_name)
}
inline std::string* TVFConnectionProto::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFConnectionProto.full_name)
  return _s;
}
inline const std::string& TVFConnectionProto::_internal_full_name() const {
  return _impl_.full_name_.Get();
}
inline void TVFConnectionProto::_internal_set_full_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TVFConnectionProto::_internal_mutable_full_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.full_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TVFConnectionProto::release_full_name() {
  // @@protoc_insertion_point(field_release:zetasql.TVFConnectionProto.full_name)
  if (!_internal_has_full_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.full_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TVFConnectionProto::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.full_name_.SetAllocated(full_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFConnectionProto.full_name)
}

// -------------------------------------------------------------------

// TVFDescriptorProto

// repeated string column_name = 1;
inline int TVFDescriptorProto::_internal_column_name_size() const {
  return _impl_.column_name_.size();
}
inline int TVFDescriptorProto::column_name_size() const {
  return _internal_column_name_size();
}
inline void TVFDescriptorProto::clear_column_name() {
  _impl_.column_name_.Clear();
}
inline std::string* TVFDescriptorProto::add_column_name() {
  std::string* _s = _internal_add_column_name();
  // @@protoc_insertion_point(field_add_mutable:zetasql.TVFDescriptorProto.column_name)
  return _s;
}
inline const std::string& TVFDescriptorProto::_internal_column_name(int index) const {
  return _impl_.column_name_.Get(index);
}
inline const std::string& TVFDescriptorProto::column_name(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.TVFDescriptorProto.column_name)
  return _internal_column_name(index);
}
inline std::string* TVFDescriptorProto::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.TVFDescriptorProto.column_name)
  return _impl_.column_name_.Mutable(index);
}
inline void TVFDescriptorProto::set_column_name(int index, const std::string& value) {
  _impl_.column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.TVFDescriptorProto.column_name)
}
inline void TVFDescriptorProto::set_column_name(int index, std::string&& value) {
  _impl_.column_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.TVFDescriptorProto.column_name)
}
inline void TVFDescriptorProto::set_column_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.TVFDescriptorProto.column_name)
}
inline void TVFDescriptorProto::set_column_name(int index, const char* value, size_t size) {
  _impl_.column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.TVFDescriptorProto.column_name)
}
inline std::string* TVFDescriptorProto::_internal_add_column_name() {
  return _impl_.column_name_.Add();
}
inline void TVFDescriptorProto::add_column_name(const std::string& value) {
  _impl_.column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.TVFDescriptorProto.column_name)
}
inline void TVFDescriptorProto::add_column_name(std::string&& value) {
  _impl_.column_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.TVFDescriptorProto.column_name)
}
inline void TVFDescriptorProto::add_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.TVFDescriptorProto.column_name)
}
inline void TVFDescriptorProto::add_column_name(const char* value, size_t size) {
  _impl_.column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.TVFDescriptorProto.column_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TVFDescriptorProto::column_name() const {
  // @@protoc_insertion_point(field_list:zetasql.TVFDescriptorProto.column_name)
  return _impl_.column_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TVFDescriptorProto::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.TVFDescriptorProto.column_name)
  return &_impl_.column_name_;
}

// -------------------------------------------------------------------

// FunctionArgumentTypeOptionsProto

// optional .zetasql.FunctionEnums.ArgumentCardinality cardinality = 1;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_cardinality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_cardinality() const {
  return _internal_has_cardinality();
}
inline void FunctionArgumentTypeOptionsProto::clear_cardinality() {
  _impl_.cardinality_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::zetasql::FunctionEnums_ArgumentCardinality FunctionArgumentTypeOptionsProto::_internal_cardinality() const {
  return static_cast< ::zetasql::FunctionEnums_ArgumentCardinality >(_impl_.cardinality_);
}
inline ::zetasql::FunctionEnums_ArgumentCardinality FunctionArgumentTypeOptionsProto::cardinality() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.cardinality)
  return _internal_cardinality();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_cardinality(::zetasql::FunctionEnums_ArgumentCardinality value) {
  assert(::zetasql::FunctionEnums_ArgumentCardinality_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.cardinality_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_cardinality(::zetasql::FunctionEnums_ArgumentCardinality value) {
  _internal_set_cardinality(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.cardinality)
}

// optional bool must_be_constant = 2;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_must_be_constant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_must_be_constant() const {
  return _internal_has_must_be_constant();
}
inline void FunctionArgumentTypeOptionsProto::clear_must_be_constant() {
  _impl_.must_be_constant_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool FunctionArgumentTypeOptionsProto::_internal_must_be_constant() const {
  return _impl_.must_be_constant_;
}
inline bool FunctionArgumentTypeOptionsProto::must_be_constant() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.must_be_constant)
  return _internal_must_be_constant();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_must_be_constant(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.must_be_constant_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_must_be_constant(bool value) {
  _internal_set_must_be_constant(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.must_be_constant)
}

// optional bool must_be_non_null = 3;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_must_be_non_null() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_must_be_non_null() const {
  return _internal_has_must_be_non_null();
}
inline void FunctionArgumentTypeOptionsProto::clear_must_be_non_null() {
  _impl_.must_be_non_null_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FunctionArgumentTypeOptionsProto::_internal_must_be_non_null() const {
  return _impl_.must_be_non_null_;
}
inline bool FunctionArgumentTypeOptionsProto::must_be_non_null() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.must_be_non_null)
  return _internal_must_be_non_null();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_must_be_non_null(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.must_be_non_null_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_must_be_non_null(bool value) {
  _internal_set_must_be_non_null(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.must_be_non_null)
}

// optional bool is_not_aggregate = 4;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_is_not_aggregate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_is_not_aggregate() const {
  return _internal_has_is_not_aggregate();
}
inline void FunctionArgumentTypeOptionsProto::clear_is_not_aggregate() {
  _impl_.is_not_aggregate_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool FunctionArgumentTypeOptionsProto::_internal_is_not_aggregate() const {
  return _impl_.is_not_aggregate_;
}
inline bool FunctionArgumentTypeOptionsProto::is_not_aggregate() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.is_not_aggregate)
  return _internal_is_not_aggregate();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_is_not_aggregate(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.is_not_aggregate_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_is_not_aggregate(bool value) {
  _internal_set_is_not_aggregate(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.is_not_aggregate)
}

// optional bool must_support_equality = 5;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_must_support_equality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_must_support_equality() const {
  return _internal_has_must_support_equality();
}
inline void FunctionArgumentTypeOptionsProto::clear_must_support_equality() {
  _impl_.must_support_equality_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool FunctionArgumentTypeOptionsProto::_internal_must_support_equality() const {
  return _impl_.must_support_equality_;
}
inline bool FunctionArgumentTypeOptionsProto::must_support_equality() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.must_support_equality)
  return _internal_must_support_equality();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_must_support_equality(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.must_support_equality_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_must_support_equality(bool value) {
  _internal_set_must_support_equality(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.must_support_equality)
}

// optional bool must_support_ordering = 6;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_must_support_ordering() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_must_support_ordering() const {
  return _internal_has_must_support_ordering();
}
inline void FunctionArgumentTypeOptionsProto::clear_must_support_ordering() {
  _impl_.must_support_ordering_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool FunctionArgumentTypeOptionsProto::_internal_must_support_ordering() const {
  return _impl_.must_support_ordering_;
}
inline bool FunctionArgumentTypeOptionsProto::must_support_ordering() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.must_support_ordering)
  return _internal_must_support_ordering();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_must_support_ordering(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.must_support_ordering_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_must_support_ordering(bool value) {
  _internal_set_must_support_ordering(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.must_support_ordering)
}

// optional int64 min_value = 7;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_min_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_min_value() const {
  return _internal_has_min_value();
}
inline void FunctionArgumentTypeOptionsProto::clear_min_value() {
  _impl_.min_value_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int64_t FunctionArgumentTypeOptionsProto::_internal_min_value() const {
  return _impl_.min_value_;
}
inline int64_t FunctionArgumentTypeOptionsProto::min_value() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.min_value)
  return _internal_min_value();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_min_value(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.min_value_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_min_value(int64_t value) {
  _internal_set_min_value(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.min_value)
}

// optional int64 max_value = 8;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_max_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_max_value() const {
  return _internal_has_max_value();
}
inline void FunctionArgumentTypeOptionsProto::clear_max_value() {
  _impl_.max_value_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int64_t FunctionArgumentTypeOptionsProto::_internal_max_value() const {
  return _impl_.max_value_;
}
inline int64_t FunctionArgumentTypeOptionsProto::max_value() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.max_value)
  return _internal_max_value();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_max_value(int64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.max_value_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_max_value(int64_t value) {
  _internal_set_max_value(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.max_value)
}

// optional bool extra_relation_input_columns_allowed = 9;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_extra_relation_input_columns_allowed() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_extra_relation_input_columns_allowed() const {
  return _internal_has_extra_relation_input_columns_allowed();
}
inline void FunctionArgumentTypeOptionsProto::clear_extra_relation_input_columns_allowed() {
  _impl_.extra_relation_input_columns_allowed_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool FunctionArgumentTypeOptionsProto::_internal_extra_relation_input_columns_allowed() const {
  return _impl_.extra_relation_input_columns_allowed_;
}
inline bool FunctionArgumentTypeOptionsProto::extra_relation_input_columns_allowed() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.extra_relation_input_columns_allowed)
  return _internal_extra_relation_input_columns_allowed();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_extra_relation_input_columns_allowed(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.extra_relation_input_columns_allowed_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_extra_relation_input_columns_allowed(bool value) {
  _internal_set_extra_relation_input_columns_allowed(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.extra_relation_input_columns_allowed)
}

// optional .zetasql.TVFRelationProto relation_input_schema = 10;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_relation_input_schema() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relation_input_schema_ != nullptr);
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_relation_input_schema() const {
  return _internal_has_relation_input_schema();
}
inline void FunctionArgumentTypeOptionsProto::clear_relation_input_schema() {
  if (_impl_.relation_input_schema_ != nullptr) _impl_.relation_input_schema_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TVFRelationProto& FunctionArgumentTypeOptionsProto::_internal_relation_input_schema() const {
  const ::zetasql::TVFRelationProto* p = _impl_.relation_input_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TVFRelationProto&>(
      ::zetasql::_TVFRelationProto_default_instance_);
}
inline const ::zetasql::TVFRelationProto& FunctionArgumentTypeOptionsProto::relation_input_schema() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.relation_input_schema)
  return _internal_relation_input_schema();
}
inline void FunctionArgumentTypeOptionsProto::unsafe_arena_set_allocated_relation_input_schema(
    ::zetasql::TVFRelationProto* relation_input_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relation_input_schema_);
  }
  _impl_.relation_input_schema_ = relation_input_schema;
  if (relation_input_schema) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.relation_input_schema)
}
inline ::zetasql::TVFRelationProto* FunctionArgumentTypeOptionsProto::release_relation_input_schema() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TVFRelationProto* temp = _impl_.relation_input_schema_;
  _impl_.relation_input_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TVFRelationProto* FunctionArgumentTypeOptionsProto::unsafe_arena_release_relation_input_schema() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionArgumentTypeOptionsProto.relation_input_schema)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TVFRelationProto* temp = _impl_.relation_input_schema_;
  _impl_.relation_input_schema_ = nullptr;
  return temp;
}
inline ::zetasql::TVFRelationProto* FunctionArgumentTypeOptionsProto::_internal_mutable_relation_input_schema() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.relation_input_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TVFRelationProto>(GetArenaForAllocation());
    _impl_.relation_input_schema_ = p;
  }
  return _impl_.relation_input_schema_;
}
inline ::zetasql::TVFRelationProto* FunctionArgumentTypeOptionsProto::mutable_relation_input_schema() {
  ::zetasql::TVFRelationProto* _msg = _internal_mutable_relation_input_schema();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionArgumentTypeOptionsProto.relation_input_schema)
  return _msg;
}
inline void FunctionArgumentTypeOptionsProto::set_allocated_relation_input_schema(::zetasql::TVFRelationProto* relation_input_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relation_input_schema_;
  }
  if (relation_input_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relation_input_schema);
    if (message_arena != submessage_arena) {
      relation_input_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relation_input_schema, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.relation_input_schema_ = relation_input_schema;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.relation_input_schema)
}

// optional string argument_name = 11;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_argument_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_argument_name() const {
  return _internal_has_argument_name();
}
inline void FunctionArgumentTypeOptionsProto::clear_argument_name() {
  _impl_.argument_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionArgumentTypeOptionsProto::argument_name() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.argument_name)
  return _internal_argument_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionArgumentTypeOptionsProto::set_argument_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.argument_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.argument_name)
}
inline std::string* FunctionArgumentTypeOptionsProto::mutable_argument_name() {
  std::string* _s = _internal_mutable_argument_name();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionArgumentTypeOptionsProto.argument_name)
  return _s;
}
inline const std::string& FunctionArgumentTypeOptionsProto::_internal_argument_name() const {
  return _impl_.argument_name_.Get();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_argument_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.argument_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FunctionArgumentTypeOptionsProto::_internal_mutable_argument_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.argument_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FunctionArgumentTypeOptionsProto::release_argument_name() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionArgumentTypeOptionsProto.argument_name)
  if (!_internal_has_argument_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.argument_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.argument_name_.IsDefault()) {
    _impl_.argument_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionArgumentTypeOptionsProto::set_allocated_argument_name(std::string* argument_name) {
  if (argument_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.argument_name_.SetAllocated(argument_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.argument_name_.IsDefault()) {
    _impl_.argument_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.argument_name)
}

// optional .zetasql.ParseLocationRangeProto argument_name_parse_location = 12;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_argument_name_parse_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.argument_name_parse_location_ != nullptr);
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_argument_name_parse_location() const {
  return _internal_has_argument_name_parse_location();
}
inline const ::zetasql::ParseLocationRangeProto& FunctionArgumentTypeOptionsProto::_internal_argument_name_parse_location() const {
  const ::zetasql::ParseLocationRangeProto* p = _impl_.argument_name_parse_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ParseLocationRangeProto&>(
      ::zetasql::_ParseLocationRangeProto_default_instance_);
}
inline const ::zetasql::ParseLocationRangeProto& FunctionArgumentTypeOptionsProto::argument_name_parse_location() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.argument_name_parse_location)
  return _internal_argument_name_parse_location();
}
inline void FunctionArgumentTypeOptionsProto::unsafe_arena_set_allocated_argument_name_parse_location(
    ::zetasql::ParseLocationRangeProto* argument_name_parse_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.argument_name_parse_location_);
  }
  _impl_.argument_name_parse_location_ = argument_name_parse_location;
  if (argument_name_parse_location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.argument_name_parse_location)
}
inline ::zetasql::ParseLocationRangeProto* FunctionArgumentTypeOptionsProto::release_argument_name_parse_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ParseLocationRangeProto* temp = _impl_.argument_name_parse_location_;
  _impl_.argument_name_parse_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ParseLocationRangeProto* FunctionArgumentTypeOptionsProto::unsafe_arena_release_argument_name_parse_location() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionArgumentTypeOptionsProto.argument_name_parse_location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ParseLocationRangeProto* temp = _impl_.argument_name_parse_location_;
  _impl_.argument_name_parse_location_ = nullptr;
  return temp;
}
inline ::zetasql::ParseLocationRangeProto* FunctionArgumentTypeOptionsProto::_internal_mutable_argument_name_parse_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.argument_name_parse_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ParseLocationRangeProto>(GetArenaForAllocation());
    _impl_.argument_name_parse_location_ = p;
  }
  return _impl_.argument_name_parse_location_;
}
inline ::zetasql::ParseLocationRangeProto* FunctionArgumentTypeOptionsProto::mutable_argument_name_parse_location() {
  ::zetasql::ParseLocationRangeProto* _msg = _internal_mutable_argument_name_parse_location();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionArgumentTypeOptionsProto.argument_name_parse_location)
  return _msg;
}
inline void FunctionArgumentTypeOptionsProto::set_allocated_argument_name_parse_location(::zetasql::ParseLocationRangeProto* argument_name_parse_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.argument_name_parse_location_);
  }
  if (argument_name_parse_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(argument_name_parse_location));
    if (message_arena != submessage_arena) {
      argument_name_parse_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argument_name_parse_location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.argument_name_parse_location_ = argument_name_parse_location;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.argument_name_parse_location)
}

// optional .zetasql.ParseLocationRangeProto argument_type_parse_location = 13;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_argument_type_parse_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.argument_type_parse_location_ != nullptr);
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_argument_type_parse_location() const {
  return _internal_has_argument_type_parse_location();
}
inline const ::zetasql::ParseLocationRangeProto& FunctionArgumentTypeOptionsProto::_internal_argument_type_parse_location() const {
  const ::zetasql::ParseLocationRangeProto* p = _impl_.argument_type_parse_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ParseLocationRangeProto&>(
      ::zetasql::_ParseLocationRangeProto_default_instance_);
}
inline const ::zetasql::ParseLocationRangeProto& FunctionArgumentTypeOptionsProto::argument_type_parse_location() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.argument_type_parse_location)
  return _internal_argument_type_parse_location();
}
inline void FunctionArgumentTypeOptionsProto::unsafe_arena_set_allocated_argument_type_parse_location(
    ::zetasql::ParseLocationRangeProto* argument_type_parse_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.argument_type_parse_location_);
  }
  _impl_.argument_type_parse_location_ = argument_type_parse_location;
  if (argument_type_parse_location) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.argument_type_parse_location)
}
inline ::zetasql::ParseLocationRangeProto* FunctionArgumentTypeOptionsProto::release_argument_type_parse_location() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::ParseLocationRangeProto* temp = _impl_.argument_type_parse_location_;
  _impl_.argument_type_parse_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ParseLocationRangeProto* FunctionArgumentTypeOptionsProto::unsafe_arena_release_argument_type_parse_location() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionArgumentTypeOptionsProto.argument_type_parse_location)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::ParseLocationRangeProto* temp = _impl_.argument_type_parse_location_;
  _impl_.argument_type_parse_location_ = nullptr;
  return temp;
}
inline ::zetasql::ParseLocationRangeProto* FunctionArgumentTypeOptionsProto::_internal_mutable_argument_type_parse_location() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.argument_type_parse_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ParseLocationRangeProto>(GetArenaForAllocation());
    _impl_.argument_type_parse_location_ = p;
  }
  return _impl_.argument_type_parse_location_;
}
inline ::zetasql::ParseLocationRangeProto* FunctionArgumentTypeOptionsProto::mutable_argument_type_parse_location() {
  ::zetasql::ParseLocationRangeProto* _msg = _internal_mutable_argument_type_parse_location();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionArgumentTypeOptionsProto.argument_type_parse_location)
  return _msg;
}
inline void FunctionArgumentTypeOptionsProto::set_allocated_argument_type_parse_location(::zetasql::ParseLocationRangeProto* argument_type_parse_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.argument_type_parse_location_);
  }
  if (argument_type_parse_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(argument_type_parse_location));
    if (message_arena != submessage_arena) {
      argument_type_parse_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argument_type_parse_location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.argument_type_parse_location_ = argument_type_parse_location;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.argument_type_parse_location)
}

// optional .zetasql.FunctionEnums.ProcedureArgumentMode procedure_argument_mode = 14;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_procedure_argument_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_procedure_argument_mode() const {
  return _internal_has_procedure_argument_mode();
}
inline void FunctionArgumentTypeOptionsProto::clear_procedure_argument_mode() {
  _impl_.procedure_argument_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::zetasql::FunctionEnums_ProcedureArgumentMode FunctionArgumentTypeOptionsProto::_internal_procedure_argument_mode() const {
  return static_cast< ::zetasql::FunctionEnums_ProcedureArgumentMode >(_impl_.procedure_argument_mode_);
}
inline ::zetasql::FunctionEnums_ProcedureArgumentMode FunctionArgumentTypeOptionsProto::procedure_argument_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.procedure_argument_mode)
  return _internal_procedure_argument_mode();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_procedure_argument_mode(::zetasql::FunctionEnums_ProcedureArgumentMode value) {
  assert(::zetasql::FunctionEnums_ProcedureArgumentMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.procedure_argument_mode_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_procedure_argument_mode(::zetasql::FunctionEnums_ProcedureArgumentMode value) {
  _internal_set_procedure_argument_mode(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.procedure_argument_mode)
}

// optional bool argument_name_is_mandatory = 15 [default = false];
inline bool FunctionArgumentTypeOptionsProto::_internal_has_argument_name_is_mandatory() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_argument_name_is_mandatory() const {
  return _internal_has_argument_name_is_mandatory();
}
inline void FunctionArgumentTypeOptionsProto::clear_argument_name_is_mandatory() {
  _impl_.argument_name_is_mandatory_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool FunctionArgumentTypeOptionsProto::_internal_argument_name_is_mandatory() const {
  return _impl_.argument_name_is_mandatory_;
}
inline bool FunctionArgumentTypeOptionsProto::argument_name_is_mandatory() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.argument_name_is_mandatory)
  return _internal_argument_name_is_mandatory();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_argument_name_is_mandatory(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.argument_name_is_mandatory_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_argument_name_is_mandatory(bool value) {
  _internal_set_argument_name_is_mandatory(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.argument_name_is_mandatory)
}

// optional int32 descriptor_resolution_table_offset = 16 [default = -1];
inline bool FunctionArgumentTypeOptionsProto::_internal_has_descriptor_resolution_table_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_descriptor_resolution_table_offset() const {
  return _internal_has_descriptor_resolution_table_offset();
}
inline void FunctionArgumentTypeOptionsProto::clear_descriptor_resolution_table_offset() {
  _impl_.descriptor_resolution_table_offset_ = -1;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t FunctionArgumentTypeOptionsProto::_internal_descriptor_resolution_table_offset() const {
  return _impl_.descriptor_resolution_table_offset_;
}
inline int32_t FunctionArgumentTypeOptionsProto::descriptor_resolution_table_offset() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.descriptor_resolution_table_offset)
  return _internal_descriptor_resolution_table_offset();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_descriptor_resolution_table_offset(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.descriptor_resolution_table_offset_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_descriptor_resolution_table_offset(int32_t value) {
  _internal_set_descriptor_resolution_table_offset(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.descriptor_resolution_table_offset)
}

// optional .zetasql.ValueProto default_value = 17;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_default_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_value_ != nullptr);
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_default_value() const {
  return _internal_has_default_value();
}
inline const ::zetasql::ValueProto& FunctionArgumentTypeOptionsProto::_internal_default_value() const {
  const ::zetasql::ValueProto* p = _impl_.default_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ValueProto&>(
      ::zetasql::_ValueProto_default_instance_);
}
inline const ::zetasql::ValueProto& FunctionArgumentTypeOptionsProto::default_value() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.default_value)
  return _internal_default_value();
}
inline void FunctionArgumentTypeOptionsProto::unsafe_arena_set_allocated_default_value(
    ::zetasql::ValueProto* default_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_value_);
  }
  _impl_.default_value_ = default_value;
  if (default_value) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.default_value)
}
inline ::zetasql::ValueProto* FunctionArgumentTypeOptionsProto::release_default_value() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::ValueProto* temp = _impl_.default_value_;
  _impl_.default_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ValueProto* FunctionArgumentTypeOptionsProto::unsafe_arena_release_default_value() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionArgumentTypeOptionsProto.default_value)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::ValueProto* temp = _impl_.default_value_;
  _impl_.default_value_ = nullptr;
  return temp;
}
inline ::zetasql::ValueProto* FunctionArgumentTypeOptionsProto::_internal_mutable_default_value() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.default_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ValueProto>(GetArenaForAllocation());
    _impl_.default_value_ = p;
  }
  return _impl_.default_value_;
}
inline ::zetasql::ValueProto* FunctionArgumentTypeOptionsProto::mutable_default_value() {
  ::zetasql::ValueProto* _msg = _internal_mutable_default_value();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionArgumentTypeOptionsProto.default_value)
  return _msg;
}
inline void FunctionArgumentTypeOptionsProto::set_allocated_default_value(::zetasql::ValueProto* default_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_value_);
  }
  if (default_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_value));
    if (message_arena != submessage_arena) {
      default_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.default_value_ = default_value;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.default_value)
}

// optional .zetasql.TypeProto default_value_type = 18;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_default_value_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_value_type_ != nullptr);
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_default_value_type() const {
  return _internal_has_default_value_type();
}
inline const ::zetasql::TypeProto& FunctionArgumentTypeOptionsProto::_internal_default_value_type() const {
  const ::zetasql::TypeProto* p = _impl_.default_value_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& FunctionArgumentTypeOptionsProto::default_value_type() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.default_value_type)
  return _internal_default_value_type();
}
inline void FunctionArgumentTypeOptionsProto::unsafe_arena_set_allocated_default_value_type(
    ::zetasql::TypeProto* default_value_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_value_type_);
  }
  _impl_.default_value_type_ = default_value_type;
  if (default_value_type) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.default_value_type)
}
inline ::zetasql::TypeProto* FunctionArgumentTypeOptionsProto::release_default_value_type() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::zetasql::TypeProto* temp = _impl_.default_value_type_;
  _impl_.default_value_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* FunctionArgumentTypeOptionsProto::unsafe_arena_release_default_value_type() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionArgumentTypeOptionsProto.default_value_type)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::zetasql::TypeProto* temp = _impl_.default_value_type_;
  _impl_.default_value_type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* FunctionArgumentTypeOptionsProto::_internal_mutable_default_value_type() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.default_value_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.default_value_type_ = p;
  }
  return _impl_.default_value_type_;
}
inline ::zetasql::TypeProto* FunctionArgumentTypeOptionsProto::mutable_default_value_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_default_value_type();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionArgumentTypeOptionsProto.default_value_type)
  return _msg;
}
inline void FunctionArgumentTypeOptionsProto::set_allocated_default_value_type(::zetasql::TypeProto* default_value_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_value_type_);
  }
  if (default_value_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_value_type));
    if (message_arena != submessage_arena) {
      default_value_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_value_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.default_value_type_ = default_value_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionArgumentTypeOptionsProto.default_value_type)
}

// optional .zetasql.FunctionEnums.ArgumentCollationMode argument_collation_mode = 19 [default = AFFECTS_OPERATION_AND_PROPAGATION];
inline bool FunctionArgumentTypeOptionsProto::_internal_has_argument_collation_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_argument_collation_mode() const {
  return _internal_has_argument_collation_mode();
}
inline void FunctionArgumentTypeOptionsProto::clear_argument_collation_mode() {
  _impl_.argument_collation_mode_ = 3;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::zetasql::FunctionEnums_ArgumentCollationMode FunctionArgumentTypeOptionsProto::_internal_argument_collation_mode() const {
  return static_cast< ::zetasql::FunctionEnums_ArgumentCollationMode >(_impl_.argument_collation_mode_);
}
inline ::zetasql::FunctionEnums_ArgumentCollationMode FunctionArgumentTypeOptionsProto::argument_collation_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.argument_collation_mode)
  return _internal_argument_collation_mode();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_argument_collation_mode(::zetasql::FunctionEnums_ArgumentCollationMode value) {
  assert(::zetasql::FunctionEnums_ArgumentCollationMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.argument_collation_mode_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_argument_collation_mode(::zetasql::FunctionEnums_ArgumentCollationMode value) {
  _internal_set_argument_collation_mode(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.argument_collation_mode)
}

// optional bool uses_array_element_for_collation = 20;
inline bool FunctionArgumentTypeOptionsProto::_internal_has_uses_array_element_for_collation() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FunctionArgumentTypeOptionsProto::has_uses_array_element_for_collation() const {
  return _internal_has_uses_array_element_for_collation();
}
inline void FunctionArgumentTypeOptionsProto::clear_uses_array_element_for_collation() {
  _impl_.uses_array_element_for_collation_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool FunctionArgumentTypeOptionsProto::_internal_uses_array_element_for_collation() const {
  return _impl_.uses_array_element_for_collation_;
}
inline bool FunctionArgumentTypeOptionsProto::uses_array_element_for_collation() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeOptionsProto.uses_array_element_for_collation)
  return _internal_uses_array_element_for_collation();
}
inline void FunctionArgumentTypeOptionsProto::_internal_set_uses_array_element_for_collation(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.uses_array_element_for_collation_ = value;
}
inline void FunctionArgumentTypeOptionsProto::set_uses_array_element_for_collation(bool value) {
  _internal_set_uses_array_element_for_collation(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeOptionsProto.uses_array_element_for_collation)
}

// -------------------------------------------------------------------

// ArgumentTypeLambdaProto

// repeated .zetasql.FunctionArgumentTypeProto argument = 5;
inline int ArgumentTypeLambdaProto::_internal_argument_size() const {
  return _impl_.argument_.size();
}
inline int ArgumentTypeLambdaProto::argument_size() const {
  return _internal_argument_size();
}
inline void ArgumentTypeLambdaProto::clear_argument() {
  _impl_.argument_.Clear();
}
inline ::zetasql::FunctionArgumentTypeProto* ArgumentTypeLambdaProto::mutable_argument(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ArgumentTypeLambdaProto.argument)
  return _impl_.argument_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto >*
ArgumentTypeLambdaProto::mutable_argument() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ArgumentTypeLambdaProto.argument)
  return &_impl_.argument_;
}
inline const ::zetasql::FunctionArgumentTypeProto& ArgumentTypeLambdaProto::_internal_argument(int index) const {
  return _impl_.argument_.Get(index);
}
inline const ::zetasql::FunctionArgumentTypeProto& ArgumentTypeLambdaProto::argument(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ArgumentTypeLambdaProto.argument)
  return _internal_argument(index);
}
inline ::zetasql::FunctionArgumentTypeProto* ArgumentTypeLambdaProto::_internal_add_argument() {
  return _impl_.argument_.Add();
}
inline ::zetasql::FunctionArgumentTypeProto* ArgumentTypeLambdaProto::add_argument() {
  ::zetasql::FunctionArgumentTypeProto* _add = _internal_add_argument();
  // @@protoc_insertion_point(field_add:zetasql.ArgumentTypeLambdaProto.argument)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto >&
ArgumentTypeLambdaProto::argument() const {
  // @@protoc_insertion_point(field_list:zetasql.ArgumentTypeLambdaProto.argument)
  return _impl_.argument_;
}

// optional .zetasql.FunctionArgumentTypeProto body = 6;
inline bool ArgumentTypeLambdaProto::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline bool ArgumentTypeLambdaProto::has_body() const {
  return _internal_has_body();
}
inline void ArgumentTypeLambdaProto::clear_body() {
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::FunctionArgumentTypeProto& ArgumentTypeLambdaProto::_internal_body() const {
  const ::zetasql::FunctionArgumentTypeProto* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::FunctionArgumentTypeProto&>(
      ::zetasql::_FunctionArgumentTypeProto_default_instance_);
}
inline const ::zetasql::FunctionArgumentTypeProto& ArgumentTypeLambdaProto::body() const {
  // @@protoc_insertion_point(field_get:zetasql.ArgumentTypeLambdaProto.body)
  return _internal_body();
}
inline void ArgumentTypeLambdaProto::unsafe_arena_set_allocated_body(
    ::zetasql::FunctionArgumentTypeProto* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ArgumentTypeLambdaProto.body)
}
inline ::zetasql::FunctionArgumentTypeProto* ArgumentTypeLambdaProto::release_body() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::FunctionArgumentTypeProto* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::FunctionArgumentTypeProto* ArgumentTypeLambdaProto::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:zetasql.ArgumentTypeLambdaProto.body)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::FunctionArgumentTypeProto* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::zetasql::FunctionArgumentTypeProto* ArgumentTypeLambdaProto::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionArgumentTypeProto>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::zetasql::FunctionArgumentTypeProto* ArgumentTypeLambdaProto::mutable_body() {
  ::zetasql::FunctionArgumentTypeProto* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:zetasql.ArgumentTypeLambdaProto.body)
  return _msg;
}
inline void ArgumentTypeLambdaProto::set_allocated_body(::zetasql::FunctionArgumentTypeProto* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ArgumentTypeLambdaProto.body)
}

// -------------------------------------------------------------------

// FunctionArgumentTypeProto

// optional .zetasql.SignatureArgumentKind kind = 1;
inline bool FunctionArgumentTypeProto::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FunctionArgumentTypeProto::has_kind() const {
  return _internal_has_kind();
}
inline void FunctionArgumentTypeProto::clear_kind() {
  _impl_.kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::zetasql::SignatureArgumentKind FunctionArgumentTypeProto::_internal_kind() const {
  return static_cast< ::zetasql::SignatureArgumentKind >(_impl_.kind_);
}
inline ::zetasql::SignatureArgumentKind FunctionArgumentTypeProto::kind() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeProto.kind)
  return _internal_kind();
}
inline void FunctionArgumentTypeProto::_internal_set_kind(::zetasql::SignatureArgumentKind value) {
  assert(::zetasql::SignatureArgumentKind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.kind_ = value;
}
inline void FunctionArgumentTypeProto::set_kind(::zetasql::SignatureArgumentKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeProto.kind)
}

// optional .zetasql.TypeProto type = 2;
inline bool FunctionArgumentTypeProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool FunctionArgumentTypeProto::has_type() const {
  return _internal_has_type();
}
inline const ::zetasql::TypeProto& FunctionArgumentTypeProto::_internal_type() const {
  const ::zetasql::TypeProto* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& FunctionArgumentTypeProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeProto.type)
  return _internal_type();
}
inline void FunctionArgumentTypeProto::unsafe_arena_set_allocated_type(
    ::zetasql::TypeProto* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionArgumentTypeProto.type)
}
inline ::zetasql::TypeProto* FunctionArgumentTypeProto::release_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* FunctionArgumentTypeProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionArgumentTypeProto.type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* FunctionArgumentTypeProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::zetasql::TypeProto* FunctionArgumentTypeProto::mutable_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionArgumentTypeProto.type)
  return _msg;
}
inline void FunctionArgumentTypeProto::set_allocated_type(::zetasql::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionArgumentTypeProto.type)
}

// optional int32 num_occurrences = 4;
inline bool FunctionArgumentTypeProto::_internal_has_num_occurrences() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FunctionArgumentTypeProto::has_num_occurrences() const {
  return _internal_has_num_occurrences();
}
inline void FunctionArgumentTypeProto::clear_num_occurrences() {
  _impl_.num_occurrences_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t FunctionArgumentTypeProto::_internal_num_occurrences() const {
  return _impl_.num_occurrences_;
}
inline int32_t FunctionArgumentTypeProto::num_occurrences() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeProto.num_occurrences)
  return _internal_num_occurrences();
}
inline void FunctionArgumentTypeProto::_internal_set_num_occurrences(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.num_occurrences_ = value;
}
inline void FunctionArgumentTypeProto::set_num_occurrences(int32_t value) {
  _internal_set_num_occurrences(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionArgumentTypeProto.num_occurrences)
}

// optional .zetasql.FunctionArgumentTypeOptionsProto options = 3;
inline bool FunctionArgumentTypeProto::_internal_has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline bool FunctionArgumentTypeProto::has_options() const {
  return _internal_has_options();
}
inline void FunctionArgumentTypeProto::clear_options() {
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::FunctionArgumentTypeOptionsProto& FunctionArgumentTypeProto::_internal_options() const {
  const ::zetasql::FunctionArgumentTypeOptionsProto* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::FunctionArgumentTypeOptionsProto&>(
      ::zetasql::_FunctionArgumentTypeOptionsProto_default_instance_);
}
inline const ::zetasql::FunctionArgumentTypeOptionsProto& FunctionArgumentTypeProto::options() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeProto.options)
  return _internal_options();
}
inline void FunctionArgumentTypeProto::unsafe_arena_set_allocated_options(
    ::zetasql::FunctionArgumentTypeOptionsProto* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionArgumentTypeProto.options)
}
inline ::zetasql::FunctionArgumentTypeOptionsProto* FunctionArgumentTypeProto::release_options() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::FunctionArgumentTypeOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::FunctionArgumentTypeOptionsProto* FunctionArgumentTypeProto::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionArgumentTypeProto.options)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::FunctionArgumentTypeOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::zetasql::FunctionArgumentTypeOptionsProto* FunctionArgumentTypeProto::_internal_mutable_options() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionArgumentTypeOptionsProto>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::zetasql::FunctionArgumentTypeOptionsProto* FunctionArgumentTypeProto::mutable_options() {
  ::zetasql::FunctionArgumentTypeOptionsProto* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionArgumentTypeProto.options)
  return _msg;
}
inline void FunctionArgumentTypeProto::set_allocated_options(::zetasql::FunctionArgumentTypeOptionsProto* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionArgumentTypeProto.options)
}

// optional .zetasql.ArgumentTypeLambdaProto lambda = 5;
inline bool FunctionArgumentTypeProto::_internal_has_lambda() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lambda_ != nullptr);
  return value;
}
inline bool FunctionArgumentTypeProto::has_lambda() const {
  return _internal_has_lambda();
}
inline void FunctionArgumentTypeProto::clear_lambda() {
  if (_impl_.lambda_ != nullptr) _impl_.lambda_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::ArgumentTypeLambdaProto& FunctionArgumentTypeProto::_internal_lambda() const {
  const ::zetasql::ArgumentTypeLambdaProto* p = _impl_.lambda_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ArgumentTypeLambdaProto&>(
      ::zetasql::_ArgumentTypeLambdaProto_default_instance_);
}
inline const ::zetasql::ArgumentTypeLambdaProto& FunctionArgumentTypeProto::lambda() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionArgumentTypeProto.lambda)
  return _internal_lambda();
}
inline void FunctionArgumentTypeProto::unsafe_arena_set_allocated_lambda(
    ::zetasql::ArgumentTypeLambdaProto* lambda) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lambda_);
  }
  _impl_.lambda_ = lambda;
  if (lambda) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionArgumentTypeProto.lambda)
}
inline ::zetasql::ArgumentTypeLambdaProto* FunctionArgumentTypeProto::release_lambda() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ArgumentTypeLambdaProto* temp = _impl_.lambda_;
  _impl_.lambda_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ArgumentTypeLambdaProto* FunctionArgumentTypeProto::unsafe_arena_release_lambda() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionArgumentTypeProto.lambda)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ArgumentTypeLambdaProto* temp = _impl_.lambda_;
  _impl_.lambda_ = nullptr;
  return temp;
}
inline ::zetasql::ArgumentTypeLambdaProto* FunctionArgumentTypeProto::_internal_mutable_lambda() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.lambda_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ArgumentTypeLambdaProto>(GetArenaForAllocation());
    _impl_.lambda_ = p;
  }
  return _impl_.lambda_;
}
inline ::zetasql::ArgumentTypeLambdaProto* FunctionArgumentTypeProto::mutable_lambda() {
  ::zetasql::ArgumentTypeLambdaProto* _msg = _internal_mutable_lambda();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionArgumentTypeProto.lambda)
  return _msg;
}
inline void FunctionArgumentTypeProto::set_allocated_lambda(::zetasql::ArgumentTypeLambdaProto* lambda) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lambda_;
  }
  if (lambda) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lambda);
    if (message_arena != submessage_arena) {
      lambda = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lambda, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.lambda_ = lambda;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionArgumentTypeProto.lambda)
}

// -------------------------------------------------------------------

// FunctionSignatureOptionsProto

// optional bool is_deprecated = 2 [default = false];
inline bool FunctionSignatureOptionsProto::_internal_has_is_deprecated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionSignatureOptionsProto::has_is_deprecated() const {
  return _internal_has_is_deprecated();
}
inline void FunctionSignatureOptionsProto::clear_is_deprecated() {
  _impl_.is_deprecated_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FunctionSignatureOptionsProto::_internal_is_deprecated() const {
  return _impl_.is_deprecated_;
}
inline bool FunctionSignatureOptionsProto::is_deprecated() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureOptionsProto.is_deprecated)
  return _internal_is_deprecated();
}
inline void FunctionSignatureOptionsProto::_internal_set_is_deprecated(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_deprecated_ = value;
}
inline void FunctionSignatureOptionsProto::set_is_deprecated(bool value) {
  _internal_set_is_deprecated(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionSignatureOptionsProto.is_deprecated)
}

// repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 3;
inline int FunctionSignatureOptionsProto::_internal_additional_deprecation_warning_size() const {
  return _impl_.additional_deprecation_warning_.size();
}
inline int FunctionSignatureOptionsProto::additional_deprecation_warning_size() const {
  return _internal_additional_deprecation_warning_size();
}
inline ::zetasql::FreestandingDeprecationWarning* FunctionSignatureOptionsProto::mutable_additional_deprecation_warning(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionSignatureOptionsProto.additional_deprecation_warning)
  return _impl_.additional_deprecation_warning_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning >*
FunctionSignatureOptionsProto::mutable_additional_deprecation_warning() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.FunctionSignatureOptionsProto.additional_deprecation_warning)
  return &_impl_.additional_deprecation_warning_;
}
inline const ::zetasql::FreestandingDeprecationWarning& FunctionSignatureOptionsProto::_internal_additional_deprecation_warning(int index) const {
  return _impl_.additional_deprecation_warning_.Get(index);
}
inline const ::zetasql::FreestandingDeprecationWarning& FunctionSignatureOptionsProto::additional_deprecation_warning(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureOptionsProto.additional_deprecation_warning)
  return _internal_additional_deprecation_warning(index);
}
inline ::zetasql::FreestandingDeprecationWarning* FunctionSignatureOptionsProto::_internal_add_additional_deprecation_warning() {
  return _impl_.additional_deprecation_warning_.Add();
}
inline ::zetasql::FreestandingDeprecationWarning* FunctionSignatureOptionsProto::add_additional_deprecation_warning() {
  ::zetasql::FreestandingDeprecationWarning* _add = _internal_add_additional_deprecation_warning();
  // @@protoc_insertion_point(field_add:zetasql.FunctionSignatureOptionsProto.additional_deprecation_warning)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning >&
FunctionSignatureOptionsProto::additional_deprecation_warning() const {
  // @@protoc_insertion_point(field_list:zetasql.FunctionSignatureOptionsProto.additional_deprecation_warning)
  return _impl_.additional_deprecation_warning_;
}

// repeated .zetasql.LanguageFeature required_language_feature = 4;
inline int FunctionSignatureOptionsProto::_internal_required_language_feature_size() const {
  return _impl_.required_language_feature_.size();
}
inline int FunctionSignatureOptionsProto::required_language_feature_size() const {
  return _internal_required_language_feature_size();
}
inline void FunctionSignatureOptionsProto::clear_required_language_feature() {
  _impl_.required_language_feature_.Clear();
}
inline ::zetasql::LanguageFeature FunctionSignatureOptionsProto::_internal_required_language_feature(int index) const {
  return static_cast< ::zetasql::LanguageFeature >(_impl_.required_language_feature_.Get(index));
}
inline ::zetasql::LanguageFeature FunctionSignatureOptionsProto::required_language_feature(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureOptionsProto.required_language_feature)
  return _internal_required_language_feature(index);
}
inline void FunctionSignatureOptionsProto::set_required_language_feature(int index, ::zetasql::LanguageFeature value) {
  assert(::zetasql::LanguageFeature_IsValid(value));
  _impl_.required_language_feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionSignatureOptionsProto.required_language_feature)
}
inline void FunctionSignatureOptionsProto::_internal_add_required_language_feature(::zetasql::LanguageFeature value) {
  assert(::zetasql::LanguageFeature_IsValid(value));
  _impl_.required_language_feature_.Add(value);
}
inline void FunctionSignatureOptionsProto::add_required_language_feature(::zetasql::LanguageFeature value) {
  _internal_add_required_language_feature(value);
  // @@protoc_insertion_point(field_add:zetasql.FunctionSignatureOptionsProto.required_language_feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
FunctionSignatureOptionsProto::required_language_feature() const {
  // @@protoc_insertion_point(field_list:zetasql.FunctionSignatureOptionsProto.required_language_feature)
  return _impl_.required_language_feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FunctionSignatureOptionsProto::_internal_mutable_required_language_feature() {
  return &_impl_.required_language_feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FunctionSignatureOptionsProto::mutable_required_language_feature() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.FunctionSignatureOptionsProto.required_language_feature)
  return _internal_mutable_required_language_feature();
}

// optional bool is_aliased_signature = 5 [default = false];
inline bool FunctionSignatureOptionsProto::_internal_has_is_aliased_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionSignatureOptionsProto::has_is_aliased_signature() const {
  return _internal_has_is_aliased_signature();
}
inline void FunctionSignatureOptionsProto::clear_is_aliased_signature() {
  _impl_.is_aliased_signature_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool FunctionSignatureOptionsProto::_internal_is_aliased_signature() const {
  return _impl_.is_aliased_signature_;
}
inline bool FunctionSignatureOptionsProto::is_aliased_signature() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureOptionsProto.is_aliased_signature)
  return _internal_is_aliased_signature();
}
inline void FunctionSignatureOptionsProto::_internal_set_is_aliased_signature(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_aliased_signature_ = value;
}
inline void FunctionSignatureOptionsProto::set_is_aliased_signature(bool value) {
  _internal_set_is_aliased_signature(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionSignatureOptionsProto.is_aliased_signature)
}

// optional bool propagates_collation = 6 [default = true];
inline bool FunctionSignatureOptionsProto::_internal_has_propagates_collation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FunctionSignatureOptionsProto::has_propagates_collation() const {
  return _internal_has_propagates_collation();
}
inline void FunctionSignatureOptionsProto::clear_propagates_collation() {
  _impl_.propagates_collation_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FunctionSignatureOptionsProto::_internal_propagates_collation() const {
  return _impl_.propagates_collation_;
}
inline bool FunctionSignatureOptionsProto::propagates_collation() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureOptionsProto.propagates_collation)
  return _internal_propagates_collation();
}
inline void FunctionSignatureOptionsProto::_internal_set_propagates_collation(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.propagates_collation_ = value;
}
inline void FunctionSignatureOptionsProto::set_propagates_collation(bool value) {
  _internal_set_propagates_collation(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionSignatureOptionsProto.propagates_collation)
}

// optional bool uses_operation_collation = 7 [default = false];
inline bool FunctionSignatureOptionsProto::_internal_has_uses_operation_collation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FunctionSignatureOptionsProto::has_uses_operation_collation() const {
  return _internal_has_uses_operation_collation();
}
inline void FunctionSignatureOptionsProto::clear_uses_operation_collation() {
  _impl_.uses_operation_collation_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FunctionSignatureOptionsProto::_internal_uses_operation_collation() const {
  return _impl_.uses_operation_collation_;
}
inline bool FunctionSignatureOptionsProto::uses_operation_collation() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureOptionsProto.uses_operation_collation)
  return _internal_uses_operation_collation();
}
inline void FunctionSignatureOptionsProto::_internal_set_uses_operation_collation(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uses_operation_collation_ = value;
}
inline void FunctionSignatureOptionsProto::set_uses_operation_collation(bool value) {
  _internal_set_uses_operation_collation(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionSignatureOptionsProto.uses_operation_collation)
}

// optional bool rejects_collation = 8 [default = false];
inline bool FunctionSignatureOptionsProto::_internal_has_rejects_collation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FunctionSignatureOptionsProto::has_rejects_collation() const {
  return _internal_has_rejects_collation();
}
inline void FunctionSignatureOptionsProto::clear_rejects_collation() {
  _impl_.rejects_collation_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FunctionSignatureOptionsProto::_internal_rejects_collation() const {
  return _impl_.rejects_collation_;
}
inline bool FunctionSignatureOptionsProto::rejects_collation() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureOptionsProto.rejects_collation)
  return _internal_rejects_collation();
}
inline void FunctionSignatureOptionsProto::_internal_set_rejects_collation(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rejects_collation_ = value;
}
inline void FunctionSignatureOptionsProto::set_rejects_collation(bool value) {
  _internal_set_rejects_collation(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionSignatureOptionsProto.rejects_collation)
}

// -------------------------------------------------------------------

// FunctionSignatureProto

// repeated .zetasql.FunctionArgumentTypeProto argument = 1;
inline int FunctionSignatureProto::_internal_argument_size() const {
  return _impl_.argument_.size();
}
inline int FunctionSignatureProto::argument_size() const {
  return _internal_argument_size();
}
inline void FunctionSignatureProto::clear_argument() {
  _impl_.argument_.Clear();
}
inline ::zetasql::FunctionArgumentTypeProto* FunctionSignatureProto::mutable_argument(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionSignatureProto.argument)
  return _impl_.argument_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto >*
FunctionSignatureProto::mutable_argument() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.FunctionSignatureProto.argument)
  return &_impl_.argument_;
}
inline const ::zetasql::FunctionArgumentTypeProto& FunctionSignatureProto::_internal_argument(int index) const {
  return _impl_.argument_.Get(index);
}
inline const ::zetasql::FunctionArgumentTypeProto& FunctionSignatureProto::argument(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureProto.argument)
  return _internal_argument(index);
}
inline ::zetasql::FunctionArgumentTypeProto* FunctionSignatureProto::_internal_add_argument() {
  return _impl_.argument_.Add();
}
inline ::zetasql::FunctionArgumentTypeProto* FunctionSignatureProto::add_argument() {
  ::zetasql::FunctionArgumentTypeProto* _add = _internal_add_argument();
  // @@protoc_insertion_point(field_add:zetasql.FunctionSignatureProto.argument)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionArgumentTypeProto >&
FunctionSignatureProto::argument() const {
  // @@protoc_insertion_point(field_list:zetasql.FunctionSignatureProto.argument)
  return _impl_.argument_;
}

// optional .zetasql.FunctionArgumentTypeProto return_type = 2;
inline bool FunctionSignatureProto::_internal_has_return_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.return_type_ != nullptr);
  return value;
}
inline bool FunctionSignatureProto::has_return_type() const {
  return _internal_has_return_type();
}
inline void FunctionSignatureProto::clear_return_type() {
  if (_impl_.return_type_ != nullptr) _impl_.return_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::FunctionArgumentTypeProto& FunctionSignatureProto::_internal_return_type() const {
  const ::zetasql::FunctionArgumentTypeProto* p = _impl_.return_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::FunctionArgumentTypeProto&>(
      ::zetasql::_FunctionArgumentTypeProto_default_instance_);
}
inline const ::zetasql::FunctionArgumentTypeProto& FunctionSignatureProto::return_type() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureProto.return_type)
  return _internal_return_type();
}
inline void FunctionSignatureProto::unsafe_arena_set_allocated_return_type(
    ::zetasql::FunctionArgumentTypeProto* return_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.return_type_);
  }
  _impl_.return_type_ = return_type;
  if (return_type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionSignatureProto.return_type)
}
inline ::zetasql::FunctionArgumentTypeProto* FunctionSignatureProto::release_return_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::FunctionArgumentTypeProto* temp = _impl_.return_type_;
  _impl_.return_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::FunctionArgumentTypeProto* FunctionSignatureProto::unsafe_arena_release_return_type() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionSignatureProto.return_type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::FunctionArgumentTypeProto* temp = _impl_.return_type_;
  _impl_.return_type_ = nullptr;
  return temp;
}
inline ::zetasql::FunctionArgumentTypeProto* FunctionSignatureProto::_internal_mutable_return_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.return_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionArgumentTypeProto>(GetArenaForAllocation());
    _impl_.return_type_ = p;
  }
  return _impl_.return_type_;
}
inline ::zetasql::FunctionArgumentTypeProto* FunctionSignatureProto::mutable_return_type() {
  ::zetasql::FunctionArgumentTypeProto* _msg = _internal_mutable_return_type();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionSignatureProto.return_type)
  return _msg;
}
inline void FunctionSignatureProto::set_allocated_return_type(::zetasql::FunctionArgumentTypeProto* return_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.return_type_;
  }
  if (return_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(return_type);
    if (message_arena != submessage_arena) {
      return_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, return_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.return_type_ = return_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionSignatureProto.return_type)
}

// optional int64 context_id = 3;
inline bool FunctionSignatureProto::_internal_has_context_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FunctionSignatureProto::has_context_id() const {
  return _internal_has_context_id();
}
inline void FunctionSignatureProto::clear_context_id() {
  _impl_.context_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t FunctionSignatureProto::_internal_context_id() const {
  return _impl_.context_id_;
}
inline int64_t FunctionSignatureProto::context_id() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureProto.context_id)
  return _internal_context_id();
}
inline void FunctionSignatureProto::_internal_set_context_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_id_ = value;
}
inline void FunctionSignatureProto::set_context_id(int64_t value) {
  _internal_set_context_id(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionSignatureProto.context_id)
}

// optional .zetasql.FunctionSignatureOptionsProto options = 4;
inline bool FunctionSignatureProto::_internal_has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline bool FunctionSignatureProto::has_options() const {
  return _internal_has_options();
}
inline void FunctionSignatureProto::clear_options() {
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::FunctionSignatureOptionsProto& FunctionSignatureProto::_internal_options() const {
  const ::zetasql::FunctionSignatureOptionsProto* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::FunctionSignatureOptionsProto&>(
      ::zetasql::_FunctionSignatureOptionsProto_default_instance_);
}
inline const ::zetasql::FunctionSignatureOptionsProto& FunctionSignatureProto::options() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionSignatureProto.options)
  return _internal_options();
}
inline void FunctionSignatureProto::unsafe_arena_set_allocated_options(
    ::zetasql::FunctionSignatureOptionsProto* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionSignatureProto.options)
}
inline ::zetasql::FunctionSignatureOptionsProto* FunctionSignatureProto::release_options() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::FunctionSignatureOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::FunctionSignatureOptionsProto* FunctionSignatureProto::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionSignatureProto.options)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::FunctionSignatureOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::zetasql::FunctionSignatureOptionsProto* FunctionSignatureProto::_internal_mutable_options() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureOptionsProto>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::zetasql::FunctionSignatureOptionsProto* FunctionSignatureProto::mutable_options() {
  ::zetasql::FunctionSignatureOptionsProto* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionSignatureProto.options)
  return _msg;
}
inline void FunctionSignatureProto::set_allocated_options(::zetasql::FunctionSignatureOptionsProto* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionSignatureProto.options)
}

// -------------------------------------------------------------------

// FunctionOptionsProto

// optional bool supports_over_clause = 1 [default = false];
inline bool FunctionOptionsProto::_internal_has_supports_over_clause() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_supports_over_clause() const {
  return _internal_has_supports_over_clause();
}
inline void FunctionOptionsProto::clear_supports_over_clause() {
  _impl_.supports_over_clause_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FunctionOptionsProto::_internal_supports_over_clause() const {
  return _impl_.supports_over_clause_;
}
inline bool FunctionOptionsProto::supports_over_clause() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.supports_over_clause)
  return _internal_supports_over_clause();
}
inline void FunctionOptionsProto::_internal_set_supports_over_clause(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.supports_over_clause_ = value;
}
inline void FunctionOptionsProto::set_supports_over_clause(bool value) {
  _internal_set_supports_over_clause(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.supports_over_clause)
}

// optional .zetasql.FunctionEnums.WindowOrderSupport window_ordering_support = 2 [default = ORDER_UNSUPPORTED];
inline bool FunctionOptionsProto::_internal_has_window_ordering_support() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_window_ordering_support() const {
  return _internal_has_window_ordering_support();
}
inline void FunctionOptionsProto::clear_window_ordering_support() {
  _impl_.window_ordering_support_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::zetasql::FunctionEnums_WindowOrderSupport FunctionOptionsProto::_internal_window_ordering_support() const {
  return static_cast< ::zetasql::FunctionEnums_WindowOrderSupport >(_impl_.window_ordering_support_);
}
inline ::zetasql::FunctionEnums_WindowOrderSupport FunctionOptionsProto::window_ordering_support() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.window_ordering_support)
  return _internal_window_ordering_support();
}
inline void FunctionOptionsProto::_internal_set_window_ordering_support(::zetasql::FunctionEnums_WindowOrderSupport value) {
  assert(::zetasql::FunctionEnums_WindowOrderSupport_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.window_ordering_support_ = value;
}
inline void FunctionOptionsProto::set_window_ordering_support(::zetasql::FunctionEnums_WindowOrderSupport value) {
  _internal_set_window_ordering_support(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.window_ordering_support)
}

// optional bool supports_window_framing = 3 [default = false];
inline bool FunctionOptionsProto::_internal_has_supports_window_framing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_supports_window_framing() const {
  return _internal_has_supports_window_framing();
}
inline void FunctionOptionsProto::clear_supports_window_framing() {
  _impl_.supports_window_framing_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FunctionOptionsProto::_internal_supports_window_framing() const {
  return _impl_.supports_window_framing_;
}
inline bool FunctionOptionsProto::supports_window_framing() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.supports_window_framing)
  return _internal_supports_window_framing();
}
inline void FunctionOptionsProto::_internal_set_supports_window_framing(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.supports_window_framing_ = value;
}
inline void FunctionOptionsProto::set_supports_window_framing(bool value) {
  _internal_set_supports_window_framing(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.supports_window_framing)
}

// optional bool arguments_are_coercible = 4 [default = true];
inline bool FunctionOptionsProto::_internal_has_arguments_are_coercible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_arguments_are_coercible() const {
  return _internal_has_arguments_are_coercible();
}
inline void FunctionOptionsProto::clear_arguments_are_coercible() {
  _impl_.arguments_are_coercible_ = true;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool FunctionOptionsProto::_internal_arguments_are_coercible() const {
  return _impl_.arguments_are_coercible_;
}
inline bool FunctionOptionsProto::arguments_are_coercible() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.arguments_are_coercible)
  return _internal_arguments_are_coercible();
}
inline void FunctionOptionsProto::_internal_set_arguments_are_coercible(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.arguments_are_coercible_ = value;
}
inline void FunctionOptionsProto::set_arguments_are_coercible(bool value) {
  _internal_set_arguments_are_coercible(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.arguments_are_coercible)
}

// optional bool is_deprecated = 5 [default = false];
inline bool FunctionOptionsProto::_internal_has_is_deprecated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_is_deprecated() const {
  return _internal_has_is_deprecated();
}
inline void FunctionOptionsProto::clear_is_deprecated() {
  _impl_.is_deprecated_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FunctionOptionsProto::_internal_is_deprecated() const {
  return _impl_.is_deprecated_;
}
inline bool FunctionOptionsProto::is_deprecated() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.is_deprecated)
  return _internal_is_deprecated();
}
inline void FunctionOptionsProto::_internal_set_is_deprecated(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_deprecated_ = value;
}
inline void FunctionOptionsProto::set_is_deprecated(bool value) {
  _internal_set_is_deprecated(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.is_deprecated)
}

// optional string alias_name = 6;
inline bool FunctionOptionsProto::_internal_has_alias_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_alias_name() const {
  return _internal_has_alias_name();
}
inline void FunctionOptionsProto::clear_alias_name() {
  _impl_.alias_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionOptionsProto::alias_name() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.alias_name)
  return _internal_alias_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionOptionsProto::set_alias_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.alias_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.alias_name)
}
inline std::string* FunctionOptionsProto::mutable_alias_name() {
  std::string* _s = _internal_mutable_alias_name();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionOptionsProto.alias_name)
  return _s;
}
inline const std::string& FunctionOptionsProto::_internal_alias_name() const {
  return _impl_.alias_name_.Get();
}
inline void FunctionOptionsProto::_internal_set_alias_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.alias_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FunctionOptionsProto::_internal_mutable_alias_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.alias_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FunctionOptionsProto::release_alias_name() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionOptionsProto.alias_name)
  if (!_internal_has_alias_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.alias_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_name_.IsDefault()) {
    _impl_.alias_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionOptionsProto::set_allocated_alias_name(std::string* alias_name) {
  if (alias_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.alias_name_.SetAllocated(alias_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_name_.IsDefault()) {
    _impl_.alias_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionOptionsProto.alias_name)
}

// optional string sql_name = 7;
inline bool FunctionOptionsProto::_internal_has_sql_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_sql_name() const {
  return _internal_has_sql_name();
}
inline void FunctionOptionsProto::clear_sql_name() {
  _impl_.sql_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FunctionOptionsProto::sql_name() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.sql_name)
  return _internal_sql_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionOptionsProto::set_sql_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.sql_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.sql_name)
}
inline std::string* FunctionOptionsProto::mutable_sql_name() {
  std::string* _s = _internal_mutable_sql_name();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionOptionsProto.sql_name)
  return _s;
}
inline const std::string& FunctionOptionsProto::_internal_sql_name() const {
  return _impl_.sql_name_.Get();
}
inline void FunctionOptionsProto::_internal_set_sql_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sql_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FunctionOptionsProto::_internal_mutable_sql_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sql_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FunctionOptionsProto::release_sql_name() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionOptionsProto.sql_name)
  if (!_internal_has_sql_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.sql_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sql_name_.IsDefault()) {
    _impl_.sql_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionOptionsProto::set_allocated_sql_name(std::string* sql_name) {
  if (sql_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sql_name_.SetAllocated(sql_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sql_name_.IsDefault()) {
    _impl_.sql_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionOptionsProto.sql_name)
}

// optional bool allow_external_usage = 8 [default = true];
inline bool FunctionOptionsProto::_internal_has_allow_external_usage() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_allow_external_usage() const {
  return _internal_has_allow_external_usage();
}
inline void FunctionOptionsProto::clear_allow_external_usage() {
  _impl_.allow_external_usage_ = true;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool FunctionOptionsProto::_internal_allow_external_usage() const {
  return _impl_.allow_external_usage_;
}
inline bool FunctionOptionsProto::allow_external_usage() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.allow_external_usage)
  return _internal_allow_external_usage();
}
inline void FunctionOptionsProto::_internal_set_allow_external_usage(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.allow_external_usage_ = value;
}
inline void FunctionOptionsProto::set_allow_external_usage(bool value) {
  _internal_set_allow_external_usage(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.allow_external_usage)
}

// optional .zetasql.FunctionEnums.Volatility volatility = 9 [default = IMMUTABLE];
inline bool FunctionOptionsProto::_internal_has_volatility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_volatility() const {
  return _internal_has_volatility();
}
inline void FunctionOptionsProto::clear_volatility() {
  _impl_.volatility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::zetasql::FunctionEnums_Volatility FunctionOptionsProto::_internal_volatility() const {
  return static_cast< ::zetasql::FunctionEnums_Volatility >(_impl_.volatility_);
}
inline ::zetasql::FunctionEnums_Volatility FunctionOptionsProto::volatility() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.volatility)
  return _internal_volatility();
}
inline void FunctionOptionsProto::_internal_set_volatility(::zetasql::FunctionEnums_Volatility value) {
  assert(::zetasql::FunctionEnums_Volatility_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.volatility_ = value;
}
inline void FunctionOptionsProto::set_volatility(::zetasql::FunctionEnums_Volatility value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.volatility)
}

// optional bool supports_order_by = 10 [default = false];
inline bool FunctionOptionsProto::_internal_has_supports_order_by() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_supports_order_by() const {
  return _internal_has_supports_order_by();
}
inline void FunctionOptionsProto::clear_supports_order_by() {
  _impl_.supports_order_by_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool FunctionOptionsProto::_internal_supports_order_by() const {
  return _impl_.supports_order_by_;
}
inline bool FunctionOptionsProto::supports_order_by() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.supports_order_by)
  return _internal_supports_order_by();
}
inline void FunctionOptionsProto::_internal_set_supports_order_by(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.supports_order_by_ = value;
}
inline void FunctionOptionsProto::set_supports_order_by(bool value) {
  _internal_set_supports_order_by(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.supports_order_by)
}

// repeated .zetasql.LanguageFeature required_language_feature = 11;
inline int FunctionOptionsProto::_internal_required_language_feature_size() const {
  return _impl_.required_language_feature_.size();
}
inline int FunctionOptionsProto::required_language_feature_size() const {
  return _internal_required_language_feature_size();
}
inline void FunctionOptionsProto::clear_required_language_feature() {
  _impl_.required_language_feature_.Clear();
}
inline ::zetasql::LanguageFeature FunctionOptionsProto::_internal_required_language_feature(int index) const {
  return static_cast< ::zetasql::LanguageFeature >(_impl_.required_language_feature_.Get(index));
}
inline ::zetasql::LanguageFeature FunctionOptionsProto::required_language_feature(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.required_language_feature)
  return _internal_required_language_feature(index);
}
inline void FunctionOptionsProto::set_required_language_feature(int index, ::zetasql::LanguageFeature value) {
  assert(::zetasql::LanguageFeature_IsValid(value));
  _impl_.required_language_feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.required_language_feature)
}
inline void FunctionOptionsProto::_internal_add_required_language_feature(::zetasql::LanguageFeature value) {
  assert(::zetasql::LanguageFeature_IsValid(value));
  _impl_.required_language_feature_.Add(value);
}
inline void FunctionOptionsProto::add_required_language_feature(::zetasql::LanguageFeature value) {
  _internal_add_required_language_feature(value);
  // @@protoc_insertion_point(field_add:zetasql.FunctionOptionsProto.required_language_feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
FunctionOptionsProto::required_language_feature() const {
  // @@protoc_insertion_point(field_list:zetasql.FunctionOptionsProto.required_language_feature)
  return _impl_.required_language_feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FunctionOptionsProto::_internal_mutable_required_language_feature() {
  return &_impl_.required_language_feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FunctionOptionsProto::mutable_required_language_feature() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.FunctionOptionsProto.required_language_feature)
  return _internal_mutable_required_language_feature();
}

// optional bool supports_limit = 12 [default = false];
inline bool FunctionOptionsProto::_internal_has_supports_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_supports_limit() const {
  return _internal_has_supports_limit();
}
inline void FunctionOptionsProto::clear_supports_limit() {
  _impl_.supports_limit_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FunctionOptionsProto::_internal_supports_limit() const {
  return _impl_.supports_limit_;
}
inline bool FunctionOptionsProto::supports_limit() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.supports_limit)
  return _internal_supports_limit();
}
inline void FunctionOptionsProto::_internal_set_supports_limit(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.supports_limit_ = value;
}
inline void FunctionOptionsProto::set_supports_limit(bool value) {
  _internal_set_supports_limit(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.supports_limit)
}

// optional bool supports_null_handling_modifier = 13 [default = false];
inline bool FunctionOptionsProto::_internal_has_supports_null_handling_modifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_supports_null_handling_modifier() const {
  return _internal_has_supports_null_handling_modifier();
}
inline void FunctionOptionsProto::clear_supports_null_handling_modifier() {
  _impl_.supports_null_handling_modifier_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool FunctionOptionsProto::_internal_supports_null_handling_modifier() const {
  return _impl_.supports_null_handling_modifier_;
}
inline bool FunctionOptionsProto::supports_null_handling_modifier() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.supports_null_handling_modifier)
  return _internal_supports_null_handling_modifier();
}
inline void FunctionOptionsProto::_internal_set_supports_null_handling_modifier(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.supports_null_handling_modifier_ = value;
}
inline void FunctionOptionsProto::set_supports_null_handling_modifier(bool value) {
  _internal_set_supports_null_handling_modifier(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.supports_null_handling_modifier)
}

// optional bool supports_safe_error_mode = 14 [default = true];
inline bool FunctionOptionsProto::_internal_has_supports_safe_error_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_supports_safe_error_mode() const {
  return _internal_has_supports_safe_error_mode();
}
inline void FunctionOptionsProto::clear_supports_safe_error_mode() {
  _impl_.supports_safe_error_mode_ = true;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool FunctionOptionsProto::_internal_supports_safe_error_mode() const {
  return _impl_.supports_safe_error_mode_;
}
inline bool FunctionOptionsProto::supports_safe_error_mode() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.supports_safe_error_mode)
  return _internal_supports_safe_error_mode();
}
inline void FunctionOptionsProto::_internal_set_supports_safe_error_mode(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.supports_safe_error_mode_ = value;
}
inline void FunctionOptionsProto::set_supports_safe_error_mode(bool value) {
  _internal_set_supports_safe_error_mode(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.supports_safe_error_mode)
}

// optional bool supports_having_modifier = 15 [default = true];
inline bool FunctionOptionsProto::_internal_has_supports_having_modifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_supports_having_modifier() const {
  return _internal_has_supports_having_modifier();
}
inline void FunctionOptionsProto::clear_supports_having_modifier() {
  _impl_.supports_having_modifier_ = true;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool FunctionOptionsProto::_internal_supports_having_modifier() const {
  return _impl_.supports_having_modifier_;
}
inline bool FunctionOptionsProto::supports_having_modifier() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.supports_having_modifier)
  return _internal_supports_having_modifier();
}
inline void FunctionOptionsProto::_internal_set_supports_having_modifier(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.supports_having_modifier_ = value;
}
inline void FunctionOptionsProto::set_supports_having_modifier(bool value) {
  _internal_set_supports_having_modifier(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.supports_having_modifier)
}

// optional bool supports_clamped_between_modifier = 16 [default = false];
inline bool FunctionOptionsProto::_internal_has_supports_clamped_between_modifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_supports_clamped_between_modifier() const {
  return _internal_has_supports_clamped_between_modifier();
}
inline void FunctionOptionsProto::clear_supports_clamped_between_modifier() {
  _impl_.supports_clamped_between_modifier_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool FunctionOptionsProto::_internal_supports_clamped_between_modifier() const {
  return _impl_.supports_clamped_between_modifier_;
}
inline bool FunctionOptionsProto::supports_clamped_between_modifier() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.supports_clamped_between_modifier)
  return _internal_supports_clamped_between_modifier();
}
inline void FunctionOptionsProto::_internal_set_supports_clamped_between_modifier(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.supports_clamped_between_modifier_ = value;
}
inline void FunctionOptionsProto::set_supports_clamped_between_modifier(bool value) {
  _internal_set_supports_clamped_between_modifier(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.supports_clamped_between_modifier)
}

// optional bool uses_upper_case_sql_name = 17 [default = true];
inline bool FunctionOptionsProto::_internal_has_uses_upper_case_sql_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FunctionOptionsProto::has_uses_upper_case_sql_name() const {
  return _internal_has_uses_upper_case_sql_name();
}
inline void FunctionOptionsProto::clear_uses_upper_case_sql_name() {
  _impl_.uses_upper_case_sql_name_ = true;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool FunctionOptionsProto::_internal_uses_upper_case_sql_name() const {
  return _impl_.uses_upper_case_sql_name_;
}
inline bool FunctionOptionsProto::uses_upper_case_sql_name() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionOptionsProto.uses_upper_case_sql_name)
  return _internal_uses_upper_case_sql_name();
}
inline void FunctionOptionsProto::_internal_set_uses_upper_case_sql_name(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.uses_upper_case_sql_name_ = value;
}
inline void FunctionOptionsProto::set_uses_upper_case_sql_name(bool value) {
  _internal_set_uses_upper_case_sql_name(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionOptionsProto.uses_upper_case_sql_name)
}

// -------------------------------------------------------------------

// FunctionProto

// repeated string name_path = 1;
inline int FunctionProto::_internal_name_path_size() const {
  return _impl_.name_path_.size();
}
inline int FunctionProto::name_path_size() const {
  return _internal_name_path_size();
}
inline void FunctionProto::clear_name_path() {
  _impl_.name_path_.Clear();
}
inline std::string* FunctionProto::add_name_path() {
  std::string* _s = _internal_add_name_path();
  // @@protoc_insertion_point(field_add_mutable:zetasql.FunctionProto.name_path)
  return _s;
}
inline const std::string& FunctionProto::_internal_name_path(int index) const {
  return _impl_.name_path_.Get(index);
}
inline const std::string& FunctionProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionProto.name_path)
  return _internal_name_path(index);
}
inline std::string* FunctionProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionProto.name_path)
  return _impl_.name_path_.Mutable(index);
}
inline void FunctionProto::set_name_path(int index, const std::string& value) {
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionProto.name_path)
}
inline void FunctionProto::set_name_path(int index, std::string&& value) {
  _impl_.name_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.FunctionProto.name_path)
}
inline void FunctionProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.FunctionProto.name_path)
}
inline void FunctionProto::set_name_path(int index, const char* value, size_t size) {
  _impl_.name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.FunctionProto.name_path)
}
inline std::string* FunctionProto::_internal_add_name_path() {
  return _impl_.name_path_.Add();
}
inline void FunctionProto::add_name_path(const std::string& value) {
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.FunctionProto.name_path)
}
inline void FunctionProto::add_name_path(std::string&& value) {
  _impl_.name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.FunctionProto.name_path)
}
inline void FunctionProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.FunctionProto.name_path)
}
inline void FunctionProto::add_name_path(const char* value, size_t size) {
  _impl_.name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.FunctionProto.name_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FunctionProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.FunctionProto.name_path)
  return _impl_.name_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FunctionProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.FunctionProto.name_path)
  return &_impl_.name_path_;
}

// optional string group = 2;
inline bool FunctionProto::_internal_has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionProto::has_group() const {
  return _internal_has_group();
}
inline void FunctionProto::clear_group() {
  _impl_.group_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionProto::group() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionProto.group)
  return _internal_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionProto::set_group(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.FunctionProto.group)
}
inline std::string* FunctionProto::mutable_group() {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionProto.group)
  return _s;
}
inline const std::string& FunctionProto::_internal_group() const {
  return _impl_.group_.Get();
}
inline void FunctionProto::_internal_set_group(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.group_.Set(value, GetArenaForAllocation());
}
inline std::string* FunctionProto::_internal_mutable_group() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.group_.Mutable(GetArenaForAllocation());
}
inline std::string* FunctionProto::release_group() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionProto.group)
  if (!_internal_has_group()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.group_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_.IsDefault()) {
    _impl_.group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionProto::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.group_.SetAllocated(group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_.IsDefault()) {
    _impl_.group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionProto.group)
}

// optional .zetasql.FunctionEnums.Mode mode = 3;
inline bool FunctionProto::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FunctionProto::has_mode() const {
  return _internal_has_mode();
}
inline void FunctionProto::clear_mode() {
  _impl_.mode_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::zetasql::FunctionEnums_Mode FunctionProto::_internal_mode() const {
  return static_cast< ::zetasql::FunctionEnums_Mode >(_impl_.mode_);
}
inline ::zetasql::FunctionEnums_Mode FunctionProto::mode() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionProto.mode)
  return _internal_mode();
}
inline void FunctionProto::_internal_set_mode(::zetasql::FunctionEnums_Mode value) {
  assert(::zetasql::FunctionEnums_Mode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mode_ = value;
}
inline void FunctionProto::set_mode(::zetasql::FunctionEnums_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionProto.mode)
}

// repeated .zetasql.FunctionSignatureProto signature = 4;
inline int FunctionProto::_internal_signature_size() const {
  return _impl_.signature_.size();
}
inline int FunctionProto::signature_size() const {
  return _internal_signature_size();
}
inline void FunctionProto::clear_signature() {
  _impl_.signature_.Clear();
}
inline ::zetasql::FunctionSignatureProto* FunctionProto::mutable_signature(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionProto.signature)
  return _impl_.signature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionSignatureProto >*
FunctionProto::mutable_signature() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.FunctionProto.signature)
  return &_impl_.signature_;
}
inline const ::zetasql::FunctionSignatureProto& FunctionProto::_internal_signature(int index) const {
  return _impl_.signature_.Get(index);
}
inline const ::zetasql::FunctionSignatureProto& FunctionProto::signature(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionProto.signature)
  return _internal_signature(index);
}
inline ::zetasql::FunctionSignatureProto* FunctionProto::_internal_add_signature() {
  return _impl_.signature_.Add();
}
inline ::zetasql::FunctionSignatureProto* FunctionProto::add_signature() {
  ::zetasql::FunctionSignatureProto* _add = _internal_add_signature();
  // @@protoc_insertion_point(field_add:zetasql.FunctionProto.signature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FunctionSignatureProto >&
FunctionProto::signature() const {
  // @@protoc_insertion_point(field_list:zetasql.FunctionProto.signature)
  return _impl_.signature_;
}

// optional .zetasql.FunctionOptionsProto options = 5;
inline bool FunctionProto::_internal_has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline bool FunctionProto::has_options() const {
  return _internal_has_options();
}
inline void FunctionProto::clear_options() {
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::FunctionOptionsProto& FunctionProto::_internal_options() const {
  const ::zetasql::FunctionOptionsProto* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::FunctionOptionsProto&>(
      ::zetasql::_FunctionOptionsProto_default_instance_);
}
inline const ::zetasql::FunctionOptionsProto& FunctionProto::options() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionProto.options)
  return _internal_options();
}
inline void FunctionProto::unsafe_arena_set_allocated_options(
    ::zetasql::FunctionOptionsProto* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionProto.options)
}
inline ::zetasql::FunctionOptionsProto* FunctionProto::release_options() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::FunctionOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::FunctionOptionsProto* FunctionProto::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionProto.options)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::FunctionOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::zetasql::FunctionOptionsProto* FunctionProto::_internal_mutable_options() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionOptionsProto>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::zetasql::FunctionOptionsProto* FunctionProto::mutable_options() {
  ::zetasql::FunctionOptionsProto* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionProto.options)
  return _msg;
}
inline void FunctionProto::set_allocated_options(::zetasql::FunctionOptionsProto* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionProto.options)
}

// optional .zetasql.ParseResumeLocationProto parse_resume_location = 8;
inline bool FunctionProto::_internal_has_parse_resume_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parse_resume_location_ != nullptr);
  return value;
}
inline bool FunctionProto::has_parse_resume_location() const {
  return _internal_has_parse_resume_location();
}
inline const ::zetasql::ParseResumeLocationProto& FunctionProto::_internal_parse_resume_location() const {
  const ::zetasql::ParseResumeLocationProto* p = _impl_.parse_resume_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ParseResumeLocationProto&>(
      ::zetasql::_ParseResumeLocationProto_default_instance_);
}
inline const ::zetasql::ParseResumeLocationProto& FunctionProto::parse_resume_location() const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionProto.parse_resume_location)
  return _internal_parse_resume_location();
}
inline void FunctionProto::unsafe_arena_set_allocated_parse_resume_location(
    ::zetasql::ParseResumeLocationProto* parse_resume_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parse_resume_location_);
  }
  _impl_.parse_resume_location_ = parse_resume_location;
  if (parse_resume_location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.FunctionProto.parse_resume_location)
}
inline ::zetasql::ParseResumeLocationProto* FunctionProto::release_parse_resume_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ParseResumeLocationProto* temp = _impl_.parse_resume_location_;
  _impl_.parse_resume_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ParseResumeLocationProto* FunctionProto::unsafe_arena_release_parse_resume_location() {
  // @@protoc_insertion_point(field_release:zetasql.FunctionProto.parse_resume_location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ParseResumeLocationProto* temp = _impl_.parse_resume_location_;
  _impl_.parse_resume_location_ = nullptr;
  return temp;
}
inline ::zetasql::ParseResumeLocationProto* FunctionProto::_internal_mutable_parse_resume_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.parse_resume_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ParseResumeLocationProto>(GetArenaForAllocation());
    _impl_.parse_resume_location_ = p;
  }
  return _impl_.parse_resume_location_;
}
inline ::zetasql::ParseResumeLocationProto* FunctionProto::mutable_parse_resume_location() {
  ::zetasql::ParseResumeLocationProto* _msg = _internal_mutable_parse_resume_location();
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionProto.parse_resume_location)
  return _msg;
}
inline void FunctionProto::set_allocated_parse_resume_location(::zetasql::ParseResumeLocationProto* parse_resume_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parse_resume_location_);
  }
  if (parse_resume_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parse_resume_location));
    if (message_arena != submessage_arena) {
      parse_resume_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parse_resume_location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.parse_resume_location_ = parse_resume_location;
  // @@protoc_insertion_point(field_set_allocated:zetasql.FunctionProto.parse_resume_location)
}

// repeated string templated_sql_function_argument_name = 7;
inline int FunctionProto::_internal_templated_sql_function_argument_name_size() const {
  return _impl_.templated_sql_function_argument_name_.size();
}
inline int FunctionProto::templated_sql_function_argument_name_size() const {
  return _internal_templated_sql_function_argument_name_size();
}
inline void FunctionProto::clear_templated_sql_function_argument_name() {
  _impl_.templated_sql_function_argument_name_.Clear();
}
inline std::string* FunctionProto::add_templated_sql_function_argument_name() {
  std::string* _s = _internal_add_templated_sql_function_argument_name();
  // @@protoc_insertion_point(field_add_mutable:zetasql.FunctionProto.templated_sql_function_argument_name)
  return _s;
}
inline const std::string& FunctionProto::_internal_templated_sql_function_argument_name(int index) const {
  return _impl_.templated_sql_function_argument_name_.Get(index);
}
inline const std::string& FunctionProto::templated_sql_function_argument_name(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.FunctionProto.templated_sql_function_argument_name)
  return _internal_templated_sql_function_argument_name(index);
}
inline std::string* FunctionProto::mutable_templated_sql_function_argument_name(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.FunctionProto.templated_sql_function_argument_name)
  return _impl_.templated_sql_function_argument_name_.Mutable(index);
}
inline void FunctionProto::set_templated_sql_function_argument_name(int index, const std::string& value) {
  _impl_.templated_sql_function_argument_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.FunctionProto.templated_sql_function_argument_name)
}
inline void FunctionProto::set_templated_sql_function_argument_name(int index, std::string&& value) {
  _impl_.templated_sql_function_argument_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.FunctionProto.templated_sql_function_argument_name)
}
inline void FunctionProto::set_templated_sql_function_argument_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.templated_sql_function_argument_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.FunctionProto.templated_sql_function_argument_name)
}
inline void FunctionProto::set_templated_sql_function_argument_name(int index, const char* value, size_t size) {
  _impl_.templated_sql_function_argument_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.FunctionProto.templated_sql_function_argument_name)
}
inline std::string* FunctionProto::_internal_add_templated_sql_function_argument_name() {
  return _impl_.templated_sql_function_argument_name_.Add();
}
inline void FunctionProto::add_templated_sql_function_argument_name(const std::string& value) {
  _impl_.templated_sql_function_argument_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.FunctionProto.templated_sql_function_argument_name)
}
inline void FunctionProto::add_templated_sql_function_argument_name(std::string&& value) {
  _impl_.templated_sql_function_argument_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.FunctionProto.templated_sql_function_argument_name)
}
inline void FunctionProto::add_templated_sql_function_argument_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.templated_sql_function_argument_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.FunctionProto.templated_sql_function_argument_name)
}
inline void FunctionProto::add_templated_sql_function_argument_name(const char* value, size_t size) {
  _impl_.templated_sql_function_argument_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.FunctionProto.templated_sql_function_argument_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FunctionProto::templated_sql_function_argument_name() const {
  // @@protoc_insertion_point(field_list:zetasql.FunctionProto.templated_sql_function_argument_name)
  return _impl_.templated_sql_function_argument_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FunctionProto::mutable_templated_sql_function_argument_name() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.FunctionProto.templated_sql_function_argument_name)
  return &_impl_.templated_sql_function_argument_name_;
}

// -------------------------------------------------------------------

// ResolvedFunctionCallInfoProto

// -------------------------------------------------------------------

// TableValuedFunctionOptionsProto

// optional bool uses_upper_case_sql_name = 1 [default = true];
inline bool TableValuedFunctionOptionsProto::_internal_has_uses_upper_case_sql_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableValuedFunctionOptionsProto::has_uses_upper_case_sql_name() const {
  return _internal_has_uses_upper_case_sql_name();
}
inline void TableValuedFunctionOptionsProto::clear_uses_upper_case_sql_name() {
  _impl_.uses_upper_case_sql_name_ = true;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool TableValuedFunctionOptionsProto::_internal_uses_upper_case_sql_name() const {
  return _impl_.uses_upper_case_sql_name_;
}
inline bool TableValuedFunctionOptionsProto::uses_upper_case_sql_name() const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionOptionsProto.uses_upper_case_sql_name)
  return _internal_uses_upper_case_sql_name();
}
inline void TableValuedFunctionOptionsProto::_internal_set_uses_upper_case_sql_name(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uses_upper_case_sql_name_ = value;
}
inline void TableValuedFunctionOptionsProto::set_uses_upper_case_sql_name(bool value) {
  _internal_set_uses_upper_case_sql_name(value);
  // @@protoc_insertion_point(field_set:zetasql.TableValuedFunctionOptionsProto.uses_upper_case_sql_name)
}

// -------------------------------------------------------------------

// TableValuedFunctionProto

// repeated string name_path = 1;
inline int TableValuedFunctionProto::_internal_name_path_size() const {
  return _impl_.name_path_.size();
}
inline int TableValuedFunctionProto::name_path_size() const {
  return _internal_name_path_size();
}
inline void TableValuedFunctionProto::clear_name_path() {
  _impl_.name_path_.Clear();
}
inline std::string* TableValuedFunctionProto::add_name_path() {
  std::string* _s = _internal_add_name_path();
  // @@protoc_insertion_point(field_add_mutable:zetasql.TableValuedFunctionProto.name_path)
  return _s;
}
inline const std::string& TableValuedFunctionProto::_internal_name_path(int index) const {
  return _impl_.name_path_.Get(index);
}
inline const std::string& TableValuedFunctionProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionProto.name_path)
  return _internal_name_path(index);
}
inline std::string* TableValuedFunctionProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.TableValuedFunctionProto.name_path)
  return _impl_.name_path_.Mutable(index);
}
inline void TableValuedFunctionProto::set_name_path(int index, const std::string& value) {
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.TableValuedFunctionProto.name_path)
}
inline void TableValuedFunctionProto::set_name_path(int index, std::string&& value) {
  _impl_.name_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.TableValuedFunctionProto.name_path)
}
inline void TableValuedFunctionProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.TableValuedFunctionProto.name_path)
}
inline void TableValuedFunctionProto::set_name_path(int index, const char* value, size_t size) {
  _impl_.name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.TableValuedFunctionProto.name_path)
}
inline std::string* TableValuedFunctionProto::_internal_add_name_path() {
  return _impl_.name_path_.Add();
}
inline void TableValuedFunctionProto::add_name_path(const std::string& value) {
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.TableValuedFunctionProto.name_path)
}
inline void TableValuedFunctionProto::add_name_path(std::string&& value) {
  _impl_.name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.TableValuedFunctionProto.name_path)
}
inline void TableValuedFunctionProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.TableValuedFunctionProto.name_path)
}
inline void TableValuedFunctionProto::add_name_path(const char* value, size_t size) {
  _impl_.name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.TableValuedFunctionProto.name_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableValuedFunctionProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.TableValuedFunctionProto.name_path)
  return _impl_.name_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableValuedFunctionProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.TableValuedFunctionProto.name_path)
  return &_impl_.name_path_;
}

// optional .zetasql.FunctionSignatureProto signature = 2;
inline bool TableValuedFunctionProto::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline bool TableValuedFunctionProto::has_signature() const {
  return _internal_has_signature();
}
inline void TableValuedFunctionProto::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::FunctionSignatureProto& TableValuedFunctionProto::_internal_signature() const {
  const ::zetasql::FunctionSignatureProto* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::FunctionSignatureProto&>(
      ::zetasql::_FunctionSignatureProto_default_instance_);
}
inline const ::zetasql::FunctionSignatureProto& TableValuedFunctionProto::signature() const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionProto.signature)
  return _internal_signature();
}
inline void TableValuedFunctionProto::unsafe_arena_set_allocated_signature(
    ::zetasql::FunctionSignatureProto* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = signature;
  if (signature) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TableValuedFunctionProto.signature)
}
inline ::zetasql::FunctionSignatureProto* TableValuedFunctionProto::release_signature() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::FunctionSignatureProto* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::FunctionSignatureProto* TableValuedFunctionProto::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.TableValuedFunctionProto.signature)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::FunctionSignatureProto* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* TableValuedFunctionProto::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaForAllocation());
    _impl_.signature_ = p;
  }
  return _impl_.signature_;
}
inline ::zetasql::FunctionSignatureProto* TableValuedFunctionProto::mutable_signature() {
  ::zetasql::FunctionSignatureProto* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:zetasql.TableValuedFunctionProto.signature)
  return _msg;
}
inline void TableValuedFunctionProto::set_allocated_signature(::zetasql::FunctionSignatureProto* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signature_;
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signature);
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TableValuedFunctionProto.signature)
}

// optional .zetasql.TableValuedFunctionOptionsProto options = 9;
inline bool TableValuedFunctionProto::_internal_has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline bool TableValuedFunctionProto::has_options() const {
  return _internal_has_options();
}
inline void TableValuedFunctionProto::clear_options() {
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::TableValuedFunctionOptionsProto& TableValuedFunctionProto::_internal_options() const {
  const ::zetasql::TableValuedFunctionOptionsProto* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TableValuedFunctionOptionsProto&>(
      ::zetasql::_TableValuedFunctionOptionsProto_default_instance_);
}
inline const ::zetasql::TableValuedFunctionOptionsProto& TableValuedFunctionProto::options() const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionProto.options)
  return _internal_options();
}
inline void TableValuedFunctionProto::unsafe_arena_set_allocated_options(
    ::zetasql::TableValuedFunctionOptionsProto* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TableValuedFunctionProto.options)
}
inline ::zetasql::TableValuedFunctionOptionsProto* TableValuedFunctionProto::release_options() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::TableValuedFunctionOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TableValuedFunctionOptionsProto* TableValuedFunctionProto::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:zetasql.TableValuedFunctionProto.options)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::TableValuedFunctionOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::zetasql::TableValuedFunctionOptionsProto* TableValuedFunctionProto::_internal_mutable_options() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TableValuedFunctionOptionsProto>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::zetasql::TableValuedFunctionOptionsProto* TableValuedFunctionProto::mutable_options() {
  ::zetasql::TableValuedFunctionOptionsProto* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:zetasql.TableValuedFunctionProto.options)
  return _msg;
}
inline void TableValuedFunctionProto::set_allocated_options(::zetasql::TableValuedFunctionOptionsProto* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TableValuedFunctionProto.options)
}

// optional .zetasql.FunctionEnums.TableValuedFunctionType type = 3;
inline bool TableValuedFunctionProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TableValuedFunctionProto::has_type() const {
  return _internal_has_type();
}
inline void TableValuedFunctionProto::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::zetasql::FunctionEnums_TableValuedFunctionType TableValuedFunctionProto::_internal_type() const {
  return static_cast< ::zetasql::FunctionEnums_TableValuedFunctionType >(_impl_.type_);
}
inline ::zetasql::FunctionEnums_TableValuedFunctionType TableValuedFunctionProto::type() const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionProto.type)
  return _internal_type();
}
inline void TableValuedFunctionProto::_internal_set_type(::zetasql::FunctionEnums_TableValuedFunctionType value) {
  assert(::zetasql::FunctionEnums_TableValuedFunctionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.type_ = value;
}
inline void TableValuedFunctionProto::set_type(::zetasql::FunctionEnums_TableValuedFunctionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zetasql.TableValuedFunctionProto.type)
}

// optional .zetasql.FunctionEnums.Volatility volatility = 8;
inline bool TableValuedFunctionProto::_internal_has_volatility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TableValuedFunctionProto::has_volatility() const {
  return _internal_has_volatility();
}
inline void TableValuedFunctionProto::clear_volatility() {
  _impl_.volatility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::zetasql::FunctionEnums_Volatility TableValuedFunctionProto::_internal_volatility() const {
  return static_cast< ::zetasql::FunctionEnums_Volatility >(_impl_.volatility_);
}
inline ::zetasql::FunctionEnums_Volatility TableValuedFunctionProto::volatility() const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionProto.volatility)
  return _internal_volatility();
}
inline void TableValuedFunctionProto::_internal_set_volatility(::zetasql::FunctionEnums_Volatility value) {
  assert(::zetasql::FunctionEnums_Volatility_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.volatility_ = value;
}
inline void TableValuedFunctionProto::set_volatility(::zetasql::FunctionEnums_Volatility value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:zetasql.TableValuedFunctionProto.volatility)
}

// optional .zetasql.ParseResumeLocationProto parse_resume_location = 6;
inline bool TableValuedFunctionProto::_internal_has_parse_resume_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parse_resume_location_ != nullptr);
  return value;
}
inline bool TableValuedFunctionProto::has_parse_resume_location() const {
  return _internal_has_parse_resume_location();
}
inline const ::zetasql::ParseResumeLocationProto& TableValuedFunctionProto::_internal_parse_resume_location() const {
  const ::zetasql::ParseResumeLocationProto* p = _impl_.parse_resume_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ParseResumeLocationProto&>(
      ::zetasql::_ParseResumeLocationProto_default_instance_);
}
inline const ::zetasql::ParseResumeLocationProto& TableValuedFunctionProto::parse_resume_location() const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionProto.parse_resume_location)
  return _internal_parse_resume_location();
}
inline void TableValuedFunctionProto::unsafe_arena_set_allocated_parse_resume_location(
    ::zetasql::ParseResumeLocationProto* parse_resume_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parse_resume_location_);
  }
  _impl_.parse_resume_location_ = parse_resume_location;
  if (parse_resume_location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TableValuedFunctionProto.parse_resume_location)
}
inline ::zetasql::ParseResumeLocationProto* TableValuedFunctionProto::release_parse_resume_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ParseResumeLocationProto* temp = _impl_.parse_resume_location_;
  _impl_.parse_resume_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ParseResumeLocationProto* TableValuedFunctionProto::unsafe_arena_release_parse_resume_location() {
  // @@protoc_insertion_point(field_release:zetasql.TableValuedFunctionProto.parse_resume_location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ParseResumeLocationProto* temp = _impl_.parse_resume_location_;
  _impl_.parse_resume_location_ = nullptr;
  return temp;
}
inline ::zetasql::ParseResumeLocationProto* TableValuedFunctionProto::_internal_mutable_parse_resume_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.parse_resume_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ParseResumeLocationProto>(GetArenaForAllocation());
    _impl_.parse_resume_location_ = p;
  }
  return _impl_.parse_resume_location_;
}
inline ::zetasql::ParseResumeLocationProto* TableValuedFunctionProto::mutable_parse_resume_location() {
  ::zetasql::ParseResumeLocationProto* _msg = _internal_mutable_parse_resume_location();
  // @@protoc_insertion_point(field_mutable:zetasql.TableValuedFunctionProto.parse_resume_location)
  return _msg;
}
inline void TableValuedFunctionProto::set_allocated_parse_resume_location(::zetasql::ParseResumeLocationProto* parse_resume_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parse_resume_location_);
  }
  if (parse_resume_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parse_resume_location));
    if (message_arena != submessage_arena) {
      parse_resume_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parse_resume_location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.parse_resume_location_ = parse_resume_location;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TableValuedFunctionProto.parse_resume_location)
}

// repeated string argument_name = 5;
inline int TableValuedFunctionProto::_internal_argument_name_size() const {
  return _impl_.argument_name_.size();
}
inline int TableValuedFunctionProto::argument_name_size() const {
  return _internal_argument_name_size();
}
inline void TableValuedFunctionProto::clear_argument_name() {
  _impl_.argument_name_.Clear();
}
inline std::string* TableValuedFunctionProto::add_argument_name() {
  std::string* _s = _internal_add_argument_name();
  // @@protoc_insertion_point(field_add_mutable:zetasql.TableValuedFunctionProto.argument_name)
  return _s;
}
inline const std::string& TableValuedFunctionProto::_internal_argument_name(int index) const {
  return _impl_.argument_name_.Get(index);
}
inline const std::string& TableValuedFunctionProto::argument_name(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionProto.argument_name)
  return _internal_argument_name(index);
}
inline std::string* TableValuedFunctionProto::mutable_argument_name(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.TableValuedFunctionProto.argument_name)
  return _impl_.argument_name_.Mutable(index);
}
inline void TableValuedFunctionProto::set_argument_name(int index, const std::string& value) {
  _impl_.argument_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.TableValuedFunctionProto.argument_name)
}
inline void TableValuedFunctionProto::set_argument_name(int index, std::string&& value) {
  _impl_.argument_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.TableValuedFunctionProto.argument_name)
}
inline void TableValuedFunctionProto::set_argument_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.argument_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.TableValuedFunctionProto.argument_name)
}
inline void TableValuedFunctionProto::set_argument_name(int index, const char* value, size_t size) {
  _impl_.argument_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.TableValuedFunctionProto.argument_name)
}
inline std::string* TableValuedFunctionProto::_internal_add_argument_name() {
  return _impl_.argument_name_.Add();
}
inline void TableValuedFunctionProto::add_argument_name(const std::string& value) {
  _impl_.argument_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.TableValuedFunctionProto.argument_name)
}
inline void TableValuedFunctionProto::add_argument_name(std::string&& value) {
  _impl_.argument_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.TableValuedFunctionProto.argument_name)
}
inline void TableValuedFunctionProto::add_argument_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.argument_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.TableValuedFunctionProto.argument_name)
}
inline void TableValuedFunctionProto::add_argument_name(const char* value, size_t size) {
  _impl_.argument_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.TableValuedFunctionProto.argument_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableValuedFunctionProto::argument_name() const {
  // @@protoc_insertion_point(field_list:zetasql.TableValuedFunctionProto.argument_name)
  return _impl_.argument_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableValuedFunctionProto::mutable_argument_name() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.TableValuedFunctionProto.argument_name)
  return &_impl_.argument_name_;
}

// optional string custom_context = 7;
inline bool TableValuedFunctionProto::_internal_has_custom_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableValuedFunctionProto::has_custom_context() const {
  return _internal_has_custom_context();
}
inline void TableValuedFunctionProto::clear_custom_context() {
  _impl_.custom_context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TableValuedFunctionProto::custom_context() const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionProto.custom_context)
  return _internal_custom_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableValuedFunctionProto::set_custom_context(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.custom_context_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.TableValuedFunctionProto.custom_context)
}
inline std::string* TableValuedFunctionProto::mutable_custom_context() {
  std::string* _s = _internal_mutable_custom_context();
  // @@protoc_insertion_point(field_mutable:zetasql.TableValuedFunctionProto.custom_context)
  return _s;
}
inline const std::string& TableValuedFunctionProto::_internal_custom_context() const {
  return _impl_.custom_context_.Get();
}
inline void TableValuedFunctionProto::_internal_set_custom_context(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.custom_context_.Set(value, GetArenaForAllocation());
}
inline std::string* TableValuedFunctionProto::_internal_mutable_custom_context() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.custom_context_.Mutable(GetArenaForAllocation());
}
inline std::string* TableValuedFunctionProto::release_custom_context() {
  // @@protoc_insertion_point(field_release:zetasql.TableValuedFunctionProto.custom_context)
  if (!_internal_has_custom_context()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.custom_context_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_context_.IsDefault()) {
    _impl_.custom_context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TableValuedFunctionProto::set_allocated_custom_context(std::string* custom_context) {
  if (custom_context != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.custom_context_.SetAllocated(custom_context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_context_.IsDefault()) {
    _impl_.custom_context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.TableValuedFunctionProto.custom_context)
}

// optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 10;
inline bool TableValuedFunctionProto::_internal_has_anonymization_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.anonymization_info_ != nullptr);
  return value;
}
inline bool TableValuedFunctionProto::has_anonymization_info() const {
  return _internal_has_anonymization_info();
}
inline const ::zetasql::SimpleAnonymizationInfoProto& TableValuedFunctionProto::_internal_anonymization_info() const {
  const ::zetasql::SimpleAnonymizationInfoProto* p = _impl_.anonymization_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::SimpleAnonymizationInfoProto&>(
      ::zetasql::_SimpleAnonymizationInfoProto_default_instance_);
}
inline const ::zetasql::SimpleAnonymizationInfoProto& TableValuedFunctionProto::anonymization_info() const {
  // @@protoc_insertion_point(field_get:zetasql.TableValuedFunctionProto.anonymization_info)
  return _internal_anonymization_info();
}
inline void TableValuedFunctionProto::unsafe_arena_set_allocated_anonymization_info(
    ::zetasql::SimpleAnonymizationInfoProto* anonymization_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anonymization_info_);
  }
  _impl_.anonymization_info_ = anonymization_info;
  if (anonymization_info) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TableValuedFunctionProto.anonymization_info)
}
inline ::zetasql::SimpleAnonymizationInfoProto* TableValuedFunctionProto::release_anonymization_info() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::SimpleAnonymizationInfoProto* temp = _impl_.anonymization_info_;
  _impl_.anonymization_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::SimpleAnonymizationInfoProto* TableValuedFunctionProto::unsafe_arena_release_anonymization_info() {
  // @@protoc_insertion_point(field_release:zetasql.TableValuedFunctionProto.anonymization_info)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::SimpleAnonymizationInfoProto* temp = _impl_.anonymization_info_;
  _impl_.anonymization_info_ = nullptr;
  return temp;
}
inline ::zetasql::SimpleAnonymizationInfoProto* TableValuedFunctionProto::_internal_mutable_anonymization_info() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.anonymization_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::SimpleAnonymizationInfoProto>(GetArenaForAllocation());
    _impl_.anonymization_info_ = p;
  }
  return _impl_.anonymization_info_;
}
inline ::zetasql::SimpleAnonymizationInfoProto* TableValuedFunctionProto::mutable_anonymization_info() {
  ::zetasql::SimpleAnonymizationInfoProto* _msg = _internal_mutable_anonymization_info();
  // @@protoc_insertion_point(field_mutable:zetasql.TableValuedFunctionProto.anonymization_info)
  return _msg;
}
inline void TableValuedFunctionProto::set_allocated_anonymization_info(::zetasql::SimpleAnonymizationInfoProto* anonymization_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anonymization_info_);
  }
  if (anonymization_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anonymization_info));
    if (message_arena != submessage_arena) {
      anonymization_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anonymization_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.anonymization_info_ = anonymization_info;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TableValuedFunctionProto.anonymization_info)
}

// -------------------------------------------------------------------

// TVFArgumentProto

// optional .zetasql.ValueWithTypeProto scalar_argument = 1;
inline bool TVFArgumentProto::_internal_has_scalar_argument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scalar_argument_ != nullptr);
  return value;
}
inline bool TVFArgumentProto::has_scalar_argument() const {
  return _internal_has_scalar_argument();
}
inline const ::zetasql::ValueWithTypeProto& TVFArgumentProto::_internal_scalar_argument() const {
  const ::zetasql::ValueWithTypeProto* p = _impl_.scalar_argument_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ValueWithTypeProto&>(
      ::zetasql::_ValueWithTypeProto_default_instance_);
}
inline const ::zetasql::ValueWithTypeProto& TVFArgumentProto::scalar_argument() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFArgumentProto.scalar_argument)
  return _internal_scalar_argument();
}
inline void TVFArgumentProto::unsafe_arena_set_allocated_scalar_argument(
    ::zetasql::ValueWithTypeProto* scalar_argument) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scalar_argument_);
  }
  _impl_.scalar_argument_ = scalar_argument;
  if (scalar_argument) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFArgumentProto.scalar_argument)
}
inline ::zetasql::ValueWithTypeProto* TVFArgumentProto::release_scalar_argument() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::ValueWithTypeProto* temp = _impl_.scalar_argument_;
  _impl_.scalar_argument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ValueWithTypeProto* TVFArgumentProto::unsafe_arena_release_scalar_argument() {
  // @@protoc_insertion_point(field_release:zetasql.TVFArgumentProto.scalar_argument)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::ValueWithTypeProto* temp = _impl_.scalar_argument_;
  _impl_.scalar_argument_ = nullptr;
  return temp;
}
inline ::zetasql::ValueWithTypeProto* TVFArgumentProto::_internal_mutable_scalar_argument() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scalar_argument_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ValueWithTypeProto>(GetArenaForAllocation());
    _impl_.scalar_argument_ = p;
  }
  return _impl_.scalar_argument_;
}
inline ::zetasql::ValueWithTypeProto* TVFArgumentProto::mutable_scalar_argument() {
  ::zetasql::ValueWithTypeProto* _msg = _internal_mutable_scalar_argument();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFArgumentProto.scalar_argument)
  return _msg;
}
inline void TVFArgumentProto::set_allocated_scalar_argument(::zetasql::ValueWithTypeProto* scalar_argument) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scalar_argument_);
  }
  if (scalar_argument) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scalar_argument));
    if (message_arena != submessage_arena) {
      scalar_argument = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar_argument, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scalar_argument_ = scalar_argument;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFArgumentProto.scalar_argument)
}

// optional .zetasql.TVFRelationProto relation_argument = 2;
inline bool TVFArgumentProto::_internal_has_relation_argument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relation_argument_ != nullptr);
  return value;
}
inline bool TVFArgumentProto::has_relation_argument() const {
  return _internal_has_relation_argument();
}
inline void TVFArgumentProto::clear_relation_argument() {
  if (_impl_.relation_argument_ != nullptr) _impl_.relation_argument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TVFRelationProto& TVFArgumentProto::_internal_relation_argument() const {
  const ::zetasql::TVFRelationProto* p = _impl_.relation_argument_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TVFRelationProto&>(
      ::zetasql::_TVFRelationProto_default_instance_);
}
inline const ::zetasql::TVFRelationProto& TVFArgumentProto::relation_argument() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFArgumentProto.relation_argument)
  return _internal_relation_argument();
}
inline void TVFArgumentProto::unsafe_arena_set_allocated_relation_argument(
    ::zetasql::TVFRelationProto* relation_argument) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relation_argument_);
  }
  _impl_.relation_argument_ = relation_argument;
  if (relation_argument) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFArgumentProto.relation_argument)
}
inline ::zetasql::TVFRelationProto* TVFArgumentProto::release_relation_argument() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TVFRelationProto* temp = _impl_.relation_argument_;
  _impl_.relation_argument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TVFRelationProto* TVFArgumentProto::unsafe_arena_release_relation_argument() {
  // @@protoc_insertion_point(field_release:zetasql.TVFArgumentProto.relation_argument)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TVFRelationProto* temp = _impl_.relation_argument_;
  _impl_.relation_argument_ = nullptr;
  return temp;
}
inline ::zetasql::TVFRelationProto* TVFArgumentProto::_internal_mutable_relation_argument() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.relation_argument_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TVFRelationProto>(GetArenaForAllocation());
    _impl_.relation_argument_ = p;
  }
  return _impl_.relation_argument_;
}
inline ::zetasql::TVFRelationProto* TVFArgumentProto::mutable_relation_argument() {
  ::zetasql::TVFRelationProto* _msg = _internal_mutable_relation_argument();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFArgumentProto.relation_argument)
  return _msg;
}
inline void TVFArgumentProto::set_allocated_relation_argument(::zetasql::TVFRelationProto* relation_argument) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relation_argument_;
  }
  if (relation_argument) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relation_argument);
    if (message_arena != submessage_arena) {
      relation_argument = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relation_argument, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.relation_argument_ = relation_argument;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFArgumentProto.relation_argument)
}

// optional .zetasql.TVFModelProto model_argument = 3;
inline bool TVFArgumentProto::_internal_has_model_argument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_argument_ != nullptr);
  return value;
}
inline bool TVFArgumentProto::has_model_argument() const {
  return _internal_has_model_argument();
}
inline void TVFArgumentProto::clear_model_argument() {
  if (_impl_.model_argument_ != nullptr) _impl_.model_argument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::TVFModelProto& TVFArgumentProto::_internal_model_argument() const {
  const ::zetasql::TVFModelProto* p = _impl_.model_argument_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TVFModelProto&>(
      ::zetasql::_TVFModelProto_default_instance_);
}
inline const ::zetasql::TVFModelProto& TVFArgumentProto::model_argument() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFArgumentProto.model_argument)
  return _internal_model_argument();
}
inline void TVFArgumentProto::unsafe_arena_set_allocated_model_argument(
    ::zetasql::TVFModelProto* model_argument) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_argument_);
  }
  _impl_.model_argument_ = model_argument;
  if (model_argument) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFArgumentProto.model_argument)
}
inline ::zetasql::TVFModelProto* TVFArgumentProto::release_model_argument() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::TVFModelProto* temp = _impl_.model_argument_;
  _impl_.model_argument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TVFModelProto* TVFArgumentProto::unsafe_arena_release_model_argument() {
  // @@protoc_insertion_point(field_release:zetasql.TVFArgumentProto.model_argument)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::TVFModelProto* temp = _impl_.model_argument_;
  _impl_.model_argument_ = nullptr;
  return temp;
}
inline ::zetasql::TVFModelProto* TVFArgumentProto::_internal_mutable_model_argument() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.model_argument_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TVFModelProto>(GetArenaForAllocation());
    _impl_.model_argument_ = p;
  }
  return _impl_.model_argument_;
}
inline ::zetasql::TVFModelProto* TVFArgumentProto::mutable_model_argument() {
  ::zetasql::TVFModelProto* _msg = _internal_mutable_model_argument();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFArgumentProto.model_argument)
  return _msg;
}
inline void TVFArgumentProto::set_allocated_model_argument(::zetasql::TVFModelProto* model_argument) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.model_argument_;
  }
  if (model_argument) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_argument);
    if (message_arena != submessage_arena) {
      model_argument = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_argument, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.model_argument_ = model_argument;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFArgumentProto.model_argument)
}

// optional .zetasql.TVFConnectionProto connection_argument = 4;
inline bool TVFArgumentProto::_internal_has_connection_argument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_argument_ != nullptr);
  return value;
}
inline bool TVFArgumentProto::has_connection_argument() const {
  return _internal_has_connection_argument();
}
inline void TVFArgumentProto::clear_connection_argument() {
  if (_impl_.connection_argument_ != nullptr) _impl_.connection_argument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::TVFConnectionProto& TVFArgumentProto::_internal_connection_argument() const {
  const ::zetasql::TVFConnectionProto* p = _impl_.connection_argument_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TVFConnectionProto&>(
      ::zetasql::_TVFConnectionProto_default_instance_);
}
inline const ::zetasql::TVFConnectionProto& TVFArgumentProto::connection_argument() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFArgumentProto.connection_argument)
  return _internal_connection_argument();
}
inline void TVFArgumentProto::unsafe_arena_set_allocated_connection_argument(
    ::zetasql::TVFConnectionProto* connection_argument) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_argument_);
  }
  _impl_.connection_argument_ = connection_argument;
  if (connection_argument) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFArgumentProto.connection_argument)
}
inline ::zetasql::TVFConnectionProto* TVFArgumentProto::release_connection_argument() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::TVFConnectionProto* temp = _impl_.connection_argument_;
  _impl_.connection_argument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TVFConnectionProto* TVFArgumentProto::unsafe_arena_release_connection_argument() {
  // @@protoc_insertion_point(field_release:zetasql.TVFArgumentProto.connection_argument)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::TVFConnectionProto* temp = _impl_.connection_argument_;
  _impl_.connection_argument_ = nullptr;
  return temp;
}
inline ::zetasql::TVFConnectionProto* TVFArgumentProto::_internal_mutable_connection_argument() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.connection_argument_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TVFConnectionProto>(GetArenaForAllocation());
    _impl_.connection_argument_ = p;
  }
  return _impl_.connection_argument_;
}
inline ::zetasql::TVFConnectionProto* TVFArgumentProto::mutable_connection_argument() {
  ::zetasql::TVFConnectionProto* _msg = _internal_mutable_connection_argument();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFArgumentProto.connection_argument)
  return _msg;
}
inline void TVFArgumentProto::set_allocated_connection_argument(::zetasql::TVFConnectionProto* connection_argument) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_argument_;
  }
  if (connection_argument) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_argument);
    if (message_arena != submessage_arena) {
      connection_argument = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_argument, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.connection_argument_ = connection_argument;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFArgumentProto.connection_argument)
}

// optional .zetasql.TVFDescriptorProto descriptor_argument = 5;
inline bool TVFArgumentProto::_internal_has_descriptor_argument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.descriptor_argument_ != nullptr);
  return value;
}
inline bool TVFArgumentProto::has_descriptor_argument() const {
  return _internal_has_descriptor_argument();
}
inline void TVFArgumentProto::clear_descriptor_argument() {
  if (_impl_.descriptor_argument_ != nullptr) _impl_.descriptor_argument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::zetasql::TVFDescriptorProto& TVFArgumentProto::_internal_descriptor_argument() const {
  const ::zetasql::TVFDescriptorProto* p = _impl_.descriptor_argument_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TVFDescriptorProto&>(
      ::zetasql::_TVFDescriptorProto_default_instance_);
}
inline const ::zetasql::TVFDescriptorProto& TVFArgumentProto::descriptor_argument() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFArgumentProto.descriptor_argument)
  return _internal_descriptor_argument();
}
inline void TVFArgumentProto::unsafe_arena_set_allocated_descriptor_argument(
    ::zetasql::TVFDescriptorProto* descriptor_argument) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.descriptor_argument_);
  }
  _impl_.descriptor_argument_ = descriptor_argument;
  if (descriptor_argument) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFArgumentProto.descriptor_argument)
}
inline ::zetasql::TVFDescriptorProto* TVFArgumentProto::release_descriptor_argument() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::TVFDescriptorProto* temp = _impl_.descriptor_argument_;
  _impl_.descriptor_argument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TVFDescriptorProto* TVFArgumentProto::unsafe_arena_release_descriptor_argument() {
  // @@protoc_insertion_point(field_release:zetasql.TVFArgumentProto.descriptor_argument)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::TVFDescriptorProto* temp = _impl_.descriptor_argument_;
  _impl_.descriptor_argument_ = nullptr;
  return temp;
}
inline ::zetasql::TVFDescriptorProto* TVFArgumentProto::_internal_mutable_descriptor_argument() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.descriptor_argument_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TVFDescriptorProto>(GetArenaForAllocation());
    _impl_.descriptor_argument_ = p;
  }
  return _impl_.descriptor_argument_;
}
inline ::zetasql::TVFDescriptorProto* TVFArgumentProto::mutable_descriptor_argument() {
  ::zetasql::TVFDescriptorProto* _msg = _internal_mutable_descriptor_argument();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFArgumentProto.descriptor_argument)
  return _msg;
}
inline void TVFArgumentProto::set_allocated_descriptor_argument(::zetasql::TVFDescriptorProto* descriptor_argument) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.descriptor_argument_;
  }
  if (descriptor_argument) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(descriptor_argument);
    if (message_arena != submessage_arena) {
      descriptor_argument = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, descriptor_argument, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.descriptor_argument_ = descriptor_argument;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFArgumentProto.descriptor_argument)
}

// -------------------------------------------------------------------

// TVFSignatureOptionsProto

// repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 1;
inline int TVFSignatureOptionsProto::_internal_additional_deprecation_warning_size() const {
  return _impl_.additional_deprecation_warning_.size();
}
inline int TVFSignatureOptionsProto::additional_deprecation_warning_size() const {
  return _internal_additional_deprecation_warning_size();
}
inline ::zetasql::FreestandingDeprecationWarning* TVFSignatureOptionsProto::mutable_additional_deprecation_warning(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.TVFSignatureOptionsProto.additional_deprecation_warning)
  return _impl_.additional_deprecation_warning_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning >*
TVFSignatureOptionsProto::mutable_additional_deprecation_warning() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.TVFSignatureOptionsProto.additional_deprecation_warning)
  return &_impl_.additional_deprecation_warning_;
}
inline const ::zetasql::FreestandingDeprecationWarning& TVFSignatureOptionsProto::_internal_additional_deprecation_warning(int index) const {
  return _impl_.additional_deprecation_warning_.Get(index);
}
inline const ::zetasql::FreestandingDeprecationWarning& TVFSignatureOptionsProto::additional_deprecation_warning(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.TVFSignatureOptionsProto.additional_deprecation_warning)
  return _internal_additional_deprecation_warning(index);
}
inline ::zetasql::FreestandingDeprecationWarning* TVFSignatureOptionsProto::_internal_add_additional_deprecation_warning() {
  return _impl_.additional_deprecation_warning_.Add();
}
inline ::zetasql::FreestandingDeprecationWarning* TVFSignatureOptionsProto::add_additional_deprecation_warning() {
  ::zetasql::FreestandingDeprecationWarning* _add = _internal_add_additional_deprecation_warning();
  // @@protoc_insertion_point(field_add:zetasql.TVFSignatureOptionsProto.additional_deprecation_warning)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::FreestandingDeprecationWarning >&
TVFSignatureOptionsProto::additional_deprecation_warning() const {
  // @@protoc_insertion_point(field_list:zetasql.TVFSignatureOptionsProto.additional_deprecation_warning)
  return _impl_.additional_deprecation_warning_;
}

// -------------------------------------------------------------------

// TVFSignatureProto

// repeated .zetasql.TVFArgumentProto argument = 1;
inline int TVFSignatureProto::_internal_argument_size() const {
  return _impl_.argument_.size();
}
inline int TVFSignatureProto::argument_size() const {
  return _internal_argument_size();
}
inline void TVFSignatureProto::clear_argument() {
  _impl_.argument_.Clear();
}
inline ::zetasql::TVFArgumentProto* TVFSignatureProto::mutable_argument(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.TVFSignatureProto.argument)
  return _impl_.argument_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFArgumentProto >*
TVFSignatureProto::mutable_argument() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.TVFSignatureProto.argument)
  return &_impl_.argument_;
}
inline const ::zetasql::TVFArgumentProto& TVFSignatureProto::_internal_argument(int index) const {
  return _impl_.argument_.Get(index);
}
inline const ::zetasql::TVFArgumentProto& TVFSignatureProto::argument(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.TVFSignatureProto.argument)
  return _internal_argument(index);
}
inline ::zetasql::TVFArgumentProto* TVFSignatureProto::_internal_add_argument() {
  return _impl_.argument_.Add();
}
inline ::zetasql::TVFArgumentProto* TVFSignatureProto::add_argument() {
  ::zetasql::TVFArgumentProto* _add = _internal_add_argument();
  // @@protoc_insertion_point(field_add:zetasql.TVFSignatureProto.argument)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TVFArgumentProto >&
TVFSignatureProto::argument() const {
  // @@protoc_insertion_point(field_list:zetasql.TVFSignatureProto.argument)
  return _impl_.argument_;
}

// optional .zetasql.TVFRelationProto output_schema = 2;
inline bool TVFSignatureProto::_internal_has_output_schema() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_schema_ != nullptr);
  return value;
}
inline bool TVFSignatureProto::has_output_schema() const {
  return _internal_has_output_schema();
}
inline void TVFSignatureProto::clear_output_schema() {
  if (_impl_.output_schema_ != nullptr) _impl_.output_schema_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::TVFRelationProto& TVFSignatureProto::_internal_output_schema() const {
  const ::zetasql::TVFRelationProto* p = _impl_.output_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TVFRelationProto&>(
      ::zetasql::_TVFRelationProto_default_instance_);
}
inline const ::zetasql::TVFRelationProto& TVFSignatureProto::output_schema() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFSignatureProto.output_schema)
  return _internal_output_schema();
}
inline void TVFSignatureProto::unsafe_arena_set_allocated_output_schema(
    ::zetasql::TVFRelationProto* output_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_schema_);
  }
  _impl_.output_schema_ = output_schema;
  if (output_schema) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFSignatureProto.output_schema)
}
inline ::zetasql::TVFRelationProto* TVFSignatureProto::release_output_schema() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TVFRelationProto* temp = _impl_.output_schema_;
  _impl_.output_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TVFRelationProto* TVFSignatureProto::unsafe_arena_release_output_schema() {
  // @@protoc_insertion_point(field_release:zetasql.TVFSignatureProto.output_schema)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TVFRelationProto* temp = _impl_.output_schema_;
  _impl_.output_schema_ = nullptr;
  return temp;
}
inline ::zetasql::TVFRelationProto* TVFSignatureProto::_internal_mutable_output_schema() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.output_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TVFRelationProto>(GetArenaForAllocation());
    _impl_.output_schema_ = p;
  }
  return _impl_.output_schema_;
}
inline ::zetasql::TVFRelationProto* TVFSignatureProto::mutable_output_schema() {
  ::zetasql::TVFRelationProto* _msg = _internal_mutable_output_schema();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFSignatureProto.output_schema)
  return _msg;
}
inline void TVFSignatureProto::set_allocated_output_schema(::zetasql::TVFRelationProto* output_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.output_schema_;
  }
  if (output_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(output_schema);
    if (message_arena != submessage_arena) {
      output_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_schema, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.output_schema_ = output_schema;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFSignatureProto.output_schema)
}

// optional .zetasql.TVFSignatureOptionsProto options = 3;
inline bool TVFSignatureProto::_internal_has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline bool TVFSignatureProto::has_options() const {
  return _internal_has_options();
}
inline void TVFSignatureProto::clear_options() {
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TVFSignatureOptionsProto& TVFSignatureProto::_internal_options() const {
  const ::zetasql::TVFSignatureOptionsProto* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TVFSignatureOptionsProto&>(
      ::zetasql::_TVFSignatureOptionsProto_default_instance_);
}
inline const ::zetasql::TVFSignatureOptionsProto& TVFSignatureProto::options() const {
  // @@protoc_insertion_point(field_get:zetasql.TVFSignatureProto.options)
  return _internal_options();
}
inline void TVFSignatureProto::unsafe_arena_set_allocated_options(
    ::zetasql::TVFSignatureOptionsProto* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TVFSignatureProto.options)
}
inline ::zetasql::TVFSignatureOptionsProto* TVFSignatureProto::release_options() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TVFSignatureOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TVFSignatureOptionsProto* TVFSignatureProto::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:zetasql.TVFSignatureProto.options)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TVFSignatureOptionsProto* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::zetasql::TVFSignatureOptionsProto* TVFSignatureProto::_internal_mutable_options() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TVFSignatureOptionsProto>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::zetasql::TVFSignatureOptionsProto* TVFSignatureProto::mutable_options() {
  ::zetasql::TVFSignatureOptionsProto* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:zetasql.TVFSignatureProto.options)
  return _msg;
}
inline void TVFSignatureProto::set_allocated_options(::zetasql::TVFSignatureOptionsProto* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TVFSignatureProto.options)
}

// -------------------------------------------------------------------

// ProcedureProto

// repeated string name_path = 1;
inline int ProcedureProto::_internal_name_path_size() const {
  return _impl_.name_path_.size();
}
inline int ProcedureProto::name_path_size() const {
  return _internal_name_path_size();
}
inline void ProcedureProto::clear_name_path() {
  _impl_.name_path_.Clear();
}
inline std::string* ProcedureProto::add_name_path() {
  std::string* _s = _internal_add_name_path();
  // @@protoc_insertion_point(field_add_mutable:zetasql.ProcedureProto.name_path)
  return _s;
}
inline const std::string& ProcedureProto::_internal_name_path(int index) const {
  return _impl_.name_path_.Get(index);
}
inline const std::string& ProcedureProto::name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ProcedureProto.name_path)
  return _internal_name_path(index);
}
inline std::string* ProcedureProto::mutable_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ProcedureProto.name_path)
  return _impl_.name_path_.Mutable(index);
}
inline void ProcedureProto::set_name_path(int index, const std::string& value) {
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.ProcedureProto.name_path)
}
inline void ProcedureProto::set_name_path(int index, std::string&& value) {
  _impl_.name_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.ProcedureProto.name_path)
}
inline void ProcedureProto::set_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ProcedureProto.name_path)
}
inline void ProcedureProto::set_name_path(int index, const char* value, size_t size) {
  _impl_.name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ProcedureProto.name_path)
}
inline std::string* ProcedureProto::_internal_add_name_path() {
  return _impl_.name_path_.Add();
}
inline void ProcedureProto::add_name_path(const std::string& value) {
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ProcedureProto.name_path)
}
inline void ProcedureProto::add_name_path(std::string&& value) {
  _impl_.name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ProcedureProto.name_path)
}
inline void ProcedureProto::add_name_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ProcedureProto.name_path)
}
inline void ProcedureProto::add_name_path(const char* value, size_t size) {
  _impl_.name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ProcedureProto.name_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcedureProto::name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ProcedureProto.name_path)
  return _impl_.name_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcedureProto::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ProcedureProto.name_path)
  return &_impl_.name_path_;
}

// optional .zetasql.FunctionSignatureProto signature = 2;
inline bool ProcedureProto::_internal_has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline bool ProcedureProto::has_signature() const {
  return _internal_has_signature();
}
inline void ProcedureProto::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::FunctionSignatureProto& ProcedureProto::_internal_signature() const {
  const ::zetasql::FunctionSignatureProto* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::FunctionSignatureProto&>(
      ::zetasql::_FunctionSignatureProto_default_instance_);
}
inline const ::zetasql::FunctionSignatureProto& ProcedureProto::signature() const {
  // @@protoc_insertion_point(field_get:zetasql.ProcedureProto.signature)
  return _internal_signature();
}
inline void ProcedureProto::unsafe_arena_set_allocated_signature(
    ::zetasql::FunctionSignatureProto* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = signature;
  if (signature) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ProcedureProto.signature)
}
inline ::zetasql::FunctionSignatureProto* ProcedureProto::release_signature() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::FunctionSignatureProto* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ProcedureProto::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:zetasql.ProcedureProto.signature)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::FunctionSignatureProto* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::zetasql::FunctionSignatureProto* ProcedureProto::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::FunctionSignatureProto>(GetArenaForAllocation());
    _impl_.signature_ = p;
  }
  return _impl_.signature_;
}
inline ::zetasql::FunctionSignatureProto* ProcedureProto::mutable_signature() {
  ::zetasql::FunctionSignatureProto* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:zetasql.ProcedureProto.signature)
  return _msg;
}
inline void ProcedureProto::set_allocated_signature(::zetasql::FunctionSignatureProto* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signature_;
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signature);
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ProcedureProto.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2ffunction_2eproto
