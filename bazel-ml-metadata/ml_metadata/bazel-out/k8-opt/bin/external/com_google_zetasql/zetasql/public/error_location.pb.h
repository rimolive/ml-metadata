// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/error_location.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ferror_5flocation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ferror_5flocation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2ferror_5flocation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2ferror_5flocation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2ferror_5flocation_2eproto;
namespace zetasql {
class ErrorLocation;
struct ErrorLocationDefaultTypeInternal;
extern ErrorLocationDefaultTypeInternal _ErrorLocation_default_instance_;
class ErrorSource;
struct ErrorSourceDefaultTypeInternal;
extern ErrorSourceDefaultTypeInternal _ErrorSource_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::ErrorLocation* Arena::CreateMaybeMessage<::zetasql::ErrorLocation>(Arena*);
template<> ::zetasql::ErrorSource* Arena::CreateMaybeMessage<::zetasql::ErrorSource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class ErrorLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ErrorLocation) */ {
 public:
  inline ErrorLocation() : ErrorLocation(nullptr) {}
  ~ErrorLocation() override;
  explicit PROTOBUF_CONSTEXPR ErrorLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorLocation(const ErrorLocation& from);
  ErrorLocation(ErrorLocation&& from) noexcept
    : ErrorLocation() {
    *this = ::std::move(from);
  }

  inline ErrorLocation& operator=(const ErrorLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorLocation& operator=(ErrorLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorLocation* internal_default_instance() {
    return reinterpret_cast<const ErrorLocation*>(
               &_ErrorLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ErrorLocation& a, ErrorLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ErrorLocation& from) {
    ErrorLocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ErrorLocation";
  }
  protected:
  explicit ErrorLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorSourceFieldNumber = 4,
    kFilenameFieldNumber = 3,
    kLineFieldNumber = 1,
    kColumnFieldNumber = 2,
  };
  // repeated .zetasql.ErrorSource error_source = 4;
  int error_source_size() const;
  private:
  int _internal_error_source_size() const;
  public:
  void clear_error_source();
  ::zetasql::ErrorSource* mutable_error_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ErrorSource >*
      mutable_error_source();
  private:
  const ::zetasql::ErrorSource& _internal_error_source(int index) const;
  ::zetasql::ErrorSource* _internal_add_error_source();
  public:
  const ::zetasql::ErrorSource& error_source(int index) const;
  ::zetasql::ErrorSource* add_error_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ErrorSource >&
      error_source() const;

  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional int32 line = 1 [default = 1];
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  int32_t line() const;
  void set_line(int32_t value);
  private:
  int32_t _internal_line() const;
  void _internal_set_line(int32_t value);
  public:

  // optional int32 column = 2 [default = 1];
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  int32_t column() const;
  void set_column(int32_t value);
  private:
  int32_t _internal_column() const;
  void _internal_set_column(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.ErrorLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ErrorSource > error_source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    int32_t line_;
    int32_t column_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ferror_5flocation_2eproto;
};
// -------------------------------------------------------------------

class ErrorSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ErrorSource) */ {
 public:
  inline ErrorSource() : ErrorSource(nullptr) {}
  ~ErrorSource() override;
  explicit PROTOBUF_CONSTEXPR ErrorSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorSource(const ErrorSource& from);
  ErrorSource(ErrorSource&& from) noexcept
    : ErrorSource() {
    *this = ::std::move(from);
  }

  inline ErrorSource& operator=(const ErrorSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorSource& operator=(ErrorSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorSource* internal_default_instance() {
    return reinterpret_cast<const ErrorSource*>(
               &_ErrorSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ErrorSource& a, ErrorSource& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ErrorSource& from) {
    ErrorSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ErrorSource";
  }
  protected:
  explicit ErrorSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
    kErrorMessageCaretStringFieldNumber = 2,
    kErrorLocationFieldNumber = 3,
  };
  // optional string error_message = 1;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional string error_message_caret_string = 2;
  bool has_error_message_caret_string() const;
  private:
  bool _internal_has_error_message_caret_string() const;
  public:
  void clear_error_message_caret_string();
  const std::string& error_message_caret_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message_caret_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message_caret_string();
  PROTOBUF_NODISCARD std::string* release_error_message_caret_string();
  void set_allocated_error_message_caret_string(std::string* error_message_caret_string);
  private:
  const std::string& _internal_error_message_caret_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message_caret_string(const std::string& value);
  std::string* _internal_mutable_error_message_caret_string();
  public:

  // optional .zetasql.ErrorLocation error_location = 3;
  bool has_error_location() const;
  private:
  bool _internal_has_error_location() const;
  public:
  void clear_error_location();
  const ::zetasql::ErrorLocation& error_location() const;
  PROTOBUF_NODISCARD ::zetasql::ErrorLocation* release_error_location();
  ::zetasql::ErrorLocation* mutable_error_location();
  void set_allocated_error_location(::zetasql::ErrorLocation* error_location);
  private:
  const ::zetasql::ErrorLocation& _internal_error_location() const;
  ::zetasql::ErrorLocation* _internal_mutable_error_location();
  public:
  void unsafe_arena_set_allocated_error_location(
      ::zetasql::ErrorLocation* error_location);
  ::zetasql::ErrorLocation* unsafe_arena_release_error_location();

  // @@protoc_insertion_point(class_scope:zetasql.ErrorSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_caret_string_;
    ::zetasql::ErrorLocation* error_location_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ferror_5flocation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorLocation

// optional int32 line = 1 [default = 1];
inline bool ErrorLocation::_internal_has_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ErrorLocation::has_line() const {
  return _internal_has_line();
}
inline void ErrorLocation::clear_line() {
  _impl_.line_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ErrorLocation::_internal_line() const {
  return _impl_.line_;
}
inline int32_t ErrorLocation::line() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorLocation.line)
  return _internal_line();
}
inline void ErrorLocation::_internal_set_line(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.line_ = value;
}
inline void ErrorLocation::set_line(int32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:zetasql.ErrorLocation.line)
}

// optional int32 column = 2 [default = 1];
inline bool ErrorLocation::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ErrorLocation::has_column() const {
  return _internal_has_column();
}
inline void ErrorLocation::clear_column() {
  _impl_.column_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ErrorLocation::_internal_column() const {
  return _impl_.column_;
}
inline int32_t ErrorLocation::column() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorLocation.column)
  return _internal_column();
}
inline void ErrorLocation::_internal_set_column(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.column_ = value;
}
inline void ErrorLocation::set_column(int32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:zetasql.ErrorLocation.column)
}

// optional string filename = 3;
inline bool ErrorLocation::_internal_has_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorLocation::has_filename() const {
  return _internal_has_filename();
}
inline void ErrorLocation::clear_filename() {
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ErrorLocation::filename() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorLocation.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorLocation::set_filename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ErrorLocation.filename)
}
inline std::string* ErrorLocation::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorLocation.filename)
  return _s;
}
inline const std::string& ErrorLocation::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void ErrorLocation::_internal_set_filename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrorLocation::_internal_mutable_filename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* ErrorLocation::release_filename() {
  // @@protoc_insertion_point(field_release:zetasql.ErrorLocation.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ErrorLocation::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.ErrorLocation.filename)
}

// repeated .zetasql.ErrorSource error_source = 4;
inline int ErrorLocation::_internal_error_source_size() const {
  return _impl_.error_source_.size();
}
inline int ErrorLocation::error_source_size() const {
  return _internal_error_source_size();
}
inline void ErrorLocation::clear_error_source() {
  _impl_.error_source_.Clear();
}
inline ::zetasql::ErrorSource* ErrorLocation::mutable_error_source(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorLocation.error_source)
  return _impl_.error_source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ErrorSource >*
ErrorLocation::mutable_error_source() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ErrorLocation.error_source)
  return &_impl_.error_source_;
}
inline const ::zetasql::ErrorSource& ErrorLocation::_internal_error_source(int index) const {
  return _impl_.error_source_.Get(index);
}
inline const ::zetasql::ErrorSource& ErrorLocation::error_source(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorLocation.error_source)
  return _internal_error_source(index);
}
inline ::zetasql::ErrorSource* ErrorLocation::_internal_add_error_source() {
  return _impl_.error_source_.Add();
}
inline ::zetasql::ErrorSource* ErrorLocation::add_error_source() {
  ::zetasql::ErrorSource* _add = _internal_add_error_source();
  // @@protoc_insertion_point(field_add:zetasql.ErrorLocation.error_source)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ErrorSource >&
ErrorLocation::error_source() const {
  // @@protoc_insertion_point(field_list:zetasql.ErrorLocation.error_source)
  return _impl_.error_source_;
}

// -------------------------------------------------------------------

// ErrorSource

// optional string error_message = 1;
inline bool ErrorSource::_internal_has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorSource::has_error_message() const {
  return _internal_has_error_message();
}
inline void ErrorSource::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ErrorSource::error_message() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorSource.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorSource::set_error_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ErrorSource.error_message)
}
inline std::string* ErrorSource::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorSource.error_message)
  return _s;
}
inline const std::string& ErrorSource::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void ErrorSource::_internal_set_error_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrorSource::_internal_mutable_error_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* ErrorSource::release_error_message() {
  // @@protoc_insertion_point(field_release:zetasql.ErrorSource.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ErrorSource::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.ErrorSource.error_message)
}

// optional string error_message_caret_string = 2;
inline bool ErrorSource::_internal_has_error_message_caret_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ErrorSource::has_error_message_caret_string() const {
  return _internal_has_error_message_caret_string();
}
inline void ErrorSource::clear_error_message_caret_string() {
  _impl_.error_message_caret_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ErrorSource::error_message_caret_string() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorSource.error_message_caret_string)
  return _internal_error_message_caret_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorSource::set_error_message_caret_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.error_message_caret_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ErrorSource.error_message_caret_string)
}
inline std::string* ErrorSource::mutable_error_message_caret_string() {
  std::string* _s = _internal_mutable_error_message_caret_string();
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorSource.error_message_caret_string)
  return _s;
}
inline const std::string& ErrorSource::_internal_error_message_caret_string() const {
  return _impl_.error_message_caret_string_.Get();
}
inline void ErrorSource::_internal_set_error_message_caret_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_message_caret_string_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrorSource::_internal_mutable_error_message_caret_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_message_caret_string_.Mutable(GetArenaForAllocation());
}
inline std::string* ErrorSource::release_error_message_caret_string() {
  // @@protoc_insertion_point(field_release:zetasql.ErrorSource.error_message_caret_string)
  if (!_internal_has_error_message_caret_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.error_message_caret_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_caret_string_.IsDefault()) {
    _impl_.error_message_caret_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ErrorSource::set_allocated_error_message_caret_string(std::string* error_message_caret_string) {
  if (error_message_caret_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_message_caret_string_.SetAllocated(error_message_caret_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_caret_string_.IsDefault()) {
    _impl_.error_message_caret_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.ErrorSource.error_message_caret_string)
}

// optional .zetasql.ErrorLocation error_location = 3;
inline bool ErrorSource::_internal_has_error_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_location_ != nullptr);
  return value;
}
inline bool ErrorSource::has_error_location() const {
  return _internal_has_error_location();
}
inline void ErrorSource::clear_error_location() {
  if (_impl_.error_location_ != nullptr) _impl_.error_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::ErrorLocation& ErrorSource::_internal_error_location() const {
  const ::zetasql::ErrorLocation* p = _impl_.error_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ErrorLocation&>(
      ::zetasql::_ErrorLocation_default_instance_);
}
inline const ::zetasql::ErrorLocation& ErrorSource::error_location() const {
  // @@protoc_insertion_point(field_get:zetasql.ErrorSource.error_location)
  return _internal_error_location();
}
inline void ErrorSource::unsafe_arena_set_allocated_error_location(
    ::zetasql::ErrorLocation* error_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_location_);
  }
  _impl_.error_location_ = error_location;
  if (error_location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ErrorSource.error_location)
}
inline ::zetasql::ErrorLocation* ErrorSource::release_error_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ErrorLocation* temp = _impl_.error_location_;
  _impl_.error_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ErrorLocation* ErrorSource::unsafe_arena_release_error_location() {
  // @@protoc_insertion_point(field_release:zetasql.ErrorSource.error_location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::ErrorLocation* temp = _impl_.error_location_;
  _impl_.error_location_ = nullptr;
  return temp;
}
inline ::zetasql::ErrorLocation* ErrorSource::_internal_mutable_error_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.error_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ErrorLocation>(GetArenaForAllocation());
    _impl_.error_location_ = p;
  }
  return _impl_.error_location_;
}
inline ::zetasql::ErrorLocation* ErrorSource::mutable_error_location() {
  ::zetasql::ErrorLocation* _msg = _internal_mutable_error_location();
  // @@protoc_insertion_point(field_mutable:zetasql.ErrorSource.error_location)
  return _msg;
}
inline void ErrorSource::set_allocated_error_location(::zetasql::ErrorLocation* error_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.error_location_;
  }
  if (error_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error_location);
    if (message_arena != submessage_arena) {
      error_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.error_location_ = error_location;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ErrorSource.error_location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ferror_5flocation_2eproto
