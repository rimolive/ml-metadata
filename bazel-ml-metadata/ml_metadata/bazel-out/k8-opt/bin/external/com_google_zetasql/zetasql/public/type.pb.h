// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2ftype_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2ftype_2eproto;
namespace zetasql {
class ArrayTypeProto;
struct ArrayTypeProtoDefaultTypeInternal;
extern ArrayTypeProtoDefaultTypeInternal _ArrayTypeProto_default_instance_;
class EnumTypeProto;
struct EnumTypeProtoDefaultTypeInternal;
extern EnumTypeProtoDefaultTypeInternal _EnumTypeProto_default_instance_;
class ProtoTypeProto;
struct ProtoTypeProtoDefaultTypeInternal;
extern ProtoTypeProtoDefaultTypeInternal _ProtoTypeProto_default_instance_;
class RangeTypeProto;
struct RangeTypeProtoDefaultTypeInternal;
extern RangeTypeProtoDefaultTypeInternal _RangeTypeProto_default_instance_;
class StructFieldProto;
struct StructFieldProtoDefaultTypeInternal;
extern StructFieldProtoDefaultTypeInternal _StructFieldProto_default_instance_;
class StructTypeProto;
struct StructTypeProtoDefaultTypeInternal;
extern StructTypeProtoDefaultTypeInternal _StructTypeProto_default_instance_;
class TypeProto;
struct TypeProtoDefaultTypeInternal;
extern TypeProtoDefaultTypeInternal _TypeProto_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::ArrayTypeProto* Arena::CreateMaybeMessage<::zetasql::ArrayTypeProto>(Arena*);
template<> ::zetasql::EnumTypeProto* Arena::CreateMaybeMessage<::zetasql::EnumTypeProto>(Arena*);
template<> ::zetasql::ProtoTypeProto* Arena::CreateMaybeMessage<::zetasql::ProtoTypeProto>(Arena*);
template<> ::zetasql::RangeTypeProto* Arena::CreateMaybeMessage<::zetasql::RangeTypeProto>(Arena*);
template<> ::zetasql::StructFieldProto* Arena::CreateMaybeMessage<::zetasql::StructFieldProto>(Arena*);
template<> ::zetasql::StructTypeProto* Arena::CreateMaybeMessage<::zetasql::StructTypeProto>(Arena*);
template<> ::zetasql::TypeProto* Arena::CreateMaybeMessage<::zetasql::TypeProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

enum TypeKind : int {
  __TypeKind__switch_must_have_a_default__ = -1,
  TYPE_UNKNOWN = 0,
  TYPE_INT32 = 1,
  TYPE_INT64 = 2,
  TYPE_UINT32 = 3,
  TYPE_UINT64 = 4,
  TYPE_BOOL = 5,
  TYPE_FLOAT = 6,
  TYPE_DOUBLE = 7,
  TYPE_STRING = 8,
  TYPE_BYTES = 9,
  TYPE_DATE = 10,
  TYPE_TIMESTAMP = 19,
  TYPE_ENUM = 15,
  TYPE_ARRAY = 16,
  TYPE_STRUCT = 17,
  TYPE_PROTO = 18,
  TYPE_TIME = 20,
  TYPE_DATETIME = 21,
  TYPE_GEOGRAPHY = 22,
  TYPE_NUMERIC = 23,
  TYPE_BIGNUMERIC = 24,
  TYPE_EXTENDED = 25,
  TYPE_JSON = 26,
  TYPE_INTERVAL = 27,
  TYPE_RANGE = 29
};
bool TypeKind_IsValid(int value);
constexpr TypeKind TypeKind_MIN = __TypeKind__switch_must_have_a_default__;
constexpr TypeKind TypeKind_MAX = TYPE_RANGE;
constexpr int TypeKind_ARRAYSIZE = TypeKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeKind_descriptor();
template<typename T>
inline const std::string& TypeKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypeKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypeKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypeKind_descriptor(), enum_t_value);
}
inline bool TypeKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TypeKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeKind>(
    TypeKind_descriptor(), name, value);
}
// ===================================================================

class TypeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TypeProto) */ {
 public:
  inline TypeProto() : TypeProto(nullptr) {}
  ~TypeProto() override;
  explicit PROTOBUF_CONSTEXPR TypeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypeProto(const TypeProto& from);
  TypeProto(TypeProto&& from) noexcept
    : TypeProto() {
    *this = ::std::move(from);
  }

  inline TypeProto& operator=(const TypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto& operator=(TypeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TypeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto*>(
               &_TypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TypeProto& a, TypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TypeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TypeProto& from) {
    TypeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TypeProto";
  }
  protected:
  explicit TypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDescriptorSetFieldNumber = 6,
    kExtendedTypeNameFieldNumber = 7,
    kArrayTypeFieldNumber = 2,
    kStructTypeFieldNumber = 3,
    kProtoTypeFieldNumber = 4,
    kEnumTypeFieldNumber = 5,
    kRangeTypeFieldNumber = 8,
    kTypeKindFieldNumber = 1,
  };
  // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
  int file_descriptor_set_size() const;
  private:
  int _internal_file_descriptor_set_size() const;
  public:
  void clear_file_descriptor_set();
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet* mutable_file_descriptor_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet >*
      mutable_file_descriptor_set();
  private:
  const ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet& _internal_file_descriptor_set(int index) const;
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet* _internal_add_file_descriptor_set();
  public:
  const ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet& file_descriptor_set(int index) const;
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet* add_file_descriptor_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet >&
      file_descriptor_set() const;

  // optional string extended_type_name = 7;
  bool has_extended_type_name() const;
  private:
  bool _internal_has_extended_type_name() const;
  public:
  void clear_extended_type_name();
  const std::string& extended_type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extended_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extended_type_name();
  PROTOBUF_NODISCARD std::string* release_extended_type_name();
  void set_allocated_extended_type_name(std::string* extended_type_name);
  private:
  const std::string& _internal_extended_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extended_type_name(const std::string& value);
  std::string* _internal_mutable_extended_type_name();
  public:

  // optional .zetasql.ArrayTypeProto array_type = 2;
  bool has_array_type() const;
  private:
  bool _internal_has_array_type() const;
  public:
  void clear_array_type();
  const ::zetasql::ArrayTypeProto& array_type() const;
  PROTOBUF_NODISCARD ::zetasql::ArrayTypeProto* release_array_type();
  ::zetasql::ArrayTypeProto* mutable_array_type();
  void set_allocated_array_type(::zetasql::ArrayTypeProto* array_type);
  private:
  const ::zetasql::ArrayTypeProto& _internal_array_type() const;
  ::zetasql::ArrayTypeProto* _internal_mutable_array_type();
  public:
  void unsafe_arena_set_allocated_array_type(
      ::zetasql::ArrayTypeProto* array_type);
  ::zetasql::ArrayTypeProto* unsafe_arena_release_array_type();

  // optional .zetasql.StructTypeProto struct_type = 3;
  bool has_struct_type() const;
  private:
  bool _internal_has_struct_type() const;
  public:
  void clear_struct_type();
  const ::zetasql::StructTypeProto& struct_type() const;
  PROTOBUF_NODISCARD ::zetasql::StructTypeProto* release_struct_type();
  ::zetasql::StructTypeProto* mutable_struct_type();
  void set_allocated_struct_type(::zetasql::StructTypeProto* struct_type);
  private:
  const ::zetasql::StructTypeProto& _internal_struct_type() const;
  ::zetasql::StructTypeProto* _internal_mutable_struct_type();
  public:
  void unsafe_arena_set_allocated_struct_type(
      ::zetasql::StructTypeProto* struct_type);
  ::zetasql::StructTypeProto* unsafe_arena_release_struct_type();

  // optional .zetasql.ProtoTypeProto proto_type = 4;
  bool has_proto_type() const;
  private:
  bool _internal_has_proto_type() const;
  public:
  void clear_proto_type();
  const ::zetasql::ProtoTypeProto& proto_type() const;
  PROTOBUF_NODISCARD ::zetasql::ProtoTypeProto* release_proto_type();
  ::zetasql::ProtoTypeProto* mutable_proto_type();
  void set_allocated_proto_type(::zetasql::ProtoTypeProto* proto_type);
  private:
  const ::zetasql::ProtoTypeProto& _internal_proto_type() const;
  ::zetasql::ProtoTypeProto* _internal_mutable_proto_type();
  public:
  void unsafe_arena_set_allocated_proto_type(
      ::zetasql::ProtoTypeProto* proto_type);
  ::zetasql::ProtoTypeProto* unsafe_arena_release_proto_type();

  // optional .zetasql.EnumTypeProto enum_type = 5;
  bool has_enum_type() const;
  private:
  bool _internal_has_enum_type() const;
  public:
  void clear_enum_type();
  const ::zetasql::EnumTypeProto& enum_type() const;
  PROTOBUF_NODISCARD ::zetasql::EnumTypeProto* release_enum_type();
  ::zetasql::EnumTypeProto* mutable_enum_type();
  void set_allocated_enum_type(::zetasql::EnumTypeProto* enum_type);
  private:
  const ::zetasql::EnumTypeProto& _internal_enum_type() const;
  ::zetasql::EnumTypeProto* _internal_mutable_enum_type();
  public:
  void unsafe_arena_set_allocated_enum_type(
      ::zetasql::EnumTypeProto* enum_type);
  ::zetasql::EnumTypeProto* unsafe_arena_release_enum_type();

  // optional .zetasql.RangeTypeProto range_type = 8;
  bool has_range_type() const;
  private:
  bool _internal_has_range_type() const;
  public:
  void clear_range_type();
  const ::zetasql::RangeTypeProto& range_type() const;
  PROTOBUF_NODISCARD ::zetasql::RangeTypeProto* release_range_type();
  ::zetasql::RangeTypeProto* mutable_range_type();
  void set_allocated_range_type(::zetasql::RangeTypeProto* range_type);
  private:
  const ::zetasql::RangeTypeProto& _internal_range_type() const;
  ::zetasql::RangeTypeProto* _internal_mutable_range_type();
  public:
  void unsafe_arena_set_allocated_range_type(
      ::zetasql::RangeTypeProto* range_type);
  ::zetasql::RangeTypeProto* unsafe_arena_release_range_type();

  // optional .zetasql.TypeKind type_kind = 1;
  bool has_type_kind() const;
  private:
  bool _internal_has_type_kind() const;
  public:
  void clear_type_kind();
  ::zetasql::TypeKind type_kind() const;
  void set_type_kind(::zetasql::TypeKind value);
  private:
  ::zetasql::TypeKind _internal_type_kind() const;
  void _internal_set_type_kind(::zetasql::TypeKind value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TypeProto, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:zetasql.TypeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet > file_descriptor_set_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extended_type_name_;
    ::zetasql::ArrayTypeProto* array_type_;
    ::zetasql::StructTypeProto* struct_type_;
    ::zetasql::ProtoTypeProto* proto_type_;
    ::zetasql::EnumTypeProto* enum_type_;
    ::zetasql::RangeTypeProto* range_type_;
    int type_kind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_2eproto;
};
// -------------------------------------------------------------------

class ArrayTypeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ArrayTypeProto) */ {
 public:
  inline ArrayTypeProto() : ArrayTypeProto(nullptr) {}
  ~ArrayTypeProto() override;
  explicit PROTOBUF_CONSTEXPR ArrayTypeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayTypeProto(const ArrayTypeProto& from);
  ArrayTypeProto(ArrayTypeProto&& from) noexcept
    : ArrayTypeProto() {
    *this = ::std::move(from);
  }

  inline ArrayTypeProto& operator=(const ArrayTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayTypeProto& operator=(ArrayTypeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayTypeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayTypeProto* internal_default_instance() {
    return reinterpret_cast<const ArrayTypeProto*>(
               &_ArrayTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArrayTypeProto& a, ArrayTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayTypeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayTypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayTypeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArrayTypeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArrayTypeProto& from) {
    ArrayTypeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayTypeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ArrayTypeProto";
  }
  protected:
  explicit ArrayTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementTypeFieldNumber = 1,
  };
  // optional .zetasql.TypeProto element_type = 1;
  bool has_element_type() const;
  private:
  bool _internal_has_element_type() const;
  public:
  void clear_element_type();
  const ::zetasql::TypeProto& element_type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_element_type();
  ::zetasql::TypeProto* mutable_element_type();
  void set_allocated_element_type(::zetasql::TypeProto* element_type);
  private:
  const ::zetasql::TypeProto& _internal_element_type() const;
  ::zetasql::TypeProto* _internal_mutable_element_type();
  public:
  void unsafe_arena_set_allocated_element_type(
      ::zetasql::TypeProto* element_type);
  ::zetasql::TypeProto* unsafe_arena_release_element_type();

  // @@protoc_insertion_point(class_scope:zetasql.ArrayTypeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::zetasql::TypeProto* element_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_2eproto;
};
// -------------------------------------------------------------------

class StructFieldProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.StructFieldProto) */ {
 public:
  inline StructFieldProto() : StructFieldProto(nullptr) {}
  ~StructFieldProto() override;
  explicit PROTOBUF_CONSTEXPR StructFieldProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructFieldProto(const StructFieldProto& from);
  StructFieldProto(StructFieldProto&& from) noexcept
    : StructFieldProto() {
    *this = ::std::move(from);
  }

  inline StructFieldProto& operator=(const StructFieldProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructFieldProto& operator=(StructFieldProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructFieldProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructFieldProto* internal_default_instance() {
    return reinterpret_cast<const StructFieldProto*>(
               &_StructFieldProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StructFieldProto& a, StructFieldProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StructFieldProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructFieldProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructFieldProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructFieldProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StructFieldProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StructFieldProto& from) {
    StructFieldProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructFieldProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.StructFieldProto";
  }
  protected:
  explicit StructFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 1,
    kFieldTypeFieldNumber = 2,
  };
  // optional string field_name = 1;
  bool has_field_name() const;
  private:
  bool _internal_has_field_name() const;
  public:
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // optional .zetasql.TypeProto field_type = 2;
  bool has_field_type() const;
  private:
  bool _internal_has_field_type() const;
  public:
  void clear_field_type();
  const ::zetasql::TypeProto& field_type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_field_type();
  ::zetasql::TypeProto* mutable_field_type();
  void set_allocated_field_type(::zetasql::TypeProto* field_type);
  private:
  const ::zetasql::TypeProto& _internal_field_type() const;
  ::zetasql::TypeProto* _internal_mutable_field_type();
  public:
  void unsafe_arena_set_allocated_field_type(
      ::zetasql::TypeProto* field_type);
  ::zetasql::TypeProto* unsafe_arena_release_field_type();

  // @@protoc_insertion_point(class_scope:zetasql.StructFieldProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    ::zetasql::TypeProto* field_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_2eproto;
};
// -------------------------------------------------------------------

class StructTypeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.StructTypeProto) */ {
 public:
  inline StructTypeProto() : StructTypeProto(nullptr) {}
  ~StructTypeProto() override;
  explicit PROTOBUF_CONSTEXPR StructTypeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructTypeProto(const StructTypeProto& from);
  StructTypeProto(StructTypeProto&& from) noexcept
    : StructTypeProto() {
    *this = ::std::move(from);
  }

  inline StructTypeProto& operator=(const StructTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructTypeProto& operator=(StructTypeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructTypeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructTypeProto* internal_default_instance() {
    return reinterpret_cast<const StructTypeProto*>(
               &_StructTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StructTypeProto& a, StructTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StructTypeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructTypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructTypeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StructTypeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StructTypeProto& from) {
    StructTypeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructTypeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.StructTypeProto";
  }
  protected:
  explicit StructTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated .zetasql.StructFieldProto field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::zetasql::StructFieldProto* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::StructFieldProto >*
      mutable_field();
  private:
  const ::zetasql::StructFieldProto& _internal_field(int index) const;
  ::zetasql::StructFieldProto* _internal_add_field();
  public:
  const ::zetasql::StructFieldProto& field(int index) const;
  ::zetasql::StructFieldProto* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::StructFieldProto >&
      field() const;

  // @@protoc_insertion_point(class_scope:zetasql.StructTypeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::StructFieldProto > field_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_2eproto;
};
// -------------------------------------------------------------------

class ProtoTypeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ProtoTypeProto) */ {
 public:
  inline ProtoTypeProto() : ProtoTypeProto(nullptr) {}
  ~ProtoTypeProto() override;
  explicit PROTOBUF_CONSTEXPR ProtoTypeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoTypeProto(const ProtoTypeProto& from);
  ProtoTypeProto(ProtoTypeProto&& from) noexcept
    : ProtoTypeProto() {
    *this = ::std::move(from);
  }

  inline ProtoTypeProto& operator=(const ProtoTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoTypeProto& operator=(ProtoTypeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoTypeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoTypeProto* internal_default_instance() {
    return reinterpret_cast<const ProtoTypeProto*>(
               &_ProtoTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProtoTypeProto& a, ProtoTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoTypeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoTypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoTypeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoTypeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtoTypeProto& from) {
    ProtoTypeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoTypeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ProtoTypeProto";
  }
  protected:
  explicit ProtoTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCatalogNamePathFieldNumber = 4,
    kProtoNameFieldNumber = 1,
    kProtoFileNameFieldNumber = 2,
    kFileDescriptorSetIndexFieldNumber = 3,
  };
  // repeated string catalog_name_path = 4;
  int catalog_name_path_size() const;
  private:
  int _internal_catalog_name_path_size() const;
  public:
  void clear_catalog_name_path();
  const std::string& catalog_name_path(int index) const;
  std::string* mutable_catalog_name_path(int index);
  void set_catalog_name_path(int index, const std::string& value);
  void set_catalog_name_path(int index, std::string&& value);
  void set_catalog_name_path(int index, const char* value);
  void set_catalog_name_path(int index, const char* value, size_t size);
  std::string* add_catalog_name_path();
  void add_catalog_name_path(const std::string& value);
  void add_catalog_name_path(std::string&& value);
  void add_catalog_name_path(const char* value);
  void add_catalog_name_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& catalog_name_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_catalog_name_path();
  private:
  const std::string& _internal_catalog_name_path(int index) const;
  std::string* _internal_add_catalog_name_path();
  public:

  // optional string proto_name = 1;
  bool has_proto_name() const;
  private:
  bool _internal_has_proto_name() const;
  public:
  void clear_proto_name();
  const std::string& proto_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_name();
  PROTOBUF_NODISCARD std::string* release_proto_name();
  void set_allocated_proto_name(std::string* proto_name);
  private:
  const std::string& _internal_proto_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_name(const std::string& value);
  std::string* _internal_mutable_proto_name();
  public:

  // optional string proto_file_name = 2;
  bool has_proto_file_name() const;
  private:
  bool _internal_has_proto_file_name() const;
  public:
  void clear_proto_file_name();
  const std::string& proto_file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_file_name();
  PROTOBUF_NODISCARD std::string* release_proto_file_name();
  void set_allocated_proto_file_name(std::string* proto_file_name);
  private:
  const std::string& _internal_proto_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_file_name(const std::string& value);
  std::string* _internal_mutable_proto_file_name();
  public:

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  bool has_file_descriptor_set_index() const;
  private:
  bool _internal_has_file_descriptor_set_index() const;
  public:
  void clear_file_descriptor_set_index();
  int32_t file_descriptor_set_index() const;
  void set_file_descriptor_set_index(int32_t value);
  private:
  int32_t _internal_file_descriptor_set_index() const;
  void _internal_set_file_descriptor_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.ProtoTypeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> catalog_name_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_name_;
    int32_t file_descriptor_set_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_2eproto;
};
// -------------------------------------------------------------------

class EnumTypeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.EnumTypeProto) */ {
 public:
  inline EnumTypeProto() : EnumTypeProto(nullptr) {}
  ~EnumTypeProto() override;
  explicit PROTOBUF_CONSTEXPR EnumTypeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnumTypeProto(const EnumTypeProto& from);
  EnumTypeProto(EnumTypeProto&& from) noexcept
    : EnumTypeProto() {
    *this = ::std::move(from);
  }

  inline EnumTypeProto& operator=(const EnumTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnumTypeProto& operator=(EnumTypeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnumTypeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnumTypeProto* internal_default_instance() {
    return reinterpret_cast<const EnumTypeProto*>(
               &_EnumTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EnumTypeProto& a, EnumTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EnumTypeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnumTypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnumTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnumTypeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnumTypeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnumTypeProto& from) {
    EnumTypeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumTypeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.EnumTypeProto";
  }
  protected:
  explicit EnumTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCatalogNamePathFieldNumber = 4,
    kEnumNameFieldNumber = 1,
    kEnumFileNameFieldNumber = 2,
    kFileDescriptorSetIndexFieldNumber = 3,
  };
  // repeated string catalog_name_path = 4;
  int catalog_name_path_size() const;
  private:
  int _internal_catalog_name_path_size() const;
  public:
  void clear_catalog_name_path();
  const std::string& catalog_name_path(int index) const;
  std::string* mutable_catalog_name_path(int index);
  void set_catalog_name_path(int index, const std::string& value);
  void set_catalog_name_path(int index, std::string&& value);
  void set_catalog_name_path(int index, const char* value);
  void set_catalog_name_path(int index, const char* value, size_t size);
  std::string* add_catalog_name_path();
  void add_catalog_name_path(const std::string& value);
  void add_catalog_name_path(std::string&& value);
  void add_catalog_name_path(const char* value);
  void add_catalog_name_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& catalog_name_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_catalog_name_path();
  private:
  const std::string& _internal_catalog_name_path(int index) const;
  std::string* _internal_add_catalog_name_path();
  public:

  // optional string enum_name = 1;
  bool has_enum_name() const;
  private:
  bool _internal_has_enum_name() const;
  public:
  void clear_enum_name();
  const std::string& enum_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enum_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enum_name();
  PROTOBUF_NODISCARD std::string* release_enum_name();
  void set_allocated_enum_name(std::string* enum_name);
  private:
  const std::string& _internal_enum_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enum_name(const std::string& value);
  std::string* _internal_mutable_enum_name();
  public:

  // optional string enum_file_name = 2;
  bool has_enum_file_name() const;
  private:
  bool _internal_has_enum_file_name() const;
  public:
  void clear_enum_file_name();
  const std::string& enum_file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enum_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enum_file_name();
  PROTOBUF_NODISCARD std::string* release_enum_file_name();
  void set_allocated_enum_file_name(std::string* enum_file_name);
  private:
  const std::string& _internal_enum_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enum_file_name(const std::string& value);
  std::string* _internal_mutable_enum_file_name();
  public:

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  bool has_file_descriptor_set_index() const;
  private:
  bool _internal_has_file_descriptor_set_index() const;
  public:
  void clear_file_descriptor_set_index();
  int32_t file_descriptor_set_index() const;
  void set_file_descriptor_set_index(int32_t value);
  private:
  int32_t _internal_file_descriptor_set_index() const;
  void _internal_set_file_descriptor_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.EnumTypeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> catalog_name_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum_file_name_;
    int32_t file_descriptor_set_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_2eproto;
};
// -------------------------------------------------------------------

class RangeTypeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.RangeTypeProto) */ {
 public:
  inline RangeTypeProto() : RangeTypeProto(nullptr) {}
  ~RangeTypeProto() override;
  explicit PROTOBUF_CONSTEXPR RangeTypeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeTypeProto(const RangeTypeProto& from);
  RangeTypeProto(RangeTypeProto&& from) noexcept
    : RangeTypeProto() {
    *this = ::std::move(from);
  }

  inline RangeTypeProto& operator=(const RangeTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeTypeProto& operator=(RangeTypeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeTypeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeTypeProto* internal_default_instance() {
    return reinterpret_cast<const RangeTypeProto*>(
               &_RangeTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RangeTypeProto& a, RangeTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeTypeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeTypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeTypeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeTypeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RangeTypeProto& from) {
    RangeTypeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeTypeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.RangeTypeProto";
  }
  protected:
  explicit RangeTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementTypeFieldNumber = 1,
  };
  // optional .zetasql.TypeProto element_type = 1;
  bool has_element_type() const;
  private:
  bool _internal_has_element_type() const;
  public:
  void clear_element_type();
  const ::zetasql::TypeProto& element_type() const;
  PROTOBUF_NODISCARD ::zetasql::TypeProto* release_element_type();
  ::zetasql::TypeProto* mutable_element_type();
  void set_allocated_element_type(::zetasql::TypeProto* element_type);
  private:
  const ::zetasql::TypeProto& _internal_element_type() const;
  ::zetasql::TypeProto* _internal_mutable_element_type();
  public:
  void unsafe_arena_set_allocated_element_type(
      ::zetasql::TypeProto* element_type);
  ::zetasql::TypeProto* unsafe_arena_release_element_type();

  // @@protoc_insertion_point(class_scope:zetasql.RangeTypeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::zetasql::TypeProto* element_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypeProto

// optional .zetasql.TypeKind type_kind = 1;
inline bool TypeProto::_internal_has_type_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TypeProto::has_type_kind() const {
  return _internal_has_type_kind();
}
inline void TypeProto::clear_type_kind() {
  _impl_.type_kind_ = -1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::zetasql::TypeKind TypeProto::_internal_type_kind() const {
  return static_cast< ::zetasql::TypeKind >(_impl_.type_kind_);
}
inline ::zetasql::TypeKind TypeProto::type_kind() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.type_kind)
  return _internal_type_kind();
}
inline void TypeProto::_internal_set_type_kind(::zetasql::TypeKind value) {
  assert(::zetasql::TypeKind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.type_kind_ = value;
}
inline void TypeProto::set_type_kind(::zetasql::TypeKind value) {
  _internal_set_type_kind(value);
  // @@protoc_insertion_point(field_set:zetasql.TypeProto.type_kind)
}

// optional .zetasql.ArrayTypeProto array_type = 2;
inline bool TypeProto::_internal_has_array_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.array_type_ != nullptr);
  return value;
}
inline bool TypeProto::has_array_type() const {
  return _internal_has_array_type();
}
inline void TypeProto::clear_array_type() {
  if (_impl_.array_type_ != nullptr) _impl_.array_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ArrayTypeProto& TypeProto::_internal_array_type() const {
  const ::zetasql::ArrayTypeProto* p = _impl_.array_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ArrayTypeProto&>(
      ::zetasql::_ArrayTypeProto_default_instance_);
}
inline const ::zetasql::ArrayTypeProto& TypeProto::array_type() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.array_type)
  return _internal_array_type();
}
inline void TypeProto::unsafe_arena_set_allocated_array_type(
    ::zetasql::ArrayTypeProto* array_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.array_type_);
  }
  _impl_.array_type_ = array_type;
  if (array_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.array_type)
}
inline ::zetasql::ArrayTypeProto* TypeProto::release_array_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ArrayTypeProto* temp = _impl_.array_type_;
  _impl_.array_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ArrayTypeProto* TypeProto::unsafe_arena_release_array_type() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.array_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ArrayTypeProto* temp = _impl_.array_type_;
  _impl_.array_type_ = nullptr;
  return temp;
}
inline ::zetasql::ArrayTypeProto* TypeProto::_internal_mutable_array_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.array_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ArrayTypeProto>(GetArenaForAllocation());
    _impl_.array_type_ = p;
  }
  return _impl_.array_type_;
}
inline ::zetasql::ArrayTypeProto* TypeProto::mutable_array_type() {
  ::zetasql::ArrayTypeProto* _msg = _internal_mutable_array_type();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.array_type)
  return _msg;
}
inline void TypeProto::set_allocated_array_type(::zetasql::ArrayTypeProto* array_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.array_type_;
  }
  if (array_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(array_type);
    if (message_arena != submessage_arena) {
      array_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.array_type_ = array_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.array_type)
}

// optional .zetasql.StructTypeProto struct_type = 3;
inline bool TypeProto::_internal_has_struct_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.struct_type_ != nullptr);
  return value;
}
inline bool TypeProto::has_struct_type() const {
  return _internal_has_struct_type();
}
inline void TypeProto::clear_struct_type() {
  if (_impl_.struct_type_ != nullptr) _impl_.struct_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasql::StructTypeProto& TypeProto::_internal_struct_type() const {
  const ::zetasql::StructTypeProto* p = _impl_.struct_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::StructTypeProto&>(
      ::zetasql::_StructTypeProto_default_instance_);
}
inline const ::zetasql::StructTypeProto& TypeProto::struct_type() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.struct_type)
  return _internal_struct_type();
}
inline void TypeProto::unsafe_arena_set_allocated_struct_type(
    ::zetasql::StructTypeProto* struct_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.struct_type_);
  }
  _impl_.struct_type_ = struct_type;
  if (struct_type) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.struct_type)
}
inline ::zetasql::StructTypeProto* TypeProto::release_struct_type() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::StructTypeProto* temp = _impl_.struct_type_;
  _impl_.struct_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::StructTypeProto* TypeProto::unsafe_arena_release_struct_type() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.struct_type)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::zetasql::StructTypeProto* temp = _impl_.struct_type_;
  _impl_.struct_type_ = nullptr;
  return temp;
}
inline ::zetasql::StructTypeProto* TypeProto::_internal_mutable_struct_type() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.struct_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::StructTypeProto>(GetArenaForAllocation());
    _impl_.struct_type_ = p;
  }
  return _impl_.struct_type_;
}
inline ::zetasql::StructTypeProto* TypeProto::mutable_struct_type() {
  ::zetasql::StructTypeProto* _msg = _internal_mutable_struct_type();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.struct_type)
  return _msg;
}
inline void TypeProto::set_allocated_struct_type(::zetasql::StructTypeProto* struct_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.struct_type_;
  }
  if (struct_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(struct_type);
    if (message_arena != submessage_arena) {
      struct_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.struct_type_ = struct_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.struct_type)
}

// optional .zetasql.ProtoTypeProto proto_type = 4;
inline bool TypeProto::_internal_has_proto_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proto_type_ != nullptr);
  return value;
}
inline bool TypeProto::has_proto_type() const {
  return _internal_has_proto_type();
}
inline void TypeProto::clear_proto_type() {
  if (_impl_.proto_type_ != nullptr) _impl_.proto_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::zetasql::ProtoTypeProto& TypeProto::_internal_proto_type() const {
  const ::zetasql::ProtoTypeProto* p = _impl_.proto_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ProtoTypeProto&>(
      ::zetasql::_ProtoTypeProto_default_instance_);
}
inline const ::zetasql::ProtoTypeProto& TypeProto::proto_type() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.proto_type)
  return _internal_proto_type();
}
inline void TypeProto::unsafe_arena_set_allocated_proto_type(
    ::zetasql::ProtoTypeProto* proto_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proto_type_);
  }
  _impl_.proto_type_ = proto_type;
  if (proto_type) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.proto_type)
}
inline ::zetasql::ProtoTypeProto* TypeProto::release_proto_type() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::ProtoTypeProto* temp = _impl_.proto_type_;
  _impl_.proto_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ProtoTypeProto* TypeProto::unsafe_arena_release_proto_type() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.proto_type)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::zetasql::ProtoTypeProto* temp = _impl_.proto_type_;
  _impl_.proto_type_ = nullptr;
  return temp;
}
inline ::zetasql::ProtoTypeProto* TypeProto::_internal_mutable_proto_type() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.proto_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ProtoTypeProto>(GetArenaForAllocation());
    _impl_.proto_type_ = p;
  }
  return _impl_.proto_type_;
}
inline ::zetasql::ProtoTypeProto* TypeProto::mutable_proto_type() {
  ::zetasql::ProtoTypeProto* _msg = _internal_mutable_proto_type();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.proto_type)
  return _msg;
}
inline void TypeProto::set_allocated_proto_type(::zetasql::ProtoTypeProto* proto_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.proto_type_;
  }
  if (proto_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proto_type);
    if (message_arena != submessage_arena) {
      proto_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proto_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.proto_type_ = proto_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.proto_type)
}

// optional .zetasql.EnumTypeProto enum_type = 5;
inline bool TypeProto::_internal_has_enum_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enum_type_ != nullptr);
  return value;
}
inline bool TypeProto::has_enum_type() const {
  return _internal_has_enum_type();
}
inline void TypeProto::clear_enum_type() {
  if (_impl_.enum_type_ != nullptr) _impl_.enum_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::zetasql::EnumTypeProto& TypeProto::_internal_enum_type() const {
  const ::zetasql::EnumTypeProto* p = _impl_.enum_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::EnumTypeProto&>(
      ::zetasql::_EnumTypeProto_default_instance_);
}
inline const ::zetasql::EnumTypeProto& TypeProto::enum_type() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.enum_type)
  return _internal_enum_type();
}
inline void TypeProto::unsafe_arena_set_allocated_enum_type(
    ::zetasql::EnumTypeProto* enum_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enum_type_);
  }
  _impl_.enum_type_ = enum_type;
  if (enum_type) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.enum_type)
}
inline ::zetasql::EnumTypeProto* TypeProto::release_enum_type() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::EnumTypeProto* temp = _impl_.enum_type_;
  _impl_.enum_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::EnumTypeProto* TypeProto::unsafe_arena_release_enum_type() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.enum_type)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::zetasql::EnumTypeProto* temp = _impl_.enum_type_;
  _impl_.enum_type_ = nullptr;
  return temp;
}
inline ::zetasql::EnumTypeProto* TypeProto::_internal_mutable_enum_type() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.enum_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::EnumTypeProto>(GetArenaForAllocation());
    _impl_.enum_type_ = p;
  }
  return _impl_.enum_type_;
}
inline ::zetasql::EnumTypeProto* TypeProto::mutable_enum_type() {
  ::zetasql::EnumTypeProto* _msg = _internal_mutable_enum_type();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.enum_type)
  return _msg;
}
inline void TypeProto::set_allocated_enum_type(::zetasql::EnumTypeProto* enum_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.enum_type_;
  }
  if (enum_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enum_type);
    if (message_arena != submessage_arena) {
      enum_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enum_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.enum_type_ = enum_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.enum_type)
}

// optional .zetasql.RangeTypeProto range_type = 8;
inline bool TypeProto::_internal_has_range_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_type_ != nullptr);
  return value;
}
inline bool TypeProto::has_range_type() const {
  return _internal_has_range_type();
}
inline void TypeProto::clear_range_type() {
  if (_impl_.range_type_ != nullptr) _impl_.range_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::zetasql::RangeTypeProto& TypeProto::_internal_range_type() const {
  const ::zetasql::RangeTypeProto* p = _impl_.range_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::RangeTypeProto&>(
      ::zetasql::_RangeTypeProto_default_instance_);
}
inline const ::zetasql::RangeTypeProto& TypeProto::range_type() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.range_type)
  return _internal_range_type();
}
inline void TypeProto::unsafe_arena_set_allocated_range_type(
    ::zetasql::RangeTypeProto* range_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_type_);
  }
  _impl_.range_type_ = range_type;
  if (range_type) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeProto.range_type)
}
inline ::zetasql::RangeTypeProto* TypeProto::release_range_type() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::zetasql::RangeTypeProto* temp = _impl_.range_type_;
  _impl_.range_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::RangeTypeProto* TypeProto::unsafe_arena_release_range_type() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.range_type)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::zetasql::RangeTypeProto* temp = _impl_.range_type_;
  _impl_.range_type_ = nullptr;
  return temp;
}
inline ::zetasql::RangeTypeProto* TypeProto::_internal_mutable_range_type() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.range_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::RangeTypeProto>(GetArenaForAllocation());
    _impl_.range_type_ = p;
  }
  return _impl_.range_type_;
}
inline ::zetasql::RangeTypeProto* TypeProto::mutable_range_type() {
  ::zetasql::RangeTypeProto* _msg = _internal_mutable_range_type();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.range_type)
  return _msg;
}
inline void TypeProto::set_allocated_range_type(::zetasql::RangeTypeProto* range_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_type_;
  }
  if (range_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range_type);
    if (message_arena != submessage_arena) {
      range_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.range_type_ = range_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.range_type)
}

// repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
inline int TypeProto::_internal_file_descriptor_set_size() const {
  return _impl_.file_descriptor_set_.size();
}
inline int TypeProto::file_descriptor_set_size() const {
  return _internal_file_descriptor_set_size();
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet* TypeProto::mutable_file_descriptor_set(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.file_descriptor_set)
  return _impl_.file_descriptor_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet >*
TypeProto::mutable_file_descriptor_set() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.TypeProto.file_descriptor_set)
  return &_impl_.file_descriptor_set_;
}
inline const ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet& TypeProto::_internal_file_descriptor_set(int index) const {
  return _impl_.file_descriptor_set_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet& TypeProto::file_descriptor_set(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.file_descriptor_set)
  return _internal_file_descriptor_set(index);
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet* TypeProto::_internal_add_file_descriptor_set() {
  return _impl_.file_descriptor_set_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet* TypeProto::add_file_descriptor_set() {
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet* _add = _internal_add_file_descriptor_set();
  // @@protoc_insertion_point(field_add:zetasql.TypeProto.file_descriptor_set)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorSet >&
TypeProto::file_descriptor_set() const {
  // @@protoc_insertion_point(field_list:zetasql.TypeProto.file_descriptor_set)
  return _impl_.file_descriptor_set_;
}

// optional string extended_type_name = 7;
inline bool TypeProto::_internal_has_extended_type_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypeProto::has_extended_type_name() const {
  return _internal_has_extended_type_name();
}
inline void TypeProto::clear_extended_type_name() {
  _impl_.extended_type_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TypeProto::extended_type_name() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeProto.extended_type_name)
  return _internal_extended_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TypeProto::set_extended_type_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.extended_type_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.TypeProto.extended_type_name)
}
inline std::string* TypeProto::mutable_extended_type_name() {
  std::string* _s = _internal_mutable_extended_type_name();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeProto.extended_type_name)
  return _s;
}
inline const std::string& TypeProto::_internal_extended_type_name() const {
  return _impl_.extended_type_name_.Get();
}
inline void TypeProto::_internal_set_extended_type_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.extended_type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TypeProto::_internal_mutable_extended_type_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.extended_type_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TypeProto::release_extended_type_name() {
  // @@protoc_insertion_point(field_release:zetasql.TypeProto.extended_type_name)
  if (!_internal_has_extended_type_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.extended_type_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extended_type_name_.IsDefault()) {
    _impl_.extended_type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TypeProto::set_allocated_extended_type_name(std::string* extended_type_name) {
  if (extended_type_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.extended_type_name_.SetAllocated(extended_type_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extended_type_name_.IsDefault()) {
    _impl_.extended_type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeProto.extended_type_name)
}

// -------------------------------------------------------------------

// ArrayTypeProto

// optional .zetasql.TypeProto element_type = 1;
inline bool ArrayTypeProto::_internal_has_element_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_type_ != nullptr);
  return value;
}
inline bool ArrayTypeProto::has_element_type() const {
  return _internal_has_element_type();
}
inline void ArrayTypeProto::clear_element_type() {
  if (_impl_.element_type_ != nullptr) _impl_.element_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::TypeProto& ArrayTypeProto::_internal_element_type() const {
  const ::zetasql::TypeProto* p = _impl_.element_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& ArrayTypeProto::element_type() const {
  // @@protoc_insertion_point(field_get:zetasql.ArrayTypeProto.element_type)
  return _internal_element_type();
}
inline void ArrayTypeProto::unsafe_arena_set_allocated_element_type(
    ::zetasql::TypeProto* element_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_type_);
  }
  _impl_.element_type_ = element_type;
  if (element_type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ArrayTypeProto.element_type)
}
inline ::zetasql::TypeProto* ArrayTypeProto::release_element_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.element_type_;
  _impl_.element_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* ArrayTypeProto::unsafe_arena_release_element_type() {
  // @@protoc_insertion_point(field_release:zetasql.ArrayTypeProto.element_type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.element_type_;
  _impl_.element_type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* ArrayTypeProto::_internal_mutable_element_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.element_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.element_type_ = p;
  }
  return _impl_.element_type_;
}
inline ::zetasql::TypeProto* ArrayTypeProto::mutable_element_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_element_type();
  // @@protoc_insertion_point(field_mutable:zetasql.ArrayTypeProto.element_type)
  return _msg;
}
inline void ArrayTypeProto::set_allocated_element_type(::zetasql::TypeProto* element_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_type_;
  }
  if (element_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element_type);
    if (message_arena != submessage_arena) {
      element_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.element_type_ = element_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ArrayTypeProto.element_type)
}

// -------------------------------------------------------------------

// StructFieldProto

// optional string field_name = 1;
inline bool StructFieldProto::_internal_has_field_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StructFieldProto::has_field_name() const {
  return _internal_has_field_name();
}
inline void StructFieldProto::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StructFieldProto::field_name() const {
  // @@protoc_insertion_point(field_get:zetasql.StructFieldProto.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StructFieldProto::set_field_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.StructFieldProto.field_name)
}
inline std::string* StructFieldProto::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:zetasql.StructFieldProto.field_name)
  return _s;
}
inline const std::string& StructFieldProto::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void StructFieldProto::_internal_set_field_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* StructFieldProto::_internal_mutable_field_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* StructFieldProto::release_field_name() {
  // @@protoc_insertion_point(field_release:zetasql.StructFieldProto.field_name)
  if (!_internal_has_field_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.field_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StructFieldProto::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.StructFieldProto.field_name)
}

// optional .zetasql.TypeProto field_type = 2;
inline bool StructFieldProto::_internal_has_field_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.field_type_ != nullptr);
  return value;
}
inline bool StructFieldProto::has_field_type() const {
  return _internal_has_field_type();
}
inline void StructFieldProto::clear_field_type() {
  if (_impl_.field_type_ != nullptr) _impl_.field_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::TypeProto& StructFieldProto::_internal_field_type() const {
  const ::zetasql::TypeProto* p = _impl_.field_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& StructFieldProto::field_type() const {
  // @@protoc_insertion_point(field_get:zetasql.StructFieldProto.field_type)
  return _internal_field_type();
}
inline void StructFieldProto::unsafe_arena_set_allocated_field_type(
    ::zetasql::TypeProto* field_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.field_type_);
  }
  _impl_.field_type_ = field_type;
  if (field_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.StructFieldProto.field_type)
}
inline ::zetasql::TypeProto* StructFieldProto::release_field_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.field_type_;
  _impl_.field_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* StructFieldProto::unsafe_arena_release_field_type() {
  // @@protoc_insertion_point(field_release:zetasql.StructFieldProto.field_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::TypeProto* temp = _impl_.field_type_;
  _impl_.field_type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* StructFieldProto::_internal_mutable_field_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.field_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.field_type_ = p;
  }
  return _impl_.field_type_;
}
inline ::zetasql::TypeProto* StructFieldProto::mutable_field_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_field_type();
  // @@protoc_insertion_point(field_mutable:zetasql.StructFieldProto.field_type)
  return _msg;
}
inline void StructFieldProto::set_allocated_field_type(::zetasql::TypeProto* field_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.field_type_;
  }
  if (field_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(field_type);
    if (message_arena != submessage_arena) {
      field_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.field_type_ = field_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.StructFieldProto.field_type)
}

// -------------------------------------------------------------------

// StructTypeProto

// repeated .zetasql.StructFieldProto field = 1;
inline int StructTypeProto::_internal_field_size() const {
  return _impl_.field_.size();
}
inline int StructTypeProto::field_size() const {
  return _internal_field_size();
}
inline void StructTypeProto::clear_field() {
  _impl_.field_.Clear();
}
inline ::zetasql::StructFieldProto* StructTypeProto::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.StructTypeProto.field)
  return _impl_.field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::StructFieldProto >*
StructTypeProto::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.StructTypeProto.field)
  return &_impl_.field_;
}
inline const ::zetasql::StructFieldProto& StructTypeProto::_internal_field(int index) const {
  return _impl_.field_.Get(index);
}
inline const ::zetasql::StructFieldProto& StructTypeProto::field(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.StructTypeProto.field)
  return _internal_field(index);
}
inline ::zetasql::StructFieldProto* StructTypeProto::_internal_add_field() {
  return _impl_.field_.Add();
}
inline ::zetasql::StructFieldProto* StructTypeProto::add_field() {
  ::zetasql::StructFieldProto* _add = _internal_add_field();
  // @@protoc_insertion_point(field_add:zetasql.StructTypeProto.field)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::StructFieldProto >&
StructTypeProto::field() const {
  // @@protoc_insertion_point(field_list:zetasql.StructTypeProto.field)
  return _impl_.field_;
}

// -------------------------------------------------------------------

// ProtoTypeProto

// optional string proto_name = 1;
inline bool ProtoTypeProto::_internal_has_proto_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoTypeProto::has_proto_name() const {
  return _internal_has_proto_name();
}
inline void ProtoTypeProto::clear_proto_name() {
  _impl_.proto_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtoTypeProto::proto_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ProtoTypeProto.proto_name)
  return _internal_proto_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoTypeProto::set_proto_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.proto_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.proto_name)
}
inline std::string* ProtoTypeProto::mutable_proto_name() {
  std::string* _s = _internal_mutable_proto_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ProtoTypeProto.proto_name)
  return _s;
}
inline const std::string& ProtoTypeProto::_internal_proto_name() const {
  return _impl_.proto_name_.Get();
}
inline void ProtoTypeProto::_internal_set_proto_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.proto_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoTypeProto::_internal_mutable_proto_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.proto_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoTypeProto::release_proto_name() {
  // @@protoc_insertion_point(field_release:zetasql.ProtoTypeProto.proto_name)
  if (!_internal_has_proto_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.proto_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_name_.IsDefault()) {
    _impl_.proto_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoTypeProto::set_allocated_proto_name(std::string* proto_name) {
  if (proto_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proto_name_.SetAllocated(proto_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_name_.IsDefault()) {
    _impl_.proto_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.ProtoTypeProto.proto_name)
}

// optional string proto_file_name = 2;
inline bool ProtoTypeProto::_internal_has_proto_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoTypeProto::has_proto_file_name() const {
  return _internal_has_proto_file_name();
}
inline void ProtoTypeProto::clear_proto_file_name() {
  _impl_.proto_file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProtoTypeProto::proto_file_name() const {
  // @@protoc_insertion_point(field_get:zetasql.ProtoTypeProto.proto_file_name)
  return _internal_proto_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoTypeProto::set_proto_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.proto_file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.proto_file_name)
}
inline std::string* ProtoTypeProto::mutable_proto_file_name() {
  std::string* _s = _internal_mutable_proto_file_name();
  // @@protoc_insertion_point(field_mutable:zetasql.ProtoTypeProto.proto_file_name)
  return _s;
}
inline const std::string& ProtoTypeProto::_internal_proto_file_name() const {
  return _impl_.proto_file_name_.Get();
}
inline void ProtoTypeProto::_internal_set_proto_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.proto_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoTypeProto::_internal_mutable_proto_file_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.proto_file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoTypeProto::release_proto_file_name() {
  // @@protoc_insertion_point(field_release:zetasql.ProtoTypeProto.proto_file_name)
  if (!_internal_has_proto_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.proto_file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_file_name_.IsDefault()) {
    _impl_.proto_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoTypeProto::set_allocated_proto_file_name(std::string* proto_file_name) {
  if (proto_file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.proto_file_name_.SetAllocated(proto_file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_file_name_.IsDefault()) {
    _impl_.proto_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.ProtoTypeProto.proto_file_name)
}

// optional int32 file_descriptor_set_index = 3 [default = 0];
inline bool ProtoTypeProto::_internal_has_file_descriptor_set_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProtoTypeProto::has_file_descriptor_set_index() const {
  return _internal_has_file_descriptor_set_index();
}
inline void ProtoTypeProto::clear_file_descriptor_set_index() {
  _impl_.file_descriptor_set_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ProtoTypeProto::_internal_file_descriptor_set_index() const {
  return _impl_.file_descriptor_set_index_;
}
inline int32_t ProtoTypeProto::file_descriptor_set_index() const {
  // @@protoc_insertion_point(field_get:zetasql.ProtoTypeProto.file_descriptor_set_index)
  return _internal_file_descriptor_set_index();
}
inline void ProtoTypeProto::_internal_set_file_descriptor_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.file_descriptor_set_index_ = value;
}
inline void ProtoTypeProto::set_file_descriptor_set_index(int32_t value) {
  _internal_set_file_descriptor_set_index(value);
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.file_descriptor_set_index)
}

// repeated string catalog_name_path = 4;
inline int ProtoTypeProto::_internal_catalog_name_path_size() const {
  return _impl_.catalog_name_path_.size();
}
inline int ProtoTypeProto::catalog_name_path_size() const {
  return _internal_catalog_name_path_size();
}
inline void ProtoTypeProto::clear_catalog_name_path() {
  _impl_.catalog_name_path_.Clear();
}
inline std::string* ProtoTypeProto::add_catalog_name_path() {
  std::string* _s = _internal_add_catalog_name_path();
  // @@protoc_insertion_point(field_add_mutable:zetasql.ProtoTypeProto.catalog_name_path)
  return _s;
}
inline const std::string& ProtoTypeProto::_internal_catalog_name_path(int index) const {
  return _impl_.catalog_name_path_.Get(index);
}
inline const std::string& ProtoTypeProto::catalog_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ProtoTypeProto.catalog_name_path)
  return _internal_catalog_name_path(index);
}
inline std::string* ProtoTypeProto::mutable_catalog_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ProtoTypeProto.catalog_name_path)
  return _impl_.catalog_name_path_.Mutable(index);
}
inline void ProtoTypeProto::set_catalog_name_path(int index, const std::string& value) {
  _impl_.catalog_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.catalog_name_path)
}
inline void ProtoTypeProto::set_catalog_name_path(int index, std::string&& value) {
  _impl_.catalog_name_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.ProtoTypeProto.catalog_name_path)
}
inline void ProtoTypeProto::set_catalog_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.catalog_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.ProtoTypeProto.catalog_name_path)
}
inline void ProtoTypeProto::set_catalog_name_path(int index, const char* value, size_t size) {
  _impl_.catalog_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.ProtoTypeProto.catalog_name_path)
}
inline std::string* ProtoTypeProto::_internal_add_catalog_name_path() {
  return _impl_.catalog_name_path_.Add();
}
inline void ProtoTypeProto::add_catalog_name_path(const std::string& value) {
  _impl_.catalog_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.ProtoTypeProto.catalog_name_path)
}
inline void ProtoTypeProto::add_catalog_name_path(std::string&& value) {
  _impl_.catalog_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.ProtoTypeProto.catalog_name_path)
}
inline void ProtoTypeProto::add_catalog_name_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.catalog_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.ProtoTypeProto.catalog_name_path)
}
inline void ProtoTypeProto::add_catalog_name_path(const char* value, size_t size) {
  _impl_.catalog_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.ProtoTypeProto.catalog_name_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProtoTypeProto::catalog_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.ProtoTypeProto.catalog_name_path)
  return _impl_.catalog_name_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProtoTypeProto::mutable_catalog_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ProtoTypeProto.catalog_name_path)
  return &_impl_.catalog_name_path_;
}

// -------------------------------------------------------------------

// EnumTypeProto

// optional string enum_name = 1;
inline bool EnumTypeProto::_internal_has_enum_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnumTypeProto::has_enum_name() const {
  return _internal_has_enum_name();
}
inline void EnumTypeProto::clear_enum_name() {
  _impl_.enum_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnumTypeProto::enum_name() const {
  // @@protoc_insertion_point(field_get:zetasql.EnumTypeProto.enum_name)
  return _internal_enum_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnumTypeProto::set_enum_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.enum_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.enum_name)
}
inline std::string* EnumTypeProto::mutable_enum_name() {
  std::string* _s = _internal_mutable_enum_name();
  // @@protoc_insertion_point(field_mutable:zetasql.EnumTypeProto.enum_name)
  return _s;
}
inline const std::string& EnumTypeProto::_internal_enum_name() const {
  return _impl_.enum_name_.Get();
}
inline void EnumTypeProto::_internal_set_enum_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enum_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnumTypeProto::_internal_mutable_enum_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.enum_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EnumTypeProto::release_enum_name() {
  // @@protoc_insertion_point(field_release:zetasql.EnumTypeProto.enum_name)
  if (!_internal_has_enum_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.enum_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enum_name_.IsDefault()) {
    _impl_.enum_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EnumTypeProto::set_allocated_enum_name(std::string* enum_name) {
  if (enum_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.enum_name_.SetAllocated(enum_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enum_name_.IsDefault()) {
    _impl_.enum_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.EnumTypeProto.enum_name)
}

// optional string enum_file_name = 2;
inline bool EnumTypeProto::_internal_has_enum_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EnumTypeProto::has_enum_file_name() const {
  return _internal_has_enum_file_name();
}
inline void EnumTypeProto::clear_enum_file_name() {
  _impl_.enum_file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EnumTypeProto::enum_file_name() const {
  // @@protoc_insertion_point(field_get:zetasql.EnumTypeProto.enum_file_name)
  return _internal_enum_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnumTypeProto::set_enum_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.enum_file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.enum_file_name)
}
inline std::string* EnumTypeProto::mutable_enum_file_name() {
  std::string* _s = _internal_mutable_enum_file_name();
  // @@protoc_insertion_point(field_mutable:zetasql.EnumTypeProto.enum_file_name)
  return _s;
}
inline const std::string& EnumTypeProto::_internal_enum_file_name() const {
  return _impl_.enum_file_name_.Get();
}
inline void EnumTypeProto::_internal_set_enum_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.enum_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnumTypeProto::_internal_mutable_enum_file_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.enum_file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EnumTypeProto::release_enum_file_name() {
  // @@protoc_insertion_point(field_release:zetasql.EnumTypeProto.enum_file_name)
  if (!_internal_has_enum_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.enum_file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enum_file_name_.IsDefault()) {
    _impl_.enum_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EnumTypeProto::set_allocated_enum_file_name(std::string* enum_file_name) {
  if (enum_file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.enum_file_name_.SetAllocated(enum_file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enum_file_name_.IsDefault()) {
    _impl_.enum_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.EnumTypeProto.enum_file_name)
}

// optional int32 file_descriptor_set_index = 3 [default = 0];
inline bool EnumTypeProto::_internal_has_file_descriptor_set_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EnumTypeProto::has_file_descriptor_set_index() const {
  return _internal_has_file_descriptor_set_index();
}
inline void EnumTypeProto::clear_file_descriptor_set_index() {
  _impl_.file_descriptor_set_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t EnumTypeProto::_internal_file_descriptor_set_index() const {
  return _impl_.file_descriptor_set_index_;
}
inline int32_t EnumTypeProto::file_descriptor_set_index() const {
  // @@protoc_insertion_point(field_get:zetasql.EnumTypeProto.file_descriptor_set_index)
  return _internal_file_descriptor_set_index();
}
inline void EnumTypeProto::_internal_set_file_descriptor_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.file_descriptor_set_index_ = value;
}
inline void EnumTypeProto::set_file_descriptor_set_index(int32_t value) {
  _internal_set_file_descriptor_set_index(value);
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.file_descriptor_set_index)
}

// repeated string catalog_name_path = 4;
inline int EnumTypeProto::_internal_catalog_name_path_size() const {
  return _impl_.catalog_name_path_.size();
}
inline int EnumTypeProto::catalog_name_path_size() const {
  return _internal_catalog_name_path_size();
}
inline void EnumTypeProto::clear_catalog_name_path() {
  _impl_.catalog_name_path_.Clear();
}
inline std::string* EnumTypeProto::add_catalog_name_path() {
  std::string* _s = _internal_add_catalog_name_path();
  // @@protoc_insertion_point(field_add_mutable:zetasql.EnumTypeProto.catalog_name_path)
  return _s;
}
inline const std::string& EnumTypeProto::_internal_catalog_name_path(int index) const {
  return _impl_.catalog_name_path_.Get(index);
}
inline const std::string& EnumTypeProto::catalog_name_path(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.EnumTypeProto.catalog_name_path)
  return _internal_catalog_name_path(index);
}
inline std::string* EnumTypeProto::mutable_catalog_name_path(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.EnumTypeProto.catalog_name_path)
  return _impl_.catalog_name_path_.Mutable(index);
}
inline void EnumTypeProto::set_catalog_name_path(int index, const std::string& value) {
  _impl_.catalog_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.catalog_name_path)
}
inline void EnumTypeProto::set_catalog_name_path(int index, std::string&& value) {
  _impl_.catalog_name_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zetasql.EnumTypeProto.catalog_name_path)
}
inline void EnumTypeProto::set_catalog_name_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.catalog_name_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasql.EnumTypeProto.catalog_name_path)
}
inline void EnumTypeProto::set_catalog_name_path(int index, const char* value, size_t size) {
  _impl_.catalog_name_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasql.EnumTypeProto.catalog_name_path)
}
inline std::string* EnumTypeProto::_internal_add_catalog_name_path() {
  return _impl_.catalog_name_path_.Add();
}
inline void EnumTypeProto::add_catalog_name_path(const std::string& value) {
  _impl_.catalog_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasql.EnumTypeProto.catalog_name_path)
}
inline void EnumTypeProto::add_catalog_name_path(std::string&& value) {
  _impl_.catalog_name_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasql.EnumTypeProto.catalog_name_path)
}
inline void EnumTypeProto::add_catalog_name_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.catalog_name_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasql.EnumTypeProto.catalog_name_path)
}
inline void EnumTypeProto::add_catalog_name_path(const char* value, size_t size) {
  _impl_.catalog_name_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasql.EnumTypeProto.catalog_name_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EnumTypeProto::catalog_name_path() const {
  // @@protoc_insertion_point(field_list:zetasql.EnumTypeProto.catalog_name_path)
  return _impl_.catalog_name_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EnumTypeProto::mutable_catalog_name_path() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.EnumTypeProto.catalog_name_path)
  return &_impl_.catalog_name_path_;
}

// -------------------------------------------------------------------

// RangeTypeProto

// optional .zetasql.TypeProto element_type = 1;
inline bool RangeTypeProto::_internal_has_element_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_type_ != nullptr);
  return value;
}
inline bool RangeTypeProto::has_element_type() const {
  return _internal_has_element_type();
}
inline void RangeTypeProto::clear_element_type() {
  if (_impl_.element_type_ != nullptr) _impl_.element_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::TypeProto& RangeTypeProto::_internal_element_type() const {
  const ::zetasql::TypeProto* p = _impl_.element_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& RangeTypeProto::element_type() const {
  // @@protoc_insertion_point(field_get:zetasql.RangeTypeProto.element_type)
  return _internal_element_type();
}
inline void RangeTypeProto::unsafe_arena_set_allocated_element_type(
    ::zetasql::TypeProto* element_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_type_);
  }
  _impl_.element_type_ = element_type;
  if (element_type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.RangeTypeProto.element_type)
}
inline ::zetasql::TypeProto* RangeTypeProto::release_element_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.element_type_;
  _impl_.element_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* RangeTypeProto::unsafe_arena_release_element_type() {
  // @@protoc_insertion_point(field_release:zetasql.RangeTypeProto.element_type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::TypeProto* temp = _impl_.element_type_;
  _impl_.element_type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* RangeTypeProto::_internal_mutable_element_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.element_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    _impl_.element_type_ = p;
  }
  return _impl_.element_type_;
}
inline ::zetasql::TypeProto* RangeTypeProto::mutable_element_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_element_type();
  // @@protoc_insertion_point(field_mutable:zetasql.RangeTypeProto.element_type)
  return _msg;
}
inline void RangeTypeProto::set_allocated_element_type(::zetasql::TypeProto* element_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_type_;
  }
  if (element_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element_type);
    if (message_arena != submessage_arena) {
      element_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.element_type_ = element_type;
  // @@protoc_insertion_point(field_set_allocated:zetasql.RangeTypeProto.element_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zetasql::TypeKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::TypeKind>() {
  return ::zetasql::TypeKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_2eproto
