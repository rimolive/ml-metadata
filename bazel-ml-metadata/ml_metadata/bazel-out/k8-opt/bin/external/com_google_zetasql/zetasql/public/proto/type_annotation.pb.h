// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/proto/type_annotation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto;
namespace zetasql {
class DeprecatedEncoding;
struct DeprecatedEncodingDefaultTypeInternal;
extern DeprecatedEncodingDefaultTypeInternal _DeprecatedEncoding_default_instance_;
class FieldFormat;
struct FieldFormatDefaultTypeInternal;
extern FieldFormatDefaultTypeInternal _FieldFormat_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::DeprecatedEncoding* Arena::CreateMaybeMessage<::zetasql::DeprecatedEncoding>(Arena*);
template<> ::zetasql::FieldFormat* Arena::CreateMaybeMessage<::zetasql::FieldFormat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

enum FieldFormat_Format : int {
  FieldFormat_Format_DEFAULT_FORMAT = 0,
  FieldFormat_Format_DATE = 1,
  FieldFormat_Format_TIMESTAMP_SECONDS = 2,
  FieldFormat_Format_TIMESTAMP_MILLIS = 3,
  FieldFormat_Format_TIMESTAMP_MICROS = 4,
  FieldFormat_Format_TIMESTAMP_NANOS = 5,
  FieldFormat_Format_DATE_DECIMAL = 6,
  FieldFormat_Format_TIME_MICROS = 7,
  FieldFormat_Format_DATETIME_MICROS = 8,
  FieldFormat_Format_ST_GEOGRAPHY_ENCODED = 9,
  FieldFormat_Format_NUMERIC = 10,
  FieldFormat_Format_BIGNUMERIC = 11,
  FieldFormat_Format_JSON = 12,
  FieldFormat_Format_INTERVAL = 14,
  FieldFormat_Format___FieldFormat_Type__switch_must_have_a_default__ = -1
};
bool FieldFormat_Format_IsValid(int value);
constexpr FieldFormat_Format FieldFormat_Format_Format_MIN = FieldFormat_Format___FieldFormat_Type__switch_must_have_a_default__;
constexpr FieldFormat_Format FieldFormat_Format_Format_MAX = FieldFormat_Format_INTERVAL;
constexpr int FieldFormat_Format_Format_ARRAYSIZE = FieldFormat_Format_Format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldFormat_Format_descriptor();
template<typename T>
inline const std::string& FieldFormat_Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldFormat_Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldFormat_Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldFormat_Format_descriptor(), enum_t_value);
}
inline bool FieldFormat_Format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FieldFormat_Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldFormat_Format>(
    FieldFormat_Format_descriptor(), name, value);
}
enum DeprecatedEncoding_Encoding : int {
  DeprecatedEncoding_Encoding_DEFAULT_ENCODING = 0,
  DeprecatedEncoding_Encoding_DATE_PACKED32 = 1,
  DeprecatedEncoding_Encoding_DATE_DECIMAL = 1,
  DeprecatedEncoding_Encoding___FieldFormat_Encoding__switch_must_have_a_default__ = -1
};
bool DeprecatedEncoding_Encoding_IsValid(int value);
constexpr DeprecatedEncoding_Encoding DeprecatedEncoding_Encoding_Encoding_MIN = DeprecatedEncoding_Encoding___FieldFormat_Encoding__switch_must_have_a_default__;
constexpr DeprecatedEncoding_Encoding DeprecatedEncoding_Encoding_Encoding_MAX = DeprecatedEncoding_Encoding_DATE_PACKED32;
constexpr int DeprecatedEncoding_Encoding_Encoding_ARRAYSIZE = DeprecatedEncoding_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeprecatedEncoding_Encoding_descriptor();
template<typename T>
inline const std::string& DeprecatedEncoding_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeprecatedEncoding_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeprecatedEncoding_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeprecatedEncoding_Encoding_descriptor(), enum_t_value);
}
inline bool DeprecatedEncoding_Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeprecatedEncoding_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeprecatedEncoding_Encoding>(
    DeprecatedEncoding_Encoding_descriptor(), name, value);
}
// ===================================================================

class FieldFormat final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:zetasql.FieldFormat) */ {
 public:
  inline FieldFormat() : FieldFormat(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FieldFormat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldFormat(const FieldFormat& from);
  FieldFormat(FieldFormat&& from) noexcept
    : FieldFormat() {
    *this = ::std::move(from);
  }

  inline FieldFormat& operator=(const FieldFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldFormat& operator=(FieldFormat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldFormat& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldFormat* internal_default_instance() {
    return reinterpret_cast<const FieldFormat*>(
               &_FieldFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FieldFormat& a, FieldFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldFormat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldFormat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FieldFormat& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FieldFormat& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.FieldFormat";
  }
  protected:
  explicit FieldFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FieldFormat_Format Format;
  static constexpr Format DEFAULT_FORMAT =
    FieldFormat_Format_DEFAULT_FORMAT;
  static constexpr Format DATE =
    FieldFormat_Format_DATE;
  static constexpr Format TIMESTAMP_SECONDS =
    FieldFormat_Format_TIMESTAMP_SECONDS;
  static constexpr Format TIMESTAMP_MILLIS =
    FieldFormat_Format_TIMESTAMP_MILLIS;
  static constexpr Format TIMESTAMP_MICROS =
    FieldFormat_Format_TIMESTAMP_MICROS;
  static constexpr Format TIMESTAMP_NANOS =
    FieldFormat_Format_TIMESTAMP_NANOS;
  static constexpr Format DATE_DECIMAL =
    FieldFormat_Format_DATE_DECIMAL;
  static constexpr Format TIME_MICROS =
    FieldFormat_Format_TIME_MICROS;
  static constexpr Format DATETIME_MICROS =
    FieldFormat_Format_DATETIME_MICROS;
  static constexpr Format ST_GEOGRAPHY_ENCODED =
    FieldFormat_Format_ST_GEOGRAPHY_ENCODED;
  static constexpr Format NUMERIC =
    FieldFormat_Format_NUMERIC;
  static constexpr Format BIGNUMERIC =
    FieldFormat_Format_BIGNUMERIC;
  static constexpr Format JSON =
    FieldFormat_Format_JSON;
  static constexpr Format INTERVAL =
    FieldFormat_Format_INTERVAL;
  static constexpr Format __FieldFormat_Type__switch_must_have_a_default__ =
    FieldFormat_Format___FieldFormat_Type__switch_must_have_a_default__;
  static inline bool Format_IsValid(int value) {
    return FieldFormat_Format_IsValid(value);
  }
  static constexpr Format Format_MIN =
    FieldFormat_Format_Format_MIN;
  static constexpr Format Format_MAX =
    FieldFormat_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE =
    FieldFormat_Format_Format_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Format_descriptor() {
    return FieldFormat_Format_descriptor();
  }
  template<typename T>
  static inline const std::string& Format_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Format>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Format_Name.");
    return FieldFormat_Format_Name(enum_t_value);
  }
  static inline bool Format_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Format* value) {
    return FieldFormat_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zetasql.FieldFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class DeprecatedEncoding final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:zetasql.DeprecatedEncoding) */ {
 public:
  inline DeprecatedEncoding() : DeprecatedEncoding(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeprecatedEncoding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeprecatedEncoding(const DeprecatedEncoding& from);
  DeprecatedEncoding(DeprecatedEncoding&& from) noexcept
    : DeprecatedEncoding() {
    *this = ::std::move(from);
  }

  inline DeprecatedEncoding& operator=(const DeprecatedEncoding& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeprecatedEncoding& operator=(DeprecatedEncoding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeprecatedEncoding& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeprecatedEncoding* internal_default_instance() {
    return reinterpret_cast<const DeprecatedEncoding*>(
               &_DeprecatedEncoding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeprecatedEncoding& a, DeprecatedEncoding& b) {
    a.Swap(&b);
  }
  inline void Swap(DeprecatedEncoding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeprecatedEncoding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeprecatedEncoding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeprecatedEncoding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeprecatedEncoding& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeprecatedEncoding& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.DeprecatedEncoding";
  }
  protected:
  explicit DeprecatedEncoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeprecatedEncoding_Encoding Encoding;
  static constexpr Encoding DEFAULT_ENCODING =
    DeprecatedEncoding_Encoding_DEFAULT_ENCODING;
  static constexpr Encoding DATE_PACKED32 =
    DeprecatedEncoding_Encoding_DATE_PACKED32;
  static constexpr Encoding DATE_DECIMAL =
    DeprecatedEncoding_Encoding_DATE_DECIMAL;
  static constexpr Encoding __FieldFormat_Encoding__switch_must_have_a_default__ =
    DeprecatedEncoding_Encoding___FieldFormat_Encoding__switch_must_have_a_default__;
  static inline bool Encoding_IsValid(int value) {
    return DeprecatedEncoding_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    DeprecatedEncoding_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    DeprecatedEncoding_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    DeprecatedEncoding_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return DeprecatedEncoding_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return DeprecatedEncoding_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Encoding* value) {
    return DeprecatedEncoding_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zetasql.DeprecatedEncoding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto;
};
// ===================================================================

static const int kFormatFieldNumber = 68711883;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::zetasql::FieldFormat_Format, ::zetasql::FieldFormat_Format_IsValid>, 14, false >
  format;
static const int kTypeFieldNumber = 49796453;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::zetasql::FieldFormat_Format, ::zetasql::FieldFormat_Format_IsValid>, 14, false >
  type;
static const int kEncodingFieldNumber = 62897319;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::zetasql::DeprecatedEncoding_Encoding, ::zetasql::DeprecatedEncoding_Encoding_IsValid>, 14, false >
  encoding;
static const int kUseDefaultsFieldNumber = 49779519;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  use_defaults;
static const int kUseFieldDefaultsFieldNumber = 49659010;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  use_field_defaults;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FieldFormat

// -------------------------------------------------------------------

// DeprecatedEncoding

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zetasql::FieldFormat_Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::FieldFormat_Format>() {
  return ::zetasql::FieldFormat_Format_descriptor();
}
template <> struct is_proto_enum< ::zetasql::DeprecatedEncoding_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zetasql::DeprecatedEncoding_Encoding>() {
  return ::zetasql::DeprecatedEncoding_Encoding_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto
