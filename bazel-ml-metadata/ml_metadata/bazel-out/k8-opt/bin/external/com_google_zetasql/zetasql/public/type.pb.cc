// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/type.proto

#include "zetasql/public/type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR TypeProto::TypeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_descriptor_set_)*/{}
  , /*decltype(_impl_.extended_type_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.array_type_)*/nullptr
  , /*decltype(_impl_.struct_type_)*/nullptr
  , /*decltype(_impl_.proto_type_)*/nullptr
  , /*decltype(_impl_.enum_type_)*/nullptr
  , /*decltype(_impl_.range_type_)*/nullptr
  , /*decltype(_impl_.type_kind_)*/-1} {}
struct TypeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProtoDefaultTypeInternal() {}
  union {
    TypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProtoDefaultTypeInternal _TypeProto_default_instance_;
PROTOBUF_CONSTEXPR ArrayTypeProto::ArrayTypeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_type_)*/nullptr} {}
struct ArrayTypeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArrayTypeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArrayTypeProtoDefaultTypeInternal() {}
  union {
    ArrayTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArrayTypeProtoDefaultTypeInternal _ArrayTypeProto_default_instance_;
PROTOBUF_CONSTEXPR StructFieldProto::StructFieldProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_type_)*/nullptr} {}
struct StructFieldProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructFieldProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructFieldProtoDefaultTypeInternal() {}
  union {
    StructFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructFieldProtoDefaultTypeInternal _StructFieldProto_default_instance_;
PROTOBUF_CONSTEXPR StructTypeProto::StructTypeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StructTypeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructTypeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructTypeProtoDefaultTypeInternal() {}
  union {
    StructTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructTypeProtoDefaultTypeInternal _StructTypeProto_default_instance_;
PROTOBUF_CONSTEXPR ProtoTypeProto::ProtoTypeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.catalog_name_path_)*/{}
  , /*decltype(_impl_.proto_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_descriptor_set_index_)*/0} {}
struct ProtoTypeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoTypeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoTypeProtoDefaultTypeInternal() {}
  union {
    ProtoTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoTypeProtoDefaultTypeInternal _ProtoTypeProto_default_instance_;
PROTOBUF_CONSTEXPR EnumTypeProto::EnumTypeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.catalog_name_path_)*/{}
  , /*decltype(_impl_.enum_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enum_file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_descriptor_set_index_)*/0} {}
struct EnumTypeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnumTypeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnumTypeProtoDefaultTypeInternal() {}
  union {
    EnumTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnumTypeProtoDefaultTypeInternal _EnumTypeProto_default_instance_;
PROTOBUF_CONSTEXPR RangeTypeProto::RangeTypeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_type_)*/nullptr} {}
struct RangeTypeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeTypeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeTypeProtoDefaultTypeInternal() {}
  union {
    RangeTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeTypeProtoDefaultTypeInternal _RangeTypeProto_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fpublic_2ftype_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_zetasql_2fpublic_2ftype_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2ftype_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2ftype_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_.type_kind_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_.array_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_.struct_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_.proto_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_.enum_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_.range_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_.file_descriptor_set_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _impl_.extended_type_name_),
  6,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ArrayTypeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ArrayTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ArrayTypeProto, _impl_.element_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::StructFieldProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::StructFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::StructFieldProto, _impl_.field_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::StructFieldProto, _impl_.field_type_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::StructTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::StructTypeProto, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, _impl_.proto_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, _impl_.proto_file_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, _impl_.file_descriptor_set_index_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, _impl_.catalog_name_path_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, _impl_.enum_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, _impl_.enum_file_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, _impl_.file_descriptor_set_index_),
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, _impl_.catalog_name_path_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::RangeTypeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::RangeTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::RangeTypeProto, _impl_.element_type_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::zetasql::TypeProto)},
  { 22, 29, -1, sizeof(::zetasql::ArrayTypeProto)},
  { 30, 38, -1, sizeof(::zetasql::StructFieldProto)},
  { 40, -1, -1, sizeof(::zetasql::StructTypeProto)},
  { 47, 57, -1, sizeof(::zetasql::ProtoTypeProto)},
  { 61, 71, -1, sizeof(::zetasql::EnumTypeProto)},
  { 75, 82, -1, sizeof(::zetasql::RangeTypeProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_TypeProto_default_instance_._instance,
  &::zetasql::_ArrayTypeProto_default_instance_._instance,
  &::zetasql::_StructFieldProto_default_instance_._instance,
  &::zetasql::_StructTypeProto_default_instance_._instance,
  &::zetasql::_ProtoTypeProto_default_instance_._instance,
  &::zetasql::_EnumTypeProto_default_instance_._instance,
  &::zetasql::_RangeTypeProto_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fpublic_2ftype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031zetasql/public/type.proto\022\007zetasql\032 go"
  "ogle/protobuf/descriptor.proto\"\373\002\n\tTypeP"
  "roto\022$\n\ttype_kind\030\001 \001(\0162\021.zetasql.TypeKi"
  "nd\022+\n\narray_type\030\002 \001(\0132\027.zetasql.ArrayTy"
  "peProto\022-\n\013struct_type\030\003 \001(\0132\030.zetasql.S"
  "tructTypeProto\022+\n\nproto_type\030\004 \001(\0132\027.zet"
  "asql.ProtoTypeProto\022)\n\tenum_type\030\005 \001(\0132\026"
  ".zetasql.EnumTypeProto\022+\n\nrange_type\030\010 \001"
  "(\0132\027.zetasql.RangeTypeProto\022\?\n\023file_desc"
  "riptor_set\030\006 \003(\0132\".google.protobuf.FileD"
  "escriptorSet\022\032\n\022extended_type_name\030\007 \001(\t"
  "*\n\010\240\215\006\020\200\200\200\200\002\":\n\016ArrayTypeProto\022(\n\014elemen"
  "t_type\030\001 \001(\0132\022.zetasql.TypeProto\"N\n\020Stru"
  "ctFieldProto\022\022\n\nfield_name\030\001 \001(\t\022&\n\nfiel"
  "d_type\030\002 \001(\0132\022.zetasql.TypeProto\";\n\017Stru"
  "ctTypeProto\022(\n\005field\030\001 \003(\0132\031.zetasql.Str"
  "uctFieldProto\"~\n\016ProtoTypeProto\022\022\n\nproto"
  "_name\030\001 \001(\t\022\027\n\017proto_file_name\030\002 \001(\t\022$\n\031"
  "file_descriptor_set_index\030\003 \001(\005:\0010\022\031\n\021ca"
  "talog_name_path\030\004 \003(\t\"{\n\rEnumTypeProto\022\021"
  "\n\tenum_name\030\001 \001(\t\022\026\n\016enum_file_name\030\002 \001("
  "\t\022$\n\031file_descriptor_set_index\030\003 \001(\005:\0010\022"
  "\031\n\021catalog_name_path\030\004 \003(\t\":\n\016RangeTypeP"
  "roto\022(\n\014element_type\030\001 \001(\0132\022.zetasql.Typ"
  "eProto*\353\003\n\010TypeKind\0225\n(__TypeKind__switc"
  "h_must_have_a_default__\020\377\377\377\377\377\377\377\377\377\001\022\020\n\014TY"
  "PE_UNKNOWN\020\000\022\016\n\nTYPE_INT32\020\001\022\016\n\nTYPE_INT"
  "64\020\002\022\017\n\013TYPE_UINT32\020\003\022\017\n\013TYPE_UINT64\020\004\022\r"
  "\n\tTYPE_BOOL\020\005\022\016\n\nTYPE_FLOAT\020\006\022\017\n\013TYPE_DO"
  "UBLE\020\007\022\017\n\013TYPE_STRING\020\010\022\016\n\nTYPE_BYTES\020\t\022"
  "\r\n\tTYPE_DATE\020\n\022\022\n\016TYPE_TIMESTAMP\020\023\022\r\n\tTY"
  "PE_ENUM\020\017\022\016\n\nTYPE_ARRAY\020\020\022\017\n\013TYPE_STRUCT"
  "\020\021\022\016\n\nTYPE_PROTO\020\022\022\r\n\tTYPE_TIME\020\024\022\021\n\rTYP"
  "E_DATETIME\020\025\022\022\n\016TYPE_GEOGRAPHY\020\026\022\020\n\014TYPE"
  "_NUMERIC\020\027\022\023\n\017TYPE_BIGNUMERIC\020\030\022\021\n\rTYPE_"
  "EXTENDED\020\031\022\r\n\tTYPE_JSON\020\032\022\021\n\rTYPE_INTERV"
  "AL\020\033\022\016\n\nTYPE_RANGE\020\035B$\n\022com.google.zetas"
  "qlB\013ZetaSQLType\370\001\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_zetasql_2fpublic_2ftype_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_zetasql_2fpublic_2ftype_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fpublic_2ftype_2eproto = {
    false, false, 1498, descriptor_table_protodef_zetasql_2fpublic_2ftype_2eproto,
    "zetasql/public/type.proto",
    &descriptor_table_zetasql_2fpublic_2ftype_2eproto_once, descriptor_table_zetasql_2fpublic_2ftype_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_zetasql_2fpublic_2ftype_2eproto::offsets,
    file_level_metadata_zetasql_2fpublic_2ftype_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2ftype_2eproto,
    file_level_service_descriptors_zetasql_2fpublic_2ftype_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fpublic_2ftype_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2ftype_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2ftype_2eproto(&descriptor_table_zetasql_2fpublic_2ftype_2eproto);
namespace zetasql {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2ftype_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2ftype_2eproto[0];
}
bool TypeKind_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto>()._impl_._has_bits_);
  static void set_has_type_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::ArrayTypeProto& array_type(const TypeProto* msg);
  static void set_has_array_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::StructTypeProto& struct_type(const TypeProto* msg);
  static void set_has_struct_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ProtoTypeProto& proto_type(const TypeProto* msg);
  static void set_has_proto_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::EnumTypeProto& enum_type(const TypeProto* msg);
  static void set_has_enum_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::RangeTypeProto& range_type(const TypeProto* msg);
  static void set_has_range_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_extended_type_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ArrayTypeProto&
TypeProto::_Internal::array_type(const TypeProto* msg) {
  return *msg->_impl_.array_type_;
}
const ::zetasql::StructTypeProto&
TypeProto::_Internal::struct_type(const TypeProto* msg) {
  return *msg->_impl_.struct_type_;
}
const ::zetasql::ProtoTypeProto&
TypeProto::_Internal::proto_type(const TypeProto* msg) {
  return *msg->_impl_.proto_type_;
}
const ::zetasql::EnumTypeProto&
TypeProto::_Internal::enum_type(const TypeProto* msg) {
  return *msg->_impl_.enum_type_;
}
const ::zetasql::RangeTypeProto&
TypeProto::_Internal::range_type(const TypeProto* msg) {
  return *msg->_impl_.range_type_;
}
void TypeProto::clear_file_descriptor_set() {
  _impl_.file_descriptor_set_.Clear();
}
TypeProto::TypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.TypeProto)
}
TypeProto::TypeProto(const TypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_descriptor_set_){from._impl_.file_descriptor_set_}
    , decltype(_impl_.extended_type_name_){}
    , decltype(_impl_.array_type_){nullptr}
    , decltype(_impl_.struct_type_){nullptr}
    , decltype(_impl_.proto_type_){nullptr}
    , decltype(_impl_.enum_type_){nullptr}
    , decltype(_impl_.range_type_){nullptr}
    , decltype(_impl_.type_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.extended_type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extended_type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extended_type_name()) {
    _this->_impl_.extended_type_name_.Set(from._internal_extended_type_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_array_type()) {
    _this->_impl_.array_type_ = new ::zetasql::ArrayTypeProto(*from._impl_.array_type_);
  }
  if (from._internal_has_struct_type()) {
    _this->_impl_.struct_type_ = new ::zetasql::StructTypeProto(*from._impl_.struct_type_);
  }
  if (from._internal_has_proto_type()) {
    _this->_impl_.proto_type_ = new ::zetasql::ProtoTypeProto(*from._impl_.proto_type_);
  }
  if (from._internal_has_enum_type()) {
    _this->_impl_.enum_type_ = new ::zetasql::EnumTypeProto(*from._impl_.enum_type_);
  }
  if (from._internal_has_range_type()) {
    _this->_impl_.range_type_ = new ::zetasql::RangeTypeProto(*from._impl_.range_type_);
  }
  _this->_impl_.type_kind_ = from._impl_.type_kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.TypeProto)
}

inline void TypeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_descriptor_set_){arena}
    , decltype(_impl_.extended_type_name_){}
    , decltype(_impl_.array_type_){nullptr}
    , decltype(_impl_.struct_type_){nullptr}
    , decltype(_impl_.proto_type_){nullptr}
    , decltype(_impl_.enum_type_){nullptr}
    , decltype(_impl_.range_type_){nullptr}
    , decltype(_impl_.type_kind_){-1}
  };
  _impl_.extended_type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extended_type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TypeProto::~TypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.TypeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.file_descriptor_set_.~RepeatedPtrField();
  _impl_.extended_type_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.array_type_;
  if (this != internal_default_instance()) delete _impl_.struct_type_;
  if (this != internal_default_instance()) delete _impl_.proto_type_;
  if (this != internal_default_instance()) delete _impl_.enum_type_;
  if (this != internal_default_instance()) delete _impl_.range_type_;
}

void TypeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.file_descriptor_set_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.extended_type_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.array_type_ != nullptr);
      _impl_.array_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.struct_type_ != nullptr);
      _impl_.struct_type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.proto_type_ != nullptr);
      _impl_.proto_type_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.enum_type_ != nullptr);
      _impl_.enum_type_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.range_type_ != nullptr);
      _impl_.range_type_->Clear();
    }
    _impl_.type_kind_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.TypeKind type_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::TypeKind_IsValid(val))) {
            _internal_set_type_kind(static_cast<::zetasql::TypeKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ArrayTypeProto array_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.StructTypeProto struct_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ProtoTypeProto proto_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proto_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.EnumTypeProto enum_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_enum_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_descriptor_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string extended_type_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_extended_type_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.TypeProto.extended_type_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.RangeTypeProto range_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((800000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.TypeKind type_kind = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type_kind(), target);
  }

  // optional .zetasql.ArrayTypeProto array_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::array_type(this),
        _Internal::array_type(this).GetCachedSize(), target, stream);
  }

  // optional .zetasql.StructTypeProto struct_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::struct_type(this),
        _Internal::struct_type(this).GetCachedSize(), target, stream);
  }

  // optional .zetasql.ProtoTypeProto proto_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proto_type(this),
        _Internal::proto_type(this).GetCachedSize(), target, stream);
  }

  // optional .zetasql.EnumTypeProto enum_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::enum_type(this),
        _Internal::enum_type(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_descriptor_set_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_descriptor_set(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string extended_type_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extended_type_name().data(), static_cast<int>(this->_internal_extended_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TypeProto.extended_type_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_extended_type_name(), target);
  }

  // optional .zetasql.RangeTypeProto range_type = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::range_type(this),
        _Internal::range_type(this).GetCachedSize(), target, stream);
  }

  // Extension range [100000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 100000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TypeProto)
  return target;
}

size_t TypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TypeProto)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
  total_size += 1UL * this->_internal_file_descriptor_set_size();
  for (const auto& msg : this->_impl_.file_descriptor_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string extended_type_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extended_type_name());
    }

    // optional .zetasql.ArrayTypeProto array_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.array_type_);
    }

    // optional .zetasql.StructTypeProto struct_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.struct_type_);
    }

    // optional .zetasql.ProtoTypeProto proto_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proto_type_);
    }

    // optional .zetasql.EnumTypeProto enum_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.enum_type_);
    }

    // optional .zetasql.RangeTypeProto range_type = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_type_);
    }

    // optional .zetasql.TypeKind type_kind = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeProto::GetClassData() const { return &_class_data_; }


void TypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeProto*>(&to_msg);
  auto& from = static_cast<const TypeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TypeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_descriptor_set_.MergeFrom(from._impl_.file_descriptor_set_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_extended_type_name(from._internal_extended_type_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_array_type()->::zetasql::ArrayTypeProto::MergeFrom(
          from._internal_array_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_struct_type()->::zetasql::StructTypeProto::MergeFrom(
          from._internal_struct_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_proto_type()->::zetasql::ProtoTypeProto::MergeFrom(
          from._internal_proto_type());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_enum_type()->::zetasql::EnumTypeProto::MergeFrom(
          from._internal_enum_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_range_type()->::zetasql::RangeTypeProto::MergeFrom(
          from._internal_range_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_kind_ = from._impl_.type_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeProto::CopyFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.file_descriptor_set_))
    return false;
  if (_internal_has_array_type()) {
    if (!_impl_.array_type_->IsInitialized()) return false;
  }
  if (_internal_has_struct_type()) {
    if (!_impl_.struct_type_->IsInitialized()) return false;
  }
  if (_internal_has_range_type()) {
    if (!_impl_.range_type_->IsInitialized()) return false;
  }
  return true;
}

void TypeProto::InternalSwap(TypeProto* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.file_descriptor_set_.InternalSwap(&other->_impl_.file_descriptor_set_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extended_type_name_, lhs_arena,
      &other->_impl_.extended_type_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeProto, _impl_.range_type_)
      + sizeof(TypeProto::_impl_.range_type_)
      - PROTOBUF_FIELD_OFFSET(TypeProto, _impl_.array_type_)>(
          reinterpret_cast<char*>(&_impl_.array_type_),
          reinterpret_cast<char*>(&other->_impl_.array_type_));
  swap(_impl_.type_kind_, other->_impl_.type_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_2eproto[0]);
}

// ===================================================================

class ArrayTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ArrayTypeProto>()._impl_._has_bits_);
  static const ::zetasql::TypeProto& element_type(const ArrayTypeProto* msg);
  static void set_has_element_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::TypeProto&
ArrayTypeProto::_Internal::element_type(const ArrayTypeProto* msg) {
  return *msg->_impl_.element_type_;
}
ArrayTypeProto::ArrayTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ArrayTypeProto)
}
ArrayTypeProto::ArrayTypeProto(const ArrayTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArrayTypeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_element_type()) {
    _this->_impl_.element_type_ = new ::zetasql::TypeProto(*from._impl_.element_type_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ArrayTypeProto)
}

inline void ArrayTypeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_type_){nullptr}
  };
}

ArrayTypeProto::~ArrayTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ArrayTypeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArrayTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.element_type_;
}

void ArrayTypeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArrayTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ArrayTypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.element_type_ != nullptr);
    _impl_.element_type_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayTypeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.TypeProto element_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_element_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArrayTypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ArrayTypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.TypeProto element_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::element_type(this),
        _Internal::element_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ArrayTypeProto)
  return target;
}

size_t ArrayTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ArrayTypeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zetasql.TypeProto element_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.element_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArrayTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArrayTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArrayTypeProto::GetClassData() const { return &_class_data_; }


void ArrayTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArrayTypeProto*>(&to_msg);
  auto& from = static_cast<const ArrayTypeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ArrayTypeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_element_type()) {
    _this->_internal_mutable_element_type()->::zetasql::TypeProto::MergeFrom(
        from._internal_element_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArrayTypeProto::CopyFrom(const ArrayTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ArrayTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayTypeProto::IsInitialized() const {
  if (_internal_has_element_type()) {
    if (!_impl_.element_type_->IsInitialized()) return false;
  }
  return true;
}

void ArrayTypeProto::InternalSwap(ArrayTypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.element_type_, other->_impl_.element_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayTypeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_2eproto[1]);
}

// ===================================================================

class StructFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StructFieldProto>()._impl_._has_bits_);
  static void set_has_field_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& field_type(const StructFieldProto* msg);
  static void set_has_field_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TypeProto&
StructFieldProto::_Internal::field_type(const StructFieldProto* msg) {
  return *msg->_impl_.field_type_;
}
StructFieldProto::StructFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.StructFieldProto)
}
StructFieldProto::StructFieldProto(const StructFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StructFieldProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.field_type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_field_name()) {
    _this->_impl_.field_name_.Set(from._internal_field_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_field_type()) {
    _this->_impl_.field_type_ = new ::zetasql::TypeProto(*from._impl_.field_type_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.StructFieldProto)
}

inline void StructFieldProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_name_){}
    , decltype(_impl_.field_type_){nullptr}
  };
  _impl_.field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StructFieldProto::~StructFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.StructFieldProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.field_type_;
}

void StructFieldProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructFieldProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.StructFieldProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.field_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.field_type_ != nullptr);
      _impl_.field_type_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructFieldProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.StructFieldProto.field_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto field_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructFieldProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.StructFieldProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string field_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.StructFieldProto.field_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field_name(), target);
  }

  // optional .zetasql.TypeProto field_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::field_type(this),
        _Internal::field_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.StructFieldProto)
  return target;
}

size_t StructFieldProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.StructFieldProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string field_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field_name());
    }

    // optional .zetasql.TypeProto field_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.field_type_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructFieldProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StructFieldProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructFieldProto::GetClassData() const { return &_class_data_; }


void StructFieldProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StructFieldProto*>(&to_msg);
  auto& from = static_cast<const StructFieldProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.StructFieldProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_field_name(from._internal_field_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_field_type()->::zetasql::TypeProto::MergeFrom(
          from._internal_field_type());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructFieldProto::CopyFrom(const StructFieldProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.StructFieldProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructFieldProto::IsInitialized() const {
  if (_internal_has_field_type()) {
    if (!_impl_.field_type_->IsInitialized()) return false;
  }
  return true;
}

void StructFieldProto::InternalSwap(StructFieldProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_name_, lhs_arena,
      &other->_impl_.field_name_, rhs_arena
  );
  swap(_impl_.field_type_, other->_impl_.field_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructFieldProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_2eproto[2]);
}

// ===================================================================

class StructTypeProto::_Internal {
 public:
};

StructTypeProto::StructTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.StructTypeProto)
}
StructTypeProto::StructTypeProto(const StructTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StructTypeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){from._impl_.field_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.StructTypeProto)
}

inline void StructTypeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StructTypeProto::~StructTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.StructTypeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.~RepeatedPtrField();
}

void StructTypeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.StructTypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructTypeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zetasql.StructFieldProto field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructTypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.StructTypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.StructFieldProto field = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_size()); i < n; i++) {
    const auto& repfield = this->_internal_field(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.StructTypeProto)
  return target;
}

size_t StructTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.StructTypeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.StructFieldProto field = 1;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->_impl_.field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StructTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructTypeProto::GetClassData() const { return &_class_data_; }


void StructTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StructTypeProto*>(&to_msg);
  auto& from = static_cast<const StructTypeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.StructTypeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field_.MergeFrom(from._impl_.field_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructTypeProto::CopyFrom(const StructTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.StructTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructTypeProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.field_))
    return false;
  return true;
}

void StructTypeProto::InternalSwap(StructTypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.field_.InternalSwap(&other->_impl_.field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructTypeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_2eproto[3]);
}

// ===================================================================

class ProtoTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoTypeProto>()._impl_._has_bits_);
  static void set_has_proto_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proto_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_descriptor_set_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ProtoTypeProto::ProtoTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.ProtoTypeProto)
}
ProtoTypeProto::ProtoTypeProto(const ProtoTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoTypeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.catalog_name_path_){from._impl_.catalog_name_path_}
    , decltype(_impl_.proto_name_){}
    , decltype(_impl_.proto_file_name_){}
    , decltype(_impl_.file_descriptor_set_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proto_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proto_name()) {
    _this->_impl_.proto_name_.Set(from._internal_proto_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proto_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proto_file_name()) {
    _this->_impl_.proto_file_name_.Set(from._internal_proto_file_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.file_descriptor_set_index_ = from._impl_.file_descriptor_set_index_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ProtoTypeProto)
}

inline void ProtoTypeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.catalog_name_path_){arena}
    , decltype(_impl_.proto_name_){}
    , decltype(_impl_.proto_file_name_){}
    , decltype(_impl_.file_descriptor_set_index_){0}
  };
  _impl_.proto_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoTypeProto::~ProtoTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ProtoTypeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.catalog_name_path_.~RepeatedPtrField();
  _impl_.proto_name_.Destroy();
  _impl_.proto_file_name_.Destroy();
}

void ProtoTypeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ProtoTypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.catalog_name_path_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.proto_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.proto_file_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.file_descriptor_set_index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoTypeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string proto_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_proto_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ProtoTypeProto.proto_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string proto_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proto_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.ProtoTypeProto.proto_file_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 file_descriptor_set_index = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_file_descriptor_set_index(&has_bits);
          _impl_.file_descriptor_set_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string catalog_name_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_catalog_name_path();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "zetasql.ProtoTypeProto.catalog_name_path");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoTypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ProtoTypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string proto_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_name().data(), static_cast<int>(this->_internal_proto_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.proto_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proto_name(), target);
  }

  // optional string proto_file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_file_name().data(), static_cast<int>(this->_internal_proto_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.proto_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto_file_name(), target);
  }

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_file_descriptor_set_index(), target);
  }

  // repeated string catalog_name_path = 4;
  for (int i = 0, n = this->_internal_catalog_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_catalog_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.catalog_name_path");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ProtoTypeProto)
  return target;
}

size_t ProtoTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ProtoTypeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string catalog_name_path = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.catalog_name_path_.size());
  for (int i = 0, n = _impl_.catalog_name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.catalog_name_path_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string proto_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_name());
    }

    // optional string proto_file_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_file_name());
    }

    // optional int32 file_descriptor_set_index = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_descriptor_set_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoTypeProto::GetClassData() const { return &_class_data_; }


void ProtoTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoTypeProto*>(&to_msg);
  auto& from = static_cast<const ProtoTypeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ProtoTypeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.catalog_name_path_.MergeFrom(from._impl_.catalog_name_path_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_proto_name(from._internal_proto_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_proto_file_name(from._internal_proto_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.file_descriptor_set_index_ = from._impl_.file_descriptor_set_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoTypeProto::CopyFrom(const ProtoTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ProtoTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTypeProto::IsInitialized() const {
  return true;
}

void ProtoTypeProto::InternalSwap(ProtoTypeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.catalog_name_path_.InternalSwap(&other->_impl_.catalog_name_path_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_name_, lhs_arena,
      &other->_impl_.proto_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_file_name_, lhs_arena,
      &other->_impl_.proto_file_name_, rhs_arena
  );
  swap(_impl_.file_descriptor_set_index_, other->_impl_.file_descriptor_set_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoTypeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_2eproto[4]);
}

// ===================================================================

class EnumTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<EnumTypeProto>()._impl_._has_bits_);
  static void set_has_enum_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enum_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_descriptor_set_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EnumTypeProto::EnumTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.EnumTypeProto)
}
EnumTypeProto::EnumTypeProto(const EnumTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnumTypeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.catalog_name_path_){from._impl_.catalog_name_path_}
    , decltype(_impl_.enum_name_){}
    , decltype(_impl_.enum_file_name_){}
    , decltype(_impl_.file_descriptor_set_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.enum_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enum_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enum_name()) {
    _this->_impl_.enum_name_.Set(from._internal_enum_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enum_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enum_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enum_file_name()) {
    _this->_impl_.enum_file_name_.Set(from._internal_enum_file_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.file_descriptor_set_index_ = from._impl_.file_descriptor_set_index_;
  // @@protoc_insertion_point(copy_constructor:zetasql.EnumTypeProto)
}

inline void EnumTypeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.catalog_name_path_){arena}
    , decltype(_impl_.enum_name_){}
    , decltype(_impl_.enum_file_name_){}
    , decltype(_impl_.file_descriptor_set_index_){0}
  };
  _impl_.enum_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enum_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enum_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enum_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnumTypeProto::~EnumTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.EnumTypeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnumTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.catalog_name_path_.~RepeatedPtrField();
  _impl_.enum_name_.Destroy();
  _impl_.enum_file_name_.Destroy();
}

void EnumTypeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnumTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.EnumTypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.catalog_name_path_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enum_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enum_file_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.file_descriptor_set_index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnumTypeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string enum_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_enum_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.EnumTypeProto.enum_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string enum_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_enum_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "zetasql.EnumTypeProto.enum_file_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 file_descriptor_set_index = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_file_descriptor_set_index(&has_bits);
          _impl_.file_descriptor_set_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string catalog_name_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_catalog_name_path();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "zetasql.EnumTypeProto.catalog_name_path");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnumTypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.EnumTypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string enum_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_name().data(), static_cast<int>(this->_internal_enum_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.enum_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_name(), target);
  }

  // optional string enum_file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_file_name().data(), static_cast<int>(this->_internal_enum_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.enum_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_enum_file_name(), target);
  }

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_file_descriptor_set_index(), target);
  }

  // repeated string catalog_name_path = 4;
  for (int i = 0, n = this->_internal_catalog_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_catalog_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.catalog_name_path");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.EnumTypeProto)
  return target;
}

size_t EnumTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.EnumTypeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string catalog_name_path = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.catalog_name_path_.size());
  for (int i = 0, n = _impl_.catalog_name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.catalog_name_path_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string enum_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enum_name());
    }

    // optional string enum_file_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enum_file_name());
    }

    // optional int32 file_descriptor_set_index = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_descriptor_set_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnumTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnumTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnumTypeProto::GetClassData() const { return &_class_data_; }


void EnumTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnumTypeProto*>(&to_msg);
  auto& from = static_cast<const EnumTypeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.EnumTypeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.catalog_name_path_.MergeFrom(from._impl_.catalog_name_path_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_enum_name(from._internal_enum_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_enum_file_name(from._internal_enum_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.file_descriptor_set_index_ = from._impl_.file_descriptor_set_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnumTypeProto::CopyFrom(const EnumTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.EnumTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumTypeProto::IsInitialized() const {
  return true;
}

void EnumTypeProto::InternalSwap(EnumTypeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.catalog_name_path_.InternalSwap(&other->_impl_.catalog_name_path_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enum_name_, lhs_arena,
      &other->_impl_.enum_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enum_file_name_, lhs_arena,
      &other->_impl_.enum_file_name_, rhs_arena
  );
  swap(_impl_.file_descriptor_set_index_, other->_impl_.file_descriptor_set_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnumTypeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_2eproto[5]);
}

// ===================================================================

class RangeTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeTypeProto>()._impl_._has_bits_);
  static const ::zetasql::TypeProto& element_type(const RangeTypeProto* msg);
  static void set_has_element_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::TypeProto&
RangeTypeProto::_Internal::element_type(const RangeTypeProto* msg) {
  return *msg->_impl_.element_type_;
}
RangeTypeProto::RangeTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zetasql.RangeTypeProto)
}
RangeTypeProto::RangeTypeProto(const RangeTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeTypeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_element_type()) {
    _this->_impl_.element_type_ = new ::zetasql::TypeProto(*from._impl_.element_type_);
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.RangeTypeProto)
}

inline void RangeTypeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_type_){nullptr}
  };
}

RangeTypeProto::~RangeTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.RangeTypeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.element_type_;
}

void RangeTypeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.RangeTypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.element_type_ != nullptr);
    _impl_.element_type_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeTypeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.TypeProto element_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_element_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeTypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.RangeTypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .zetasql.TypeProto element_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::element_type(this),
        _Internal::element_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.RangeTypeProto)
  return target;
}

size_t RangeTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.RangeTypeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zetasql.TypeProto element_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.element_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeTypeProto::GetClassData() const { return &_class_data_; }


void RangeTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeTypeProto*>(&to_msg);
  auto& from = static_cast<const RangeTypeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zetasql.RangeTypeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_element_type()) {
    _this->_internal_mutable_element_type()->::zetasql::TypeProto::MergeFrom(
        from._internal_element_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeTypeProto::CopyFrom(const RangeTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.RangeTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeTypeProto::IsInitialized() const {
  if (_internal_has_element_type()) {
    if (!_impl_.element_type_->IsInitialized()) return false;
  }
  return true;
}

void RangeTypeProto::InternalSwap(RangeTypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.element_type_, other->_impl_.element_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeTypeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::TypeProto*
Arena::CreateMaybeMessage< ::zetasql::TypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ArrayTypeProto*
Arena::CreateMaybeMessage< ::zetasql::ArrayTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ArrayTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::StructFieldProto*
Arena::CreateMaybeMessage< ::zetasql::StructFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::StructFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::StructTypeProto*
Arena::CreateMaybeMessage< ::zetasql::StructTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::StructTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ProtoTypeProto*
Arena::CreateMaybeMessage< ::zetasql::ProtoTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ProtoTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::EnumTypeProto*
Arena::CreateMaybeMessage< ::zetasql::EnumTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::EnumTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::RangeTypeProto*
Arena::CreateMaybeMessage< ::zetasql::RangeTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::RangeTypeProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
