// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/proto/anon_output_with_report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto;
namespace zetasql {
class AnonOutputValue;
struct AnonOutputValueDefaultTypeInternal;
extern AnonOutputValueDefaultTypeInternal _AnonOutputValue_default_instance_;
class AnonOutputValues;
struct AnonOutputValuesDefaultTypeInternal;
extern AnonOutputValuesDefaultTypeInternal _AnonOutputValues_default_instance_;
class AnonOutputWithReport;
struct AnonOutputWithReportDefaultTypeInternal;
extern AnonOutputWithReportDefaultTypeInternal _AnonOutputWithReport_default_instance_;
class BoundingReport;
struct BoundingReportDefaultTypeInternal;
extern BoundingReportDefaultTypeInternal _BoundingReport_default_instance_;
class NoiseConfidenceInterval;
struct NoiseConfidenceIntervalDefaultTypeInternal;
extern NoiseConfidenceIntervalDefaultTypeInternal _NoiseConfidenceInterval_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::AnonOutputValue* Arena::CreateMaybeMessage<::zetasql::AnonOutputValue>(Arena*);
template<> ::zetasql::AnonOutputValues* Arena::CreateMaybeMessage<::zetasql::AnonOutputValues>(Arena*);
template<> ::zetasql::AnonOutputWithReport* Arena::CreateMaybeMessage<::zetasql::AnonOutputWithReport>(Arena*);
template<> ::zetasql::BoundingReport* Arena::CreateMaybeMessage<::zetasql::BoundingReport>(Arena*);
template<> ::zetasql::NoiseConfidenceInterval* Arena::CreateMaybeMessage<::zetasql::NoiseConfidenceInterval>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class AnonOutputWithReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.AnonOutputWithReport) */ {
 public:
  inline AnonOutputWithReport() : AnonOutputWithReport(nullptr) {}
  ~AnonOutputWithReport() override;
  explicit PROTOBUF_CONSTEXPR AnonOutputWithReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnonOutputWithReport(const AnonOutputWithReport& from);
  AnonOutputWithReport(AnonOutputWithReport&& from) noexcept
    : AnonOutputWithReport() {
    *this = ::std::move(from);
  }

  inline AnonOutputWithReport& operator=(const AnonOutputWithReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnonOutputWithReport& operator=(AnonOutputWithReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnonOutputWithReport& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kValue = 1,
    kValues = 2,
    RESULT_NOT_SET = 0,
  };

  static inline const AnonOutputWithReport* internal_default_instance() {
    return reinterpret_cast<const AnonOutputWithReport*>(
               &_AnonOutputWithReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnonOutputWithReport& a, AnonOutputWithReport& b) {
    a.Swap(&b);
  }
  inline void Swap(AnonOutputWithReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnonOutputWithReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnonOutputWithReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnonOutputWithReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnonOutputWithReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnonOutputWithReport& from) {
    AnonOutputWithReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnonOutputWithReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.AnonOutputWithReport";
  }
  protected:
  explicit AnonOutputWithReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingReportFieldNumber = 3,
    kValueFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // optional .zetasql.BoundingReport bounding_report = 3;
  bool has_bounding_report() const;
  private:
  bool _internal_has_bounding_report() const;
  public:
  void clear_bounding_report();
  const ::zetasql::BoundingReport& bounding_report() const;
  PROTOBUF_NODISCARD ::zetasql::BoundingReport* release_bounding_report();
  ::zetasql::BoundingReport* mutable_bounding_report();
  void set_allocated_bounding_report(::zetasql::BoundingReport* bounding_report);
  private:
  const ::zetasql::BoundingReport& _internal_bounding_report() const;
  ::zetasql::BoundingReport* _internal_mutable_bounding_report();
  public:
  void unsafe_arena_set_allocated_bounding_report(
      ::zetasql::BoundingReport* bounding_report);
  ::zetasql::BoundingReport* unsafe_arena_release_bounding_report();

  // .zetasql.AnonOutputValue value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::zetasql::AnonOutputValue& value() const;
  PROTOBUF_NODISCARD ::zetasql::AnonOutputValue* release_value();
  ::zetasql::AnonOutputValue* mutable_value();
  void set_allocated_value(::zetasql::AnonOutputValue* value);
  private:
  const ::zetasql::AnonOutputValue& _internal_value() const;
  ::zetasql::AnonOutputValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::zetasql::AnonOutputValue* value);
  ::zetasql::AnonOutputValue* unsafe_arena_release_value();

  // .zetasql.AnonOutputValues values = 2;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::zetasql::AnonOutputValues& values() const;
  PROTOBUF_NODISCARD ::zetasql::AnonOutputValues* release_values();
  ::zetasql::AnonOutputValues* mutable_values();
  void set_allocated_values(::zetasql::AnonOutputValues* values);
  private:
  const ::zetasql::AnonOutputValues& _internal_values() const;
  ::zetasql::AnonOutputValues* _internal_mutable_values();
  public:
  void unsafe_arena_set_allocated_values(
      ::zetasql::AnonOutputValues* values);
  ::zetasql::AnonOutputValues* unsafe_arena_release_values();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnonOutputWithReport)
 private:
  class _Internal;
  void set_has_value();
  void set_has_values();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::zetasql::BoundingReport* bounding_report_;
    union ResultUnion {
      constexpr ResultUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::zetasql::AnonOutputValue* value_;
      ::zetasql::AnonOutputValues* values_;
    } result_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto;
};
// -------------------------------------------------------------------

class BoundingReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.BoundingReport) */ {
 public:
  inline BoundingReport() : BoundingReport(nullptr) {}
  ~BoundingReport() override;
  explicit PROTOBUF_CONSTEXPR BoundingReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingReport(const BoundingReport& from);
  BoundingReport(BoundingReport&& from) noexcept
    : BoundingReport() {
    *this = ::std::move(from);
  }

  inline BoundingReport& operator=(const BoundingReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingReport& operator=(BoundingReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundingReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingReport* internal_default_instance() {
    return reinterpret_cast<const BoundingReport*>(
               &_BoundingReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoundingReport& a, BoundingReport& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundingReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundingReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoundingReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoundingReport& from) {
    BoundingReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.BoundingReport";
  }
  protected:
  explicit BoundingReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerBoundFieldNumber = 1,
    kUpperBoundFieldNumber = 2,
    kNumInputsFieldNumber = 3,
    kNumOutsideFieldNumber = 4,
  };
  // optional .zetasql.AnonOutputValue lower_bound = 1;
  bool has_lower_bound() const;
  private:
  bool _internal_has_lower_bound() const;
  public:
  void clear_lower_bound();
  const ::zetasql::AnonOutputValue& lower_bound() const;
  PROTOBUF_NODISCARD ::zetasql::AnonOutputValue* release_lower_bound();
  ::zetasql::AnonOutputValue* mutable_lower_bound();
  void set_allocated_lower_bound(::zetasql::AnonOutputValue* lower_bound);
  private:
  const ::zetasql::AnonOutputValue& _internal_lower_bound() const;
  ::zetasql::AnonOutputValue* _internal_mutable_lower_bound();
  public:
  void unsafe_arena_set_allocated_lower_bound(
      ::zetasql::AnonOutputValue* lower_bound);
  ::zetasql::AnonOutputValue* unsafe_arena_release_lower_bound();

  // optional .zetasql.AnonOutputValue upper_bound = 2;
  bool has_upper_bound() const;
  private:
  bool _internal_has_upper_bound() const;
  public:
  void clear_upper_bound();
  const ::zetasql::AnonOutputValue& upper_bound() const;
  PROTOBUF_NODISCARD ::zetasql::AnonOutputValue* release_upper_bound();
  ::zetasql::AnonOutputValue* mutable_upper_bound();
  void set_allocated_upper_bound(::zetasql::AnonOutputValue* upper_bound);
  private:
  const ::zetasql::AnonOutputValue& _internal_upper_bound() const;
  ::zetasql::AnonOutputValue* _internal_mutable_upper_bound();
  public:
  void unsafe_arena_set_allocated_upper_bound(
      ::zetasql::AnonOutputValue* upper_bound);
  ::zetasql::AnonOutputValue* unsafe_arena_release_upper_bound();

  // optional double num_inputs = 3;
  bool has_num_inputs() const;
  private:
  bool _internal_has_num_inputs() const;
  public:
  void clear_num_inputs();
  double num_inputs() const;
  void set_num_inputs(double value);
  private:
  double _internal_num_inputs() const;
  void _internal_set_num_inputs(double value);
  public:

  // optional double num_outside = 4;
  bool has_num_outside() const;
  private:
  bool _internal_has_num_outside() const;
  public:
  void clear_num_outside();
  double num_outside() const;
  void set_num_outside(double value);
  private:
  double _internal_num_outside() const;
  void _internal_set_num_outside(double value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.BoundingReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::zetasql::AnonOutputValue* lower_bound_;
    ::zetasql::AnonOutputValue* upper_bound_;
    double num_inputs_;
    double num_outside_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto;
};
// -------------------------------------------------------------------

class NoiseConfidenceInterval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.NoiseConfidenceInterval) */ {
 public:
  inline NoiseConfidenceInterval() : NoiseConfidenceInterval(nullptr) {}
  ~NoiseConfidenceInterval() override;
  explicit PROTOBUF_CONSTEXPR NoiseConfidenceInterval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoiseConfidenceInterval(const NoiseConfidenceInterval& from);
  NoiseConfidenceInterval(NoiseConfidenceInterval&& from) noexcept
    : NoiseConfidenceInterval() {
    *this = ::std::move(from);
  }

  inline NoiseConfidenceInterval& operator=(const NoiseConfidenceInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoiseConfidenceInterval& operator=(NoiseConfidenceInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoiseConfidenceInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoiseConfidenceInterval* internal_default_instance() {
    return reinterpret_cast<const NoiseConfidenceInterval*>(
               &_NoiseConfidenceInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NoiseConfidenceInterval& a, NoiseConfidenceInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(NoiseConfidenceInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoiseConfidenceInterval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoiseConfidenceInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoiseConfidenceInterval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoiseConfidenceInterval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoiseConfidenceInterval& from) {
    NoiseConfidenceInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoiseConfidenceInterval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.NoiseConfidenceInterval";
  }
  protected:
  explicit NoiseConfidenceInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerBoundFieldNumber = 1,
    kUpperBoundFieldNumber = 2,
    kConfidenceLevelFieldNumber = 3,
  };
  // optional double lower_bound = 1;
  bool has_lower_bound() const;
  private:
  bool _internal_has_lower_bound() const;
  public:
  void clear_lower_bound();
  double lower_bound() const;
  void set_lower_bound(double value);
  private:
  double _internal_lower_bound() const;
  void _internal_set_lower_bound(double value);
  public:

  // optional double upper_bound = 2;
  bool has_upper_bound() const;
  private:
  bool _internal_has_upper_bound() const;
  public:
  void clear_upper_bound();
  double upper_bound() const;
  void set_upper_bound(double value);
  private:
  double _internal_upper_bound() const;
  void _internal_set_upper_bound(double value);
  public:

  // optional double confidence_level = 3;
  bool has_confidence_level() const;
  private:
  bool _internal_has_confidence_level() const;
  public:
  void clear_confidence_level();
  double confidence_level() const;
  void set_confidence_level(double value);
  private:
  double _internal_confidence_level() const;
  void _internal_set_confidence_level(double value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.NoiseConfidenceInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double lower_bound_;
    double upper_bound_;
    double confidence_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto;
};
// -------------------------------------------------------------------

class AnonOutputValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.AnonOutputValues) */ {
 public:
  inline AnonOutputValues() : AnonOutputValues(nullptr) {}
  ~AnonOutputValues() override;
  explicit PROTOBUF_CONSTEXPR AnonOutputValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnonOutputValues(const AnonOutputValues& from);
  AnonOutputValues(AnonOutputValues&& from) noexcept
    : AnonOutputValues() {
    *this = ::std::move(from);
  }

  inline AnonOutputValues& operator=(const AnonOutputValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnonOutputValues& operator=(AnonOutputValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnonOutputValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnonOutputValues* internal_default_instance() {
    return reinterpret_cast<const AnonOutputValues*>(
               &_AnonOutputValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnonOutputValues& a, AnonOutputValues& b) {
    a.Swap(&b);
  }
  inline void Swap(AnonOutputValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnonOutputValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnonOutputValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnonOutputValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnonOutputValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnonOutputValues& from) {
    AnonOutputValues::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnonOutputValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.AnonOutputValues";
  }
  protected:
  explicit AnonOutputValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .zetasql.AnonOutputValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::zetasql::AnonOutputValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnonOutputValue >*
      mutable_values();
  private:
  const ::zetasql::AnonOutputValue& _internal_values(int index) const;
  ::zetasql::AnonOutputValue* _internal_add_values();
  public:
  const ::zetasql::AnonOutputValue& values(int index) const;
  ::zetasql::AnonOutputValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnonOutputValue >&
      values() const;

  // @@protoc_insertion_point(class_scope:zetasql.AnonOutputValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnonOutputValue > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto;
};
// -------------------------------------------------------------------

class AnonOutputValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.AnonOutputValue) */ {
 public:
  inline AnonOutputValue() : AnonOutputValue(nullptr) {}
  ~AnonOutputValue() override;
  explicit PROTOBUF_CONSTEXPR AnonOutputValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnonOutputValue(const AnonOutputValue& from);
  AnonOutputValue(AnonOutputValue&& from) noexcept
    : AnonOutputValue() {
    *this = ::std::move(from);
  }

  inline AnonOutputValue& operator=(const AnonOutputValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnonOutputValue& operator=(AnonOutputValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnonOutputValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 1,
    kFloatValue = 2,
    kStringValue = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const AnonOutputValue* internal_default_instance() {
    return reinterpret_cast<const AnonOutputValue*>(
               &_AnonOutputValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnonOutputValue& a, AnonOutputValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AnonOutputValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnonOutputValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnonOutputValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnonOutputValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnonOutputValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnonOutputValue& from) {
    AnonOutputValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnonOutputValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.AnonOutputValue";
  }
  protected:
  explicit AnonOutputValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoiseConfidenceIntervalFieldNumber = 4,
    kIntValueFieldNumber = 1,
    kFloatValueFieldNumber = 2,
    kStringValueFieldNumber = 3,
  };
  // optional .zetasql.NoiseConfidenceInterval noise_confidence_interval = 4;
  bool has_noise_confidence_interval() const;
  private:
  bool _internal_has_noise_confidence_interval() const;
  public:
  void clear_noise_confidence_interval();
  const ::zetasql::NoiseConfidenceInterval& noise_confidence_interval() const;
  PROTOBUF_NODISCARD ::zetasql::NoiseConfidenceInterval* release_noise_confidence_interval();
  ::zetasql::NoiseConfidenceInterval* mutable_noise_confidence_interval();
  void set_allocated_noise_confidence_interval(::zetasql::NoiseConfidenceInterval* noise_confidence_interval);
  private:
  const ::zetasql::NoiseConfidenceInterval& _internal_noise_confidence_interval() const;
  ::zetasql::NoiseConfidenceInterval* _internal_mutable_noise_confidence_interval();
  public:
  void unsafe_arena_set_allocated_noise_confidence_interval(
      ::zetasql::NoiseConfidenceInterval* noise_confidence_interval);
  ::zetasql::NoiseConfidenceInterval* unsafe_arena_release_noise_confidence_interval();

  // int64 int_value = 1;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int64_t int_value() const;
  void set_int_value(int64_t value);
  private:
  int64_t _internal_int_value() const;
  void _internal_set_int_value(int64_t value);
  public:

  // double float_value = 2;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  double float_value() const;
  void set_float_value(double value);
  private:
  double _internal_float_value() const;
  void _internal_set_float_value(double value);
  public:

  // string string_value = 3;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.AnonOutputValue)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_float_value();
  void set_has_string_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::zetasql::NoiseConfidenceInterval* noise_confidence_interval_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t int_value_;
      double float_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    } value_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnonOutputWithReport

// .zetasql.AnonOutputValue value = 1;
inline bool AnonOutputWithReport::_internal_has_value() const {
  return result_case() == kValue;
}
inline bool AnonOutputWithReport::has_value() const {
  return _internal_has_value();
}
inline void AnonOutputWithReport::set_has_value() {
  _impl_._oneof_case_[0] = kValue;
}
inline void AnonOutputWithReport::clear_value() {
  if (_internal_has_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_.value_;
    }
    clear_has_result();
  }
}
inline ::zetasql::AnonOutputValue* AnonOutputWithReport::release_value() {
  // @@protoc_insertion_point(field_release:zetasql.AnonOutputWithReport.value)
  if (_internal_has_value()) {
    clear_has_result();
    ::zetasql::AnonOutputValue* temp = _impl_.result_.value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasql::AnonOutputValue& AnonOutputWithReport::_internal_value() const {
  return _internal_has_value()
      ? *_impl_.result_.value_
      : reinterpret_cast< ::zetasql::AnonOutputValue&>(::zetasql::_AnonOutputValue_default_instance_);
}
inline const ::zetasql::AnonOutputValue& AnonOutputWithReport::value() const {
  // @@protoc_insertion_point(field_get:zetasql.AnonOutputWithReport.value)
  return _internal_value();
}
inline ::zetasql::AnonOutputValue* AnonOutputWithReport::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.AnonOutputWithReport.value)
  if (_internal_has_value()) {
    clear_has_result();
    ::zetasql::AnonOutputValue* temp = _impl_.result_.value_;
    _impl_.result_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnonOutputWithReport::unsafe_arena_set_allocated_value(::zetasql::AnonOutputValue* value) {
  clear_result();
  if (value) {
    set_has_value();
    _impl_.result_.value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AnonOutputWithReport.value)
}
inline ::zetasql::AnonOutputValue* AnonOutputWithReport::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_result();
    set_has_value();
    _impl_.result_.value_ = CreateMaybeMessage< ::zetasql::AnonOutputValue >(GetArenaForAllocation());
  }
  return _impl_.result_.value_;
}
inline ::zetasql::AnonOutputValue* AnonOutputWithReport::mutable_value() {
  ::zetasql::AnonOutputValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:zetasql.AnonOutputWithReport.value)
  return _msg;
}

// .zetasql.AnonOutputValues values = 2;
inline bool AnonOutputWithReport::_internal_has_values() const {
  return result_case() == kValues;
}
inline bool AnonOutputWithReport::has_values() const {
  return _internal_has_values();
}
inline void AnonOutputWithReport::set_has_values() {
  _impl_._oneof_case_[0] = kValues;
}
inline void AnonOutputWithReport::clear_values() {
  if (_internal_has_values()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_.values_;
    }
    clear_has_result();
  }
}
inline ::zetasql::AnonOutputValues* AnonOutputWithReport::release_values() {
  // @@protoc_insertion_point(field_release:zetasql.AnonOutputWithReport.values)
  if (_internal_has_values()) {
    clear_has_result();
    ::zetasql::AnonOutputValues* temp = _impl_.result_.values_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasql::AnonOutputValues& AnonOutputWithReport::_internal_values() const {
  return _internal_has_values()
      ? *_impl_.result_.values_
      : reinterpret_cast< ::zetasql::AnonOutputValues&>(::zetasql::_AnonOutputValues_default_instance_);
}
inline const ::zetasql::AnonOutputValues& AnonOutputWithReport::values() const {
  // @@protoc_insertion_point(field_get:zetasql.AnonOutputWithReport.values)
  return _internal_values();
}
inline ::zetasql::AnonOutputValues* AnonOutputWithReport::unsafe_arena_release_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.AnonOutputWithReport.values)
  if (_internal_has_values()) {
    clear_has_result();
    ::zetasql::AnonOutputValues* temp = _impl_.result_.values_;
    _impl_.result_.values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnonOutputWithReport::unsafe_arena_set_allocated_values(::zetasql::AnonOutputValues* values) {
  clear_result();
  if (values) {
    set_has_values();
    _impl_.result_.values_ = values;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AnonOutputWithReport.values)
}
inline ::zetasql::AnonOutputValues* AnonOutputWithReport::_internal_mutable_values() {
  if (!_internal_has_values()) {
    clear_result();
    set_has_values();
    _impl_.result_.values_ = CreateMaybeMessage< ::zetasql::AnonOutputValues >(GetArenaForAllocation());
  }
  return _impl_.result_.values_;
}
inline ::zetasql::AnonOutputValues* AnonOutputWithReport::mutable_values() {
  ::zetasql::AnonOutputValues* _msg = _internal_mutable_values();
  // @@protoc_insertion_point(field_mutable:zetasql.AnonOutputWithReport.values)
  return _msg;
}

// optional .zetasql.BoundingReport bounding_report = 3;
inline bool AnonOutputWithReport::_internal_has_bounding_report() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounding_report_ != nullptr);
  return value;
}
inline bool AnonOutputWithReport::has_bounding_report() const {
  return _internal_has_bounding_report();
}
inline void AnonOutputWithReport::clear_bounding_report() {
  if (_impl_.bounding_report_ != nullptr) _impl_.bounding_report_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::BoundingReport& AnonOutputWithReport::_internal_bounding_report() const {
  const ::zetasql::BoundingReport* p = _impl_.bounding_report_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::BoundingReport&>(
      ::zetasql::_BoundingReport_default_instance_);
}
inline const ::zetasql::BoundingReport& AnonOutputWithReport::bounding_report() const {
  // @@protoc_insertion_point(field_get:zetasql.AnonOutputWithReport.bounding_report)
  return _internal_bounding_report();
}
inline void AnonOutputWithReport::unsafe_arena_set_allocated_bounding_report(
    ::zetasql::BoundingReport* bounding_report) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounding_report_);
  }
  _impl_.bounding_report_ = bounding_report;
  if (bounding_report) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AnonOutputWithReport.bounding_report)
}
inline ::zetasql::BoundingReport* AnonOutputWithReport::release_bounding_report() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::BoundingReport* temp = _impl_.bounding_report_;
  _impl_.bounding_report_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::BoundingReport* AnonOutputWithReport::unsafe_arena_release_bounding_report() {
  // @@protoc_insertion_point(field_release:zetasql.AnonOutputWithReport.bounding_report)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::BoundingReport* temp = _impl_.bounding_report_;
  _impl_.bounding_report_ = nullptr;
  return temp;
}
inline ::zetasql::BoundingReport* AnonOutputWithReport::_internal_mutable_bounding_report() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bounding_report_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::BoundingReport>(GetArenaForAllocation());
    _impl_.bounding_report_ = p;
  }
  return _impl_.bounding_report_;
}
inline ::zetasql::BoundingReport* AnonOutputWithReport::mutable_bounding_report() {
  ::zetasql::BoundingReport* _msg = _internal_mutable_bounding_report();
  // @@protoc_insertion_point(field_mutable:zetasql.AnonOutputWithReport.bounding_report)
  return _msg;
}
inline void AnonOutputWithReport::set_allocated_bounding_report(::zetasql::BoundingReport* bounding_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bounding_report_;
  }
  if (bounding_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bounding_report);
    if (message_arena != submessage_arena) {
      bounding_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_report, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bounding_report_ = bounding_report;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnonOutputWithReport.bounding_report)
}

inline bool AnonOutputWithReport::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void AnonOutputWithReport::clear_has_result() {
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}
inline AnonOutputWithReport::ResultCase AnonOutputWithReport::result_case() const {
  return AnonOutputWithReport::ResultCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BoundingReport

// optional .zetasql.AnonOutputValue lower_bound = 1;
inline bool BoundingReport::_internal_has_lower_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lower_bound_ != nullptr);
  return value;
}
inline bool BoundingReport::has_lower_bound() const {
  return _internal_has_lower_bound();
}
inline void BoundingReport::clear_lower_bound() {
  if (_impl_.lower_bound_ != nullptr) _impl_.lower_bound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::AnonOutputValue& BoundingReport::_internal_lower_bound() const {
  const ::zetasql::AnonOutputValue* p = _impl_.lower_bound_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::AnonOutputValue&>(
      ::zetasql::_AnonOutputValue_default_instance_);
}
inline const ::zetasql::AnonOutputValue& BoundingReport::lower_bound() const {
  // @@protoc_insertion_point(field_get:zetasql.BoundingReport.lower_bound)
  return _internal_lower_bound();
}
inline void BoundingReport::unsafe_arena_set_allocated_lower_bound(
    ::zetasql::AnonOutputValue* lower_bound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lower_bound_);
  }
  _impl_.lower_bound_ = lower_bound;
  if (lower_bound) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.BoundingReport.lower_bound)
}
inline ::zetasql::AnonOutputValue* BoundingReport::release_lower_bound() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::AnonOutputValue* temp = _impl_.lower_bound_;
  _impl_.lower_bound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::AnonOutputValue* BoundingReport::unsafe_arena_release_lower_bound() {
  // @@protoc_insertion_point(field_release:zetasql.BoundingReport.lower_bound)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::AnonOutputValue* temp = _impl_.lower_bound_;
  _impl_.lower_bound_ = nullptr;
  return temp;
}
inline ::zetasql::AnonOutputValue* BoundingReport::_internal_mutable_lower_bound() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lower_bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::AnonOutputValue>(GetArenaForAllocation());
    _impl_.lower_bound_ = p;
  }
  return _impl_.lower_bound_;
}
inline ::zetasql::AnonOutputValue* BoundingReport::mutable_lower_bound() {
  ::zetasql::AnonOutputValue* _msg = _internal_mutable_lower_bound();
  // @@protoc_insertion_point(field_mutable:zetasql.BoundingReport.lower_bound)
  return _msg;
}
inline void BoundingReport::set_allocated_lower_bound(::zetasql::AnonOutputValue* lower_bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lower_bound_;
  }
  if (lower_bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lower_bound);
    if (message_arena != submessage_arena) {
      lower_bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_bound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lower_bound_ = lower_bound;
  // @@protoc_insertion_point(field_set_allocated:zetasql.BoundingReport.lower_bound)
}

// optional .zetasql.AnonOutputValue upper_bound = 2;
inline bool BoundingReport::_internal_has_upper_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upper_bound_ != nullptr);
  return value;
}
inline bool BoundingReport::has_upper_bound() const {
  return _internal_has_upper_bound();
}
inline void BoundingReport::clear_upper_bound() {
  if (_impl_.upper_bound_ != nullptr) _impl_.upper_bound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::AnonOutputValue& BoundingReport::_internal_upper_bound() const {
  const ::zetasql::AnonOutputValue* p = _impl_.upper_bound_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::AnonOutputValue&>(
      ::zetasql::_AnonOutputValue_default_instance_);
}
inline const ::zetasql::AnonOutputValue& BoundingReport::upper_bound() const {
  // @@protoc_insertion_point(field_get:zetasql.BoundingReport.upper_bound)
  return _internal_upper_bound();
}
inline void BoundingReport::unsafe_arena_set_allocated_upper_bound(
    ::zetasql::AnonOutputValue* upper_bound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upper_bound_);
  }
  _impl_.upper_bound_ = upper_bound;
  if (upper_bound) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.BoundingReport.upper_bound)
}
inline ::zetasql::AnonOutputValue* BoundingReport::release_upper_bound() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::AnonOutputValue* temp = _impl_.upper_bound_;
  _impl_.upper_bound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::AnonOutputValue* BoundingReport::unsafe_arena_release_upper_bound() {
  // @@protoc_insertion_point(field_release:zetasql.BoundingReport.upper_bound)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::AnonOutputValue* temp = _impl_.upper_bound_;
  _impl_.upper_bound_ = nullptr;
  return temp;
}
inline ::zetasql::AnonOutputValue* BoundingReport::_internal_mutable_upper_bound() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.upper_bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::AnonOutputValue>(GetArenaForAllocation());
    _impl_.upper_bound_ = p;
  }
  return _impl_.upper_bound_;
}
inline ::zetasql::AnonOutputValue* BoundingReport::mutable_upper_bound() {
  ::zetasql::AnonOutputValue* _msg = _internal_mutable_upper_bound();
  // @@protoc_insertion_point(field_mutable:zetasql.BoundingReport.upper_bound)
  return _msg;
}
inline void BoundingReport::set_allocated_upper_bound(::zetasql::AnonOutputValue* upper_bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.upper_bound_;
  }
  if (upper_bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upper_bound);
    if (message_arena != submessage_arena) {
      upper_bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_bound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.upper_bound_ = upper_bound;
  // @@protoc_insertion_point(field_set_allocated:zetasql.BoundingReport.upper_bound)
}

// optional double num_inputs = 3;
inline bool BoundingReport::_internal_has_num_inputs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BoundingReport::has_num_inputs() const {
  return _internal_has_num_inputs();
}
inline void BoundingReport::clear_num_inputs() {
  _impl_.num_inputs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double BoundingReport::_internal_num_inputs() const {
  return _impl_.num_inputs_;
}
inline double BoundingReport::num_inputs() const {
  // @@protoc_insertion_point(field_get:zetasql.BoundingReport.num_inputs)
  return _internal_num_inputs();
}
inline void BoundingReport::_internal_set_num_inputs(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_inputs_ = value;
}
inline void BoundingReport::set_num_inputs(double value) {
  _internal_set_num_inputs(value);
  // @@protoc_insertion_point(field_set:zetasql.BoundingReport.num_inputs)
}

// optional double num_outside = 4;
inline bool BoundingReport::_internal_has_num_outside() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BoundingReport::has_num_outside() const {
  return _internal_has_num_outside();
}
inline void BoundingReport::clear_num_outside() {
  _impl_.num_outside_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double BoundingReport::_internal_num_outside() const {
  return _impl_.num_outside_;
}
inline double BoundingReport::num_outside() const {
  // @@protoc_insertion_point(field_get:zetasql.BoundingReport.num_outside)
  return _internal_num_outside();
}
inline void BoundingReport::_internal_set_num_outside(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_outside_ = value;
}
inline void BoundingReport::set_num_outside(double value) {
  _internal_set_num_outside(value);
  // @@protoc_insertion_point(field_set:zetasql.BoundingReport.num_outside)
}

// -------------------------------------------------------------------

// NoiseConfidenceInterval

// optional double lower_bound = 1;
inline bool NoiseConfidenceInterval::_internal_has_lower_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NoiseConfidenceInterval::has_lower_bound() const {
  return _internal_has_lower_bound();
}
inline void NoiseConfidenceInterval::clear_lower_bound() {
  _impl_.lower_bound_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double NoiseConfidenceInterval::_internal_lower_bound() const {
  return _impl_.lower_bound_;
}
inline double NoiseConfidenceInterval::lower_bound() const {
  // @@protoc_insertion_point(field_get:zetasql.NoiseConfidenceInterval.lower_bound)
  return _internal_lower_bound();
}
inline void NoiseConfidenceInterval::_internal_set_lower_bound(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lower_bound_ = value;
}
inline void NoiseConfidenceInterval::set_lower_bound(double value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:zetasql.NoiseConfidenceInterval.lower_bound)
}

// optional double upper_bound = 2;
inline bool NoiseConfidenceInterval::_internal_has_upper_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NoiseConfidenceInterval::has_upper_bound() const {
  return _internal_has_upper_bound();
}
inline void NoiseConfidenceInterval::clear_upper_bound() {
  _impl_.upper_bound_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double NoiseConfidenceInterval::_internal_upper_bound() const {
  return _impl_.upper_bound_;
}
inline double NoiseConfidenceInterval::upper_bound() const {
  // @@protoc_insertion_point(field_get:zetasql.NoiseConfidenceInterval.upper_bound)
  return _internal_upper_bound();
}
inline void NoiseConfidenceInterval::_internal_set_upper_bound(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.upper_bound_ = value;
}
inline void NoiseConfidenceInterval::set_upper_bound(double value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:zetasql.NoiseConfidenceInterval.upper_bound)
}

// optional double confidence_level = 3;
inline bool NoiseConfidenceInterval::_internal_has_confidence_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NoiseConfidenceInterval::has_confidence_level() const {
  return _internal_has_confidence_level();
}
inline void NoiseConfidenceInterval::clear_confidence_level() {
  _impl_.confidence_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double NoiseConfidenceInterval::_internal_confidence_level() const {
  return _impl_.confidence_level_;
}
inline double NoiseConfidenceInterval::confidence_level() const {
  // @@protoc_insertion_point(field_get:zetasql.NoiseConfidenceInterval.confidence_level)
  return _internal_confidence_level();
}
inline void NoiseConfidenceInterval::_internal_set_confidence_level(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.confidence_level_ = value;
}
inline void NoiseConfidenceInterval::set_confidence_level(double value) {
  _internal_set_confidence_level(value);
  // @@protoc_insertion_point(field_set:zetasql.NoiseConfidenceInterval.confidence_level)
}

// -------------------------------------------------------------------

// AnonOutputValues

// repeated .zetasql.AnonOutputValue values = 1;
inline int AnonOutputValues::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int AnonOutputValues::values_size() const {
  return _internal_values_size();
}
inline void AnonOutputValues::clear_values() {
  _impl_.values_.Clear();
}
inline ::zetasql::AnonOutputValue* AnonOutputValues::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.AnonOutputValues.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnonOutputValue >*
AnonOutputValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.AnonOutputValues.values)
  return &_impl_.values_;
}
inline const ::zetasql::AnonOutputValue& AnonOutputValues::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::zetasql::AnonOutputValue& AnonOutputValues::values(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.AnonOutputValues.values)
  return _internal_values(index);
}
inline ::zetasql::AnonOutputValue* AnonOutputValues::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::zetasql::AnonOutputValue* AnonOutputValues::add_values() {
  ::zetasql::AnonOutputValue* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:zetasql.AnonOutputValues.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::AnonOutputValue >&
AnonOutputValues::values() const {
  // @@protoc_insertion_point(field_list:zetasql.AnonOutputValues.values)
  return _impl_.values_;
}

// -------------------------------------------------------------------

// AnonOutputValue

// int64 int_value = 1;
inline bool AnonOutputValue::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool AnonOutputValue::has_int_value() const {
  return _internal_has_int_value();
}
inline void AnonOutputValue::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void AnonOutputValue::clear_int_value() {
  if (_internal_has_int_value()) {
    _impl_.value_.int_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t AnonOutputValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return _impl_.value_.int_value_;
  }
  return int64_t{0};
}
inline void AnonOutputValue::_internal_set_int_value(int64_t value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}
inline int64_t AnonOutputValue::int_value() const {
  // @@protoc_insertion_point(field_get:zetasql.AnonOutputValue.int_value)
  return _internal_int_value();
}
inline void AnonOutputValue::set_int_value(int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:zetasql.AnonOutputValue.int_value)
}

// double float_value = 2;
inline bool AnonOutputValue::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool AnonOutputValue::has_float_value() const {
  return _internal_has_float_value();
}
inline void AnonOutputValue::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void AnonOutputValue::clear_float_value() {
  if (_internal_has_float_value()) {
    _impl_.value_.float_value_ = 0;
    clear_has_value();
  }
}
inline double AnonOutputValue::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return _impl_.value_.float_value_;
  }
  return 0;
}
inline void AnonOutputValue::_internal_set_float_value(double value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  _impl_.value_.float_value_ = value;
}
inline double AnonOutputValue::float_value() const {
  // @@protoc_insertion_point(field_get:zetasql.AnonOutputValue.float_value)
  return _internal_float_value();
}
inline void AnonOutputValue::set_float_value(double value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:zetasql.AnonOutputValue.float_value)
}

// string string_value = 3;
inline bool AnonOutputValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool AnonOutputValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void AnonOutputValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void AnonOutputValue::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AnonOutputValue::string_value() const {
  // @@protoc_insertion_point(field_get:zetasql.AnonOutputValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void AnonOutputValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.AnonOutputValue.string_value)
}
inline std::string* AnonOutputValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:zetasql.AnonOutputValue.string_value)
  return _s;
}
inline const std::string& AnonOutputValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AnonOutputValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* AnonOutputValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* AnonOutputValue::release_string_value() {
  // @@protoc_insertion_point(field_release:zetasql.AnonOutputValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void AnonOutputValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnonOutputValue.string_value)
}

// optional .zetasql.NoiseConfidenceInterval noise_confidence_interval = 4;
inline bool AnonOutputValue::_internal_has_noise_confidence_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.noise_confidence_interval_ != nullptr);
  return value;
}
inline bool AnonOutputValue::has_noise_confidence_interval() const {
  return _internal_has_noise_confidence_interval();
}
inline void AnonOutputValue::clear_noise_confidence_interval() {
  if (_impl_.noise_confidence_interval_ != nullptr) _impl_.noise_confidence_interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::zetasql::NoiseConfidenceInterval& AnonOutputValue::_internal_noise_confidence_interval() const {
  const ::zetasql::NoiseConfidenceInterval* p = _impl_.noise_confidence_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::NoiseConfidenceInterval&>(
      ::zetasql::_NoiseConfidenceInterval_default_instance_);
}
inline const ::zetasql::NoiseConfidenceInterval& AnonOutputValue::noise_confidence_interval() const {
  // @@protoc_insertion_point(field_get:zetasql.AnonOutputValue.noise_confidence_interval)
  return _internal_noise_confidence_interval();
}
inline void AnonOutputValue::unsafe_arena_set_allocated_noise_confidence_interval(
    ::zetasql::NoiseConfidenceInterval* noise_confidence_interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.noise_confidence_interval_);
  }
  _impl_.noise_confidence_interval_ = noise_confidence_interval;
  if (noise_confidence_interval) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.AnonOutputValue.noise_confidence_interval)
}
inline ::zetasql::NoiseConfidenceInterval* AnonOutputValue::release_noise_confidence_interval() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::NoiseConfidenceInterval* temp = _impl_.noise_confidence_interval_;
  _impl_.noise_confidence_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::NoiseConfidenceInterval* AnonOutputValue::unsafe_arena_release_noise_confidence_interval() {
  // @@protoc_insertion_point(field_release:zetasql.AnonOutputValue.noise_confidence_interval)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::zetasql::NoiseConfidenceInterval* temp = _impl_.noise_confidence_interval_;
  _impl_.noise_confidence_interval_ = nullptr;
  return temp;
}
inline ::zetasql::NoiseConfidenceInterval* AnonOutputValue::_internal_mutable_noise_confidence_interval() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.noise_confidence_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::NoiseConfidenceInterval>(GetArenaForAllocation());
    _impl_.noise_confidence_interval_ = p;
  }
  return _impl_.noise_confidence_interval_;
}
inline ::zetasql::NoiseConfidenceInterval* AnonOutputValue::mutable_noise_confidence_interval() {
  ::zetasql::NoiseConfidenceInterval* _msg = _internal_mutable_noise_confidence_interval();
  // @@protoc_insertion_point(field_mutable:zetasql.AnonOutputValue.noise_confidence_interval)
  return _msg;
}
inline void AnonOutputValue::set_allocated_noise_confidence_interval(::zetasql::NoiseConfidenceInterval* noise_confidence_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.noise_confidence_interval_;
  }
  if (noise_confidence_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(noise_confidence_interval);
    if (message_arena != submessage_arena) {
      noise_confidence_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noise_confidence_interval, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.noise_confidence_interval_ = noise_confidence_interval;
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnonOutputValue.noise_confidence_interval)
}

inline bool AnonOutputValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AnonOutputValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline AnonOutputValue::ValueCase AnonOutputValue::value_case() const {
  return AnonOutputValue::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fproto_2fanon_5foutput_5fwith_5freport_2eproto
