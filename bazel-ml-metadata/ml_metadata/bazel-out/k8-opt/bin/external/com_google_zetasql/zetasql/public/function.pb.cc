// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/function.proto

#include "zetasql/public/function.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zetasql {
PROTOBUF_CONSTEXPR FunctionEnums::FunctionEnums(
    ::_pbi::ConstantInitialized) {}
struct FunctionEnumsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionEnumsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionEnumsDefaultTypeInternal() {}
  union {
    FunctionEnums _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionEnumsDefaultTypeInternal _FunctionEnums_default_instance_;
}  // namespace zetasql
static ::_pb::Metadata file_level_metadata_zetasql_2fpublic_2ffunction_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2ffunction_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2ffunction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionEnums, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::zetasql::FunctionEnums)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zetasql::_FunctionEnums_default_instance_._instance,
};

const char descriptor_table_protodef_zetasql_2fpublic_2ffunction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035zetasql/public/function.proto\022\007zetasql"
  "\"\237\005\n\rFunctionEnums\"\?\n\023ArgumentCardinalit"
  "y\022\014\n\010REQUIRED\020\000\022\014\n\010REPEATED\020\001\022\014\n\010OPTIONA"
  "L\020\002\"@\n\025ProcedureArgumentMode\022\013\n\007NOT_SET\020"
  "\000\022\006\n\002IN\020\001\022\007\n\003OUT\020\002\022\t\n\005INOUT\020\003\"S\n\022WindowO"
  "rderSupport\022\025\n\021ORDER_UNSUPPORTED\020\000\022\022\n\016OR"
  "DER_OPTIONAL\020\001\022\022\n\016ORDER_REQUIRED\020\002\"/\n\004Mo"
  "de\022\n\n\006SCALAR\020\001\022\r\n\tAGGREGATE\020\002\022\014\n\010ANALYTI"
  "C\020\003\"5\n\nVolatility\022\r\n\tIMMUTABLE\020\000\022\n\n\006STAB"
  "LE\020\001\022\014\n\010VOLATILE\020\002\"\312\001\n\027TableValuedFuncti"
  "onType\022\013\n\007INVALID\020\000\022\033\n\027FIXED_OUTPUT_SCHE"
  "MA_TVF\020\001\022-\n)FORWARD_INPUT_SCHEMA_TO_OUTP"
  "UT_SCHEMA_TVF\020\002\022\025\n\021TEMPLATED_SQL_TVF\020\003\022\?"
  "\n;FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_"
  "WITH_APPENDED_COLUMNS\020\007\"\200\001\n\025ArgumentColl"
  "ationMode\022\020\n\014AFFECTS_NONE\020\000\022\025\n\021AFFECTS_O"
  "PERATION\020\001\022\027\n\023AFFECTS_PROPAGATION\020\002\022%\n!A"
  "FFECTS_OPERATION_AND_PROPAGATION\020\003*\360\003\n\025S"
  "ignatureArgumentKind\022\022\n\016ARG_TYPE_FIXED\020\000"
  "\022\022\n\016ARG_TYPE_ANY_1\020\001\022\022\n\016ARG_TYPE_ANY_2\020\002"
  "\022\030\n\024ARG_ARRAY_TYPE_ANY_1\020\003\022\030\n\024ARG_ARRAY_"
  "TYPE_ANY_2\020\004\022\025\n\021ARG_PROTO_MAP_ANY\020\016\022\031\n\025A"
  "RG_PROTO_MAP_KEY_ANY\020\017\022\033\n\027ARG_PROTO_MAP_"
  "VALUE_ANY\020\020\022\021\n\rARG_PROTO_ANY\020\005\022\022\n\016ARG_ST"
  "RUCT_ANY\020\006\022\020\n\014ARG_ENUM_ANY\020\007\022\026\n\022ARG_TYPE"
  "_ARBITRARY\020\010\022\025\n\021ARG_TYPE_RELATION\020\t\022\021\n\rA"
  "RG_TYPE_VOID\020\n\022\022\n\016ARG_TYPE_MODEL\020\013\022\027\n\023AR"
  "G_TYPE_CONNECTION\020\014\022\027\n\023ARG_TYPE_DESCRIPT"
  "OR\020\r\022\023\n\017ARG_TYPE_LAMBDA\020\021\022B\n5__Signature"
  "ArgumentKind__switch_must_have_a_default"
  "__\020\377\377\377\377\377\377\377\377\377\001B&\n\022com.google.zetasqlB\020Zet"
  "aSQLFunctions"
  ;
static ::_pbi::once_flag descriptor_table_zetasql_2fpublic_2ffunction_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zetasql_2fpublic_2ffunction_2eproto = {
    false, false, 1253, descriptor_table_protodef_zetasql_2fpublic_2ffunction_2eproto,
    "zetasql/public/function.proto",
    &descriptor_table_zetasql_2fpublic_2ffunction_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_zetasql_2fpublic_2ffunction_2eproto::offsets,
    file_level_metadata_zetasql_2fpublic_2ffunction_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto,
    file_level_service_descriptors_zetasql_2fpublic_2ffunction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zetasql_2fpublic_2ffunction_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2ffunction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2ffunction_2eproto(&descriptor_table_zetasql_2fpublic_2ffunction_2eproto);
namespace zetasql {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_ArgumentCardinality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2ffunction_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto[0];
}
bool FunctionEnums_ArgumentCardinality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FunctionEnums_ArgumentCardinality FunctionEnums::REQUIRED;
constexpr FunctionEnums_ArgumentCardinality FunctionEnums::REPEATED;
constexpr FunctionEnums_ArgumentCardinality FunctionEnums::OPTIONAL;
constexpr FunctionEnums_ArgumentCardinality FunctionEnums::ArgumentCardinality_MIN;
constexpr FunctionEnums_ArgumentCardinality FunctionEnums::ArgumentCardinality_MAX;
constexpr int FunctionEnums::ArgumentCardinality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_ProcedureArgumentMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2ffunction_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto[1];
}
bool FunctionEnums_ProcedureArgumentMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FunctionEnums_ProcedureArgumentMode FunctionEnums::NOT_SET;
constexpr FunctionEnums_ProcedureArgumentMode FunctionEnums::IN;
constexpr FunctionEnums_ProcedureArgumentMode FunctionEnums::OUT;
constexpr FunctionEnums_ProcedureArgumentMode FunctionEnums::INOUT;
constexpr FunctionEnums_ProcedureArgumentMode FunctionEnums::ProcedureArgumentMode_MIN;
constexpr FunctionEnums_ProcedureArgumentMode FunctionEnums::ProcedureArgumentMode_MAX;
constexpr int FunctionEnums::ProcedureArgumentMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_WindowOrderSupport_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2ffunction_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto[2];
}
bool FunctionEnums_WindowOrderSupport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FunctionEnums_WindowOrderSupport FunctionEnums::ORDER_UNSUPPORTED;
constexpr FunctionEnums_WindowOrderSupport FunctionEnums::ORDER_OPTIONAL;
constexpr FunctionEnums_WindowOrderSupport FunctionEnums::ORDER_REQUIRED;
constexpr FunctionEnums_WindowOrderSupport FunctionEnums::WindowOrderSupport_MIN;
constexpr FunctionEnums_WindowOrderSupport FunctionEnums::WindowOrderSupport_MAX;
constexpr int FunctionEnums::WindowOrderSupport_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2ffunction_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto[3];
}
bool FunctionEnums_Mode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FunctionEnums_Mode FunctionEnums::SCALAR;
constexpr FunctionEnums_Mode FunctionEnums::AGGREGATE;
constexpr FunctionEnums_Mode FunctionEnums::ANALYTIC;
constexpr FunctionEnums_Mode FunctionEnums::Mode_MIN;
constexpr FunctionEnums_Mode FunctionEnums::Mode_MAX;
constexpr int FunctionEnums::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_Volatility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2ffunction_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto[4];
}
bool FunctionEnums_Volatility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FunctionEnums_Volatility FunctionEnums::IMMUTABLE;
constexpr FunctionEnums_Volatility FunctionEnums::STABLE;
constexpr FunctionEnums_Volatility FunctionEnums::VOLATILE;
constexpr FunctionEnums_Volatility FunctionEnums::Volatility_MIN;
constexpr FunctionEnums_Volatility FunctionEnums::Volatility_MAX;
constexpr int FunctionEnums::Volatility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_TableValuedFunctionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2ffunction_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto[5];
}
bool FunctionEnums_TableValuedFunctionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FunctionEnums_TableValuedFunctionType FunctionEnums::INVALID;
constexpr FunctionEnums_TableValuedFunctionType FunctionEnums::FIXED_OUTPUT_SCHEMA_TVF;
constexpr FunctionEnums_TableValuedFunctionType FunctionEnums::FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_TVF;
constexpr FunctionEnums_TableValuedFunctionType FunctionEnums::TEMPLATED_SQL_TVF;
constexpr FunctionEnums_TableValuedFunctionType FunctionEnums::FORWARD_INPUT_SCHEMA_TO_OUTPUT_SCHEMA_WITH_APPENDED_COLUMNS;
constexpr FunctionEnums_TableValuedFunctionType FunctionEnums::TableValuedFunctionType_MIN;
constexpr FunctionEnums_TableValuedFunctionType FunctionEnums::TableValuedFunctionType_MAX;
constexpr int FunctionEnums::TableValuedFunctionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionEnums_ArgumentCollationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2ffunction_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto[6];
}
bool FunctionEnums_ArgumentCollationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FunctionEnums_ArgumentCollationMode FunctionEnums::AFFECTS_NONE;
constexpr FunctionEnums_ArgumentCollationMode FunctionEnums::AFFECTS_OPERATION;
constexpr FunctionEnums_ArgumentCollationMode FunctionEnums::AFFECTS_PROPAGATION;
constexpr FunctionEnums_ArgumentCollationMode FunctionEnums::AFFECTS_OPERATION_AND_PROPAGATION;
constexpr FunctionEnums_ArgumentCollationMode FunctionEnums::ArgumentCollationMode_MIN;
constexpr FunctionEnums_ArgumentCollationMode FunctionEnums::ArgumentCollationMode_MAX;
constexpr int FunctionEnums::ArgumentCollationMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignatureArgumentKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2ffunction_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2ffunction_2eproto[7];
}
bool SignatureArgumentKind_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FunctionEnums::_Internal {
 public:
};

FunctionEnums::FunctionEnums(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:zetasql.FunctionEnums)
}
FunctionEnums::FunctionEnums(const FunctionEnums& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  FunctionEnums* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.FunctionEnums)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionEnums::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionEnums::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FunctionEnums::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ffunction_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::FunctionEnums*
Arena::CreateMaybeMessage< ::zetasql::FunctionEnums >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FunctionEnums >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
