// A Bison parser, made by GNU Bison 3.6.2.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015, 2018-2020 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.

// DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
// especially those whose name start with YY_ or yy_.  They are
// private implementation details that can be changed or removed.


// Take the name prefix into account.
#define yylex   zetasql_bison_parserlex



#include "bison_parser.bison.h"


// Unqualified %code blocks.
#line 658 "external/com_google_zetasql/zetasql/parser/bison_parser.y"


inline int zetasql_bison_parserlex(
    zetasql_bison_parser::BisonParserImpl::semantic_type* yylval,
    zetasql_bison_parser::location* yylloc,
    zetasql::parser::ZetaSqlFlexTokenizer* tokenizer) {
  ZETASQL_DCHECK(tokenizer != nullptr);
  return tokenizer->GetNextTokenFlex(yylloc);
}

// Generates a parse error with message 'msg' (which must be a string
// expression) at bison location 'location', and aborts the parser.
#define YYERROR_AND_ABORT_AT(location, msg) \
    do { \
      error(location, (msg)); \
      YYABORT; \
    } while (0)

// Generates a parse error of the form "Unexpected X", where X is a description
// of the current token, at bison location 'location', and aborts the parser.
#define YYERROR_UNEXPECTED_AND_ABORT_AT(location) \
    do { \
      error(location, ""); \
      YYABORT; \
    } while (0)

#define CHECK_LABEL_SUPPORT(node, location) \
    if (node != nullptr \
        && (!parser->language_options().LanguageFeatureEnabled( \
                zetasql::FEATURE_V_1_3_SCRIPT_LABEL))) { \
      YYERROR_AND_ABORT_AT(location, "Script labels are not supported"); \
    }

#define CHECK_END_LABEL_VALID( \
  label_node, label_location, end_label_node, end_label_location) \
    if (end_label_node != nullptr \
        && !end_label_node->GetAsIdString().CaseEquals( \
              label_node->GetAsIdString())) { \
      YYERROR_AND_ABORT_AT(end_label_location, \
          absl::StrCat("Mismatched end label; expected ", \
              label_node->GetAsStringView(), ", got ", \
              end_label_node->GetAsStringView())); \
    } \

// Adds 'children' to 'node' and then returns 'node'.
template <typename ASTNodeType>
ASTNodeType* WithExtraChildren(
    ASTNodeType* node,
    absl::Span<zetasql::ASTNode* const> children) {
  for (zetasql::ASTNode* child : children) {
    if (child != nullptr) {
      node->AddChild(child);
    }
  }
  return node;
}

// Returns the first location in 'locations' that is not empty. If none of the
// locations are nonempty, returns the first location.
static zetasql_bison_parser::location FirstNonEmptyLocation(
    absl::Span<const zetasql_bison_parser::location> locations) {
  for (const zetasql_bison_parser::location& location : locations) {
    if (location.begin.column != location.end.column) {
      return location;
    }
  }
  return locations[0];
}

static bool IsUnparenthesizedNotExpression(zetasql::ASTNode* node) {
  using zetasql::ASTUnaryExpression;
  const ASTUnaryExpression* expr =
      node->GetAsOrNull<ASTUnaryExpression>();
  return expr != nullptr && !expr->parenthesized() &&
         expr->op() == ASTUnaryExpression::NOT;
}

using zetasql::ASTInsertStatement;
using zetasql::ASTCreateFunctionStmtBase;
using zetasql::ASTDropStatement;


#line 131 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif


// Whether we are compiled with exception support.
#ifndef YY_EXCEPTIONS
# if defined __GNUC__ && !defined __EXCEPTIONS
#  define YY_EXCEPTIONS 0
# else
#  define YY_EXCEPTIONS 1
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (false)
# endif


// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << '\n';                       \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yy_stack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE (Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void> (0)
# define YY_STACK_PRINT()                static_cast<void> (0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)

namespace zetasql_bison_parser {
#line 223 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"

  /// Build a parser object.
  BisonParserImpl::BisonParserImpl (zetasql::parser::ZetaSqlFlexTokenizer* tokenizer_yyarg, zetasql::parser::BisonParser* parser_yyarg, zetasql::ASTNode** ast_node_result_yyarg, zetasql::parser::ASTStatementProperties*
                  ast_statement_properties_yyarg, std::string* error_message_yyarg, zetasql::ParseLocationPoint* error_location_yyarg, bool* move_error_location_past_whitespace_yyarg, int* statement_end_byte_offset_yyarg)
#if YYDEBUG
    : yydebug_ (false),
      yycdebug_ (&std::cerr),
#else
    :
#endif
      tokenizer (tokenizer_yyarg),
      parser (parser_yyarg),
      ast_node_result (ast_node_result_yyarg),
      ast_statement_properties (ast_statement_properties_yyarg),
      error_message (error_message_yyarg),
      error_location (error_location_yyarg),
      move_error_location_past_whitespace (move_error_location_past_whitespace_yyarg),
      statement_end_byte_offset (statement_end_byte_offset_yyarg)
  {}

  BisonParserImpl::~BisonParserImpl ()
  {}

  BisonParserImpl::syntax_error::~syntax_error () YY_NOEXCEPT YY_NOTHROW
  {}

  /*---------------.
  | symbol kinds.  |
  `---------------*/

  // basic_symbol.
  template <typename Base>
  BisonParserImpl::basic_symbol<Base>::basic_symbol (const basic_symbol& that)
    : Base (that)
    , value (that.value)
    , location (that.location)
  {}


  /// Constructor for valueless symbols.
  template <typename Base>
  BisonParserImpl::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, YY_MOVE_REF (location_type) l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  BisonParserImpl::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, YY_RVREF (semantic_type) v, YY_RVREF (location_type) l)
    : Base (t)
    , value (YY_MOVE (v))
    , location (YY_MOVE (l))
  {}

  template <typename Base>
  BisonParserImpl::symbol_kind_type
  BisonParserImpl::basic_symbol<Base>::type_get () const YY_NOEXCEPT
  {
    return this->kind ();
  }

  template <typename Base>
  bool
  BisonParserImpl::basic_symbol<Base>::empty () const YY_NOEXCEPT
  {
    return this->kind () == symbol_kind::S_YYEMPTY;
  }

  template <typename Base>
  void
  BisonParserImpl::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move (s);
    value = YY_MOVE (s.value);
    location = YY_MOVE (s.location);
  }

  // by_kind.
  BisonParserImpl::by_kind::by_kind ()
    : kind_ (symbol_kind::S_YYEMPTY)
  {}

#if 201103L <= YY_CPLUSPLUS
  BisonParserImpl::by_kind::by_kind (by_kind&& that)
    : kind_ (that.kind_)
  {
    that.clear ();
  }
#endif

  BisonParserImpl::by_kind::by_kind (const by_kind& that)
    : kind_ (that.kind_)
  {}

  BisonParserImpl::by_kind::by_kind (token_kind_type t)
    : kind_ (yytranslate_ (t))
  {}

  void
  BisonParserImpl::by_kind::clear ()
  {
    kind_ = symbol_kind::S_YYEMPTY;
  }

  void
  BisonParserImpl::by_kind::move (by_kind& that)
  {
    kind_ = that.kind_;
    that.clear ();
  }

  BisonParserImpl::symbol_kind_type
  BisonParserImpl::by_kind::kind () const YY_NOEXCEPT
  {
    return kind_;
  }

  BisonParserImpl::symbol_kind_type
  BisonParserImpl::by_kind::type_get () const YY_NOEXCEPT
  {
    return this->kind ();
  }


  // by_state.
  BisonParserImpl::by_state::by_state () YY_NOEXCEPT
    : state (empty_state)
  {}

  BisonParserImpl::by_state::by_state (const by_state& that) YY_NOEXCEPT
    : state (that.state)
  {}

  void
  BisonParserImpl::by_state::clear () YY_NOEXCEPT
  {
    state = empty_state;
  }

  void
  BisonParserImpl::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  BisonParserImpl::by_state::by_state (state_type s) YY_NOEXCEPT
    : state (s)
  {}

  BisonParserImpl::symbol_kind_type
  BisonParserImpl::by_state::kind () const YY_NOEXCEPT
  {
    if (state == empty_state)
      return symbol_kind::S_YYEMPTY;
    else
      return YY_CAST (symbol_kind_type, yystos_[+state]);
  }

  BisonParserImpl::stack_symbol_type::stack_symbol_type ()
  {}

  BisonParserImpl::stack_symbol_type::stack_symbol_type (YY_RVREF (stack_symbol_type) that)
    : super_type (YY_MOVE (that.state), YY_MOVE (that.value), YY_MOVE (that.location))
  {
#if 201103L <= YY_CPLUSPLUS
    // that is emptied.
    that.state = empty_state;
#endif
  }

  BisonParserImpl::stack_symbol_type::stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) that)
    : super_type (s, YY_MOVE (that.value), YY_MOVE (that.location))
  {
    // that is emptied.
    that.kind_ = symbol_kind::S_YYEMPTY;
  }

#if YY_CPLUSPLUS < 201103L
  BisonParserImpl::stack_symbol_type&
  BisonParserImpl::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
    value = that.value;
    location = that.location;
    return *this;
  }

  BisonParserImpl::stack_symbol_type&
  BisonParserImpl::stack_symbol_type::operator= (stack_symbol_type& that)
  {
    state = that.state;
    value = that.value;
    location = that.location;
    // that is emptied.
    that.state = empty_state;
    return *this;
  }
#endif

  template <typename Base>
  void
  BisonParserImpl::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);

    // User destructor.
    YYUSE (yysym.kind ());
  }

#if YYDEBUG
  template <typename Base>
  void
  BisonParserImpl::yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    if (yysym.empty ())
      yyo << "empty symbol";
    else
      {
        symbol_kind_type yykind = yysym.kind ();
        yyo << (yykind < YYNTOKENS ? "token" : "nterm")
            << ' ' << yysym.name () << " ("
            << yysym.location << ": ";
        YYUSE (yykind);
        yyo << ')';
      }
  }
#endif

  void
  BisonParserImpl::yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym)
  {
    if (m)
      YY_SYMBOL_PRINT (m, sym);
    yystack_.push (YY_MOVE (sym));
  }

  void
  BisonParserImpl::yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym)
  {
#if 201103L <= YY_CPLUSPLUS
    yypush_ (m, stack_symbol_type (s, std::move (sym)));
#else
    stack_symbol_type ss (s, sym);
    yypush_ (m, ss);
#endif
  }

  void
  BisonParserImpl::yypop_ (int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  BisonParserImpl::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  BisonParserImpl::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  BisonParserImpl::debug_level_type
  BisonParserImpl::debug_level () const
  {
    return yydebug_;
  }

  void
  BisonParserImpl::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  BisonParserImpl::state_type
  BisonParserImpl::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - YYNTOKENS] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - YYNTOKENS];
  }

  bool
  BisonParserImpl::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  bool
  BisonParserImpl::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  BisonParserImpl::operator() ()
  {
    return parse ();
  }

  int
  BisonParserImpl::parse ()
  {
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

#if YY_EXCEPTIONS
    try
#endif // YY_EXCEPTIONS
      {
    YYCDEBUG << "Starting parse\n";


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, YY_MOVE (yyla));

  /*-----------------------------------------------.
  | yynewstate -- push a new symbol on the stack.  |
  `-----------------------------------------------*/
  yynewstate:
    YYCDEBUG << "Entering state " << int (yystack_[0].state) << '\n';
    YY_STACK_PRINT ();

    // Accept?
    if (yystack_[0].state == yyfinal_)
      YYACCEPT;

    goto yybackup;


  /*-----------.
  | yybackup.  |
  `-----------*/
  yybackup:
    // Try to take a decision without lookahead.
    yyn = yypact_[+yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token\n";
#if YY_EXCEPTIONS
        try
#endif // YY_EXCEPTIONS
          {
            yyla.kind_ = yytranslate_ (yylex (&yyla.value, &yyla.location, tokenizer));
          }
#if YY_EXCEPTIONS
        catch (const syntax_error& yyexc)
          {
            YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
            error (yyexc);
            goto yyerrlab1;
          }
#endif // YY_EXCEPTIONS
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    if (yyla.kind () == symbol_kind::S_YYerror)
    {
      // The scanner already issued an error message, process directly
      // to error recovery.  But do not keep the error token as
      // lookahead, it is too special and may lead us to an endless
      // loop in error recovery. */
      yyla.kind_ = symbol_kind::S_YYUNDEF;
      goto yyerrlab1;
    }

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.kind ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.kind ())
      {
        goto yydefault;
      }

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", state_type (yyn), YY_MOVE (yyla));
    goto yynewstate;


  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[+yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;


  /*-----------------------------.
  | yyreduce -- do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_ (yystack_[yylen].state, yyr1_[yyn]);
      /* If YYLEN is nonzero, implement the default value of the
         action: '$$ = $1'.  Otherwise, use the top of the stack.

         Otherwise, the following line sets YYLHS.VALUE to garbage.
         This behavior is undocumented and Bison users should not rely
         upon it.  */
      if (yylen)
        yylhs.value = yystack_[yylen - 1].value;
      else
        yylhs.value = yystack_[0].value;

      // Default location.
      {
        stack_type::slice range (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, range, yylen);
        yyerror_range[1].location = yylhs.location;
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
#if YY_EXCEPTIONS
      try
#endif // YY_EXCEPTIONS
        {
          switch (yyn)
            {
  case 2:
#line 1613 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                 { *ast_node_result = (yystack_[0].value.node); }
#line 698 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 3:
#line 1614 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                         { *ast_node_result = (yystack_[0].value.node); }
#line 704 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 4:
#line 1615 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                         { *ast_node_result = (yystack_[0].value.node); }
#line 710 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 5:
#line 1616 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                       { *ast_node_result = (yystack_[0].value.node); }
#line 716 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 6:
#line 1618 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { ast_statement_properties->node_kind = (yystack_[0].value.ast_node_kind); }
#line 722 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 7:
#line 1619 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                 { *ast_node_result = (yystack_[0].value.expression); }
#line 728 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 8:
#line 1620 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                     { *ast_node_result = (yystack_[0].value.node); }
#line 734 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 11:
#line 1628 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 742 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 12:
#line 1635 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // The semicolon marks the end of the statement.
        tokenizer->SetForceTerminate();
        *statement_end_byte_offset = yystack_[0].location.end.column;
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 753 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 13:
#line 1642 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // There's no semicolon. That means we have to be at EOF.
        *statement_end_byte_offset = -1;
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 763 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 14:
#line 1651 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // The semicolon marks the end of the statement.
        tokenizer->SetForceTerminate();
        *statement_end_byte_offset = yystack_[0].location.end.column;
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 774 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 15:
#line 1658 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // There's no semicolon. That means we have to be at EOF.
        *statement_end_byte_offset = -1;
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 784 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 16:
#line 1666 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
  { (yylhs.value.node) = (yystack_[0].value.node); }
#line 790 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 17:
#line 1667 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 796 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 18:
#line 1671 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 802 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 19:
#line 1673 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHintedStatement, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 810 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 20:
#line 1679 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 816 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 21:
#line 1680 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 822 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 22:
#line 1681 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 828 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 23:
#line 1682 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 834 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 24:
#line 1683 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 840 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 25:
#line 1684 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 846 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 26:
#line 1685 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 852 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 27:
#line 1686 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 858 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 28:
#line 1687 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 864 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 29:
#line 1688 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 870 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 30:
#line 1689 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 876 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 31:
#line 1690 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 882 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 32:
#line 1695 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 890 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 33:
#line 1701 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 896 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 34:
#line 1702 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 902 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 35:
#line 1703 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 908 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 36:
#line 1704 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 914 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 37:
#line 1705 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 920 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 38:
#line 1706 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 926 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 39:
#line 1707 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 932 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 40:
#line 1708 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 938 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 41:
#line 1709 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 944 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 42:
#line 1710 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 950 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 43:
#line 1711 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 956 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 44:
#line 1712 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 962 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 45:
#line 1713 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 968 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 46:
#line 1714 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 974 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 47:
#line 1715 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 980 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 48:
#line 1716 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 986 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 49:
#line 1717 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 992 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 50:
#line 1718 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 998 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 51:
#line 1719 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1004 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 52:
#line 1720 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1010 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 53:
#line 1721 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1016 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 54:
#line 1722 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1022 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 55:
#line 1723 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1028 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 56:
#line 1724 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1034 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 57:
#line 1725 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1040 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 58:
#line 1726 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1046 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 59:
#line 1727 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1052 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 60:
#line 1728 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1058 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 61:
#line 1729 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1064 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 62:
#line 1730 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1070 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 63:
#line 1731 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1076 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 64:
#line 1732 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1082 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 65:
#line 1733 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1088 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 66:
#line 1734 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1094 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 67:
#line 1735 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1100 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 68:
#line 1736 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1106 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 69:
#line 1737 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1112 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 70:
#line 1738 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1118 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 71:
#line 1739 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1124 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 72:
#line 1740 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1130 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 73:
#line 1741 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1136 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 74:
#line 1742 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1142 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 75:
#line 1743 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1148 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 76:
#line 1744 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1154 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 77:
#line 1745 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1160 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 78:
#line 1746 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1166 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 79:
#line 1747 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1172 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 80:
#line 1752 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTQueryStatement, yylhs.location, {(yystack_[0].value.query)});
      }
#line 1180 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 81:
#line 1759 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSetOptionsAction, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1188 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 82:
#line 1764 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSetAsAction, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1196 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 83:
#line 1768 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAddConstraintAction, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1204 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 84:
#line 1772 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAddConstraintAction, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1212 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 85:
#line 1777 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* constraint = (yystack_[0].value.node);
        constraint->AddChild((yystack_[1].value.identifier));
        parser->WithStartLocation(constraint, yystack_[1].location);
        auto* node = MAKE_NODE(ASTAddConstraintAction, yylhs.location, {constraint});
        node->set_is_if_not_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1225 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 86:
#line 1786 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node =
          MAKE_NODE(ASTDropConstraintAction, yylhs.location, {(yystack_[0].value.identifier)});
        node->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1236 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 87:
#line 1793 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTDropPrimaryKeyAction, yylhs.location, {});
        node->set_is_if_exists((yystack_[0].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1246 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 88:
#line 1799 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node =
          MAKE_NODE(ASTAlterConstraintEnforcementAction, yylhs.location, {(yystack_[1].value.identifier)});
        node->set_is_if_exists((yystack_[2].value.boolean));
        node->set_is_enforced((yystack_[0].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1258 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 89:
#line 1807 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node =
          MAKE_NODE(ASTAlterConstraintSetOptionsAction, yylhs.location, {(yystack_[3].value.identifier), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1269 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 90:
#line 1815 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAddColumnAction, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.expression)});
        node->set_is_if_not_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1279 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 91:
#line 1821 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTDropColumnAction, yylhs.location, {(yystack_[0].value.identifier)});
        node->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1289 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 92:
#line 1827 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTRenameColumnAction, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.identifier)});
        node->set_is_if_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1299 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 93:
#line 1834 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterColumnTypeAction, yylhs.location, {(yystack_[4].value.identifier), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[5].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1309 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 94:
#line 1840 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterColumnOptionsAction, yylhs.location, {(yystack_[3].value.identifier), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1319 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 95:
#line 1846 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterColumnSetDefaultAction, yylhs.location,{(yystack_[3].value.identifier), (yystack_[0].value.expression)});
        node->set_is_if_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1329 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 96:
#line 1852 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterColumnDropDefaultAction, yylhs.location, {(yystack_[2].value.identifier)});
        node->set_is_if_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1339 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 97:
#line 1858 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterColumnDropNotNullAction, yylhs.location, {(yystack_[3].value.identifier)});
        node->set_is_if_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1349 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 98:
#line 1864 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRenameToClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 1357 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 99:
#line 1868 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSetCollateClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1365 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 100:
#line 1872 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_4_TTL)) {
          YYERROR_AND_ABORT_AT(yystack_[6].location,
            "ADD ROW DELETION POLICY clause is not supported.");
        }
        auto* node = MAKE_NODE(ASTAddTtlAction, yylhs.location, {(yystack_[1].value.expression)});
        node->set_is_if_not_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1380 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 101:
#line 1883 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_4_TTL)) {
          YYERROR_AND_ABORT_AT(yystack_[6].location,
            "REPLACE ROW DELETION POLICY clause is not supported.");
        }
        auto* node = MAKE_NODE(ASTReplaceTtlAction, yylhs.location, {(yystack_[1].value.expression)});
        node->set_is_if_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1395 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 102:
#line 1894 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_4_TTL)) {
          YYERROR_AND_ABORT_AT(yystack_[3].location,
            "DROP ROW DELETION POLICY clause is not supported.");
        }
        auto* node = MAKE_NODE(ASTDropTtlAction, yylhs.location, {});
        node->set_is_if_exists((yystack_[0].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1410 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 103:
#line 1905 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterSubEntityAction, yylhs.location, {(yystack_[3].value.node), (yystack_[1].value.identifier), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1420 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 104:
#line 1912 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAddSubEntityAction, yylhs.location, {(yystack_[3].value.node), (yystack_[1].value.identifier), (yystack_[0].value.node)});
        node->set_is_if_not_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1430 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 105:
#line 1918 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTDropSubEntityAction, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.identifier)});
        node->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1440 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 106:
#line 1923 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1446 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 107:
#line 1924 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1452 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 108:
#line 1929 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlterActionList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1460 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 109:
#line 1933 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 1468 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 110:
#line 1941 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1474 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 111:
#line 1943 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAddToRestricteeListClause, yylhs.location, {(yystack_[0].value.node)});
        node->set_is_if_not_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1484 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 112:
#line 1949 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(
            ASTRemoveFromRestricteeListClause, yylhs.location, {(yystack_[0].value.node)}
        );
        node->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1496 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 113:
#line 1962 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlterActionList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1504 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 114:
#line 1967 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 1512 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 115:
#line 1975 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1518 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 116:
#line 1977 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTFilterUsingClause* node = MAKE_NODE(
            ASTFilterUsingClause, yylhs.location, {(yystack_[1].value.expression)});
        node->set_has_filter_keyword(true);
        (yylhs.value.node) = node;
      }
#line 1529 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 117:
#line 1984 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRevokeFromClause, yylhs.location, {(yystack_[1].value.node)});
      }
#line 1537 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 118:
#line 1988 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTRevokeFromClause* node = MAKE_NODE(
            ASTRevokeFromClause, yylhs.location);
        node->set_is_revoke_from_all(true);
        (yylhs.value.node) = node;
      }
#line 1548 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 119:
#line 1995 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTPathExpression* id =
            MAKE_NODE(ASTPathExpression, yystack_[0].location, {(yystack_[0].value.identifier)});
        (yylhs.value.node) = MAKE_NODE(ASTRenameToClause, yylhs.location, {id});
      }
#line 1558 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 120:
#line 2006 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlterActionList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1566 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 121:
#line 2010 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 1574 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 122:
#line 2025 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kAggregateFunction; }
#line 1580 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 123:
#line 2027 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kConstant; }
#line 1586 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 124:
#line 2029 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kDatabase; }
#line 1592 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 125:
#line 2030 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                         {
        if ((yystack_[0].value.table_or_table_function_keywords) == TableOrTableFunctionKeywords::kTableAndFunctionKeywords) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
               "EXTERNAL TABLE FUNCTION is not supported");
        } else {
           (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kExternalTable;
        }
      }
#line 1605 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 126:
#line 2039 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kFunction; }
#line 1611 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 127:
#line 2041 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kIndex; }
#line 1617 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 128:
#line 2043 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kMaterializedView; }
#line 1623 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 129:
#line 2045 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kModel; }
#line 1629 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 130:
#line 2047 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kProcedure; }
#line 1635 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 131:
#line 2049 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kSchema; }
#line 1641 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 132:
#line 2051 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kView; }
#line 1647 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 133:
#line 2057 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[3].value.table_or_table_function_keywords) == TableOrTableFunctionKeywords::kTableAndFunctionKeywords) {
          YYERROR_AND_ABORT_AT(yystack_[3].location, "ALTER TABLE FUNCTION is not supported");

        }
        zetasql::ASTAlterTableStatement* node = MAKE_NODE(
          ASTAlterTableStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1662 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 134:
#line 2069 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTAlterStatementBase* node = nullptr;
        // Only ALTER DATABASE, SCHEMA, TABLE, VIEW, MATERIALIZED VIEW and MODEL
        // are currently supported.
        if ((yystack_[3].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kDatabase) {
          node = MAKE_NODE(ASTAlterDatabaseStatement, yylhs.location);
        } else if ((yystack_[3].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kSchema) {
          node = MAKE_NODE(ASTAlterSchemaStatement, yylhs.location);
        } else if ((yystack_[3].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kView) {
          node = MAKE_NODE(ASTAlterViewStatement, yylhs.location);
        } else if ((yystack_[3].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kMaterializedView) {
          node = MAKE_NODE(ASTAlterMaterializedViewStatement, yylhs.location);
        } else if ((yystack_[3].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kModel) {
          node = MAKE_NODE(ASTAlterModelStatement, yylhs.location);
        } else {
          YYERROR_AND_ABORT_AT(yystack_[3].location, absl::StrCat("ALTER ", absl::AsciiStrToUpper(
            parser->GetInputText(yystack_[3].location)), " is not supported"));
        }
        node->set_is_if_exists((yystack_[2].value.boolean));
        node->AddChildren({(yystack_[1].value.expression), (yystack_[0].value.node)});
        (yylhs.value.node) = parser->WithLocation(node, yylhs.location);
      }
#line 1689 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 135:
#line 2093 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterEntityStatement, yylhs.location, {(yystack_[3].value.node), (yystack_[1].value.expression), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1699 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 136:
#line 2099 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (parser->language_options().LanguageFeatureEnabled(
               zetasql::FEATURE_ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL)) {
          auto* node = MAKE_NODE(ASTAlterEntityStatement, yylhs.location, {(yystack_[2].value.node), nullptr, (yystack_[0].value.node)});
          node->set_is_if_exists((yystack_[1].value.boolean));
          (yylhs.value.node) = node;
        } else {
          // alter_action_list always starts with a keyword
          YYERROR_AND_ABORT_AT(
              yystack_[0].location, absl::StrCat("Syntax error: Unexpected keyword ",
                               parser->GetFirstTokenOfNode(yystack_[0].location)));
        }
      }
#line 1717 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 137:
#line 2115 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* alter_privilege_restriction = MAKE_NODE(
            ASTAlterPrivilegeRestrictionStatement, yylhs.location, {(yystack_[4].value.node), (yystack_[2].value.identifier), (yystack_[1].value.expression), (yystack_[0].value.node)});
        alter_privilege_restriction->set_is_if_exists((yystack_[6].value.boolean));
        (yylhs.value.node) = alter_privilege_restriction;
      }
#line 1728 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 138:
#line 2123 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTAlterRowAccessPolicyStatement* node = MAKE_NODE(
            ASTAlterRowAccessPolicyStatement, yylhs.location, {(yystack_[3].value.identifier), (yystack_[1].value.expression), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1739 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 139:
#line 2131 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlterAllRowAccessPoliciesStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 1747 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 140:
#line 2138 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTransformClause, yylhs.location, {(yystack_[1].value.node)})
      }
#line 1755 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 141:
#line 2141 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 1761 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 142:
#line 2146 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAssertStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 1769 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 143:
#line 2153 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 1777 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 144:
#line 2157 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 1785 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 145:
#line 2164 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAnalyzeStatement, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 1793 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 146:
#line 2170 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1799 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 147:
#line 2171 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 1805 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 148:
#line 2176 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableAndColumnInfoList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1813 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 149:
#line 2180 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 1821 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 150:
#line 2187 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableAndColumnInfo, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 1829 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 151:
#line 2194 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTTransactionReadWriteMode, yylhs.location, {});
        node->set_mode(zetasql::ASTTransactionReadWriteMode::READ_ONLY);
        (yylhs.value.node) = node;
      }
#line 1839 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 152:
#line 2200 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTTransactionReadWriteMode, yylhs.location, {});
        node->set_mode(zetasql::ASTTransactionReadWriteMode::READ_WRITE);
        (yylhs.value.node) = node;
      }
#line 1849 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 153:
#line 2206 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTransactionIsolationLevel, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 1857 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 154:
#line 2210 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTransactionIsolationLevel, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.identifier)});
      }
#line 1865 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 155:
#line 2217 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTransactionModeList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1873 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 156:
#line 2221 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 1881 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 157:
#line 2227 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1887 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 158:
#line 2229 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 1895 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 159:
#line 2236 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTBeginStatement, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1903 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 165:
#line 2257 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSetTransactionStatement, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1911 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 166:
#line 2261 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTSingleAssignment, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.expression)});
    }
#line 1919 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 167:
#line 2265 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTParameterAssignment, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
    }
#line 1927 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 168:
#line 2269 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTSystemVariableAssignment, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
    }
#line 1935 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 169:
#line 2273 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTAssignmentFromStruct, yylhs.location, {(yystack_[3].value.node), (yystack_[0].value.expression)});
    }
#line 1943 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 170:
#line 2277 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      // Provide improved error message for an empty variable list.
      YYERROR_AND_ABORT_AT(yystack_[0].location,
        "Parenthesized SET statement requires a variable list");
    }
#line 1953 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 171:
#line 2283 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      // Provide improved error message for missing parentheses around a
      // list of multiple variables.
      YYERROR_AND_ABORT_AT(yystack_[3].location,
        "Using SET with multiple variables requires parentheses around the "
        "variable list");
    }
#line 1965 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 172:
#line 2294 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCommitStatement, yylhs.location, {});
      }
#line 1973 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 173:
#line 2301 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRollbackStatement, yylhs.location, {});
      }
#line 1981 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 174:
#line 2308 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStartBatchStatement, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 1989 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 175:
#line 2315 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRunBatchStatement, yylhs.location, {});
      }
#line 1997 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 176:
#line 2322 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAbortBatchStatement, yylhs.location, {});
      }
#line 2005 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 177:
#line 2330 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create = MAKE_NODE(ASTCreateConstantStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        create->set_is_or_replace((yystack_[6].value.boolean));
        create->set_scope((yystack_[5].value.create_scope));
        create->set_is_if_not_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2017 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 178:
#line 2341 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCreateDatabaseStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 2025 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 179:
#line 2352 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateFunctionStatement, yylhs.location,
                      {(yystack_[6].value.node), (yystack_[5].value.node), (yystack_[2].value.language_or_remote_with_connection).language, (yystack_[2].value.language_or_remote_with_connection).with_connection_clause, (yystack_[1].value.node),
                       (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[11].value.boolean));
        create->set_scope((yystack_[10].value.create_scope));
        create->set_is_aggregate((yystack_[9].value.boolean));
        create->set_is_if_not_exists((yystack_[7].value.boolean));
        create->set_sql_security((yystack_[4].value.sql_security));
        create->set_determinism_level((yystack_[3].value.determinism_level));
        create->set_is_remote((yystack_[2].value.language_or_remote_with_connection).is_remote);
        (yylhs.value.node) = create;
      }
#line 2044 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 180:
#line 2371 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateFunctionStatement, yylhs.location,
                      {(yystack_[7].value.node), (yystack_[6].value.node), (yystack_[3].value.language_or_remote_with_connection).language, (yystack_[3].value.language_or_remote_with_connection).with_connection_clause, (yystack_[0].value.node),
                       (yystack_[1].value.node)});
        create->set_is_or_replace((yystack_[12].value.boolean));
        create->set_scope((yystack_[11].value.create_scope));
        create->set_is_aggregate((yystack_[10].value.boolean));
        create->set_is_if_not_exists((yystack_[8].value.boolean));
        create->set_sql_security((yystack_[5].value.sql_security));
        create->set_determinism_level((yystack_[4].value.determinism_level));
        create->set_is_remote((yystack_[3].value.language_or_remote_with_connection).is_remote);
        (yylhs.value.node) = create;
      }
#line 2063 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 181:
#line 2389 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateFunctionStatement, yylhs.location,
                      {(yystack_[4].value.node), (yystack_[3].value.node), (yystack_[0].value.language_or_remote_with_connection).language, (yystack_[0].value.language_or_remote_with_connection).with_connection_clause,
                       nullptr, nullptr});
        create->set_is_or_replace((yystack_[9].value.boolean));
        create->set_scope((yystack_[8].value.create_scope));
        create->set_is_aggregate((yystack_[7].value.boolean));
        create->set_is_if_not_exists((yystack_[5].value.boolean));
        create->set_sql_security((yystack_[2].value.sql_security));
        create->set_determinism_level((yystack_[1].value.determinism_level));
        create->set_is_remote((yystack_[0].value.language_or_remote_with_connection).is_remote);
        (yylhs.value.node) = create;
      }
#line 2082 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 182:
#line 2407 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                { (yylhs.value.boolean) = true; }
#line 2088 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 183:
#line 2408 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = false; }
#line 2094 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 184:
#line 2413 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                      { (yylhs.value.boolean) = true; }
#line 2100 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 185:
#line 2414 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = false; }
#line 2106 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 186:
#line 2419 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionDeclaration, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 2114 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 187:
#line 2427 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* parameter = MAKE_NODE(ASTFunctionParameter, yylhs.location, {(yystack_[4].value.identifier), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node)});
        parameter->set_is_not_aggregate((yystack_[0].value.boolean));
        (yylhs.value.node) = parameter;
      }
#line 2124 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 188:
#line 2433 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* parameter = MAKE_NODE(ASTFunctionParameter, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node)});
        parameter->set_is_not_aggregate((yystack_[0].value.boolean));
        (yylhs.value.node) = parameter;
      }
#line 2134 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 189:
#line 2442 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionParameters, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2142 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 190:
#line 2446 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 2150 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 191:
#line 2453 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 2158 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 192:
#line 2457 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionParameters, yylhs.location);
      }
#line 2166 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 193:
#line 2464 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTStatementList* stmt_list = MAKE_NODE(
            ASTStatementList, yystack_[0].location, {(yystack_[0].value.node)});
        zetasql::ASTScript* body = MAKE_NODE(ASTScript, yystack_[0].location, {stmt_list});
        (yylhs.value.begin_end_block_or_language_as_code).body = body;
        (yylhs.value.begin_end_block_or_language_as_code).language = nullptr;
        (yylhs.value.begin_end_block_or_language_as_code).code = nullptr;
      }
#line 2179 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 194:
#line 2473 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (parser->language_options().LanguageFeatureEnabled(
                zetasql::FEATURE_NON_SQL_PROCEDURE)) {
          (yylhs.value.begin_end_block_or_language_as_code).body = nullptr;
          (yylhs.value.begin_end_block_or_language_as_code).language = (yystack_[1].value.identifier);
          (yylhs.value.begin_end_block_or_language_as_code).code = (yystack_[0].value.node);
        } else {
          YYERROR_AND_ABORT_AT(yystack_[2].location, "LANGUAGE is not supported");
        }
      }
#line 2194 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 195:
#line 2489 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      auto* create =
          MAKE_NODE(ASTCreateProcedureStatement, yylhs.location,
                    {(yystack_[4].value.expression), (yystack_[3].value.node), (yystack_[1].value.node), (yystack_[0].value.begin_end_block_or_language_as_code).body, (yystack_[2].value.node), (yystack_[0].value.begin_end_block_or_language_as_code).language, (yystack_[0].value.begin_end_block_or_language_as_code).code});
      create->set_is_or_replace((yystack_[8].value.boolean));
      create->set_scope((yystack_[7].value.create_scope));
      create->set_is_if_not_exists((yystack_[5].value.boolean));
      (yylhs.value.node) = create;
    }
#line 2208 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 196:
#line 2501 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionParameters, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2216 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 197:
#line 2505 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 2224 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 198:
#line 2512 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 2232 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 199:
#line 2516 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionParameters, yylhs.location);
      }
#line 2240 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 202:
#line 2528 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* parameter = MAKE_NODE(ASTFunctionParameter, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.node)});
        parameter->set_procedure_parameter_mode((yystack_[2].value.parameter_mode));
        (yylhs.value.node) = parameter;
      }
#line 2250 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 203:
#line 2534 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // There may be 3 cases causing this error:
        // 1. OUT int32_t where mode is empty and intended identifier name is
        //    "OUT"
        // 2. OUT int32_t where mode is OUT and identifier is missing
        // 3. OUT param_a where type is missing
        YYERROR_AND_ABORT_AT(yystack_[0].location,
                             "Syntax error: Unexpected end of parameter."
                             " Parameters should be in the format "
                             "[<parameter mode>] <parameter name> <type>. "
                             "If IN/OUT/INOUT is intended to be the name of a "
                             "parameter, it must be escaped with backticks"
                             );
      }
#line 2269 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 204:
#line 2551 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
         {(yylhs.value.parameter_mode) = ::zetasql::ASTFunctionParameter::ProcedureParameterMode::IN;}
#line 2275 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 205:
#line 2553 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {(yylhs.value.parameter_mode) = ::zetasql::ASTFunctionParameter::ProcedureParameterMode::OUT;}
#line 2281 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 206:
#line 2555 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {(yylhs.value.parameter_mode) = ::zetasql::ASTFunctionParameter::ProcedureParameterMode::INOUT;}
#line 2287 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 207:
#line 2557 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {(yylhs.value.parameter_mode) = ::zetasql::ASTFunctionParameter::ProcedureParameterMode::NOT_SET;}
#line 2293 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 208:
#line 2562 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.node)->node_kind() == zetasql::AST_TEMPLATED_PARAMETER_TYPE) {
          // TODO: Note that the official design supports this
          // feature. A reasonable use-case is named templated types here: e.g.
          // CREATE FUNCTION f(arg ANY TYPE T) RETURNS T AS ...
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Syntax error: Templated types are not allowed in the "
              "RETURNS clause");
        }
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2310 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 209:
#line 2575 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 2318 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 210:
#line 2582 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.node) != nullptr &&
            (yystack_[0].value.node)->node_kind() == zetasql::AST_TVF_SCHEMA) {
            YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: Unexpected TABLE");
        }
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2330 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 211:
#line 2592 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::DETERMINISTIC;}
#line 2336 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 212:
#line 2594 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::NOT_DETERMINISTIC;}
#line 2342 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 213:
#line 2596 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::IMMUTABLE;}
#line 2348 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 214:
#line 2598 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::STABLE;}
#line 2354 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 215:
#line 2600 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::VOLATILE;}
#line 2360 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 216:
#line 2602 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::DETERMINISM_UNSPECIFIED;}
#line 2366 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 217:
#line 2608 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.identifier) = (yystack_[0].value.identifier);
      }
#line 2374 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 218:
#line 2612 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.identifier) = nullptr;
      }
#line 2382 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 219:
#line 2619 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_REMOTE_FUNCTION)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Keyword REMOTE is not supported");
        }

        (yylhs.value.language_or_remote_with_connection).language = nullptr;
        (yylhs.value.language_or_remote_with_connection).is_remote = true;
        if ((yystack_[0].value.node) == nullptr) {
          (yylhs.value.language_or_remote_with_connection).with_connection_clause = nullptr;
        } else {
          (yylhs.value.language_or_remote_with_connection).with_connection_clause =
              (yystack_[0].value.node)->GetAsOrDie<zetasql::ASTWithConnectionClause>();
        }
      }
#line 2402 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 220:
#line 2635 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection).language = nullptr;
        (yylhs.value.language_or_remote_with_connection).is_remote = false;
        if ((yystack_[0].value.node) == nullptr) {
          (yylhs.value.language_or_remote_with_connection).with_connection_clause = nullptr;
        } else {
          if (!parser->language_options().LanguageFeatureEnabled(
                  zetasql::FEATURE_V_1_3_REMOTE_FUNCTION)) {
            YYERROR_AND_ABORT_AT(yystack_[0].location, "WITH CONNECTION clause is not supported");
          }
          (yylhs.value.language_or_remote_with_connection).with_connection_clause =
              (yystack_[0].value.node)->GetAsOrDie<zetasql::ASTWithConnectionClause>();
        }
      }
#line 2421 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 221:
#line 2653 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection) = (yystack_[0].value.language_or_remote_with_connection);
      }
#line 2429 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 222:
#line 2657 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection).language = nullptr;
        (yylhs.value.language_or_remote_with_connection).is_remote = false;
        (yylhs.value.language_or_remote_with_connection).with_connection_clause = nullptr;
      }
#line 2439 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 223:
#line 2667 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection) = (yystack_[0].value.language_or_remote_with_connection);
        (yylhs.value.language_or_remote_with_connection).language = (yystack_[1].value.identifier);
      }
#line 2448 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 224:
#line 2672 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection) = (yystack_[1].value.language_or_remote_with_connection);
        (yylhs.value.language_or_remote_with_connection).language = (yystack_[0].value.identifier);
      }
#line 2457 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 225:
#line 2677 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection).language = nullptr;
        (yylhs.value.language_or_remote_with_connection).is_remote = false;
        (yylhs.value.language_or_remote_with_connection).with_connection_clause = nullptr;
      }
#line 2467 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 226:
#line 2686 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                              { (yylhs.value.sql_security) = (yystack_[0].value.sql_security); }
#line 2473 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 227:
#line 2688 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.sql_security) = zetasql::ASTCreateStatement::SQL_SECURITY_UNSPECIFIED;
      }
#line 2481 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 228:
#line 2694 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
            { (yylhs.value.sql_security) = zetasql::ASTCreateStatement::SQL_SECURITY_INVOKER; }
#line 2487 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 229:
#line 2695 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.sql_security) = zetasql::ASTCreateStatement::SQL_SECURITY_DEFINER; }
#line 2493 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 230:
#line 2699 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2501 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 231:
#line 2703 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2509 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 232:
#line 2709 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2515 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 233:
#line 2711 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 2523 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 234:
#line 2718 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2531 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 235:
#line 2722 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 2539 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 236:
#line 2729 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2547 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 237:
#line 2733 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2555 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 238:
#line 2740 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSqlFunctionBody, yylhs.location, {(yystack_[1].value.expression)});
      }
#line 2563 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 239:
#line 2744 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "The body of each CREATE FUNCTION statement is an expression, not a "
        "query; to use a query as an expression, the query must be wrapped "
        "with additional parentheses to make it a scalar subquery expression");
      }
#line 2575 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 240:
#line 2758 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTRestrictToClause* node =
            MAKE_NODE(ASTRestrictToClause, yylhs.location, {(yystack_[0].value.node)});
        (yylhs.value.node) = node;
      }
#line 2585 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 241:
#line 2767 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2593 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 242:
#line 2771 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 2601 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 243:
#line 2778 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTGrantToClause* grant_to =
            MAKE_NODE(ASTGrantToClause, yylhs.location, {(yystack_[1].value.node)});
        grant_to->set_has_grant_keyword_and_parens(true);
        (yylhs.value.node) = grant_to;
      }
#line 2612 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 244:
#line 2786 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2618 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 245:
#line 2788 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTGrantToClause* grant_to =
            MAKE_NODE(ASTGrantToClause, yylhs.location, {(yystack_[0].value.node)});
        grant_to->set_has_grant_keyword_and_parens(false);
        (yylhs.value.node) = grant_to;
      }
#line 2629 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 246:
#line 2797 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2637 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 247:
#line 2801 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 2645 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 248:
#line 2809 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = true;
      }
#line 2653 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 249:
#line 2813 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = false;
      }
#line 2661 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 250:
#line 2820 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTFilterUsingClause* filter_using =
            MAKE_NODE(ASTFilterUsingClause, yylhs.location, {(yystack_[1].value.expression)});
        filter_using->set_has_filter_keyword((yystack_[4].value.boolean));
        (yylhs.value.node) = filter_using;
      }
#line 2672 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 251:
#line 2831 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTCreatePrivilegeRestrictionStatement* node =
            MAKE_NODE(ASTCreatePrivilegeRestrictionStatement, yylhs.location,
                      {(yystack_[4].value.node), (yystack_[2].value.identifier), (yystack_[1].value.expression), (yystack_[0].value.node)});
        node->set_is_or_replace((yystack_[9].value.boolean));
        node->set_is_if_not_exists((yystack_[6].value.boolean));
        (yylhs.value.node) = node;
      }
#line 2685 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 252:
#line 2845 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTPathExpression* opt_path_expression =
            (yystack_[4].value.identifier) == nullptr ? nullptr : MAKE_NODE(ASTPathExpression, yystack_[4].location, {(yystack_[4].value.identifier)});
        zetasql::ASTCreateRowAccessPolicyStatement* create =
            MAKE_NODE(ASTCreateRowAccessPolicyStatement, yylhs.location,
                      {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node), opt_path_expression});
        create->set_is_or_replace((yystack_[9].value.boolean));
        create->set_is_if_not_exists((yystack_[5].value.boolean));
        create->set_has_access_keyword((yystack_[7].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2701 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 253:
#line 2860 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTWithPartitionColumnsClause* with_partition_columns =
            MAKE_NODE(ASTWithPartitionColumnsClause, yylhs.location, {(yystack_[0].value.node)});
        (yylhs.value.node) = with_partition_columns;
      }
#line 2711 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 254:
#line 2869 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWithConnectionClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2719 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 255:
#line 2884 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                         {
      (yylhs.value.external_table_with_clauses).with_partition_columns_clause =
          (yystack_[1].value.node)->GetAsOrDie<zetasql::ASTWithPartitionColumnsClause>();
      (yylhs.value.external_table_with_clauses).with_connection_clause =
          (yystack_[0].value.node)->GetAsOrDie<zetasql::ASTWithConnectionClause>();
    }
#line 2730 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 256:
#line 2890 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                    {
      (yylhs.value.external_table_with_clauses).with_partition_columns_clause =
          (yystack_[0].value.node)->GetAsOrDie<zetasql::ASTWithPartitionColumnsClause>();
      (yylhs.value.external_table_with_clauses).with_connection_clause = nullptr;
    }
#line 2740 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 257:
#line 2895 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                             {
      (yylhs.value.external_table_with_clauses).with_partition_columns_clause = nullptr;
      (yylhs.value.external_table_with_clauses).with_connection_clause =
          (yystack_[0].value.node)->GetAsOrDie<zetasql::ASTWithConnectionClause>();
    }
#line 2750 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 258:
#line 2900 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    {
      (yylhs.value.external_table_with_clauses).with_partition_columns_clause = nullptr;
      (yylhs.value.external_table_with_clauses).with_connection_clause = nullptr;
    }
#line 2759 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 259:
#line 2911 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.node) == nullptr) {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Syntax error: Expected keyword OPTIONS");
        }
        auto* create =
            MAKE_NODE(ASTCreateExternalTableStatement, yylhs.location,
            {(yystack_[5].value.expression), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.external_table_with_clauses).with_partition_columns_clause,
             (yystack_[1].value.external_table_with_clauses).with_connection_clause, (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[10].value.boolean));
        create->set_scope((yystack_[9].value.create_scope));
        create->set_is_if_not_exists((yystack_[6].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2779 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 260:
#line 2936 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[2].location,
        "Syntax error: CREATE EXTERNAL TABLE FUNCTION is not supported");
      }
#line 2789 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 261:
#line 2948 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create =
          MAKE_NODE(ASTCreateIndexStatement, yylhs.location,
              {(yystack_[8].value.expression), (yystack_[6].value.expression), (yystack_[5].value.node), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[14].value.boolean));
        create->set_is_unique((yystack_[13].value.boolean));
        create->set_is_if_not_exists((yystack_[9].value.boolean));
        create->set_is_search((yystack_[11].value.boolean));
        create->set_spanner_is_null_filtered((yystack_[12].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2805 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 262:
#line 2964 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create = MAKE_NODE(ASTCreateSchemaStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[5].value.boolean));
        create->set_is_if_not_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2816 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 263:
#line 2975 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateSnapshotTableStatement, yylhs.location, {(yystack_[3].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_if_not_exists((yystack_[4].value.boolean));
        create->set_is_or_replace((yystack_[7].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2828 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 264:
#line 2993 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[5].value.node) == nullptr) {
            // Missing function argument list.
            YYERROR_AND_ABORT_AT(yystack_[5].location, "Syntax error: Expected (");
        }
        if ((yystack_[4].value.node) != nullptr  &&
            (yystack_[4].value.node)->node_kind() != zetasql::AST_TVF_SCHEMA) {
          YYERROR_AND_ABORT_AT(yystack_[4].location, "Syntax error: Expected keyword TABLE");
        }
        // Build the create table function statement.
        auto* fn_decl = MAKE_NODE(ASTFunctionDeclaration, yystack_[6].location, yystack_[5].location, {(yystack_[6].value.expression), (yystack_[5].value.node)});
        auto* create = MAKE_NODE(ASTCreateTableFunctionStatement, yylhs.location,
                                 {fn_decl, (yystack_[4].value.node), (yystack_[2].value.node), (yystack_[1].value.identifier), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[11].value.boolean));
        create->set_scope((yystack_[10].value.create_scope));
        create->set_is_if_not_exists((yystack_[7].value.boolean));
        create->set_sql_security((yystack_[3].value.sql_security));
        (yylhs.value.node) = create;
      }
#line 2852 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 265:
#line 3026 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTCreateStatement* create =
            MAKE_NODE(ASTCreateTableStatement, yylhs.location, {
              (yystack_[11].value.expression),
              (yystack_[10].value.node),
              (yystack_[8].value.node),
              (yystack_[9].value.node),
              (yystack_[7].value.node),
              (yystack_[6].value.node),
              (yystack_[5].value.node),
              (yystack_[4].value.node),
              (yystack_[3].value.node),
              (yystack_[2].value.node),
              (yystack_[1].value.node),
              (yystack_[0].value.node),
            });
        create->set_is_or_replace((yystack_[15].value.boolean));
        create->set_scope((yystack_[14].value.create_scope));
        create->set_is_if_not_exists((yystack_[12].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2878 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 266:
#line 3050 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           {  // INTO to mean append, which is consistent with INSERT INTO
      (yylhs.value.insertion_mode) = zetasql::ASTAuxLoadDataStatement::InsertionMode::APPEND;
    }
#line 2886 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 267:
#line 3053 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  {
      (yylhs.value.insertion_mode) = zetasql::ASTAuxLoadDataStatement::InsertionMode::OVERWRITE;
    }
#line 2894 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 268:
#line 3060 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAuxLoadDataFromFilesOptionsList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2902 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 269:
#line 3074 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTAuxLoadDataStatement* statement =
            MAKE_NODE(
                ASTAuxLoadDataStatement, yylhs.location,
                {(yystack_[7].value.expression), (yystack_[6].value.node), (yystack_[5].value.node), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.external_table_with_clauses).with_partition_columns_clause,
                 (yystack_[0].value.external_table_with_clauses).with_connection_clause});
        statement->set_insertion_mode((yystack_[8].value.insertion_mode));
        (yylhs.value.node) = statement;
      }
#line 2916 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 270:
#line 3087 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        std::string entity_type(parser->GetInputText(yystack_[0].location));
        if (!parser->language_options().
                 GenericEntityTypeSupported(entity_type)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, absl::StrCat(
                               entity_type, " is not a supported object type"));
        }
        // It is by design that we don't want to support backtick quoted
        // entity type. Backtick is kept as part of entity type name, and will
        // be rejected by engine later.
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 2933 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 271:
#line 3103 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        std::string entity_type(parser->GetInputText(yystack_[0].location));
        if (!parser->language_options().
                 GenericSubEntityTypeSupported(entity_type)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, absl::StrCat(
                               entity_type,
                               " is not a supported nested object type"));
        }
        // It is by design that we don't want to support backtick quoted
        // entity type. Backtick is kept as part of entity type name, and will
        // be rejected by engine later.
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 2951 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 272:
#line 3120 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2959 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 273:
#line 3124 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2967 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 274:
#line 3131 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2975 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 275:
#line 3134 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 2981 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 276:
#line 3140 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(
            ASTCreateEntityStatement,
            yylhs.location,
            {
              (yystack_[4].value.node),
              (yystack_[2].value.expression),
              (yystack_[1].value.node),
              (yystack_[0].value.node)
            });
        node->set_is_or_replace((yystack_[5].value.boolean));
        node->set_is_if_not_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = node;
      }
#line 3000 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 277:
#line 3159 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTCreateStatement* create =
            MAKE_NODE(ASTCreateModelStatement, yylhs.location, {(yystack_[3].value.expression), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[7].value.boolean));
        create->set_scope((yystack_[6].value.create_scope));
        create->set_is_if_not_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = create;
      }
#line 3013 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 278:
#line 3170 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3019 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 279:
#line 3171 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3025 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 280:
#line 3176 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 3033 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 281:
#line 3180 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
          zetasql::FEATURE_SPANNER_LEGACY_DDL)) {
            YYERROR_AND_ABORT_AT(yystack_[0].location, "A table must define at least one "
              "column.");
        }
        (yylhs.value.node) = MAKE_NODE(ASTTableElementList, yylhs.location, {});
      }
#line 3046 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 282:
#line 3192 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableElementList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3054 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 283:
#line 3196 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 3062 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 284:
#line 3200 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 3070 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 285:
#line 3238 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3076 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 286:
#line 3239 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3082 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 287:
#line 3244 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* schema = parser->WithEndLocation(
            WithExtraChildren((yystack_[2].value.node), {(yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
        (yylhs.value.node) = MAKE_NODE(ASTColumnDefinition, yylhs.location, {(yystack_[3].value.identifier), schema});
      }
#line 3092 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 288:
#line 3253 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.generated_or_default_column_info).generated_column_info != nullptr) {
          (yylhs.value.node) = parser->WithEndLocation(
              WithExtraChildren((yystack_[2].value.node), {(yystack_[1].value.node), (yystack_[0].value.generated_or_default_column_info).generated_column_info,
                                     /*default_expression=*/nullptr}), yylhs.location);
        } else if ((yystack_[0].value.generated_or_default_column_info).default_expression != nullptr) {
          (yylhs.value.node) = parser->WithEndLocation(
              WithExtraChildren((yystack_[2].value.node), {(yystack_[1].value.node), /*generated_column_info=*/nullptr,
                                     (yystack_[0].value.generated_or_default_column_info).default_expression}), yylhs.location);
        } else {
          (yylhs.value.node) = parser->WithEndLocation(
              WithExtraChildren((yystack_[2].value.node), {(yystack_[1].value.node), /*generated_column_info=*/nullptr,
                                     /*default_expression=*/nullptr}), yylhs.location);
        }
      }
#line 3112 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 289:
#line 3269 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTInferredTypeColumnSchema, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3120 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 290:
#line 3276 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSimpleColumnSchema, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 3128 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 291:
#line 3281 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* id = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
        auto* path_expression = MAKE_NODE(ASTPathExpression, yylhs.location, {id});
        (yylhs.value.node) = MAKE_NODE(ASTSimpleColumnSchema, yylhs.location, {path_expression});
      }
#line 3138 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 292:
#line 3290 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTArrayColumnSchema, yylhs.location, {(yystack_[1].value.node)});
      }
#line 3146 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 293:
#line 3314 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* schema = parser->WithEndLocation(
            WithExtraChildren((yystack_[2].value.node), {(yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
        (yylhs.value.node) = MAKE_NODE(ASTStructColumnField, yylhs.location, {schema});
      }
#line 3156 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 294:
#line 3320 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructColumnField, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.node)});
      }
#line 3164 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 295:
#line 3327 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructColumnSchema, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3172 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 296:
#line 3331 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 3180 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 297:
#line 3340 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructColumnSchema, yylhs.location);
      }
#line 3188 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 298:
#line 3343 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[1].value.node); }
#line 3194 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 299:
#line 3347 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3200 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 300:
#line 3348 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3206 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 301:
#line 3349 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3212 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 302:
#line 3354 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = WithExtraChildren(parser->WithEndLocation((yystack_[1].value.node), yystack_[0].location), {(yystack_[0].value.node)});
    }
#line 3220 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 305:
#line 3365 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.stored_mode) = zetasql::ASTGeneratedColumnInfo::StoredMode::STORED_VOLATILE;
    }
#line 3228 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 306:
#line 3369 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.stored_mode) = zetasql::ASTGeneratedColumnInfo::StoredMode::STORED;
    }
#line 3236 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 307:
#line 3373 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.stored_mode) = zetasql::ASTGeneratedColumnInfo::StoredMode::NON_STORED;
    }
#line 3244 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 308:
#line 3380 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      auto* column = MAKE_NODE(ASTGeneratedColumnInfo, yylhs.location, {(yystack_[2].value.expression)});
      column->set_stored_mode((yystack_[0].value.stored_mode));
      (yylhs.value.node) = column;
    }
#line 3254 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 309:
#line 3389 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.boolean) = true;
    }
#line 3262 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 310:
#line 3393 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.boolean) = false;
    }
#line 3270 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 311:
#line 3400 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      if (parser->language_options().LanguageFeatureEnabled(
             zetasql::FEATURE_V_1_3_COLUMN_DEFAULT_VALUE)) {
        (yylhs.value.node) = (yystack_[0].value.expression);
      } else {
        YYERROR_AND_ABORT_AT(yystack_[0].location, "Column DEFAULT value is not supported.");
      }
    }
#line 3283 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 312:
#line 3412 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.boolean) = true;
    }
#line 3291 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 313:
#line 3416 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.boolean) = false;
    }
#line 3299 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 314:
#line 3423 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      if ((yystack_[0].value.boolean)) {
        YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: \"DEFAULT\" and \"GENERATED "
            "ALWAYS AS\" clauses must not be both provided for the column");
      }
      (yylhs.value.generated_or_default_column_info).generated_column_info =
          static_cast<zetasql::ASTGeneratedColumnInfo*>((yystack_[1].value.node));
      (yylhs.value.generated_or_default_column_info).default_expression = nullptr;
    }
#line 3313 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 315:
#line 3433 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      if ((yystack_[0].value.boolean)) {
        YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: \"DEFAULT\" and \"GENERATED "
            "ALWAYS AS\" clauses must not be both provided for the column");
      }
      (yylhs.value.generated_or_default_column_info).generated_column_info = nullptr;
      (yylhs.value.generated_or_default_column_info).default_expression = static_cast<zetasql::ASTExpression*>((yystack_[1].value.node));
    }
#line 3326 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 316:
#line 3442 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.generated_or_default_column_info).generated_column_info = nullptr;
      (yylhs.value.generated_or_default_column_info).default_expression = nullptr;
    }
#line 3335 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 317:
#line 3450 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[3].value.node), {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
    }
#line 3343 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 318:
#line 3457 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTPrimaryKeyColumnAttribute, yylhs.location, {});
    }
#line 3351 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 319:
#line 3464 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      auto* node = MAKE_NODE(ASTForeignKeyColumnAttribute, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.foreign_key_reference)});
      (yylhs.value.node) = parser->WithStartLocation(node, FirstNonEmptyLocation({yystack_[1].location, yystack_[0].location}));
    }
#line 3360 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 320:
#line 3472 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTHiddenColumnAttribute, yylhs.location, {});
    }
#line 3368 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 321:
#line 3479 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTNotNullColumnAttribute, yylhs.location, {});
    }
#line 3376 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 322:
#line 3485 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
  { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3382 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 323:
#line 3486 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3388 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 324:
#line 3487 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3394 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 325:
#line 3488 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3400 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 326:
#line 3509 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTColumnAttributeList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3408 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 327:
#line 3513 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 3416 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 328:
#line 3517 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* last = (yystack_[1].value.node)->mutable_child((yystack_[1].value.node)->num_children() - 1);
        if (last->node_kind() != zetasql::AST_FOREIGN_KEY_COLUMN_ATTRIBUTE
          && last->node_kind() != zetasql::AST_PRIMARY_KEY_COLUMN_ATTRIBUTE) {
          YYERROR_AND_ABORT_AT(yystack_[0].location,
              "Syntax error: Unexpected constraint enforcement clause");
        }
        // Update the node's location to include constraint_enforcement.
        last = parser->WithEndLocation(last, yylhs.location);
        if (last->node_kind() == zetasql::AST_FOREIGN_KEY_COLUMN_ATTRIBUTE) {
          int index = last->find_child_index(
              zetasql::AST_FOREIGN_KEY_REFERENCE);
          if (index == -1) {
            YYERROR_AND_ABORT_AT(yystack_[0].location,
                "Internal Error: Expected foreign key reference");
          }
          zetasql::ASTForeignKeyReference* reference =
              last->mutable_child(index)
                  ->GetAsOrDie<zetasql::ASTForeignKeyReference>();
          reference->set_enforced((yystack_[0].value.boolean));
        } else {
          zetasql::ASTPrimaryKeyColumnAttribute* primary_key =
              last->GetAsOrDie<zetasql::ASTPrimaryKeyColumnAttribute>();
          primary_key->set_enforced((yystack_[0].value.boolean));
        }
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 3448 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 329:
#line 3547 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3454 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 330:
#line 3548 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3460 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 331:
#line 3553 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTColumnAttributeList, yylhs.location, {(yystack_[0].value.node)});
    }
#line 3468 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 332:
#line 3556 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  { (yylhs.value.node) = nullptr; }
#line 3474 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 333:
#line 3561 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* pos = MAKE_NODE(ASTColumnPosition, yylhs.location, {(yystack_[0].value.identifier)});
        pos->set_type(zetasql::ASTColumnPosition::PRECEDING);
        (yylhs.value.node) = pos;
      }
#line 3484 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 334:
#line 3567 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* pos = MAKE_NODE(ASTColumnPosition, yylhs.location, {(yystack_[0].value.identifier)});
        pos->set_type(zetasql::ASTColumnPosition::FOLLOWING);
        (yylhs.value.node) = pos;
      }
#line 3494 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 335:
#line 3575 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3500 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 336:
#line 3576 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3506 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 337:
#line 3581 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 3514 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 338:
#line 3587 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 3520 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 339:
#line 3588 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.expression) = nullptr; }
#line 3526 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 340:
#line 3593 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTCheckConstraint, yylhs.location, {(yystack_[3].value.expression), (yystack_[0].value.node)});
        node->set_is_enforced((yystack_[1].value.boolean));
        (yylhs.value.node) = node;
      }
#line 3536 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 341:
#line 3600 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTForeignKeyReference* foreign_key_ref = (yystack_[2].value.foreign_key_reference);
        foreign_key_ref->set_enforced((yystack_[1].value.boolean));
        (yylhs.value.node) = MAKE_NODE(ASTForeignKey, yylhs.location, {(yystack_[3].value.node), (yystack_[2].value.foreign_key_reference), (yystack_[0].value.node)});
      }
#line 3546 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 342:
#line 3609 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_4_ORDERED_PRIMARY_KEYS)) {
          if ((yystack_[1].value.ordering_spec) != zetasql::ASTOrderingExpression::UNSPECIFIED
              || (yystack_[0].value.node) != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
              "Ordering for primary keys is not supported");
          }
        }
        auto* node = MAKE_NODE(ASTPrimaryKeyElement, yylhs.location, {
          (yystack_[2].value.identifier),
          (yystack_[0].value.node),
        });
        node->set_ordering_spec((yystack_[1].value.ordering_spec));
        (yylhs.value.node) = node;
      }
#line 3567 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 343:
#line 3629 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPrimaryKeyElementList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3575 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 344:
#line 3633 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 3583 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 345:
#line 3640 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 3591 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 346:
#line 3643 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.node) = nullptr; }
#line 3597 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 347:
#line 3649 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      zetasql::ASTPrimaryKey* node = MAKE_NODE(ASTPrimaryKey, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
      node->set_enforced((yystack_[1].value.boolean));
      (yylhs.value.node) = node;
    }
#line 3607 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 348:
#line 3657 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3613 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 349:
#line 3658 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3619 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 350:
#line 3664 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3625 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 351:
#line 3665 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3631 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 352:
#line 3667 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = (yystack_[0].value.node);
        absl::string_view constraint = parser->GetInputText(yystack_[2].location);
        if (!zetasql_base::CaseEqual(constraint, "CONSTRAINT")) {
          if (node->node_kind() == zetasql::AST_CHECK_CONSTRAINT) {
            YYERROR_AND_ABORT_AT(
              yystack_[2].location,
              "Syntax error: Expected CONSTRAINT for check constraint "
              "definition. Check constraints on columns are not supported. "
              "Define check constraints as table elements instead");
          } else if (node->node_kind() == zetasql::AST_FOREIGN_KEY) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
              "Syntax error: Expected CONSTRAINT for foreign key definition");
          } else {
            YYERROR_AND_ABORT_AT(yylhs.location,
              "Syntax error: Unkown table constraint type");
          }
        }
        node->AddChild((yystack_[1].value.identifier));
        (yylhs.value.node) = parser->WithLocation(node, yylhs.location);
      }
#line 3657 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 353:
#line 3695 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* reference = MAKE_NODE(ASTForeignKeyReference, yylhs.location, {(yystack_[3].value.expression), (yystack_[2].value.node), (yystack_[0].value.node)});
        reference->set_match((yystack_[1].value.foreign_key_match));
        (yylhs.value.foreign_key_reference) = reference;
      }
#line 3667 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 354:
#line 3703 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                   { (yylhs.value.foreign_key_match) = (yystack_[0].value.foreign_key_match); }
#line 3673 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 355:
#line 3704 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.foreign_key_match) = zetasql::ASTForeignKeyReference::SIMPLE; }
#line 3679 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 356:
#line 3708 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
             { (yylhs.value.foreign_key_match) = zetasql::ASTForeignKeyReference::SIMPLE; }
#line 3685 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 357:
#line 3709 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
             { (yylhs.value.foreign_key_match) = zetasql::ASTForeignKeyReference::FULL; }
#line 3691 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 358:
#line 3710 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                               {
      (yylhs.value.foreign_key_match) = zetasql::ASTForeignKeyReference::NOT_DISTINCT;
    }
#line 3699 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 359:
#line 3717 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* actions = MAKE_NODE(ASTForeignKeyActions, yylhs.location, {});
        actions->set_update_action((yystack_[1].value.foreign_key_action));
        actions->set_delete_action((yystack_[0].value.foreign_key_action));
        (yylhs.value.node) = actions;
      }
#line 3710 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 360:
#line 3724 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* actions = MAKE_NODE(ASTForeignKeyActions, yylhs.location, {});
        actions->set_delete_action((yystack_[1].value.foreign_key_action));
        actions->set_update_action((yystack_[0].value.foreign_key_action));
        (yylhs.value.node) = actions;
      }
#line 3721 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 361:
#line 3731 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTForeignKeyActions, yylhs.location, {});
      }
#line 3729 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 362:
#line 3737 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.foreign_key_action) = (yystack_[0].value.foreign_key_action); }
#line 3735 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 363:
#line 3738 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::NO_ACTION; }
#line 3741 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 364:
#line 3742 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.foreign_key_action) = (yystack_[0].value.foreign_key_action); }
#line 3747 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 365:
#line 3743 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::NO_ACTION; }
#line 3753 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 366:
#line 3747 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                     { (yylhs.value.foreign_key_action) = (yystack_[0].value.foreign_key_action); }
#line 3759 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 367:
#line 3751 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                     { (yylhs.value.foreign_key_action) = (yystack_[0].value.foreign_key_action); }
#line 3765 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 368:
#line 3755 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::NO_ACTION; }
#line 3771 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 369:
#line 3756 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                 { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::RESTRICT; }
#line 3777 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 370:
#line 3757 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::CASCADE; }
#line 3783 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 371:
#line 3758 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                   { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::SET_NULL; }
#line 3789 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 372:
#line 3762 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                            { (yylhs.value.node) = (yystack_[0].value.identifier); }
#line 3795 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 373:
#line 3763 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3801 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 374:
#line 3767 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.boolean) = (yystack_[0].value.boolean); }
#line 3807 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 375:
#line 3768 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = true; }
#line 3813 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 376:
#line 3772 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.boolean) = true; }
#line 3819 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 377:
#line 3773 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                       { (yylhs.value.boolean) = false; }
#line 3825 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 378:
#line 3780 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.table_or_table_function_keywords) = TableOrTableFunctionKeywords::kTableAndFunctionKeywords;
      }
#line 3833 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 379:
#line 3784 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.table_or_table_function_keywords) = TableOrTableFunctionKeywords::kTableKeyword;
      }
#line 3841 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 380:
#line 3791 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFSchemaColumn, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.node)});
      }
#line 3849 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 381:
#line 3795 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFSchemaColumn, yylhs.location, {nullptr, (yystack_[0].value.node)});
      }
#line 3857 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 382:
#line 3802 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create = MAKE_NODE(ASTTVFSchema, yylhs.location, {(yystack_[0].value.node)});
        (yylhs.value.node) = create;
      }
#line 3866 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 383:
#line 3807 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 3874 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 384:
#line 3814 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 3882 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 385:
#line 3819 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                           { (yylhs.value.boolean) = true; }
#line 3888 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 386:
#line 3820 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  { (yylhs.value.boolean) = false; }
#line 3894 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 387:
#line 3828 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateViewStatement, yylhs.location, {(yystack_[4].value.expression), (yystack_[3].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[9].value.boolean));
        create->set_scope((yystack_[8].value.create_scope));
        create->set_recursive((yystack_[7].value.boolean));
        create->set_is_if_not_exists((yystack_[5].value.boolean));
        create->set_sql_security((yystack_[2].value.sql_security));
        (yylhs.value.node) = create;
      }
#line 3909 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 388:
#line 3843 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* create = MAKE_NODE(
          ASTCreateMaterializedViewStatement, yylhs.location, {(yystack_[6].value.expression), (yystack_[5].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[11].value.boolean));
        create->set_recursive((yystack_[9].value.boolean));
        create->set_scope(zetasql::ASTCreateStatement::DEFAULT_SCOPE);
        create->set_is_if_not_exists((yystack_[7].value.boolean));
        create->set_sql_security((yystack_[4].value.sql_security));
        (yylhs.value.node) = create;
      }
#line 3924 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 389:
#line 3856 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.node) = (yystack_[0].value.query); }
#line 3930 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 390:
#line 3859 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
             { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3936 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 391:
#line 3860 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3942 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 392:
#line 3864 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
             { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3948 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 393:
#line 3865 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                          { (yylhs.value.node) = (yystack_[0].value.expression); }
#line 3954 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 394:
#line 3866 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3960 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 395:
#line 3870 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                        { (yylhs.value.boolean) = true; }
#line 3966 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 396:
#line 3871 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = false; }
#line 3972 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 397:
#line 3876 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithStartLocation((yystack_[0].value.node), yylhs.location);
      }
#line 3980 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 398:
#line 3883 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescribeStatement, yylhs.location, {(yystack_[2].value.identifier), (yystack_[1].value.expression), (yystack_[0].value.expression)});
      }
#line 3988 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 399:
#line 3887 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescribeStatement, yylhs.location, {nullptr, (yystack_[1].value.expression), (yystack_[0].value.expression)});
      }
#line 3996 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 400:
#line 3894 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 4004 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 401:
#line 3897 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.expression) = nullptr; }
#line 4010 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 402:
#line 3902 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTExplainStatement, yylhs.location, {(yystack_[0].value.node)});
      }
#line 4018 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 403:
#line 3909 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTExportDataStatement, yylhs.location, {(yystack_[3].value.node), (yystack_[2].value.node), (yystack_[0].value.query)});
      }
#line 4026 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 404:
#line 3916 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTExportModelStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4034 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 405:
#line 3923 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGrantStatement, yylhs.location, {(yystack_[5].value.node), (yystack_[3].value.identifier), (yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 4042 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 406:
#line 3927 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGrantStatement, yylhs.location, {(yystack_[4].value.node), (yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 4050 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 407:
#line 3934 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRevokeStatement, yylhs.location, {(yystack_[5].value.node), (yystack_[3].value.identifier), (yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 4058 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 408:
#line 3938 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRevokeStatement, yylhs.location, {(yystack_[4].value.node), (yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 4066 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 409:
#line 3945 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPrivileges, yylhs.location, {});
      }
#line 4074 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 410:
#line 3949 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 4082 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 413:
#line 3961 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPrivileges, yylhs.location, {(yystack_[0].value.node)});
      }
#line 4090 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 414:
#line 3965 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 4098 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 415:
#line 3972 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPrivilege, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4106 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 416:
#line 3979 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.identifier);
      }
#line 4114 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 417:
#line 3983 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // The SELECT keyword is allowed to be a privilege name.
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 4123 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 418:
#line 3991 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRenameStatement, yylhs.location, {(yystack_[3].value.identifier), (yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 4131 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 419:
#line 3999 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* import = MAKE_NODE(ASTImportStatement, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        switch ((yystack_[3].value.import_type)) {
          case ImportType::kModule:
            import->set_import_kind(zetasql::ASTImportStatement::MODULE);
            break;
          case ImportType::kProto:
            import->set_import_kind(zetasql::ASTImportStatement::PROTO);
            break;
        }
        (yylhs.value.node) = import;
      }
#line 4148 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 420:
#line 4015 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTModuleStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 4156 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 421:
#line 4022 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTIndexItemList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 4164 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 422:
#line 4026 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 4172 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 423:
#line 4033 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* all_columns = MAKE_NODE(ASTIndexAllColumns, yylhs.location);
        all_columns->set_image("ALL COLUMNS");
        auto* ordering_expr =
            MAKE_NODE(ASTOrderingExpression, yylhs.location,
                      {all_columns, nullptr, nullptr});
        ordering_expr->set_ordering_spec(
                                zetasql::ASTOrderingExpression::UNSPECIFIED);
        (yylhs.value.node) = MAKE_NODE(ASTIndexItemList, yylhs.location, {ordering_expr});
      }
#line 4187 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 424:
#line 4046 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
    }
#line 4195 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 425:
#line 4050 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
    }
#line 4203 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 426:
#line 4057 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = MAKE_NODE(ASTIndexUnnestExpressionList, yylhs.location, {(yystack_[0].value.node)});
     }
#line 4211 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 427:
#line 4062 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)});
     }
#line 4219 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 428:
#line 4068 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
   { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4225 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 429:
#line 4069 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4231 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 430:
#line 4074 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTIndexStoringExpressionList, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 4239 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 431:
#line 4078 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 4247 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 432:
#line 4085 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4255 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 433:
#line 4091 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                          {
    (yylhs.value.node) = (yystack_[0].value.node);
  }
#line 4263 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 434:
#line 4097 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
   { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4269 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 435:
#line 4098 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                   { (yylhs.value.node) = nullptr; }
#line 4275 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 436:
#line 4103 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTColumnList, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 4283 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 437:
#line 4107 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.identifier)});
      }
#line 4291 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 438:
#line 4114 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4299 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 439:
#line 4120 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4305 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 440:
#line 4121 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4311 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 441:
#line 4126 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGranteeList, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 4319 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 442:
#line 4130 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)}), yylhs.location);
      }
#line 4327 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 443:
#line 4137 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGranteeList, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 4335 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 444:
#line 4141 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 4343 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 445:
#line 4148 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4351 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 446:
#line 4152 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGranteeList, yylhs.location, {});
      }
#line 4359 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 447:
#line 4159 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTShowStatement, yylhs.location, {(yystack_[2].value.identifier), (yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 4367 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 448:
#line 4166 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.identifier) = parser->MakeIdentifier(yylhs.location, "MATERIALIZED VIEWS");
    }
#line 4375 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 449:
#line 4170 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.identifier) = (yystack_[0].value.identifier);
    }
#line 4383 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 450:
#line 4177 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 4391 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 451:
#line 4180 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4397 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 452:
#line 4185 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 4405 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 453:
#line 4188 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4411 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 454:
#line 4193 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 4419 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 455:
#line 4196 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4425 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 456:
#line 4201 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 4433 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 457:
#line 4204 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4439 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 458:
#line 4209 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
          { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kAll; }
#line 4445 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 459:
#line 4210 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                 { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kDistinct; }
#line 4451 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 460:
#line 4217 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.set_operation_type) = zetasql::ASTSetOperation::UNION;
      }
#line 4459 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 461:
#line 4221 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.set_operation_type) = zetasql::ASTSetOperation::EXCEPT;
      }
#line 4467 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 462:
#line 4225 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.set_operation_type) = zetasql::ASTSetOperation::INTERSECT;
      }
#line 4475 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 463:
#line 4232 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4481 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 464:
#line 4233 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4487 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 465:
#line 4244 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4493 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 466:
#line 4245 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4499 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 467:
#line 4255 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.query) = MAKE_NODE(ASTQuery, yylhs.location, {(yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4507 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 468:
#line 4259 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // TODO: Consider pointing the error location at the comma
        // instead of at the SELECT.
        YYERROR_AND_ABORT_AT(yystack_[0].location,
                             "Syntax error: Trailing comma after the WITH "
                             "clause before the SELECT clause is not allowed");
      }
#line 4519 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 469:
#line 4268 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.query) = MAKE_NODE(ASTQuery, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4527 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 470:
#line 4282 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTQuery, yylhs.location, {(yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4535 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 471:
#line 4286 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // TODO: Consider pointing the error location at the comma
        // instead of at the SELECT.
        YYERROR_AND_ABORT_AT(yystack_[0].location,
                             "Syntax error: Trailing comma after the WITH "
                             "clause before the SELECT clause is not allowed");
      }
#line 4547 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 472:
#line 4295 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTQuery, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4555 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 473:
#line 4311 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* set_op = MAKE_NODE(ASTSetOperation, yylhs.location, {(yystack_[2].value.node), (yystack_[4].value.node), (yystack_[0].value.node)});
        set_op->set_op_type((yystack_[3].value.set_operation_type));
        set_op->set_distinct((yystack_[1].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct);
        (yylhs.value.query_set_operation) = set_op;
      }
#line 4566 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 474:
#line 4319 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTSetOperation* set_op = (yystack_[4].value.query_set_operation);
        if (set_op->op_type() != (yystack_[3].value.set_operation_type) ||
            set_op->distinct() != ((yystack_[1].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct)) {
          YYERROR_AND_ABORT_AT(
              yystack_[3].location,
              "Syntax error: Different set operations cannot be used in the "
              "same query without using parentheses for grouping");
        }
        if (/*hint*/(yystack_[2].value.node)) {
          YYERROR_AND_ABORT_AT(
              yystack_[2].location,
              "Syntax error: Hints on set operations must appear on the first "
              " operation.");
        }
        (yylhs.value.query_set_operation) = WithExtraChildren(set_op, {(yystack_[0].value.node)});
      }
#line 4588 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 475:
#line 4341 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.query_set_operation), yylhs.location);
     }
#line 4596 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 476:
#line 4356 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* set_op = MAKE_NODE(ASTSetOperation, yylhs.location, {(yystack_[3].value.node), (yystack_[0].value.node)});
        set_op->set_op_type((yystack_[2].value.set_operation_type));
        set_op->set_distinct((yystack_[1].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct);
        (yylhs.value.query_set_operation) = set_op;
      }
#line 4607 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 477:
#line 4364 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTSetOperation* set_op = (yystack_[3].value.query_set_operation);
        if (set_op->op_type() != (yystack_[2].value.set_operation_type) ||
            set_op->distinct() != ((yystack_[1].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct)) {
          YYERROR_AND_ABORT_AT(
              yystack_[2].location,
              "Syntax error: Different set operations cannot be used in the "
              "same query without using parentheses for grouping");
        }
        (yylhs.value.query_set_operation) = WithExtraChildren(set_op, {(yystack_[0].value.node)});
      }
#line 4623 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 478:
#line 4385 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.query_set_operation), yylhs.location);
     }
#line 4631 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 479:
#line 4392 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4637 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 480:
#line 4394 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTQuery* query = (yystack_[1].value.query);
        query->set_parenthesized(true);
        (yylhs.value.node) = query;
      }
#line 4647 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 481:
#line 4409 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4653 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 482:
#line 4411 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.expression)->node_kind() != zetasql::AST_EXPRESSION_SUBQUERY) {
          // We could give an error at the end of the expression, because that's
          // where the context turns the expression into an argument of a
          // relational set operator. However, there are cases where this is
          // triggered where the following token really can't be recognized by
          // the user as a relational operator, even though it does force the
          // interpretation to be "query". So we point at the beginning of the
          // expression instead, to be on the safe side.
          // TODO: This is not ideal. Make a better error message.
          YYERROR_AND_ABORT_AT(
              yylhs.location,
              "Syntax error: Parenthesized expression cannot be parsed as an "
              "expression, struct constructor, or subquery");
        }
        zetasql::ASTQuery* query =
            (yystack_[0].value.expression)->GetAsOrDie<zetasql::ASTExpressionSubquery>()
              ->GetMutableQueryChildInternal();
        if (query == nullptr) {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Internal error: expected query as child of subquery");
        }
        query->set_parenthesized(true);
        (yylhs.value.node) = query;
      }
#line 4684 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 483:
#line 4444 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* select =
            MAKE_NODE(ASTSelect, yylhs.location, {(yystack_[6].value.node), (yystack_[5].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.clauses_following_from).where, (yystack_[0].value.clauses_following_from).group_by,
                                      (yystack_[0].value.clauses_following_from).having, (yystack_[0].value.clauses_following_from).qualify, (yystack_[0].value.clauses_following_from).window});
        select->set_distinct((yystack_[4].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct);
        (yylhs.value.node) = select;
      }
#line 4696 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 484:
#line 4455 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: SELECT list must not be empty");
      }
#line 4706 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 485:
#line 4464 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.node);
      if ((yylhs.value.node) == nullptr ) {
        // Since WITH ANONYMIZATION is present but there was no options list
        // specified, we indicate the presence of WITH ANONYMIZATION by
        // returning an empty options list.
        (yylhs.value.node) = MAKE_NODE(ASTOptionsList, yylhs.location);
      }
    }
#line 4720 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 486:
#line 4473 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4726 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 487:
#line 4480 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
         auto* select_as = MAKE_NODE(ASTSelectAs, yylhs.location);
         select_as->set_as_mode(zetasql::ASTSelectAs::STRUCT);
         (yylhs.value.node) = select_as;
      }
#line 4736 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 488:
#line 4486 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // "VALUE" is a valid identifier, so it can be a valid path expression.
        // But AS VALUE has a special meaning as a SELECT statement mode. We
        // handle it here, but only when VALUE is used without backquotes. With
        // backquotes the `VALUE` is treated like a regular path expression.
        bool is_value = false;
        if ((yystack_[0].value.expression)->num_children() == 1) {
          if (zetasql_base::CaseEqual(parser->GetInputText(yystack_[0].location), "VALUE")) {
            auto* select_as = MAKE_NODE(ASTSelectAs, yylhs.location);
            select_as->set_as_mode(zetasql::ASTSelectAs::VALUE);
            (yylhs.value.node) = select_as;
            is_value = true;
          }
        }
        if (!is_value) {
          auto* select_as = MAKE_NODE(ASTSelectAs, yylhs.location, {(yystack_[0].value.expression)});
          select_as->set_as_mode(zetasql::ASTSelectAs::TYPE_NAME);
          (yylhs.value.node) = select_as;
        }
      }
#line 4761 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 489:
#line 4506 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4767 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 493:
#line 4516 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.identifier) = (yystack_[0].value.identifier); }
#line 4773 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 494:
#line 4518 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 4781 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 495:
#line 4525 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHintEntry, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.expression)});
      }
#line 4789 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 496:
#line 4529 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHintEntry, yylhs.location, {(yystack_[4].value.identifier), (yystack_[2].value.identifier), (yystack_[0].value.expression)});
      }
#line 4797 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 497:
#line 4536 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHint, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 4805 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 498:
#line 4540 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHint, yylhs.location, {(yystack_[0].value.node)});
      }
#line 4813 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 499:
#line 4544 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 4821 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 500:
#line 4551 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4829 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 501:
#line 4561 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHint, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 4837 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 502:
#line 4564 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4843 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 503:
#line 4569 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
          { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kAll; }
#line 4849 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 504:
#line 4570 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                 { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kDistinct; }
#line 4855 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 505:
#line 4571 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kNone; }
#line 4861 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 506:
#line 4576 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSelectList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 4869 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 507:
#line 4580 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 4877 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 508:
#line 4587 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
      }
#line 4885 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 509:
#line 4592 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4893 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 510:
#line 4599 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStarExceptList, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 4901 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 511:
#line 4603 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.identifier)});
      }
#line 4909 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 512:
#line 4610 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4917 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 513:
#line 4617 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStarReplaceItem, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
      }
#line 4925 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 514:
#line 4624 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStarModifiers, yylhs.location, {(yystack_[3].value.node), (yystack_[0].value.node)});
      }
#line 4933 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 515:
#line 4628 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = MAKE_NODE(ASTStarModifiers, yylhs.location, {(yystack_[0].value.node)});
     }
#line 4941 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 516:
#line 4632 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
     }
#line 4949 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 517:
#line 4639 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStarModifiers, yylhs.location, {(yystack_[0].value.node)});
      }
#line 4957 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 518:
#line 4643 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4965 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 519:
#line 4650 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 4973 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 520:
#line 4654 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* alias = MAKE_NODE(ASTAlias, yystack_[1].location, yystack_[0].location, {(yystack_[0].value.identifier)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {(yystack_[2].value.expression), alias});
      }
#line 4982 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 521:
#line 4659 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* alias = MAKE_NODE(ASTAlias, yystack_[0].location, {(yystack_[0].value.identifier)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {(yystack_[1].value.expression), alias});
      }
#line 4991 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 522:
#line 4664 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* dot_star = MAKE_NODE(ASTDotStar, yystack_[1].location, yystack_[0].location, {(yystack_[1].value.expression)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {dot_star});
      }
#line 5000 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 523:
#line 4669 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* dot_star_with_modifiers =
            MAKE_NODE(ASTDotStarWithModifiers, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {dot_star_with_modifiers});
      }
#line 5010 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 524:
#line 4675 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* star = MAKE_NODE(ASTStar, yylhs.location);
        star->set_image("*");
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {star});
      }
#line 5020 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 525:
#line 4681 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* star_with_modifiers = MAKE_NODE(ASTStarWithModifiers, yylhs.location, {(yystack_[0].value.node)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {star_with_modifiers});
      }
#line 5029 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 526:
#line 4689 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlias, FirstNonEmptyLocation({yystack_[1].location, yystack_[0].location}), yystack_[0].location, {(yystack_[0].value.identifier)});
      }
#line 5037 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 527:
#line 4692 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5043 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 528:
#line 4697 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 5051 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 529:
#line 4700 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5057 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 530:
#line 4705 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 5065 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 531:
#line 4709 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTIntoAlias, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 5073 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 532:
#line 4712 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5079 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 535:
#line 4722 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.boolean) = true; }
#line 5085 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 536:
#line 4723 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = false; }
#line 5091 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 539:
#line 4729 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 5097 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 540:
#line 4730 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 5103 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 541:
#line 4731 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 5109 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 542:
#line 4735 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTCastExpression, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.node), (yystack_[1].value.node)});
      }
#line 5117 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 543:
#line 4743 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 5123 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 544:
#line 4744 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 5129 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 545:
#line 4749 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRepeatableClause, yylhs.location, {(yystack_[1].value.expression)});
      }
#line 5137 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 546:
#line 4755 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 5143 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 547:
#line 4756 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 5149 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 548:
#line 4761 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.sample_size_unit) = zetasql::ASTSampleSize::ROWS; }
#line 5155 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 549:
#line 4762 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                { (yylhs.value.sample_size_unit) = zetasql::ASTSampleSize::PERCENT; }
#line 5161 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 550:
#line 4767 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* sample_size = MAKE_NODE(ASTSampleSize, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
        sample_size->set_unit((yystack_[1].value.sample_size_unit));
        (yylhs.value.node) = sample_size;
      }
#line 5171 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 551:
#line 4775 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5177 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 552:
#line 4776 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5183 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 553:
#line 4783 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSampleSuffix, yylhs.location, {nullptr, (yystack_[0].value.node)});
      }
#line 5191 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 554:
#line 4787 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* with_weight = MAKE_NODE(ASTWithWeight, yylhs.location, {});
        (yylhs.value.node) = MAKE_NODE(ASTSampleSuffix, yylhs.location, {with_weight, (yystack_[0].value.node)});
      }
#line 5200 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 555:
#line 4792 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* alias = MAKE_NODE(ASTAlias, yystack_[1].location, {(yystack_[1].value.identifier)});
        auto* with_weight = MAKE_NODE(ASTWithWeight, yylhs.location, {alias});
        (yylhs.value.node) = MAKE_NODE(ASTSampleSuffix, yylhs.location, {with_weight, (yystack_[0].value.node)});
      }
#line 5210 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 556:
#line 4798 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* alias = MAKE_NODE(ASTAlias, yystack_[2].location, yystack_[1].location, {(yystack_[1].value.identifier)});
        auto* with_weight = MAKE_NODE(ASTWithWeight, yylhs.location, {alias});
        (yylhs.value.node) = MAKE_NODE(ASTSampleSuffix, yylhs.location, {with_weight, (yystack_[0].value.node)});
      }
#line 5220 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 557:
#line 4803 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5226 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 558:
#line 4808 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSampleClause, yylhs.location, {(yystack_[4].value.identifier), (yystack_[2].value.node), (yystack_[0].value.node)});
      }
#line 5234 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 559:
#line 4814 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5240 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 560:
#line 4815 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5246 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 561:
#line 4819 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                          {
    (yylhs.value.node) = MAKE_NODE(ASTPivotExpression, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
  }
#line 5254 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 562:
#line 4825 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                   {
    (yylhs.value.node) = MAKE_NODE(ASTPivotExpressionList, yylhs.location, {(yystack_[0].value.node)});
  }
#line 5262 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 563:
#line 4828 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                               {
    (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
  }
#line 5270 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 564:
#line 4834 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                          {
    (yylhs.value.node) = MAKE_NODE(ASTPivotValue, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
  }
#line 5278 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 565:
#line 4839 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              {
    (yylhs.value.node) = MAKE_NODE(ASTPivotValueList, yylhs.location, {(yystack_[0].value.node)});
  }
#line 5286 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 566:
#line 4842 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                     {
    (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
  }
#line 5294 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 567:
#line 4848 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                      {
      if ((yystack_[7].value.node) == nullptr) {
        YYERROR_AND_ABORT_AT(yystack_[7].location,
        "PIVOT clause requires at least one pivot expression");
      }
      (yylhs.value.pivot_clause) = MAKE_NODE(ASTPivotClause, yylhs.location, {(yystack_[7].value.node), (yystack_[5].value.expression), (yystack_[2].value.node)});
  }
#line 5306 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 568:
#line 4857 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                       {
    (yylhs.value.node) = MAKE_NODE(ASTUnpivotInItemLabel, yylhs.location, {(yystack_[0].value.expression)});
  }
#line 5314 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 569:
#line 4860 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                          {
    (yylhs.value.node) = MAKE_NODE(ASTUnpivotInItemLabel, yylhs.location, {(yystack_[0].value.expression)})
  }
#line 5322 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 570:
#line 4863 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  { (yylhs.value.node) = nullptr; }
#line 5328 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 571:
#line 4867 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTPathExpressionList, yylhs.location, {(yystack_[0].value.expression)});
    }
#line 5336 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 572:
#line 4871 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)}), yylhs.location);
    }
#line 5344 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 573:
#line 4876 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                              {
   (yylhs.value.node) = (yystack_[1].value.node);
 }
#line 5352 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 574:
#line 4880 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                 {
   (yylhs.value.node) = MAKE_NODE(ASTPathExpressionList, yylhs.location, {(yystack_[0].value.expression)});
 }
#line 5360 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 575:
#line 4886 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPathExpressionList, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5368 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 576:
#line 4890 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 5376 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 577:
#line 4897 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 5384 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 578:
#line 4903 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5390 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 579:
#line 4904 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5396 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 580:
#line 4908 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                                {
    (yylhs.value.node) = MAKE_NODE(ASTUnpivotInItem, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
  }
#line 5404 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 581:
#line 4913 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                      {
    (yylhs.value.node) = MAKE_NODE(ASTUnpivotInItemList, yylhs.location, {(yystack_[0].value.node)});
  }
#line 5412 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 582:
#line 4916 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                    {
    (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
  }
#line 5420 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 583:
#line 4921 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                  {
    (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
  }
#line 5428 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 584:
#line 4926 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                      { (yylhs.value.opt_unpivot_nulls_filter) = zetasql::ASTUnpivotClause::kExclude; }
#line 5434 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 585:
#line 4927 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                        { (yylhs.value.opt_unpivot_nulls_filter) = zetasql::ASTUnpivotClause::kInclude; }
#line 5440 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 586:
#line 4928 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.opt_unpivot_nulls_filter) = zetasql::ASTUnpivotClause::kUnspecified; }
#line 5446 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 587:
#line 4934 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                       {
    auto* unpivot_clause = MAKE_NODE(ASTUnpivotClause, yylhs.location, {(yystack_[5].value.node), (yystack_[3].value.expression), (yystack_[1].value.node)});
    unpivot_clause->set_null_filter((yystack_[7].value.opt_unpivot_nulls_filter));
    (yylhs.value.unpivot_clause) = unpivot_clause;
   }
#line 5456 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 588:
#line 4953 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[0].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5466 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 589:
#line 4958 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[0].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5476 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 590:
#line 4963 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                              {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yystack_[3].location, {(yystack_[2].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = parser->WithEndLocation((yylhs.value.pivot_or_unpivot_clause_and_alias).alias, yystack_[2].location);
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = WithExtraChildren((yystack_[1].value.pivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5488 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 591:
#line 4970 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yystack_[3].location, {(yystack_[2].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = parser->WithEndLocation((yylhs.value.pivot_or_unpivot_clause_and_alias).alias, yystack_[2].location);
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = WithExtraChildren((yystack_[1].value.unpivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
  }
#line 5500 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 592:
#line 4977 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                               {
    YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "QUALIFY clause must be used in conjunction with WHERE or GROUP BY "
        "or HAVING clause");
  }
#line 5511 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 593:
#line 4983 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                         {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yystack_[2].location, {(yystack_[2].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = WithExtraChildren((yystack_[1].value.pivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5522 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 594:
#line 4989 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                           {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yystack_[2].location, {(yystack_[2].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = WithExtraChildren((yystack_[1].value.unpivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
  }
#line 5533 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 595:
#line 4995 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                          {
    YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "QUALIFY clause must be used in conjunction with WHERE or GROUP BY "
        "or HAVING clause");
  }
#line 5544 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 596:
#line 5001 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                              {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = WithExtraChildren((yystack_[1].value.pivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5555 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 597:
#line 5007 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = WithExtraChildren((yystack_[1].value.unpivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
  }
#line 5566 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 598:
#line 5013 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                               {
    YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "QUALIFY clause must be used in conjunction with WHERE or GROUP BY "
        "or HAVING clause");
  }
#line 5577 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 599:
#line 5019 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5587 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 600:
#line 5028 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTQuery* query = (yystack_[3].value.query);
        if ((yystack_[1].value.pivot_or_unpivot_clause_and_alias).pivot_clause != nullptr) {
          query->set_is_pivot_input(true);
        }
        query->set_is_nested(true);
        (yylhs.value.node) = MAKE_NODE(ASTTableSubquery, yylhs.location, {
            (yystack_[3].value.query), (yystack_[1].value.pivot_or_unpivot_clause_and_alias).alias, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).pivot_clause, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).unpivot_clause, (yystack_[0].value.node)});
      }
#line 5601 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 601:
#line 5042 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5609 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 602:
#line 5046 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5617 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 603:
#line 5053 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTModelClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5625 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 604:
#line 5060 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTConnectionClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5633 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 605:
#line 5067 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescriptorColumn, yylhs.location, {(yystack_[0].value.identifier), nullptr});
      }
#line 5641 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 606:
#line 5074 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescriptorColumnList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5649 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 607:
#line 5078 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 5657 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 608:
#line 5085 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescriptor, yylhs.location, {(yystack_[1].value.node)});
      }
#line 5665 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 609:
#line 5092 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5673 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 610:
#line 5096 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5681 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 611:
#line 5100 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5689 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 612:
#line 5104 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5697 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 613:
#line 5108 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5705 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 614:
#line 5112 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5713 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 615:
#line 5116 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[2].location,
            "Syntax error: Table arguments for table-valued function "
            "calls written as \"TABLE path\" must not be enclosed in "
            "parentheses. To fix this, replace (TABLE path) with TABLE path");
      }
#line 5725 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 616:
#line 5124 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[2].location,
            "Syntax error: Model arguments for table-valued function "
            "calls written as \"MODEL path\" must not be enclosed in "
            "parentheses. To fix this, replace (MODEL path) with MODEL path");
      }
#line 5737 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 617:
#line 5132 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[2].location,
            "Syntax error: Connection arguments for table-valued function "
            "calls written as \"CONNECTION path\" must not be enclosed in "
            "parentheses. To fix this, replace (CONNECTION path) with "
            "CONNECTION path");
      }
#line 5750 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 618:
#line 5141 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[2].location,
            "Syntax error: Named arguments for table-valued function "
            "calls written as \"name => value\" must not be enclosed in "
            "parentheses. To fix this, replace (name => value) with "
            "name => value");
      }
#line 5763 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 619:
#line 5150 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Each subquery argument for table-valued function "
            "calls must be enclosed in parentheses. To fix this, replace "
            "SELECT... with (SELECT...)");
      }
#line 5775 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 620:
#line 5158 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Each subquery argument for table-valued function "
            "calls must be enclosed in parentheses. To fix this, replace "
            "WITH... with (WITH...)");
      }
#line 5787 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 621:
#line 5169 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVF, yylhs.location, {(yystack_[1].value.expression)});
      }
#line 5795 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 622:
#line 5173 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* identifier = parser->MakeIdentifier(yystack_[1].location, parser->GetInputText(yystack_[1].location));
        auto* path_expression = MAKE_NODE(ASTPathExpression, yystack_[1].location, {identifier});
        (yylhs.value.node) = MAKE_NODE(ASTTVF, yylhs.location, {path_expression});
      }
#line 5805 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 623:
#line 5182 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)});
      }
#line 5813 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 624:
#line 5186 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 5821 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 625:
#line 5194 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren(parser->WithEndLocation((yystack_[4].value.node), yylhs.location), {
            (yystack_[2].value.node), (yystack_[1].value.pivot_or_unpivot_clause_and_alias).alias, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).pivot_clause, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).unpivot_clause, (yystack_[0].value.node)});
      }
#line 5830 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 626:
#line 5200 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren(parser->WithEndLocation((yystack_[4].value.node), yylhs.location), {
            (yystack_[2].value.node), (yystack_[1].value.pivot_or_unpivot_clause_and_alias).alias, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).pivot_clause, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).unpivot_clause, (yystack_[0].value.node)});
      }
#line 5839 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 627:
#line 5207 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5845 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 628:
#line 5208 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                              { (yylhs.value.node) = (yystack_[0].value.expression); }
#line 5851 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 629:
#line 5210 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Array element access is not allowed in the FROM "
            "clause without UNNEST; Use UNNEST(<expression>)");
      }
#line 5862 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 630:
#line 5217 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Generalized field access is not allowed in the FROM "
            "clause without UNNEST; Use UNNEST(<expression>)");
      }
#line 5873 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 631:
#line 5224 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Array element access is not allowed in the FROM "
            "clause without UNNEST; Use UNNEST(<expression>)");
      }
#line 5884 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 632:
#line 5231 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Generalized field access is not allowed in the FROM "
            "clause without UNNEST; Use UNNEST(<expression>)");
      }
#line 5895 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 633:
#line 5243 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ( (yystack_[2].value.node) != nullptr) {
          // We do not support combining PIVOT or UNPIVOT with WITH OFFSET.
          // If we did, we would want the WITH OFFSET clause to appear in the
          // grammar before PIVOT so that it operates on the pivot input.
          // However, putting it there results in reduce/reduce conflicts and,
          // even if there were a way to avoid such conflicts, the resultant
          // tree would be thrown out in the resolver later anyway, since we
          // don't support value-tables as PIVOT input.
          //
          // So, the simplest solution to avoid dealing with the above is to
          // put opt_with_offset_and_alias after PIVOT (so the right action
          // happens if we have a WITH OFFSET without PIVOT) and give an explicit
          // error if both clauses are present.
          if ((yystack_[3].value.pivot_or_unpivot_clause_and_alias).pivot_clause != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
              "PIVOT and WITH OFFSET cannot be combined");
          }
          if ((yystack_[3].value.pivot_or_unpivot_clause_and_alias).unpivot_clause != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
              "UNPIVOT and WITH OFFSET cannot be combined");
          }
        }

        if ((yystack_[1].value.node) != nullptr) {
          if ((yystack_[3].value.pivot_or_unpivot_clause_and_alias).pivot_clause != nullptr) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: PIVOT and FOR SYSTEM TIME AS OF "
                "may not be combined");
          }
          if ((yystack_[3].value.pivot_or_unpivot_clause_and_alias).unpivot_clause != nullptr) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: UNPIVOT and FOR SYSTEM TIME AS OF "
                "may not be combined");
          }
        }
        (yylhs.value.node) = MAKE_NODE(ASTTablePathExpression, yylhs.location, {(yystack_[5].value.node), (yystack_[4].value.node), (yystack_[3].value.pivot_or_unpivot_clause_and_alias).alias,
            (yystack_[3].value.pivot_or_unpivot_clause_and_alias).pivot_clause, (yystack_[3].value.pivot_or_unpivot_clause_and_alias).unpivot_clause, (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 5941 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 634:
#line 5286 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5947 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 635:
#line 5287 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5953 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 636:
#line 5289 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::TransformJoinExpression(
          (yystack_[2].value.node), parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = MAKE_NODE(ASTParenthesizedJoin, yylhs.location, {node, (yystack_[0].value.node)});
      }
#line 5968 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 637:
#line 5299 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5974 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 638:
#line 5304 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTForSystemTime, yylhs.location, {(yystack_[0].value.expression)})
      }
#line 5982 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 639:
#line 5308 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTForSystemTime, yylhs.location, {(yystack_[0].value.expression)})
      }
#line 5990 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 640:
#line 5312 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5996 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 641:
#line 5317 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOnClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6004 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 642:
#line 5324 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUsingClause, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 6012 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 643:
#line 5328 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.identifier)});
      }
#line 6020 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 644:
#line 5335 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 6028 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 645:
#line 5341 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6034 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 646:
#line 5343 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 6042 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 647:
#line 5350 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOnOrUsingClauseList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 6050 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 648:
#line 5354 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (parser->language_options().LanguageFeatureEnabled(
               zetasql::FEATURE_V_1_3_ALLOW_CONSECUTIVE_ON)) {
          (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)}), yylhs.location);
        } else {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              absl::StrCat(
                  "Syntax error: Expected end of input but got keyword ",
                  ((yystack_[0].value.node)->node_kind() == zetasql::AST_ON_CLAUSE
                       ? "ON" : "USING")));
        }
      }
#line 6068 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 649:
#line 5370 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6074 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 650:
#line 5371 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6080 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 651:
#line 5375 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
            { (yylhs.value.join_type) = zetasql::ASTJoin::CROSS; }
#line 6086 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 652:
#line 5376 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                       { (yylhs.value.join_type) = zetasql::ASTJoin::FULL; }
#line 6092 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 653:
#line 5377 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.join_type) = zetasql::ASTJoin::INNER; }
#line 6098 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 654:
#line 5378 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                       { (yylhs.value.join_type) = zetasql::ASTJoin::LEFT; }
#line 6104 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 655:
#line 5379 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                        { (yylhs.value.join_type) = zetasql::ASTJoin::RIGHT; }
#line 6110 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 656:
#line 5380 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                     { (yylhs.value.join_type) = zetasql::ASTJoin::DEFAULT_JOIN_TYPE; }
#line 6116 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 657:
#line 5385 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.join_hint) = zetasql::ASTJoin::HASH; }
#line 6122 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 658:
#line 5386 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.join_hint) = zetasql::ASTJoin::LOOKUP; }
#line 6128 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 659:
#line 5387 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.join_hint) = zetasql::ASTJoin::NO_JOIN_HINT; }
#line 6134 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 660:
#line 5390 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
            { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6140 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 661:
#line 5390 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                   { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6146 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 662:
#line 5402 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::JoinRuleAction(
            FirstNonEmptyLocation({yystack_[6].location, yystack_[5].location, yystack_[4].location, yystack_[3].location}), yylhs.location,
            (yystack_[7].value.node), (yystack_[6].value.boolean), (yystack_[5].value.join_type), (yystack_[4].value.join_hint), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node), parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = node;
      }
#line 6162 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 663:
#line 5416 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6168 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 664:
#line 5418 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::CommaJoinRuleAction(
            yystack_[1].location, yystack_[0].location, (yystack_[2].value.node), (yystack_[0].value.node), parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = node;
      }
#line 6183 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 665:
#line 5430 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // Give an error if we have a RIGHT or FULL JOIN following a comma
        // join since our left-to-right binding would violate the standard.
        // See (broken link).
        if (((yystack_[5].value.join_type) == zetasql::ASTJoin::FULL ||
             (yystack_[5].value.join_type) == zetasql::ASTJoin::RIGHT) &&
            (yystack_[7].value.node)->node_kind() == zetasql::AST_JOIN) {
          const auto* join_input = (yystack_[7].value.node)->GetAsOrDie<zetasql::ASTJoin>();
          while (true) {
            if (join_input->join_type() == zetasql::ASTJoin::COMMA) {
              YYERROR_AND_ABORT_AT(
                  yystack_[5].location,
                  absl::StrCat("Syntax error: ",
                               ((yystack_[5].value.join_type) == zetasql::ASTJoin::FULL
                                    ? "FULL" : "RIGHT"),
                               " JOIN must be parenthesized when following a "
                               "comma join.  Also, if the preceding comma join "
                               "is a correlated CROSS JOIN that unnests an "
                               "array, then CROSS JOIN syntax must be used in "
                               "place of the comma join"));
            }
            if (join_input->child(0)->node_kind() == zetasql::AST_JOIN) {
              // Look deeper only if the left input is an unparenthesized join.
              join_input =
                  join_input->child(0)->GetAsOrDie<zetasql::ASTJoin>();
            } else {
              break;
            }
          }
        }

        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::JoinRuleAction(
            FirstNonEmptyLocation({yystack_[6].location, yystack_[5].location, yystack_[4].location, yystack_[3].location}), yylhs.location,
            (yystack_[7].value.node), (yystack_[6].value.boolean), (yystack_[5].value.join_type), (yystack_[4].value.join_hint), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node),
            parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = node;
      }
#line 6230 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 666:
#line 5473 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location, "Query parameters cannot be used in place of table names");
      }
#line 6239 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 667:
#line 5478 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location, "Query parameters cannot be used in place of table names");
      }
#line 6248 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 668:
#line 5483 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location, "System variables cannot be used in place of table names");
      }
#line 6257 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 669:
#line 5491 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::TransformJoinExpression(
          (yystack_[0].value.node), parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = MAKE_NODE(ASTFromClause, yylhs.location, {node});
      }
#line 6272 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 670:
#line 5501 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6278 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 671:
#line 5517 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {(yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)};
      }
#line 6286 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 672:
#line 5521 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, (yystack_[0].value.clauses_following_from).group_by, (yystack_[0].value.clauses_following_from).having, (yystack_[0].value.clauses_following_from).qualify, (yystack_[0].value.clauses_following_from).window};
      }
#line 6294 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 673:
#line 5527 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)};
      }
#line 6302 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 674:
#line 5531 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, /*group_by=*/nullptr, (yystack_[0].value.clauses_following_from).having, (yystack_[0].value.clauses_following_from).qualify,
              (yystack_[0].value.clauses_following_from).window};
      }
#line 6311 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 675:
#line 5538 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, /*group_by=*/nullptr, (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)};
      }
#line 6319 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 676:
#line 5542 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, /*group_by=*/nullptr, /*having=*/nullptr,
              (yystack_[1].value.node), (yystack_[0].value.node)};
      }
#line 6328 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 677:
#line 5548 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                       { (yylhs.value.node) = MAKE_NODE(ASTWhereClause, yylhs.location, {(yystack_[0].value.expression)}); }
#line 6334 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 678:
#line 5551 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6340 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 679:
#line 5552 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6346 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 680:
#line 5557 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRollup, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6354 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 681:
#line 5561 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 6362 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 682:
#line 5568 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGroupingItem, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6370 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 683:
#line 5572 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGroupingItem, yylhs.location, {parser->WithEndLocation((yystack_[1].value.node), yylhs.location)});
      }
#line 6378 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 684:
#line 5579 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGroupBy, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
      }
#line 6386 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 685:
#line 5583 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 6394 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 686:
#line 5590 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
      }
#line 6402 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 687:
#line 5595 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6408 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 688:
#line 5596 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6414 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 689:
#line 5601 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHaving, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6422 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 690:
#line 5606 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6428 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 691:
#line 5607 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6434 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 692:
#line 5612 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWindowDefinition, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.node)});
      }
#line 6442 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 693:
#line 5619 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWindowClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 6450 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 694:
#line 5623 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 6458 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 695:
#line 5630 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
      }
#line 6466 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 696:
#line 5633 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6472 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 697:
#line 5637 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                              { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6478 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 698:
#line 5638 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                 { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6484 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 699:
#line 5639 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6490 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 700:
#line 5644 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
       if (!parser->language_options().LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_QUALIFY)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "QUALIFY is not supported");
        }
        (yylhs.value.node) = MAKE_NODE(ASTQualify, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6502 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 701:
#line 5654 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                           { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6508 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 702:
#line 5655 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                   { (yylhs.value.node) = nullptr; }
#line 6514 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 703:
#line 5659 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
       if (!parser->language_options().LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_QUALIFY)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "QUALIFY is not supported");
        }
        (yylhs.value.node) = MAKE_NODE(ASTQualify, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6526 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 704:
#line 5671 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTLimitOffset, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 6534 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 705:
#line 5675 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTLimitOffset, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6542 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 706:
#line 5678 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6548 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 707:
#line 5683 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* modifier = MAKE_NODE(ASTHavingModifier, yylhs.location, {(yystack_[0].value.expression)});
        modifier->set_modifier_kind(
            zetasql::ASTHavingModifier::ModifierKind::MAX);
        (yylhs.value.node) = modifier;
      }
#line 6559 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 708:
#line 5690 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* modifier = MAKE_NODE(ASTHavingModifier, yylhs.location, {(yystack_[0].value.expression)});
        modifier->set_modifier_kind(
            zetasql::ASTHavingModifier::ModifierKind::MIN);
        (yylhs.value.node) = modifier;
      }
#line 6570 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 709:
#line 5696 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6576 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 710:
#line 5701 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTClampedBetweenModifier, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)})
      }
#line 6584 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 711:
#line 5704 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6590 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 712:
#line 5709 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWithReportModifier, yylhs.location, {(yystack_[0].value.node)});
      }
#line 6598 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 713:
#line 5712 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6604 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 714:
#line 5716 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                 { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6610 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 715:
#line 5717 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6616 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 716:
#line 5722 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.null_handling_modifier) = zetasql::ASTFunctionCall::IGNORE_NULLS;
      }
#line 6624 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 717:
#line 5726 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.null_handling_modifier) = zetasql::ASTFunctionCall::RESPECT_NULLS;
      }
#line 6632 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 718:
#line 5730 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.null_handling_modifier) = zetasql::ASTFunctionCall::DEFAULT_NULL_HANDLING;
      }
#line 6640 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 719:
#line 5737 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWithClauseEntry, yylhs.location, {(yystack_[4].value.identifier), (yystack_[1].value.query)});
      }
#line 6648 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 720:
#line 5744 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWithClause, yylhs.location, {(yystack_[0].value.node)});
        (yylhs.value.node) = parser->WithEndLocation((yylhs.value.node), yylhs.location);
      }
#line 6657 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 721:
#line 5749 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTWithClause* with_clause =
            MAKE_NODE(ASTWithClause, yylhs.location, {(yystack_[0].value.node)})
        with_clause = parser->WithEndLocation(with_clause, yylhs.location);
        with_clause->set_recursive(true);
        (yylhs.value.node) = with_clause;
      }
#line 6669 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 722:
#line 5757 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 6677 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 723:
#line 5763 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6683 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 724:
#line 5764 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6689 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 725:
#line 5769 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 6697 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 726:
#line 5776 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
          { (yylhs.value.ordering_spec) = zetasql::ASTOrderingExpression::ASC; }
#line 6703 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 727:
#line 5777 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
             { (yylhs.value.ordering_spec) = zetasql::ASTOrderingExpression::DESC; }
#line 6709 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 728:
#line 5778 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.ordering_spec) = zetasql::ASTOrderingExpression::UNSPECIFIED; }
#line 6715 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 729:
#line 5783 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* null_order = MAKE_NODE(ASTNullOrder, yylhs.location, {});
        null_order->set_nulls_first(true);
        (yylhs.value.node) = null_order;
      }
#line 6725 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 730:
#line 5789 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* null_order = MAKE_NODE(ASTNullOrder, yylhs.location, {});
        null_order->set_nulls_first(false);
        (yylhs.value.node) = null_order;
      }
#line 6735 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 731:
#line 5794 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6741 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 732:
#line 5798 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6747 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 733:
#line 5799 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6753 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 734:
#line 5800 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6759 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 735:
#line 5804 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCollate, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6767 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 736:
#line 5809 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6773 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 737:
#line 5810 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6779 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 738:
#line 5815 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 6787 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 739:
#line 5818 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6793 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 740:
#line 5823 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* ordering_expr =
            MAKE_NODE(ASTOrderingExpression, yylhs.location, {(yystack_[3].value.expression), (yystack_[2].value.node), (yystack_[0].value.node)});
        ordering_expr->set_ordering_spec((yystack_[1].value.ordering_spec));
        (yylhs.value.node) = ordering_expr;
      }
#line 6804 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 741:
#line 5833 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOrderBy, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
      }
#line 6812 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 742:
#line 5837 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 6820 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 743:
#line 5844 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
      }
#line 6828 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 744:
#line 5847 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6834 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 745:
#line 5858 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTExpressionSubquery* subquery = (yystack_[0].value.expression_subquery);
        zetasql::ASTQuery* query =
            subquery->GetMutableQueryChildInternal();
        if (query == nullptr) {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Internal error: expected query child of subquery");
        }
        (yylhs.value.node) = query;
      }
#line 6850 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 746:
#line 5870 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[1].value.expression)->node_kind() == zetasql::AST_EXPRESSION_SUBQUERY) {
          auto* subquery = (yystack_[1].value.expression)->GetAsOrDie<zetasql::ASTExpressionSubquery>();
          if (subquery->modifier() ==
                  zetasql::ASTExpressionSubquery::Modifier::NONE) {
            // To match the JavaCC parser, we prefer interpretating IN ((query))
            // as IN (query) with a parenthesized query, not a value IN list
            // containing a scalar expression query.
            // Return the contained ASTQuery, wrapped in another ASTQuery to
            // replace the parentheses.
            zetasql::ASTQuery* query =
                subquery->GetMutableQueryChildInternal();
            if (query == nullptr) {
              YYERROR_AND_ABORT_AT(
                  yystack_[1].location,
                  "Internal error: expected query child of parenthesized"
                  " subquery");
            }
            query->set_parenthesized(true);
            (yylhs.value.node) = MAKE_NODE(ASTQuery, yystack_[1].location, {query});
          } else {
            // The expression subquery is an EXISTS or ARRAY subquery, which
            // is a scalar expression and is not interpreted as a Query.  Treat
            // this as an InList with a single element.
            // Don't include the parentheses in the location, to match the
            // JavaCC parser.
            (yylhs.value.node) = MAKE_NODE(ASTInList, yystack_[1].location, {(yystack_[1].value.expression)});
          }
        } else {
          // Don't include the parentheses in the location, to match the JavaCC
          // parser.
          (yylhs.value.node) = MAKE_NODE(ASTInList, yystack_[1].location, {(yystack_[1].value.expression)});
        }
      }
#line 6889 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 747:
#line 5905 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // Don't include the ")" in the location, to match the JavaCC parser.
        // TODO: Fix that.
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yystack_[1].location);
      }
#line 6899 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 748:
#line 5914 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // The JavaCC parser doesn't include the opening "(" in the location
        // for some reason. TODO: Correct this after JavaCC is gone.
        (yylhs.value.node) = MAKE_NODE(ASTInList, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 6909 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 749:
#line 5920 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 6917 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 750:
#line 5927 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUnnestExpression, yylhs.location, {(yystack_[1].value.expression)});
      }
#line 6925 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 751:
#line 5931 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "The argument to UNNEST is an expression, not a query; to use a query "
        "as an expression, the query must be wrapped with additional "
        "parentheses to make it a scalar subquery expression");
      }
#line 6937 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 752:
#line 5942 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUnnestExpressionWithOptAliasAndOffset, yylhs.location,
                       {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 6946 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 753:
#line 5950 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::EQ; }
#line 6952 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 754:
#line 5951 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::NE; }
#line 6958 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 755:
#line 5952 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::NE2; }
#line 6964 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 756:
#line 5953 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
          { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::LT; }
#line 6970 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 757:
#line 5954 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::LE; }
#line 6976 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 758:
#line 5955 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
          { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::GT; }
#line 6982 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 759:
#line 5956 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::GE; }
#line 6988 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 760:
#line 5959 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::PLUS; }
#line 6994 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 761:
#line 5960 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
          { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::MINUS; }
#line 7000 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 762:
#line 5964 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::MULTIPLY; }
#line 7006 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 763:
#line 5965 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
          { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::DIVIDE; }
#line 7012 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 764:
#line 5970 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
         { (yylhs.value.shift_operator) = ShiftOperator::kLeft; }
#line 7018 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 765:
#line 5971 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.shift_operator) = ShiftOperator::kRight; }
#line 7024 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 766:
#line 5976 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
             { (yylhs.value.import_type) = ImportType::kModule; }
#line 7030 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 767:
#line 5977 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.import_type) = ImportType::kProto; }
#line 7036 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 768:
#line 5983 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
       if (!parser->language_options().LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_LIKE_ANY_SOME_ALL)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "LIKE ANY is not supported");
        }
        auto* op =
            MAKE_NODE(ASTAnySomeAllOp, yylhs.location, {});
        op->set_op(zetasql::ASTAnySomeAllOp::kAny);
        (yylhs.value.node) = op;
      }
#line 7051 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 769:
#line 5994 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
       if (!parser->language_options().LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_LIKE_ANY_SOME_ALL)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "LIKE SOME is not supported");
        }
        auto* op =
            MAKE_NODE(ASTAnySomeAllOp, yylhs.location, {});
        op->set_op(zetasql::ASTAnySomeAllOp::kSome);
        (yylhs.value.node) = op;
      }
#line 7066 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 770:
#line 6005 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
       if (!parser->language_options().LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_LIKE_ANY_SOME_ALL)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "LIKE ALL is not supported");
        }
        auto* op =
            MAKE_NODE(ASTAnySomeAllOp, yylhs.location, {});
        op->set_op(zetasql::ASTAnySomeAllOp::kAll);
        (yylhs.value.node) = op;
      }
#line 7081 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 771:
#line 6019 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent; }
#line 7087 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 772:
#line 6021 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        yylhs.location = yystack_[0].location;  // Error messages should point at the "LIKE".
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent;
      }
#line 7096 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 773:
#line 6030 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent;
      }
#line 7104 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 774:
#line 6034 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        yylhs.location = yystack_[0].location;  // Error messages should point at the "BETWEEN".
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent;
      }
#line 7113 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 775:
#line 6042 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent;
      }
#line 7121 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 776:
#line 6046 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        yylhs.location = yystack_[1].location;  // Error messages should point at the "DISTINCT".
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent;
      }
#line 7130 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 777:
#line 6054 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
         { (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent; }
#line 7136 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 778:
#line 6056 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        yylhs.location = yystack_[0].location;  // Error messages should point at the "IN".
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent;
      }
#line 7145 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 779:
#line 6064 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
         { (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent; }
#line 7151 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 780:
#line 6065 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                 { (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent; }
#line 7157 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 781:
#line 6070 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.unary_op) = zetasql::ASTUnaryExpression::PLUS;
      }
#line 7165 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 782:
#line 6074 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.unary_op) = zetasql::ASTUnaryExpression::MINUS;
      }
#line 7173 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 783:
#line 6078 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.unary_op) = zetasql::ASTUnaryExpression::BITWISE_NOT;
      }
#line 7181 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 784:
#line 6085 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* alias = MAKE_NODE(ASTAlias, yystack_[2].location, yystack_[1].location, {(yystack_[2].value.identifier)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {(yystack_[0].value.expression), alias});
      }
#line 7190 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 785:
#line 6092 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSelectList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 7198 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 786:
#line 6097 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 7206 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 787:
#line 6104 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.expression) = MAKE_NODE(ASTWithExpression, yylhs.location, {(yystack_[3].value.node), (yystack_[1].value.expression)});
    }
#line 7214 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 788:
#line 6112 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7220 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 789:
#line 6113 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7226 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 790:
#line 6114 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7232 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 791:
#line 6115 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7238 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 792:
#line 6116 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7244 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 793:
#line 6117 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7250 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 794:
#line 6118 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7256 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 795:
#line 6119 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7262 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 796:
#line 6120 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7268 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 797:
#line 6121 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7274 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 798:
#line 6122 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7280 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 799:
#line 6123 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7286 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 800:
#line 6124 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7292 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 801:
#line 6125 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7298 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 802:
#line 6126 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7304 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 803:
#line 6127 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7310 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 804:
#line 6128 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7316 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 805:
#line 6129 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7322 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 806:
#line 6130 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7328 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 807:
#line 6131 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7334 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 808:
#line 6132 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7340 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 809:
#line 6133 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7346 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 810:
#line 6134 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7352 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 811:
#line 6135 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7358 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 812:
#line 6137 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // The path expression is extended by the "." identifier rule below.
        (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, {(yystack_[0].value.identifier)});

        // This could be a bare reference to a CURRENT_* date/time function.
        // Those functions can be called without arguments, but they should
        // still be parsed as function calls. We only parse them as such when
        // the identifiers are not backquoted, i.e., when they are used as
        // keywords. The backquoted versions are treated like regular
        // identifiers.
        // GetInputText() returns the backquotes if they are in the input.
        absl::string_view raw_input = parser->GetInputText(yystack_[0].location);
        // Quick check to filter out certain non-matches.
        if (zetasql_base::CaseEqual(raw_input.substr(0, 8), "current_")) {
          absl::string_view remainder = raw_input.substr(8);
          if (zetasql_base::CaseEqual(remainder, "time") ||
              zetasql_base::CaseEqual(remainder, "date") ||
              zetasql_base::CaseEqual(remainder, "datetime") ||
              zetasql_base::CaseEqual(remainder, "timestamp")) {
            auto* function_call = MAKE_NODE(ASTFunctionCall, yylhs.location, {(yylhs.value.expression)});
            function_call->set_is_current_date_time_without_parentheses(true);
            (yylhs.value.expression) = function_call;
          }
        }
      }
#line 7388 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 813:
#line 6162 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7394 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 814:
#line 6163 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7400 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 815:
#line 6165 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression_subquery);
      }
#line 7408 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 816:
#line 6169 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* bracket_loc = parser->MakeLocation(yystack_[2].location);
        (yylhs.value.expression) = MAKE_NODE(ASTArrayElement, yystack_[3].location, yystack_[0].location, {(yystack_[3].value.expression), bracket_loc, (yystack_[1].value.expression)});
      }
#line 7417 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 817:
#line 6174 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTDotGeneralizedField, yystack_[4].location, yystack_[0].location, {(yystack_[4].value.expression), (yystack_[1].value.expression)});
      }
#line 7425 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 818:
#line 6178 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // Note that if "expression" ends with an identifier, then the tokenizer
        // switches to IDENTIFIER_DOT mode before tokenizing $3. That means that
        // "identifier" here allows any non-reserved keyword to be used as an
        // identifier, as well as "identifiers" that start with a digit.

        // We try to build path expressions as long as identifiers are added.
        // As soon as a dotted path contains anything else, we use generalized
        // DotIdentifier.
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_PATH_EXPRESSION &&
            !(yystack_[2].value.expression)->parenthesized()) {
          (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
        } else {
          (yylhs.value.expression) = MAKE_NODE(ASTDotIdentifier, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
        }
      }
#line 7446 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 819:
#line 6195 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_OR_EXPR &&
            !(yystack_[2].value.expression)->parenthesized()) {
          // Embrace and extend $1's ASTNode.
          (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.expression)});
        } else {
          (yylhs.value.expression) = MAKE_NODE(ASTOrExpr, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        }
      }
#line 7460 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 820:
#line 6205 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_AND_EXPR &&
            !(yystack_[2].value.expression)->parenthesized()) {
          // Embrace and extend $1's ASTNode to flatten a series of ANDs.
          (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.expression)});
        } else {
          (yylhs.value.expression) = MAKE_NODE(ASTAndExpr, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        }
      }
#line 7474 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 821:
#line 6215 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* not_expr = MAKE_NODE(ASTUnaryExpression, yylhs.location, {(yystack_[0].value.expression)});
        not_expr->set_op(zetasql::ASTUnaryExpression::NOT);
        (yylhs.value.expression) = not_expr;
      }
#line 7484 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 822:
#line 6221 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          if ((yystack_[1].value.node)) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: HINTs cannot be specified on "
                                 "LIKE clause with UNNEST");
          }
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[4].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[3].location,
                                 "Syntax error: Expression to the left of LIKE "
                                 "must be parenthesized");
          }
          auto* like_location = parser->MakeLocation(yystack_[3].location);
          auto* like_expression = MAKE_NODE(ASTLikeExpression, yystack_[4].location, yystack_[0].location,
                                            {(yystack_[4].value.expression), like_location, (yystack_[2].value.node), (yystack_[0].value.node)});
          like_expression->set_is_not((yystack_[3].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = like_expression;
        }
#line 7508 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 823:
#line 6241 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[4].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[3].location,
                                "Syntax error: Expression to the left of LIKE "
                                "must be parenthesized");
          }
          auto* like_location = parser->MakeLocation(yystack_[3].location);
          zetasql::ASTLikeExpression* like_expression = nullptr;
          if ((yystack_[0].value.node)->node_kind() == zetasql::AST_QUERY) {
            like_expression = MAKE_NODE(ASTLikeExpression, yystack_[4].location, yystack_[0].location,
                                        {(yystack_[4].value.expression), like_location, (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
          } else {
            if((yystack_[1].value.node)) {
              YYERROR_AND_ABORT_AT(yystack_[1].location,
                                  "Syntax error: HINTs cannot be specified on "
                                  "LIKE clause with value list");
            }
            like_expression = MAKE_NODE(ASTLikeExpression, yystack_[4].location, yystack_[0].location,
                                        {(yystack_[4].value.expression), like_location, (yystack_[2].value.node), (yystack_[0].value.node)});
          }
          like_expression->set_is_not((yystack_[3].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = like_expression;
        }
#line 7538 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 824:
#line 6267 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          // NOT has lower precedence but can be parsed unparenthesized in the
          // rhs because it is not ambiguous. This is not allowed.
          if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
            YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
          }
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: "
                "Expression to the left of LIKE must be parenthesized");
          }
          auto* binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
          binary_expression->set_is_not((yystack_[1].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          binary_expression->set_op(zetasql::ASTBinaryExpression::LIKE);
          (yylhs.value.expression) = binary_expression;
        }
#line 7563 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 825:
#line 6288 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          if (!parser->language_options().LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_3_IS_DISTINCT)) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "IS DISTINCT FROM is not supported");
          }
          auto binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
              binary_expression->set_is_not((yystack_[1].value.not_keyword_presence) == NotKeywordPresence::kPresent);
              binary_expression->set_op(
                  zetasql::ASTBinaryExpression::DISTINCT);
          (yylhs.value.expression) = binary_expression;
        }
#line 7582 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 826:
#line 6303 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          if ((yystack_[1].value.node)) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: HINTs cannot be specified on "
                                 "IN clause with UNNEST");
          }
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[3].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
                                 "Syntax error: Expression to the left of IN "
                                 "must be parenthesized");
          }
          zetasql::ASTLocation* in_location = parser->MakeLocation(yystack_[2].location);
          auto* in_expression =
              MAKE_NODE(ASTInExpression, yystack_[3].location, yystack_[0].location, {(yystack_[3].value.expression), in_location, (yystack_[0].value.node)});
          in_expression->set_is_not((yystack_[2].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = in_expression;
        }
#line 7606 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 827:
#line 6323 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[3].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
                                "Syntax error: Expression to the left of IN "
                                "must be parenthesized");
          }
          zetasql::ASTInExpression* in_expression = nullptr;
          zetasql::ASTLocation* in_location = parser->MakeLocation(yystack_[2].location);
          if ((yystack_[0].value.node)->node_kind() == zetasql::AST_QUERY) {
            in_expression =
                MAKE_NODE(ASTInExpression, yystack_[3].location, yystack_[0].location, {(yystack_[3].value.expression), in_location, (yystack_[1].value.node), (yystack_[0].value.node)});
          } else {
            if((yystack_[1].value.node)) {
              YYERROR_AND_ABORT_AT(yystack_[1].location,
                                  "Syntax error: HINTs cannot be specified on "
                                  "IN clause with value list");
            }
            in_expression =
                MAKE_NODE(ASTInExpression, yystack_[3].location, yystack_[0].location, {(yystack_[3].value.expression), in_location, (yystack_[0].value.node)});
          }
          in_expression->set_is_not((yystack_[2].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = in_expression;
        }
#line 7636 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 828:
#line 6350 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[4].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[3].location,
                                 "Syntax error: Expression to the left of "
                                 "BETWEEN must be parenthesized");
          }
          // Test the middle operand for unparenthesized operators with lower
          // or equal precedence. These cases are unambiguous w.r.t. the
          // operator precedence parsing, but they are disallowed by the SQL
          // standard because it interprets precedence strictly, i.e., it allows
          // no nesting of operators with lower precedence even if it is
          // unambiguous.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
                                 "Syntax error: Expression in BETWEEN must be "
                                 "parenthesized");
          }
          // NOT has lower precedence but can be parsed unparenthesized in the
          // rhs because it is not ambiguous. This is not allowed.
          if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
            YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[2].location);
          }
          auto* between_loc = parser->MakeLocation(yystack_[3].location);
          auto* between_expression =
              MAKE_NODE(ASTBetweenExpression, yystack_[4].location, yystack_[0].location, {(yystack_[4].value.expression), between_loc, (yystack_[2].value.expression), (yystack_[0].value.expression)});
          between_expression->set_is_not((yystack_[3].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = between_expression;
        }
#line 7671 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 829:
#line 6381 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          // The Bison parser allows comparison expressions in the LHS, even
          // though these operators are at the same precedence level and are not
          // associative. Explicitly forbid this.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: Expression to the left of IS "
                                 "must be parenthesized");
          }
          auto* unary_expression = MAKE_NODE(ASTUnaryExpression, yylhs.location, {(yystack_[2].value.expression)});
          if ((yystack_[1].value.not_keyword_presence) == NotKeywordPresence::kPresent) {
            unary_expression->set_op(
              zetasql::ASTUnaryExpression::IS_NOT_UNKNOWN);
          }
          else {
            unary_expression->set_op(
              zetasql::ASTUnaryExpression::IS_UNKNOWN);
          }
          (yylhs.value.expression) = unary_expression;
        }
#line 7696 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 830:
#line 6402 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          // The Bison parser allows comparison expressions in the LHS, even
          // though these operators are at the same precedence level and are not
          // associative. Explicitly forbid this.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: Expression to the left of IS "
                                 "must be parenthesized");
          }
          auto* binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
          binary_expression->set_is_not((yystack_[1].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          binary_expression->set_op(zetasql::ASTBinaryExpression::IS);
          (yylhs.value.expression) = binary_expression;
        }
#line 7716 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 831:
#line 6418 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          // The Bison parser allows comparison expressions in the LHS, even
          // though these operators are at the same precedence level and are not
          // associative. Explicitly forbid this.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: Expression to the left of IS "
                                 "must be parenthesized");
          }
          auto* binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
          binary_expression->set_is_not((yystack_[1].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          binary_expression->set_op(zetasql::ASTBinaryExpression::IS);
          (yylhs.value.expression) = binary_expression;
        }
#line 7736 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 832:
#line 6434 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          // NOT has lower precedence but can be parsed unparenthesized in the
          // rhs because it is not ambiguous. This is not allowed. We don't have
          // to check for other expressions: other comparison expressions are
          // caught by the Bison grammar because "=" is %nonassoc, and AND and
          // OR will not be parsed as children of this rule because they have
          // lower precedence than "=".
          if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
            YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
          }
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: Expression to the left of "
                                 "comparison must be parenthesized");
          }
          auto* binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
          binary_expression->set_op((yystack_[1].value.binary_op));
          (yylhs.value.expression) = binary_expression;
        }
#line 7763 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 833:
#line 6457 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op(
            zetasql::ASTBinaryExpression::BITWISE_OR);
        (yylhs.value.expression) = binary_expression;
      }
#line 7782 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 834:
#line 6472 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op(
            zetasql::ASTBinaryExpression::BITWISE_XOR);
        (yylhs.value.expression) = binary_expression;
      }
#line 7801 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 835:
#line 6487 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op(
            zetasql::ASTBinaryExpression::BITWISE_AND);
        (yylhs.value.expression) = binary_expression;
      }
#line 7820 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 836:
#line 6502 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. However, this is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op(
            zetasql::ASTBinaryExpression::CONCAT_OP);
        (yylhs.value.expression) = binary_expression;
      }
#line 7839 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 837:
#line 6517 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* operator_location = parser->MakeLocation(yystack_[1].location);
        auto* binary_expression =
            MAKE_NODE(ASTBitwiseShiftExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), operator_location, (yystack_[0].value.expression)});
        binary_expression->set_is_left_shift((yystack_[1].value.shift_operator) == ShiftOperator::kLeft);
        (yylhs.value.expression) = binary_expression;
      }
#line 7858 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 838:
#line 6532 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op((yystack_[1].value.binary_op));
        (yylhs.value.expression) = binary_expression;
      }
#line 7876 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 839:
#line 6546 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op((yystack_[1].value.binary_op));
        (yylhs.value.expression) = binary_expression;
      }
#line 7894 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 840:
#line 6560 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* expression =
            MAKE_NODE(ASTUnaryExpression, yylhs.location, {(yystack_[0].value.expression)});
        expression->set_op((yystack_[1].value.unary_op));
        (yylhs.value.expression) = expression;
      }
#line 7912 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 841:
#line 6581 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 7920 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 842:
#line 6585 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
      }
#line 7928 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 843:
#line 6592 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // a - b
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        absl::string_view id1 = parser->GetInputText(yystack_[2].location);
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        if (id1[0] == '`' || id2[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts({{id1, "-", id2}});
        (yylhs.value.slashed_identifier) = out;
      }
#line 7947 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 844:
#line 6607 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // a-b - c
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[2].value.slashed_identifier)->release_path_parts();
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        if (id2[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        // Add an extra sub-part to the ending dashed identifier.
        prev.back().push_back("-");
        prev.back().push_back(id2);
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 7969 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 845:
#line 6625 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // a - 5
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        absl::string_view id1 = parser->GetInputText(yystack_[2].location);
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        if (id1[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts({{id1, "-", id2}});
        (yylhs.value.slashed_identifier) = out;
      }
#line 7988 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 846:
#line 6640 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // a-b - 5
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[2].value.slashed_identifier)->release_path_parts();
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        prev.back().push_back("-");
        prev.back().push_back(id2);
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 8006 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 847:
#line 6654 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // a - 1. b
        if (parser->HasWhitespace(yystack_[3].location, yystack_[2].location) || parser->HasWhitespace(yystack_[2].location, yystack_[1].location)) {
          YYERROR_AND_ABORT_AT(yystack_[2].location, "Syntax error: Unexpected \"-\"");
        }
        absl::string_view id1 = parser->GetInputText(yystack_[3].location);
        absl::string_view id2 = parser->GetInputText(yystack_[1].location);
        absl::string_view id3 = parser->GetInputText(yystack_[0].location);
        if (id1[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[2].location, "Syntax error: Unexpected \"-\"");
        }
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[3].location);
        // Here (and below) we need to handle the case where dot is lex'ed as
        // part of floating number as opposed to path delimiter. To parse it
        // correctly, we push the components separately (as string_view).
        // {{"a", "1"}, "b"}
        out->set_path_parts({{id1, "-", id2}, {id3}});
        (yylhs.value.slashed_identifier) = out;
      }
#line 8030 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 848:
#line 6674 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // a-b - 1. c
        if (parser->HasWhitespace(yystack_[3].location, yystack_[2].location) || parser->HasWhitespace(yystack_[2].location, yystack_[1].location)) {
          YYERROR_AND_ABORT_AT(yystack_[2].location, "Syntax error: Unexpected \"-\"");
        }
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[3].value.slashed_identifier)->release_path_parts();
        absl::string_view id1 = parser->GetInputText(yystack_[1].location);
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        // This case is a continuation of an existing dashed_identifier `prev`,
        // followed by what the lexer believes is a floating point literal.
        // here: /*prev=*/={{"a", "b"}}
        // we append "1" to complete the dashed components, followed
        // by the identifier ("c") as {{"c"}}.
        // Thus, we end up with {{"a", "b", "1"}, {"c"}}
        prev.back().push_back("-");
        prev.back().push_back(id1);
        prev.push_back({id2});
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[3].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 8056 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 849:
#line 6698 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        absl::StatusOr<std::vector<zetasql::ASTNode*>> path_parts =
          SeparatedIdentifierTmpNode::BuildPathParts(yystack_[0].location,
            std::move((yystack_[0].value.slashed_identifier)->release_path_parts()), parser);
        if (!path_parts.ok()) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, std::string(path_parts.status().message()));
        }
        (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, std::move(path_parts).value());
      }
#line 8070 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 850:
#line 6708 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
      }
#line 8078 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 851:
#line 6714 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8084 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 852:
#line 6716 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (parser->language_options().LanguageFeatureEnabled(
               zetasql::FEATURE_V_1_3_ALLOW_DASHES_IN_TABLE_NAME)) {
          (yylhs.value.expression) = (yystack_[0].value.expression);
        } else {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              absl::StrCat(
                "Syntax error: Table name contains '-' character. "
                "It needs to be quoted: ",
                zetasql::ToIdentifierLiteral(
                  parser->GetInputText(yystack_[0].location), false)));
        }
      }
#line 8103 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 853:
#line 6732 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                 { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8109 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 854:
#line 6734 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (parser->language_options().LanguageFeatureEnabled(
               zetasql::FEATURE_V_1_3_ALLOW_SLASH_PATHS)) {
          (yylhs.value.expression) = (yystack_[0].value.expression);
        } else {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              absl::StrCat(
                "Syntax error: Table name contains '/' character. "
                "It needs to be quoted: ",
                zetasql::ToIdentifierLiteral(
                  parser->GetInputText(yystack_[0].location), false)));
        }
      }
#line 8128 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 861:
#line 6761 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // Return an error if there is embedded whitespace.
        if (parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"/\"");
        }
        absl::string_view id = parser->GetInputText(yystack_[0].location);
        // Return an error if the identifier/literal is quoted.
        if (id[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"/\"");
        }
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[1].location);
        out->set_path_parts({{"/", id}});
        (yylhs.value.slashed_identifier) = out;
      }
#line 8147 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 862:
#line 6777 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        absl::string_view separator = parser->GetInputText(yystack_[1].location);
        absl::string_view id = parser->GetInputText(yystack_[0].location);
        // Return an error if there is embedded whitespace.
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator));
        }
        // Return an error if the identifier/literal is quoted.
        if (id[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator));
        }
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[2].value.slashed_identifier)->release_path_parts();
        // Add the separator and extra sub-part to the end of the current
        // identifier: {"a", "-", "b"} -> {"a", "-", "b", ":", "c"}
        prev.back().push_back(separator);
        prev.back().push_back(id);
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 8174 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 863:
#line 6801 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // This rule handles floating point literals between separator
        // characters (/:-) before the first dot.  The floating point literal
        // can be {1., .1, 1.1, 1e2, 1.e2, .1e2, 1.1e2}.  The only valid form is
        // "1e2".  All forms containing a dot are invalid because the separator
        // characters are not allowed in identifiers after the dot.
        absl::string_view separator1 = parser->GetInputText(yystack_[3].location);
        absl::string_view float_literal = parser->GetInputText(yystack_[2].location);
        absl::string_view separator2 = parser->GetInputText(yystack_[1].location);
        absl::string_view id = parser->GetInputText(yystack_[0].location);
        // Return an error if there is embedded whitespace.
        if (parser->HasWhitespace(yystack_[4].location, yystack_[3].location) || parser->HasWhitespace(yystack_[3].location, yystack_[2].location)) {
          YYERROR_AND_ABORT_AT(yystack_[3].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator1));
        }
        // Return an error if there is embedded whitespace.
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[3].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator2));
        }
        // Return an error if the trailing identifier is quoted.
        if (id[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[3].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator2));
        }
        // Return an error if the floating point literal contains a dot. Only
        // scientific notation is allowed in this rule.
        if (absl::StrContains(float_literal, '.')) {
          YYERROR_AND_ABORT_AT(yystack_[2].location,
            "Syntax error: Unexpected floating point literal");
        }
        // We are parsing a floating point literal that uses scientific notation
        // in the middle of a slashed path, so just append the text to the
        // existing path. For text: "/a/1e10-b", {"/", "a"} becomes
        // {"/", "a", "/", "1e10". "-", "b"} after matching this rule.
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[4].value.slashed_identifier)->release_path_parts();
        prev.back().push_back(separator1);
        prev.back().push_back(float_literal);
        prev.back().push_back(separator2);
        prev.back().push_back(id);
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[4].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 8223 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 864:
#line 6853 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       // Build the path.
       absl::StatusOr<std::vector<zetasql::ASTNode*>> path_parts =
          SeparatedIdentifierTmpNode::BuildPathParts(yystack_[0].location,
            std::move((yystack_[0].value.slashed_identifier)->release_path_parts()), parser);
       if (!path_parts.ok()) {
         YYERROR_AND_ABORT_AT(yystack_[0].location, std::string(path_parts.status().message()));
       }
       (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, std::move(path_parts).value());
     }
#line 8238 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 865:
#line 6865 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      // This rule handles floating point literals that are preceded by a
      // separator character (/:-). The floating point literal can be
      // {1., .1, 1.1, 1e2, 1.e2, .1e2, 1.1e2}, but the only valid form is a
      // floating point that ends with a dot. The dot is interpreted as the path
      // component separator, and we only allow a regular identifier following
      // the dot. A floating point that starts with a dot is not valid becuase
      // this implies that a dot and separator are adjacent: "-.1". A floating
      // point that has a dot in the middle is not supported because this format
      // is rejected by the tokenizer: "1.5table". A floating point literal that
      // does not contain a dot is not valid because this implies scientific
      // notation was lexed when adjacent to an identifier:
      // "/path/1e10  table". In this case it is not possible to determine if
      // the next token is an alias or part of the next statement.
      absl::string_view separator = parser->GetInputText(yystack_[2].location);
      absl::string_view float_literal = parser->GetInputText(yystack_[1].location);
      absl::string_view id = (yystack_[0].value.identifier)->GetAsStringView();
      // Return an error if there is embedded whitespace.
      if (parser->HasWhitespace(yystack_[3].location, yystack_[2].location) || parser->HasWhitespace(yystack_[2].location, yystack_[1].location)) {
        YYERROR_AND_ABORT_AT(yystack_[2].location,
          absl::StrFormat("Syntax error: Unexpected \"%s\"", separator));
      }
      // Assert that the raw text of the floating literal ends in a dot since
      // we expect this rule to match at the boundary of a new path component.
      if (!absl::EndsWith(float_literal, ".")) {
        YYERROR_AND_ABORT_AT(yystack_[2].location,absl::StrFormat(
          "Syntax error: Unexpected floating point literal \"%s\" after \"%s\"",
          float_literal, separator));
      }
      SeparatedIdentifierTmpNode::PathParts prev =
        (yystack_[3].value.slashed_identifier)->release_path_parts();
      // This case is a continuation of an existing slashed_identifier
      // `prev`, followed by what the lexer believes is a floating point
      // literal.
      // here: /*prev=*/={{"a", "-", "b"}}
      // we append "1" to complete the identifier components, followed
      // by the identifier ("c") as {{"c"}}.
      // Thus, we end up with {{"a", "-", "b", "/", "1"}, {"c"}}
      prev.back().push_back(separator);
      prev.back().push_back(float_literal);
      prev.push_back({id});

      // Build the path.
      absl::StatusOr<std::vector<zetasql::ASTNode*>> path_parts =
        SeparatedIdentifierTmpNode::BuildPathParts(yylhs.location,
          std::move(prev), parser);
      if (!path_parts.ok()) {
        YYERROR_AND_ABORT_AT(yystack_[3].location, std::string(path_parts.status().message()));
      }
      (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, std::move(path_parts).value());
    }
#line 8294 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 866:
#line 6918 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      // This rule matches a slashed_identifier that terminates in a floating
      // point literal and is followed by the next path component, which must be
      // a regular identifier. The floating point literal can be
      // {1., .1, 1.1, 1e2, 1.e2, .1e2, 1.1e2}, but the only valid form is
      // "1e2".  All forms containing a dot are invalid because this implies
      // that either there are two dots in a row "1.." or the next path
      // component is a number itself, which we do not support (like "1.5.table"
      // and "1.1e10.table"). Note: paths like "/span/global.5.table" are
      // supported because once the lexer sees the first dot it enters
      // DOT_IDENTIFIER mode and lexs the "5" as an identifier rather than
      // producing a ".5" floating point literal token.
      absl::string_view separator = parser->GetInputText(yystack_[3].location);
      absl::string_view float_literal = parser->GetInputText(yystack_[2].location);
      // Return an error if there is embedded whitespace.
      if (parser->HasWhitespace(yystack_[4].location, yystack_[3].location) || parser->HasWhitespace(yystack_[3].location, yystack_[2].location)) {
        YYERROR_AND_ABORT_AT(yystack_[3].location,
          absl::StrFormat("Syntax error: Unexpected \"%s\"", separator));
      }
      // Reject any floating point literal that contains a dot.
      if (absl::StrContains(float_literal, '.')) {
        YYERROR_AND_ABORT_AT(yystack_[2].location,
          "Syntax error: Unexpected floating point literal");
      }
      // We are parsing a floating point literal that uses scientific notation
      // "1e10" that is followed by a dot and then an identifier. Append the
      // separator and floating point literal to the existing path and then
      // form an ASTPathExpression from the slash path and the trailing
      // identifier.
      SeparatedIdentifierTmpNode::PathParts prev = (yystack_[4].value.slashed_identifier)->release_path_parts();
      prev.back().push_back(separator);
      prev.back().push_back(float_literal);

      // Build the slash path.
      absl::StatusOr<std::vector<zetasql::ASTNode*>> path_parts =
        SeparatedIdentifierTmpNode::BuildPathParts(yylhs.location,
          std::move(prev), parser);
      if (!path_parts.ok()) {
        YYERROR_AND_ABORT_AT(yystack_[4].location, std::string(path_parts.status().message()));
      }
      // Add the trailing identifier to the path.
      path_parts.value().push_back((yystack_[0].value.identifier));
      (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, std::move(path_parts).value());
    }
#line 8343 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 867:
#line 6963 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
    }
#line 8351 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 868:
#line 6969 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                { (yylhs.value.expression) = MAKE_NODE(ASTArrayConstructor, yylhs.location); }
#line 8357 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 869:
#line 6970 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
          { (yylhs.value.expression) = MAKE_NODE(ASTArrayConstructor, yylhs.location); }
#line 8363 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 870:
#line 6972 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTArrayConstructor, yylhs.location, {(yystack_[1].value.node)});
      }
#line 8371 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 871:
#line 6979 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[1].value.expression), {(yystack_[0].value.expression)});
      }
#line 8379 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 872:
#line 6983 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.expression)});
      }
#line 8387 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 873:
#line 6990 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 8395 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 874:
#line 6994 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 8403 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 875:
#line 7001 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTRangeLiteral, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.expression)});
      }
#line 8411 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 876:
#line 7007 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.type_kind) = zetasql::TYPE_DATE; }
#line 8417 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 877:
#line 7008 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                 { (yylhs.value.type_kind) = zetasql::TYPE_DATETIME; }
#line 8423 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 878:
#line 7009 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
             { (yylhs.value.type_kind) = zetasql::TYPE_TIME; }
#line 8429 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 879:
#line 7010 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  { (yylhs.value.type_kind) = zetasql::TYPE_TIMESTAMP; }
#line 8435 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 880:
#line 7015 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTDateOrTimeLiteral, yylhs.location, {(yystack_[0].value.expression)});
        literal->set_type_kind((yystack_[1].value.type_kind));
        (yylhs.value.expression) = literal;
      }
#line 8445 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 881:
#line 7024 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTIntervalExpr, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.identifier)});
      }
#line 8453 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 882:
#line 7028 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTIntervalExpr, yylhs.location, {(yystack_[3].value.expression), (yystack_[2].value.identifier), (yystack_[0].value.identifier)});
      }
#line 8461 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 883:
#line 7034 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8467 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 884:
#line 7036 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* parameter_expr = MAKE_NODE(ASTParameterExpr, yylhs.location, {});
        // Bison's algorithm guarantees that the "?" productions are reduced in
        // left-to-right order.
        parameter_expr->set_position(
          parser->GetNextPositionalParameterPosition());
        (yylhs.value.expression) = parameter_expr;
      }
#line 8480 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 885:
#line 7048 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTParameterExpr, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 8488 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 886:
#line 7052 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTIdentifier* reserved_keyword_identifier =
            parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
        (yylhs.value.expression) = MAKE_NODE(ASTParameterExpr, yylhs.location, {reserved_keyword_identifier});
      }
#line 8498 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 887:
#line 7061 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSimpleType, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 8506 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 888:
#line 7066 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* id = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
        auto* path_expression = MAKE_NODE(ASTPathExpression, yylhs.location, {id});
        (yylhs.value.node) = MAKE_NODE(ASTSimpleType, yylhs.location, {path_expression});
      }
#line 8516 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 889:
#line 7075 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTArrayType, yylhs.location, {(yystack_[1].value.node)});
      }
#line 8524 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 890:
#line 7082 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructField, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.node)});
      }
#line 8532 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 891:
#line 7086 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructField, yylhs.location, {(yystack_[0].value.node)});
      }
#line 8540 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 892:
#line 7093 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructType, yylhs.location, {(yystack_[0].value.node)});
      }
#line 8548 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 893:
#line 7097 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 8556 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 894:
#line 7104 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructType, yylhs.location);
      }
#line 8564 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 895:
#line 7108 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 8572 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 896:
#line 7114 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8578 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 897:
#line 7114 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                 { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8584 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 898:
#line 7114 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                               { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8590 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 899:
#line 7117 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8596 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 900:
#line 7118 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8602 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 901:
#line 7119 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8608 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 902:
#line 7120 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8614 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 903:
#line 7122 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 8622 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 904:
#line 7126 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTMaxLiteral, yystack_[0].location, {});
      }
#line 8630 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 905:
#line 7133 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTypeParameterList, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 8638 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 906:
#line 7137 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)}), yylhs.location);
      }
#line 8646 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 907:
#line 7143 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                               { (yylhs.value.node) = (yystack_[1].value.node); }
#line 8652 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 908:
#line 7145 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(yystack_[1].location,
                             "Syntax error: Trailing comma in type parameter "
                             "list is not allowed.");
      }
#line 8662 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 909:
#line 7150 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 8668 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 910:
#line 7154 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
    }
#line 8676 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 911:
#line 7160 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_PROTO;
      }
#line 8684 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 912:
#line 7164 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_ENUM;
      }
#line 8692 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 913:
#line 7168 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_STRUCT;
      }
#line 8700 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 914:
#line 7172 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_ARRAY;
      }
#line 8708 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 915:
#line 7176 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        const absl::string_view templated_type_string = (yystack_[0].value.identifier)->GetAsStringView();
        if (zetasql_base::CaseEqual(templated_type_string, "TABLE")) {
          (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_TABLE;
        } else if (zetasql_base::CaseEqual(templated_type_string, "TYPE")) {
          (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_TYPE;
        } else {
          YYERROR_AND_ABORT_AT(yystack_[0].location,
                               "Syntax error: unexpected ANY template type");
        }
      }
#line 8724 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 916:
#line 7191 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* templated_parameter =
            MAKE_NODE(ASTTemplatedParameterType, yylhs.location, {});
        templated_parameter->set_kind((yystack_[0].value.templated_parameter_kind));
        (yylhs.value.node) = templated_parameter;
      }
#line 8735 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 917:
#line 7199 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8741 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 918:
#line 7199 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                           { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8747 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 919:
#line 7199 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8753 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 920:
#line 7203 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTNewConstructor, yylhs.location, {(yystack_[1].value.node)});
      }
#line 8761 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 921:
#line 7210 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTNewConstructorArg, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 8769 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 922:
#line 7214 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTNewConstructorArg, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
      }
#line 8777 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 923:
#line 7218 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // Do not parenthesize $4 because it is not really a parenthesized
        // path expression. The parentheses are just part of the syntax here.
        (yylhs.value.node) = MAKE_NODE(ASTNewConstructorArg, yylhs.location, {(yystack_[4].value.expression), (yystack_[1].value.expression)});
      }
#line 8787 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 924:
#line 7227 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[1].value.expression), {(yystack_[0].value.node)});
      }
#line 8795 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 925:
#line 7231 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.node)});
      }
#line 8803 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 926:
#line 7238 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yystack_[0].location);
      }
#line 8811 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 927:
#line 7242 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yystack_[0].location);
      }
#line 8819 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 928:
#line 7249 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTBracedConstructorFieldValue, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 8827 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 929:
#line 7253 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTBracedConstructorFieldValue, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 8835 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 930:
#line 7260 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTBracedConstructorField, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8843 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 931:
#line 7267 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTBracedConstructorField, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.expression)});
      }
#line 8851 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 932:
#line 7274 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
        if (!parser->language_options().LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_BRACED_PROTO_CONSTRUCTORS)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "Braced constructors are not supported");
        }
        (yylhs.value.expression) = MAKE_NODE(ASTBracedConstructor, yylhs.location);
    }
#line 8863 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 933:
#line 7285 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[1].value.expression), {(yystack_[0].value.node)});
      }
#line 8871 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 934:
#line 7289 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[1].value.expression), {(yystack_[0].value.node)});
      }
#line 8879 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 935:
#line 7293 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.node)});
      }
#line 8887 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 936:
#line 7297 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[1].value.expression), {(yystack_[0].value.node)});
      }
#line 8895 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 937:
#line 7311 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.node)});
      }
#line 8903 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 938:
#line 7318 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yystack_[0].location);
      }
#line 8911 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 939:
#line 7322 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yystack_[0].location);
      }
#line 8919 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 940:
#line 7329 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTBracedNewConstructor, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.expression)});
      }
#line 8927 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 941:
#line 7336 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTCaseNoValueExpression, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8935 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 942:
#line 7340 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[4].value.expression), {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8943 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 943:
#line 7347 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTCaseValueExpression, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8951 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 944:
#line 7351 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[4].value.expression), {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8959 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 945:
#line 7357 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8965 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 946:
#line 7358 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8971 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 947:
#line 7363 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 8979 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 948:
#line 7367 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[3].value.expression), yylhs.location), {(yystack_[1].value.expression)});
      }
#line 8987 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 949:
#line 7374 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 8995 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 950:
#line 7377 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.expression) = nullptr; }
#line 9001 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 951:
#line 7383 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
       {
         (yylhs.value.node) = MAKE_NODE(ASTFormatClause, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.expression)});
       }
#line 9009 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 952:
#line 7386 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9015 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 953:
#line 7391 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* cast = MAKE_NODE(ASTCastExpression, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.node), (yystack_[1].value.node)});
        cast->set_is_safe_cast(false);
        (yylhs.value.expression) = cast;
      }
#line 9025 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 954:
#line 7397 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "The argument to CAST is an expression, not a query; to use a query "
        "as an expression, the query must be wrapped with additional "
        "parentheses to make it a scalar subquery expression");
      }
#line 9037 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 955:
#line 7407 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* cast = MAKE_NODE(ASTCastExpression, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.node), (yystack_[1].value.node)});
        cast->set_is_safe_cast(true);
        (yylhs.value.expression) = cast;
      }
#line 9047 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 956:
#line 7413 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "The argument to SAFE_CAST is an expression, not a query; to use a "
        "query as an expression, the query must be wrapped with additional "
        "parentheses to make it a scalar subquery expression");
      }
#line 9059 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 957:
#line 7424 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTExtractExpression, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 9067 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 958:
#line 7431 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 9075 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 959:
#line 7435 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[5].value.expression), yylhs.location), {(yystack_[1].value.expression)});
      }
#line 9083 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 960:
#line 7442 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTReplaceFieldsArg, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 9091 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 961:
#line 7446 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTReplaceFieldsArg, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 9099 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 962:
#line 7453 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTReplaceFieldsExpression, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 9107 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 963:
#line 7457 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.node)});
      }
#line 9115 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 964:
#line 7464 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 9123 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 965:
#line 7471 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 9131 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 966:
#line 7475 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 9139 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 967:
#line 7479 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 9147 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 968:
#line 7483 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 9155 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 969:
#line 7487 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 9163 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 970:
#line 7491 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 9171 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 971:
#line 7512 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_FUNCTION_CALL) {
          auto* function_call = (yystack_[2].value.expression)->GetAsOrDie<zetasql::ASTFunctionCall>();
          if (function_call->parenthesized()) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: Function call cannot be applied to this "
                "expression. Function calls require a path, e.g. a.b.c()");
          } else if (
              function_call->is_current_date_time_without_parentheses()) {
            // This is a function call like "CURRENT_DATE", which does not
            // allow DISTINCT.
            // Note that we don't call this a "Syntax error" because it's really
            // a semantic error.
            YYERROR_AND_ABORT_AT(
                yystack_[0].location,
                absl::StrCat("DISTINCT not allowed for function ",
                             parser->GetInputText(yystack_[2].location)));
          } else {
            // TODO: Add test for this error.
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: Double function call parentheses");
          }
        } else if (
            (yystack_[2].value.expression)->node_kind() != zetasql::AST_PATH_EXPRESSION ||
            (yystack_[2].value.expression)->GetAsOrDie<zetasql::ASTPathExpression>()->parenthesized()) {
          YYERROR_AND_ABORT_AT(
              yystack_[1].location,
              "Syntax error: Function call cannot be applied to this "
              "expression. Function calls require a path, e.g. a.b.c()");
        } else {
          auto* function_call = MAKE_NODE(ASTFunctionCall, yylhs.location, {(yystack_[2].value.expression)});
          function_call->set_distinct(true);
          (yylhs.value.function_call) = function_call;
        }
      }
#line 9213 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 972:
#line 7550 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // TODO: Merge this with the other code path. We have to have
        // two separate productions to avoid an empty opt_distinct rule that
        // causes shift/reduce conflicts.
        if ((yystack_[1].value.expression)->node_kind() == zetasql::AST_FUNCTION_CALL) {
          auto* function_call = (yystack_[1].value.expression)->GetAsOrDie<zetasql::ASTFunctionCall>();
          if (function_call->parenthesized()) {
            YYERROR_AND_ABORT_AT(
                yystack_[0].location,
                "Syntax error: Function call cannot be applied to this "
                "expression. Function calls require a path, e.g. a.b.c()");
          } else if (
              function_call->is_current_date_time_without_parentheses()) {
            // This is a function call like "CURRENT_DATE" without parentheses.
            // Allow parentheses to be added to such a call at most once.
            function_call->set_is_current_date_time_without_parentheses(false);
            (yylhs.value.function_call) = function_call;
          } else {
            // TODO: Add test for this error.
            YYERROR_AND_ABORT_AT(
                yystack_[0].location,
                "Syntax error: Double function call parentheses");
          }
        } else if (
            (yystack_[1].value.expression)->node_kind() != zetasql::AST_PATH_EXPRESSION ||
            (yystack_[1].value.expression)->GetAsOrDie<zetasql::ASTPathExpression>()->parenthesized()) {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Syntax error: Function call cannot be applied to this "
              "expression. Function calls require a path, e.g. a.b.c()");
        } else {
          auto* function_call = MAKE_NODE(ASTFunctionCall, yylhs.location, {(yystack_[1].value.expression)});
          function_call->set_distinct(false);
          (yylhs.value.function_call) = function_call;
        }
      }
#line 9254 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 973:
#line 7587 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // IF and GROUPING can be function calls, but they are also keywords.
        // Treat them specially, and don't allow DISTINCT etc. since that only
        // applies to aggregate functions.
        auto* path_expression = MAKE_NODE(ASTPathExpression, yystack_[1].location, {(yystack_[1].value.node)});
        auto* function_call = MAKE_NODE(ASTFunctionCall, yylhs.location, {path_expression});
        function_call->set_distinct(false);
        (yylhs.value.function_call) = function_call;
      }
#line 9268 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 974:
#line 7599 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 9274 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 975:
#line 7601 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "Each function argument is an expression, not a query; to use a "
        "query as an expression, the query must be wrapped with additional "
        "parentheses to make it a scalar subquery expression");
      }
#line 9286 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 976:
#line 7608 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 9292 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 977:
#line 7609 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 9298 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 978:
#line 7614 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTNamedArgument, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.expression)});
      }
#line 9306 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 979:
#line 7621 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTLambda, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.expression)});
      }
#line 9314 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 980:
#line 7640 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto expr_kind = (yystack_[0].value.expression)->node_kind();
        if (expr_kind != zetasql::AST_STRUCT_CONSTRUCTOR_WITH_PARENS &&
            expr_kind != zetasql::AST_PATH_EXPRESSION) {
          YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Expecting lambda argument list");
        }
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 9329 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 981:
#line 7651 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTStructConstructorWithParens, yylhs.location);
    }
#line 9337 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 982:
#line 7658 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.function_call) = WithExtraChildren((yystack_[1].value.function_call), {(yystack_[0].value.expression)});
      }
#line 9345 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 983:
#line 7666 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* star = MAKE_NODE(ASTStar, yystack_[0].location);
        star->set_image("*");
        (yylhs.value.function_call) = WithExtraChildren((yystack_[1].value.function_call), {star});
      }
#line 9355 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 984:
#line 7672 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.function_call) = WithExtraChildren((yystack_[2].value.function_call), {(yystack_[0].value.expression)});
      }
#line 9363 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 985:
#line 7681 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.function_call) = WithExtraChildren(parser->WithEndLocation((yystack_[4].value.function_call), yylhs.location), {(yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node)});
      }
#line 9371 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 986:
#line 7694 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yystack_[7].value.function_call)->set_null_handling_modifier((yystack_[6].value.null_handling_modifier));
        (yylhs.value.function_call) = WithExtraChildren(parser->WithEndLocation((yystack_[7].value.function_call), yylhs.location), {
            (yystack_[5].value.node),
            (yystack_[4].value.node),
            (yystack_[3].value.node),
            (yystack_[2].value.node),
            (yystack_[1].value.node)});
      }
#line 9385 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 987:
#line 7706 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.identifier) = (yystack_[0].value.identifier); }
#line 9391 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 988:
#line 7707 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.identifier) = nullptr; }
#line 9397 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 989:
#line 7712 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPartitionBy, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.expression)});
      }
#line 9405 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 990:
#line 7716 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 9413 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 991:
#line 7722 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                               { (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location); }
#line 9419 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 992:
#line 7723 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9425 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 993:
#line 7728 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPartitionBy, yylhs.location, {nullptr, (yystack_[0].value.expression)});
      }
#line 9433 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 994:
#line 7732 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 9441 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 995:
#line 7738 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                       { (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location); }
#line 9447 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 996:
#line 7739 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9453 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 997:
#line 7744 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTClusterBy, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 9461 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 998:
#line 7748 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 9469 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 999:
#line 7754 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                     { (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location); }
#line 9475 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1000:
#line 7755 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9481 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1001:
#line 7760 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
  {
    if (!parser->language_options().LanguageFeatureEnabled(
        zetasql::FEATURE_V_1_4_TTL)) {
      YYERROR_AND_ABORT_AT(yystack_[5].location, "ROW DELETION POLICY clause is not supported.");
    }
    (yylhs.value.node) = MAKE_NODE(ASTTtlClause, yylhs.location, {(yystack_[1].value.expression)});
  }
#line 9493 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1002:
#line 7767 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  { (yylhs.value.node) = nullptr; }
#line 9499 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1003:
#line 7772 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                { (yylhs.value.preceding_or_following_keyword) = PrecedingOrFollowingKeyword::kPreceding; }
#line 9505 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1004:
#line 7773 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  { (yylhs.value.preceding_or_following_keyword) = PrecedingOrFollowingKeyword::kFollowing; }
#line 9511 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1005:
#line 7778 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrameExpr, yylhs.location);
        frame->set_boundary_type(
            ((yystack_[0].value.preceding_or_following_keyword) == PrecedingOrFollowingKeyword::kPreceding)
                ? zetasql::ASTWindowFrameExpr::UNBOUNDED_PRECEDING
                : zetasql::ASTWindowFrameExpr::UNBOUNDED_FOLLOWING);
        (yylhs.value.node) = frame;
      }
#line 9524 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1006:
#line 7787 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrameExpr, yylhs.location);
        frame->set_boundary_type(
            zetasql::ASTWindowFrameExpr::CURRENT_ROW);
        (yylhs.value.node) = frame;
      }
#line 9535 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1007:
#line 7794 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrameExpr, yylhs.location, {(yystack_[1].value.expression)});
        frame->set_boundary_type(
            ((yystack_[0].value.preceding_or_following_keyword) == PrecedingOrFollowingKeyword::kPreceding)
                ? zetasql::ASTWindowFrameExpr::OFFSET_PRECEDING
                : zetasql::ASTWindowFrameExpr::OFFSET_FOLLOWING);
        (yylhs.value.node) = frame;
      }
#line 9548 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1008:
#line 7805 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.frame_unit) = zetasql::ASTWindowFrame::ROWS; }
#line 9554 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1009:
#line 7806 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.frame_unit) = zetasql::ASTWindowFrame::RANGE; }
#line 9560 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1010:
#line 7811 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrame, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
        frame->set_unit((yystack_[4].value.frame_unit));
        (yylhs.value.node) = frame;
      }
#line 9570 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1011:
#line 7817 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrame, yylhs.location, {(yystack_[0].value.node)});
        frame->set_unit((yystack_[1].value.frame_unit));
        (yylhs.value.node) = frame;
      }
#line 9580 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1012:
#line 7822 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9586 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1013:
#line 7826 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWindowSpecification, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 9594 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1014:
#line 7831 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWindowSpecification, yylhs.location, {(yystack_[4].value.identifier), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node)});
      }
#line 9602 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1015:
#line 7838 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTExpression* current_expression = (yystack_[3].value.function_call);
        if ((yystack_[2].value.node) != nullptr) {
          current_expression->AddChild((yystack_[2].value.node));
        }
        if ((yystack_[1].value.node) != nullptr) {
          if (!parser->language_options().LanguageFeatureEnabled(
                  zetasql::FEATURE_V_1_3_WITH_GROUP_ROWS)) {
            YYERROR_AND_ABORT_AT(yystack_[1].location, "WITH GROUP_ROWS is not supported");
          }
          auto* with_group_rows = MAKE_NODE(ASTWithGroupRows, yylhs.location, {(yystack_[1].value.node)});
          current_expression->AddChild(with_group_rows);
        }
        if ((yystack_[0].value.node) != nullptr) {
          current_expression = MAKE_NODE(ASTAnalyticFunctionCall, yylhs.location,
              {current_expression, (yystack_[0].value.node)});
        }
        (yylhs.value.expression) = current_expression;
      }
#line 9626 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1016:
#line 7860 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[1].value.query);
      }
#line 9634 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1017:
#line 7865 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      YYERROR_AND_ABORT_AT(
          yystack_[0].location,
          "Saw WITH directly after a function call, which is not allowed. "
          "Did you forget to put a comma before the WITH, or did you mean "
          "\"WITH GROUP_ROWS\"?");
    }
#line 9646 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1018:
#line 7872 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9652 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1019:
#line 7877 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 9660 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1020:
#line 7880 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9666 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1021:
#line 7885 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yystack_[1].value.expression)->set_parenthesized(true);
        // Don't include the location in the parentheses. Semantic error
        // messages about this expression should point at the start of the
        // expression, not at the opening parentheses.
        (yylhs.value.expression) = (yystack_[1].value.expression);
      }
#line 9678 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1022:
#line 7896 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTStructConstructorWithKeyword, yylhs.location, {(yystack_[1].value.node)});
      }
#line 9686 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1023:
#line 7900 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTStructConstructorWithKeyword, yylhs.location);
      }
#line 9694 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1024:
#line 7907 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[1].value.expression), {(yystack_[0].value.node)});
      }
#line 9702 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1025:
#line 7911 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.node)});
      }
#line 9710 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1026:
#line 7918 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructConstructorArg, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 9718 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1027:
#line 7927 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTStructConstructorWithParens, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 9726 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1028:
#line 7931 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.expression)});
      }
#line 9734 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1029:
#line 7938 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 9742 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1030:
#line 7942 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 9750 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1031:
#line 7946 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 9758 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1032:
#line 7953 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* subquery = MAKE_NODE(ASTExpressionSubquery, yylhs.location, {(yystack_[1].value.query)});
        subquery->set_modifier(zetasql::ASTExpressionSubquery::ARRAY);
        (yylhs.value.expression_subquery) = subquery;
      }
#line 9768 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1033:
#line 7959 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* subquery = MAKE_NODE(ASTExpressionSubquery, yylhs.location, {(yystack_[3].value.node), (yystack_[1].value.query)});
        subquery->set_modifier(zetasql::ASTExpressionSubquery::EXISTS);
        (yylhs.value.expression_subquery) = subquery;
      }
#line 9778 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1034:
#line 7964 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression_subquery) = (yystack_[0].value.expression_subquery); }
#line 9784 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1035:
#line 7969 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression_subquery) = MAKE_NODE(ASTExpressionSubquery, yylhs.location, {(yystack_[1].value.node)});
      }
#line 9792 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1036:
#line 7976 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTNullLiteral, yystack_[0].location);
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9804 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1037:
#line 7987 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTBooleanLiteral, yystack_[0].location);
        literal->set_value(true);
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9817 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1038:
#line 7996 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTBooleanLiteral, yystack_[0].location);
        literal->set_value(false);
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9830 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1039:
#line 8008 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        const absl::string_view input_text = parser->GetInputText(yystack_[0].location);
        std::string str;
        std::string error_string;
        int error_offset;
        const absl::Status parse_status = zetasql::ParseStringLiteral(
            input_text, &str, &error_string, &error_offset);
        if (!parse_status.ok()) {
          zetasql_bison_parser::location location = yystack_[0].location;
          location.begin.column += error_offset;
          if (!error_string.empty()) {
            YYERROR_AND_ABORT_AT(location,
                                 absl::StrCat("Syntax error: ", error_string));
          }
          ZETASQL_DLOG(FATAL) << "ParseStringLiteral did not return an error string";
          YYERROR_AND_ABORT_AT(location,
                               absl::StrCat("Syntax error: ",
                                            parse_status.message()));
        }

        auto* literal = MAKE_NODE(ASTStringLiteral, yystack_[0].location);
        literal->set_string_value(std::move(str));
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(input_text));
        (yylhs.value.expression) = literal;
      }
#line 9862 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1040:
#line 8039 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        const absl::string_view input_text = parser->GetInputText(yystack_[0].location);
        std::string bytes;
        std::string error_string;
        int error_offset;
        const absl::Status parse_status = zetasql::ParseBytesLiteral(
            input_text, &bytes, &error_string, &error_offset);
        if (!parse_status.ok()) {
          zetasql_bison_parser::location location = yystack_[0].location;
          location.begin.column += error_offset;
          if (!error_string.empty()) {
            YYERROR_AND_ABORT_AT(location,
                                 absl::StrCat("Syntax error: ", error_string));
          }
          ZETASQL_DLOG(FATAL) << "ParseBytesLiteral did not return an error string";
          YYERROR_AND_ABORT_AT(location,
                               absl::StrCat("Syntax error: ",
                                            parse_status.message()));
        }

        // The identifier is parsed *again* in the resolver. The output of the
        // parser maintains the original image.
        // TODO: Fix this wasted work when the JavaCC parser is gone.
        auto* literal = MAKE_NODE(ASTBytesLiteral, yystack_[0].location);
        literal->set_bytes_value(std::move(bytes));
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(input_text));
        (yylhs.value.expression) = literal;
      }
#line 9897 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1041:
#line 8073 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTIntLiteral, yystack_[0].location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9907 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1044:
#line 8087 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTNumericLiteral, yylhs.location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9917 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1047:
#line 8101 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTBigNumericLiteral, yylhs.location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9927 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1048:
#line 8110 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTJSONLiteral, yylhs.location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9937 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1049:
#line 8119 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTFloatLiteral, yystack_[0].location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9947 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1050:
#line 8128 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        const absl::string_view identifier_text = parser->GetInputText(yystack_[0].location);
        // The tokenizer rule already validates that the identifier is valid,
        // except for backquoted identifiers.
        if (identifier_text[0] == '`') {
          std::string str;
          std::string error_string;
          int error_offset;
          const absl::Status parse_status =
              zetasql::ParseGeneralizedIdentifier(
                  identifier_text, &str, &error_string, &error_offset);
          if (!parse_status.ok()) {
            zetasql_bison_parser::location location = yystack_[0].location;
            location.begin.column += error_offset;
            if (!error_string.empty()) {
              YYERROR_AND_ABORT_AT(location,
                                   absl::StrCat("Syntax error: ",
                                                error_string));
            }
            ZETASQL_DLOG(FATAL) << "ParseIdentifier did not return an error string";
            YYERROR_AND_ABORT_AT(location,
                                 absl::StrCat("Syntax error: ",
                                              parse_status.message()));
          }
          (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, str);
        } else {
          (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, identifier_text);
        }
      }
#line 9981 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1051:
#line 8158 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 9989 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1052:
#line 8165 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      const absl::string_view label_text = parser->GetInputText(yystack_[0].location);
      // The tokenizer rule already validates that the identifier is valid and
      // non-empty, except for backquoted identifiers.
      if (label_text[0] == '`') {
        std::string str;
        std::string error_string;
        int error_offset;
        const absl::Status parse_status =
            zetasql::ParseGeneralizedIdentifier(
                label_text, &str, &error_string, &error_offset);
        if (!parse_status.ok()) {
          zetasql_bison_parser::location location = yystack_[0].location;
          location.begin.column += error_offset;
          if (!error_string.empty()) {
            YYERROR_AND_ABORT_AT(location,
                                 absl::StrCat("Syntax error: ",
                                              error_string));
          }
          ZETASQL_DLOG(FATAL) << "ParseIdentifier did not return an error string";
          YYERROR_AND_ABORT_AT(location,
                               absl::StrCat("Syntax error: ",
                                            parse_status.message()));
        }
        (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, str);
      } else {
        (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, label_text);
      }
    }
#line 10023 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1053:
#line 8198 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.expression) = MAKE_NODE(ASTSystemVariableExpr, yylhs.location, {(yystack_[0].value.expression)});
    }
#line 10031 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1054:
#line 8202 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTIdentifier* reserved_keyword_identifier =
            parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
        zetasql::ASTPathExpression* path =
            MAKE_NODE(ASTPathExpression, yylhs.location, {reserved_keyword_identifier});
        (yylhs.value.expression) = MAKE_NODE(ASTSystemVariableExpr, yylhs.location, {path});
      }
#line 10043 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1317:
#line 8494 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                               { (yylhs.value.boolean) = true; }
#line 10049 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1318:
#line 8494 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                              { (yylhs.value.boolean) = false; }
#line 10055 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1319:
#line 8497 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
           { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::TEMPORARY; }
#line 10061 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1320:
#line 8498 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::TEMPORARY; }
#line 10067 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1321:
#line 8499 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::PUBLIC; }
#line 10073 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1322:
#line 8500 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::PRIVATE; }
#line 10079 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1323:
#line 8501 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::DEFAULT_SCOPE; }
#line 10085 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1324:
#line 8504 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                     { (yylhs.value.boolean) = true; }
#line 10091 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1325:
#line 8504 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                    { (yylhs.value.boolean) = false; }
#line 10097 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1326:
#line 8506 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                     { (yylhs.value.boolean) = true; }
#line 10103 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1327:
#line 8506 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                    { (yylhs.value.boolean) = false; }
#line 10109 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1330:
#line 8511 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10115 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1331:
#line 8512 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 10121 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1332:
#line 8517 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOptionsEntry, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.expression)});
      }
#line 10129 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1333:
#line 8524 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTIdentifier* proto_identifier =
            parser->MakeIdentifier(yystack_[0].location, "PROTO");
        (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, {proto_identifier});
      }
#line 10139 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1334:
#line 8529 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 10145 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1335:
#line 8534 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOptionsList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10153 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1336:
#line 8538 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 10161 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1337:
#line 8545 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 10169 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1338:
#line 8549 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOptionsList, yylhs.location);
      }
#line 10177 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1339:
#line 8555 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                           { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10183 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1340:
#line 8556 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 10189 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1341:
#line 8561 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDefineTableStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 10197 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1342:
#line 8567 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                     { (yylhs.value.node) = (yystack_[0].value.insert_statement); }
#line 10203 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1343:
#line 8568 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10209 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1344:
#line 8569 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10215 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1347:
#line 8576 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 10223 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1348:
#line 8580 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 10231 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1349:
#line 8587 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAssertRowsModified, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 10239 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1350:
#line 8591 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 10247 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1351:
#line 8598 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTReturningClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10255 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1352:
#line 8602 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTIdentifier* default_identifier =
          parser->MakeIdentifier(yystack_[1].location, "ACTION");
        auto* action_alias = MAKE_NODE(ASTAlias, yylhs.location, {default_identifier});
        (yylhs.value.node) = MAKE_NODE(ASTReturningClause, yylhs.location, {(yystack_[0].value.node), action_alias});
      }
#line 10266 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1353:
#line 8609 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* action_alias = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[1].value.identifier)});
        (yylhs.value.node) = MAKE_NODE(ASTReturningClause, yylhs.location, {(yystack_[0].value.node), action_alias});
      }
#line 10275 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1354:
#line 8613 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 10281 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1355:
#line 8623 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                  { (yylhs.value.insert_mode) = zetasql::ASTInsertStatement::IGNORE; }
#line 10287 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1356:
#line 8624 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.insert_mode) = zetasql::ASTInsertStatement::IGNORE; }
#line 10293 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1357:
#line 8626 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_mode) = zetasql::ASTInsertStatement::REPLACE;
      }
#line 10301 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1358:
#line 8630 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_mode) = zetasql::ASTInsertStatement::UPDATE;
      }
#line 10309 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1359:
#line 8638 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_statement) = MAKE_NODE(ASTInsertStatement, yylhs.location);
      }
#line 10317 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1360:
#line 8642 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[1].value.insert_statement);
        if (insert->parse_progress() >=
            ASTInsertStatement::kSeenOrIgnoreReplaceUpdate) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        insert->set_insert_mode((yystack_[0].value.insert_mode));
        insert->set_parse_progress(
            ASTInsertStatement::kSeenOrIgnoreReplaceUpdate);
        (yylhs.value.insert_statement) = insert;
      }
#line 10333 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1361:
#line 8655 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[3].value.insert_statement);
        if (insert->parse_progress() >= ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(
              yystack_[2].location, "Syntax error: Unexpected INSERT target name");
        }
        insert->set_parse_progress(
            ASTInsertStatement::kSeenTargetPath);
        (yylhs.value.insert_statement) = WithExtraChildren(insert, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 10348 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1362:
#line 8666 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[2].value.insert_statement);
        // Recognize REPLACE and UPDATE as keywords, but only if there was no
        // OR IGNORE/REPLACE/UPDATE before.
        bool is_or_replace_update = false;
        if (insert->parse_progress() <
            ASTInsertStatement::kSeenOrIgnoreReplaceUpdate) {
          absl::string_view path_expression_text = parser->GetInputText(yystack_[1].location);
          if (zetasql_base::CaseEqual(path_expression_text, "REPLACE")) {
            insert->set_insert_mode(
                zetasql::ASTInsertStatement::REPLACE);
            is_or_replace_update = true;
          } else if (zetasql_base::CaseEqual(path_expression_text, "UPDATE")) {
            insert->set_insert_mode(
                zetasql::ASTInsertStatement::UPDATE);
            is_or_replace_update = true;
          }
        }
        if (is_or_replace_update) {
          insert->set_parse_progress(
              ASTInsertStatement::kSeenOrIgnoreReplaceUpdate);
          (yylhs.value.insert_statement) = insert;
        } else {
          if (insert->parse_progress() == ASTInsertStatement::kSeenTargetPath) {
            YYERROR_AND_ABORT_AT(
                 yystack_[1].location, "Syntax error: INSERT target cannot have an alias");
          }
          if (insert->parse_progress() > ASTInsertStatement::kSeenTargetPath) {
            YYERROR_AND_ABORT_AT(
                 yystack_[1].location, "Syntax error: Unexpected INSERT target name");
          }
          insert->set_parse_progress(
              ASTInsertStatement::kSeenTargetPath);
          (yylhs.value.insert_statement) = WithExtraChildren(insert, {(yystack_[1].value.expression), (yystack_[0].value.node)});
        }
      }
#line 10389 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1363:
#line 8703 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[1].value.insert_statement);
        if (insert->parse_progress() >= ASTInsertStatement::kSeenColumnList) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: Unexpected column list");
        }
        if (insert->parse_progress() < ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: Expecting INSERT target name");
        }
        insert->set_parse_progress(ASTInsertStatement::kSeenColumnList);
        (yylhs.value.insert_statement) = WithExtraChildren(insert, {(yystack_[0].value.node)});
      }
#line 10405 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1364:
#line 8724 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[2].value.insert_statement);
        zetasql::ASTInsertValuesRowList* row_list =
          parser->WithStartLocation((yystack_[0].value.insert_values_row_list), yystack_[1].location);

        if (insert->parse_progress() < ASTInsertStatement::kSeenTargetPath) {
          // We haven't seen a target path yet. That means the "VALUES" should
          // be reinterpreted as a target path, and the insert_values_list as a
          // column list! We convert the already-parsed values list into the
          // intended column list.
          zetasql::ASTIdentifier* values_identifier =
              parser->MakeIdentifier(yystack_[1].location, parser->GetInputText(yystack_[1].location));
          auto* values_path_expression =
              MAKE_NODE(ASTPathExpression, yystack_[1].location, {values_identifier});
          insert->AddChild(values_path_expression);

          if (row_list->num_children() == 0 ||
              row_list->child(0)->node_kind() !=
                  zetasql::AST_INSERT_VALUES_ROW) {
            YYERROR_AND_ABORT_AT(
                yystack_[0].location,
                "Internal error: values list is unexpected type");
          }
          auto* row =
              row_list->mutable_child(0)
                      ->GetAsOrDie<zetasql::ASTInsertValuesRow>();
          auto* column_list = MAKE_NODE(ASTColumnList, yystack_[0].location, {});
          for (int i = 0; i < row->num_children(); ++i) {
            zetasql::ASTNode* element = row->mutable_child(i);
            if (element->node_kind() != zetasql::AST_PATH_EXPRESSION) {
              if (element->node_kind() == zetasql::AST_DEFAULT_LITERAL) {
                YYERROR_AND_ABORT_AT(
                    parser->GetBisonLocation(element->GetParseLocationRange()),
                    "Syntax error: Expected column name, got keyword DEFAULT");
              }
              YYERROR_AND_ABORT_AT(
                  parser->GetBisonLocation(element->GetParseLocationRange()),
                  "Syntax error: Expected column name");
            }
            auto* path_expression =
                element->GetAsOrDie<zetasql::ASTPathExpression>();
            if (path_expression->num_children() != 1) {
              YYERROR_AND_ABORT_AT(
                  parser->GetBisonLocation(element->GetParseLocationRange()),
                  "Syntax error: Expected column name");
            }
            column_list->AddChild(path_expression->mutable_child(0));
          }
          if (row_list->num_children() > 1) {
            // There are multiple lists. Assume the user actually intended to
            // write VALUES but forgot to do so. Do this without checking the
            // first list for being correct as a column list, because we assume
            // that the user intended it as a VALUES list.
            YYERROR_AND_ABORT_AT(
                parser->GetBisonLocation(
                    row_list->child(1)->GetParseLocationRange()),
                "Syntax error: Unexpected multiple column lists");
          }
          insert->AddChild(column_list);
          insert->set_parse_progress(
              ASTInsertStatement::kSeenColumnList);
        } else if (insert->parse_progress() >=
                   ASTInsertStatement::kSeenValuesList) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected VALUES list");
        } else if (insert->parse_progress() <
                   ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Expecting INSERT target name");
        } else {
          (yylhs.value.insert_statement) = parser->WithEndLocation(WithExtraChildren(insert, {row_list}), yylhs.location);
          insert->set_parse_progress(
              ASTInsertStatement::kSeenValuesList);
        }
      }
#line 10483 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1365:
#line 8855 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[2].value.insert_statement);
        if (insert->parse_progress() < ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(yystack_[1].location,
                               "Syntax error: Expecting INSERT target name");
        }
        if (insert->parse_progress() < ASTInsertStatement::kSeenValuesList) {
          YYERROR_AND_ABORT_AT(yystack_[1].location,
                               "Syntax error: Expecting VALUES list or query");
        }
        (yylhs.value.insert_statement) = parser->WithEndLocation(WithExtraChildren(insert, {(yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
      }
#line 10500 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1366:
#line 8868 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[3].value.insert_statement);
        if (insert->parse_progress() < ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(
               yystack_[2].location, "Syntax error: Expecting INSERT target name");
        }
        if (insert->parse_progress() >= ASTInsertStatement::kSeenValuesList) {
          YYERROR_AND_ABORT_AT(yystack_[2].location, "Syntax error: Unexpected query");
        }
        (yylhs.value.insert_statement) = parser->WithEndLocation(
            WithExtraChildren(insert, {(yystack_[2].value.query), (yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
      }
#line 10517 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1367:
#line 8884 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCopyDataSource, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 10525 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1368:
#line 8891 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCloneDataSource, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 10533 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1369:
#line 8898 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCloneDataSourceList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10541 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1370:
#line 8902 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[3].value.node), {(yystack_[0].value.node)});
      }
#line 10549 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1371:
#line 8910 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCloneDataStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 10557 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1372:
#line 8916 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
   { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 10563 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1373:
#line 8918 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       (yylhs.value.expression) = MAKE_NODE(ASTDefaultLiteral, yylhs.location, {});
     }
#line 10571 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1374:
#line 8925 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTInsertValuesRow, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 10579 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1375:
#line 8929 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 10587 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1376:
#line 8936 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 10595 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1377:
#line 8943 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_values_row_list) = MAKE_NODE(ASTInsertValuesRowList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10603 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1378:
#line 8947 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_values_row_list) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.insert_values_row_list), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 10611 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1379:
#line 8956 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDeleteStatement, yylhs.location, {(yystack_[6].value.expression), (yystack_[5].value.node), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 10619 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1380:
#line 8963 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWithOffset, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10627 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1381:
#line 8966 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 10633 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1382:
#line 8973 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUpdateStatement, yylhs.location, {(yystack_[9].value.expression), (yystack_[8].value.node), (yystack_[7].value.node), (yystack_[6].value.node), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 10641 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1383:
#line 8980 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTruncateStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 10649 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1384:
#line 8987 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 10657 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1385:
#line 8999 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 10665 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1386:
#line 9003 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // Remove the parentheses from generalized_extension_path as they were
        // added to indicate the path corresponds to an extension field in the
        // resolver. It is implied that the path argument of
        // ASTDotGeneralizedField is an extension and thus parentheses are
        // automatically added when this node is unparsed.
        (yystack_[0].value.expression)->set_parenthesized(false);
        (yylhs.value.expression) = MAKE_NODE(ASTDotGeneralizedField, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 10679 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1387:
#line 9013 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_PATH_EXPRESSION) {
          (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
        } else {
          (yylhs.value.expression) = MAKE_NODE(ASTDotIdentifier, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
        }
      }
#line 10691 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1388:
#line 9021 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* bracket_loc = parser->MakeLocation(yystack_[2].location);
        (yylhs.value.expression) = MAKE_NODE(ASTArrayElement, yystack_[3].location, yystack_[0].location, {(yystack_[3].value.expression), bracket_loc, (yystack_[1].value.expression)});
      }
#line 10700 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1389:
#line 9028 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                              { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 10706 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1390:
#line 9034 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      if (parser->language_options().LanguageFeatureEnabled(
             zetasql::FEATURE_V_1_3_ALLOW_DASHES_IN_TABLE_NAME)) {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      } else {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            absl::StrCat(
              "Syntax error: Table name contains '-' character. "
              "It needs to be quoted: ",
              zetasql::ToIdentifierLiteral(
                parser->GetInputText(yystack_[0].location), false)));
      }
    }
#line 10725 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1391:
#line 9058 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
       (yystack_[1].value.expression)->set_parenthesized(true);
       (yylhs.value.expression) = (yystack_[1].value.expression);
      }
#line 10734 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1392:
#line 9063 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTDotGeneralizedField, yystack_[4].location, yystack_[0].location, {(yystack_[4].value.expression), (yystack_[1].value.expression)});
      }
#line 10742 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1393:
#line 9067 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTDotIdentifier, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
      }
#line 10750 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1394:
#line 9074 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUpdateSetValue, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 10758 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1395:
#line 9081 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUpdateItem, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10766 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1396:
#line 9085 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUpdateItem, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10774 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1397:
#line 9092 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = MAKE_NODE(ASTUpdateItemList, yylhs.location, {(yystack_[0].value.node)});
     }
#line 10782 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1398:
#line 9096 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
     }
#line 10790 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1403:
#line 9113 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 10798 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1404:
#line 9117 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 10806 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1405:
#line 9124 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 10814 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1406:
#line 9128 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTInsertValuesRow, yylhs.location, {});
      }
#line 10822 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1407:
#line 9135 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTMergeAction, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
        node->set_action_type(zetasql::ASTMergeAction::INSERT);
        (yylhs.value.node) = node;
      }
#line 10832 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1408:
#line 9141 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          auto* node = MAKE_NODE(ASTMergeAction, yylhs.location, {(yystack_[0].value.node)});
          node->set_action_type(zetasql::ASTMergeAction::UPDATE);
          (yylhs.value.node) = node;
        }
#line 10842 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1409:
#line 9147 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          auto* node = MAKE_NODE(ASTMergeAction, yylhs.location, {});
          node->set_action_type(zetasql::ASTMergeAction::DELETE);
          (yylhs.value.node) = node;
        }
#line 10852 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1410:
#line 9156 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTMergeWhenClause, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
        node->set_match_type(zetasql::ASTMergeWhenClause::MATCHED);
        (yylhs.value.node) = node;
      }
#line 10862 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1411:
#line 9163 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
        {
          auto* node = MAKE_NODE(ASTMergeWhenClause, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
          node->set_match_type(
              zetasql::ASTMergeWhenClause::NOT_MATCHED_BY_TARGET);
          (yylhs.value.node) = node;
        }
#line 10873 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1412:
#line 9171 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTMergeWhenClause, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
        node->set_match_type(
            zetasql::ASTMergeWhenClause::NOT_MATCHED_BY_SOURCE);
        (yylhs.value.node) = node;
      }
#line 10884 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1413:
#line 9181 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTMergeWhenClauseList, yylhs.location, {(yystack_[0].value.node)});
    }
#line 10892 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1414:
#line 9185 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)}), yylhs.location);
    }
#line 10900 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1415:
#line 9193 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10906 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1416:
#line 9194 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10912 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1417:
#line 9200 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTMergeStatement, yylhs.location, {(yystack_[5].value.expression), (yystack_[4].value.node), (yystack_[2].value.node), (yystack_[0].value.expression)});
    }
#line 10920 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1418:
#line 9207 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      parser->WithEndLocation(WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)}), yylhs.location);
    }
#line 10928 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1419:
#line 9214 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCallStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 10936 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1420:
#line 9218 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 10944 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1421:
#line 9225 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 10952 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1422:
#line 9229 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCallStatement, yylhs.location, {(yystack_[2].value.expression)});
      }
#line 10960 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1423:
#line 9235 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10966 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1424:
#line 9237 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 10974 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1425:
#line 9245 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = true;
      }
#line 10982 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1426:
#line 9249 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = false;
      }
#line 10990 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1427:
#line 9257 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = true;
      }
#line 10998 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1428:
#line 9261 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = false;
      }
#line 11006 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1429:
#line 9269 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* drop_all = MAKE_NODE(ASTDropAllRowAccessPoliciesStatement, yylhs.location,
            {(yystack_[0].value.expression)});
        drop_all->set_has_access_keyword((yystack_[3].value.boolean));
        (yylhs.value.node) = drop_all;
      }
#line 11017 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1430:
#line 9279 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 11025 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1431:
#line 9286 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 11033 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1432:
#line 9290 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 11041 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1433:
#line 9296 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.drop_mode) = zetasql::ASTDropStatement::DropMode::RESTRICT; }
#line 11047 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1434:
#line 9297 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                { (yylhs.value.drop_mode) = zetasql::ASTDropStatement::DropMode::CASCADE; }
#line 11053 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1435:
#line 9299 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.drop_mode) = zetasql::ASTDropStatement::DropMode::DROP_MODE_UNSPECIFIED; }
#line 11059 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1436:
#line 9305 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTDropPrivilegeRestrictionStatement, yylhs.location,
                               {(yystack_[3].value.node), (yystack_[1].value.identifier), (yystack_[0].value.expression)});
        node->set_is_if_exists((yystack_[5].value.boolean));
        (yylhs.value.node) = node;
      }
#line 11070 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1437:
#line 9313 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        zetasql::ASTPathExpression* path_expression =
            (yystack_[0].value.expression) == nullptr ? nullptr : MAKE_NODE(ASTPathExpression, yystack_[1].location, {(yystack_[1].value.identifier)});
        // This is a DROP ROW ACCESS POLICY statement.
        auto* drop_row_access_policy = MAKE_NODE(
            ASTDropRowAccessPolicyStatement, yylhs.location, {path_expression, (yystack_[0].value.expression)});
        drop_row_access_policy->set_is_if_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = drop_row_access_policy;
      }
#line 11084 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1438:
#line 9324 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* drop_search_index = MAKE_NODE(
            ASTDropSearchIndexStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
        drop_search_index->set_is_if_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = drop_search_index;
      }
#line 11095 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1439:
#line 9332 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[3].value.table_or_table_function_keywords) == TableOrTableFunctionKeywords::kTableAndFunctionKeywords) {
          // Table functions don't support overloading so this statement doesn't
          // accept any function parameters.
          // (broken link)
          if ((yystack_[0].value.node) != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[0].location,
                                 "Syntax error: Parameters are not supported "
                                 "for DROP TABLE FUNCTION because table "
                                 "functions don't support "
                                 "overloading");
          }
          auto* drop = MAKE_NODE(ASTDropTableFunctionStatement, yylhs.location, {(yystack_[1].value.expression)});
          drop->set_is_if_exists((yystack_[2].value.boolean));
          (yylhs.value.node) = drop;
        } else {
          // This is a DROP TABLE statement. Table function parameters should
          // not be populated.
          if ((yystack_[0].value.node) != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[0].location,
                                 "Syntax error: Unexpected \"(\"");
          }
          auto* drop = MAKE_NODE(ASTDropStatement, yylhs.location, {(yystack_[1].value.expression)});
          drop->set_schema_object_kind(zetasql::SchemaObjectKind::kTable);
          drop->set_is_if_exists((yystack_[2].value.boolean));
          (yylhs.value.node) = drop;
        }
      }
#line 11128 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1440:
#line 9361 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* drop = MAKE_NODE(ASTDropSnapshotTableStatement, yylhs.location, {(yystack_[0].value.expression)});
        drop->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = drop;
      }
#line 11138 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1441:
#line 9367 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* drop = MAKE_NODE(ASTDropEntityStatement, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.expression)});
        drop->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = drop;
      }
#line 11148 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1442:
#line 9374 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // This is a DROP <object_type> <object_name> statement.
        if ((yystack_[4].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kAggregateFunction) {
          // ZetaSQL does not (yet) support DROP AGGREGATE FUNCTION,
          // though it should as per a recent spec.  Currently, table/aggregate
          // functions are dropped via simple DROP FUNCTION statements.
          YYERROR_AND_ABORT_AT(yystack_[4].location,
                               "DROP AGGREGATE FUNCTION is not "
                               "supported, use DROP FUNCTION");
        }
        if ((yystack_[4].value.schema_object_kind_keyword) != zetasql::SchemaObjectKind::kSchema) {
          if ((yystack_[0].value.drop_mode) != ASTDropStatement::DropMode::DROP_MODE_UNSPECIFIED) {
            YYERROR_AND_ABORT_AT(
              yystack_[0].location, absl::StrCat(
              "Syntax error: '",
              zetasql::ASTDropStatement::GetSQLForDropMode((yystack_[0].value.drop_mode)),
              "' is not supported for DROP ",
              zetasql::SchemaObjectKindToName((yystack_[4].value.schema_object_kind_keyword))));
            }
        }
        if ((yystack_[4].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kFunction) {
            // If no function parameters are given, then all overloads of the
            // named function will be dropped. Note that "DROP FUNCTION FOO()"
            // will drop the zero-argument overload of foo(), rather than
            // dropping all overloads.
            auto* drop_function =
                MAKE_NODE(ASTDropFunctionStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node)});
            drop_function->set_is_if_exists((yystack_[3].value.boolean));
            (yylhs.value.node) = drop_function;
        } else {
          if ((yystack_[1].value.node) != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: Parameters are only "
                                 "supported for DROP FUNCTION");
          }
          if ((yystack_[4].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kMaterializedView) {
            auto* drop_materialized_view =
                MAKE_NODE(ASTDropMaterializedViewStatement, yylhs.location, {(yystack_[2].value.expression)});
            drop_materialized_view->set_is_if_exists((yystack_[3].value.boolean));
            (yylhs.value.node) = drop_materialized_view;
          } else {
            auto* drop = MAKE_NODE(ASTDropStatement, yylhs.location, {(yystack_[2].value.expression)});
            drop->set_schema_object_kind((yystack_[4].value.schema_object_kind_keyword));
            drop->set_is_if_exists((yystack_[3].value.boolean));
            drop->set_drop_mode((yystack_[0].value.drop_mode));
            (yylhs.value.node) = drop;
          }
        }
      }
#line 11202 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1443:
#line 9427 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.statement_list) = MAKE_NODE(ASTStatementList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 11210 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1444:
#line 9431 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.statement_list) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.statement_list), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 11218 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1445:
#line 9437 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.statement_list) = MAKE_NODE(ASTStatementList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 11226 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1446:
#line 9441 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.statement_list) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.statement_list), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 11234 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1447:
#line 9447 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTExecuteIntoClause, yylhs.location, {(yystack_[0].value.node)});
    }
#line 11242 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1448:
#line 9451 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 11250 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1449:
#line 9458 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      auto* alias = MAKE_NODE(ASTAlias, yystack_[0].location, yystack_[0].location, {(yystack_[0].value.identifier)});
      (yylhs.value.node) = MAKE_NODE(ASTExecuteUsingArgument, yylhs.location, {(yystack_[2].value.expression), alias});
    }
#line 11259 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1450:
#line 9463 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTExecuteUsingArgument, yylhs.location, {(yystack_[0].value.expression), nullptr});
    }
#line 11267 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1451:
#line 9472 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTExecuteUsingClause, yylhs.location, {(yystack_[0].value.node)});
    }
#line 11275 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1452:
#line 9476 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
    }
#line 11283 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1453:
#line 9483 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.node);
    }
#line 11291 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1454:
#line 9487 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 11299 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1455:
#line 9495 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTExecuteImmediateStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
    }
#line 11307 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1456:
#line 9502 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
  {
    (yystack_[0].value.statement_list)->set_variable_declarations_allowed(true);
    (yylhs.value.node) = MAKE_NODE(ASTScript, yylhs.location, {(yystack_[0].value.statement_list)});
  }
#line 11316 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1457:
#line 9507 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
  {
    (yystack_[0].value.statement_list)->set_variable_declarations_allowed(true);
    (yylhs.value.node) = MAKE_NODE(ASTScript, yylhs.location, {(yystack_[0].value.statement_list)});
  }
#line 11325 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1458:
#line 9512 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      // Resolve to an empty script.
      zetasql::ASTStatementList* empty_stmt_list = MAKE_NODE(
          ASTStatementList, yylhs.location, {});
      (yylhs.value.node) = MAKE_NODE(ASTScript, yylhs.location, {empty_stmt_list});
    }
#line 11336 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1459:
#line 9522 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.statement_list) = (yystack_[0].value.statement_list);
    }
#line 11344 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1460:
#line 9526 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      // Resolve to an empty statement list.
      (yylhs.value.statement_list) = MAKE_NODE(ASTStatementList, yylhs.location, {});
    }
#line 11353 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1461:
#line 9534 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.statement_list);
      }
#line 11361 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1462:
#line 9538 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 11369 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1463:
#line 9545 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
  {
    zetasql::ASTElseifClause* elseif_clause = MAKE_NODE(
        ASTElseifClause, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.statement_list)});
    (yylhs.value.node) = MAKE_NODE(ASTElseifClauseList, yylhs.location, {elseif_clause});
  }
#line 11379 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1464:
#line 9551 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
  {
    zetasql::ASTElseifClause* elseif_clause = MAKE_NODE(
        ASTElseifClause, yystack_[3].location, {(yystack_[2].value.expression), (yystack_[0].value.statement_list)});
    (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren(
        (yystack_[4].value.node), {parser->WithEndLocation(elseif_clause, yylhs.location)}), yylhs.location);
  }
#line 11390 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1465:
#line 9560 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.node);
    }
#line 11398 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1466:
#line 9564 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 11406 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1467:
#line 9571 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTIfStatement, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.statement_list), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 11414 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1468:
#line 9579 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[2].value.node), yylhs.location);
      }
#line 11422 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1469:
#line 9584 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // This rule produces an error for any IF statement not closed with END
        // IF. Without it, the error would indicate that the parser expected the
        // END keyword without explicitly referencing END IF.
        YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: Expected END IF");
      }
#line 11433 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1470:
#line 9594 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      zetasql::ASTWhenThenClause* when_then_clause = MAKE_NODE(
          ASTWhenThenClause, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.statement_list)});
      (yylhs.value.node) = MAKE_NODE(ASTWhenThenClauseList, yylhs.location, {when_then_clause});
    }
#line 11443 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1471:
#line 9600 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      zetasql::ASTWhenThenClause* when_then_clause = MAKE_NODE(
          ASTWhenThenClause, yystack_[3].location, {(yystack_[2].value.expression), (yystack_[0].value.statement_list)});
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren(
          (yystack_[4].value.node), {parser->WithEndLocation(when_then_clause, yylhs.location)}), yylhs.location);
    }
#line 11454 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1472:
#line 9609 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.expression);
    }
#line 11462 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1473:
#line 9613 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 11470 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1474:
#line 9620 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_CASE_STMT)) {
          YYERROR_AND_ABORT_AT(yystack_[5].location, "Statement CASE...WHEN is not supported");
        }
        (yylhs.value.node) = MAKE_NODE(ASTCaseStatement, yylhs.location, {(yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node)});
      }
#line 11482 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1475:
#line 9630 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                       {
      (yystack_[2].value.statement_list)->set_variable_declarations_allowed(true);
      (yylhs.value.node) = MAKE_NODE(ASTBeginEndBlock, yylhs.location, {(yystack_[2].value.statement_list), (yystack_[1].value.node)});
    }
#line 11491 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1476:
#line 9637 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 11497 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1477:
#line 9639 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                       {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto block = static_cast<zetasql::ASTBeginEndBlock*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      block->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(block, yylhs.location);
    }
#line 11510 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1478:
#line 9650 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                     {
      zetasql::ASTExceptionHandler* handler = MAKE_NODE(
          ASTExceptionHandler, yystack_[3].location, {(yystack_[0].value.statement_list)});
      (yylhs.value.node) = MAKE_NODE(ASTExceptionHandlerList, yystack_[4].location, {handler});
    }
#line 11520 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1479:
#line 9656 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 11528 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1480:
#line 9663 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.expression);
    }
#line 11536 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1481:
#line 9667 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 11544 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1482:
#line 9674 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTIdentifierList, yylhs.location, {(yystack_[0].value.identifier)});
    }
#line 11552 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1483:
#line 9678 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.identifier)}), yylhs.location);
    }
#line 11560 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1484:
#line 9685 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTVariableDeclaration, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
    }
#line 11568 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1485:
#line 9690 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTVariableDeclaration, yylhs.location, {(yystack_[2].value.node), nullptr, (yystack_[0].value.expression)});
    }
#line 11576 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1486:
#line 9697 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTWhileStatement, yylhs.location, {(yystack_[2].value.statement_list)});
    }
#line 11584 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1487:
#line 9703 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 11590 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1488:
#line 9705 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                      {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto loop = static_cast<zetasql::ASTWhileStatement*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      loop->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(loop, yylhs.location);
    }
#line 11603 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1489:
#line 9717 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTWhileStatement, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.statement_list)});
    }
#line 11611 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1490:
#line 9723 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 11617 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1491:
#line 9725 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                       {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto loop = static_cast<zetasql::ASTWhileStatement*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      loop->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(loop, yylhs.location);
    }
#line 11630 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1492:
#line 9737 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTUntilClause, yylhs.location, {(yystack_[0].value.expression)});
    }
#line 11638 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1493:
#line 9744 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
     if (!parser->language_options().LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_3_REPEAT)) {
        YYERROR_AND_ABORT_AT(yystack_[4].location, "REPEAT is not supported");
      }
      (yylhs.value.node) = MAKE_NODE(ASTRepeatStatement, yylhs.location, {(yystack_[3].value.statement_list), (yystack_[2].value.node)});
    }
#line 11650 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1494:
#line 9754 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 11656 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1495:
#line 9756 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                        {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto loop = static_cast<zetasql::ASTRepeatStatement*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      loop->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(loop, yylhs.location);
    }
#line 11669 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1496:
#line 9768 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
     if (!parser->language_options().LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_3_FOR_IN)) {
        YYERROR_AND_ABORT_AT(yystack_[9].location, "FOR...IN is not supported");
      }
      (yylhs.value.node) = MAKE_NODE(ASTForInStatement, yylhs.location, {(yystack_[8].value.identifier), (yystack_[5].value.query), (yystack_[2].value.statement_list)});
    }
#line 11681 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1497:
#line 9778 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 11687 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1498:
#line 9780 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                        {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto loop = static_cast<zetasql::ASTForInStatement*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      loop->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(loop, yylhs.location);;
    }
#line 11700 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1499:
#line 9792 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      CHECK_LABEL_SUPPORT((yystack_[0].value.identifier), yystack_[0].location);
      zetasql::ASTBreakStatement* stmt;
      if ((yystack_[0].value.identifier) == nullptr) {
        stmt = MAKE_NODE(ASTBreakStatement, yylhs.location, {});
      } else {
        auto label = MAKE_NODE(ASTLabel, yystack_[0].location, {(yystack_[0].value.identifier)});
        stmt = MAKE_NODE(ASTBreakStatement, yylhs.location, {label});
      }
      stmt->set_keyword(zetasql::ASTBreakContinueStatement::BREAK);
      (yylhs.value.node) = stmt;
    }
#line 11717 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1500:
#line 9805 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      CHECK_LABEL_SUPPORT((yystack_[0].value.identifier), yystack_[0].location);
      zetasql::ASTBreakStatement* stmt;
      if ((yystack_[0].value.identifier) == nullptr) {
        stmt = MAKE_NODE(ASTBreakStatement, yylhs.location, {});
      } else {
        auto label = MAKE_NODE(ASTLabel, yystack_[0].location, {(yystack_[0].value.identifier)});
        stmt = MAKE_NODE(ASTBreakStatement, yylhs.location, {label});
      }
      stmt->set_keyword(zetasql::ASTBreakContinueStatement::LEAVE);
      (yylhs.value.node) = stmt;
    }
#line 11734 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1501:
#line 9821 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      CHECK_LABEL_SUPPORT((yystack_[0].value.identifier), yystack_[0].location);
      zetasql::ASTContinueStatement* stmt;
      if ((yystack_[0].value.identifier) == nullptr) {
        stmt = MAKE_NODE(ASTContinueStatement, yylhs.location, {});
      } else {
        auto label = MAKE_NODE(ASTLabel, yystack_[0].location, {(yystack_[0].value.identifier)});
        stmt = MAKE_NODE(ASTContinueStatement, yylhs.location, {label});
      }
      stmt->set_keyword(zetasql::ASTBreakContinueStatement::CONTINUE);
      (yylhs.value.node) = stmt;
    }
#line 11751 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1502:
#line 9834 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      CHECK_LABEL_SUPPORT((yystack_[0].value.identifier), yystack_[0].location);
      zetasql::ASTContinueStatement* stmt;
      if ((yystack_[0].value.identifier) == nullptr) {
        stmt = MAKE_NODE(ASTContinueStatement, yylhs.location, {});
      } else {
        auto label = MAKE_NODE(ASTLabel, yystack_[0].location, {(yystack_[0].value.identifier)});
        stmt = MAKE_NODE(ASTContinueStatement, yylhs.location, {label});
      }
      stmt->set_keyword(zetasql::ASTBreakContinueStatement::ITERATE);
      (yylhs.value.node) = stmt;
    }
#line 11768 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1503:
#line 9852 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTReturnStatement, yylhs.location, {});
    }
#line 11776 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1504:
#line 9859 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTRaiseStatement, yylhs.location);
    }
#line 11784 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1505:
#line 9863 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTRaiseStatement, yylhs.location, {(yystack_[0].value.expression)});
    }
#line 11792 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1506:
#line 9869 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        ast_statement_properties->statement_level_hints = (yystack_[1].value.node);
        // The parser will complain about the remainder of the input if we let
        // the tokenizer continue to produce tokens, because we don't have any
        // grammar for the rest of the input.
        tokenizer->SetForceTerminate();
        (yylhs.value.ast_node_kind) = (yystack_[0].value.ast_node_kind);
      }
#line 11805 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1507:
#line 9880 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                                                 { (yylhs.value.ast_node_kind) = (yystack_[0].value.ast_node_kind); }
#line 11811 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1508:
#line 9881 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTQueryStatement::kConcreteNodeKind; }
#line 11817 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1509:
#line 9882 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
             { (yylhs.value.ast_node_kind) = zetasql::ASTQueryStatement::kConcreteNodeKind; }
#line 11823 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1510:
#line 9887 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // Set statement properties node_kind before finishing parsing, so that
        // in the case of a syntax error after "TABLE", ParseNextStatementKind()
        // still returns ASTCreateTableStatement::kConcreteNodeKind.
        ast_statement_properties->node_kind =
            zetasql::ASTCreateTableStatement::kConcreteNodeKind;
      }
#line 11835 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1511:
#line 9897 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
         { ast_statement_properties->is_create_table_as_select = true; }
#line 11841 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1514:
#line 9904 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        ast_statement_properties->create_scope = (yystack_[0].value.create_scope);
      }
#line 11849 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1515:
#line 9909 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTExplainStatement::kConcreteNodeKind; }
#line 11855 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1516:
#line 9910 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = (yystack_[0].value.ast_node_kind); }
#line 11861 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1517:
#line 9912 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDefineTableStatement::kConcreteNodeKind; }
#line 11867 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1518:
#line 9914 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTExecuteImmediateStatement::kConcreteNodeKind; }
#line 11873 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1519:
#line 9916 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTExportDataStatement::kConcreteNodeKind; }
#line 11879 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1520:
#line 9918 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTExportModelStatement::kConcreteNodeKind; }
#line 11885 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1521:
#line 9919 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTInsertStatement::kConcreteNodeKind; }
#line 11891 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1522:
#line 9920 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTUpdateStatement::kConcreteNodeKind; }
#line 11897 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1523:
#line 9921 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTDeleteStatement::kConcreteNodeKind; }
#line 11903 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1524:
#line 9922 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTMergeStatement::kConcreteNodeKind; }
#line 11909 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1525:
#line 9924 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCloneDataStatement::kConcreteNodeKind; }
#line 11915 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1526:
#line 9926 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAuxLoadDataStatement::kConcreteNodeKind; }
#line 11921 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1527:
#line 9928 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDescribeStatement::kConcreteNodeKind; }
#line 11927 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1528:
#line 9929 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
             { (yylhs.value.ast_node_kind) = zetasql::ASTShowStatement::kConcreteNodeKind; }
#line 11933 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1529:
#line 9931 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTDropPrivilegeRestrictionStatement::kConcreteNodeKind;
      }
#line 11941 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1530:
#line 9935 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTDropAllRowAccessPoliciesStatement::kConcreteNodeKind;
      }
#line 11949 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1531:
#line 9939 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDropRowAccessPolicyStatement::kConcreteNodeKind; }
#line 11955 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1532:
#line 9941 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDropSearchIndexStatement::kConcreteNodeKind; }
#line 11961 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1533:
#line 9943 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.table_or_table_function_keywords) == TableOrTableFunctionKeywords::kTableAndFunctionKeywords) {
          (yylhs.value.ast_node_kind) = zetasql::ASTDropTableFunctionStatement::kConcreteNodeKind;
        } else {
          (yylhs.value.ast_node_kind) = zetasql::ASTDropStatement::kConcreteNodeKind;
        }
      }
#line 11973 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1534:
#line 9951 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDropSnapshotTableStatement::kConcreteNodeKind; }
#line 11979 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1535:
#line 9953 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDropEntityStatement::kConcreteNodeKind; }
#line 11985 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1536:
#line 9955 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        switch ((yystack_[0].value.schema_object_kind_keyword)) {
          case zetasql::SchemaObjectKind::kFunction:
            (yylhs.value.ast_node_kind) = zetasql::ASTDropFunctionStatement::kConcreteNodeKind;
            break;
          case zetasql::SchemaObjectKind::kMaterializedView:
            (yylhs.value.ast_node_kind) = zetasql::ASTDropMaterializedViewStatement::kConcreteNodeKind;
            break;
          default:
            (yylhs.value.ast_node_kind) = zetasql::ASTDropStatement::kConcreteNodeKind;
            break;
        }
      }
#line 12003 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1537:
#line 9968 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTGrantStatement::kConcreteNodeKind; }
#line 12009 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1538:
#line 9969 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTRevokeStatement::kConcreteNodeKind; }
#line 12015 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1539:
#line 9970 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTRenameStatement::kConcreteNodeKind; }
#line 12021 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1540:
#line 9971 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTBeginStatement::kConcreteNodeKind; }
#line 12027 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1541:
#line 9972 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTBeginStatement::kConcreteNodeKind; }
#line 12033 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1542:
#line 9974 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTSetTransactionStatement::kConcreteNodeKind; }
#line 12039 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1543:
#line 9976 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTSingleAssignment::kConcreteNodeKind; }
#line 12045 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1544:
#line 9978 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTParameterAssignment::kConcreteNodeKind; }
#line 12051 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1545:
#line 9980 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTSystemVariableAssignment::kConcreteNodeKind; }
#line 12057 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1546:
#line 9982 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAssignmentFromStruct::kConcreteNodeKind; }
#line 12063 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1547:
#line 9983 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTCommitStatement::kConcreteNodeKind; }
#line 12069 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1548:
#line 9984 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                 { (yylhs.value.ast_node_kind) = zetasql::ASTRollbackStatement::kConcreteNodeKind; }
#line 12075 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1549:
#line 9986 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTStartBatchStatement::kConcreteNodeKind; }
#line 12081 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1550:
#line 9987 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.ast_node_kind) = zetasql::ASTRunBatchStatement::kConcreteNodeKind; }
#line 12087 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1551:
#line 9989 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAbortBatchStatement::kConcreteNodeKind; }
#line 12093 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1552:
#line 9991 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterDatabaseStatement::kConcreteNodeKind; }
#line 12099 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1553:
#line 9993 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterSchemaStatement::kConcreteNodeKind; }
#line 12105 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1554:
#line 9995 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterTableStatement::kConcreteNodeKind; }
#line 12111 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1555:
#line 9997 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTAlterPrivilegeRestrictionStatement::kConcreteNodeKind;
      }
#line 12119 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1556:
#line 10001 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterRowAccessPolicyStatement::kConcreteNodeKind; }
#line 12125 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1557:
#line 10003 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) =
          zetasql::ASTAlterAllRowAccessPoliciesStatement::kConcreteNodeKind; }
#line 12132 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1558:
#line 10006 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterViewStatement::kConcreteNodeKind; }
#line 12138 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1559:
#line 10008 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterMaterializedViewStatement::kConcreteNodeKind; }
#line 12144 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1560:
#line 10010 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterEntityStatement::kConcreteNodeKind; }
#line 12150 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1561:
#line 10012 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterModelStatement::kConcreteNodeKind; }
#line 12156 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1562:
#line 10014 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateDatabaseStatement::kConcreteNodeKind; }
#line 12162 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1563:
#line 10017 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateConstantStatement::kConcreteNodeKind;
      }
#line 12170 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1564:
#line 10022 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateFunctionStatement::kConcreteNodeKind;
      }
#line 12178 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1565:
#line 10026 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateProcedureStatement::kConcreteNodeKind;
      }
#line 12186 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1566:
#line 10031 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateIndexStatement::kConcreteNodeKind; }
#line 12192 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1567:
#line 10033 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateSchemaStatement::kConcreteNodeKind; }
#line 12198 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1568:
#line 10035 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateEntityStatement::kConcreteNodeKind; }
#line 12204 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1569:
#line 10044 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateTableStatement::kConcreteNodeKind;
      }
#line 12212 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1570:
#line 10048 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateModelStatement::kConcreteNodeKind;
      }
#line 12220 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1571:
#line 10053 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateTableFunctionStatement::kConcreteNodeKind;
      }
#line 12228 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1572:
#line 10057 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateExternalTableStatement::kConcreteNodeKind;
      }
#line 12236 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1573:
#line 10061 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreatePrivilegeRestrictionStatement::kConcreteNodeKind;
      }
#line 12244 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1574:
#line 10065 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateRowAccessPolicyStatement::kConcreteNodeKind; }
#line 12250 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1575:
#line 10067 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateViewStatement::kConcreteNodeKind;
      }
#line 12258 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1576:
#line 10071 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateMaterializedViewStatement::kConcreteNodeKind; }
#line 12264 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1577:
#line 10073 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateSnapshotTableStatement::kConcreteNodeKind; }
#line 12270 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1578:
#line 10075 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCallStatement::kConcreteNodeKind; }
#line 12276 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1579:
#line 10077 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTReturnStatement::kConcreteNodeKind; }
#line 12282 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1580:
#line 10079 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTImportStatement::kConcreteNodeKind; }
#line 12288 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1581:
#line 10081 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTModuleStatement::kConcreteNodeKind; }
#line 12294 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1582:
#line 10083 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAnalyzeStatement::kConcreteNodeKind; }
#line 12300 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1583:
#line 10085 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAssertStatement::kConcreteNodeKind; }
#line 12306 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1584:
#line 10087 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTTruncateStatement::kConcreteNodeKind; }
#line 12312 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1585:
#line 10089 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTIfStatement::kConcreteNodeKind; }
#line 12318 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1586:
#line 10091 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTWhileStatement::kConcreteNodeKind; }
#line 12324 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1587:
#line 10093 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTWhileStatement::kConcreteNodeKind; }
#line 12330 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1588:
#line 10095 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTVariableDeclaration::kConcreteNodeKind; }
#line 12336 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1589:
#line 10097 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTBreakStatement::kConcreteNodeKind; }
#line 12342 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1590:
#line 10099 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTBreakStatement::kConcreteNodeKind; }
#line 12348 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1591:
#line 10101 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTContinueStatement::kConcreteNodeKind; }
#line 12354 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1592:
#line 10103 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTContinueStatement::kConcreteNodeKind; }
#line 12360 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1593:
#line 10105 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTRaiseStatement::kConcreteNodeKind; }
#line 12366 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1594:
#line 10107 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTForInStatement::kConcreteNodeKind; }
#line 12372 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1595:
#line 10109 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTRepeatStatement::kConcreteNodeKind; }
#line 12378 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1596:
#line 10111 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTBeginStatement::kConcreteNodeKind; }
#line 12384 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1597:
#line 10113 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTWhileStatement::kConcreteNodeKind; }
#line 12390 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1598:
#line 10115 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTWhileStatement::kConcreteNodeKind; }
#line 12396 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1599:
#line 10117 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTForInStatement::kConcreteNodeKind; }
#line 12402 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1600:
#line 10119 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTRepeatStatement::kConcreteNodeKind; }
#line 12408 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1601:
#line 10125 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
          zetasql::FEATURE_SPANNER_LEGACY_DDL)) {
              YYERROR_AND_ABORT_AT(yystack_[2].location, "PRIMARY KEY must be defined in the "
                "table element list as column attribute or constraint.");
        }
        (yylhs.value.node) = MAKE_NODE(ASTPrimaryKey, yylhs.location, {(yystack_[0].value.node)});
      }
#line 12421 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1602:
#line 10137 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
          zetasql::FEATURE_SPANNER_LEGACY_DDL)) {
            YYERROR_AND_ABORT_AT(yystack_[3].location, "Syntax error: Expected end of input but "
              "got \",\"");
        }
        auto* clause = MAKE_NODE(ASTSpannerInterleaveClause, yylhs.location, {(yystack_[0].value.expression)});
        clause->set_type(zetasql::ASTSpannerInterleaveClause::IN);
        (yylhs.value.node) = clause;
      }
#line 12436 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1603:
#line 10147 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 12442 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1604:
#line 10153 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
          zetasql::FEATURE_SPANNER_LEGACY_DDL)) {
            YYERROR_AND_ABORT_AT(yystack_[5].location, "Syntax error: Expected end of input but "
              "got \",\"");
        }

        auto* clause = MAKE_NODE(ASTSpannerInterleaveClause, yylhs.location, {(yystack_[1].value.expression)});
        clause->set_action((yystack_[0].value.foreign_key_action));
        clause->set_type(zetasql::ASTSpannerInterleaveClause::IN_PARENT);
        (yylhs.value.node) = clause;
      }
#line 12459 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1605:
#line 10165 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 12465 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1606:
#line 10170 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
          zetasql::FEATURE_SPANNER_LEGACY_DDL)) {
            YYERROR_AND_ABORT_AT(yystack_[1].location, "PRIMARY KEY must be defined in the "
                "table element list as column attribute or constraint.");
        }

        (yylhs.value.node) = MAKE_NODE(ASTSpannerTableOptions, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 12479 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1607:
#line 10179 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 12485 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1608:
#line 10184 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
          zetasql::FEATURE_SPANNER_LEGACY_DDL)) {
            YYERROR_AND_ABORT_AT(
              yystack_[0].location, "null_filtered is not a supported object type");
        }
        (yylhs.value.boolean) = true;
      }
#line 12498 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1609:
#line 10192 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = false; }
#line 12504 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1610:
#line 10199 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTGeneratedColumnInfo, yylhs.location, {(yystack_[2].value.expression)});
        node->set_stored_mode(zetasql::ASTGeneratedColumnInfo::STORED);
        (yylhs.value.node) = node;
      }
#line 12514 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1611:
#line 10204 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 12520 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1612:
#line 10208 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 12526 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1613:
#line 10209 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 12532 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1614:
#line 10214 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        // Feature-checking here would make parser reduce and error out
        // too early, so we rely on the check in spanner_alter_column_action.
        (yylhs.value.node) = MAKE_NODE(ASTColumnAttributeList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 12542 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1615:
#line 10219 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 12548 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1616:
#line 10226 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
          zetasql::FEATURE_SPANNER_LEGACY_DDL)) {
            YYERROR_AND_ABORT_AT(yystack_[3].location,
              "Expected keyword DROP or keyword SET but got identifier");
        }
        if ((yystack_[5].value.boolean)) {
          YYERROR_AND_ABORT_AT(yystack_[5].location,
            "Syntax error: IF EXISTS is not supported");
        }
        auto* schema = parser->WithEndLocation(
            WithExtraChildren((yystack_[3].value.node), {
              (yystack_[1].value.node),
              (yystack_[2].value.node),
              (yystack_[0].value.node)
            }), yylhs.location);
        auto* column = MAKE_NODE(ASTColumnDefinition, yylhs.location,
          {(yystack_[4].value.identifier), schema});
        (yylhs.value.node) = MAKE_NODE(ASTSpannerAlterColumnAction, yylhs.location,
          {parser->WithStartLocation(column, yystack_[4].location)});
      }
#line 12574 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1617:
#line 10251 "external/com_google_zetasql/zetasql/parser/bison_parser.y"
      {
        if (!parser->language_options().LanguageFeatureEnabled(
          zetasql::FEATURE_SPANNER_LEGACY_DDL)) {
            YYERROR_AND_ABORT_AT(yystack_[2].location, "Syntax error: Unexpected keyword ON");
        }
        auto* node = MAKE_NODE(ASTSpannerSetOnDeleteAction, yylhs.location, {});
        node->set_action((yystack_[0].value.foreign_key_action));
        (yylhs.value.node) = node;
      }
#line 12588 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"
    break;


#line 12592 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"

            default:
              break;
            }
        }
#if YY_EXCEPTIONS
      catch (const syntax_error& yyexc)
        {
          YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
          error (yyexc);
          YYERROR;
        }
#endif // YY_EXCEPTIONS
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, YY_MOVE (yylhs));
    }
    goto yynewstate;


  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        context yyctx (*this, yyla);
        std::string msg = yysyntax_error_ (yyctx);
        error (yyla.location, YY_MOVE (msg));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.kind () == symbol_kind::S_YYEOF)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:
    /* Pacify compilers when the user code never invokes YYERROR and
       the label yyerrorlab therefore never appears in user code.  */
    if (false)
      YYERROR;

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    YY_STACK_PRINT ();
    goto yyerrlab1;


  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    // Pop stack until we find a state that shifts the error token.
    for (;;)
      {
        yyn = yypact_[+yystack_[0].state];
        if (!yy_pact_value_is_default_ (yyn))
          {
            yyn += symbol_kind::S_YYerror;
            if (0 <= yyn && yyn <= yylast_
                && yycheck_[yyn] == symbol_kind::S_YYerror)
              {
                yyn = yytable_[yyn];
                if (0 < yyn)
                  break;
              }
          }

        // Pop the current state because it cannot handle the error token.
        if (yystack_.size () == 1)
          YYABORT;

        yyerror_range[1].location = yystack_[0].location;
        yy_destroy_ ("Error: popping", yystack_[0]);
        yypop_ ();
        YY_STACK_PRINT ();
      }
    {
      stack_symbol_type error_token;

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = state_type (yyn);
      yypush_ ("Shifting", YY_MOVE (error_token));
    }
    goto yynewstate;


  /*-------------------------------------.
  | yyacceptlab -- YYACCEPT comes here.  |
  `-------------------------------------*/
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;


  /*-----------------------------------.
  | yyabortlab -- YYABORT comes here.  |
  `-----------------------------------*/
  yyabortlab:
    yyresult = 1;
    goto yyreturn;


  /*-----------------------------------------------------.
  | yyreturn -- parsing is finished, return the result.  |
  `-----------------------------------------------------*/
  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    YY_STACK_PRINT ();
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
#if YY_EXCEPTIONS
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack\n";
        // Do not try to display the values of the reclaimed symbols,
        // as their printers might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
#endif // YY_EXCEPTIONS
  }

  void
  BisonParserImpl::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what ());
  }

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  BisonParserImpl::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr;
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              else
                goto append;

            append:
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }

  std::string
  BisonParserImpl::symbol_name (symbol_kind_type yysymbol)
  {
    return yytnamerr_ (yytname_[yysymbol]);
  }



  // BisonParserImpl::context.
  BisonParserImpl::context::context (const BisonParserImpl& yyparser, const symbol_type& yyla)
    : yyparser_ (yyparser)
    , yyla_ (yyla)
  {}

  int
  BisonParserImpl::context::expected_tokens (symbol_kind_type yyarg[], int yyargn) const
  {
    // Actual number of expected tokens
    int yycount = 0;

    int yyn = yypact_[+yyparser_.yystack_[0].state];
    if (!yy_pact_value_is_default_ (yyn))
      {
        /* Start YYX at -YYN if negative to avoid negative indexes in
           YYCHECK.  In other words, skip the first -YYN actions for
           this state because they are default actions.  */
        int yyxbegin = yyn < 0 ? -yyn : 0;
        // Stay within bounds of both yycheck and yytname.
        int yychecklim = yylast_ - yyn + 1;
        int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
        for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
          if (yycheck_[yyx + yyn] == yyx && yyx != symbol_kind::S_YYerror
              && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
            {
              if (!yyarg)
                ++yycount;
              else if (yycount == yyargn)
                return 0;
              else
                yyarg[yycount++] = YY_CAST (symbol_kind_type, yyx);
            }
      }

    if (yyarg && yycount == 0 && 0 < yyargn)
      yyarg[0] = symbol_kind::S_YYEMPTY;
    return yycount;
  }



  int
  BisonParserImpl::yy_syntax_error_arguments_ (const context& yyctx,
                                                 symbol_kind_type yyarg[], int yyargn) const
  {
    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state merging
         (from LALR or IELR) and default reductions corrupt the expected
         token list.  However, the list is correct for canonical LR with
         one exception: it will still contain any token that will not be
         accepted due to an error action in a later state.
    */

    if (!yyctx.lookahead ().empty ())
      {
        if (yyarg)
          yyarg[0] = yyctx.token ();
        int yyn = yyctx.expected_tokens (yyarg ? yyarg + 1 : yyarg, yyargn - 1);
        return yyn + 1;
      }
    return 0;
  }

  // Generate an error message.
  std::string
  BisonParserImpl::yysyntax_error_ (const context& yyctx) const
  {
    // Its maximum.
    enum { YYARGS_MAX = 5 };
    // Arguments of yyformat.
    symbol_kind_type yyarg[YYARGS_MAX];
    int yycount = yy_syntax_error_arguments_ (yyctx, yyarg, YYARGS_MAX);

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
      default: // Avoid compiler warnings.
        YYCASE_ (0, YY_("syntax error"));
        YYCASE_ (1, YY_("syntax error, unexpected %s"));
        YYCASE_ (2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_ (3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_ (4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_ (5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    std::ptrdiff_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += symbol_name (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short BisonParserImpl::yypact_ninf_ = -2326;

  const short BisonParserImpl::yytable_ninf_ = -1461;

  const short
  BisonParserImpl::yypact_[] =
  {
     754,  2313,  4152,  2313,  4152,   946, 13501, 21238,   459,   396,
   21547,   744,   502,   307, -2326,   710,   946, 21856, 24637,   649,
    1309,   586, 13501,   537, 31126,   657,   537,   787, -2326,    90,
     681,  2313,   494, 23401,   169, -2326,   736, 31126, 31126, 23401,
     537,   773, 31435,   112,   672, 31126, -2326,   941, -2326, -2326,
   -2326, -2326, -2326, -2326,   417, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,   794, -2326,
     606, -2326,   606, -2326,   772, -2326,  3216,   490,   878, 24946,
   -2326, -2326, 16294, -2326, -2326, -2326, -2326, -2326,   885, -2326,
     999, -2326, -2326, -2326, -2326, -2326, 13501, 13501, 31126,  3023,
   31126, 31126, 31126, 31126, 31126,  4152,   880,  4152, -2326, 13501,
    1011, -2326, -2326, -2326,   991,  4152, -2326, -2326,   177, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326,  1037, -2326,  1046,
   -2326,  2785, -2326, -2326, -2326, -2326, -2326, -2326,  6615, -2326,
   15367, 15367, -2326, -2326, -2326, -2326, -2326,   936,  9119,  1055,
   -2326,   946,  1066, -2326, -2326, -2326, 13501, -2326, 25255, 13501,
   -2326,  1071, -2326,   912, -2326,  1087, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326,  1091,  1103, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326,  1124,  1151,  1176, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326,  1180, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326,  1184, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,  1178, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,  1182, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,  1187,  1193,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, 13501, -2326, 28962,  9432,   621, -2326, -2326,  1195,
   -2326, -2326, -2326, -2326,  1174,   438,  1189,  9745,  1000, -2326,
   23710, 24019, -2326, -2326,  1070,  1073,   958, -2326, -2326,   183,
   -2326,  1005, -2326,  1191,  4737,   496,   946, -2326, -2326, 10058,
    1006,  1014, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
    1202, -2326,  1203, -2326, -2326, -2326, -2326, -2326, -2326,  1190,
   -2326,  1194, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326,  1175, -2326, -2326, -2326,  1201, -2326, -2326,
   -2326,  1204, -2326, -2326, -2326, -2326,   838, -2326, -2326,  1179,
     955, 31126,   485, 31126, -2326, 31126,  1084, 25564,   417,  1205,
     207,  1206, 31126, -2326,  1164, -2326, -2326,   952,  1023, -2326,
   -2326,   938, -2326, -2326,   924, -2326,   967, -2326,  1080, -2326,
    1028, -2326,  1148,  1148,  1148,  1222, 31126,  4599, -2326, -2326,
   -2326,   705,  1144, -2326, -2326, 31126,   968,   975,  1092,  1027,
     963,  1148,  1148,  1148, 13501, -2326,  1112, 31126,  1002, -2326,
    1136,  1241, -2326,  1242, -2326, -2326, -2326, 13814,    55,    76,
   31126,  1150, -2326, -2326,   948,  1183, -2326, 31126, -2326, 31126,
    1226,  1225,  1231,   890,   946, -2326, -2326,  1040,   403, -2326,
    1253, -2326,   946,  1256,  1171, -2326, -2326, -2326,   946,   946,
   21547, -2326, -2326, 31126,   794, -2326, 14436, -2326,  1175,  1225,
   -2326,  1183,   184,  1237, 24328, 22165,   757, -2326, 31126,    44,
    1263,  1020, -2326,  1221, -2326,  1157, -2326,   966,    62, -2326,
     885,  6928, -2326, 28962,  1152, 13809,  1197,  1011,  4152,   977,
   -2326, -2326, -2326, -2326, 17839, -2326, -2326,  1219,  1060,   998,
    3484, -2326,    29,  1011, -2326, -2326,  1213, -2326, -2326,   439,
     509,  1013, -2326, -2326, -2326, 22474, -2326, -2326,  1145,   123,
   -2326, -2326, -2326, -2326, -2326,  1130, -2326, -2326, -2326, -2326,
     996,  1095, -2326,   533, -2326, -2326, -2326, -2326, -2326,  1132,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,  1153, -2326,
    1156, -2326, -2326, -2326,  1273, -2326, -2326, -2326,   794,  1293,
     606, -2326,   606, -2326,  7241,  1198,  4116, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326,  1175, -2326,   396, 21238, -2326,
   13501, 14124, 10371,  1307, 13501, 15985,   709, 29889, 21238, -2326,
   18457, 31126, -2326, 13501, 10684,   827, -2326,  1251, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, 13501, 13501, 13501, 13501, 13501,
   -2326, -2326, -2326, 25873, -2326, -2326, 13501, -2326, -2326,   535,
   -2326, 13501,   142, 13501, 13501, 13501, 13501,  5050, 13501, 13501,
     946,    91, -2326, 28962, 13501, -2326, -2326, -2326, 21238, -2326,
   -2326, -2326, 14432, -2326, 13501, -2326, 31126, -2326, -2326, -2326,
    1039, 26182, -2326, -2326, 13501, 13501, 13501, -2326, -2326,  1030,
   13501, -2326, -2326, -2326,  5363,   836, -2326,   794, 14745, -2326,
   -2326, -2326,  1280,  1283, 10997,  1223,  1232,  1254,   982, -2326,
   15056, -2326, 13501, -2326, 13501, -2326, -2326, -2326, 31126,   199,
    1025,  1264, -2326, 13501, 21547, 21547, -2326,    76,  1228, -2326,
    1075, -2326,  1185,  1258,  1059, -2326, -2326, -2326,  1258,   284,
    1034,   743,   125,  1231,  1199,   414, -2326,  1029,  1253, 13501,
   31126, 13501, 13501, -2326,  1336,  1200, -2326, -2326, -2326,  1148,
    1108, -2326,  1281, 31126, 26491, 31126, 18766,  1049, -2326, -2326,
    1347, -2326,  1348,  1195, -2326,  5676, 31126,   946,  1185,  1148,
    1117,  1148,  1148, 31126, 31126, 31126, 17220,  1186, -2326,   586,
     400, -2326, -2326, 31126, 26800, 31126,  1079, -2326, -2326,   143,
    1175, -2326, -2326, -2326, 31126, -2326,   441, 31126, -2326, 24946,
    1267, -2326,  1233, 14747, 31126, 15058, 13501, 27109,   542, 31126,
   -2326, -2326,   417,  1305, 13501,   757, -2326,   741,   741, -2326,
   -2326,  1171, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   14125, 31126,  1183, -2326,  1353, -2326, -2326, -2326, -2326, -2326,
   -2326,   946, -2326, -2326, -2326, 11310,  1081, -2326,  1356, 31126,
   -2326,  1157,  1102, -2326, -2326,  1140,  1319, -2326,  7554, -2326,
   -2326, 31126,  1358, 31126, 27418, -2326, -2326, -2326, -2326, -2326,
   28962, -2326, 13501,   116,  4152,  1359,  1244,  1303, 31126, 13501,
    1310,  1149,  1363, 13501,  1308,  4152,  4152, 31126, 31126, 31126,
   31126, 31126, -2326, -2326, -2326,   808,   357, -2326, -2326, 31126,
    1364,  1367,  1368, -2326,  1116, -2326,  1082, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326,  1120, -2326,  1240,  1181,  1105,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,   271,
    1171, -2326,   741,   741,   794, 28962, -2326, 13501, -2326,  1379,
    1374, 17838, 13501, -2326, 19382,   396, 19692,  1272, -2326, -2326,
    1378, -2326, -2326, -2326, 21238, -2326,  1389,  1349, 20001, -2326,
   20928, -2326,   910,  1078,  1301, 20310,   826, 31126, -2326, 29889,
    1323, -2326,  1335,  3534, -2326, -2326, -2326, 30507,  1032,   827,
     875, -2326, -2326, -2326,   946, 30507, 21237, 30507,   341, -2326,
   -2326, -2326, 28962, -2326, 27727, -2326,   793, 13501, -2326, -2326,
   -2326, -2326, 21545, 22164, 22782,  1096, 23399, -2326, -2326, 13501,
   13501,  1171, 13501, 13501, -2326, -2326, -2326,  1243,  1208, -2326,
    1297, 31126, -2326, -2326, 28962, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326,   153, -2326,   778, -2326, -2326, 28962,  1393,
   -2326, -2326, -2326,  1104,  1258, -2326,  1166,  1311, 31126,  1258,
   31126, -2326,  1258,  1126,  1258,  1258,    80,  1207,  1118, -2326,
    1143, -2326, -2326,  1291, 31126,   586, -2326, -2326,  1370,  1407,
   28962,   993, 28962, 28962,   396,  1188,  1320,  1148, -2326,    98,
     107,    97,   230,    96,    74,  1158, -2326,  1416,    98, -2326,
   -2326,   443, -2326,  1414, -2326, 21547, -2326, 31126, 31126, -2326,
   -2326, -2326, -2326, -2326,  1350,   613,  1196,  1325,  1148, 31126,
   31126,   784,  1175,  1420, 31126,  1306, 31126, -2326,  1384,   586,
     470, 31126, -2326,  1175, 31126, -2326, 31126, 31126,   586,  1421,
   31126,   162, 31126, -2326,  1195, -2326, 13501, -2326, -2326, 31126,
   -2326, -2326, -2326, 31126, -2326, 23091, 31126, -2326, -2326,  1313,
   31126, -2326, 13501, -2326, 23709,  1210, -2326, -2326,   155,   155,
   -2326, 19075, -2326, -2326, -2326,   818, -2326, -2326, 28962, -2326,
   11310, -2326,  1263, -2326, -2326,  7867,  1381, 13501,  1318,  1429,
    1434,  1435,  1436,  1175, 31126,  1175,  1438,  5989,  1090, -2326,
     820, 24018,  4152, 13501,  1380,  1260,   396,  1146, -2326, -2326,
   28962, 13501, -2326, -2326, 13501, 28962,  1211,  1383, -2326, -2326,
   -2326, -2326, -2326,  1228, -2326,  1185, -2326,  1170, -2326, -2326,
    1034, -2326, -2326, -2326,  1255,   555,  1154,  1258, -2326, -2326,
   -2326, -2326,  1314, -2326,  1185,  1216, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326,   155,   155,  1171, 28962, -2326, -2326,
   13501, 24635, 21238,  1448, 13501, 31126,  1195, -2326, 13501, 13501,
   13501, 21238, -2326,   803, -2326,  1386,   341, 13501,  6615,  1451,
   -2326,  1100, -2326, -2326, 31126, -2326,  1039, 28962, 13501, 13501,
   -2326, 13501, 27109, 28962, 28962,  1458, 28962, 28962,  1419,  1354,
    1467, 28036, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   13501,  1258,  1376,  1258,  1413,   620, 31126,    76, 31126,   178,
   31126, 31126,  1258, 31126,  1258,  1258, -2326,  1282, 22783, -2326,
   -2326, 28345,  8180, 13501, -2326,  1480,  1391, 26800, 31126,    97,
     230,    96,    74,  1158,  1416,   106,  1264,  1315,  1222, -2326,
    1485,  1258,  1258,  1278,  1284,  1316,  1258, -2326, -2326,  1148,
    1148,  1148,  1148,  1148,  1286,  1317,  1148, 31126,  1148,  1322,
     443,  1416,  1416, 11623, -2326, -2326, 31126,  1313,  1398, 26800,
   31126,   589, -2326, 18148,  1109, -2326,   280, -2326,  1498, 13501,
   -2326,   396, -2326,   778,   475,  1175, -2326, -2326, -2326, 28654,
    1264, -2326,  1110,  1175,   778,   407, -2326, 28962, -2326, -2326,
   -2326,   835, 28963,  1274,  1392, -2326, -2326,   812,   757, -2326,
   -2326, 31126, 14436, -2326,  1455, -2326, -2326,    50,  1360,  1504,
   -2326, -2326, 15676,   664,  1319, 28962,   255, -2326, -2326, -2326,
   -2326, -2326,  1114, -2326, -2326,   946, -2326,  6928,   946, -2326,
    4152, -2326, 24945,  1456, 13501,  1326,  1445,  1507,  1394, 28962,
   28962, -2326,  1214,  1220,  1279, -2326,  1143, -2326, -2326, -2326,
   -2326, 31126,  1287,  1290, -2326, -2326, -2326, -2326, 28962, 13501,
    1324, -2326, 28962, -2326, -2326, -2326, 25254,  1349, 28962, -2326,
    1324, -2326, -2326, -2326, -2326, 30507,  4448, 11936, 13501, -2326,
     852, -2326, 28962, 28962, 26489,   890,  1492, -2326, 13501,  1275,
     794,   396, 31126, -2326, -2326, 28962, 31126, 26800, 31126, -2326,
    1264,   586,  1362,  1472,   879, -2326, 31126,    66,   830, 31126,
    1421, 31126, 31126,  1258,   396, -2326,   946, -2326,   931,   956,
   -2326,  1440, -2326,  1175, -2326,  1460, 28962, -2326, 31126,   166,
    1441,  1180, -2326, -2326, -2326, -2326,   277, -2326, 13501, 31126,
   31126,  1348,  1522,  1296, 31126, 31126, 31126, 31126, 31126, 31126,
    1148,  1331, 31126,  1175, 31126,  1338, -2326, -2326, 28962, -2326,
    1401, -2326,  1426,  1233, 31126,   436,  1449, 31126, -2326, -2326,
   19384,  1538, -2326,   972, -2326, -2326, -2326,  1503, 19693, 19693,
   -2326, -2326, -2326, -2326, 25872, -2326,  1549, -2326,  1550, -2326,
     778, -2326,  1485,  1278,  1284, -2326, -2326, -2326, -2326, -2326,
   20002,  1452, 31744, -2326,  1550,   778, -2326, 31126, -2326,  3641,
   29272, -2326, -2326,  1459, -2326, -2326, -2326, 21238,  1554,  1555,
    1115,  1330,  1121, -2326,  8493, 12249,    50, 31126, -2326,  1319,
   -2326,  1446, -2326,  1348,  1450, -2326, 31126, -2326, 29581, -2326,
   29581, -2326,  4152, -2326, 26181, 13501, -2326,  1390,  4152, -2326,
   -2326, -2326,  1355,  1421, -2326, -2326, 28962, 13501,  1567, -2326,
    1570, 13501, -2326, -2326, 26798, 28962, -2326, -2326, 27108,  1222,
    1171,  1578,  1482,  1348,   467,  1491, -2326, -2326, 31126,   106,
   -2326, 13501,  1421,  1586,   586,    94,  1123,  1112,   784,  1357,
    1334,   784,  1348, 31126,  1588, 29581, -2326,  1591, -2326, 29890,
   13501, 16603,   609,    71, 31126, 31126,  1453,  1502, -2326, -2326,
   -2326, 27417,   595, 20002,     6,  1352, 30199,  1125,   313,  1258,
     586, 20311,   501,   443, -2326, -2326, -2326,  1148, -2326,  1483,
    1148,   874,  1478,  1560,  1221,  1175, 31126, 31126, -2326,  1175,
   -2326, -2326, -2326, -2326, -2326, -2326, 21238, 21238, -2326,  1508,
    1503, -2326, 31126, 13501,   778,  1550,  1594, -2326, -2326,  1597,
    1561,   322, -2326, -2326,   976, -2326,  1201,  1264,  1604, -2326,
    1175,   426,  1558,  1608,  1457, -2326,  1550,   862, -2326,   269,
   -2326,   930, -2326, -2326,   179,    10, -2326,  1324, 31126, 13501,
   31126, -2326,  1609, 13501, -2326, 31126, -2326, -2326, -2326, -2326,
    1497,   255,   447, 29272, -2326, 31126,  1610, 13501,   109,  2697,
    2697,  1505, -2326,   -60,  1505, -2326,  4152, 27726,  4152, -2326,
   -2326,  1529, 28035, -2326, -2326, 28962, -2326, 13501, -2326, -2326,
    1616, -2326,   946,  1620,   794,  1361, 31126, 31126,   586, -2326,
   28962,  1529, 12249,  1577, -2326, -2326, -2326, -2326, -2326, 31126,
      61, -2326,   586,  1334,  1412,  1623,  1529, 19693, -2326,  1361,
   -2326,  1361,   615, 29581,  1313, -2326, -2326, 28962, 17221, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326,   608,   897,   946, 13501,
   13501, 13501, -2326, -2326, -2326,  1553,  1625,  1557,   260, -2326,
    1506,  1514,  1519,  1520,  1566, -2326, -2326, 31126,    71, -2326,
   -2326,   313, 31126, 31126, -2326,  1447, -2326, -2326, -2326, 31126,
     313, -2326, -2326,   812, 31126, -2326,  1462, -2326,   586, -2326,
    1636, -2326,   108,   554,  1548,  1417, -2326, -2326, -2326, 31126,
    1639,  1365,  1598, -2326, -2326, 31126,  1157, 31126,  1175, -2326,
   -2326, 21238, -2326,  1501, -2326,  1310, -2326, -2326, -2326, 23092,
   20620, -2326,  1559, 31126, -2326,  1437, -2326, -2326, -2326, -2326,
   -2326,   360,   586,  1352, 23092, -2326, -2326,   188, 13501, -2326,
   13501, 13501,  1599,  1650,   586, -2326,  1652, 11310, 29272,  1233,
   -2326, -2326,  1653, -2326, -2326, 28343, -2326, 13501, -2326, 12249,
     255, -2326, -2326,  1263, -2326,  1657,   -60, 13501, 28962,  1568,
    1573,  1651, -2326, -2326, 31126, -2326, -2326,  1610, 13501,   463,
    2697,  2697, -2326, -2326, -2326,  4152,  1600, 31126,  1512,  1395,
   -2326, 28962, -2326,  1615, 13501,   844,  1406,  1452, 31126,   101,
   -2326,  1621,  1669,   396, -2326, -2326, 17530, -2326,   267,  1361,
    1522,  1382, -2326,  1512, -2326,   189,   586, 31126,  1505,  1401,
   17221, -2326,  1589,  1677, 20929, -2326,   683,  1632, 28962, 28962,
   28962, -2326,  1557, 12562, -2326,   260,  1506, -2326, -2326, 31126,
    1682, -2326,  1681,  1683, 31126,   666,    87, -2326,  1688,   586,
   -2326, -2326,  1571, -2326, -2326,   849,   586,  1459, -2326, -2326,
   -2326, 13501, 13501,  1408,  1222, -2326,  1601, -2326,   746,  1222,
   -2326, 13501,  1647,  1562, -2326, -2326,  1175, -2326, -2326,  1508,
    1264,  1689, -2326, -2326,  1264, 23092, -2326, -2326, -2326,   398,
   -2326, -2326, -2326, -2326, -2326, 13501,  1561,  1641,   152, -2326,
   29579, 28962, 28962, 13501, 13501,  1630, -2326, -2326, -2326,  1221,
   -2326, 31126, -2326, -2326, -2326, -2326,  2697,  2697, -2326, -2326,
     149,  3800, -2326, -2326, 30508,  1690, -2326, -2326, -2326,  1575,
   -2326, 31126,  1542,  1404, 13501, 28962, -2326, -2326,  6302,  1709,
     525,  1457,    72,   778, -2326, -2326,  1525,  1593, -2326, -2326,
   -2326, -2326, -2326, -2326, 31126, -2326, -2326,   586, -2326,  1640,
    1542,  1540, -2326, -2326, -2326, -2326,   299,  1577,   440, -2326,
    1505,  1717,   683,  1505, -2326, -2326,  1624, -2326,  1624,  1624,
     126, 12562,   260,  1719,  1127, -2326, 28962,  1506, -2326, -2326,
    1679, 31126, 13501,   778, -2326,   778, -2326,  1258,  1148,  1613,
   -2326,  1724, -2326,   462, -2326, 13501,  1511, -2326, -2326, 30815,
   28962, 23092, -2326, -2326,  1728, -2326, -2326,   586, -2326, 31124,
    1602, 13501, -2326,  1548, -2326,  1548, -2326, 28962, -2326, -2326,
   -2326, -2326,  1464, 28962, 28962,  1544,  1593,  1157, -2326, -2326,
   -2326, 13501, 13501, -2326, 31126,  1603,  1175,   760, -2326, -2326,
   31126,  1621, 13501, 28962,  8806,  1475,   674,  4498, -2326, -2326,
   -2326, -2326, -2326,   586, -2326, -2326,  1550, -2326,  1619, -2326,
      83,  1112, -2326,   586,  1694,  1528,  1442,  1621, -2326, 31126,
    1112,  1528,    73, -2326, -2326,  1626, -2326, 16912,   126, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326,  1661, -2326,  1506, 13501,
   13501, -2326, -2326, 28036, -2326, 31433,  1129,  1131,  1747,  1747,
    1747,   329, -2326, 28962,    39,  1658, -2326, -2326, 13501, -2326,
   -2326, 13501, 28962, -2326,   586, -2326,  1463, -2326,  1222, -2326,
   -2326, -2326, 29271,  1135,  1175, 31126, -2326,    42,  1749, -2326,
    1401, -2326,  1452, 28962,  1714, -2326, -2326, -2326, -2326, -2326,
    1577,  1755,  1605, -2326, -2326,  1195, -2326, 31126,  1715, 31126,
    1452,   147, -2326, -2326,   208,  1222,   586,  1626,  1758,   565,
   -2326,  1678,   946, -2326, 28962, 28962, -2326, -2326, -2326, -2326,
     766,  1141, -2326, -2326, -2326, -2326, -2326,  1704, -2326, -2326,
     239, -2326,  1670,  1672, 31742, 28962, -2326, -2326, -2326,  1766,
   31126, -2326,   395, -2326, -2326,  1452,   293,  1478,  1457,  8806,
   -2326, 13501,  1421, -2326, -2326,   173, -2326, -2326,  1670,  1457,
   -2326, -2326, 12875, -2326, -2326,  1726, -2326, -2326, 13188,  1142,
   -2326,  1500,  1313,   946, 20929, -2326, -2326,   778, -2326, -2326,
     277,   277,  1606, -2326, -2326,  1481, -2326, -2326,  1509, 13501,
    1175,  1772, -2326,  1479,  1774, -2326, -2326, -2326,   586, -2326,
   32050, -2326, -2326, -2326,  1518, -2326, 32100, -2326, -2326,  1617,
   -2326, 13501, -2326,  1780, -2326,   586, -2326, 20929,   100, -2326,
   -2326, -2326, -2326, -2326,  1147,  3995, 30508,  1162,  1781, 30817,
     757,   181, -2326,  1611,   586, -2326,  1782, -2326, 13501,  1163,
   -2326,  1783,   100, 13501,  1785, -2326,  1167, -2326, -2326,   100,
   -2326, 13501,  1787, -2326,   724, -2326, 30508, -2326, -2326, 31126,
    1774, -2326, -2326,  1539,  1788, -2326, -2326, -2326,  1563,  1577,
   -2326, 28962, 13501, -2326,  1490, -2326, -2326, 28962, 31126, 31126,
   -2326, -2326, -2326, -2326,  1177, -2326, -2326,  1539, -2326, -2326,
    1793, -2326, 28962,  1722, -2326, -2326, -2326, -2326, -2326, 13501,
   31126, 32150, -2326, -2326
  };

  const short
  BisonParserImpl::yydefact_[] =
  {
       0,     0,  1458,     0,     0,  1331,     0,     0,     0,     0,
       0,     0,  1318,     0,  1329,  1400,  1331,     0,     0,     0,
       0,  1340,     0,   164,     0,     0,   164,  1346,  1328,     0,
       0,     0,     0,     0,     0,  1359,     0,     0,     0,     0,
     164,     0,     0,     0,     0,     0,     2,    10,    18,    33,
      34,    36,    35,    42,   158,    43,    44,    73,    45,    46,
      47,    48,    49,    50,    51,    53,    54,    55,    56,    52,
      58,    59,    60,    61,    37,    63,    57,    62,    65,    67,
      68,    69,    70,    72,    71,    78,    79,    74,   744,    80,
     475,   464,   463,   479,     0,   502,     0,     0,     0,     0,
      64,    39,  1350,  1342,    38,  1343,  1344,    41,     0,    40,
       0,    77,    75,    76,    66,  1052,  1473,     0,     0,   164,
     988,   988,     0,   988,   988,  1460,  1504,  1460,  1503,     0,
    1445,    16,    17,  1443,     0,  1456,  1457,     3,     0,    20,
      21,  1476,    22,    23,  1487,    25,  1490,    24,  1494,    26,
    1497,    27,    28,    29,    30,    31,     4,    15,     5,    13,
    1330,     0,     6,  1039,  1040,  1041,  1049,  1050,     0,   869,
       0,     0,   781,   782,   783,   884,   932,     0,     0,     0,
     969,  1331,     0,  1038,   966,   965,     0,   967,     0,     0,
    1036,   970,   968,     0,  1037,     0,  1151,  1152,  1153,  1155,
    1154,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,
    1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,  1174,
    1175,  1178,  1176,  1177,  1179,  1180,  1181,  1182,  1183,  1184,
    1185,  1186,  1187,  1188,  1313,  1189,  1190,  1191,  1193,  1192,
    1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,  1204,  1205,
    1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,  1214,  1215,
    1216,  1217,  1218,  1219,  1221,  1220,  1222,  1223,  1224,  1225,
    1226,  1227,  1228,  1229,  1230,  1231,  1232,  1233,  1234,  1235,
    1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,  1244,  1245,
    1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,  1254,  1255,
    1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1264,  1265,
    1266,  1267,  1269,  1268,  1270,  1271,  1272,  1273,  1274,  1275,
    1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,
    1286,  1287,  1288,  1289,  1290,  1296,  1291,  1292,  1293,  1294,
    1295,  1297,  1298,  1299,  1300,  1301,  1302,  1303,  1304,  1305,
    1308,  1306,  1307,  1309,  1310,  1311,  1312,  1195,  1194,  1314,
    1315,  1316,     0,   808,     7,     0,     0,   801,   798,     0,
     797,   811,   799,   883,     0,     0,     0,     0,     0,   802,
       0,     0,   803,   804,   945,   946,     0,   805,   806,     0,
     807,     0,   809,     0,   709,   718,  1331,   810,   813,     0,
       0,     0,   814,   815,  1034,   788,   789,   790,   791,   792,
       0,   793,     0,   794,   795,   796,   812,   800,  1051,     0,
     888,     0,  1162,  1163,  1181,  1182,  1183,  1222,  1238,  1264,
    1274,  1293,  1294,   887,   898,   896,   897,   909,     8,   841,
       1,     0,   490,   492,   491,   494,     0,   498,   493,   501,
       0,     0,  1323,     0,  1399,     0,   486,     0,  1295,     0,
       0,     0,     0,   720,     0,   176,   270,     0,     0,   123,
     124,     0,   126,   127,     0,   129,     0,   130,     0,   131,
     379,   132,  1426,  1426,  1426,     0,   147,   144,   162,   163,
     161,     0,     0,   172,  1345,     0,     0,     0,     0,     0,
       0,  1426,  1426,  1426,     0,   402,   724,     0,   412,   417,
       0,   410,   413,   579,   416,   767,   766,     0,     0,  1340,
       0,     0,   173,   175,  1232,   401,   449,   988,   160,     0,
     849,  1390,  1385,  1389,  1331,     9,    11,     0,     0,   155,
     157,   159,  1331,   743,   706,   461,   462,   460,  1331,  1331,
       0,   500,    19,   725,   744,   468,     0,   397,   851,   852,
     853,   401,   864,   854,   841,     0,     0,  1356,     0,     0,
    1305,     0,  1363,  1350,  1385,  1354,  1360,  1331,     0,  1413,
    1418,     0,  1421,  1472,     0,     0,     0,     0,  1459,  1479,
    1499,   987,  1501,  1482,     0,  1502,  1500,     0,     0,     0,
       0,    32,     0,  1446,  1444,  1469,     0,    14,    12,     0,
    1318,     0,  1585,  1524,  1508,     0,  1509,  1594,     0,     0,
    1582,  1583,  1541,  1589,  1578,     0,  1547,  1591,  1588,  1523,
       0,     0,  1515,     0,  1537,  1580,  1521,  1592,  1590,     0,
    1587,  1581,  1593,  1539,  1595,  1579,  1538,  1548,     0,  1528,
    1540,  1584,  1522,  1586,     0,  1527,  1516,  1506,   744,     0,
     478,   466,   465,   481,     0,     0,   482,  1055,  1056,  1057,
    1058,  1059,  1060,  1061,  1062,  1063,  1064,  1065,  1066,  1067,
    1068,  1069,  1070,  1071,  1072,  1073,  1074,  1075,  1076,  1077,
    1078,  1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,  1087,
    1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,  1096,  1097,
    1098,  1099,  1100,  1101,  1102,  1103,  1104,  1145,  1105,  1106,
    1107,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,  1116,
    1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,  1125,  1126,
    1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,
    1137,  1138,  1139,  1140,  1141,  1142,  1143,  1144,  1146,  1148,
    1149,  1150,  1147,   885,   886,  1053,  1054,     0,     0,   868,
       0,     0,     0,     0,     0,     0,     0,   821,     0,  1023,
       0,     0,  1048,     0,     0,   840,   762,   972,   753,   754,
     755,   756,   757,   758,   759,     0,     0,     0,     0,     0,
     760,   761,   763,     0,   764,   765,     0,   773,   777,   779,
     771,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1331,     0,   873,   871,     0,   874,   880,   870,     0,   895,
    1022,   927,   921,   924,     0,   926,     0,   938,   934,   933,
       0,     0,   939,   936,     0,     0,     0,   947,   958,     0,
       0,   964,   973,   983,     0,     0,   975,   744,   974,   982,
     976,   977,     0,   812,     0,     0,     0,   709,  1018,  1030,
     529,  1024,     0,  1029,     0,  1031,  1044,  1047,     0,     0,
       0,   737,   480,     0,     0,     0,  1317,  1340,   386,  1322,
       0,  1321,  1428,   396,     0,  1319,  1320,  1324,   396,   183,
    1609,     0,   534,   841,     0,   505,   170,     0,   165,     0,
       0,     0,     0,   721,     0,     0,   122,   125,   128,  1426,
       0,   378,     0,     0,     0,     0,     0,     0,  1339,   145,
     146,   148,   440,     0,   142,     0,     0,  1331,  1428,  1426,
       0,  1426,  1426,     0,     0,     0,  1448,     0,   723,  1340,
     724,   411,   409,     0,     0,     0,     0,   578,   415,   532,
     236,   237,   266,   267,     0,   420,     0,     0,   448,     0,
     451,   174,  1348,     0,     0,     0,     0,     0,   534,     0,
     151,   152,     0,     0,     0,     0,   469,     0,     0,   499,
     722,   706,   859,   860,   861,   858,   399,   855,   856,   857,
       0,     0,   401,   436,     0,   544,   543,  1349,   540,   539,
     541,  1331,  1355,  1357,  1358,     0,     0,  1377,  1364,     0,
     438,  1354,     0,  1365,  1362,     0,  1404,  1414,     0,   619,
     620,  1175,  1313,  1236,  1289,   611,   612,   613,   610,  1420,
     609,   614,     0,  1462,  1460,     0,     0,     0,     0,     0,
    1481,     0,     0,     0,     0,  1460,  1460,   988,   988,   988,
     988,   988,  1468,  1507,  1562,  1323,   183,  1517,  1546,  1295,
       0,     0,     0,  1551,     0,  1552,     0,  1561,  1555,  1556,
    1553,  1554,  1558,  1560,  1525,     0,  1529,     0,     0,     0,
    1536,  1535,  1533,  1518,  1519,  1520,  1526,  1550,  1549,     0,
     706,  1035,     0,     0,   744,   482,   471,     0,  1021,     0,
       0,     0,     0,   954,     0,     0,     0,   881,   920,   940,
       0,   894,   892,   891,   841,   785,     0,     0,     0,   956,
       0,   971,   833,   834,   835,     0,   836,     0,   818,   820,
       0,   780,     0,   819,   774,   778,   772,   832,   838,   839,
     837,   770,   768,   769,  1331,   824,     0,   825,     0,   829,
     830,   831,   872,   893,     0,   925,     0,     0,   931,   929,
     937,   935,     0,     0,     0,     0,     0,   963,   981,     0,
       0,   706,     0,     0,   984,   716,   717,   711,     0,  1017,
    1020,     0,  1026,  1025,  1028,   842,   904,   905,   900,   901,
     902,   899,   903,     0,   907,     0,   736,   910,   495,     0,
     497,   178,   385,     0,   396,  1427,     0,     0,     0,   396,
       0,   182,   396,     0,   396,   396,   396,     0,     0,  1608,
    1327,  1341,   533,     0,     0,  1340,   503,   504,   489,     0,
     167,     0,   166,   168,     0,     0,     0,  1426,  1425,     0,
       0,  1155,  1156,  1191,  1260,  1263,   108,   136,     0,   106,
     107,     0,  1338,     0,  1335,     0,  1337,     0,     0,   439,
     150,   143,  1422,  1419,     0,   534,     0,     0,  1426,     0,
       0,  1424,  1441,  1424,     0,  1454,     0,   254,     0,  1340,
       0,   841,   414,   575,     0,   577,     0,     0,  1340,   279,
       0,     0,   841,   400,     0,   447,     0,  1383,   846,     0,
     844,   850,   845,     0,   843,     0,     0,  1387,  1386,  1381,
     153,   156,     0,   742,   737,   705,   458,   459,     0,     0,
     467,     0,   862,   867,   398,     0,  1361,  1373,  1372,  1374,
       0,  1376,     0,   437,  1366,     0,  1402,     0,     0,     0,
       0,     0,     0,   604,     0,   603,     0,     0,     0,   601,
     602,     0,  1460,     0,     0,  1466,     0,     0,  1475,  1483,
    1485,     0,  1484,  1486,     0,  1492,     0,     0,  1477,  1488,
    1491,  1495,  1498,   386,  1573,  1428,  1567,     0,  1568,  1514,
    1609,  1572,  1570,  1565,  1510,     0,     0,   396,  1542,  1544,
    1543,  1545,     0,  1559,  1428,     0,  1532,  1534,  1599,  1596,
    1597,  1600,  1598,   472,     0,     0,   706,  1027,  1032,   889,
       0,     0,     0,     0,     0,     0,     0,   890,     0,     0,
       0,     0,   816,     0,   775,     0,     0,     0,     0,     0,
     827,     0,   826,   745,     0,   922,     0,   928,     0,     0,
     948,     0,     0,   707,   708,     0,   979,   978,     0,   713,
       0,     0,  1015,   528,   908,   906,   735,   733,   732,   734,
       0,   396,     0,   396,     0,   739,     0,  1340,     0,   396,
       0,     0,   396,     0,   396,   396,  1326,     0,     0,   526,
     485,     0,     0,     0,   171,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,     0,     0,     0,     0,   271,
       0,   396,   396,     0,     0,     0,   396,    83,    84,  1426,
    1426,  1426,  1426,  1426,     0,     0,  1426,     0,  1426,     0,
       0,   135,   133,     0,  1336,   149,     0,  1381,     0,     0,
       0,  1432,  1440,     0,     0,  1423,  1435,  1439,  1447,     0,
    1455,     0,   404,     0,     0,   576,   530,   531,   419,     0,
     737,   278,     0,   418,     0,     0,   450,  1347,   848,   847,
    1388,     0,     0,     0,     0,   154,   741,   728,     0,   474,
     473,     0,     0,   865,     0,  1375,  1378,   524,     0,   508,
    1351,   506,   519,     0,  1404,  1403,     0,   615,   616,   617,
     618,   606,     0,   605,   622,  1331,   623,     0,  1331,   621,
    1460,  1461,     0,     0,     0,  1465,  1462,     0,     0,  1480,
    1505,  1493,     0,     0,     0,  1577,  1327,  1571,  1563,  1564,
    1575,     0,     0,     0,  1531,   477,   476,   470,   941,     0,
     952,  1033,   957,   882,   875,   786,     0,   812,   784,   962,
     952,   817,   776,   823,   822,   828,   482,     0,     0,   747,
       0,   930,   942,   944,     0,   960,   961,   985,     0,     0,
     744,     0,   988,  1019,  1013,   496,     0,     0,   988,   395,
       0,  1340,     0,   275,     0,   260,     0,   141,     0,     0,
     279,     0,     0,   396,     0,  1416,  1331,  1415,   627,   851,
     628,     0,   487,   488,   484,   670,   169,   719,     0,     0,
       0,     0,    82,   273,   272,    99,     0,    81,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1426,     0,     0,    98,     0,     0,   109,  1333,  1334,  1332,
     640,  1369,  1371,  1348,     0,     0,     0,     0,  1438,   192,
       0,  1289,   189,     0,   919,   917,   918,   529,   841,     0,
     191,  1434,  1433,  1442,  1450,  1451,  1453,   403,   406,   441,
       0,   281,  1167,  1205,  1248,   282,   285,   351,   350,   286,
       0,   996,   284,   280,   408,     0,  1391,     0,  1393,   534,
       0,   726,   727,   731,   704,   866,   863,     0,     0,     0,
       0,   517,     0,   525,     0,   509,   522,     0,   521,  1404,
    1401,     0,  1409,   440,     0,  1410,     0,   608,   599,   624,
     599,  1470,  1460,  1474,     0,     0,  1467,     0,  1460,  1489,
    1576,  1574,     0,   279,  1557,  1530,   943,     0,     0,   787,
       0,     0,   746,   751,     0,   749,   923,   959,     0,   715,
     706,     0,   992,   440,     0,     0,   738,   262,     0,     0,
     276,     0,   279,     0,  1340,   207,     0,   724,  1424,  1607,
     209,     0,   440,     0,     0,   599,   631,     0,   629,     0,
       0,     0,   702,     0,     0,     0,     0,     0,   370,   369,
    1617,     0,   336,     0,     0,     0,     0,     0,   375,   396,
    1340,     0,     0,     0,    91,    86,    87,  1426,   105,     0,
    1426,     0,   679,     0,  1350,  1429,     0,     0,  1437,  1431,
     914,   912,   911,   913,   916,   915,     0,     0,   384,   185,
     529,   190,     0,     0,     0,   405,     0,   304,   291,     0,
    1208,   330,   299,   300,     0,   301,   909,   737,     0,   289,
     290,   841,     0,   995,  1000,   283,   407,     0,  1380,     0,
    1396,     0,  1395,  1397,   670,     0,   740,   952,     0,     0,
       0,   512,     0,     0,   518,     0,  1352,   507,   523,   520,
       0,     0,     0,     0,   607,     0,  1245,  1254,  1301,   534,
     534,   560,   598,   589,   560,  1471,  1460,     0,  1460,  1478,
    1566,   453,   950,   953,   955,   748,   750,     0,   712,   714,
       0,  1016,  1331,   991,   744,   227,     0,     0,  1340,   274,
     177,   453,     0,   391,   199,   204,   206,   205,   196,     0,
     207,   198,  1340,   209,     0,  1605,   453,     0,   210,   227,
     186,   227,     0,   599,  1381,   632,   630,  1417,     0,   666,
     668,   667,   637,   634,   635,   663,   669,   851,  1331,     0,
       0,     0,   483,   672,   674,   688,   686,   691,   699,   701,
     696,     0,     0,     0,     0,   139,   115,     0,     0,   368,
     371,   375,     0,     0,   335,   339,   349,   348,    85,     0,
     375,   346,   343,   728,     0,   345,     0,   376,  1340,   374,
       0,   104,     0,  1191,  1615,     0,    88,   103,   102,     0,
       0,     0,     0,   678,  1368,     0,  1354,     0,  1430,   382,
     381,   841,   383,     0,   188,  1481,  1449,  1452,   442,     0,
       0,   303,     0,     0,   320,     0,   322,   323,   324,   325,
     326,   329,  1340,     0,     0,   298,   302,   316,     0,   352,
       0,     0,     0,   999,  1340,  1392,     0,     0,     0,  1348,
     729,   730,     0,   510,   515,     0,   511,     0,   516,     0,
       0,  1411,  1406,     0,  1407,  1408,   588,     0,   703,     0,
       0,     0,   596,   597,     0,   559,   625,     0,     0,   586,
     534,   534,   595,   626,  1463,  1460,     0,     0,   455,     0,
     951,   710,   986,     0,     0,  1012,     0,   996,     0,   247,
     263,   739,     0,     0,   390,   277,     0,   197,     0,   227,
       0,     0,  1606,   455,   208,   216,  1340,     0,   560,   640,
       0,   661,   536,   660,     0,   535,   656,     0,   689,   677,
     700,   687,   691,     0,   690,   699,   696,   697,   698,     0,
     695,   676,     0,     0,     0,     0,     0,   120,   138,  1340,
     334,   333,     0,   338,    90,     0,  1340,   731,   344,   377,
     347,     0,     0,     0,     0,    96,     0,  1614,  1613,     0,
      92,     0,     0,     0,  1370,  1379,  1436,   380,   184,   185,
     737,     0,   297,   295,   737,   841,   321,   372,   318,     0,
     327,   328,   287,   319,   296,     0,     0,   313,   310,   288,
       0,   993,   994,     0,     0,     0,  1384,  1394,  1398,  1350,
     542,     0,   514,  1353,  1412,  1405,   534,   534,   592,   562,
       0,   534,   584,   585,     0,     0,   593,   594,  1464,     0,
     452,     0,   457,     0,     0,   990,  1009,  1008,     0,     0,
       0,  1000,   242,     0,   244,   246,   249,   258,   140,   389,
     201,   200,   203,   202,     0,   195,   193,  1340,  1601,     0,
     457,     0,   211,   213,   214,   215,   225,     0,   534,   600,
     560,     0,   656,   560,   664,   651,   538,   653,   538,   538,
     659,     0,   699,     0,     0,   685,   682,   696,   675,   693,
       0,     0,     0,     0,   119,     0,   118,   396,  1426,     0,
     113,   137,   110,     0,   340,     0,   355,   341,   342,     0,
      95,     0,    94,    97,     0,  1611,  1612,  1340,    89,     0,
       0,     0,   187,   332,   292,   332,   294,   311,   312,   314,
     309,   315,   307,   997,   998,     0,   258,  1354,   513,   590,
     591,     0,     0,   561,     0,     0,   574,     0,  1496,   454,
       0,   739,     0,   989,     0,     0,     0,     0,  1011,  1014,
     229,   228,   226,  1340,   241,   251,   245,   248,     0,   252,
       0,   256,   257,  1340,   235,   218,     0,   739,   212,     0,
     724,   218,   181,   220,   387,   429,   633,   599,   659,   636,
     537,   652,   654,   655,   657,   658,     0,   684,   696,     0,
       0,   683,   673,     0,   694,     0,     0,     0,     0,     0,
       0,     0,   121,   337,     0,   361,   100,    93,     0,  1616,
     101,     0,   639,   331,  1340,   293,   306,   308,     0,   269,
    1382,   563,     0,     0,   571,     0,   546,     0,     0,   547,
     640,   456,   996,   949,     0,  1006,  1004,  1003,  1005,  1007,
       0,     0,     0,   255,   259,     0,   194,     0,   394,     0,
     996,   222,   219,   224,     0,     0,  1340,   428,     0,   534,
     426,     0,  1331,   671,   680,   681,   692,   116,   243,   117,
       0,     0,   111,   112,   240,   114,   357,     0,   356,   354,
       0,   353,   365,   363,     0,   638,   317,   305,   268,   777,
       0,   573,     0,   548,   549,   996,   557,   679,  1000,     0,
     388,     0,   279,   234,   217,     0,   392,   264,   365,  1000,
     221,   223,     0,   230,   231,   233,   179,   427,     0,     0,
     425,   435,  1381,  1331,     0,   446,   443,     0,   445,   358,
       0,     0,     0,   359,   364,     0,   360,   362,     0,     0,
     572,     0,   550,     0,     0,   553,   558,  1367,  1340,  1010,
       0,   253,   393,  1604,  1002,   239,     0,   232,   180,     0,
     421,     0,   424,     0,   434,  1340,   752,     0,   646,   444,
     367,   366,  1610,   565,     0,   534,     0,     0,     0,   552,
       0,  1513,   250,     0,  1340,   238,     0,   422,     0,     0,
     433,  1603,   646,     0,     0,   649,     0,   650,   665,   645,
     647,     0,     0,   564,   534,   581,     0,   583,   587,     0,
    1262,   551,   554,   552,     0,  1512,  1511,  1569,     0,   391,
     423,   430,     0,   432,     0,   261,   662,   641,     0,     0,
     644,   648,   566,   567,     0,   580,   582,   552,   555,   545,
       0,   265,   431,     0,   642,   643,   568,   569,   556,     0,
       0,     0,  1602,  1001
  };

  const short
  BisonParserImpl::yypgoto_[] =
  {
   -2326, -2326, -2326, -2326, -2326, -2326,   279,   789, -2326,   -69,
    1716, -2326, -1447,  -350,  -707, -2326, -1992, -2326,    26, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326,   548,   837,  1366, -2326,
   -2326, -2326,  1775,   839, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326,   751,  -469, -2326,    63, -2326,   -50, -2326,
   -2326, -2326, -2326, -2326,  -205, -2326,  -206, -2326, -2326,  -660,
    -739, -2326, -2326, -1898, -2326,  -802, -2326, -2326, -2326, -2326,
    -518, -2326,  -374, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2221,  -610, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326,     5, -1119,   -22, -2326, -2326, -2326, -1642, -2326,
   -2326,    57,   121, -2326, -2326, -2326,  -303, -2326, -2326, -2326,
   -1693, -2326, -2326, -2005, -2326, -1537, -2326, -2326, -2111, -2326,
   -2326, -2326, -2015,  -299, -2326, -2326,  -591, -2326, -2326, -2326,
   -2326, -1483,  -249, -2326,  -373, -1475, -2326, -2326,  -297, -2326,
   -2326, -2326, -2326,  -780,  -754,  -675, -1503, -2326, -1093, -1800,
      23,   -75, -2326, -2326,  -832, -2326, -2163,  -886, -2326,  -834,
   -2326, -2326,  -488, -2326, -2326, -2326, -2326, -2326,  1815, -2326,
   -1312,   902, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326, -2326, -2326,   -95, -1127, -1523, -2326,
   -1334, -2326, -2326, -2326, -1124,  -365,  -508,  -555,   -29,  1767,
    1209,    36, -2326, -2326, -2326, -2326, -2326,  -663, -2326,  -141,
   -2326, -2326, -2326,  -803,  -462, -2326, -2326,    69, -2326, -2326,
   -1442, -2326, -2326, -1844, -2326,    59,    58,  -942, -1578, -2326,
    -855,  -362, -1221,   536, -2326,  -964,  -741, -2326, -2326, -2326,
   -2028, -2326, -2326, -1914,  -575, -2326,  -842, -2326, -1845, -2326,
   -2326,  -454, -2326, -2326, -2326,  -845, -2326, -2326, -2326, -1841,
   -1192,   394,   856,   857,  -935,    75, -2326, -2326,  -884, -2326,
   -2326,   853, -2326,   402, -1832, -2128, -2326, -2326, -2326,  -824,
   -2326,  -827,  -489,  -603, -2326, -2326, -2326,   -67, -2326, -2326,
   -2326,    16,  -718, -2326,  -491, -2326,  -164, -2326,    21,  -337,
    -497, -2326, -2139, -2022,    24, -2326, -1915,  -949,  1041, -2326,
   -2326, -2326, -2326,   114,  -144,  -941,  -135,  -186,  -355, -1191,
   -1352, -1295, -2112, -1300, -2326,  -539,   477, -2326, -1139,  -662,
   -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326,   486, -2326, -2326,  1461,  2159, -2326,    20,  -439,
     -74,   585,  -940, -2326, -2326, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326,  -546,    40,  1729,    46,  1093, -2326,    70, -2326,
     719, -2326,   -23,    64, -2326, -2326, -1689, -2326,  1094, -2326,
   -2326,   478,  1085,  -313, -2326, -2326,  -722, -2326, -2326, -2326,
   -2326, -2326, -2326, -1554, -2326, -2326, -2326,   497, -2326, -2326,
   -2326, -2326,  1065,  -338, -2326, -2326, -2326, -2326,   -84, -2326,
   -2326, -2326, -2135, -2326, -2257, -2326,  -536, -2325, -2326, -2326,
    -580, -2326, -2326, -2326, -2326, -2326, -2326,  1062, -2326, -2326,
   -2326, -1060,  1122,  -742,  -219,  -788,    -6, -2326, -2326, -2326,
   -2326, -1423,  -871,    -7,  1776,   -16,  1764, -2326,  1328,   871,
     876,   316,  1778,   -10,   679, -2326, -2326,  -878,  -202, -2326,
     -14, -2326, -1668,  -560, -1003, -2326, -2326, -2326, -2326, -1796,
   -2326, -2326, -1294, -2326, -1298, -2326, -2326, -1509, -2326, -2326,
   -2326,  -100,    13,   495, -2326,  -212,   -35, -2326, -2326, -1482,
   -2326, -1857,  1369, -2326, -2326, -2326, -2326, -2326, -2326, -1225,
    -357,  -868, -2326, -2326, -2326, -2326, -2326,  1948, -2326, -2326,
      18, -2326, -2326, -2326, -2326,   -66,   337, -2326, -2326, -2326,
   -2326, -2326, -2326, -2326,  -598, -2326, -2326,  -171,  -414, -2326,
    1372, -2326,  1373, -2326, -2326,  1375, -2326,  1377, -2326, -2326,
   -2326, -2326, -2326, -2326,  1346, -2326, -2326, -2326, -2326, -2326,
   -2326, -2326, -2326,   566, -2326, -2326, -2326, -2326, -2326
  };

  const short
  BisonParserImpl::yydefgoto_[] =
  {
      -1,     8,   536,    46,   158,   156,   587,   131,   132,   133,
      48,    49,  1256,  1257,  2410,  2411,  2075,  2258,   482,    50,
    1864,    51,   934,    52,   929,   930,   931,   539,   540,   541,
      53,    54,   489,   490,    55,    56,    57,    58,    59,    60,
      61,    62,    63,  1227,  2124,  1870,  1752,  1544,  1545,  2365,
      64,  1866,  1867,  2362,  2028,  2029,  2038,  2039,  2376,  2568,
    2491,  2631,  2492,  2207,  2472,  2576,  2678,  2566,   959,  2633,
    2412,  2475,  2076,  2355,  2356,  2478,  2479,    65,    66,  2481,
     948,  2483,    67,    68,    69,    70,    71,    72,    73,   964,
    2446,    74,   483,  1516,  1712,  1860,    75,    76,  1560,  1561,
    1562,  1775,  1776,  1941,  1942,  1943,  2293,  1944,  1945,  1946,
    2290,  1948,  2537,  1949,  2441,  2308,  2439,  2309,  2291,  2136,
    2137,  2138,  2139,  2140,  2141,  2142,  2534,  2084,  2085,  2263,
    2264,  1517,  2092,  1897,  1898,  1518,  2088,  1779,  2090,  2525,
    2599,  2601,  2656,  2653,  2602,  2654,  1890,  2143,  2098,  2099,
     484,  2119,  1753,  1754,  1213,    77,  2214,  2215,  2627,  1218,
      78,   557,   970,    79,    80,    81,    82,    83,   510,   952,
     511,   512,   513,    84,    85,    86,  2639,  2640,  2641,  2577,
    2578,  2709,  2710,  2684,  2685,   571,  1269,  1270,  1768,  2591,
    2592,    87,   525,  1305,  2198,  2342,  2461,  1328,   548,    88,
     658,    89,   659,    90,    91,   660,   661,    92,   662,    93,
     905,  1492,   445,   446,   447,    94,    95,    96,  1238,  1589,
    1590,  1800,  1801,  2164,  1802,  1803,  1591,  1233,  1192,  1298,
    1234,  2236,  2501,  1005,  1006,  1007,  2731,  2547,  2615,  2548,
    2732,  2666,  2185,  2186,  2329,  2330,  2693,  2694,  1989,  2755,
    2543,  2724,   956,   957,   958,  2725,  2697,  2698,  2181,  1990,
    2228,  2052,  1035,  1036,  1037,  1601,  1602,  1038,  1039,  1357,
    1358,  2053,  1696,  2054,  2231,  1912,  2715,  2716,  2717,  2718,
    2719,  2720,  2390,  2506,  2232,  2233,  2056,  1882,  2062,  2063,
    2064,  2113,  2114,  2394,  2395,  2066,  2067,  2242,  2244,  2245,
    2399,  2250,  2251,  2246,  2247,  2070,  1992,   986,   857,  1459,
    1670,  2008,   867,   463,    97,   949,    98,  1793,  1966,  1769,
    1206,  1207,  1681,  1323,   543,   544,  1440,  1441,  1698,  2580,
     813,   814,   815,   816,   517,  1154,   817,   818,   819,   820,
     821,   362,  1125,  1126,   363,  1592,   558,   530,   559,   560,
    1700,  1000,   994,   562,   563,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   434,   374,  1122,   375,   376,   437,
    1197,   880,   881,  1755,  1924,  1756,  1757,   377,   833,   378,
     379,  1168,   838,   839,   380,   381,   382,   383,   384,   385,
     386,   387,  2200,  1838,   388,   389,   390,  1177,   391,   392,
     393,   394,   859,  1041,   861,   862,   395,   396,   590,  2013,
    2014,  1953,  1954,  2153,  2154,  2704,  2558,  2468,  2348,  2349,
    1673,   397,  1190,  1462,   398,   399,   400,   871,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   134,   417,   764,   418,   452,   899,
     900,  1487,    99,   161,  1264,  1739,   927,   928,   486,   100,
     101,   495,  1307,   575,  1023,   576,   102,   103,  2551,  1741,
    1742,   104,  1339,  1016,  1017,  1018,   105,  1574,   106,   107,
    1960,   533,   534,  1318,  1962,  1963,  1964,   455,  1594,  1348,
    2174,  1815,   579,   580,  1701,   108,   109,   110,   111,  1546,
     923,  1216,   112,  1918,  1748,  1763,   113,   588,   136,  1285,
    1765,  1766,  1550,   114,   137,   589,  1364,  1615,  1616,   138,
     139,  1043,   584,   140,   141,   142,  1047,  1372,   594,   143,
     144,   145,   146,   147,  1054,   148,   149,   150,   151,   152,
     153,   154,   155,   162,   656,  1397,  2737,  1066,   657,  2035,
    2745,  2222,  2036,  1230,  2426,  2427,  2278,  1259,  1260
  };

  const short
  BisonParserImpl::yytable_[] =
  {
     439,   461,   577,   448,  1057,   449,   456,   572,  1202,  1289,
     460,   464,  1287,  1021,  1466,   991,   902,   439,  1344,  1442,
    1008,  1325,  1576,  1231,   664,   561,   514,   663,  1743,  1577,
     439,   520,   514,   665,   502,   526,  1319,   592,   532,   595,
     596,  1784,  1330,   907,  1586,   441,  1585,   932,  1869,  2055,
    1705,  1273,   503,   435,  1119,   501,   860,   459,  1547,   597,
    1332,   599,  2018,   549,  1220,   531,   604,  1228,   843,  1930,
    1276,   438,  2351,   996,   160,  1914,  1777,   436,  2192,  1161,
    2193,  1209,  1714,  1736,  1778,   160,  2257,  1947,   989,  2277,
     972,  1200,   564,  1351,  2473,   574,  1840,   466,  1443,  2357,
     878,  2380,  2106,  1509,  1509,   878,   878,  2398,  2024,   163,
     878,   586,  1811,   591,   591,   593,   591,   591,  1169,  1100,
    2596,   878,  -586,  1263,  2171,  1798,   924,   925,  2574,  2168,
     466,  1012,   878,  1521,  1526,   878,  2482,  1198,   573,  2554,
     496,  2225,  2307,  2226,   943,   944,   945,   962,  2190,  2025,
     826,  1413,  2191,  2248,  1715,  2493,   163,   164,   165,   166,
    2451,  2613,  1505,   763,   439,  1025,  1217,  1464,     9,   183,
     118,   773,  1510,  1074,  1506,  2272,   163,   954,   605,  1929,
    1232,   439,  2025,  2187,  2436,  1709,     9,  1362,  2597,  1056,
    2158,  2001,  2188,  2735,  2562,   190,   878,   848,  1296,  1527,
    1947,  1144,   163,   164,   165,   166,  2713,  1937,  2104,  1513,
    2504,   163,  2160,  1507,  2494,   997,   998,   194,   910,  1250,
    2021,  2632,   911,  2397,  2505,  2482,  2353,  1745,   999,  2714,
    1145,   183,  1455,  2161,  1396,  1297,  2736,  1509,  1146,  2189,
    2407,   849,  1564,  1937,   468,  1528,  1363,  1935,  2179,   606,
     160,  1499,  1514,  1500,  -527,  2305,   125,  1286,  2512,  1881,
    2563,  2328,  1956,  1510,  1217,  1781,   469,  1522,  1511,   470,
    2071,   527,  1884,  1523,  1512,    16,  2026,   183,  2072,   194,
     947,   130,   515,   159,  2614,  1482,  2273,   471,   127,  1501,
    2452,  1026,  2371,    16,  2669,   472,   963,  1654,   961,  1777,
    1513,  2027,  1075,  2440,   473,  1013,    18,  1778,  2072,  2026,
    2527,  1799,  2575,  2324,  2379,   485,  2598,   965,  1181,  2284,
     474,  2367,  2180,  2322,   475,   194,  1711,  1980,  1856,  2073,
    2248,  2326,  1202,  1537,  2027,  2327,  2409,   129,   497,  2074,
     477,  2301,  1524,  1514,  2408,  1014,  1508,  2274,  2224,  2552,
    2493,  2409,  2125,  1076,  1438,  1863,  1502,  1077,  2306,  1503,
     498,  2668,  1976,   479,   499,  1854,  1525,  1515,   500,  2583,
    2508,  1078,  2674,   840,   840,  2570,  1443,   480,  2372,  1886,
    1472,  1521,  1526,  1685,  1196,  1476,   868,   863,  1478,  1159,
    1480,  1481,  1483,  1079,  2306,   481,  1080,  2620,  1887,  1212,
    2373,  1519,  2384,  2490,   516,  2626,   488,  1520,  2061,     9,
    1081,  2086,  1408,  2162,   603,  1200,  2096,  2618,  2533,  2087,
    2533,  2522,  2617,  1210,  2650,  2132,  2663,  1056,  1082,   878,
    1196,  1409,   947,  1329,   878,  2629,  1714,  2294,  1221,  1008,
    1812,   878,  1888,   971,   439,  1761,   439,   954,   903,   828,
     593,  2294,   609,  -527,    27,   464,  2107,   898,   829,   440,
    1222,  1198,  1263,  2299,  1236,   160,  2496,  1637,  2149,  2499,
    2374,  1813,  1212,  1606,   878,   878,  1439,  2248,   954,   903,
    2662,  1223,  2407,  2661,  1237,    35,  1261,  1785,   532,  2364,
    1002,  2319,   466,  2375,   917,  1232,  1241,  1274,  1410,  2133,
     439,   553,  2296,     9,   878,  2097,  1283,   864,   937,   878,
     439,  1221,  2188,   439,  1334,   531,    16,  1624,  1224,   604,
     591,  2489,   903,   663,   978,  1299,   860,  2363,  1171,    18,
    1411,  2134,   983,   947,  1225,  2229,  1633,  2133,   987,   988,
    2651,  1889,  1916,   448,  1762,  2459,   464,  1414,  1415,   995,
    1010,  1623,  2097,  2664,  1391,  2490,  1814,   903,  1003,   614,
    1009,   532,  1246,  1631,  1250,  1416,  1300,  1024,  2135,  2134,
      45,  1226,   616,  2016,   863,  -527,   913,  -373,  -527,  1412,
    2212,  1011,  1277,   865,  1279,  1280,  2408,   439,   531,  -386,
    2269,  1392,  1510,  2409,   453,  1553,  1499,  1232,  1500,  1072,
    1770,   441,  2179,   160,  2096,  1140,  2135,  1393,  1071,   450,
      16,   160,   866,  -527,  1794,  -373,   450,   160,   160,  2234,
    1232,  2275,  2105,   878,  1083,  -527,  1991,  -527,  1994,  1513,
    1717,  1102,   824,  1103,  1501,  1091,   537,  1676,  1141,  1678,
     435,   980,  1796,  2033,  1394,  1686,   160,   825,  1689,   878,
    1691,  1692,  2147,  1092,   878,  1070,  1090,  2276,  1050,  1467,
    1199,  2071,  -386,  -527,   436,  1579,  1580,   990,  1232,  2072,
    -527,   538,   506,  -536,  2082,  -527,  2180,  1719,  1720,  2405,
     545,   451,  1724,  2044,  1142,  1211,  1982,  1680,  1064,  -536,
    1352,  2058,  -536,  2097,  2059,  1747,   546,  -536,  -527, -1325,
    -527,  1502,  -536,  -536,  1503,  2758,  -536,  2083,  2235,  2470,
     664,  1094,   981,   663,  1271,   888,  2406,  2172,   935,   665,
    2073,  2227,  1118,  1819,  1169,  -536,  2015,  2323,   507,  2768,
    2074,  1628,   889,   890,   547,  -570,   891,  -527,  -570,   878,
    2060,  2425,  2471,  2128,  -527,  2041,  -527,  1288,  2385,   165,
    2173,  1635,  1636,  2556,   176,   892,   926,  2061,   893, -1325,
    1629,   439,   165,   894,  2386,   165,   166,  1095,  1117,   163,
    2438,   439,  2387,  1124,  1127,   895,   896,   878,  2388,  1232,
    2645,   163,   897,   550,   170,   171,  2557,   170,   171,  1008,
      47,  1326,   157,   170,   171,   175,  1138,  1543,   175, -1325,
    2389,  2424,   454,  1109,   175,   170,   171,  1446,   465,   551,
    1158,  1327,  2688,  2305,   435,   466,   175,  1651,   878,  1004,
     505,  1124,  1004,   165,   435,   485,   435,   878,   932,   439,
    2476,   488,  1110,  1609,   840,   492,   786,   878,   436,   787,
     787,  1542,  1120,  1865,  1123,   170,   171,  1958,   436,  1786,
     436,   798,   798,   883,   878,  2712,   175,   863,   802,  1873,
     803,   803,  1268,  2317,   878,   493,  1846,   494,  1791,   878,
    1548,  1195,   884,  1201,   435,  2325,  2155,   448,   448,   522,
    2516,  1792,  2517,   878,   664,   786,   878,   663,   787,   160,
    1498,   504,  1123,   665,  1861,  1303,   878,  2211,   436,  1504,
     798,  2010,   542,   593,   799,   800,   801,   802,  1531,   803,
    1609,  1532,  2223,   878,   518,   976,   439,   439,   903,   448,
     786,  1540,  1878,   787,   977,   779,  2032,  1275,   863,   903,
     780,  1879,   523,   796,   797,   798,   439,   439,   903,   799,
     800,   801,   802,  1809,   803,  2157,  1291,   514,   439,   767,
     804,   805,  1810,   535,   768,   976,  1876,   903,  2346,   529,
    1302,   769,   903,  2347,   977,  1877,  1310,  1311,  1314,  1010,
    1317,  2009,  1320,  1378,  1379,  1380,  1381,  1382,  1365,  1009,
    2671,  1878,    10,  1927,  1199,    11,  1468,  2144,  2259,  1377,
    1879,   976,  1928,   995,  1333,  2433,  2145,  2266,   555,  2435,
     977,  1336,    10,   466,  1048,    11,   160,  1467,  1494,   598,
     581,   834,  1343,   582,   835,   578,   850,   872,  1467,   851,
     873,   863, -1325,   601,   439,   874,   439,   439,   875,   846,
     847,  1019,  1008,  1490,  1020,   602,  1203,  1682,  1383,  1204,
    1048,  1369,   786,  1239,  1690,   787,  1085,  2182,  2183,   607,
     591,   591,   591,   591,   591,   889,  1384,   798,   608,   891,
    1265,   799,  1398,  1266,   802,  2100,   803,  1179,   772,  1180,
    1388,     1,     2,     3,     4,     5,     6,     7,  1385,   774,
     160,  1386, -1325,  1167,   176,  1566,  1387,  1552,   786,   778,
    1294,   787,  1340,  1295, -1046,  1341,  1558,  1740,   895,   896,
     781,  1607,   797,   798,  1608,   897, -1045,   799,   800,   801,
     802,  1658,   803,  2285,  1659,  1188,  1189,   439,   804,   805,
    1759,  1782, -1325,  1760,  1783,  1816,  1970,  -876,  1817,  1971,
     439,  1850,  1973,  2686,  2030,  1974,  2094,  2031,  2510,  2095,
    1934,  2511,  1934,  2588,  1436,  2589,  2610,  2690,  2691,  2611,
     468,  1423,  2647,  2681,  -877,  2648,  2682,  1445,  2721,  2111,
    2112,  2722,  1725,  1726,  1727,  1728,  1729,  2502,  2503,  1732,
     435,  1734,   469,  2726,  2742,   470,  2727,  2743,  2749, -1043,
     163,  2750,   165,   782,  1463,  2593,  2594, -1042,  1427,  1469,
    -878,   783,  1833,   471,   436,   784,  -879,  1201,   163,   827,
     844,   472,   830,   845,   852,   876,   877,  1644,   768,   878,
     473,   439,   780,   439,   879,   885,   886,   904,   882,   914,
     909,   912,   915,   160,  1467,   480,   474,  1489,   916,   918,
     475,   920,   919,   921,   922,   926,   936,  1853,   938,  1467,
     939,   941,   953,   940,  1086,   947,   477,  1862,  2336,  2337,
     942,   951,   954,  1872,   968,   955,   967,   973,   448,   974,
     903,  1003,   975,   969,   982,   979,  1087,   984,   985,   479,
    1088,  1001,   439,   903,  1089,  1683,  1015,   593,   566,   439,
    1495,  1022,  1042,   480,   439,  1045,  1713,   439,  1046,  1556,
    1557,  1051,  1052,   439,   664,   439,  1611,   663,  1053,  1062,
    1067,   481,  1568,   665,  1073,  1093,  1569,  1101,  1084,   439,
    1096,   786,  1097,  1575,   787,  1098,   466,  1099,  1106,  1010,
    1115,  1131,  1175,  1182,  1583,  1183,   798,  1205,  1185,  1009,
     799,   800,   801,   802,  1468,   803,  1215,  1186,  2680,   855,
    1214,   804,   805,  1212,  1217,  1468,  1219,  1603,  1229,  1244,
     863,  1245,  1665,  1247,  2116,  1235,  2579,  1248,  1267,   467,
    1286,  1268,  1278,  1304,  1306,  1322,  1335,  1342,  1345,  1346,
    1347,  1354,  1366,  1906,  1367,  1368,  1373,  1371,  1374,  1399,
    1376,  2707,  1400,  1401,  2449,  2450,  1402,  1403,  1467,  2453,
    1404,  1405,  1407,  1418,  1419,  1406,  2422,  1425,  1426,  2646,
    1428,  2428,  1617,  1434,  1429,  1435,  1451,  1461,  1470,  1471,
    1458,  1473,  1484,  1479,  1474,   439,  1460,  1486,  1643,  1740,
    1488,  1647,  1493,  1485,   439,  1491,  1497,  1530,  1529,  1533,
    1536,  1539,  1496,  1543,  1559,  1549,  2495,   439,  2579,  1551,
    1538,  1593,  1596,  1597,  2540,   574,  1573,  1578,  1598,  1599,
    1600,  1604,  1613,  1614,  1674,  1622,  2689,  1625,  1618,  1630,
    1627,  1634,  1641,   468,  1657,  1632,  1652,   364,   435,   903,
    1621,   439,  1667,   439,   439,  2205,   903,   435,  1668,  1857,
    1671,   903,  1677,   487,   439,   469,  1640,  1669,   470,  1679,
     514,  1710,   436,  2546,  1707,  1650,  1693,  1708,  1718,  1721,
    1716,   436,  1723,  1731,  1744,  1722,   471,  1730,  1735,  1048,
    1797,  1789,  1804,  1790,   472,  1805,  1362,  1823,  1828,  1825,
     439,  1827,  1829,   473,  1831,  1830,  1572,  1859,  1837,   903,
    1858,  1834,   514,  1746,  1835,  1896,  1758,  1469,  1849,   474,
    1881,  1899,  1911,   475,  1821,  1287,  1880,  1885,  1469,  2572,
    2108,  1468,  1780,  2110,  1913,  1917,  1926,   476,  1191,   477,
    1933,  1934,  1010,  1952,  1965,  1788,  1468,  1968,  1969,  2000,
    1981,  1983,  1009,  2518,  1795,   995,  1907,   583,   585,   478,
    1998,  2003,   479,  1910,  2004,  1808,  2549,  1767,  1852,   435,
     600,  1972,  2011,  2012,  1855,  1818,   480,  2017,  1820,  2022,
     863,  2037,  2043,  2034,  2045,  2079,  2080,  2089,  2109,  2060,
    2115,  2123,  2129,   436,   481,  2130,  2131,  2148,  2150,  2151,
    2366,  2170,  2167,  2177,   903,  2197,  1895,  2152,  2184,   666,
    2202,  2204,  2213,  2220,  2221,  2058,  2243,  2642,  2249,   771,
    1713,  2206,  2059,  2252,  2253,  2254,  2255,   775,  2262,  2271,
     777,  2132,  2281,  2283,  2269,  2288,  2279,  2282,  2298,  2313,
    2608,  2314,  2023,  2296,  2334,   591,  2316,  2320,  2158,   903,
     514,   591,  2339,  2332,   160,  2344,  1740,   160,  2333,   903,
    2341,  2350,   439,  2358,   439,   903,  1875,  2343,  1680,  2235,
    1961,  2383,  2391,  2401,  2402,  2369,  2403,  2635,  2101,  2413,
    2415,   439,  2430,  2457,  2421,  2423,  2431,  1851,  2305,  2434,
    2445,  2460,  1893,  1894,  2462,  1468,  2458,  1900,  1901,  1902,
    1903,  1904,  1905,  2469,  2477,  1908,  2480,  1909,  2486,  2488,
    1874,  2497,  2509,  2500,  2513,  2521,  2734,   439,  2520,  2524,
     439,  2528,  2538,  1925,  2545,  2555,  2531,  2536,  2561,  2565,
    2567,   439,  1758,  2723,  1469,  2582,  1995,  2569,  2340,  2447,
    2590,  1439,  1999,  2616,  2600,   160,  2619,  2607,  2621,  1469,
    2625,  2638,  2643,  1951,  2649,  1780,  2652,  2622,  2655,  2659,
     439,  2574,  2651,   574,  2683,  2696,  2699,  2700,  2703,  2706,
     439,  2650,  2692,  2708,  2744,  2728,  2740,  2738,  2748,  2664,
    1979,  2753,  2759,  2763,   435,   435,  2769,  1467,  2760,  1603,
    2770,  1993,   552,  1993,  2595,  1535,  2210,  1395,   528,  1321,
    2432,  2040,  1931,   785,   908,  2217,   823,  2219,   436,   436,
    2218,  2573,  2630,  2677,  2474,  2354,  2539,  2019,   832,  1955,
    1892,  2304,  2300,   435,  2535,  2268,  2303,  2368,  2673,  2657,
    2603,   903,  2122,  2761,   521,   858,  1292,  1467,  2370,  1467,
     870,  1967,  2487,  1977,   554,  1978,   439,   436,  1993,  2754,
    2382,  1584,  1195,  1104,   903,  2665,  2541,  2077,   439,  2752,
    2455,  2756,  1695,  1961,  1349,  1350,   439,  1359,  2746,  2093,
    1697,  1984,  2751,  2498,   439,  2581,  2270,  2159,  2065,  2667,
    2507,  2241,  1740,  2068,  2514,  2392,  2069,  2267,  1187,  2117,
     439,  1008,  2418,  1653,  1645,  2637,  1582,   776,  1469,  2121,
    2121,  1163,  1465,  2146,  1661,  2126,  1170,  1649,  1165,  1184,
    2194,  2559,  2196,  2586,  1193,   766,  1389,   654,  1065,   655,
    2302,  1390,  1832,  1160,  1534,  2156,  2318,  1666,  2175,  1027,
     135,  2127,  2315,  1826,  2289,  1063,  1626,     0,     0,     0,
       0,  2163,     0,  2166,     0,   946,     0,     0,  2169,     0,
       0,     0,   435,   435,  1058,  1059,   574,  1060,  2176,  1061,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2120,  2120,     0,     0,     0,     0,   436,   436,     0,     0,
       0,     0,  2203,     0,     0,     0,     0,     0,     0,  2208,
     439,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2550,  2216,     0,  2377,     0,     0,     0,     0,     0,
     439,     0,     0,     0,     0,     0,  1993,     0,     0,     0,
       0,   903,  1040,     0,  1467,     0,     0,     0,  2237,     0,
       0,  2519,     0,     0,     0,     0,     0,  2414,  1961,     0,
       0,     0,     0,     0,  2417,     0,     0,     0,     0,     0,
     439,     0,     0,     0,     0,  2260,  2261,     0,     0,     0,
       0,   160,   439,   435,  1874,     0,     0,  2093,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1467,  2280,     0,     0,     0,     0,   436,   903,     0,
     439,     0,     0,     0,   439,     0,     0,     0,     0,     0,
       0,     0,   439,  2295,     0,  1105,  2297,   160,     0,  2338,
    2628,     0,     0,     0,  1468,     0,     0,  2295,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   574,     0,     0,  1008,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2485,   433,   435,     0,     0,
    2416,     0,     0,     0,     0,     0,     0,  2335,     0,     0,
       0,     0,     0,   491,  1468,  2287,  1468,     0,     0,     0,
     903,   436,     0,     0,     0,     0,   519,     0,     0,     0,
       0,   439,     0,     0,     0,     0,     0,     0,     0,   439,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     439,     0,     0,   903,     0,  2529,     0,   903,     0,     0,
       0,  1111,     0,  1114,     0,  1116,     0,     0,     0,     0,
       0,     0,  2400,     0,  1128,  1130,     0,  2404,     0,  2359,
       0,     0,     0,     0,     0,     0,  1132,  1133,  1134,  1135,
    1136,     0,   435,     0,     0,     0,  2381,  1139,     0,     0,
       0,  2560,  1143,     0,  1147,  1148,  1149,  1150,  1155,  1156,
    1157,  2564,     0,     0,     0,  1162,   436,     0,   439,     0,
       0,     0,     0,     0,     0,   832,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1172,  1173,  1174,     0,     0,
       0,  1176,     0,     0,  2448,   666,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   858,     9,   439,     0,     0,
     765,  2772,  2606,   870,   903,  1194,     0,  1469,     0,     0,
       0,     0,     0,     0,  1208,     0,  2623,   433,     0,    10,
       0,     0,    11,     0,     0,  2634,     0,  2484,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1240,  1468,  1242,  1243,  2636,     0,     0,    12,     0,     0,
       0,    13,    14,     0,     0,     0,     0,  1469,     0,  1469,
       0,     0,     0,     0,  2400,     0,  1040,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2672,     0,     0,     0,
       0,     0,    15,     0,   439,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1468,     0,
       0,     0,     0,    16,    17,     0,     0,  1315,     0,     0,
       0,  1010,     0,     0,     0,  1324,    18,   439,     0,     0,
       0,  1009,     0,   903,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,     0,     0,  2701,     0,    20,     0,
      21,    22,     0,    23,     0,     0,  1338,    24,     0,     0,
       0,    25,  2571,  2711,     0,     0,    26,     0,     0,   666,
    1993,     0,     0,     0,     0,     0,     0,     0,    27,     0,
      28,     0,  2739,  1361,    29,     0,  1674,    30,    31,    32,
    1370,     0,     0,     0,  1375,     0,     0,     0,     0,     0,
      33,     0,     0,     0,     0,    34,     0,     0,     0,    35,
       0,     0,     0,     0,     0,  2766,     0,     0,   439,    36,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2624,     0,   903,     0,     0,     0,     0,     0,  1417,     0,
       0,    38,  2644,  1421,  1469,     0,     0,     0,     0,     0,
       0,    39,    40,     0,    41,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,   439,     0,     0,     0,     0,    44,     0,
     887,     0,   901,     0,    45,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1447,     0,
       0,  1469,     0,  2687,     0,     0,     0,   903,     0,     0,
    1453,  1454,     0,  1456,  1457,     0,     0,     0,     0,     0,
       0,   160,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2359,     0,     0,     0,     0,   950,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   960,     0,     0,   966,
     903,     0,     0,     0,  1010,     0,     0,     0,     0,   439,
       0,     0,  2733,     0,  1009,     0,     0,  -527,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -527,  -527,
       0,  -527,   160,     0,     0,     0,     0,     0,     0,   439,
       0,     0,  2757,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2764,  2765,     0,     0,     0,     0,     0,  2767,     0,
       0,     0,  1232,   433,  -527,     0,     0,     0,     0,     0,
       0,     0,  -527,   903,     0,     0,     0,  1567,     0,     0,
       0,  -527,     0,     0,     0,     0,     0,     0,  -527,  -527,
       0,  -527,  -527,  1324,     0,     0,  -527,  -527,     0,     0,
       0,  -527,  -527,   115,  -527,  -527,     0,  -527,   609,     0,
       0,  1338,     0,  -527,     0,  -527,     0,     0,  1595,     0,
       0,     0,     0,     0,  -527,     0,     0,     0,  1040,     0,
    -527,  -527,     0,     0,  1612,  -527,  -527,     0,  -527,  -527,
    -527,     0,  1619,     0,     0,  1620,     0,     0,  -527,     0,
       0,     0,     0,     0,     0,  -527,     0,     0,     0,   610,
       0,     0,     0,   611,    14,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   612,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,   613,  1642,     0,     0,     0,  1646,
    1648,  1176,     0,     0,     0,     0,     0,     0,  1655,  1656,
       0,     0,     0,     0,     0,   614,   615,     0,     0,  1662,
    1663,     0,  1664,     0,     0,     0,     0,     0,   616,     0,
       0,     0,     0,     0,     0,     0,   617,   433,     0,     0,
       0,  1675,     0,     0,     0,   618,     0,   433,     0,   433,
     619,     0,   620,   621,     0,   622,     0,     0,   623,   624,
       0,     0,     0,   625,  1706,     0,     0,     0,   626,     0,
     627,     0,     0,     0,     0,     0,     0,     0,   628,     0,
     629,     0,    28,     0,     0,     0,   630,     0,     0,   631,
     632,   633,     0,     0,     0,     0,     0,   433,     0,     0,
       0,     0,   634,     0,  1738,  1166,     0,   635,     0,     0,
       0,   636,     0,   637,     0,     0,     0,     0,     0,   638,
    1764,   639,   640,     0,     0,     0,     0,     0,     0,     0,
     641,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   115,     0,     0,     0,     0,     9,     0,   642,     0,
       0,     0,     0,   643,   644,     0,     0,     0,     0,     0,
       0,   645,     0,   646,   647,     0,   648,     0,     0,    10,
       0,   649,    11,     0,     0,     0,     0,   650,  1040,     0,
       0,     0,     0,     0,     0,  1824,     0,     0,     0,     0,
     651,     0,  1249,  1258,   116,     0,   652,    12,     0,     0,
       0,    13,    14,   653,     0, -1460,     0,     0,     0,     0,
    1836,     0,  1281,  1282,     0,     0,     0,     0,     0,   117,
       0,     0,  1290,     0,  1293,     0,     0,     0,  1844,  1845,
       0,     0,    15,     0,     0,     0,  1301,     0,     0,  1848,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    16,    17,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,     0,
       0,     0,     0,     0,   118,     0,     0,     0,     0,     0,
       0,     0,     0,    19,     0,     0,     0,     0,    20,  1891,
      21,    22,     0,   119,     0,     0,   120,    24,     0,     0,
    1353,    25,  1355,  1360,     0,     0,    26,     0,   121,     0,
       0,     0,     0,     0,     0,     0,   122,     0,    27,     0,
      28,     0,     0,     0,    29,     0,     0,    30,    31,    32,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     9,
      33,     0,     0,     0,     0,    34,     0,     0,     0,    35,
       0,   123,     0,     0,     0,     0,     0,   124,     0,    36,
     125,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,     0,     0,     0,
      12,    38,   127,   433,    13,    14,  1997,     0,     0,   128,
       0,    39,    40,     0,    41,     0,  1433,     0,  2002,    42,
       0,     0,  2005,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    15,     0,   488,    44,     0,
       0,     0,  2020,     0,    45,     0,     0,     0,     0,     0,
       0,   129,     0,     0, -1460,     0,    16,    17,     0,     0,
       0,  2047,     0,     0,     0,     0,     0,     0,     0,    18,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    19,     0,     0,     0,
       0,    20,     0,    21,    22,     0,    23,  1475,     0,  1477,
      24,     0,     0,     0,    25,     0,     0,     0,     0,    26,
       0,     0,     0,     0,  1764,     0,     0,     0,     0,     0,
       0,    27,     0,    28,     0,     0,     0,    29,     0,     0,
      30,    31,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    33,     0,     0,     0,     0,    34,     0,
    2165,     0,    35,     0,  2165,     0,     0,     0,  1541,     0,
       0,     0,    36,     0,     0,  1353,     0,     0,  2178,     0,
    1554,    37,     0,  1555,     0,     0,     0,     0,     0,  1563,
       0,  1565,     0,     0,     0,     0,     0,     0,  2201,     0,
       0,     0,     0,     0,    38,  1571,     0,     0,     0,     0,
       0,     0,     0,     0,    39,    40,     0,    41,     0,     0,
       0,     0,    42,     0,   786,     0,     0,   787,    43,   788,
     789,   790,   791,   792,   793,   794,   795,   796,   797,   798,
       0,    44,     0,   799,   800,   801,   802,    45,   803,     0,
    2238,  2239,  2240,     0,   804,   805,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   806,     0,     0,     0,     0,
       0,     0,     0,   807,   786,     0,     0,   787,     0,   788,
     789,   790,   791,   792,   793,   794,   795,   796,   797,   798,
       0,     0,     0,   799,   800,   801,   802,     0,   803,     0,
       0,     0,   808,     0,   804,   805,     0,   809,     0,     0,
     810,   433,     0,     0,     0,   806,     0,     0,     0,     0,
     433,   811,     0,   807,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1660,     0,     0,     0,     0,     0,  2310,
       0,  2311,  2312,     0,     0,     0,     0,     0,  1338,     0,
       0,     0,   808,     0,     0,     0,     0,   809,  2165,     0,
     810,     0,     0,   812,     0,     0,     0,  1684,  2331,  1687,
    1688,  -527,     0,     0,     0,     0,     0,  1699,     0,  2178,
    1703,     0,  -527,  -527,  -527,  -527,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2345,     0,     0,     0,     0,
       0,     0,     0,     0,  1055,     0,     0,     0,     0,     0,
       0,     0,     0,   812,     0,     0,  1733,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1232,     0,  -527,     0,
       0,     0,   433,     0,  2396,     0,  -527,     0,     0,     0,
       0,     0,     0,     0,     0,  -527,     0,     0,     0,     0,
       0,     0,  -527,  -527,     0,  -527,  -527,     0,     0,     0,
    -527,  -527,  2419,  2420,     0,  -527,  -527,     0,  -527,  -527,
       0,  -527,  2429,     0,     0,     0,     0,  -527,     0,  -527,
       0,     0,     0,     0,     0,     0,     0,     0,  -527,     0,
       0,     0,  -527,     0,  -527,  -527,  2437,     0,     0,  -527,
    -527,     0,  -527,  -527,  2443,  2444,  -527,     0,     0,     0,
       0,     0,  -527,     0,     0,     0,     0,     0,     0,  -527,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2463,     0,     0,     0,  2467,
     786,  -527,     0,   787,     0,   788,   789,   790,   791,   792,
     793,   794,   795,   796,   797,   798,     0,     0,     0,   799,
     800,   801,   802,     0,   803,     0,     0,     0,     0,     0,
     804,   805,     0,     0,     0,     0,     0,     0,  1868,     0,
    1871,   806,  2396,     0,     0,  1232,     0,     0,     0,   807,
       0,     0,     0,  2515,     0,     0,     0,  1883,     0,     0,
       0,     0,     0,     0,     0,     0,  2523,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   808,     0,
       0,     0,  2532,   809,     0,     0,   810,     0,     0,     0,
       0,     0,     0,  1915,     0,     0,  1919,   811,     0,     0,
       0,     0,  2331,  2542,     0,     0,     0,   433,   433,     0,
       0,     0,     0,  2553,     0,  2467,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1950,
       0,  -527,     0,     0,     0,     0,  1957,     0,     0,   812,
       0,     0,     0,     0,     0,     0,   433,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2584,  2585,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2604,
       0,     0,  2605,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   786,  -527,     0,   787,  -527,
     788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
     798,     0,     0,     0,   799,   800,   801,   802,     0,   803,
       0,     0,  2042,     0,     0,   804,   805,     0,     0,     0,
    2057,     0,     0,     0,  2078,     0,   806,     0,     0,     0,
    1232,     0,  1950,     0,   807,     0,     0,     0,     0,     0,
    1950,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2118,     0,     0,     0,
    2467,     0,  2670,   808,     0,   433,   433,     0,   809,     0,
       0,   810,     0,  2676,     0,     0,     0,     0,     0,  1324,
       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2695,     0,     0,     0,     0,     0,   786,  1107,     0,   787,
    1108,   788,   789,   790,   791,   792,   793,   794,   795,   796,
     797,   798,  1324,     0,   812,   799,   800,   801,   802,     0,
     803,     0,     0,     0,     0,     0,   804,   805,     0,     0,
     115,     0,     0,     0,     0,     9,     0,   806,     0,  2741,
       0,     0,     0,     0,  2747,   807,  2209,     0,     0,     0,
       0,     0,  2695,     0,     0,     0,     0,     0,    10,     0,
       0,    11,     0,     0,     0,     0,   433,     0,     0,     0,
       0,     0,     0,  2762,   808,     0,     0,  2057,     0,   809,
       0,     0,   810,   116,     0,     0,    12,     0,     0,     0,
      13,    14,     0,   811,     0,     0,     0,     0,     0,     0,
    2771,     0,     0,     0,     0,     0,  2256,     0,   117,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2265,     0,
       0,    15,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   812,     0,     0,     0,     0,
       0,     0,    16,    17,     0,     0,  2286,     0,     0,     0,
     433,     0,     0,     0,     0,    18,     0,     0,  1950,  1950,
       0,     0,     0,   118,     0,     0,     0,     0,     0,     0,
       0,     0,    19,  1950,     0,     0,     0,    20,     0,    21,
      22,     0,   119,     0,     0,   120,    24,     0,     0,     0,
      25,     0,     0,     0,     0,    26,     0,   121,     0,     0,
       0,     0,     0,     0,     0,   122,     0,    27,     0,    28,
       0,     0,     0,    29,     0,     0,    30,    31,    32,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
       0,     0,     0,     0,    34,     0,     0,  2352,    35,     0,
     123,     0,     0,     0,     0,   433,   124,     0,    36,   125,
       0,     0,     0,     0,     0,     0,  2378,    37,     0,  2057,
       0,     0,     0,  2057,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,     0,     0,     0,     0,
      38,   127,     0,     0,     0,     0,     0,     0,   128,     0,
      39,    40,     0,    41,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,    43,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,     0,     0,
       0,     0,     0,    45,  1950,     0,     0,     0,   786,  1841,
     129,   787,  1842,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,     0,     0,     0,   799,   800,   801,
     802,     0,   803,     0,     0,     0,     0,     0,   804,   805,
       0,     0,     0,  2456,     0,     0,     0,     0,     0,   806,
       0,     0,     0,     0,     0,     0,     0,   807,   786,     0,
       0,   787,     0,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,     0,     0,     0,   799,   800,   801,
     802,     0,   803,     0,     0,     0,   808,     0,   804,   805,
       0,   809,     0,     0,   810,     0,     0,     0,     0,   806,
       0,     0,     0,     0,     0,   811,     0,   807,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2556,     0,     0,
    1950,     0,     0,     0,     0,     0,   808,     0,     0,     0,
       0,   809,     0,     0,   810,     0,     0,   812,     0,     0,
       0,     0,     0,     0,     0,   811,     0,     0,     0,   786,
    2557,     0,   787,  2544,   788,   789,   790,   791,   792,   793,
     794,   795,   796,   797,   798,     0,     0,     0,   799,   800,
     801,   802,     0,   803,     0,     0,     0,     0,     0,   804,
     805,     0,     0,     0,     0,     0,     0,   812,     0,     0,
     806,     0,     0,     0,   933,     0,     0,     0,   807,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,     0,
       0,     0,   809,     0,     0,   810,     0,     0,     0,     0,
       0,     0,     0,     0,  2612,     0,   811,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     163,   164,   165,   166,   167,     0,     0,   853,   812,     0,
     854,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   169,     0,   170,   171,     0,   172,   173,  2660,
     174,     0,     0,     0,     0,   175,     0,     0,     0,     0,
       0,     0,   176,     0,     0,     0,     0,     0,     0,     0,
       0,   177,     0,     0,     0,     0,     0,     0,   178,   179,
     180,     0,     0,  2057,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   181,   182,   183,     0,     0,     0,     0,
     184,     0,   855,   185,     0,     0,     0,     0,   186,     0,
       0,     0,   187,     0,     0,     0,     0,     0,   188,     0,
     189,   190,     0,     0,     0,     0,  2057,     0,     0,     0,
       0,   191,     0,     0,   192,  2456,     0,   856,     0,   193,
       0,     0,     0,   194,     0,     0,     0,     0,     0,     0,
       0,   195,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2456,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   163,   164,   165,   166,   167,     0,     0,
       0,     0,     0,   168,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   169,     0,   170,   171,     0,
     172,   173,     0,   174,     0,     0,     0,     0,   175,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
    1151,     0,     0,  1152,   177,     0,     0,     0,     0,     0,
       0,   178,   179,   180,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   181,   182,   183,     0,
       0,     0,     0,   184,     0,     0,   185,     0,     0,     0,
       0,   186,     0,     0,     0,   187,     0,     0,     0,     0,
       0,   188,     0,   189,   190,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   191,     0,     0,   192,     0,     0,
       0,     0,   193,     0,     0,     0,   194,     0,     0,     0,
       0,     0,     0,     0,   195,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1153,     0,     0,     0,     0,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   163,   164,   165,   166,
     167,     0,     0,     0,     0,     0,   168,  1178,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   169,     0,
     170,   171,     0,   172,   173,     0,   174,     0,     0,     0,
       0,   175,     0,     0,     0,     0,     0,     0,   176,     0,
       0,     0,     0,     0,     0,     0,     0,   177,     0,     0,
       0,     0,     0,     0,   178,   179,   180,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   181,
     182,   183,     0,     0,     0,     0,   184,     0,     0,   185,
       0,     0,     0,     0,   186,     0,     0,     0,   187,     0,
       0,     0,     0,     0,   188,     0,   189,   190,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   191,     0,     0,
     192,     0,     0,    16,     0,   193,     0,     0,     0,   194,
       0,     0,     0,     0,     0,     0,    18,   195,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,  1028,
    1272,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,   176,     0,     0,     0,     0,     0,     0,     0,     0,
     177,     0,     0,     0,     0,     0,     0,   178,   179,   180,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   181,   182,   183,     0,     0,     0,     0,   184,
       0,     0,   185,     0,     0,     0,     0,   186,     0,     0,
       0,   187,     0,     0,     0,     0,     0,   188,     0,   189,
     190,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     191,     0,     0,   192,     0,     0,  1029,     0,   193,     0,
       0,     0,   194,     0,     0,     0,     0,     0,     0,  1030,
     195,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
    1031,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,  1032,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
    1033,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,  1034,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   163,   164,   165,   166,   167,     0,     0,     0,
       0,     0,  1028,  1605,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   169,     0,   170,   171,     0,   172,
     173,     0,   174,     0,     0,     0,     0,   175,     0,     0,
       0,     0,     0,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,   177,     0,     0,     0,     0,     0,     0,
     178,   179,   180,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   181,   182,   183,     0,     0,
       0,     0,   184,     0,     0,   185,     0,     0,     0,     0,
     186,     0,     0,     0,   187,     0,     0,     0,     0,     0,
     188,     0,   189,   190,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   191,     0,     0,   192,     0,     0,  1029,
       0,   193,     0,     0,     0,   194,     0,     0,     0,     0,
       0,     0,  1030,   195,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,  1031,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,  1032,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,  1033,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,  1034,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   163,   164,   165,   166,   167,
       0,     0,     0,     0,     0,   168,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   169,     0,   170,
     171,     0,   172,   173,     0,   174,     0,     0,     0,     0,
     175,     0,     0,     0,     0,     0,     0,   176,     0,     0,
       0,     0,     0,     0,     0,     0,   177,     0,     0,     0,
       0,  2464,     0,   178,   179,   180,     0,     0,  2465,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   181,   182,
     183,     0,     0,     0,     0,   184,     0,     0,   185,     0,
       0,     0,     0,   186,     0,     0,     0,   187,     0,     0,
       0,     0,     0,   188,     0,   189,   190,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   191,     0,     0,   192,
       0,     0,     0,     0,   193,     0,     0,     0,   194,  2466,
       0,     0,     0,     0,     0,     0,   195,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   163,   164,
     165,   166,   167,     0,     0,     0,     0,     0,   168,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     169,     0,   170,   171,     0,   172,   173,     0,   174,     0,
       0,     0,     0,   175,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,     0,     0,   177,
       0,     0,     0,     0,     0,     0,   178,   179,   180,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   182,   183,     0,     0,     0,     0,   184,     0,
       0,   185,     0,     0,     0,     0,   186,     0,     0,     0,
     187,     0,     0,     0,     0,     0,   188,     0,   189,   190,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   191,
       0,     0,   192,     0,     0,    16,     0,   193,     0,     0,
       0,   194,     0,     0,     0,     0,     0,     0,    18,   195,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   163,   164,   165,   166,   167,     0,     0,     0,     0,
       0,  1028,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   169,     0,   170,   171,     0,   172,   173,
       0,   174,     0,     0,     0,     0,   175,     0,     0,     0,
       0,     0,     0,   176,     0,     0,     0,     0,     0,     0,
       0,     0,   177,     0,     0,     0,     0,     0,     0,   178,
     179,   180,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   181,   182,   183,     0,     0,     0,
       0,   184,     0,     0,   185,     0,     0,     0,     0,   186,
       0,     0,     0,   187,     0,     0,     0,     0,     0,   188,
       0,   189,   190,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   191,     0,     0,   192,     0,     0,  1029,     0,
     193,     0,     0,     0,   194,     0,     0,     0,     0,     0,
       0,  1030,   195,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,  1031,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,  1032,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,  1033,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,  1034,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   163,   164,   165,   166,   167,     0,
       0,     0,   553,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,   176,     0,     0,     0,
       0,     0,     0,     0,     0,   177,     0,     0,     0,     0,
       0,     0,   178,   179,   180,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   181,   182,   183,
       0,     0,     0,     0,   184,     0,     0,   185,     0,     0,
       0,     0,   186,     0,     0,     0,   187,     0,     0,     0,
       0,     0,   188,     0,   189,   190,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   191,     0,     0,   192,     0,
       0,    16,     0,   193,     0,     0,     0,   194,     0,     0,
       0,     0,     0,     0,     0,   195,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   163,   164,   165,
     166,   167,     0,     0,     0,     0,     0,   168,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   169,
       0,   170,   171,     0,   172,   173,     0,   174,     0,     0,
       0,     0,   175,     0,     0,     0,     0,     0,     0,   176,
       0,     0,     0,     0,     0,     0,     0,     0,   177,     0,
       0,     0,     0,     0,     0,   178,   179,   180,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     181,   182,   183,     0,     0,     0,     0,   184,     0,     0,
     185,     0,     0,     0,     0,   186,     0,     0,     0,   187,
       0,     0,     0,     0,     0,   188,     0,   189,   190,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   191,     0,
       0,   192,     0,     0,    16,     0,   193,     0,     0,     0,
     194,     0,     0,     0,     0,     0,     0,    18,   195,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,  1031,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,  1033,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,  1034,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     163,   164,   165,   166,   167,     0,     0,  1587,     0,     0,
     168,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   169,     0,   170,   171,     0,   172,   173,     0,
     174,     0,     0,     0,     0,   175,     0,     0,     0,     0,
       0,     0,   176,     0,     0,     0,     0,     0,     0,     0,
       0,   177,     0,     0,     0,     0,     0,     0,   178,   179,
     180,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   181,   182,   183,     0,     0,     0,     0,
     184,     0,     0,   185,     0,     0,     0,     0,   186,     0,
       0,     0,   187,     0,     0,     0,     0,     0,   188,     0,
     189,   190,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   191,     0,     0,   192,     0,     0,     0,     0,   193,
       0,     0,     0,   194,     0,     0,     0,     0,     0,     0,
    1588,   195,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   163,   164,   165,   166,   167,     0,     0,
    1587,     0,     0,   168,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   169,     0,   170,   171,     0,
     172,   173,     0,   174,     0,     0,     0,     0,   175,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,     0,     0,   177,     0,     0,     0,     0,     0,
       0,   178,   179,   180,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   181,   182,   183,     0,
    1704,     0,     0,   184,     0,     0,   185,     0,     0,     0,
       0,   186,     0,     0,     0,   187,     0,     0,     0,     0,
       0,   188,     0,   189,   190,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   191,     0,     0,   192,     0,     0,
       0,     0,   193,     0,     0,     0,   194,     0,     0,     0,
       0,     0,     0,     0,   195,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   163,   164,   165,   166,
     167,     0,     0,  1587,     0,     0,   168,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   169,     0,
     170,   171,     0,   172,   173,     0,   174,     0,     0,     0,
       0,   175,     0,     0,     0,     0,     0,     0,   176,     0,
       0,     0,     0,     0,     0,     0,     0,   177,  1975,     0,
       0,     0,     0,     0,   178,   179,   180,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   181,
     182,   183,     0,     0,     0,     0,   184,     0,     0,   185,
       0,     0,     0,     0,   186,     0,     0,     0,   187,     0,
       0,     0,     0,     0,   188,     0,   189,   190,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   191,     0,     0,
     192,     0,     0,     0,     0,   193,     0,     0,     0,   194,
       0,     0,     0,     0,     0,     0,     0,   195,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,   176,     0,     0,     0,     0,     0,     0,     0,     0,
     177,     0,     0,     0,     0,     0,     0,   178,   179,   180,
       0,     0,  2465,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   181,   182,   183,     0,     0,     0,     0,   184,
       0,     0,   185,     0,     0,     0,     0,   186,     0,     0,
       0,   187,     0,     0,     0,     0,     0,   188,     0,   189,
     190,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     191,     0,     0,   192,     0,     0,     0,     0,   193,     0,
       0,     0,   194,  2466,     0,     0,     0,     0,     0,     0,
     195,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   163,   164,   165,   166,   167,     0,     0,     0,
       0,     0,   168,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   169,     0,   170,   171,     0,   172,
     173,     0,   174,     0,     0,     0,     0,   175,     0,     0,
       0,     0,     0,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,   177,     0,     0,     0,     0,     0,     0,
     178,   179,   180,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   181,   182,   183,     0,     0,
       0,     0,   184,     0,     0,   185,     0,     0,     0,     0,
     186,     0,     0,     0,   187,     0,     0,     0,     0,     0,
     188,     0,   189,   190,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   191,     0,     0,   192,     0,     0,     0,
       0,   193,     0,     0,     0,   194,     0,     0,     0,   770,
       0,     0,     0,   195,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   163,   164,   165,   166,   167,
       0,     0,     0,     0,     0,   168,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   169,   822,   170,
     171,     0,   172,   173,     0,   174,     0,     0,     0,     0,
     175,     0,     0,     0,     0,     0,     0,   176,     0,     0,
       0,     0,     0,     0,     0,     0,   177,     0,     0,     0,
       0,     0,     0,   178,   179,   180,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   181,   182,
     183,     0,     0,     0,     0,   184,     0,     0,   185,     0,
       0,     0,     0,   186,     0,     0,     0,   187,     0,     0,
       0,     0,     0,   188,     0,   189,   190,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   191,     0,     0,   192,
       0,     0,     0,     0,   193,     0,     0,     0,   194,     0,
       0,     0,     0,     0,     0,     0,   195,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   163,   164,
     165,   166,   167,     0,     0,     0,     0,     0,   168,   831,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     169,     0,   170,   171,     0,   172,   173,     0,   174,     0,
       0,     0,     0,   175,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,     0,     0,   177,
       0,     0,     0,     0,     0,     0,   178,   179,   180,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   182,   183,     0,     0,     0,     0,   184,     0,
       0,   185,     0,     0,     0,     0,   186,     0,     0,     0,
     187,     0,     0,     0,     0,     0,   188,     0,   189,   190,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   191,
       0,     0,   192,     0,     0,     0,     0,   193,     0,     0,
       0,   194,     0,     0,     0,     0,     0,     0,     0,   195,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   163,   164,   165,   166,   167,     0,     0,     0,     0,
       0,   168,   869,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   169,     0,   170,   171,     0,   172,   173,
       0,   174,     0,     0,     0,     0,   175,     0,     0,     0,
       0,     0,     0,   176,     0,     0,     0,     0,     0,     0,
       0,     0,   177,     0,     0,     0,     0,     0,     0,   178,
     179,   180,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   181,   182,   183,     0,     0,     0,
       0,   184,     0,     0,   185,     0,     0,     0,     0,   186,
       0,     0,     0,   187,     0,     0,     0,     0,     0,   188,
       0,   189,   190,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   191,     0,     0,   192,     0,     0,     0,     0,
     193,     0,     0,     0,   194,     0,     0,     0,     0,     0,
       0,     0,   195,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,   176,     0,     0,     0,
       0,     0,     0,     0,     0,   177,     0,     0,     0,     0,
       0,     0,   178,   179,   180,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   181,   182,   183,
       0,     0,     0,     0,   184,     0,     0,   185,     0,     0,
       0,     0,   186,     0,     0,     0,   187,     0,     0,     0,
       0,     0,   188,     0,   189,   190,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   191,     0,     0,   192,     0,
       0,  1113,     0,   193,     0,     0,     0,   194,     0,     0,
       0,     0,     0,     0,     0,   195,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   163,   164,   165,
     166,   167,     0,     0,     0,     0,     0,   168,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   169,
       0,   170,   171,     0,   172,   173,     0,   174,     0,     0,
       0,     0,   175,     0,     0,     0,     0,     0,     0,   176,
       0,     0,     0,     0,     0,     0,     0,     0,   177,     0,
       0,     0,     0,     0,     0,   178,   179,   180,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     181,   182,   183,     0,     0,     0,     0,   184,     0,     0,
     185,     0,     0,     0,     0,   186,     0,     0,     0,   187,
       0,     0,     0,     0,     0,   188,     0,   189,   190,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   191,     0,
       0,   192,     0,     0,  1129,     0,   193,     0,     0,     0,
     194,     0,     0,     0,     0,     0,     0,     0,   195,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     163,   164,   165,   166,   167,     0,     0,     0,     0,     0,
     854,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   169,     0,   170,   171,     0,   172,   173,     0,
     174,     0,     0,     0,     0,   175,     0,     0,     0,     0,
       0,     0,   176,     0,     0,     0,     0,     0,     0,     0,
       0,   177,     0,     0,     0,     0,     0,     0,   178,   179,
     180,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   181,   182,   183,     0,     0,     0,     0,
     184,     0,     0,   185,     0,     0,     0,     0,   186,     0,
       0,     0,   187,     0,     0,     0,     0,     0,   188,     0,
     189,   190,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   191,     0,     0,   192,     0,     0,   856,     0,   193,
       0,     0,     0,   194,     0,     0,     0,     0,     0,     0,
       0,   195,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   163,   164,   165,   166,   167,     0,     0,
       0,     0,     0,   168,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   169,     0,   170,   171,     0,
     172,   173,     0,   174,     0,     0,     0,     0,   175,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,     0,     0,   177,     0,     0,     0,     0,     0,
       0,   178,   179,   180,     0,     0,     0,  1337,     0,     0,
       0,     0,     0,     0,     0,     0,   181,   182,   183,     0,
       0,     0,     0,   184,     0,     0,   185,     0,     0,     0,
       0,   186,     0,     0,     0,   187,     0,     0,     0,     0,
       0,   188,     0,   189,   190,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   191,     0,     0,   192,     0,     0,
       0,     0,   193,     0,     0,     0,   194,     0,     0,     0,
       0,     0,     0,     0,   195,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   163,   164,   165,   166,
     167,     0,     0,     0,     0,     0,   168,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   169,     0,
     170,   171,     0,   172,   173,     0,   174,     0,     0,     0,
       0,   175,     0,     0,     0,     0,     0,     0,   176,     0,
       0,     0,     0,     0,     0,     0,     0,   177,     0,     0,
       0,     0,     0,     0,   178,   179,   180,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   181,
     182,   183,     0,     0,     0,     0,   184,     0,     0,   185,
       0,     0,     0,     0,   186,     0,     0,     0,   187,     0,
       0,     0,     0,     0,   188,     0,   189,   190,     0,     0,
       0,     0,     0,     0,     0,     0,  1737,   191,     0,     0,
     192,     0,     0,     0,     0,   193,     0,     0,     0,   194,
       0,     0,     0,     0,     0,     0,     0,   195,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,   176,     0,     0,     0,     0,     0,     0,     0,     0,
     177,     0,     0,     0,     0,     0,     0,   178,   179,   180,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   181,   182,   183,     0,     0,     0,     0,   184,
       0,     0,   185,     0,     0,     0,     0,   186,     0,     0,
       0,   187,     0,     0,     0,     0,     0,   188,     0,   189,
     190,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     191,     0,     0,   192,     0,     0,  1843,     0,   193,     0,
       0,     0,   194,     0,     0,     0,     0,     0,     0,     0,
     195,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   163,   164,   165,   166,   167,     0,     0,  1587,
       0,     0,   168,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   169,     0,   170,   171,     0,   172,
     173,     0,   174,     0,     0,     0,     0,   175,     0,     0,
       0,     0,     0,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,   177,     0,     0,     0,     0,     0,     0,
     178,   179,   180,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   181,   182,   183,     0,     0,
       0,     0,   184,     0,     0,   185,     0,     0,     0,     0,
     186,     0,     0,     0,   187,     0,     0,     0,     0,     0,
     188,     0,   189,   190,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   191,     0,     0,   192,     0,     0,     0,
       0,   193,     0,     0,     0,   194,     0,     0,     0,     0,
       0,     0,     0,   195,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   163,   164,   165,   166,   167,
       0,     0,     0,     0,     0,   168,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   169,     0,   170,
     171,     0,   172,   173,     0,   174,     0,     0,     0,     0,
     175,     0,     0,     0,     0,     0,     0,   176,     0,     0,
       0,     0,     0,     0,     0,     0,   177,     0,     0,     0,
       0,     0,     0,   178,   179,   180,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   181,   182,
     183,     0,     0,     0,     0,   184,     0,     0,   185,     0,
       0,     0,     0,   186,     0,     0,     0,   187,     0,     0,
       0,     0,     0,   188,     0,   189,   190,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   191,     0,     0,   192,
    2393,     0,     0,     0,   193,     0,     0,     0,   194,     0,
       0,     0,     0,     0,     0,     0,   195,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   163,   164,
     165,   166,   167,     0,     0,     0,     0,     0,   168,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     169,     0,   170,   171,     0,   172,   173,     0,   174,     0,
       0,     0,     0,   175,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,     0,     0,   177,
       0,     0,     0,     0,     0,     0,   178,   179,   180,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   182,   183,     0,     0,     0,     0,   184,     0,
       0,   185,     0,     0,     0,     0,   186,     0,     0,     0,
     187,     0,     0,     0,     0,     0,   188,     0,   189,   190,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   191,
       0,     0,   192,     0,     0,  2675,     0,   193,     0,     0,
       0,   194,     0,     0,     0,     0,     0,     0,     0,   195,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   163,   164,   165,   166,   167,     0,     0,     0,     0,
       0,   168,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   169,     0,   170,   171,     0,   172,   173,
       0,   174,     0,     0,     0,     0,   175,     0,     0,     0,
       0,     0,     0,   176,     0,     0,     0,     0,  2679,     0,
       0,     0,   177,     0,     0,     0,     0,     0,     0,   178,
     179,   180,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   181,   182,   183,     0,     0,     0,
       0,   184,     0,     0,   185,     0,     0,     0,     0,   186,
       0,     0,     0,   187,     0,     0,     0,     0,     0,   188,
       0,   189,   190,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   191,     0,     0,   192,     0,     0,     0,     0,
     193,     0,     0,     0,   194,     0,     0,     0,     0,     0,
       0,     0,   195,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,   176,     0,     0,     0,
       0,     0,     0,     0,     0,   177,     0,     0,     0,     0,
       0,     0,   178,   179,   180,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   181,   182,   183,
       0,     0,     0,     0,   184,     0,     0,   185,     0,     0,
       0,     0,   186,     0,     0,     0,   187,     0,     0,     0,
       0,     0,   188,     0,   189,   190,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   191,     0,     0,   192,     0,
       0,     0,     0,   193,     0,     0,     0,   194,     0,     0,
       0,     0,     0,     0,     0,   195,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   163,     0,   786,
       0,   167,   787,     0,   788,   789,   790,   791,   792,   793,
     794,   795,   796,   797,   798,     0,     0,     0,   799,   800,
     801,   802,     0,   803,     0,     0,     0,     0,     0,   804,
     805,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     806,     0,     0,     0,     0,     0,     0,     0,   807,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,     0,
       0,     0,   809,     0,     0,   810,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   811,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1044,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   812,     0,
       0,     0,     0,     0,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   422,   423,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   424,   425,   426,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   427,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     428,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   429,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   430,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   431,   432,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     992,  1331,   167,   993,   786,     0,     0,   787,     0,   788,
     789,   790,   791,   792,   793,   794,   795,   796,   797,   798,
       0,     0,     0,   799,   800,   801,   802,     0,   803,     0,
       0,     0,     0,     0,   804,   805,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   806,     0,     0,     0,     0,
       0,     0,     0,   807,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   808,     0,     0,     0,     0,   809,     0,     0,
     810,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   811,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1112,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   812,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   422,   423,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   424,   425,   426,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   427,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   428,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   429,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   430,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   431,   432,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   992,   786,   167,   993,   787,     0,   788,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,     0,     0,
       0,   799,   800,   801,   802,     0,   803,     0,     0,     0,
       0,     0,   804,   805,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   806,     0,     0,     0,  1164,     0,     0,
       0,   807,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     808,     0,     0,     0,     0,   809,     0,     0,   810,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   811,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   812,     0,     0,     0,     0,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   422,   423,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   424,   425,   426,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   427,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   428,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   429,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   430,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   431,   432,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,  1308,  1309,   167,   786,     0,     0,   787,     0,
     788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
     798,     0,     0,     0,   799,   800,   801,   802,     0,   803,
       0,     0,     0,     0,     0,   804,   805,     0,  -980,     0,
       0,     0,     0,     0,     0,     0,   806,     0,     0,     0,
       0,     0,     0,     0,   807,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   808,     0,     0,     0,     0,   809,     0,
       0,   810,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   812,     0,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   422,   423,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   424,   425,   426,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   427,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   428,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   429,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   430,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   431,
     432,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,  1312,  1313,   167,   786,     0,     0,   787,
       0,   788,   789,   790,   791,   792,   793,   794,   795,   796,
     797,   798,     0,     0,     0,   799,   800,   801,   802,     0,
     803,     0,     0,     0,     0,     0,   804,   805,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   806,     0,     0,
       0,  1191,     0,     0,     0,   807,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   808,     0,     0,     0,     0,   809,
       0,     0,   810,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   811,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   812,     0,     0,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   422,
     423,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   424,   425,
     426,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   427,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   428,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     429,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     430,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     431,   432,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   167,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   667,   668,     0,
     669,   670,   671,   672,   673,   674,   675,   676,   677,   678,
     679,   680,   681,   682,   683,   684,   685,   686,   687,   688,
     689,     0,   690,   691,   692,   693,   694,   695,   696,   697,
     698,   699,   700,   701,   702,   703,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   713,   714,   715,   716,   717,
     718,   719,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   730,   731,   732,   733,   734,   735,   736,   737,
     738,   739,   740,   741,   742,   743,   744,   745,   746,   747,
     748,     0,   749,   750,   751,   752,   753,   754,   755,   756,
     757,   758,   759,   760,   761,   762,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   422,   423,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   424,   425,   426,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   427,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   428,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   429,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   430,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   431,
     432,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   167,     0,     0,   786,     0,     0,   787,
       0,   788,   789,   790,   791,   792,   793,   794,   795,   796,
     797,   798,     0,     0,     0,   799,   800,   801,   802,     0,
     803,  1806,     0,     0,     0,     0,   804,   805,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   806,     0,     0,
       0,  1807,     0,     0,     0,   807,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   808,     0,     0,     0,     0,   809,
       0,     0,   810,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   811,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   812,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   422,   423,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   424,   425,   426,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   427,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   428,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   429,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   430,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   431,   432,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   167,     0,     0,   786,     0,     0,   787,     0,
     788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
     798,     0,     0,     0,   799,   800,   801,   802,     0,   803,
       0,     0,     0,     0,     0,   804,   805,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   806,     0,     0,     0,
       0,     0,     0,     0,   807,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   808,     0,     0,     0,     0,   809,     0,
       0,   810,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   812,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   422,   423,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   424,   425,   426,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   427,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   428,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   429,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   430,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   431,   432,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   167,     0,     0,     0,     0,     0,   565,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   566,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   567,     0,     0,     0,     0,   568,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   569,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    16,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    18,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   422,   423,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   424,   425,   426,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   427,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     428,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   429,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   430,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   431,   432,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   570,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     167,     0,     0,     0,     0,     0,  2048,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2049,  2050,     0,     0,     0,   556,     0,     0,     0,     0,
       0,  2051,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1439,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   422,   423,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   424,   425,   426,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   427,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   428,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   429,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   430,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   431,   432,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   167,
       0,     0,     0,     0,     0,     0,  -480,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1985,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -480,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -480,     0,     0,     0,     0,     0,     0,  -480,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -480,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -480,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   422,   423,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   424,   425,   426,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   427,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   428,   283,
     284,   285,   286,   287,   288,  1986,   290,   291,   292,   293,
     294,   295,   296,   297,  1987,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   429,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   430,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   431,   432,   340,   341,   342,   343,
     344,  1988,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   167,     0,
     786,     0,     0,   787,  2230,   788,   789,   790,   791,   792,
     793,   794,   795,   796,   797,   798,     0,     0,     0,   799,
     800,   801,   802,   556,   803,     0,     0,     0,     0,     0,
     804,   805,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   806,     0,     0,     0,     0,     0,     0,     0,   807,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1356,   808,     0,
       0,     0,  1284,   809,     0,     0,   810,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   811,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,  1439,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   812,
       0,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   422,   423,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   424,   425,   426,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   427,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   428,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   429,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   430,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   431,   432,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   167,     0,     0,
       0,  2360,     0,     0,  2361,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1750,   419,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   420,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   421,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   422,   423,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     424,   425,   426,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     427,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   428,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   429,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   430,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,  1751,   334,   335,
     336,   337,   431,   432,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   167,     0,   786,     0,
    1048,   787,     0,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,     0,     0,     0,   799,   800,   801,
     802,     0,   803,     0,     0,     0,     0,     0,   804,   805,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   806,
       0,     0,     0,   419,     0,     0,     0,   807,     0,     0,
       0,     0,     0,     0,     0,     0,  1049,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   808,     0,     0,     0,
     420,   809,     0,     0,   810,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   811,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   421,  1420,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   812,     0,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     422,   423,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   424,
     425,   426,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   427,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   428,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   429,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   430,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   431,   432,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   167,     0,     0,     0,     0,
       0,     0,  1749,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1750,   419,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   420,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     421,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   422,
     423,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   424,   425,
     426,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   427,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   428,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     429,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     430,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,  1751,   334,   335,   336,   337,
     431,   432,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   167,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   419,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   420,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   421,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   422,   423,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   424,   425,   426,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   427,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   428,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   429,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   430,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   431,
     432,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   167,     0,     0,     0,     0,     0,     0,
    1262,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     442,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   443,     0,   444,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   422,   423,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   424,   425,   426,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   427,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   428,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   429,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   430,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   431,   432,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   167,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   997,   998,     0,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   999,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   422,   423,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   424,   425,   426,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   427,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   428,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   429,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   430,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   431,   432,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   167,   786,     0,     0,   787,     0,   788,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,     0,     0,
       0,   799,   800,   801,   802,     0,   803,     0,     0,     0,
       0,     0,   804,   805,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   806,     0,     0,     0,  1422,  1920,     0,
       0,   807,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1921,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     808,     0,     0,     0,     0,   809,     0,     0,   810,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   811,
       0,     0,     0,     0,     0,     0,     0,  1922,     0,     0,
       0,     0,     0,     0,     0,     0,  1923,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   812,     0,     0,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   422,   423,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   424,   425,   426,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   427,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     428,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   429,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   430,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   431,   432,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     167,     0,   786,     0,     0,   787,     0,   788,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,     0,     0,
       0,   799,   800,   801,   802,     0,   803,     0,     0,     0,
       0,     0,   804,   805,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   806,     0,     0,  1750,   419,     0,     0,
       0,   807,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1424,     0,     0,     0,     0,     0,     0,     0,
     808,     0,     0,     0,   420,   809,     0,     0,   810,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   811,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   421,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   812,     0,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   422,   423,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   424,   425,   426,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   427,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   428,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   429,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   430,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
    1751,   334,   335,   336,   337,   431,   432,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   167,
       0,   786,  1430,     0,   787,     0,   788,   789,   790,   791,
     792,   793,   794,   795,   796,   797,   798,     0,     0,     0,
     799,   800,   801,   802,     0,   803,     0,     0,     0,     0,
       0,   804,   805,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   806,     0,     0,     0,  1936,  1937,     0,     0,
     807,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   808,
       0,     0,     0,  1938,   809,     0,     0,   810,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   811,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1939,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     812,     0,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   422,   423,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   424,   425,   426,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,  1940,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   427,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   428,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   429,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   430,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   431,   432,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   167,     0,
     786,     0,     0,   787,     0,   788,   789,   790,   791,   792,
     793,   794,   795,   796,   797,   798,  1432,     0,     0,   799,
     800,   801,   802,     0,   803,     0,     0,     0,     0,     0,
     804,   805,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   806,     0,     0,     0,  1936,     0,     0,     0,   807,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   808,     0,
       0,     0,  1938,   809,     0,     0,   810,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   811,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2102,  1939,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   812,
       0,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   422,   423,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   424,   425,   426,   229,   230,   231,   232,   233,   234,
     235,   236,  2103,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   427,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   428,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   429,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   430,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   431,   432,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   167,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2292,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1936,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1938,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1939,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   422,   423,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     424,   425,   426,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     427,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   428,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   429,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   430,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   431,   432,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   167,     0,   786,     0,
       0,   787,  2048,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,     0,     0,     0,   799,   800,   801,
     802,   556,   803,     0,     0,     0,     0,     0,   804,   805,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   806,
       0,     0,     0,  1431,     0,     0,     0,   807,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1356,   808,     0,     0,     0,
       0,   809,     0,     0,   810,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   811,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1439,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   812,     0,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     422,   423,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   424,
     425,   426,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   427,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   428,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   429,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   430,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   431,   432,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   167,     0,   786,     0,     0,
     787,     0,   788,   789,   790,   791,   792,   793,   794,   795,
     796,   797,   798,     0,     0,     0,   799,   800,   801,   802,
       0,   803,     0,     0,     0,     0,     0,   804,   805,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   806,  1437,
       0,     0,   419,     0,     0,     0,   807,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   808,     0,     0,     0,   420,
     809,     0,     0,   810,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   811,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     421,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   812,     0,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   422,
     423,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   424,   425,
     426,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   427,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   428,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     429,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     430,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     431,   432,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   167,   786,     0,     0,   787,     0,
     788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
     798,     0,     0,     0,   799,   800,   801,   802,     0,   803,
       0,     0,     0,     0,     0,   804,   805,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   806,     0,     0,     0,
       0,     0,     0,     0,   807,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   442,     0,   808,     0,     0,     0,     0,   809,     0,
       0,   810,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   811,     0,     0,     0,     0,     0,   443,     0,
     444,     0,     0,     0,     0,     0,     0,     0,     0,  1448,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   812,     0,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   422,   423,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   424,   425,   426,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   427,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   428,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   429,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   430,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   431,
     432,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   167,     0,     0,     0,     0,     0,   457,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   170,   171,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   422,   423,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   424,   425,   426,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   427,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   428,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   429,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   430,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   431,   432,
     458,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   167,     0,   786,     0,     0,   787,     9,   788,
     789,   790,   791,   792,   793,   794,   795,   796,   797,   798,
       0,     0,     0,   799,   800,   801,   802,     0,   803,     0,
       0,     0,     0,     0,   804,   805,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   806,     0,     0,     0,     0,
       0,     0,     0,   807,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   808,     0,     0,     0,     0,   809,     0,     0,
     810,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   811,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    16,     0,     0,  1449,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   812,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   422,   423,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   424,   425,   426,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   427,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   428,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   429,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   430,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   431,   432,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   167,     0,     0,     0,     0,     0,  1068,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   422,   423,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   424,   425,   426,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   427,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     428,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   429,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   430,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   431,   432,  1069,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     167,     0,   786,     0,     0,   787,  1694,   788,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,     0,     0,
       0,   799,   800,   801,   802,   556,   803,     0,     0,     0,
       0,     0,   804,   805,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   806,     0,     0,     0,     0,     0,     0,
       0,   807,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1450,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     808,     0,     0,     0,     0,   809,     0,     0,   810,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   811,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1439,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   812,     0,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   422,   423,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   424,   425,   426,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   427,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   428,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   429,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   430,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   431,   432,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   167,
       0,   786,     0,     0,   787,     0,   788,   789,   790,   791,
     792,   793,   794,   795,   796,   797,   798,  1570,     0,     0,
     799,   800,   801,   802,     0,   803,     0,     0,     0,     0,
       0,   804,   805,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   806,     0,     0,     0,  1936,     0,     0,     0,
     807,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   808,
       0,     0,     0,  1938,   809,     0,     0,   810,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   811,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1939,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     812,     0,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   422,   423,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   424,   425,   426,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   427,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   428,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   429,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   430,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   431,   432,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   167,   786,
       0,     0,   787,     0,   788,   789,   790,   791,   792,   793,
     794,   795,   796,   797,   798,     0,     0,     0,   799,   800,
     801,   802,     0,   803,     0,     0,     0,     0,     0,   804,
     805,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     806,   508,     0,     0,  1452,     0,     0,     0,   807,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,     0,
       0,     0,   809,     0,     0,   810,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   811,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   509,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   812,     0,
       0,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   422,   423,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   424,   425,   426,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   427,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   428,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   429,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   430,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   431,   432,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   167,     0,   786,
       0,     0,   787,   836,   788,   789,   790,   791,   792,   793,
     794,   795,   796,   797,   798,     0,     0,     0,   799,   800,
     801,   802,     0,   803,     0,     0,     0,   837,     0,   804,
     805,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     806,     0,     0,     0,     0,     0,     0,     0,   807,     0,
       0,     0,  1205,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,     0,
       0,     0,   809,     0,     0,   810,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   811,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   812,     0,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   422,   423,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     424,   425,   426,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     427,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   428,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   429,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   430,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   431,   432,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   167,     0,   786,     0,
     841,   787,     0,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,     0,     0,     0,   799,   800,   801,
     802,     0,   803,     0,     0,     0,   842,     0,   804,   805,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   806,
       0,     0,     0,     0,     0,     0,     0,   807,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   808,     0,     0,     0,
       0,   809,     0,     0,   810,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   811,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1610,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   812,     0,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     422,   423,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   424,
     425,   426,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   427,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   428,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   429,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   430,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   431,   432,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   167,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   975,
     556,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   422,
     423,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   424,   425,
     426,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   427,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   428,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     429,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     430,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     431,   432,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   167,   786,     0,     0,   787,     0,
     788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
     798,     0,     0,     0,   799,   800,   801,   802,     0,   803,
       0,     0,     0,     0,     0,   804,   805,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   806,     0,     0,     0,
       0,     0,     0,     0,   807,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   808,     0,     0,     0,     0,   809,     0,
       0,   810,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   462,     0,     0,     0,     0,     0,     0,  1639,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   812,     0,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   422,   423,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   424,   425,   426,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   427,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   428,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   429,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   430,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   431,
     432,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   167,     0,   786,     0,     0,   787,     0,
     788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
     798,     0,     0,     0,   799,   800,   801,   802,   556,   803,
       0,     0,     0,     0,     0,   804,   805,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   806,     0,     0,     0,
       0,     0,     0,     0,   807,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   808,     0,     0,     0,     0,   809,     0,
       0,   810,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1822,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   812,     0,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   422,   423,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   424,   425,   426,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   427,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   428,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   429,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   430,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   431,   432,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   167,     0,   786,     0,     0,   787,  1839,   788,
     789,   790,   791,   792,   793,   794,   795,   796,   797,   798,
       0,     0,     0,   799,   800,   801,   802,     0,   803,     0,
       0,     0,     0,     0,   804,   805,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   806,     0,     0,     0,     0,
       0,     0,     0,   807,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   808,     0,     0,     0,   420,   809,     0,     0,
     810,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   811,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   812,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   422,   423,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   424,   425,   426,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   427,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   428,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   429,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   430,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   431,   432,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   167,     0,     0,     0,     0,     0,     0,   906,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   422,   423,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   424,   425,   426,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   427,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     428,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   429,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   430,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   431,   432,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     167,     0,   786,     0,     0,   787,  1137,   788,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,     0,     0,
       0,   799,   800,   801,   802,     0,   803,     0,     0,     0,
       0,     0,   804,   805,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   806,     0,     0,     0,  1932,     0,     0,
       0,   807,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     808,     0,     0,     0,     0,   809,     0,     0,   810,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   811,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   812,     0,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   422,   423,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   424,   425,   426,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   427,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   428,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   429,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   430,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   431,   432,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   167,
       0,   786,     0,     0,   787,   836,   788,   789,   790,   791,
     792,   793,   794,   795,   796,   797,   798,     0,     0,     0,
     799,   800,   801,   802,     0,   803,     0,     0,     0,     0,
       0,   804,   805,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   806,     0,     0,     0,     0,     0,     0,     0,
     807,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   808,
       0,     0,     0,     0,   809,     0,     0,   810,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   811,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1996,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     812,     0,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   422,   423,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   424,   425,   426,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   427,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   428,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   429,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   430,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   431,   432,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   167,   786,
       0,     0,   787,  1847,   788,   789,   790,   791,   792,   793,
     794,   795,   796,   797,   798,     0,     0,     0,   799,   800,
     801,   802,     0,   803,     0,     0,     0,     0,     0,   804,
     805,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     806,     0,     0,     0,     0,     0,     0,     0,   807,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,     0,
       0,     0,   809,     0,     0,   810,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   811,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1250,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   812,     0,
       0,   196,   197,   198,  1251,   200,  1252,   202,   203,   204,
     205,   206,   422,   423,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   424,   425,   426,   229,   230,   231,   232,   233,   234,
     235,   236,  1253,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   427,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   428,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,  1254,
     305,   306,  1255,   429,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   430,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   431,   432,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   167,   786,     0,
       0,   787,  2006,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,     0,     0,     0,   799,   800,   801,
     802,     0,   803,     0,     0,     0,     0,     0,   804,   805,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   806,
       0,     0,     0,     0,     0,     0,     0,   807,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   808,     0,     0,     0,
       0,   809,     0,     0,   810,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   811,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     509,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   812,     0,     0,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   422,   423,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     424,   425,   426,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     427,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   428,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   429,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   430,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   431,   432,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   167,     0,   786,     0,
       0,   787,  1316,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,     0,     0,     0,   799,   800,   801,
     802,     0,   803,     0,     0,     0,     0,     0,   804,   805,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   806,
    2007,     0,     0,     0,     0,     0,     0,   807,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   808,     0,     0,     0,
       0,   809,     0,     0,   810,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   811,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   812,     0,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     422,   423,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   424,
     425,   426,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   427,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   428,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   429,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   430,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   431,   432,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   167,     0,   786,     0,     0,
     787,  2081,   788,   789,   790,   791,   792,   793,   794,   795,
     796,   797,   798,     0,     0,     0,   799,   800,   801,   802,
       0,   803,     0,     0,     0,     0,     0,   804,   805,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   806,     0,
       0,     0,     0,     0,     0,     0,   807,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1356,   808,     0,     0,     0,     0,
     809,     0,     0,   810,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   811,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   812,     0,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   422,
     423,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   424,   425,
     426,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   427,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   428,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     429,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     430,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     431,   432,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   167,     0,   786,     0,     0,   787,
    1444,   788,   789,   790,   791,   792,   793,   794,   795,   796,
     797,   798,     0,     0,     0,   799,   800,   801,   802,     0,
     803,     0,     0,     0,     0,     0,   804,   805,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   806,     0,     0,
       0,     0,     0,     0,     0,   807,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   808,     0,     0,     0,     0,   809,
       0,     0,   810,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   811,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2195,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   812,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   422,   423,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   424,   425,   426,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   427,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   428,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   429,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   430,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   431,
     432,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   167,     0,   786,     0,     0,   787,  1672,
     788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
     798,     0,     0,     0,   799,   800,   801,   802,     0,   803,
       0,     0,     0,     0,     0,   804,   805,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   806,     0,     0,     0,
       0,     0,     0,  2199,   807,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   808,     0,     0,     0,     0,   809,     0,
       0,   810,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   812,     0,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   422,   423,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   424,   425,   426,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   427,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   428,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   429,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   430,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   431,   432,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   167,   786,     0,     0,   787,     0,   788,   789,
     790,   791,   792,   793,   794,   795,   796,   797,   798,     0,
       0,     0,   799,   800,   801,   802,     0,   803,     0,     0,
       0,     0,     0,   804,   805,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   806,     0,     0,     0,  2321,     0,
       0,     0,   807,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   808,     0,     0,     0,     0,   809,     0,     0,   810,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     811,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1702,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   812,     0,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   422,   423,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   424,   425,   426,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   427,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   428,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   429,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   430,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   431,   432,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   167,     0,     0,     0,     0,     0,     0,  1771,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   422,   423,   209,   210,   211,
    1772,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   424,   425,   426,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,  1773,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   427,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     428,   283,   284,   285,   286,   287,   288,   289,   290,   291,
    1774,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   429,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   430,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   431,   432,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     167,     0,   786,     0,     0,   787,  1787,   788,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,     0,     0,
       0,   799,   800,   801,   802,     0,   803,     0,     0,     0,
       0,     0,   804,   805,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   806,     0,     0,     0,     0,     0,     0,
       0,   807,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     808,     0,     0,     0,     0,   809,     0,     0,   810,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   811,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   812,     0,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   422,   423,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   424,   425,   426,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   427,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   428,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   429,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   430,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   431,   432,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   167,
       0,   786,     0,     0,   787,  1959,   788,   789,   790,   791,
     792,   793,   794,   795,   796,   797,   798,     0,     0,     0,
     799,   800,   801,   802,     0,   803,     0,     0,     0,     0,
       0,   804,   805,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   806,     0,     0,     0,     0,     0,     0,     0,
     807,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2609,
       0,     0,     0,     0,   809,     0,     0,   810,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   811,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     812,     0,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   422,   423,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   424,   425,   426,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   427,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   428,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   429,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   430,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   431,   432,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   167,   786,
       0,     0,   787,  2442,   788,   789,   790,   791,   792,   793,
     794,   795,   796,   797,   798,     0,     0,     0,   799,   800,
     801,   802,     0,   803,     0,     0,     0,     0,     0,   804,
     805,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     806,     0,     0,     0,     0,     0,  1985,     0,   807,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,     0,
       0,     0,   809,     0,     0,   810,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   811,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   812,     0,
       0,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   422,   423,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   424,   425,   426,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   427,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   428,   283,   284,
     285,   286,   287,   288,  1986,   290,   291,   292,   293,   294,
     295,   296,   297,  1987,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   429,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   430,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   431,   432,   340,   341,   342,   343,   344,
    1988,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   167,     0,   786,
       0,     0,   787,  2046,   788,   789,   790,   791,   792,   793,
     794,   795,   796,   797,   798,     0,     0,     0,   799,   800,
     801,   802,     0,   803,     0,     0,     0,     0,     0,   804,
     805,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   807,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,     0,
       0,     0,   809,     0,     0,   810,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   812,     0,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   422,   423,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     424,   425,   426,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     427,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   428,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   429,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   430,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   431,   432,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   167,     0,     0,     0,
       0,     0,     0,  2091,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     422,   423,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   424,
     425,   426,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   427,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   428,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   429,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   430,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   431,   432,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   167,     0,   786,     0,     0,
     787,  2454, -1461, -1461, -1461, -1461, -1461, -1461, -1461,   795,
     796,   797,   798,     0,     0,     0,   799,   800,   801,   802,
       0,   803,     0,     0,     0,     0,     0,   804,   805,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1461,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1461,     0,     0,     0,     0,
   -1461,     0,     0, -1461,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1461,     0,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   422,
     423,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   424,   425,
     426,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   427,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   428,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     429,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     430,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     431,   432,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   167,   786,     0,     0,   787,  2526,
     788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
     798,     0,     0,     0,   799,   800,   801,   802,     0,   803,
       0,     0,     0,     0,     0,   804,   805,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   806,     0,     0,     0,
       0,     0,  2729,     0,   807,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   808,     0,     0,     0,     0,   809,     0,
       0,   810,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   812,     0,     0,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   422,   423,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   424,   425,   426,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   427,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   428,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,  2730,   307,   429,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   430,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   431,
     432,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   167,   786,     0,     0,   787,  2530,   788,
     789,   790,   791,   792,   793,   794,   795,   796,   797,   798,
       0,     0,     0,   799,   800,   801,   802,     0,   803,     0,
       0,     0,     0,     0,   804,   805,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   806,     0,     0,     0,     0,
       0,     0,     0,   807,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   808,     0,     0,     0,     0,   809,     0,     0,
     810,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   811,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   812,     0,     0,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   422,   423,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   424,   425,   426,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   427,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   428,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   429,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   430,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   431,   432,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   167,   786,     0,     0,   787,  2587,   788,   789,
     790,   791,   792,   793,   794,   795,   796,   797,   798,     0,
       0,     0,   799,   800,   801,   802,     0,   803,     0,     0,
       0,     0,     0,   804,   805,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   806,     0,     0,     0,     0,     0,
       0,     0,   807,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   808,     0,     0,     0,     0,   809,     0,     0,   810,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     811,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   812,     0,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   422,   423,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   424,   425,   426,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   427,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   524,   277,   278,   279,   280,
     281,   428,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   429,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   430,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   431,   432,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   167,   786,     0,     0,   787,  2658,   788,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,     0,     0,
       0,   799,   800,   801,   802,     0,   803,     0,     0,     0,
       0,     0,   804,   805,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   806,     0,     0,     0,     0,     0,     0,
       0,   807,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     808,     0,     0,     0,     0,   809,     0,     0,   810,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   811,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   812,     0,     0,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   422,   423,   209,   210,   211,
    1772,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   424,   425,   426,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,  1773,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   427,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     428,   283,   284,   285,   286,   287,   288,   289,   290,   291,
    1774,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   429,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   430,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   431,   432,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     786,     0,     0,   787,  2702,   788,   789,   790,   791,   792,
     793,   794,   795,   796,   797,   798,     0,     0,     0,   799,
     800,   801,   802,     0,   803,     0,     0,     0,     0,     0,
     804,   805,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   806,     0,     0,     0,     0,     0,     0,     0,   807,
     786,     0,     0,   787,  2705,   788,   789,   790,   791,   792,
     793,   794,   795,   796,   797,   798,     0,     0,     0,   799,
     800,   801,   802,     0,   803,     0,     0,     0,   808,     0,
     804,   805,     0,   809,     0,     0,   810,     0,     0,     0,
       0,   806,     0,     0,     0,     0,     0,   811,     0,   807,
     786,     0,     0,   787,  2773,   788,   789,   790,   791,   792,
     793,   794,   795,   796,   797,   798,     0,     0,     0,   799,
     800,   801,   802,     0,   803,     0,     0,     0,   808,     0,
     804,   805,     0,   809,     0,     0,   810,     0,     0,   812,
       0,   806,     0,     0,     0,     0,     0,   811,     0,   807,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   808,     0,
       0,     0,     0,   809,     0,     0,   810,     0,     0,   812,
       0,     0,     0,     0,     0,     0,     0,   811,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   812
  };

  const short
  BisonParserImpl::yycheck_[] =
  {
       7,    17,   102,    10,   602,    11,    16,   102,   879,   950,
      17,    18,   947,   573,  1205,   554,   455,    24,  1021,  1158,
     566,   985,  1322,   901,   168,    99,    33,   168,  1537,  1324,
      37,    38,    39,   168,    29,    42,   978,   121,    45,   123,
     124,  1564,   991,   457,  1342,     9,  1340,   486,  1690,  1881,
    1492,   935,    29,     7,   776,    29,   394,    17,  1283,   125,
    1000,   127,  1858,    92,   898,    45,   135,   899,   381,  1758,
     938,     7,  2207,   561,     5,  1743,  1559,     7,  1993,   821,
    1994,   884,  1505,  1530,  1559,    16,  2078,  1780,   550,  2104,
     529,   879,    99,  1028,  2351,   102,  1650,     7,  1158,  2211,
      34,  2229,  1902,     7,     7,    34,    34,  2246,    14,     3,
      34,   118,  1594,   120,   121,   122,   123,   124,   840,   658,
      81,    34,    13,   926,  1981,    75,   483,   484,    55,  1973,
       7,    87,    34,  1252,  1253,    34,  2357,   879,   102,  2464,
      50,  2039,  2147,  2041,   501,   502,   503,    92,  1993,    88,
     369,  1100,  1993,  2068,  1506,  2376,     3,     4,     5,     6,
      11,   119,    55,   170,   171,   103,    86,    14,    13,    78,
     141,   181,   166,    50,    67,    67,     3,    11,     1,  1757,
      55,   188,    88,   243,  2295,  1497,    13,    71,   149,   160,
      11,  1833,   252,    12,   111,   104,    34,    14,    55,   125,
    1893,    59,     3,     4,     5,     6,   106,    55,  1901,   203,
      84,     3,   202,   106,  2377,    31,    32,   126,    11,   121,
    1862,    13,    15,  2245,    98,  2446,   125,  1539,    44,   129,
      88,    78,  1181,   223,  1066,    92,    55,     7,    96,   299,
     153,    58,    80,    55,   154,   171,   130,  1770,   139,    72,
     181,   153,   246,   155,   129,    67,   227,   174,  2397,    80,
    2481,  2176,  1785,   166,    86,  1560,   176,   171,   171,   179,
     199,   159,   106,   177,   177,   120,   215,    78,   207,   126,
     133,     2,   113,     4,   242,   205,   178,   197,   259,   191,
     141,   229,   103,   120,  2619,   205,   241,  1436,   517,  1782,
     203,   240,   179,  2308,   214,   261,   133,  1782,   207,   215,
    2421,   261,   239,  2170,  2228,   239,   277,   519,   857,  2115,
     230,  2219,   213,  2167,   234,   126,   220,  1809,  1680,   258,
    2245,  2176,  1203,  1275,   240,  2176,   264,   308,   248,   268,
     250,  2141,   246,   246,   257,   301,   239,   239,  2037,  2461,
    2571,   264,  1930,   230,    13,   289,   258,   234,   206,   261,
     270,  2618,  1804,   273,   274,  1677,   270,   270,   278,  2508,
    2392,   248,  2629,   380,   381,  2487,  1436,   287,   189,   102,
    1214,  1500,  1501,   205,   231,  1219,   396,   394,  1222,   298,
    1224,  1225,  1226,   270,   206,   305,   273,  2560,   121,   115,
     211,   171,  2234,   256,   235,  2568,   294,   177,   148,    13,
     287,  1894,   141,  1967,   135,  1203,   103,  2552,  2433,  1894,
    2435,  2413,  2550,   885,   185,   103,   133,   160,   305,    34,
     231,   160,   133,   988,    34,  2570,  1859,  2130,   154,   985,
     185,    34,   165,   527,   451,   165,   453,    11,   455,    11,
     457,  2144,    13,    13,   185,   462,  1903,   452,    20,     0,
     176,  1203,  1265,   103,    50,   396,  2380,  1416,  1951,  2383,
     281,   216,   115,  1357,    34,    34,   135,  2392,    11,   486,
    2615,   197,   153,    88,    70,   216,   925,    80,   495,   222,
     564,  2159,     7,   304,   471,    55,   910,   936,   227,   177,
     507,    11,   104,    13,    34,   192,   945,    11,   495,    34,
     517,   154,   252,   520,  1002,   495,   120,  1385,   234,   588,
     527,   222,   529,   664,   534,   964,   864,  2216,   841,   133,
     259,   209,   542,   133,   250,  2044,  1404,   177,   548,   549,
     301,   264,   106,   550,   264,  2341,   553,  1102,  1103,   556,
     566,  1383,   192,   260,   197,   256,   301,   564,   565,   120,
     566,   568,   919,  1397,   121,  1104,   125,   577,   246,   209,
     301,   287,   133,   106,   581,   135,   462,   255,    13,   308,
    2022,   568,   939,    87,   941,   942,   257,   594,   568,   305,
     192,   234,   166,   264,   287,   125,   153,    55,   155,   615,
     125,   565,   139,   534,   103,    70,   246,   250,   615,   107,
     120,   542,   116,     0,  1578,   255,   107,   548,   549,    11,
      55,    67,   121,    34,   619,    12,  1818,    14,  1820,   203,
    1508,   660,    11,   662,   191,   630,   219,  1471,   103,  1473,
     594,   238,  1582,  1868,   287,  1479,   577,    26,  1482,    34,
    1484,  1485,  1947,   630,    34,   615,   630,   103,   594,  1205,
     879,   199,   305,   121,   594,  1328,  1329,   553,    55,   207,
      57,   254,   178,    65,    79,   133,   213,  1511,  1512,    13,
      74,   179,  1516,  1875,   149,   887,  1813,    67,   179,    81,
    1028,    82,    84,   192,    85,   106,    90,    89,   133,   214,
     135,   258,    94,    95,   261,  2733,    98,   112,   100,   184,
     854,   178,   309,   854,   933,   230,    50,   270,    13,   854,
     258,   106,    13,  1607,  1446,   117,  1853,  2169,   234,  2757,
     268,   176,   247,   248,   128,    11,   251,   124,    14,    34,
     131,  2278,   217,  1934,   131,  1872,   133,   949,    65,     5,
     303,  1414,  1415,    79,    45,   270,    13,   148,   273,   274,
     205,   768,     5,   278,    81,     5,     6,   234,   775,     3,
    2307,   778,    89,   780,   781,   290,   291,    34,    95,    55,
      14,     3,   297,    11,    27,    28,   112,    27,    28,  1335,
       1,    50,     3,    27,    28,    38,   803,    13,    38,   314,
     117,    55,    92,   767,    38,    27,    28,    14,   159,    37,
     820,    70,  2644,    67,   768,     7,    38,    14,    34,    62,
      31,   828,    62,     5,   778,   239,   780,    34,  1267,   836,
    2353,   294,   768,    13,   841,   178,    10,    34,   768,    13,
      13,  1280,   778,    13,   780,    27,    28,  1789,   778,    14,
     780,    25,    25,    15,    34,  2687,    38,   864,    32,  1693,
      34,    34,    13,  2157,    34,    26,    14,    80,    56,    34,
    1284,   878,    34,   879,   828,  2173,    14,   884,   885,    40,
    2403,    69,  2405,    34,  1028,    10,    34,  1028,    13,   820,
    1247,   210,   828,  1028,    15,   969,    34,  2021,   828,  1249,
      25,  1850,   108,   910,    29,    30,    31,    32,  1258,    34,
      13,  1261,  2036,    34,   178,    25,   923,   924,   925,   926,
      10,  1278,    25,    13,    34,    13,  1867,   937,   935,   936,
      18,    34,   159,    23,    24,    25,   943,   944,   945,    29,
      30,    31,    32,   279,    34,    15,   953,   954,   955,    13,
      40,    41,   288,    12,    18,    25,    25,   964,   114,   287,
     967,    25,   969,   119,    34,    34,   973,   974,   975,   985,
     977,  1849,   979,  1057,  1058,  1059,  1060,  1061,  1044,   985,
    2622,    25,    36,    11,  1203,    39,  1205,    11,  2081,  1055,
      34,    25,    20,  1000,  1001,  2290,    20,  2090,   120,  2294,
      34,  1011,    36,     7,    11,    39,   937,  1553,    15,   129,
      11,    11,  1019,    14,    14,   130,    11,    11,  1564,    14,
      14,  1028,   214,    12,  1031,    11,  1033,  1034,    14,    71,
      72,    11,  1578,  1235,    14,    44,    11,  1476,   230,    14,
      11,  1048,    10,    14,  1483,    13,    50,  1989,  1990,    12,
    1057,  1058,  1059,  1060,  1061,   247,   248,    25,    12,   251,
      11,    29,  1069,    14,    32,  1899,    34,   231,    13,   233,
    1065,   317,   318,   319,   320,   321,   322,   323,   270,    13,
    1011,   273,   274,    44,    45,  1304,   278,  1289,    10,    18,
      11,    13,    11,    14,     3,    14,  1298,  1536,   290,   291,
      13,    11,    24,    25,    14,   297,     3,    29,    30,    31,
      32,    11,    34,  2116,    14,   133,   134,  1124,    40,    41,
      11,    11,   314,    14,    14,    11,    11,     3,    14,    14,
    1137,  1670,    11,  2642,    11,    14,    11,    14,    11,    14,
      11,    14,    11,    14,  1154,    14,    11,  2650,  2651,    14,
     154,  1115,    11,    11,     3,    14,    14,  1164,    11,   285,
     286,    14,  1519,  1520,  1521,  1522,  1523,  2388,  2389,  1526,
    1124,  1528,   176,    11,    11,   179,    14,    14,    11,     3,
       3,    14,     5,     3,  1191,  2519,  2520,     3,  1124,  1205,
       3,    13,  1631,   197,  1124,    13,     3,  1203,     3,    25,
     130,   205,    13,   130,    13,     3,     3,  1426,    18,    34,
     214,  1218,    18,  1220,    13,    36,   261,   133,    14,    55,
      15,    15,   270,  1154,  1770,   287,   230,  1234,   205,   305,
     234,   151,   265,   205,    86,    13,    92,  1676,   270,  1785,
     265,   214,   106,   151,   248,   133,   250,  1686,  2190,  2191,
     287,   249,    11,  1692,   306,    13,   106,    31,  1265,    34,
    1267,  1268,    31,    80,    11,   225,   270,    11,    97,   273,
     274,    34,  1279,  1280,   278,  1477,    13,  1284,    57,  1286,
    1244,   124,   130,   287,  1291,    88,  1505,  1294,   311,  1296,
    1297,    72,   232,  1300,  1438,  1302,  1362,  1438,   300,    86,
     287,   305,  1309,  1438,   159,   210,  1313,    14,   178,  1316,
     178,    10,   159,  1320,    13,   159,     7,    44,   120,  1335,
      13,    70,   292,    43,  1331,    42,    25,    63,   105,  1335,
      29,    30,    31,    32,  1553,    34,   151,   105,  2638,    85,
     265,    40,    41,   115,    86,  1564,   287,  1354,   314,    13,
    1357,   151,  1452,   245,  1914,   156,  2495,    76,    11,    50,
     174,    13,   245,    96,   131,    60,    13,    11,   266,   229,
      51,    13,    13,  1730,   130,    72,   227,    67,    15,    15,
      72,  2681,    15,    15,  2326,  2327,   270,   305,  1934,  2331,
     270,   151,   287,    14,    20,   214,  2274,   125,    20,  2590,
      11,  2279,  1366,    80,    55,    70,   310,   110,    15,   305,
     167,   245,   205,   287,   103,  1422,   208,   274,  1425,  1858,
     129,  1428,    15,   305,  1431,    55,   106,    11,   270,    15,
      80,   106,   244,    13,    13,   129,  2378,  1444,  2577,    55,
     244,    60,   124,    14,  2447,  1452,   133,   237,    14,    14,
      14,    13,    72,   193,  1461,    72,  2647,   287,   312,   305,
     205,   245,    14,   154,    13,   151,    80,     6,  1422,  1476,
     259,  1478,    14,  1480,  1481,  2014,  1483,  1431,    59,  1681,
      13,  1488,   106,    22,  1491,   176,  1422,   133,   179,    76,
    1497,  1498,  1422,  2457,    14,  1431,   214,   106,    13,   221,
     185,  1431,   186,   186,   106,   221,   197,   221,   186,    11,
      55,   237,   152,   121,   205,    11,    71,    61,   124,   193,
    1527,    14,   308,   214,   245,   305,    34,    55,   204,  1536,
     168,   244,  1539,  1540,   244,    13,  1543,  1553,   263,   230,
      80,   245,   141,   234,  1610,  2480,   106,   106,  1564,  2490,
    1907,  1770,  1559,  1910,   128,   106,    18,   248,    55,   250,
      11,    11,  1578,   111,   105,  1572,  1785,    13,    13,   214,
     124,   121,  1578,  2407,  1581,  1582,   245,   116,   117,   270,
     190,    14,   273,   245,    14,  1592,  2457,  1551,  1672,  1543,
     129,   261,    14,   111,  1678,  1605,   287,   106,  1608,    13,
    1607,   267,    14,   246,    13,   152,   104,   255,   125,   131,
      50,   103,    18,  1543,   305,    18,    55,    13,    60,    11,
    2218,   124,    13,    13,  1631,    96,  1721,   170,   123,   168,
      14,    11,    55,   221,    11,    82,    11,  2579,   132,   178,
    1859,   280,    85,   129,   125,   125,    80,   186,   201,    13,
     189,   103,    13,    55,   192,   154,   239,   292,   221,    60,
    2538,    11,  1864,   104,    13,  1672,    14,    14,    11,  1676,
    1677,  1678,    72,   105,  1605,    60,  2115,  1608,   105,  1686,
     168,   275,  1689,    14,  1691,  1692,  1696,   292,    67,   100,
    1790,    14,    60,    11,    13,   313,    13,  2575,  1900,    11,
     129,  1708,    55,    13,   296,   104,   144,  1671,    67,    20,
      80,   169,  1719,  1720,   310,  1934,   141,  1724,  1725,  1726,
    1727,  1728,  1729,    14,   199,  1732,   133,  1734,    88,   189,
    1694,    14,    13,   109,    55,    11,  2700,  1744,   125,   228,
    1747,    13,   198,  1750,   141,   270,   144,   283,   129,    55,
     222,  1758,  1759,  2695,  1770,    94,  1822,   315,  2197,  2319,
      13,   135,  1828,    14,   106,  1696,    52,   304,    13,  1785,
      55,    13,    94,  1780,    70,  1782,   106,   172,   106,    13,
    1787,    55,   301,  1790,   284,    13,   307,    13,   270,   172,
    1797,   185,   283,    13,    11,    14,    14,   186,    13,   260,
    1807,    14,    14,   313,  1758,  1759,    13,  2353,   245,  1816,
      88,  1818,    96,  1820,  2521,  1267,  2018,  1066,    43,   982,
    2289,  1871,  1759,   362,   458,  2030,   365,  2033,  1758,  1759,
    2032,  2491,  2571,  2635,  2352,  2209,  2446,  1859,   377,  1782,
    1719,  2144,  2141,  1797,  2435,  2094,  2143,  2220,  2628,  2603,
    2525,  1858,  1927,  2739,    39,   394,   954,  2403,  2223,  2405,
     399,  1797,  2370,  1805,    97,  1806,  1873,  1797,  1875,  2724,
    2232,  1335,  1879,   664,  1881,  2616,  2451,  1884,  1885,  2721,
    2334,  2726,  1488,  1983,  1028,  1028,  1893,  1034,  2712,  1896,
    1488,  1816,  2719,  2382,  1901,  2498,  2098,  1964,  1882,  2617,
    2391,  2065,  2341,  1882,  2401,  2242,  1882,  2093,   867,  1916,
    1917,  2457,  2267,  1436,  1428,  2577,  1331,   188,  1934,  1926,
    1927,   828,  1203,  1946,  1446,  1932,   841,  1430,   834,   864,
    1996,  2467,  1998,  2513,   872,   171,  1065,   161,   610,   161,
    2142,  1065,  1626,   821,  1265,  1959,  2158,  1452,  1983,   580,
       2,  1933,  2154,  1616,  2125,   609,  1390,    -1,    -1,    -1,
      -1,  1968,    -1,  1970,    -1,   504,    -1,    -1,  1975,    -1,
      -1,    -1,  1926,  1927,   602,   602,  1983,   602,  1985,   602,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1926,  1927,    -1,    -1,    -1,    -1,  1926,  1927,    -1,    -1,
      -1,    -1,  2012,    -1,    -1,    -1,    -1,    -1,    -1,  2016,
    2017,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2460,  2029,    -1,  2226,    -1,    -1,    -1,    -1,    -1,
    2037,    -1,    -1,    -1,    -1,    -1,  2043,    -1,    -1,    -1,
      -1,  2048,   581,    -1,  2590,    -1,    -1,    -1,  2058,    -1,
      -1,  2408,    -1,    -1,    -1,    -1,    -1,  2259,  2158,    -1,
      -1,    -1,    -1,    -1,  2266,    -1,    -1,    -1,    -1,    -1,
    2077,    -1,    -1,    -1,    -1,  2082,  2083,    -1,    -1,    -1,
      -1,  2012,  2089,  2037,  2048,    -1,    -1,  2094,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2647,  2109,    -1,    -1,    -1,    -1,  2037,  2115,    -1,
    2117,    -1,    -1,    -1,  2121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2129,  2130,    -1,   664,  2133,  2058,    -1,  2195,
    2569,    -1,    -1,    -1,  2353,    -1,    -1,  2144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2158,    -1,    -1,  2700,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2367,     7,  2121,    -1,    -1,
    2265,    -1,    -1,    -1,    -1,    -1,    -1,  2184,    -1,    -1,
      -1,    -1,    -1,    24,  2403,  2121,  2405,    -1,    -1,    -1,
    2197,  2121,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,  2208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2216,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2227,    -1,    -1,  2230,    -1,  2427,    -1,  2234,    -1,    -1,
      -1,   770,    -1,   772,    -1,   774,    -1,    -1,    -1,    -1,
      -1,    -1,  2249,    -1,   783,   784,    -1,  2254,    -1,  2213,
      -1,    -1,    -1,    -1,    -1,    -1,   795,   796,   797,   798,
     799,    -1,  2216,    -1,    -1,    -1,  2230,   806,    -1,    -1,
      -1,  2473,   811,    -1,   813,   814,   815,   816,   817,   818,
     819,  2483,    -1,    -1,    -1,   824,  2216,    -1,  2295,    -1,
      -1,    -1,    -1,    -1,    -1,   834,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   844,   845,   846,    -1,    -1,
      -1,   850,    -1,    -1,  2321,   854,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   864,    13,  2334,    -1,    -1,
     171,  2770,  2534,   872,  2341,   874,    -1,  2353,    -1,    -1,
      -1,    -1,    -1,    -1,   883,    -1,  2565,   188,    -1,    36,
      -1,    -1,    39,    -1,    -1,  2574,    -1,  2364,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     909,  2590,   911,   912,  2576,    -1,    -1,    64,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    -1,  2403,    -1,  2405,
      -1,    -1,    -1,    -1,  2401,    -1,   935,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2625,    -1,    -1,    -1,
      -1,    -1,    99,    -1,  2421,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2647,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,   976,    -1,    -1,
      -1,  2457,    -1,    -1,    -1,   984,   133,  2454,    -1,    -1,
      -1,  2457,    -1,  2460,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   150,    -1,    -1,  2668,    -1,   155,    -1,
     157,   158,    -1,   160,    -1,    -1,  1015,   164,    -1,    -1,
      -1,   168,  2489,  2685,    -1,    -1,   173,    -1,    -1,  1028,
    2497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,
     187,    -1,  2704,  1042,   191,    -1,  2513,   194,   195,   196,
    1049,    -1,    -1,    -1,  1053,    -1,    -1,    -1,    -1,    -1,
     207,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,   216,
      -1,    -1,    -1,    -1,    -1,  2754,    -1,    -1,  2545,   226,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2567,    -1,  2569,    -1,    -1,    -1,    -1,    -1,  1107,    -1,
      -1,   258,  2582,  1112,  2590,    -1,    -1,    -1,    -1,    -1,
      -1,   268,   269,    -1,   271,    -1,    -1,    -1,    -1,   276,
      -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2610,    -1,    -1,    -1,    -1,   295,    -1,
     451,    -1,   453,    -1,   301,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1167,    -1,
      -1,  2647,    -1,  2643,    -1,    -1,    -1,  2644,    -1,    -1,
    1179,  1180,    -1,  1182,  1183,    -1,    -1,    -1,    -1,    -1,
      -1,  2582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2625,    -1,    -1,    -1,    -1,   507,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,   520,
    2687,    -1,    -1,    -1,  2700,    -1,    -1,    -1,    -1,  2696,
      -1,    -1,  2699,    -1,  2700,    -1,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,    12,
      -1,    14,  2643,    -1,    -1,    -1,    -1,    -1,    -1,  2726,
      -1,    -1,  2729,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2748,  2749,    -1,    -1,    -1,    -1,    -1,  2754,    -1,
      -1,    -1,    55,   594,    57,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,  2770,    -1,    -1,    -1,  1306,    -1,    -1,
      -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,
      -1,    84,    85,  1322,    -1,    -1,    89,    90,    -1,    -1,
      -1,    94,    95,     8,    97,    98,    -1,   100,    13,    -1,
      -1,  1340,    -1,   106,    -1,   108,    -1,    -1,  1347,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,  1357,    -1,
     123,   124,    -1,    -1,  1363,   128,   129,    -1,   131,   132,
     133,    -1,  1371,    -1,    -1,  1374,    -1,    -1,   141,    -1,
      -1,    -1,    -1,    -1,    -1,   148,    -1,    -1,    -1,    64,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1420,    -1,    -1,    99,  1424,    -1,    -1,    -1,  1428,
    1429,  1430,    -1,    -1,    -1,    -1,    -1,    -1,  1437,  1438,
      -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,  1448,
    1449,    -1,  1451,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   141,   768,    -1,    -1,
      -1,  1470,    -1,    -1,    -1,   150,    -1,   778,    -1,   780,
     155,    -1,   157,   158,    -1,   160,    -1,    -1,   163,   164,
      -1,    -1,    -1,   168,  1493,    -1,    -1,    -1,   173,    -1,
     175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,
     185,    -1,   187,    -1,    -1,    -1,   191,    -1,    -1,   194,
     195,   196,    -1,    -1,    -1,    -1,    -1,   828,    -1,    -1,
      -1,    -1,   207,    -1,  1533,   836,    -1,   212,    -1,    -1,
      -1,   216,    -1,   218,    -1,    -1,    -1,    -1,    -1,   224,
    1549,   226,   227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    -1,    -1,    13,    -1,   253,    -1,
      -1,    -1,    -1,   258,   259,    -1,    -1,    -1,    -1,    -1,
      -1,   266,    -1,   268,   269,    -1,   271,    -1,    -1,    36,
      -1,   276,    39,    -1,    -1,    -1,    -1,   282,  1607,    -1,
      -1,    -1,    -1,    -1,    -1,  1614,    -1,    -1,    -1,    -1,
     295,    -1,   923,   924,    61,    -1,   301,    64,    -1,    -1,
      -1,    68,    69,   308,    -1,    72,    -1,    -1,    -1,    -1,
    1639,    -1,   943,   944,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    -1,   953,    -1,   955,    -1,    -1,    -1,  1657,  1658,
      -1,    -1,    99,    -1,    -1,    -1,   967,    -1,    -1,  1668,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   150,    -1,    -1,    -1,    -1,   155,  1718,
     157,   158,    -1,   160,    -1,    -1,   163,   164,    -1,    -1,
    1031,   168,  1033,  1034,    -1,    -1,   173,    -1,   175,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,    -1,   194,   195,   196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,
     207,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,   216,
      -1,   218,    -1,    -1,    -1,    -1,    -1,   224,    -1,   226,
     227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,
      64,   258,   259,  1124,    68,    69,  1825,    -1,    -1,   266,
      -1,   268,   269,    -1,   271,    -1,  1137,    -1,  1837,   276,
      -1,    -1,  1841,    -1,    -1,   282,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   294,   295,    -1,
      -1,    -1,  1861,    -1,   301,    -1,    -1,    -1,    -1,    -1,
      -1,   308,    -1,    -1,   311,    -1,   120,   121,    -1,    -1,
      -1,  1880,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,
      -1,   155,    -1,   157,   158,    -1,   160,  1218,    -1,  1220,
     164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
      -1,    -1,    -1,    -1,  1933,    -1,    -1,    -1,    -1,    -1,
      -1,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,    -1,
     194,   195,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,   212,    -1,
    1969,    -1,   216,    -1,  1973,    -1,    -1,    -1,  1279,    -1,
      -1,    -1,   226,    -1,    -1,  1286,    -1,    -1,  1987,    -1,
    1291,   235,    -1,  1294,    -1,    -1,    -1,    -1,    -1,  1300,
      -1,  1302,    -1,    -1,    -1,    -1,    -1,    -1,  2007,    -1,
      -1,    -1,    -1,    -1,   258,  1316,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   269,    -1,   271,    -1,    -1,
      -1,    -1,   276,    -1,    10,    -1,    -1,    13,   282,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,   295,    -1,    29,    30,    31,    32,   301,    34,    -1,
    2059,  2060,  2061,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    10,    -1,    -1,    13,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    88,    -1,    40,    41,    -1,    93,    -1,    -1,
      96,  1422,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
    1431,   107,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1444,    -1,    -1,    -1,    -1,    -1,  2148,
      -1,  2150,  2151,    -1,    -1,    -1,    -1,    -1,  2157,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    93,  2167,    -1,
      96,    -1,    -1,   149,    -1,    -1,    -1,  1478,  2177,  1480,
    1481,     0,    -1,    -1,    -1,    -1,    -1,  1488,    -1,  2188,
    1491,    -1,    11,    12,    13,    14,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2204,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   149,    -1,    -1,  1527,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    57,    -1,
      -1,    -1,  1543,    -1,  2243,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    82,    -1,    84,    85,    -1,    -1,    -1,
      89,    90,  2271,  2272,    -1,    94,    95,    -1,    97,    98,
      -1,   100,  2281,    -1,    -1,    -1,    -1,   106,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,  2305,    -1,    -1,   128,
     129,    -1,   131,   132,  2313,  2314,   135,    -1,    -1,    -1,
      -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2344,    -1,    -1,    -1,  2348,
      10,    11,    -1,    13,    -1,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    -1,    -1,    -1,    -1,  1689,    -1,
    1691,    51,  2391,    -1,    -1,    55,    -1,    -1,    -1,    59,
      -1,    -1,    -1,  2402,    -1,    -1,    -1,  1708,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2415,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,  2431,    93,    -1,    -1,    96,    -1,    -1,    -1,
      -1,    -1,    -1,  1744,    -1,    -1,  1747,   107,    -1,    -1,
      -1,    -1,  2451,  2452,    -1,    -1,    -1,  1758,  1759,    -1,
      -1,    -1,    -1,  2462,    -1,  2464,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1780,
      -1,   141,    -1,    -1,    -1,    -1,  1787,    -1,    -1,   149,
      -1,    -1,    -1,    -1,    -1,    -1,  1797,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2509,  2510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2528,
      -1,    -1,  2531,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    10,    11,    -1,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,
      -1,    -1,  1873,    -1,    -1,    40,    41,    -1,    -1,    -1,
    1881,    -1,    -1,    -1,  1885,    -1,    51,    -1,    -1,    -1,
      55,    -1,  1893,    -1,    59,    -1,    -1,    -1,    -1,    -1,
    1901,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1917,    -1,    -1,    -1,
    2619,    -1,  2621,    88,    -1,  1926,  1927,    -1,    93,    -1,
      -1,    96,    -1,  2632,    -1,    -1,    -1,    -1,    -1,  2638,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2659,    -1,    -1,    -1,    -1,    -1,    10,    11,    -1,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,  2681,    -1,   149,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
       8,    -1,    -1,    -1,    -1,    13,    -1,    51,    -1,  2708,
      -1,    -1,    -1,    -1,  2713,    59,  2017,    -1,    -1,    -1,
      -1,    -1,  2721,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    -1,    -1,    -1,    -1,  2037,    -1,    -1,    -1,
      -1,    -1,    -1,  2742,    88,    -1,    -1,  2048,    -1,    93,
      -1,    -1,    96,    61,    -1,    -1,    64,    -1,    -1,    -1,
      68,    69,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
    2769,    -1,    -1,    -1,    -1,    -1,  2077,    -1,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2089,    -1,
      -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,  2117,    -1,    -1,    -1,
    2121,    -1,    -1,    -1,    -1,   133,    -1,    -1,  2129,  2130,
      -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   150,  2144,    -1,    -1,    -1,   155,    -1,   157,
     158,    -1,   160,    -1,    -1,   163,   164,    -1,    -1,    -1,
     168,    -1,    -1,    -1,    -1,   173,    -1,   175,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   183,    -1,   185,    -1,   187,
      -1,    -1,    -1,   191,    -1,    -1,   194,   195,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   207,
      -1,    -1,    -1,    -1,   212,    -1,    -1,  2208,   216,    -1,
     218,    -1,    -1,    -1,    -1,  2216,   224,    -1,   226,   227,
      -1,    -1,    -1,    -1,    -1,    -1,  2227,   235,    -1,  2230,
      -1,    -1,    -1,  2234,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,
     258,   259,    -1,    -1,    -1,    -1,    -1,    -1,   266,    -1,
     268,   269,    -1,   271,    -1,    -1,    -1,    -1,   276,    -1,
      -1,    -1,    -1,    -1,   282,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,   301,  2295,    -1,    -1,    -1,    10,    11,
     308,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    -1,  2334,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    10,    -1,
      -1,    13,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    88,    -1,    40,    41,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,
    2421,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,   149,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    10,
     112,    -1,    13,  2454,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,    -1,
      51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2545,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,    -1,    -1,    10,   149,    -1,
      13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    -1,    27,    28,    -1,    30,    31,  2610,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,
      63,    -1,    -1,  2644,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,
      83,    -1,    85,    86,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,
     103,   104,    -1,    -1,    -1,    -1,  2687,    -1,    -1,    -1,
      -1,   114,    -1,    -1,   117,  2696,    -1,   120,    -1,   122,
      -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2726,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     3,     4,     5,     6,     7,    -1,    -1,
      -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,    -1,
      30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,    -1,
      -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,
      -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     3,     4,     5,     6,
       7,    -1,    -1,    -1,    -1,    -1,    13,    14,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,
      27,    28,    -1,    30,    31,    -1,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    95,    -1,
      -1,    -1,    -1,    -1,   101,    -1,   103,   104,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,
     117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     114,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     3,     4,     5,     6,     7,    -1,    -1,    -1,
      -1,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    -1,    27,    28,    -1,    30,
      31,    -1,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    78,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    86,    -1,    -1,    -1,    -1,
      91,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
     101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   114,    -1,    -1,   117,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     3,     4,     5,     6,     7,
      -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,
      28,    -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
      -1,    59,    -1,    61,    62,    63,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,
      -1,    -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,
      -1,    -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,   117,
      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,   126,   127,
      -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     3,     4,
       5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      25,    -1,    27,    28,    -1,    30,    31,    -1,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,    -1,
      -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,
      95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,   104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
      -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
      -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    25,    -1,    27,    28,    -1,    30,    31,
      -1,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    78,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    86,    -1,    -1,    -1,    -1,    91,
      -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,   101,
      -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   114,    -1,    -1,   117,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    11,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     3,     4,     5,
       6,     7,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
      -1,    27,    28,    -1,    30,    31,    -1,    33,    -1,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    95,
      -1,    -1,    -1,    -1,    -1,   101,    -1,   103,   104,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,
      -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       3,     4,     5,     6,     7,    -1,    -1,    10,    -1,    -1,
      13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,
      63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,
     103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     3,     4,     5,     6,     7,    -1,    -1,
      10,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,    -1,
      30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,    -1,
      80,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,    -1,
      -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,
      -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     3,     4,     5,     6,
       7,    -1,    -1,    10,    -1,    -1,    13,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,
      27,    28,    -1,    30,    31,    -1,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    55,    -1,
      -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    95,    -1,
      -1,    -1,    -1,    -1,   101,    -1,   103,   104,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,
     117,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     3,     4,     5,     6,     7,    -1,    -1,    -1,
      -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    -1,    27,    28,    -1,    30,
      31,    -1,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    78,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    86,    -1,    -1,    -1,    -1,
      91,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
     101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   114,    -1,    -1,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
      -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     3,     4,     5,     6,     7,
      -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    26,    27,
      28,    -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,
      -1,    -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,
      -1,    -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,   117,
      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     3,     4,
       5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,    14,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      25,    -1,    27,    28,    -1,    30,    31,    -1,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,    -1,
      -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,
      95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,   104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
      -1,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
      -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    25,    -1,    27,    28,    -1,    30,    31,
      -1,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    78,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    86,    -1,    -1,    -1,    -1,    91,
      -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,   101,
      -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,
     122,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     3,     4,     5,
       6,     7,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
      -1,    27,    28,    -1,    30,    31,    -1,    33,    -1,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    95,
      -1,    -1,    -1,    -1,    -1,   101,    -1,   103,   104,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,
      -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,
      13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,
      33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,
      63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,
     103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   114,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,
      -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     3,     4,     5,     6,     7,    -1,    -1,
      -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,    -1,
      30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    63,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,    -1,
      -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,
      -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     3,     4,     5,     6,
       7,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,
      27,    28,    -1,    30,    31,    -1,    33,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    95,    -1,
      -1,    -1,    -1,    -1,   101,    -1,   103,   104,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   113,   114,    -1,    -1,
     117,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     114,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     3,     4,     5,     6,     7,    -1,    -1,    10,
      -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    -1,    27,    28,    -1,    30,
      31,    -1,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    78,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    86,    -1,    -1,    -1,    -1,
      91,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
     101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   114,    -1,    -1,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     3,     4,     5,     6,     7,
      -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,
      28,    -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,
      -1,    -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,
      -1,    -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,   117,
     118,    -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     3,     4,
       5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      25,    -1,    27,    28,    -1,    30,    31,    -1,    33,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,    -1,
      -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,
      95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,   104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
      -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
      -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    25,    -1,    27,    28,    -1,    30,    31,
      -1,    33,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    50,    -1,
      -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    78,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    86,    -1,    -1,    -1,    -1,    91,
      -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,   101,
      -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,
     122,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     3,    -1,    10,
      -1,     7,    13,    -1,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,
      -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       5,     6,     7,     8,    10,    -1,    -1,    13,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   149,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     5,    10,     7,     8,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   149,    -1,    -1,    -1,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     5,     6,     7,    10,    -1,    -1,    13,    -1,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,    -1,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     5,     6,     7,    10,    -1,    -1,    13,
      -1,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,    -1,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     7,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     7,    -1,    -1,    10,    -1,    -1,    13,
      -1,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,
      34,    35,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     7,    -1,    -1,    10,    -1,    -1,    13,    -1,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     7,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    87,    -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       7,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      27,    28,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     7,
      -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     7,    -1,
      10,    -1,    -1,    13,    13,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      30,    31,    32,    32,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    88,    -1,
      -1,    -1,    92,    93,    -1,    -1,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     7,    -1,    -1,
      -1,    11,    -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     7,    -1,    10,    -1,
      11,    13,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      91,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   122,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     7,    -1,    -1,    -1,    -1,
      -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     7,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     7,    -1,    -1,    -1,    -1,    -1,    -1,
      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    32,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     7,    10,    -1,    -1,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    55,    54,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   149,    -1,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       7,    -1,    10,    -1,    -1,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    53,    54,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    91,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   149,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     7,
      -1,    10,    11,    -1,    13,    -1,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    54,    55,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    91,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     7,    -1,
      10,    -1,    -1,    13,    -1,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    -1,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    -1,    54,    -1,    -1,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,    91,    93,    -1,    -1,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     7,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     7,    -1,    10,    -1,
      -1,    13,    13,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    32,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    88,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     7,    -1,    10,    -1,    -1,
      13,    -1,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    -1,    54,    -1,    -1,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    91,
      93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     7,    10,    -1,    -1,    13,    -1,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,    -1,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     7,    -1,    10,    -1,    -1,    13,    13,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   149,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     7,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       7,    -1,    10,    -1,    -1,    13,    13,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    32,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   149,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     7,
      -1,    10,    -1,    -1,    13,    -1,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    54,    -1,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    91,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     7,    10,
      -1,    -1,    13,    -1,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    50,    -1,    -1,    55,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     7,    -1,    10,
      -1,    -1,    13,    13,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    37,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     7,    -1,    10,    -1,
      11,    13,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    37,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     7,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     7,    10,    -1,    -1,    13,    -1,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,    -1,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     7,    -1,    10,    -1,    -1,    13,    -1,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    32,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     7,    -1,    10,    -1,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    91,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   149,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       7,    -1,    10,    -1,    -1,    13,    13,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   149,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     7,
      -1,    10,    -1,    -1,    13,    13,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     7,    10,
      -1,    -1,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     7,    10,    -1,
      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     7,    -1,    10,    -1,
      -1,    13,    13,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     7,    -1,    10,    -1,    -1,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    88,    -1,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     7,    -1,    10,    -1,    -1,    13,
      13,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     7,    -1,    10,    -1,    -1,    13,    13,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     7,    10,    -1,    -1,    13,    -1,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   149,    -1,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       7,    -1,    10,    -1,    -1,    13,    13,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   149,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     7,
      -1,    10,    -1,    -1,    13,    13,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     7,    10,
      -1,    -1,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    55,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     7,    -1,    10,
      -1,    -1,    13,    13,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     7,    -1,    -1,    -1,
      -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     7,    -1,    10,    -1,    -1,
      13,    13,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     7,    10,    -1,    -1,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,    -1,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     7,    10,    -1,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   149,    -1,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     7,    10,    -1,    -1,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   149,    -1,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     7,    10,    -1,    -1,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   149,    -1,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      10,    -1,    -1,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
      10,    -1,    -1,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    88,    -1,
      40,    41,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    -1,    -1,    -1,   107,    -1,    59,
      10,    -1,    -1,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    88,    -1,
      40,    41,    -1,    93,    -1,    -1,    96,    -1,    -1,   149,
      -1,    51,    -1,    -1,    -1,    -1,    -1,   107,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,   149,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149
  };

  const short
  BisonParserImpl::yystos_[] =
  {
       0,   317,   318,   319,   320,   321,   322,   323,   325,    13,
      36,    39,    64,    68,    69,    99,   120,   121,   133,   150,
     155,   157,   158,   160,   164,   168,   173,   185,   187,   191,
     194,   195,   196,   207,   212,   216,   226,   235,   258,   268,
     269,   271,   276,   282,   295,   301,   327,   331,   334,   335,
     343,   345,   347,   354,   355,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   374,   401,   402,   406,   407,   408,
     409,   410,   411,   412,   415,   420,   421,   479,   484,   487,
     488,   489,   490,   491,   497,   498,   499,   515,   523,   525,
     527,   528,   531,   533,   539,   540,   541,   638,   640,   776,
     783,   784,   790,   791,   795,   800,   802,   803,   819,   820,
     821,   822,   826,   830,   837,     8,    61,    86,   141,   160,
     163,   175,   183,   218,   224,   227,   253,   259,   266,   308,
     330,   331,   332,   333,   768,   831,   832,   838,   843,   844,
     847,   848,   849,   853,   854,   855,   856,   857,   859,   860,
     861,   862,   863,   864,   865,   866,   329,   331,   328,   330,
     541,   777,   867,     3,     4,     5,     6,     7,    13,    25,
      27,    28,    30,    31,    33,    38,    45,    54,    61,    62,
      63,    76,    77,    78,    83,    86,    91,    95,   101,   103,
     104,   114,   117,   122,   126,   134,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   665,   668,   669,   679,   680,   681,   682,   683,
     684,   685,   686,   687,   689,   691,   692,   701,   703,   704,
     708,   709,   710,   711,   712,   713,   714,   715,   718,   719,
     720,   722,   723,   724,   725,   730,   731,   745,   748,   749,
     750,   752,   753,   754,   755,   756,   757,   758,   759,   760,
     761,   762,   763,   764,   765,   766,   767,   769,   771,    54,
      91,   122,   161,   162,   180,   181,   182,   220,   236,   262,
     272,   292,   293,   670,   688,   689,   692,   693,   697,   767,
       0,   525,    84,   111,   113,   536,   537,   538,   767,   760,
     107,   179,   772,   287,    92,   811,   777,    13,   294,   687,
     767,   769,   115,   637,   767,   159,     7,    50,   154,   176,
     179,   197,   205,   214,   230,   234,   248,   250,   270,   273,
     287,   305,   342,   416,   474,   239,   782,   669,   294,   356,
     357,   670,   178,   357,    80,   785,    50,   248,   270,   274,
     278,   342,   416,   474,   210,   331,   178,   234,    50,   120,
     492,   494,   495,   496,   767,   113,   235,   658,   178,   670,
     767,   492,   357,   159,   230,   516,   767,   159,   356,   287,
     671,   672,   767,   805,   806,    12,   326,   219,   254,   351,
     352,   353,   108,   648,   649,    74,    90,   128,   522,   522,
      11,    37,   334,    11,   523,   120,    32,   485,   670,   672,
     673,   674,   677,   678,   767,    13,    57,    87,    92,   107,
     303,   509,   510,   525,   767,   787,   789,   805,   130,   816,
     817,    11,    14,   669,   846,   669,   767,   330,   831,   839,
     732,   767,   732,   767,   852,   732,   732,   839,   129,   839,
     669,    12,    44,   330,   333,     1,    72,    12,    12,    13,
      64,    68,    86,    99,   120,   121,   133,   141,   150,   155,
     157,   158,   160,   163,   164,   168,   173,   175,   183,   185,
     191,   194,   195,   196,   207,   212,   216,   218,   224,   226,
     227,   235,   253,   258,   259,   266,   268,   269,   271,   276,
     282,   295,   301,   308,   768,   776,   868,   872,   524,   526,
     529,   530,   532,   533,   638,   640,   669,    50,    51,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   767,   770,   670,   770,    13,    18,    25,
     130,   669,    13,   777,    13,   669,   688,   669,    18,    13,
      18,    13,     3,    13,    13,   669,    10,    13,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    29,
      30,    31,    32,    34,    40,    41,    51,    59,    88,    93,
      96,   107,   149,   654,   655,   656,   657,   660,   661,   662,
     663,   664,    26,   669,    11,    26,   758,    25,    11,    20,
      13,    14,   669,   702,    11,    14,    13,    37,   706,   707,
     767,    11,    37,   707,   130,   130,    71,    72,    14,    58,
      11,    14,    13,    10,    13,    85,   120,   632,   669,   726,
     727,   728,   729,   767,    11,    87,   116,   636,   777,    14,
     669,   751,    11,    14,    11,    14,     3,     3,    34,    13,
     695,   696,    14,    15,    34,    36,   261,   670,   230,   247,
     248,   251,   270,   273,   278,   290,   291,   297,   416,   773,
     774,   670,   673,   767,   133,   534,    14,   852,   352,    15,
      11,    15,    15,   637,    55,   270,   205,   474,   305,   265,
     151,   205,    86,   824,   824,   824,    13,   780,   781,   348,
     349,   350,   673,    55,   346,    13,    92,   806,   270,   265,
     151,   214,   287,   824,   824,   824,   669,   133,   404,   639,
     670,   249,   493,   106,    11,    13,   576,   577,   578,   392,
     670,   758,    92,   241,   413,   782,   670,   106,   306,    80,
     486,   732,   673,    31,    34,    31,    25,    34,   777,   225,
     238,   309,    11,   777,    11,    97,   631,   777,   777,   538,
     637,   649,     5,     8,   676,   767,   486,    31,    32,    44,
     675,    34,   674,   767,    62,   557,   558,   559,   686,   760,
     769,   806,    87,   261,   301,    13,   797,   798,   799,    11,
      14,   787,   124,   788,   777,   103,   229,   816,    13,   120,
     133,   174,   188,   234,   287,   586,   587,   588,   591,   592,
     669,   727,   130,   845,   124,    88,   311,   850,    11,    67,
     697,    72,   232,   300,   858,   190,   160,   848,   854,   856,
     859,   861,    86,   868,   179,   772,   871,   287,    13,   294,
     687,   767,   769,   159,    50,   179,   230,   234,   248,   270,
     273,   287,   305,   416,   178,    50,   248,   270,   274,   278,
     342,   416,   474,   210,   178,   234,   178,   159,   159,    44,
     649,    14,   522,   522,   524,   669,   120,    11,    14,   525,
     697,   669,   130,   120,   669,    13,   669,   767,    13,   710,
     697,    20,   690,   697,   767,   666,   667,   767,   669,   120,
     669,    70,   669,   669,   669,   669,   669,    13,   767,   669,
      70,   103,   149,   669,    59,    88,    96,   669,   669,   669,
     669,    50,    53,   145,   659,   669,   669,   669,   777,   298,
     756,   757,   669,   690,    55,   702,   670,    44,   705,   710,
     706,   707,   669,   669,   669,   292,   669,   721,    14,   231,
     233,   649,    43,    42,   726,   105,   105,   632,   133,   134,
     746,    55,   552,   751,   669,   767,   231,   694,   757,   758,
     759,   760,   766,    11,    14,    63,   644,   645,   669,   537,
     538,   782,   115,   478,   265,   151,   825,    86,   483,   287,
     483,   154,   176,   197,   234,   250,   287,   367,   478,   314,
     877,   781,    55,   551,   554,   156,    50,    70,   542,    14,
     669,   852,   669,   669,    13,   151,   824,   245,    76,   670,
     121,   153,   155,   191,   258,   261,   336,   337,   670,   881,
     882,   673,    14,   537,   778,    11,    14,    11,    13,   510,
     511,   758,    14,   592,   673,   777,   825,   824,   245,   824,
     824,   670,   670,   673,    92,   833,   174,   588,   782,   639,
     670,   767,   495,   670,    11,    14,    55,    92,   553,   673,
     125,   670,   767,   674,    96,   517,   131,   786,     5,     6,
     767,   767,     5,     6,   767,   669,    13,   767,   807,   551,
     767,   351,    60,   647,   669,   559,    50,    70,   521,   521,
     631,     6,   676,   767,   486,    13,   777,    67,   669,   796,
      11,    14,    11,   767,   788,   266,   229,    51,   813,   586,
     587,   588,   727,   670,    13,   670,    86,   593,   594,   595,
     670,   669,    71,   130,   840,   839,    13,   130,    72,   767,
     669,    67,   851,   227,    15,   669,    72,   839,   732,   732,
     732,   732,   732,   230,   248,   270,   273,   278,   416,   773,
     774,   197,   234,   250,   287,   367,   478,   869,   767,    15,
      15,    15,   270,   305,   270,   151,   214,   287,   141,   160,
     227,   259,   308,   631,   521,   521,   649,   669,    14,    20,
     124,   669,    55,   525,    80,   125,    20,   697,    11,    55,
      11,    55,    26,   670,    80,    70,   777,    52,    13,   135,
     650,   651,   652,   755,    13,   767,    14,   669,   124,   124,
      72,   310,    55,   669,   669,   631,   669,   669,   167,   633,
     208,   110,   747,   767,    14,   694,   643,   686,   758,   769,
      15,   305,   483,   245,   103,   670,   483,   670,   483,   287,
     483,   483,   205,   483,   205,   305,   274,   775,   129,   767,
     782,    55,   535,    15,    15,   525,   244,   106,   824,   153,
     155,   191,   258,   261,   337,    55,    67,   106,   239,     7,
     166,   171,   177,   203,   246,   270,   417,   455,   459,   171,
     177,   417,   171,   177,   246,   270,   417,   125,   171,   270,
      11,   337,   337,    15,   778,   350,    80,   551,   244,   106,
     824,   670,   673,    13,   371,   372,   823,   823,   852,   129,
     836,    55,   782,   125,   670,   670,   767,   767,   782,    13,
     422,   423,   424,   670,    80,   670,   758,   669,   767,   767,
      26,   670,    34,   133,   801,   767,   647,   645,   237,   531,
     531,    34,   675,   767,   557,   796,   798,    10,   133,   543,
     544,   550,   669,    60,   812,   669,   124,    14,    14,    14,
      14,   589,   590,   767,    13,    14,   592,    11,    14,    13,
     124,   839,   669,    72,   193,   841,   842,   525,   312,   669,
     669,   259,    72,   478,   825,   287,   877,   205,   176,   205,
     305,   483,   151,   825,   245,   531,   531,   631,   669,   124,
     697,    14,   669,   767,   758,   666,   669,   767,   669,   721,
     697,    14,    80,   650,   652,   669,   669,    13,    11,    14,
     670,   705,   669,   669,   669,   805,   807,    14,    59,   133,
     634,    13,    13,   744,   767,   669,   483,   106,   483,    76,
      67,   646,   673,   782,   670,   205,   483,   670,   670,   483,
     673,   483,   483,   214,    13,   585,   596,   597,   652,   670,
     674,   818,   122,   670,    80,   544,   669,    14,   106,   494,
     767,   220,   418,   758,   765,   644,   185,   781,    13,   483,
     483,   221,   221,   186,   483,   824,   824,   824,   824,   824,
     221,   186,   824,   670,   824,   186,   336,   113,   669,   779,
     673,   793,   794,   801,   106,   494,   767,   106,   828,    14,
      53,   287,   370,   476,   477,   697,   699,   700,   767,    11,
      14,   165,   264,   829,   669,   834,   835,   525,   512,   643,
     125,    14,   166,   203,   246,   425,   426,   455,   459,   461,
     767,   645,    11,    14,   512,    80,    14,    13,   767,   237,
     121,    56,    69,   641,   559,   767,   676,    55,    75,   261,
     545,   546,   548,   549,   152,    11,    35,    55,   767,   279,
     288,   813,   185,   216,   301,   815,    11,    14,   777,   592,
     777,   839,   124,    61,   669,   193,   840,    14,   124,   308,
     305,   245,   775,   673,   244,   244,   669,   204,   717,    14,
     717,    11,    14,   120,   669,   669,    14,    14,   669,   263,
     649,   525,   732,   673,   494,   732,   644,   782,   168,    55,
     419,    15,   673,   289,   344,    13,   375,   376,   670,   422,
     369,   670,   673,   483,   525,   777,    25,    34,    25,    34,
     106,    80,   611,   670,   106,   106,   102,   121,   165,   264,
     470,   669,   426,   767,   767,   510,    13,   457,   458,   245,
     767,   767,   767,   767,   767,   767,   824,   245,   767,   767,
     245,   141,   599,   128,   786,   670,   106,   106,   827,   670,
      54,    73,   113,   122,   698,   767,    18,    11,    20,   552,
     700,   370,    55,    11,    11,   512,    54,    55,    91,   122,
     206,   427,   428,   429,   431,   432,   433,   434,   435,   437,
     670,   767,   111,   735,   736,   425,   512,   670,   551,    13,
     804,   805,   808,   809,   810,   105,   642,   697,    13,    13,
      11,    14,   261,    11,    14,    55,   544,   550,   549,   767,
     813,   124,   511,   121,   589,    55,   243,   252,   299,   572,
     583,   584,   630,   767,   584,   839,   124,   669,   190,   839,
     214,   422,   669,    14,    14,   669,    14,    52,   635,   781,
     631,    14,   111,   733,   734,   511,   106,   106,   793,   418,
     669,   422,    13,   782,    14,    88,   215,   240,   378,   379,
      11,    14,   639,   823,   246,   873,   876,   267,   380,   381,
     372,   511,   670,    14,   584,    13,    13,   669,    13,    27,
      28,    38,   585,   595,   597,   598,   610,   670,    82,    85,
     131,   148,   612,   613,   614,   615,   619,   620,   622,   628,
     629,   199,   207,   258,   268,   340,   396,   767,   670,   152,
     104,    14,    79,   112,   451,   452,   455,   459,   460,   255,
     462,    14,   456,   767,    11,    14,   103,   192,   472,   473,
     483,   782,   121,   191,   434,   121,   473,   336,   824,   125,
     824,   285,   286,   615,   616,    50,   787,   767,   670,   475,
     697,   767,   475,   103,   368,   552,   767,   834,   643,    18,
      18,    55,   103,   177,   209,   246,   443,   444,   445,   446,
     447,   448,   449,   471,    11,    20,   696,   645,    13,   455,
      60,    11,   170,   737,   738,    14,   784,    15,    11,   611,
     202,   223,   717,   767,   547,   669,   767,    13,   547,   767,
     124,   815,   270,   303,   814,   810,   767,    13,   669,   139,
     213,   582,   551,   551,   123,   566,   567,   243,   252,   299,
     572,   583,   630,   567,   839,   124,   839,    96,   518,    58,
     716,   669,    14,   777,    11,   649,   280,   387,   767,   670,
     782,   518,   544,    55,   480,   481,   767,   378,   782,   380,
     221,    11,   875,   518,   700,   387,   387,   106,   584,   801,
      13,   598,   608,   609,    11,   100,   555,   777,   669,   669,
     669,   620,   621,    11,   622,   623,   627,   628,   630,   132,
     625,   626,   129,   125,   125,    80,   670,   340,   341,   472,
     767,   767,   201,   453,   454,   670,   472,   641,   456,   192,
     782,    13,    67,   178,   239,    67,   103,   446,   880,   239,
     767,    13,   292,    55,   793,   788,   670,   697,   154,   851,
     434,   442,    20,   430,   434,   767,   104,   767,   221,   103,
     447,   473,   782,   462,   430,    67,   206,   437,   439,   441,
     669,   669,   669,    60,    11,   782,    14,   796,   809,   786,
      14,    55,   547,   544,   815,   798,   572,   583,   630,   568,
     569,   669,   105,   105,    13,   767,   551,   551,   839,    72,
     673,   168,   519,   292,    60,   669,   114,   119,   742,   743,
     275,   736,   670,   125,   396,   397,   398,   646,    14,   525,
      11,    14,   377,   700,   222,   373,   848,   387,   458,   313,
     519,   103,   189,   211,   281,   304,   382,   782,   670,   567,
     599,   525,   555,    14,   598,    65,    81,    89,    95,   117,
     606,    60,   623,   118,   617,   618,   669,   627,   626,   624,
     767,    11,    13,    13,   767,    13,    50,   153,   257,   264,
     338,   339,   394,    11,   782,   129,   510,   782,   642,   669,
     669,   296,   781,   104,    55,   439,   878,   879,   781,   669,
      55,   144,   368,   645,    20,   645,   442,   669,   439,   440,
     437,   438,    14,   669,   669,    80,   414,   787,   767,   551,
     551,    11,   141,   551,    13,   575,   670,    13,   141,   793,
     169,   520,   310,   669,    59,    66,   127,   669,   741,    14,
     184,   217,   388,   738,   394,   395,   512,   199,   399,   400,
     133,   403,   404,   405,   767,   782,    88,   520,   189,   222,
     256,   384,   386,   404,   480,   551,   567,    14,   606,   567,
     109,   556,   556,   556,    84,    98,   607,   618,   627,    13,
      11,    14,   626,    55,   624,   669,   512,   512,   483,   824,
     125,    11,   340,   669,   228,   463,    14,   442,    13,   782,
      14,   144,   669,   446,   450,   450,   283,   436,   198,   405,
     788,   568,   669,   574,   670,   141,   559,   561,   563,   766,
     673,   792,   646,   669,   741,   270,    79,   112,   740,   740,
     782,   129,   111,   404,   782,    55,   391,   222,   383,   315,
     646,   767,   639,   383,    55,   239,   389,   503,   504,   652,
     653,   607,    94,   626,   669,   669,   744,    14,    14,    14,
      13,   513,   514,   514,   514,   338,    81,   149,   277,   464,
     106,   465,   468,   469,   669,   669,   782,   304,   781,    88,
      11,    14,   670,   119,   242,   562,    14,   599,   736,    52,
     480,    13,   172,   758,   767,    55,   480,   482,   673,   736,
     384,   385,    13,   393,   758,   781,   782,   653,    13,   500,
     501,   502,   551,    94,   777,    14,   643,    11,    14,    70,
     185,   301,   106,   467,   469,   106,   466,   468,    14,    13,
     670,    88,   736,   133,   260,   560,   565,   616,   738,   741,
     669,   422,   758,   467,   738,   120,   669,   389,   390,    50,
     647,    11,    14,   284,   507,   508,   801,   777,   598,   643,
     470,   470,   283,   570,   571,   669,    13,   580,   581,   307,
      13,   782,    14,   270,   739,    14,   172,   647,    13,   505,
     506,   782,   598,   106,   129,   600,   601,   602,   603,   604,
     605,    11,    14,   551,   575,   579,    11,    14,    14,    55,
     260,   560,   564,   767,   559,    12,    55,   870,   186,   782,
      14,   669,    11,    14,    11,   874,   603,   669,    13,    11,
      14,   605,   570,    14,   554,   573,   579,   767,   564,    14,
     245,   481,   669,   313,   767,   767,   758,   760,   564,    13,
      88,   669,   673,    14
  };

  const short
  BisonParserImpl::yyr1_[] =
  {
       0,   324,   325,   325,   325,   325,   325,   325,   325,   326,
     326,   327,   328,   328,   329,   329,   330,   330,   331,   331,
     332,   332,   332,   332,   332,   332,   332,   332,   332,   332,
     332,   332,   333,   334,   334,   334,   334,   334,   334,   334,
     334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
     334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
     334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
     334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
     335,   336,   336,   336,   336,   336,   336,   336,   336,   336,
     336,   336,   336,   336,   336,   336,   336,   336,   336,   336,
     336,   336,   336,   336,   336,   336,   336,   336,   337,   337,
     338,   338,   338,   339,   339,   340,   340,   340,   340,   340,
     341,   341,   342,   342,   342,   342,   342,   342,   342,   342,
     342,   342,   342,   343,   343,   343,   343,   343,   343,   343,
     344,   344,   345,   346,   346,   347,   348,   348,   349,   349,
     350,   351,   351,   351,   351,   352,   352,   353,   353,   354,
     355,   355,   356,   357,   357,   358,   358,   358,   358,   358,
     358,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     366,   366,   367,   367,   368,   368,   369,   370,   370,   371,
     371,   372,   372,   373,   373,   374,   375,   375,   376,   376,
     377,   377,   378,   378,   379,   379,   379,   379,   380,   380,
     381,   382,   382,   382,   382,   382,   382,   383,   383,   384,
     384,   385,   385,   386,   386,   386,   387,   387,   388,   388,
     389,   389,   390,   390,   391,   391,   392,   392,   393,   393,
     394,   395,   395,   396,   397,   397,   398,   398,   399,   399,
     400,   401,   402,   403,   404,   405,   405,   405,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   413,   414,   415,
     416,   417,   418,   418,   419,   419,   420,   421,   422,   422,
     423,   423,   424,   424,   424,   425,   425,   426,   427,   427,
     428,   428,   429,   430,   430,   431,   431,   432,   432,   433,
     433,   433,   434,   435,   435,   436,   436,   436,   437,   438,
     438,   439,   440,   440,   441,   441,   441,   442,   443,   444,
     445,   446,   447,   447,   447,   447,   448,   448,   448,   449,
     449,   450,   450,   451,   451,   452,   452,   453,   454,   454,
     455,   455,   456,   457,   457,   458,   458,   459,   460,   460,
     461,   461,   461,   462,   463,   463,   464,   464,   464,   465,
     465,   465,   466,   466,   467,   467,   468,   469,   470,   470,
     470,   470,   471,   471,   472,   472,   473,   473,   474,   474,
     475,   475,   476,   476,   477,   478,   478,   479,   479,   480,
     481,   481,   482,   482,   482,   483,   483,   484,   485,   485,
     486,   486,   487,   488,   489,   490,   490,   491,   491,   492,
     492,   493,   493,   494,   494,   495,   496,   496,   497,   498,
     499,   500,   500,   501,   502,   502,   503,   503,   504,   504,
     505,   505,   506,   507,   508,   508,   509,   509,   510,   511,
     511,   512,   512,   513,   513,   514,   514,   515,   516,   516,
     517,   517,   518,   518,   519,   519,   520,   520,   521,   521,
     522,   522,   522,   523,   523,   524,   524,   525,   525,   525,
     526,   526,   526,   527,   527,   528,   529,   529,   530,   531,
     531,   532,   532,   533,   533,   534,   534,   535,   535,   535,
     536,   536,   536,   537,   537,   538,   538,   539,   539,   539,
     540,   541,   541,   542,   542,   542,   543,   543,   544,   544,
     545,   545,   546,   547,   548,   548,   548,   549,   549,   550,
     550,   550,   550,   550,   550,   550,   551,   551,   552,   552,
     553,   553,   553,   554,   554,   555,   555,   556,   556,   557,
     557,   557,   558,   559,   559,   560,   561,   561,   562,   562,
     563,   564,   564,   565,   565,   565,   565,   565,   566,   567,
     567,   568,   569,   569,   570,   571,   571,   572,   573,   573,
     573,   574,   574,   575,   575,   576,   576,   577,   578,   578,
     579,   580,   580,   581,   582,   582,   582,   583,   584,   584,
     584,   584,   584,   584,   584,   584,   584,   584,   584,   584,
     585,   586,   586,   587,   588,   589,   590,   590,   591,   592,
     592,   592,   592,   592,   592,   592,   592,   592,   592,   592,
     592,   593,   593,   594,   594,   595,   595,   596,   596,   596,
     596,   596,   596,   597,   598,   598,   598,   598,   599,   599,
     599,   600,   601,   601,   602,   603,   603,   604,   604,   605,
     605,   606,   606,   606,   606,   606,   606,   607,   607,   607,
     608,   608,   609,   610,   610,   610,   610,   610,   610,   611,
     611,   612,   612,   613,   613,   614,   614,   615,   616,   616,
     617,   617,   618,   618,   619,   619,   620,   621,   621,   622,
     623,   623,   624,   625,   625,   626,   626,   627,   627,   627,
     628,   629,   629,   630,   631,   631,   631,   632,   632,   632,
     633,   633,   634,   634,   635,   635,   636,   636,   636,   637,
     638,   638,   638,   639,   639,   640,   641,   641,   641,   642,
     642,   642,   643,   643,   643,   644,   645,   645,   646,   646,
     647,   648,   648,   649,   649,   650,   650,   650,   651,   651,
     652,   652,   653,   654,   654,   654,   654,   654,   654,   654,
     655,   655,   656,   656,   657,   657,   658,   658,   659,   659,
     659,   660,   660,   661,   661,   662,   662,   663,   663,   664,
     664,   665,   665,   665,   666,   667,   667,   668,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   670,   670,   671,   671,   671,   671,   671,   671,   672,
     672,   673,   673,   674,   674,   675,   675,   675,   676,   676,
     676,   677,   677,   677,   678,   678,   678,   678,   679,   679,
     679,   680,   680,   681,   681,   682,   683,   683,   683,   683,
     684,   685,   685,   686,   686,   687,   687,   688,   688,   689,
     690,   690,   691,   691,   692,   692,   693,   693,   693,   694,
     694,   694,   694,   694,   694,   695,   695,   696,   696,   696,
     697,   698,   698,   698,   698,   698,   699,   700,   700,   700,
     701,   702,   702,   702,   703,   703,   704,   704,   705,   705,
     706,   707,   708,   709,   709,   709,   709,   709,   710,   710,
     711,   712,   712,   713,   713,   714,   714,   715,   715,   716,
     716,   717,   717,   718,   718,   718,   718,   719,   720,   720,
     721,   721,   722,   722,   723,   724,   724,   724,   724,   724,
     724,   725,   725,   725,   726,   726,   726,   726,   727,   728,
     729,   729,   730,   730,   730,   731,   731,   732,   732,   733,
     733,   734,   734,   735,   735,   736,   736,   737,   737,   738,
     738,   739,   739,   740,   740,   741,   741,   741,   742,   742,
     743,   743,   743,   744,   744,   745,   746,   746,   746,   747,
     747,   748,   749,   749,   750,   750,   751,   752,   752,   753,
     753,   753,   754,   754,   754,   755,   756,   757,   757,   758,
     759,   760,   761,   761,   762,   763,   763,   764,   765,   766,
     767,   767,   768,   769,   769,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   772,   772,   773,
     773,   773,   773,   773,   774,   774,   775,   775,   776,   776,
     777,   777,   778,   779,   779,   780,   780,   781,   781,   782,
     782,   783,   784,   784,   784,   785,   785,   786,   786,   787,
     787,   788,   788,   788,   788,   789,   789,   789,   789,   790,
     790,   790,   790,   790,   790,   791,   791,   792,   793,   794,
     794,   795,   796,   796,   797,   797,   798,   799,   799,   800,
     801,   801,   802,   803,   804,   805,   805,   805,   805,   806,
     806,   807,   807,   807,   808,   809,   809,   810,   810,   811,
     811,   812,   812,   813,   813,   814,   814,   815,   815,   815,
     816,   816,   816,   817,   817,   818,   818,   819,   820,   821,
     821,   822,   822,   823,   823,   824,   824,   825,   825,   826,
     827,   828,   828,   829,   829,   829,   830,   830,   830,   830,
     830,   830,   830,   831,   831,   832,   832,   833,   833,   834,
     834,   835,   835,   836,   836,   837,   838,   838,   838,   839,
     839,   840,   840,   841,   841,   842,   842,   843,   844,   844,
     845,   845,   846,   846,   847,   848,   849,   849,   850,   850,
     851,   851,   852,   852,   853,   853,   854,   855,   855,   856,
     857,   857,   858,   859,   860,   860,   861,   862,   862,   863,
     863,   864,   864,   865,   866,   866,   867,   868,   868,   868,
     869,   870,   870,   870,   871,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   873,   874,   874,   875,   875,   876,   876,   877,   877,
     878,   878,   879,   879,   880,   880,   881,   882
  };

  const signed char
  BisonParserImpl::yyr2_[] =
  {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       0,     2,     2,     1,     2,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     2,     5,     4,     4,     5,     7,
       6,     4,     6,     8,     7,     7,     6,     7,     3,     3,
       8,     8,     5,     5,     5,     4,     1,     1,     1,     3,
       1,     3,     3,     1,     3,     1,     5,     5,     3,     3,
       1,     3,     2,     1,     1,     2,     1,     1,     2,     1,
       1,     1,     1,     5,     5,     5,     4,    10,     9,     8,
       4,     0,     3,     2,     0,     3,     1,     0,     1,     3,
       2,     2,     2,     3,     4,     1,     3,     1,     0,     2,
       2,     2,     1,     1,     0,     3,     4,     4,     4,     6,
       3,     5,     2,     2,     3,     2,     2,     8,     4,    13,
      14,    11,     1,     0,     2,     0,     2,     5,     3,     2,
       3,     2,     2,     1,     3,    10,     2,     3,     2,     2,
       1,     1,     3,     3,     1,     1,     1,     0,     2,     0,
       1,     1,     2,     1,     1,     1,     0,     2,     0,     2,
       1,     1,     0,     3,     2,     0,     3,     0,     1,     1,
       2,     2,     1,     0,     2,     0,     1,     1,     3,     2,
       3,     1,     0,     5,     1,     2,     1,     0,     1,     0,
       5,    11,    11,     4,     2,     2,     1,     1,     0,    12,
       6,    16,     7,     9,    13,    17,     1,     1,     3,    11,
       1,     1,     1,     1,     2,     0,     7,     9,     1,     0,
       2,     2,     2,     3,     2,     1,     1,     4,     3,     1,
       1,     1,     4,     3,     2,     3,     3,     3,     2,     1,
       1,     1,     2,     2,     1,     2,     1,     0,     5,     1,
       0,     2,     1,     0,     2,     2,     0,     4,     2,     2,
       1,     2,     1,     1,     1,     1,     1,     2,     2,     1,
       0,     1,     0,     2,     2,     1,     0,     3,     1,     0,
       6,     6,     3,     2,     3,     2,     2,     5,     1,     1,
       1,     1,     3,     5,     2,     0,     1,     1,     2,     2,
       2,     0,     1,     0,     1,     0,     3,     3,     2,     1,
       1,     2,     2,     0,     1,     0,     1,     2,     2,     1,
       2,     1,     3,     3,     2,     1,     0,    11,    13,     2,
       1,     0,     1,     2,     0,     3,     0,     2,     3,     2,
       2,     0,     2,     6,     5,     7,     6,     7,     6,     2,
       1,     1,     0,     1,     3,     2,     1,     1,     5,     5,
       3,     2,     3,     4,     2,     1,     1,     2,     1,     0,
       2,     3,     2,     2,     1,     0,     2,     3,     2,     1,
       0,     1,     3,     2,     3,     2,     2,     4,     2,     1,
       2,     0,     2,     0,     2,     0,     2,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     2,     3,
       4,     2,     3,     5,     5,     1,     4,     4,     1,     1,
       3,     1,     1,     8,     6,     3,     0,     2,     2,     0,
       1,     1,     1,     1,     1,     3,     5,     4,     2,     3,
       2,     2,     1,     1,     1,     0,     1,     3,     1,     2,
       3,     3,     2,     3,     4,     3,     3,     1,     2,     1,
       3,     2,     2,     3,     1,     2,     2,     0,     2,     0,
       2,     2,     0,     1,     0,     1,     0,     1,     0,     1,
       1,     1,     7,     1,     1,     4,     1,     1,     1,     1,
       3,     1,     0,     1,     3,     4,     5,     0,     6,     1,
       0,     2,     1,     3,     2,     1,     3,    10,     2,     2,
       0,     1,     3,     3,     1,     2,     3,     2,     1,     0,
       2,     2,     3,     2,     2,     2,     0,     9,     2,     1,
       4,     4,     3,     3,     3,     2,     2,     2,     1,     0,
       5,     2,     2,     2,     2,     1,     1,     3,     4,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     1,
       1,     2,     2,     2,     3,     5,     5,     1,     1,     2,
       3,     2,     3,     6,     1,     1,     4,     1,     6,     5,
       0,     2,     3,     3,     2,     1,     0,     1,     2,     1,
       1,     1,     2,     1,     2,     2,     0,     1,     1,     0,
       1,     1,     8,     1,     3,     8,     1,     1,     1,     2,
       0,     5,     1,     4,     1,     3,     2,     2,     1,     0,
       3,     3,     1,     2,     4,     3,     1,     1,     0,     2,
       1,     0,     3,     2,     3,     1,     0,     1,     1,     0,
       2,     1,     0,     2,     4,     2,     0,     3,     3,     0,
       5,     0,     3,     0,     1,     0,     2,     2,     0,     5,
       2,     3,     3,     1,     0,     2,     1,     1,     0,     2,
       2,     0,     1,     1,     1,     2,     1,     0,     2,     0,
       4,     4,     3,     1,     0,     1,     3,     2,     4,     3,
       4,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     2,     3,     4,     1,     2,     1,
       2,     1,     1,     1,     3,     1,     3,     6,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     5,     3,     3,
       3,     2,     5,     5,     3,     3,     4,     4,     5,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     1,     3,     3,     3,     3,     3,     4,     4,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     3,     5,     1,     4,     5,     3,     2,     1,
       2,     2,     3,     2,     2,     5,     1,     1,     1,     1,
       2,     3,     5,     1,     1,     2,     2,     1,     1,     4,
       2,     1,     3,     3,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     2,     3,     0,
       3,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       3,     1,     3,     5,     2,     3,     2,     2,     2,     1,
       4,     2,     1,     2,     2,     3,     2,     3,     2,     2,
       3,     5,     5,     6,     5,     1,     1,     2,     4,     4,
       0,     3,     0,     7,     3,     7,     3,     5,     2,     6,
       3,     3,     5,     3,     2,     1,     1,     1,     1,     1,
       1,     3,     2,     2,     1,     1,     1,     1,     3,     3,
       1,     2,     2,     2,     3,     5,     8,     1,     0,     4,
       3,     1,     0,     3,     3,     1,     0,     3,     3,     1,
       0,     6,     0,     1,     1,     2,     2,     2,     1,     1,
       5,     2,     0,     1,     6,     4,     5,     1,     0,     2,
       0,     3,     2,     2,     2,     3,     2,     4,     3,     2,
       2,     2,     4,     5,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     2,     2,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     0,     1,
       1,     1,     1,     0,     1,     0,     1,     0,     1,     1,
       1,     0,     3,     1,     1,     2,     3,     2,     2,     2,
       0,     4,     1,     1,     1,     1,     0,     2,     0,     2,
       0,     3,     5,     7,     0,     2,     1,     2,     2,     1,
       2,     4,     3,     2,     3,     3,     4,     3,     3,     1,
       4,     6,     1,     1,     2,     3,     2,     1,     3,     9,
       3,     0,    11,     4,     3,     1,     3,     3,     4,     1,
       1,     3,     5,     3,     3,     1,     1,     1,     3,     1,
       0,     2,     0,     2,     0,     2,     1,     3,     3,     1,
       5,     7,     8,     1,     2,     1,     1,     8,     2,     4,
       3,     2,     4,     1,     0,     2,     0,     1,     0,     7,
       2,     2,     0,     1,     1,     0,     9,     7,     6,     5,
       5,     4,     6,     1,     2,     1,     2,     2,     0,     3,
       1,     1,     3,     2,     0,     5,     1,     1,     0,     1,
       0,     2,     0,     4,     5,     1,     0,     6,     3,     2,
       4,     5,     1,     0,     6,     4,     1,     4,     5,     0,
       2,     0,     1,     3,     4,     4,     4,     1,     4,     6,
       1,     4,     2,     5,     1,     4,    10,     1,     4,     2,
       2,     2,     2,     1,     1,     5,     2,     2,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     2,     2,     2,
       2,     1,     1,     1,     1,     2,     2,     1,     1,     2,
       5,     4,     3,     2,     3,     2,     2,     1,     1,     1,
       1,     1,     3,     3,     3,     3,     2,     1,     1,     2,
       2,     2,     2,     2,     2,     2,     2,     5,     2,     3,
       2,     2,     2,     4,     4,     3,     6,     3,     3,    14,
       3,     4,     3,     3,     5,     4,     5,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     4,     0,     6,     0,     2,     0,     1,     0,
       5,     1,     1,     0,     1,     0,     8,     4
  };


#if YYDEBUG || 1
  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a YYNTOKENS, nonterminals.
  const char*
  const BisonParserImpl::yytname_[] =
  {
  "\"end of input\"", "error", "\"invalid token\"", "\"string literal\"",
  "\"bytes literal\"", "\"integer literal\"", "\"floating point literal\"",
  "\"identifier\"", "\"label\"", "\"comment\"", "\"*\"", "\",\"", "\";\"",
  "\"(\"", "\")\"", "\"=\"", "\"!=\"", "\"<>\"", "\"<\"", "\"<=\"",
  "\">\"", "\">=\"", "\"|\"", "\"^\"", "\"&\"", "\"[\"", "\"]\"", "\"@\"",
  "\"@@\"", "\"||\"", "\"+\"", "\"-\"", "\"/\"", "\"~\"", "\".\"",
  "\".*\"", "\"@{\"", "\"}\"", "\"?\"", "\"@n\"", "\"<<\"", "\">>\"",
  "\"=>\"", "\"->\"", "\":\"", "\"{\"", "UNARY_NOT_PRECEDENCE",
  "UNARY_PRECEDENCE", "DOUBLE_AT_PRECEDENCE", "PRIMARY_PRECEDENCE",
  "\"ALL\"", "\"AND\"", "\"AND for BETWEEN\"", "\"ANY\"", "\"ARRAY\"",
  "\"AS\"", "\"ASC\"", "\"ASSERT_ROWS_MODIFIED\"", "\"AT\"", "\"BETWEEN\"",
  "\"BY\"", "\"CASE\"", "\"CAST\"", "\"COLLATE\"", "\"CREATE\"",
  "\"CROSS\"", "\"CURRENT\"", "\"DEFAULT\"", "\"DEFINE\"", "\"DESC\"",
  "\"DISTINCT\"", "\"ELSE\"", "\"END\"", "\"ENUM\"",
  "\"EXCEPT in set operation\"", "\"EXCEPT\"", "\"EXISTS\"", "\"EXTRACT\"",
  "\"FALSE\"", "\"FOLLOWING\"", "\"FROM\"", "\"FULL\"", "\"GROUP\"",
  "\"GROUPING\"", "\"HASH\"", "\"HAVING\"", "\"IF\"", "\"IGNORE\"",
  "\"IN\"", "\"INNER\"", "\"INTERSECT\"", "\"INTERVAL\"", "\"INTO\"",
  "\"IS\"", "\"JOIN\"", "\"LEFT\"", "\"LIKE\"", "\"LIMIT\"", "\"LOOKUP\"",
  "\"MERGE\"", "\"NATURAL\"", "\"NEW\"", "\"NO\"", "\"NOT\"", "\"NULL\"",
  "\"NULLS\"", "\"ON\"", "\"OR\"", "\"ORDER\"", "\"OUTER\"", "\"OVER\"",
  "\"PARTITION\"", "\"PRECEDING\"", "\"PROTO\"", "\"RANGE\"",
  "\"RECURSIVE\"", "\"RESPECT\"", "\"RIGHT\"", "\"ROLLUP\"", "\"ROWS\"",
  "\"SELECT\"", "\"SET\"", "\"STRUCT\"", "\"TABLESAMPLE\"", "\"THEN\"",
  "\"TO\"", "\"TRUE\"", "\"UNBOUNDED\"", "\"UNION\"", "\"USING\"",
  "\"WHEN\"", "\"WHERE\"", "\"WINDOW\"", "\"WITH\"",
  "\"WITH starting with expression\"", "\"UNNEST\"", "\"CONTAINS\"",
  "\"CUBE\"", "\"ESCAPE\"", "\"EXCLUDE\"", "\"FETCH\"", "\"FOR\"",
  "\"GROUPS\"", "\"LATERAL\"", "\"OF\"", "\"SOME\"", "\"TREAT\"",
  "\"WITHIN\"", "KW_QUALIFY_RESERVED", "\"NOT_SPECIAL\"", "\"ABORT\"",
  "\"ACCESS\"", "\"ACTION\"", "\"ADD\"", "\"AGGREGATE\"", "\"ALTER\"",
  "\"ANONYMIZATION\"", "\"ANALYZE\"", "\"ASSERT\"", "\"BATCH\"",
  "\"BEGIN\"", "\"BIGDECIMAL\"", "\"BIGNUMERIC\"", "\"BREAK\"", "\"CALL\"",
  "\"CASCADE\"", "\"CHECK\"", "\"CLAMPED\"", "\"CLONE\"", "\"COPY\"",
  "\"CLUSTER\"", "\"COLUMN\"", "\"COLUMNS\"", "\"COMMIT\"",
  "\"CONNECTION\"", "\"CONTINUE\"", "\"CONSTANT\"", "\"CONSTRAINT\"",
  "\"DATA\"", "\"DATABASE\"", "\"DATE\"", "\"DATETIME\"", "\"DECIMAL\"",
  "\"DECLARE\"", "\"DEFINER\"", "\"DELETE\"", "\"DELETION\"",
  "\"DESCRIBE\"", "\"DESCRIPTOR\"", "\"DETERMINISTIC\"", "\"DO\"",
  "\"DROP\"", "\"ENFORCED\"", "\"ELSEIF\"", "\"EXECUTE\"", "\"EXPLAIN\"",
  "\"EXPORT\"", "\"EXTERNAL\"", "\"FILES\"", "\"FILTER\"",
  "\"FILTER_FIELDS\"", "\"FILL\"", "\"FIRST\"", "\"FOREIGN\"",
  "\"FORMAT\"", "\"FUNCTION\"", "\"GENERATED\"", "\"GRANT\"",
  "\"GROUP_ROWS\"", "\"HIDDEN\"", "\"IMMEDIATE\"", "\"IMMUTABLE\"",
  "\"IMPORT\"", "\"INCLUDE\"", "\"INDEX\"", "\"INOUT\"", "\"INSERT\"",
  "\"INVOKER\"", "\"ITERATE\"", "\"ISOLATION\"", "\"JSON\"", "\"KEY\"",
  "\"LANGUAGE\"", "\"LAST\"", "\"LEAVE\"", "\"LEVEL\"", "\"LOAD\"",
  "\"LOOP\"", "\"MATCH\"", "\"MATCHED\"", "\"MATERIALIZED\"", "\"MAX\"",
  "\"MESSAGE\"", "\"MIN\"", "\"MODEL\"", "\"MODULE\"", "\"NUMERIC\"",
  "\"OFFSET\"", "\"ONLY\"", "\"OPTIONS\"", "\"OUT\"", "\"OVERWRITE\"",
  "\"PERCENT\"", "\"PIVOT\"", "\"POLICIES\"", "\"POLICY\"", "\"PRIMARY\"",
  "\"PRIVATE\"", "\"PRIVILEGE\"", "\"PRIVILEGES\"", "\"PROCEDURE\"",
  "\"PUBLIC\"", "KW_QUALIFY_NONRESERVED", "\"RAISE\"", "\"READ\"",
  "\"REFERENCES\"", "\"REMOTE\"", "\"REMOVE\"", "\"RENAME\"", "\"REPEAT\"",
  "\"REPEATABLE\"", "\"REPLACE\"", "\"REPLACE_FIELDS\"", "\"REPORT\"",
  "\"RESTRICT\"", "\"RESTRICTION\"", "\"RETURN\"", "\"RETURNS\"",
  "\"REVOKE\"", "\"ROLLBACK\"", "\"ROW\"", "\"RUN\"", "\"SAFE_CAST\"",
  "\"SCHEMA\"", "\"SEARCH\"", "\"SECURITY\"", "\"SHOW\"", "\"SIMPLE\"",
  "\"SNAPSHOT\"", "\"SOURCE\"", "\"SQL\"", "\"STABLE\"", "\"START\"",
  "\"STORED\"", "\"STORING\"", "\"SYSTEM\"", "\"SYSTEM_TIME\"",
  "\"TABLE\"", "\"TARGET\"", "\"TRANSFORM\"", "\"TEMP\"", "\"TEMPORARY\"",
  "\"TIME\"", "\"TIMESTAMP\"", "\"TRANSACTION\"", "\"TRUNCATE\"",
  "\"TYPE\"", "\"UNIQUE\"", "\"UNKNOWN\"", "\"UNPIVOT\"", "\"UNTIL\"",
  "\"UPDATE\"", "\"VALUE\"", "\"VALUES\"", "\"VOLATILE\"", "\"VIEW\"",
  "\"VIEWS\"", "\"WEIGHT\"", "\"WHILE\"", "\"WRITE\"", "\"ZONE\"",
  "\"EXCEPTION\"", "\"ERROR\"", "\"INTERLEAVE\"", "\"NULL_FILTERED\"",
  "\"PARENT\"", "KW_CURRENT_DATETIME_FUNCTION", "MODE_STATEMENT",
  "MODE_SCRIPT", "MODE_NEXT_STATEMENT", "MODE_NEXT_SCRIPT_STATEMENT",
  "MODE_NEXT_STATEMENT_KIND", "MODE_EXPRESSION", "MODE_TYPE", "$accept",
  "start_mode", "opt_semicolon", "sql_statement", "next_script_statement",
  "next_statement", "unterminated_statement", "unterminated_sql_statement",
  "unterminated_script_statement", "terminated_statement",
  "sql_statement_body", "query_statement", "alter_action",
  "alter_action_list", "privilege_restriction_alter_action",
  "privilege_restriction_alter_action_list",
  "row_access_policy_alter_action", "row_access_policy_alter_action_list",
  "schema_object_kind", "alter_statement", "opt_transform_clause",
  "assert_statement", "opt_description", "analyze_statement",
  "opt_table_and_column_info_list", "table_and_column_info_list",
  "table_and_column_info", "transaction_mode", "transaction_mode_list",
  "opt_transaction_mode_list", "begin_statement",
  "begin_transaction_keywords", "transaction_keyword",
  "opt_transaction_keyword", "set_statement", "commit_statement",
  "rollback_statement", "start_batch_statement", "run_batch_statement",
  "abort_batch_statement", "create_constant_statement",
  "create_database_statement", "create_function_statement",
  "opt_aggregate", "opt_not_aggregate", "function_declaration",
  "function_parameter", "function_parameters_prefix",
  "function_parameters", "unlabeled_begin_end_block_or_language_as_code",
  "create_procedure_statement", "procedure_parameters_prefix",
  "procedure_parameters", "procedure_parameter_termination",
  "procedure_parameter", "opt_procedure_parameter_mode", "opt_returns",
  "opt_function_returns", "opt_determinism_level", "opt_language",
  "remote_with_connection_clause", "opt_remote_with_connection_clause",
  "opt_language_or_remote_with_connection", "opt_sql_security_clause",
  "sql_security_clause_kind", "as_sql_function_body_or_string",
  "opt_as_sql_function_body_or_string", "opt_as_code",
  "path_expression_or_string", "sql_function_body", "restrict_to_clause",
  "opt_restrict_to_clause", "grant_to_clause",
  "create_row_access_policy_grant_to_clause",
  "opt_create_row_access_policy_grant_to_clause", "opt_filter",
  "filter_using_clause", "create_privilege_restriction_statement",
  "create_row_access_policy_statement", "with_partition_columns_clause",
  "with_connection_clause", "opt_external_table_with_clauses",
  "create_external_table_statement",
  "create_external_table_function_statement", "create_index_statement",
  "create_schema_statement", "create_snapshot_table_statement",
  "create_table_function_statement", "create_table_statement",
  "append_or_overwrite", "aux_load_data_from_files_options_list",
  "aux_load_data_statement", "generic_entity_type",
  "generic_sub_entity_type", "generic_entity_body",
  "opt_generic_entity_body", "create_entity_statement",
  "create_model_statement", "opt_table_element_list", "table_element_list",
  "table_element_list_prefix", "table_element", "table_column_definition",
  "table_column_schema", "simple_column_schema_inner",
  "array_column_schema_inner", "struct_column_field",
  "struct_column_schema_prefix", "struct_column_schema_inner",
  "raw_column_schema_inner", "column_schema_inner",
  "generated_as_keywords", "stored_mode", "generated_column_info",
  "invalid_generated_column", "default_column_info",
  "invalid_default_column", "opt_column_info", "field_schema",
  "primary_key_column_attribute", "foreign_key_column_attribute",
  "hidden_column_attribute", "not_null_column_attribute",
  "column_attribute", "column_attributes", "opt_column_attributes",
  "opt_field_attributes", "column_position", "opt_column_position",
  "fill_using_expression", "opt_fill_using_expression",
  "table_constraint_spec", "primary_key_element",
  "primary_key_element_list_prefix", "primary_key_element_list",
  "primary_key_spec", "primary_key_or_table_constraint_spec",
  "table_constraint_definition", "foreign_key_reference",
  "opt_foreign_key_match", "foreign_key_match_mode",
  "opt_foreign_key_actions", "opt_foreign_key_on_update",
  "opt_foreign_key_on_delete", "foreign_key_on_update",
  "foreign_key_on_delete", "foreign_key_action", "opt_constraint_identity",
  "opt_constraint_enforcement", "constraint_enforcement",
  "table_or_table_function", "tvf_schema_column", "tvf_schema_prefix",
  "tvf_schema", "opt_recursive", "create_view_statement", "as_query",
  "opt_as_query", "opt_as_query_or_string", "opt_if_not_exists",
  "describe_statement", "describe_info", "opt_from_path_expression",
  "explain_statement", "export_data_statement", "export_model_statement",
  "grant_statement", "revoke_statement", "privileges",
  "opt_privileges_keyword", "privilege_list", "privilege",
  "privilege_name", "rename_statement", "import_statement",
  "module_statement", "index_order_by_prefix", "index_all_columns",
  "index_order_by", "index_unnest_expression_list",
  "opt_index_unnest_expression_list",
  "index_storing_expression_list_prefix", "index_storing_expression_list",
  "index_storing_list", "opt_index_storing_list", "column_list_prefix",
  "column_list", "opt_column_list", "grantee_list",
  "grantee_list_with_parens_prefix", "possibly_empty_grantee_list",
  "show_statement", "show_target", "opt_like_string_literal",
  "opt_like_path_expression", "opt_clone_table", "opt_copy_table",
  "all_or_distinct", "query_set_operation_type",
  "query_primary_or_set_operation",
  "query_primary_or_set_operation_maybe_expression", "query",
  "query_maybe_expression", "query_set_operation_prefix",
  "query_set_operation", "query_set_operation_prefix_maybe_expression",
  "query_set_operation_maybe_expression", "query_primary",
  "query_primary_maybe_expression", "select", "opt_with_anonymization",
  "opt_select_as_clause", "extra_identifier_in_hints_name",
  "identifier_in_hints", "hint_entry", "hint_with_body_prefix",
  "hint_with_body", "hint", "opt_all_or_distinct", "select_list_prefix",
  "select_list", "star_except_list_prefix", "star_except_list",
  "star_replace_item", "star_modifiers_with_replace_prefix",
  "star_modifiers", "select_column", "opt_as_alias",
  "opt_as_alias_with_required_as", "opt_as_or_into_alias", "opt_as",
  "opt_natural", "opt_outer", "int_literal_or_parameter",
  "cast_int_literal_or_parameter",
  "possibly_cast_int_literal_or_parameter", "repeatable_clause",
  "sample_size_value", "sample_size_unit", "sample_size",
  "opt_repeatable_clause", "opt_sample_clause_suffix", "sample_clause",
  "opt_sample_clause", "pivot_expression", "pivot_expression_list",
  "pivot_value", "pivot_value_list", "pivot_clause",
  "opt_as_string_or_integer", "path_expression_list",
  "path_expression_list_with_opt_parens", "path_expression_list_prefix",
  "path_expression_list_with_parens",
  "opt_path_expression_list_with_parens", "unpivot_in_item",
  "unpivot_in_item_list_prefix", "unpivot_in_item_list",
  "opt_unpivot_nulls_filter", "unpivot_clause",
  "opt_pivot_or_unpivot_clause_and_alias", "table_subquery",
  "table_clause", "model_clause", "connection_clause", "descriptor_column",
  "descriptor_column_list", "descriptor_argument", "tvf_argument",
  "tvf_prefix_no_args", "tvf_prefix", "tvf", "table_path_expression_base",
  "table_path_expression", "table_primary", "opt_at_system_time",
  "on_clause", "using_clause_prefix", "using_clause",
  "opt_on_or_using_clause_list", "on_or_using_clause_list",
  "on_or_using_clause", "join_type", "join_hint", "join_input", "join",
  "from_clause_contents", "opt_from_clause", "opt_clauses_following_from",
  "opt_clauses_following_where", "opt_clauses_following_group_by",
  "where_clause", "opt_where_clause", "rollup_list", "grouping_item",
  "group_by_clause_prefix", "group_by_clause", "opt_group_by_clause",
  "having_clause", "opt_having_clause", "window_definition",
  "window_clause_prefix", "opt_window_clause", "opt_qualify_clause",
  "qualify_clause_reserved", "opt_qualify_clause_reserved",
  "qualify_clause_nonreserved", "opt_limit_offset_clause",
  "opt_having_modifier", "opt_clamped_between_modifier",
  "opt_with_report_modifier", "opt_with_report_format",
  "opt_null_handling_modifier", "with_clause_entry", "with_clause",
  "opt_with_connection_clause", "with_clause_with_trailing_comma",
  "opt_asc_or_desc", "opt_null_order", "string_literal_or_parameter",
  "collate_clause", "opt_collate_clause", "opt_default_collate_clause",
  "ordering_expression", "order_by_clause_prefix", "opt_order_by_clause",
  "parenthesized_in_rhs", "in_list_two_or_more_prefix",
  "unnest_expression", "unnest_expression_with_opt_alias_and_offset",
  "comparative_operator", "additive_operator", "multiplicative_operator",
  "shift_operator", "import_type", "any_some_all", "like_operator",
  "between_operator", "distinct_operator", "in_operator", "is_operator",
  "unary_operator", "with_expression_variable",
  "with_expression_variable_prefix", "with_expression", "expression",
  "path_expression", "dashed_identifier", "dashed_path_expression",
  "maybe_dashed_path_expression",
  "maybe_slashed_or_dashed_path_expression",
  "slashed_identifier_separator", "identifier_or_integer",
  "slashed_identifier", "slashed_path_expression",
  "array_constructor_prefix_no_expressions", "array_constructor_prefix",
  "array_constructor", "range_literal", "date_or_time_literal_kind",
  "date_or_time_literal", "interval_expression", "parameter_expression",
  "named_parameter_expression", "type_name", "array_type", "struct_field",
  "struct_type_prefix", "struct_type", "raw_type", "type_parameter",
  "type_parameters_prefix", "opt_type_parameters", "type",
  "templated_parameter_kind", "templated_parameter_type",
  "type_or_tvf_schema", "new_constructor_prefix_no_arg",
  "new_constructor_arg", "new_constructor_prefix", "new_constructor",
  "braced_constructor_field_value", "braced_constructor_extension",
  "braced_constructor_field", "braced_constructor_start",
  "braced_constructor_prefix", "braced_constructor",
  "braced_new_constructor", "case_no_value_expression_prefix",
  "case_value_expression_prefix", "case_expression_prefix",
  "case_expression", "opt_at_time_zone", "opt_format", "cast_expression",
  "extract_expression_base", "extract_expression", "replace_fields_arg",
  "replace_fields_prefix", "replace_fields_expression",
  "function_name_from_keyword", "function_call_expression_base",
  "function_call_argument", "named_argument", "lambda_argument",
  "lambda_argument_list", "function_call_expression_with_args_prefix",
  "function_call_expression", "opt_identifier",
  "partition_by_clause_prefix", "opt_partition_by_clause",
  "partition_by_clause_prefix_no_hint", "opt_partition_by_clause_no_hint",
  "cluster_by_clause_prefix_no_hint", "opt_cluster_by_clause_no_hint",
  "opt_ttl_clause", "preceding_or_following", "window_frame_bound",
  "frame_unit", "opt_window_frame_clause", "window_specification",
  "function_call_expression_with_clauses", "opt_with_group_rows",
  "opt_over_clause", "parenthesized_expression",
  "struct_constructor_prefix_with_keyword_no_arg",
  "struct_constructor_prefix_with_keyword", "struct_constructor_arg",
  "struct_constructor_prefix_without_keyword", "struct_constructor",
  "expression_subquery", "bare_expression_subquery", "null_literal",
  "boolean_literal", "string_literal", "bytes_literal", "integer_literal",
  "numeric_literal_prefix", "numeric_literal", "bignumeric_literal_prefix",
  "bignumeric_literal", "json_literal", "floating_point_literal",
  "identifier", "label", "system_variable_expression",
  "reserved_keyword_rule", "keyword_as_identifier", "opt_or_replace",
  "opt_create_scope", "opt_unique", "opt_search", "describe_keyword",
  "opt_hint", "options_entry", "expression_or_proto",
  "options_list_prefix", "options_list", "opt_options_list",
  "define_table_statement", "dml_statement", "opt_from_keyword",
  "opt_where_expression", "opt_assert_rows_modified",
  "opt_returning_clause", "unambiguous_or_ignore_replace_update",
  "insert_statement_prefix", "insert_statement", "copy_data_source",
  "clone_data_source", "clone_data_source_list", "clone_data_statement",
  "expression_or_default", "insert_values_row_prefix", "insert_values_row",
  "insert_values_list", "delete_statement", "opt_with_offset_and_alias",
  "update_statement", "truncate_statement", "nested_dml_statement",
  "generalized_path_expression",
  "maybe_dashed_generalized_path_expression", "generalized_extension_path",
  "update_set_value", "update_item", "update_item_list", "opt_into",
  "opt_by_target", "opt_and_expression",
  "merge_insert_value_list_or_source_row", "merge_action",
  "merge_when_clause", "merge_when_clause_list", "merge_source",
  "merge_statement_prefix", "merge_statement",
  "call_statement_with_args_prefix", "call_statement",
  "opt_function_parameters", "opt_if_exists", "opt_access",
  "drop_all_row_access_policies_statement", "on_path_expression",
  "opt_on_path_expression", "opt_drop_mode", "drop_statement",
  "non_empty_statement_list", "unterminated_non_empty_statement_list",
  "opt_execute_into_clause", "execute_using_argument",
  "execute_using_argument_list", "opt_execute_using_clause",
  "execute_immediate", "script", "statement_list", "opt_else",
  "elseif_clauses", "opt_elseif_clauses", "if_statement_unclosed",
  "if_statement", "when_then_clauses", "opt_expression", "case_statement",
  "unlabeled_begin_end_block", "begin_end_block", "opt_exception_handler",
  "opt_default_expression", "identifier_list", "variable_declaration",
  "unlabeled_loop_statement", "loop_statement",
  "unlabeled_while_statement", "while_statement", "until_clause",
  "unlabeled_repeat_statement", "repeat_statement",
  "unlabeled_for_in_statement", "for_in_statement", "break_statement",
  "continue_statement", "return_statement", "raise_statement",
  "next_statement_kind", "next_statement_kind_parenthesized_select",
  "next_statement_kind_table",
  "next_statement_kind_create_table_opt_as_or_semicolon",
  "next_statement_kind_create_modifiers",
  "next_statement_kind_without_hint", "spanner_primary_key",
  "opt_spanner_index_interleave_clause",
  "opt_spanner_interleave_in_parent_clause", "opt_spanner_table_options",
  "opt_spanner_null_filtered", "spanner_generated_or_default",
  "opt_spanner_generated_or_default", "opt_spanner_not_null_attribute",
  "spanner_alter_column_action", "spanner_set_on_delete_action", YY_NULLPTR
  };
#endif


#if YYDEBUG
  const short
  BisonParserImpl::yyrline_[] =
  {
       0,  1613,  1613,  1614,  1615,  1616,  1617,  1619,  1620,  1624,
    1624,  1627,  1634,  1641,  1650,  1657,  1666,  1667,  1671,  1672,
    1679,  1680,  1681,  1682,  1683,  1684,  1685,  1686,  1687,  1688,
    1689,  1690,  1694,  1701,  1702,  1703,  1704,  1705,  1706,  1707,
    1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
    1718,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,
    1728,  1729,  1730,  1731,  1732,  1733,  1734,  1735,  1736,  1737,
    1738,  1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,
    1751,  1758,  1762,  1767,  1771,  1775,  1785,  1792,  1798,  1806,
    1813,  1820,  1826,  1832,  1839,  1845,  1851,  1857,  1863,  1867,
    1871,  1882,  1893,  1904,  1910,  1917,  1923,  1924,  1928,  1932,
    1941,  1942,  1948,  1961,  1965,  1975,  1976,  1983,  1987,  1994,
    2005,  2009,  2024,  2026,  2028,  2030,  2038,  2040,  2042,  2044,
    2046,  2048,  2050,  2055,  2067,  2091,  2098,  2112,  2121,  2129,
    2137,  2141,  2145,  2152,  2157,  2163,  2170,  2171,  2175,  2179,
    2186,  2193,  2199,  2205,  2209,  2216,  2220,  2227,  2229,  2235,
    2242,  2243,  2247,  2251,  2252,  2256,  2260,  2264,  2268,  2272,
    2276,  2282,  2293,  2300,  2307,  2314,  2321,  2328,  2340,  2347,
    2366,  2385,  2407,  2408,  2413,  2414,  2418,  2425,  2432,  2441,
    2445,  2452,  2456,  2463,  2472,  2486,  2500,  2504,  2511,  2515,
    2522,  2523,  2527,  2533,  2551,  2552,  2554,  2557,  2561,  2575,
    2581,  2592,  2593,  2595,  2597,  2599,  2602,  2607,  2612,  2618,
    2634,  2652,  2657,  2666,  2671,  2677,  2686,  2688,  2694,  2695,
    2698,  2702,  2709,  2711,  2717,  2722,  2728,  2732,  2739,  2743,
    2757,  2766,  2771,  2777,  2786,  2787,  2796,  2801,  2808,  2813,
    2819,  2828,  2842,  2859,  2868,  2884,  2890,  2895,  2900,  2907,
    2935,  2944,  2962,  2973,  2990,  3021,  3050,  3053,  3059,  3066,
    3086,  3102,  3119,  3123,  3130,  3134,  3138,  3157,  3170,  3171,
    3175,  3179,  3191,  3195,  3199,  3238,  3239,  3243,  3252,  3268,
    3275,  3280,  3289,  3313,  3319,  3326,  3330,  3339,  3343,  3347,
    3348,  3349,  3353,  3359,  3360,  3364,  3368,  3373,  3379,  3388,
    3393,  3399,  3411,  3416,  3422,  3432,  3442,  3449,  3456,  3463,
    3471,  3478,  3485,  3486,  3487,  3488,  3508,  3512,  3516,  3547,
    3548,  3552,  3556,  3560,  3566,  3575,  3576,  3580,  3587,  3588,
    3592,  3598,  3608,  3628,  3632,  3639,  3643,  3647,  3657,  3658,
    3664,  3665,  3666,  3693,  3703,  3704,  3708,  3709,  3710,  3716,
    3723,  3731,  3737,  3738,  3742,  3743,  3747,  3751,  3755,  3756,
    3757,  3758,  3762,  3763,  3767,  3768,  3772,  3773,  3779,  3783,
    3790,  3794,  3801,  3806,  3813,  3819,  3820,  3824,  3839,  3856,
    3859,  3860,  3864,  3865,  3866,  3870,  3871,  3875,  3882,  3886,
    3893,  3897,  3901,  3908,  3915,  3922,  3926,  3933,  3937,  3944,
    3948,  3955,  3956,  3960,  3964,  3971,  3978,  3982,  3990,  3997,
    4014,  4021,  4025,  4032,  4045,  4049,  4056,  4061,  4068,  4069,
    4073,  4077,  4084,  4091,  4097,  4098,  4102,  4106,  4113,  4120,
    4121,  4125,  4129,  4136,  4140,  4147,  4151,  4158,  4165,  4169,
    4176,  4180,  4184,  4188,  4192,  4196,  4200,  4204,  4209,  4210,
    4216,  4220,  4224,  4232,  4233,  4244,  4245,  4253,  4258,  4266,
    4280,  4285,  4293,  4309,  4317,  4340,  4354,  4362,  4384,  4392,
    4393,  4409,  4410,  4440,  4451,  4463,  4473,  4479,  4485,  4506,
    4510,  4511,  4512,  4516,  4517,  4524,  4528,  4535,  4539,  4543,
    4550,  4560,  4564,  4569,  4570,  4571,  4575,  4579,  4586,  4591,
    4598,  4602,  4609,  4616,  4623,  4627,  4631,  4638,  4642,  4649,
    4653,  4658,  4663,  4668,  4674,  4680,  4688,  4692,  4696,  4700,
    4704,  4708,  4712,  4716,  4717,  4722,  4723,  4726,  4726,  4729,
    4730,  4731,  4734,  4743,  4744,  4748,  4755,  4756,  4761,  4762,
    4766,  4775,  4776,  4782,  4786,  4791,  4797,  4803,  4807,  4814,
    4815,  4819,  4825,  4828,  4834,  4839,  4842,  4847,  4857,  4860,
    4863,  4866,  4870,  4876,  4880,  4885,  4889,  4896,  4903,  4904,
    4908,  4913,  4916,  4921,  4926,  4927,  4928,  4932,  4953,  4958,
    4963,  4970,  4977,  4983,  4989,  4995,  5001,  5007,  5013,  5019,
    5027,  5041,  5045,  5052,  5059,  5066,  5073,  5077,  5084,  5091,
    5095,  5099,  5103,  5107,  5111,  5115,  5123,  5131,  5140,  5149,
    5157,  5168,  5172,  5181,  5185,  5192,  5198,  5207,  5208,  5209,
    5216,  5223,  5230,  5240,  5286,  5287,  5288,  5299,  5303,  5307,
    5312,  5316,  5323,  5327,  5334,  5341,  5343,  5349,  5353,  5370,
    5371,  5375,  5376,  5377,  5378,  5379,  5380,  5385,  5386,  5387,
    5390,  5390,  5400,  5416,  5417,  5428,  5472,  5477,  5482,  5490,
    5501,  5515,  5520,  5526,  5530,  5537,  5541,  5548,  5551,  5552,
    5556,  5560,  5567,  5571,  5578,  5582,  5589,  5595,  5596,  5600,
    5606,  5607,  5611,  5618,  5622,  5629,  5633,  5637,  5638,  5639,
    5643,  5654,  5655,  5658,  5669,  5674,  5678,  5682,  5689,  5696,
    5700,  5704,  5708,  5712,  5716,  5717,  5721,  5725,  5730,  5736,
    5743,  5748,  5756,  5763,  5764,  5768,  5776,  5777,  5778,  5782,
    5788,  5794,  5798,  5799,  5800,  5803,  5809,  5810,  5814,  5818,
    5822,  5832,  5836,  5843,  5847,  5857,  5869,  5904,  5913,  5919,
    5926,  5930,  5941,  5950,  5951,  5952,  5953,  5954,  5955,  5956,
    5959,  5960,  5964,  5965,  5970,  5971,  5976,  5977,  5982,  5993,
    6004,  6019,  6020,  6029,  6033,  6041,  6045,  6054,  6055,  6064,
    6065,  6069,  6073,  6077,  6084,  6091,  6096,  6103,  6112,  6113,
    6114,  6115,  6116,  6117,  6118,  6119,  6120,  6121,  6122,  6123,
    6124,  6125,  6126,  6127,  6128,  6129,  6130,  6131,  6132,  6133,
    6134,  6135,  6136,  6162,  6163,  6164,  6168,  6173,  6177,  6194,
    6204,  6214,  6220,  6240,  6266,  6287,  6302,  6322,  6348,  6380,
    6401,  6417,  6433,  6456,  6471,  6486,  6501,  6516,  6531,  6545,
    6559,  6580,  6584,  6591,  6606,  6624,  6639,  6653,  6673,  6697,
    6707,  6714,  6715,  6732,  6733,  6750,  6750,  6750,  6755,  6755,
    6755,  6760,  6775,  6799,  6852,  6863,  6916,  6962,  6969,  6970,
    6971,  6978,  6982,  6989,  6993,  7000,  7007,  7008,  7009,  7010,
    7014,  7023,  7027,  7034,  7035,  7047,  7051,  7060,  7065,  7074,
    7081,  7085,  7092,  7096,  7103,  7107,  7114,  7114,  7114,  7117,
    7118,  7119,  7120,  7121,  7125,  7132,  7136,  7143,  7144,  7150,
    7153,  7159,  7163,  7167,  7171,  7175,  7190,  7199,  7199,  7199,
    7202,  7209,  7213,  7217,  7226,  7230,  7237,  7241,  7248,  7252,
    7259,  7266,  7273,  7284,  7288,  7292,  7296,  7310,  7317,  7321,
    7328,  7335,  7339,  7346,  7350,  7357,  7358,  7362,  7366,  7373,
    7377,  7382,  7386,  7390,  7396,  7406,  7412,  7423,  7430,  7434,
    7441,  7445,  7452,  7456,  7463,  7470,  7474,  7478,  7482,  7486,
    7490,  7511,  7549,  7586,  7599,  7600,  7608,  7609,  7613,  7620,
    7639,  7650,  7657,  7665,  7671,  7679,  7688,  7706,  7707,  7711,
    7715,  7722,  7723,  7727,  7731,  7738,  7739,  7743,  7747,  7754,
    7755,  7759,  7767,  7772,  7773,  7777,  7786,  7793,  7805,  7806,
    7810,  7816,  7822,  7825,  7829,  7837,  7859,  7864,  7872,  7876,
    7880,  7884,  7895,  7899,  7906,  7910,  7917,  7926,  7930,  7937,
    7941,  7945,  7952,  7958,  7964,  7968,  7975,  7986,  7995,  8007,
    8038,  8072,  8081,  8082,  8086,  8095,  8096,  8100,  8109,  8118,
    8127,  8157,  8164,  8197,  8201,  8217,  8218,  8219,  8220,  8221,
    8222,  8223,  8224,  8225,  8226,  8227,  8228,  8229,  8230,  8231,
    8232,  8233,  8234,  8235,  8236,  8237,  8238,  8239,  8240,  8241,
    8242,  8243,  8244,  8245,  8246,  8247,  8248,  8249,  8250,  8251,
    8252,  8253,  8254,  8255,  8256,  8257,  8258,  8259,  8260,  8261,
    8262,  8263,  8264,  8265,  8266,  8267,  8268,  8269,  8270,  8271,
    8272,  8273,  8274,  8275,  8276,  8277,  8278,  8279,  8280,  8281,
    8282,  8283,  8284,  8285,  8286,  8287,  8288,  8289,  8290,  8291,
    8292,  8293,  8294,  8295,  8296,  8297,  8298,  8299,  8300,  8301,
    8302,  8303,  8304,  8305,  8306,  8307,  8308,  8309,  8310,  8311,
    8312,  8323,  8324,  8325,  8326,  8327,  8328,  8329,  8330,  8331,
    8332,  8333,  8334,  8335,  8336,  8337,  8338,  8339,  8340,  8341,
    8342,  8343,  8344,  8345,  8346,  8347,  8348,  8349,  8350,  8351,
    8352,  8353,  8354,  8355,  8356,  8357,  8358,  8359,  8360,  8361,
    8362,  8363,  8364,  8365,  8366,  8367,  8368,  8369,  8370,  8371,
    8372,  8373,  8374,  8375,  8376,  8377,  8378,  8379,  8380,  8381,
    8382,  8383,  8384,  8385,  8386,  8387,  8388,  8389,  8390,  8391,
    8392,  8393,  8394,  8395,  8396,  8397,  8398,  8399,  8400,  8401,
    8402,  8403,  8404,  8405,  8406,  8407,  8408,  8409,  8410,  8411,
    8412,  8413,  8414,  8415,  8416,  8417,  8418,  8419,  8420,  8421,
    8422,  8423,  8424,  8425,  8426,  8427,  8428,  8429,  8430,  8431,
    8432,  8433,  8434,  8435,  8436,  8437,  8438,  8439,  8440,  8441,
    8442,  8443,  8444,  8445,  8446,  8447,  8448,  8449,  8450,  8451,
    8452,  8453,  8454,  8455,  8456,  8457,  8458,  8459,  8460,  8461,
    8462,  8463,  8464,  8465,  8466,  8467,  8468,  8469,  8470,  8471,
    8472,  8473,  8474,  8475,  8476,  8477,  8478,  8479,  8480,  8481,
    8482,  8483,  8484,  8485,  8488,  8489,  8490,  8494,  8494,  8497,
    8498,  8499,  8500,  8501,  8504,  8504,  8506,  8506,  8508,  8508,
    8511,  8512,  8516,  8523,  8529,  8533,  8537,  8544,  8548,  8555,
    8556,  8560,  8567,  8568,  8569,  8572,  8572,  8575,  8580,  8586,
    8591,  8597,  8601,  8608,  8613,  8623,  8624,  8625,  8629,  8637,
    8641,  8653,  8665,  8702,  8723,  8854,  8867,  8883,  8890,  8897,
    8901,  8908,  8916,  8917,  8924,  8928,  8935,  8942,  8946,  8953,
    8962,  8966,  8970,  8979,  8986,  8998,  9002,  9012,  9020,  9028,
    9033,  9057,  9062,  9066,  9073,  9080,  9084,  9091,  9095,  9102,
    9103,  9107,  9108,  9112,  9117,  9123,  9127,  9134,  9140,  9146,
    9155,  9161,  9169,  9180,  9184,  9193,  9194,  9198,  9206,  9213,
    9217,  9224,  9228,  9235,  9237,  9244,  9249,  9256,  9261,  9268,
    9278,  9285,  9290,  9296,  9297,  9299,  9303,  9311,  9322,  9330,
    9360,  9366,  9372,  9426,  9430,  9436,  9440,  9446,  9451,  9457,
    9462,  9471,  9475,  9482,  9487,  9493,  9501,  9506,  9512,  9521,
    9526,  9533,  9538,  9544,  9550,  9559,  9564,  9570,  9577,  9583,
    9593,  9599,  9608,  9613,  9619,  9630,  9637,  9639,  9650,  9656,
    9662,  9667,  9673,  9677,  9684,  9689,  9696,  9703,  9705,  9716,
    9723,  9725,  9736,  9743,  9754,  9756,  9767,  9778,  9780,  9791,
    9804,  9820,  9833,  9851,  9858,  9862,  9868,  9880,  9881,  9882,
    9886,  9897,  9898,  9899,  9903,  9909,  9910,  9911,  9913,  9915,
    9917,  9919,  9920,  9921,  9922,  9923,  9925,  9927,  9929,  9930,
    9934,  9938,  9940,  9942,  9950,  9952,  9954,  9968,  9969,  9970,
    9971,  9972,  9973,  9975,  9977,  9979,  9981,  9983,  9984,  9985,
    9987,  9988,  9990,  9992,  9994,  9996, 10000, 10002, 10005, 10007,
   10009, 10011, 10013, 10015, 10020, 10025, 10029, 10032, 10034, 10036,
   10047, 10051, 10056, 10060, 10064, 10066, 10070, 10072, 10074, 10076,
   10078, 10080, 10082, 10084, 10086, 10088, 10090, 10092, 10094, 10096,
   10098, 10100, 10102, 10104, 10106, 10108, 10110, 10112, 10114, 10116,
   10118, 10124, 10136, 10147, 10151, 10165, 10169, 10179, 10183, 10192,
   10198, 10204, 10208, 10209, 10213, 10219, 10223, 10250
  };

  void
  BisonParserImpl::yy_stack_print_ () const
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << int (i->state);
    *yycdebug_ << '\n';
  }

  void
  BisonParserImpl::yy_reduce_print_ (int yyrule) const
  {
    int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):\n";
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG

  BisonParserImpl::symbol_kind_type
  BisonParserImpl::yytranslate_ (int t)
  {
    // YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to
    // TOKEN-NUM as returned by yylex.
    static
    const short
    translate_table[] =
    {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    24,     2,
      13,    14,    10,    30,    11,    31,    34,    32,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    44,    12,
      18,    15,    20,    38,    27,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    25,     2,    26,    23,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    45,    22,    37,    33,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    16,    17,    19,    21,    28,
      29,    35,    36,    39,    40,    41,    42,    43,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323
    };
    const int user_token_number_max_ = 555;

    if (t <= 0)
      return symbol_kind::S_YYEOF;
    else if (t <= user_token_number_max_)
      return YY_CAST (symbol_kind_type, translate_table[t]);
    else
      return symbol_kind::S_YYUNDEF;
  }

} // zetasql_bison_parser
#line 21299 "bazel-out/k8-opt/bin/external/com_google_zetasql/zetasql/parser/bison_parser.bison.cc"

#line 10261 "external/com_google_zetasql/zetasql/parser/bison_parser.y"


void zetasql_bison_parser::BisonParserImpl::error(
    const zetasql_bison_parser::location& loc,
    const std::string& msg) {
  *error_message = msg;
  *error_location = zetasql::ParseLocationPoint::FromByteOffset(
      parser->filename().ToStringView(), loc.begin.column);
}
