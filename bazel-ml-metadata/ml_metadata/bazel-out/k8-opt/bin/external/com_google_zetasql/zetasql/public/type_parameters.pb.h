// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/type_parameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_5fparameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_5fparameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zetasql/public/simple_value.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fpublic_2ftype_5fparameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fpublic_2ftype_5fparameters_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto;
namespace zetasql {
class ExtendedTypeParametersProto;
struct ExtendedTypeParametersProtoDefaultTypeInternal;
extern ExtendedTypeParametersProtoDefaultTypeInternal _ExtendedTypeParametersProto_default_instance_;
class NumericTypeParametersProto;
struct NumericTypeParametersProtoDefaultTypeInternal;
extern NumericTypeParametersProtoDefaultTypeInternal _NumericTypeParametersProto_default_instance_;
class StringTypeParametersProto;
struct StringTypeParametersProtoDefaultTypeInternal;
extern StringTypeParametersProtoDefaultTypeInternal _StringTypeParametersProto_default_instance_;
class TypeParametersProto;
struct TypeParametersProtoDefaultTypeInternal;
extern TypeParametersProtoDefaultTypeInternal _TypeParametersProto_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::ExtendedTypeParametersProto* Arena::CreateMaybeMessage<::zetasql::ExtendedTypeParametersProto>(Arena*);
template<> ::zetasql::NumericTypeParametersProto* Arena::CreateMaybeMessage<::zetasql::NumericTypeParametersProto>(Arena*);
template<> ::zetasql::StringTypeParametersProto* Arena::CreateMaybeMessage<::zetasql::StringTypeParametersProto>(Arena*);
template<> ::zetasql::TypeParametersProto* Arena::CreateMaybeMessage<::zetasql::TypeParametersProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class TypeParametersProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.TypeParametersProto) */ {
 public:
  inline TypeParametersProto() : TypeParametersProto(nullptr) {}
  ~TypeParametersProto() override;
  explicit PROTOBUF_CONSTEXPR TypeParametersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypeParametersProto(const TypeParametersProto& from);
  TypeParametersProto(TypeParametersProto&& from) noexcept
    : TypeParametersProto() {
    *this = ::std::move(from);
  }

  inline TypeParametersProto& operator=(const TypeParametersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeParametersProto& operator=(TypeParametersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TypeParametersProto& default_instance() {
    return *internal_default_instance();
  }
  enum TypeParametersCase {
    kStringTypeParameters = 1,
    kNumericTypeParameters = 2,
    kExtendedTypeParameters = 3,
    TYPE_PARAMETERS_NOT_SET = 0,
  };

  static inline const TypeParametersProto* internal_default_instance() {
    return reinterpret_cast<const TypeParametersProto*>(
               &_TypeParametersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TypeParametersProto& a, TypeParametersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeParametersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeParametersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypeParametersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypeParametersProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TypeParametersProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TypeParametersProto& from) {
    TypeParametersProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeParametersProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.TypeParametersProto";
  }
  protected:
  explicit TypeParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildListFieldNumber = 100,
    kStringTypeParametersFieldNumber = 1,
    kNumericTypeParametersFieldNumber = 2,
    kExtendedTypeParametersFieldNumber = 3,
  };
  // repeated .zetasql.TypeParametersProto child_list = 100;
  int child_list_size() const;
  private:
  int _internal_child_list_size() const;
  public:
  void clear_child_list();
  ::zetasql::TypeParametersProto* mutable_child_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeParametersProto >*
      mutable_child_list();
  private:
  const ::zetasql::TypeParametersProto& _internal_child_list(int index) const;
  ::zetasql::TypeParametersProto* _internal_add_child_list();
  public:
  const ::zetasql::TypeParametersProto& child_list(int index) const;
  ::zetasql::TypeParametersProto* add_child_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeParametersProto >&
      child_list() const;

  // .zetasql.StringTypeParametersProto string_type_parameters = 1;
  bool has_string_type_parameters() const;
  private:
  bool _internal_has_string_type_parameters() const;
  public:
  void clear_string_type_parameters();
  const ::zetasql::StringTypeParametersProto& string_type_parameters() const;
  PROTOBUF_NODISCARD ::zetasql::StringTypeParametersProto* release_string_type_parameters();
  ::zetasql::StringTypeParametersProto* mutable_string_type_parameters();
  void set_allocated_string_type_parameters(::zetasql::StringTypeParametersProto* string_type_parameters);
  private:
  const ::zetasql::StringTypeParametersProto& _internal_string_type_parameters() const;
  ::zetasql::StringTypeParametersProto* _internal_mutable_string_type_parameters();
  public:
  void unsafe_arena_set_allocated_string_type_parameters(
      ::zetasql::StringTypeParametersProto* string_type_parameters);
  ::zetasql::StringTypeParametersProto* unsafe_arena_release_string_type_parameters();

  // .zetasql.NumericTypeParametersProto numeric_type_parameters = 2;
  bool has_numeric_type_parameters() const;
  private:
  bool _internal_has_numeric_type_parameters() const;
  public:
  void clear_numeric_type_parameters();
  const ::zetasql::NumericTypeParametersProto& numeric_type_parameters() const;
  PROTOBUF_NODISCARD ::zetasql::NumericTypeParametersProto* release_numeric_type_parameters();
  ::zetasql::NumericTypeParametersProto* mutable_numeric_type_parameters();
  void set_allocated_numeric_type_parameters(::zetasql::NumericTypeParametersProto* numeric_type_parameters);
  private:
  const ::zetasql::NumericTypeParametersProto& _internal_numeric_type_parameters() const;
  ::zetasql::NumericTypeParametersProto* _internal_mutable_numeric_type_parameters();
  public:
  void unsafe_arena_set_allocated_numeric_type_parameters(
      ::zetasql::NumericTypeParametersProto* numeric_type_parameters);
  ::zetasql::NumericTypeParametersProto* unsafe_arena_release_numeric_type_parameters();

  // .zetasql.ExtendedTypeParametersProto extended_type_parameters = 3;
  bool has_extended_type_parameters() const;
  private:
  bool _internal_has_extended_type_parameters() const;
  public:
  void clear_extended_type_parameters();
  const ::zetasql::ExtendedTypeParametersProto& extended_type_parameters() const;
  PROTOBUF_NODISCARD ::zetasql::ExtendedTypeParametersProto* release_extended_type_parameters();
  ::zetasql::ExtendedTypeParametersProto* mutable_extended_type_parameters();
  void set_allocated_extended_type_parameters(::zetasql::ExtendedTypeParametersProto* extended_type_parameters);
  private:
  const ::zetasql::ExtendedTypeParametersProto& _internal_extended_type_parameters() const;
  ::zetasql::ExtendedTypeParametersProto* _internal_mutable_extended_type_parameters();
  public:
  void unsafe_arena_set_allocated_extended_type_parameters(
      ::zetasql::ExtendedTypeParametersProto* extended_type_parameters);
  ::zetasql::ExtendedTypeParametersProto* unsafe_arena_release_extended_type_parameters();

  void clear_type_parameters();
  TypeParametersCase type_parameters_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.TypeParametersProto)
 private:
  class _Internal;
  void set_has_string_type_parameters();
  void set_has_numeric_type_parameters();
  void set_has_extended_type_parameters();

  inline bool has_type_parameters() const;
  inline void clear_has_type_parameters();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeParametersProto > child_list_;
    union TypeParametersUnion {
      constexpr TypeParametersUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::zetasql::StringTypeParametersProto* string_type_parameters_;
      ::zetasql::NumericTypeParametersProto* numeric_type_parameters_;
      ::zetasql::ExtendedTypeParametersProto* extended_type_parameters_;
    } type_parameters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_5fparameters_2eproto;
};
// -------------------------------------------------------------------

class StringTypeParametersProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.StringTypeParametersProto) */ {
 public:
  inline StringTypeParametersProto() : StringTypeParametersProto(nullptr) {}
  ~StringTypeParametersProto() override;
  explicit PROTOBUF_CONSTEXPR StringTypeParametersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringTypeParametersProto(const StringTypeParametersProto& from);
  StringTypeParametersProto(StringTypeParametersProto&& from) noexcept
    : StringTypeParametersProto() {
    *this = ::std::move(from);
  }

  inline StringTypeParametersProto& operator=(const StringTypeParametersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringTypeParametersProto& operator=(StringTypeParametersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringTypeParametersProto& default_instance() {
    return *internal_default_instance();
  }
  enum ParamCase {
    kMaxLength = 1,
    kIsMaxLength = 2,
    PARAM_NOT_SET = 0,
  };

  static inline const StringTypeParametersProto* internal_default_instance() {
    return reinterpret_cast<const StringTypeParametersProto*>(
               &_StringTypeParametersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StringTypeParametersProto& a, StringTypeParametersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StringTypeParametersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringTypeParametersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringTypeParametersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringTypeParametersProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringTypeParametersProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringTypeParametersProto& from) {
    StringTypeParametersProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringTypeParametersProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.StringTypeParametersProto";
  }
  protected:
  explicit StringTypeParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxLengthFieldNumber = 1,
    kIsMaxLengthFieldNumber = 2,
  };
  // int64 max_length = 1;
  bool has_max_length() const;
  private:
  bool _internal_has_max_length() const;
  public:
  void clear_max_length();
  int64_t max_length() const;
  void set_max_length(int64_t value);
  private:
  int64_t _internal_max_length() const;
  void _internal_set_max_length(int64_t value);
  public:

  // bool is_max_length = 2;
  bool has_is_max_length() const;
  private:
  bool _internal_has_is_max_length() const;
  public:
  void clear_is_max_length();
  bool is_max_length() const;
  void set_is_max_length(bool value);
  private:
  bool _internal_is_max_length() const;
  void _internal_set_is_max_length(bool value);
  public:

  void clear_param();
  ParamCase param_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.StringTypeParametersProto)
 private:
  class _Internal;
  void set_has_max_length();
  void set_has_is_max_length();

  inline bool has_param() const;
  inline void clear_has_param();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ParamUnion {
      constexpr ParamUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t max_length_;
      bool is_max_length_;
    } param_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_5fparameters_2eproto;
};
// -------------------------------------------------------------------

class NumericTypeParametersProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.NumericTypeParametersProto) */ {
 public:
  inline NumericTypeParametersProto() : NumericTypeParametersProto(nullptr) {}
  ~NumericTypeParametersProto() override;
  explicit PROTOBUF_CONSTEXPR NumericTypeParametersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumericTypeParametersProto(const NumericTypeParametersProto& from);
  NumericTypeParametersProto(NumericTypeParametersProto&& from) noexcept
    : NumericTypeParametersProto() {
    *this = ::std::move(from);
  }

  inline NumericTypeParametersProto& operator=(const NumericTypeParametersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumericTypeParametersProto& operator=(NumericTypeParametersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumericTypeParametersProto& default_instance() {
    return *internal_default_instance();
  }
  enum PrecisionParamCase {
    kPrecision = 1,
    kIsMaxPrecision = 2,
    PRECISION_PARAM_NOT_SET = 0,
  };

  static inline const NumericTypeParametersProto* internal_default_instance() {
    return reinterpret_cast<const NumericTypeParametersProto*>(
               &_NumericTypeParametersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NumericTypeParametersProto& a, NumericTypeParametersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NumericTypeParametersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumericTypeParametersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumericTypeParametersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumericTypeParametersProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumericTypeParametersProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumericTypeParametersProto& from) {
    NumericTypeParametersProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumericTypeParametersProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.NumericTypeParametersProto";
  }
  protected:
  explicit NumericTypeParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 3,
    kPrecisionFieldNumber = 1,
    kIsMaxPrecisionFieldNumber = 2,
  };
  // optional int64 scale = 3;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  int64_t scale() const;
  void set_scale(int64_t value);
  private:
  int64_t _internal_scale() const;
  void _internal_set_scale(int64_t value);
  public:

  // int64 precision = 1;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  int64_t precision() const;
  void set_precision(int64_t value);
  private:
  int64_t _internal_precision() const;
  void _internal_set_precision(int64_t value);
  public:

  // bool is_max_precision = 2;
  bool has_is_max_precision() const;
  private:
  bool _internal_has_is_max_precision() const;
  public:
  void clear_is_max_precision();
  bool is_max_precision() const;
  void set_is_max_precision(bool value);
  private:
  bool _internal_is_max_precision() const;
  void _internal_set_is_max_precision(bool value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          NumericTypeParametersProto, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  void clear_precision_param();
  PrecisionParamCase precision_param_case() const;
  // @@protoc_insertion_point(class_scope:zetasql.NumericTypeParametersProto)
 private:
  class _Internal;
  void set_has_precision();
  void set_has_is_max_precision();

  inline bool has_precision_param() const;
  inline void clear_has_precision_param();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t scale_;
    union PrecisionParamUnion {
      constexpr PrecisionParamUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t precision_;
      bool is_max_precision_;
    } precision_param_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_5fparameters_2eproto;
};
// -------------------------------------------------------------------

class ExtendedTypeParametersProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ExtendedTypeParametersProto) */ {
 public:
  inline ExtendedTypeParametersProto() : ExtendedTypeParametersProto(nullptr) {}
  ~ExtendedTypeParametersProto() override;
  explicit PROTOBUF_CONSTEXPR ExtendedTypeParametersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtendedTypeParametersProto(const ExtendedTypeParametersProto& from);
  ExtendedTypeParametersProto(ExtendedTypeParametersProto&& from) noexcept
    : ExtendedTypeParametersProto() {
    *this = ::std::move(from);
  }

  inline ExtendedTypeParametersProto& operator=(const ExtendedTypeParametersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendedTypeParametersProto& operator=(ExtendedTypeParametersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendedTypeParametersProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendedTypeParametersProto* internal_default_instance() {
    return reinterpret_cast<const ExtendedTypeParametersProto*>(
               &_ExtendedTypeParametersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExtendedTypeParametersProto& a, ExtendedTypeParametersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendedTypeParametersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendedTypeParametersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtendedTypeParametersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtendedTypeParametersProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtendedTypeParametersProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtendedTypeParametersProto& from) {
    ExtendedTypeParametersProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendedTypeParametersProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ExtendedTypeParametersProto";
  }
  protected:
  explicit ExtendedTypeParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
  };
  // repeated .zetasql.SimpleValueProto parameters = 1;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::zetasql::SimpleValueProto* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleValueProto >*
      mutable_parameters();
  private:
  const ::zetasql::SimpleValueProto& _internal_parameters(int index) const;
  ::zetasql::SimpleValueProto* _internal_add_parameters();
  public:
  const ::zetasql::SimpleValueProto& parameters(int index) const;
  ::zetasql::SimpleValueProto* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleValueProto >&
      parameters() const;

  // @@protoc_insertion_point(class_scope:zetasql.ExtendedTypeParametersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleValueProto > parameters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fpublic_2ftype_5fparameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypeParametersProto

// .zetasql.StringTypeParametersProto string_type_parameters = 1;
inline bool TypeParametersProto::_internal_has_string_type_parameters() const {
  return type_parameters_case() == kStringTypeParameters;
}
inline bool TypeParametersProto::has_string_type_parameters() const {
  return _internal_has_string_type_parameters();
}
inline void TypeParametersProto::set_has_string_type_parameters() {
  _impl_._oneof_case_[0] = kStringTypeParameters;
}
inline void TypeParametersProto::clear_string_type_parameters() {
  if (_internal_has_string_type_parameters()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_parameters_.string_type_parameters_;
    }
    clear_has_type_parameters();
  }
}
inline ::zetasql::StringTypeParametersProto* TypeParametersProto::release_string_type_parameters() {
  // @@protoc_insertion_point(field_release:zetasql.TypeParametersProto.string_type_parameters)
  if (_internal_has_string_type_parameters()) {
    clear_has_type_parameters();
    ::zetasql::StringTypeParametersProto* temp = _impl_.type_parameters_.string_type_parameters_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_parameters_.string_type_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasql::StringTypeParametersProto& TypeParametersProto::_internal_string_type_parameters() const {
  return _internal_has_string_type_parameters()
      ? *_impl_.type_parameters_.string_type_parameters_
      : reinterpret_cast< ::zetasql::StringTypeParametersProto&>(::zetasql::_StringTypeParametersProto_default_instance_);
}
inline const ::zetasql::StringTypeParametersProto& TypeParametersProto::string_type_parameters() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeParametersProto.string_type_parameters)
  return _internal_string_type_parameters();
}
inline ::zetasql::StringTypeParametersProto* TypeParametersProto::unsafe_arena_release_string_type_parameters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.TypeParametersProto.string_type_parameters)
  if (_internal_has_string_type_parameters()) {
    clear_has_type_parameters();
    ::zetasql::StringTypeParametersProto* temp = _impl_.type_parameters_.string_type_parameters_;
    _impl_.type_parameters_.string_type_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypeParametersProto::unsafe_arena_set_allocated_string_type_parameters(::zetasql::StringTypeParametersProto* string_type_parameters) {
  clear_type_parameters();
  if (string_type_parameters) {
    set_has_string_type_parameters();
    _impl_.type_parameters_.string_type_parameters_ = string_type_parameters;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeParametersProto.string_type_parameters)
}
inline ::zetasql::StringTypeParametersProto* TypeParametersProto::_internal_mutable_string_type_parameters() {
  if (!_internal_has_string_type_parameters()) {
    clear_type_parameters();
    set_has_string_type_parameters();
    _impl_.type_parameters_.string_type_parameters_ = CreateMaybeMessage< ::zetasql::StringTypeParametersProto >(GetArenaForAllocation());
  }
  return _impl_.type_parameters_.string_type_parameters_;
}
inline ::zetasql::StringTypeParametersProto* TypeParametersProto::mutable_string_type_parameters() {
  ::zetasql::StringTypeParametersProto* _msg = _internal_mutable_string_type_parameters();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeParametersProto.string_type_parameters)
  return _msg;
}

// .zetasql.NumericTypeParametersProto numeric_type_parameters = 2;
inline bool TypeParametersProto::_internal_has_numeric_type_parameters() const {
  return type_parameters_case() == kNumericTypeParameters;
}
inline bool TypeParametersProto::has_numeric_type_parameters() const {
  return _internal_has_numeric_type_parameters();
}
inline void TypeParametersProto::set_has_numeric_type_parameters() {
  _impl_._oneof_case_[0] = kNumericTypeParameters;
}
inline void TypeParametersProto::clear_numeric_type_parameters() {
  if (_internal_has_numeric_type_parameters()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_parameters_.numeric_type_parameters_;
    }
    clear_has_type_parameters();
  }
}
inline ::zetasql::NumericTypeParametersProto* TypeParametersProto::release_numeric_type_parameters() {
  // @@protoc_insertion_point(field_release:zetasql.TypeParametersProto.numeric_type_parameters)
  if (_internal_has_numeric_type_parameters()) {
    clear_has_type_parameters();
    ::zetasql::NumericTypeParametersProto* temp = _impl_.type_parameters_.numeric_type_parameters_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_parameters_.numeric_type_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasql::NumericTypeParametersProto& TypeParametersProto::_internal_numeric_type_parameters() const {
  return _internal_has_numeric_type_parameters()
      ? *_impl_.type_parameters_.numeric_type_parameters_
      : reinterpret_cast< ::zetasql::NumericTypeParametersProto&>(::zetasql::_NumericTypeParametersProto_default_instance_);
}
inline const ::zetasql::NumericTypeParametersProto& TypeParametersProto::numeric_type_parameters() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeParametersProto.numeric_type_parameters)
  return _internal_numeric_type_parameters();
}
inline ::zetasql::NumericTypeParametersProto* TypeParametersProto::unsafe_arena_release_numeric_type_parameters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.TypeParametersProto.numeric_type_parameters)
  if (_internal_has_numeric_type_parameters()) {
    clear_has_type_parameters();
    ::zetasql::NumericTypeParametersProto* temp = _impl_.type_parameters_.numeric_type_parameters_;
    _impl_.type_parameters_.numeric_type_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypeParametersProto::unsafe_arena_set_allocated_numeric_type_parameters(::zetasql::NumericTypeParametersProto* numeric_type_parameters) {
  clear_type_parameters();
  if (numeric_type_parameters) {
    set_has_numeric_type_parameters();
    _impl_.type_parameters_.numeric_type_parameters_ = numeric_type_parameters;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeParametersProto.numeric_type_parameters)
}
inline ::zetasql::NumericTypeParametersProto* TypeParametersProto::_internal_mutable_numeric_type_parameters() {
  if (!_internal_has_numeric_type_parameters()) {
    clear_type_parameters();
    set_has_numeric_type_parameters();
    _impl_.type_parameters_.numeric_type_parameters_ = CreateMaybeMessage< ::zetasql::NumericTypeParametersProto >(GetArenaForAllocation());
  }
  return _impl_.type_parameters_.numeric_type_parameters_;
}
inline ::zetasql::NumericTypeParametersProto* TypeParametersProto::mutable_numeric_type_parameters() {
  ::zetasql::NumericTypeParametersProto* _msg = _internal_mutable_numeric_type_parameters();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeParametersProto.numeric_type_parameters)
  return _msg;
}

// .zetasql.ExtendedTypeParametersProto extended_type_parameters = 3;
inline bool TypeParametersProto::_internal_has_extended_type_parameters() const {
  return type_parameters_case() == kExtendedTypeParameters;
}
inline bool TypeParametersProto::has_extended_type_parameters() const {
  return _internal_has_extended_type_parameters();
}
inline void TypeParametersProto::set_has_extended_type_parameters() {
  _impl_._oneof_case_[0] = kExtendedTypeParameters;
}
inline void TypeParametersProto::clear_extended_type_parameters() {
  if (_internal_has_extended_type_parameters()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_parameters_.extended_type_parameters_;
    }
    clear_has_type_parameters();
  }
}
inline ::zetasql::ExtendedTypeParametersProto* TypeParametersProto::release_extended_type_parameters() {
  // @@protoc_insertion_point(field_release:zetasql.TypeParametersProto.extended_type_parameters)
  if (_internal_has_extended_type_parameters()) {
    clear_has_type_parameters();
    ::zetasql::ExtendedTypeParametersProto* temp = _impl_.type_parameters_.extended_type_parameters_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_parameters_.extended_type_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasql::ExtendedTypeParametersProto& TypeParametersProto::_internal_extended_type_parameters() const {
  return _internal_has_extended_type_parameters()
      ? *_impl_.type_parameters_.extended_type_parameters_
      : reinterpret_cast< ::zetasql::ExtendedTypeParametersProto&>(::zetasql::_ExtendedTypeParametersProto_default_instance_);
}
inline const ::zetasql::ExtendedTypeParametersProto& TypeParametersProto::extended_type_parameters() const {
  // @@protoc_insertion_point(field_get:zetasql.TypeParametersProto.extended_type_parameters)
  return _internal_extended_type_parameters();
}
inline ::zetasql::ExtendedTypeParametersProto* TypeParametersProto::unsafe_arena_release_extended_type_parameters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zetasql.TypeParametersProto.extended_type_parameters)
  if (_internal_has_extended_type_parameters()) {
    clear_has_type_parameters();
    ::zetasql::ExtendedTypeParametersProto* temp = _impl_.type_parameters_.extended_type_parameters_;
    _impl_.type_parameters_.extended_type_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypeParametersProto::unsafe_arena_set_allocated_extended_type_parameters(::zetasql::ExtendedTypeParametersProto* extended_type_parameters) {
  clear_type_parameters();
  if (extended_type_parameters) {
    set_has_extended_type_parameters();
    _impl_.type_parameters_.extended_type_parameters_ = extended_type_parameters;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.TypeParametersProto.extended_type_parameters)
}
inline ::zetasql::ExtendedTypeParametersProto* TypeParametersProto::_internal_mutable_extended_type_parameters() {
  if (!_internal_has_extended_type_parameters()) {
    clear_type_parameters();
    set_has_extended_type_parameters();
    _impl_.type_parameters_.extended_type_parameters_ = CreateMaybeMessage< ::zetasql::ExtendedTypeParametersProto >(GetArenaForAllocation());
  }
  return _impl_.type_parameters_.extended_type_parameters_;
}
inline ::zetasql::ExtendedTypeParametersProto* TypeParametersProto::mutable_extended_type_parameters() {
  ::zetasql::ExtendedTypeParametersProto* _msg = _internal_mutable_extended_type_parameters();
  // @@protoc_insertion_point(field_mutable:zetasql.TypeParametersProto.extended_type_parameters)
  return _msg;
}

// repeated .zetasql.TypeParametersProto child_list = 100;
inline int TypeParametersProto::_internal_child_list_size() const {
  return _impl_.child_list_.size();
}
inline int TypeParametersProto::child_list_size() const {
  return _internal_child_list_size();
}
inline void TypeParametersProto::clear_child_list() {
  _impl_.child_list_.Clear();
}
inline ::zetasql::TypeParametersProto* TypeParametersProto::mutable_child_list(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.TypeParametersProto.child_list)
  return _impl_.child_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeParametersProto >*
TypeParametersProto::mutable_child_list() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.TypeParametersProto.child_list)
  return &_impl_.child_list_;
}
inline const ::zetasql::TypeParametersProto& TypeParametersProto::_internal_child_list(int index) const {
  return _impl_.child_list_.Get(index);
}
inline const ::zetasql::TypeParametersProto& TypeParametersProto::child_list(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.TypeParametersProto.child_list)
  return _internal_child_list(index);
}
inline ::zetasql::TypeParametersProto* TypeParametersProto::_internal_add_child_list() {
  return _impl_.child_list_.Add();
}
inline ::zetasql::TypeParametersProto* TypeParametersProto::add_child_list() {
  ::zetasql::TypeParametersProto* _add = _internal_add_child_list();
  // @@protoc_insertion_point(field_add:zetasql.TypeParametersProto.child_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::TypeParametersProto >&
TypeParametersProto::child_list() const {
  // @@protoc_insertion_point(field_list:zetasql.TypeParametersProto.child_list)
  return _impl_.child_list_;
}

inline bool TypeParametersProto::has_type_parameters() const {
  return type_parameters_case() != TYPE_PARAMETERS_NOT_SET;
}
inline void TypeParametersProto::clear_has_type_parameters() {
  _impl_._oneof_case_[0] = TYPE_PARAMETERS_NOT_SET;
}
inline TypeParametersProto::TypeParametersCase TypeParametersProto::type_parameters_case() const {
  return TypeParametersProto::TypeParametersCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StringTypeParametersProto

// int64 max_length = 1;
inline bool StringTypeParametersProto::_internal_has_max_length() const {
  return param_case() == kMaxLength;
}
inline bool StringTypeParametersProto::has_max_length() const {
  return _internal_has_max_length();
}
inline void StringTypeParametersProto::set_has_max_length() {
  _impl_._oneof_case_[0] = kMaxLength;
}
inline void StringTypeParametersProto::clear_max_length() {
  if (_internal_has_max_length()) {
    _impl_.param_.max_length_ = int64_t{0};
    clear_has_param();
  }
}
inline int64_t StringTypeParametersProto::_internal_max_length() const {
  if (_internal_has_max_length()) {
    return _impl_.param_.max_length_;
  }
  return int64_t{0};
}
inline void StringTypeParametersProto::_internal_set_max_length(int64_t value) {
  if (!_internal_has_max_length()) {
    clear_param();
    set_has_max_length();
  }
  _impl_.param_.max_length_ = value;
}
inline int64_t StringTypeParametersProto::max_length() const {
  // @@protoc_insertion_point(field_get:zetasql.StringTypeParametersProto.max_length)
  return _internal_max_length();
}
inline void StringTypeParametersProto::set_max_length(int64_t value) {
  _internal_set_max_length(value);
  // @@protoc_insertion_point(field_set:zetasql.StringTypeParametersProto.max_length)
}

// bool is_max_length = 2;
inline bool StringTypeParametersProto::_internal_has_is_max_length() const {
  return param_case() == kIsMaxLength;
}
inline bool StringTypeParametersProto::has_is_max_length() const {
  return _internal_has_is_max_length();
}
inline void StringTypeParametersProto::set_has_is_max_length() {
  _impl_._oneof_case_[0] = kIsMaxLength;
}
inline void StringTypeParametersProto::clear_is_max_length() {
  if (_internal_has_is_max_length()) {
    _impl_.param_.is_max_length_ = false;
    clear_has_param();
  }
}
inline bool StringTypeParametersProto::_internal_is_max_length() const {
  if (_internal_has_is_max_length()) {
    return _impl_.param_.is_max_length_;
  }
  return false;
}
inline void StringTypeParametersProto::_internal_set_is_max_length(bool value) {
  if (!_internal_has_is_max_length()) {
    clear_param();
    set_has_is_max_length();
  }
  _impl_.param_.is_max_length_ = value;
}
inline bool StringTypeParametersProto::is_max_length() const {
  // @@protoc_insertion_point(field_get:zetasql.StringTypeParametersProto.is_max_length)
  return _internal_is_max_length();
}
inline void StringTypeParametersProto::set_is_max_length(bool value) {
  _internal_set_is_max_length(value);
  // @@protoc_insertion_point(field_set:zetasql.StringTypeParametersProto.is_max_length)
}

inline bool StringTypeParametersProto::has_param() const {
  return param_case() != PARAM_NOT_SET;
}
inline void StringTypeParametersProto::clear_has_param() {
  _impl_._oneof_case_[0] = PARAM_NOT_SET;
}
inline StringTypeParametersProto::ParamCase StringTypeParametersProto::param_case() const {
  return StringTypeParametersProto::ParamCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// NumericTypeParametersProto

// int64 precision = 1;
inline bool NumericTypeParametersProto::_internal_has_precision() const {
  return precision_param_case() == kPrecision;
}
inline bool NumericTypeParametersProto::has_precision() const {
  return _internal_has_precision();
}
inline void NumericTypeParametersProto::set_has_precision() {
  _impl_._oneof_case_[0] = kPrecision;
}
inline void NumericTypeParametersProto::clear_precision() {
  if (_internal_has_precision()) {
    _impl_.precision_param_.precision_ = int64_t{0};
    clear_has_precision_param();
  }
}
inline int64_t NumericTypeParametersProto::_internal_precision() const {
  if (_internal_has_precision()) {
    return _impl_.precision_param_.precision_;
  }
  return int64_t{0};
}
inline void NumericTypeParametersProto::_internal_set_precision(int64_t value) {
  if (!_internal_has_precision()) {
    clear_precision_param();
    set_has_precision();
  }
  _impl_.precision_param_.precision_ = value;
}
inline int64_t NumericTypeParametersProto::precision() const {
  // @@protoc_insertion_point(field_get:zetasql.NumericTypeParametersProto.precision)
  return _internal_precision();
}
inline void NumericTypeParametersProto::set_precision(int64_t value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:zetasql.NumericTypeParametersProto.precision)
}

// bool is_max_precision = 2;
inline bool NumericTypeParametersProto::_internal_has_is_max_precision() const {
  return precision_param_case() == kIsMaxPrecision;
}
inline bool NumericTypeParametersProto::has_is_max_precision() const {
  return _internal_has_is_max_precision();
}
inline void NumericTypeParametersProto::set_has_is_max_precision() {
  _impl_._oneof_case_[0] = kIsMaxPrecision;
}
inline void NumericTypeParametersProto::clear_is_max_precision() {
  if (_internal_has_is_max_precision()) {
    _impl_.precision_param_.is_max_precision_ = false;
    clear_has_precision_param();
  }
}
inline bool NumericTypeParametersProto::_internal_is_max_precision() const {
  if (_internal_has_is_max_precision()) {
    return _impl_.precision_param_.is_max_precision_;
  }
  return false;
}
inline void NumericTypeParametersProto::_internal_set_is_max_precision(bool value) {
  if (!_internal_has_is_max_precision()) {
    clear_precision_param();
    set_has_is_max_precision();
  }
  _impl_.precision_param_.is_max_precision_ = value;
}
inline bool NumericTypeParametersProto::is_max_precision() const {
  // @@protoc_insertion_point(field_get:zetasql.NumericTypeParametersProto.is_max_precision)
  return _internal_is_max_precision();
}
inline void NumericTypeParametersProto::set_is_max_precision(bool value) {
  _internal_set_is_max_precision(value);
  // @@protoc_insertion_point(field_set:zetasql.NumericTypeParametersProto.is_max_precision)
}

// optional int64 scale = 3;
inline bool NumericTypeParametersProto::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NumericTypeParametersProto::has_scale() const {
  return _internal_has_scale();
}
inline void NumericTypeParametersProto::clear_scale() {
  _impl_.scale_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t NumericTypeParametersProto::_internal_scale() const {
  return _impl_.scale_;
}
inline int64_t NumericTypeParametersProto::scale() const {
  // @@protoc_insertion_point(field_get:zetasql.NumericTypeParametersProto.scale)
  return _internal_scale();
}
inline void NumericTypeParametersProto::_internal_set_scale(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scale_ = value;
}
inline void NumericTypeParametersProto::set_scale(int64_t value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:zetasql.NumericTypeParametersProto.scale)
}

inline bool NumericTypeParametersProto::has_precision_param() const {
  return precision_param_case() != PRECISION_PARAM_NOT_SET;
}
inline void NumericTypeParametersProto::clear_has_precision_param() {
  _impl_._oneof_case_[0] = PRECISION_PARAM_NOT_SET;
}
inline NumericTypeParametersProto::PrecisionParamCase NumericTypeParametersProto::precision_param_case() const {
  return NumericTypeParametersProto::PrecisionParamCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExtendedTypeParametersProto

// repeated .zetasql.SimpleValueProto parameters = 1;
inline int ExtendedTypeParametersProto::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int ExtendedTypeParametersProto::parameters_size() const {
  return _internal_parameters_size();
}
inline ::zetasql::SimpleValueProto* ExtendedTypeParametersProto::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ExtendedTypeParametersProto.parameters)
  return _impl_.parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleValueProto >*
ExtendedTypeParametersProto::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ExtendedTypeParametersProto.parameters)
  return &_impl_.parameters_;
}
inline const ::zetasql::SimpleValueProto& ExtendedTypeParametersProto::_internal_parameters(int index) const {
  return _impl_.parameters_.Get(index);
}
inline const ::zetasql::SimpleValueProto& ExtendedTypeParametersProto::parameters(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ExtendedTypeParametersProto.parameters)
  return _internal_parameters(index);
}
inline ::zetasql::SimpleValueProto* ExtendedTypeParametersProto::_internal_add_parameters() {
  return _impl_.parameters_.Add();
}
inline ::zetasql::SimpleValueProto* ExtendedTypeParametersProto::add_parameters() {
  ::zetasql::SimpleValueProto* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:zetasql.ExtendedTypeParametersProto.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::SimpleValueProto >&
ExtendedTypeParametersProto::parameters() const {
  // @@protoc_insertion_point(field_list:zetasql.ExtendedTypeParametersProto.parameters)
  return _impl_.parameters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fpublic_2ftype_5fparameters_2eproto
