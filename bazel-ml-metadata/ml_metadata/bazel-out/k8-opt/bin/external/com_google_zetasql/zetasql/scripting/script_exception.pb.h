// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/scripting/script_exception.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zetasql_2fscripting_2fscript_5fexception_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zetasql_2fscripting_2fscript_5fexception_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zetasql_2fscripting_2fscript_5fexception_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zetasql_2fscripting_2fscript_5fexception_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fscripting_2fscript_5fexception_2eproto;
namespace zetasql {
class ScriptException;
struct ScriptExceptionDefaultTypeInternal;
extern ScriptExceptionDefaultTypeInternal _ScriptException_default_instance_;
class ScriptException_Internal;
struct ScriptException_InternalDefaultTypeInternal;
extern ScriptException_InternalDefaultTypeInternal _ScriptException_Internal_default_instance_;
class ScriptException_StackTraceFrame;
struct ScriptException_StackTraceFrameDefaultTypeInternal;
extern ScriptException_StackTraceFrameDefaultTypeInternal _ScriptException_StackTraceFrame_default_instance_;
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasql::ScriptException* Arena::CreateMaybeMessage<::zetasql::ScriptException>(Arena*);
template<> ::zetasql::ScriptException_Internal* Arena::CreateMaybeMessage<::zetasql::ScriptException_Internal>(Arena*);
template<> ::zetasql::ScriptException_StackTraceFrame* Arena::CreateMaybeMessage<::zetasql::ScriptException_StackTraceFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasql {

// ===================================================================

class ScriptException_StackTraceFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ScriptException.StackTraceFrame) */ {
 public:
  inline ScriptException_StackTraceFrame() : ScriptException_StackTraceFrame(nullptr) {}
  ~ScriptException_StackTraceFrame() override;
  explicit PROTOBUF_CONSTEXPR ScriptException_StackTraceFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScriptException_StackTraceFrame(const ScriptException_StackTraceFrame& from);
  ScriptException_StackTraceFrame(ScriptException_StackTraceFrame&& from) noexcept
    : ScriptException_StackTraceFrame() {
    *this = ::std::move(from);
  }

  inline ScriptException_StackTraceFrame& operator=(const ScriptException_StackTraceFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScriptException_StackTraceFrame& operator=(ScriptException_StackTraceFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScriptException_StackTraceFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScriptException_StackTraceFrame* internal_default_instance() {
    return reinterpret_cast<const ScriptException_StackTraceFrame*>(
               &_ScriptException_StackTraceFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScriptException_StackTraceFrame& a, ScriptException_StackTraceFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ScriptException_StackTraceFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScriptException_StackTraceFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScriptException_StackTraceFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScriptException_StackTraceFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScriptException_StackTraceFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScriptException_StackTraceFrame& from) {
    ScriptException_StackTraceFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptException_StackTraceFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ScriptException.StackTraceFrame";
  }
  protected:
  explicit ScriptException_StackTraceFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 3,
    kLocationFieldNumber = 4,
    kLineFieldNumber = 1,
    kColumnFieldNumber = 2,
  };
  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // optional int64 line = 1;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  int64_t line() const;
  void set_line(int64_t value);
  private:
  int64_t _internal_line() const;
  void _internal_set_line(int64_t value);
  public:

  // optional int64 column = 2;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  int64_t column() const;
  void set_column(int64_t value);
  private:
  int64_t _internal_column() const;
  void _internal_set_column(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zetasql.ScriptException.StackTraceFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    int64_t line_;
    int64_t column_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fscripting_2fscript_5fexception_2eproto;
};
// -------------------------------------------------------------------

class ScriptException_Internal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ScriptException.Internal) */ {
 public:
  inline ScriptException_Internal() : ScriptException_Internal(nullptr) {}
  ~ScriptException_Internal() override;
  explicit PROTOBUF_CONSTEXPR ScriptException_Internal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScriptException_Internal(const ScriptException_Internal& from);
  ScriptException_Internal(ScriptException_Internal&& from) noexcept
    : ScriptException_Internal() {
    *this = ::std::move(from);
  }

  inline ScriptException_Internal& operator=(const ScriptException_Internal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScriptException_Internal& operator=(ScriptException_Internal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScriptException_Internal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScriptException_Internal* internal_default_instance() {
    return reinterpret_cast<const ScriptException_Internal*>(
               &_ScriptException_Internal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScriptException_Internal& a, ScriptException_Internal& b) {
    a.Swap(&b);
  }
  inline void Swap(ScriptException_Internal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScriptException_Internal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScriptException_Internal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScriptException_Internal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScriptException_Internal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScriptException_Internal& from) {
    ScriptException_Internal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptException_Internal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ScriptException.Internal";
  }
  protected:
  explicit ScriptException_Internal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackTraceFieldNumber = 2,
    kStatementTextFieldNumber = 1,
  };
  // repeated .zetasql.ScriptException.StackTraceFrame stack_trace = 2;
  int stack_trace_size() const;
  private:
  int _internal_stack_trace_size() const;
  public:
  void clear_stack_trace();
  ::zetasql::ScriptException_StackTraceFrame* mutable_stack_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ScriptException_StackTraceFrame >*
      mutable_stack_trace();
  private:
  const ::zetasql::ScriptException_StackTraceFrame& _internal_stack_trace(int index) const;
  ::zetasql::ScriptException_StackTraceFrame* _internal_add_stack_trace();
  public:
  const ::zetasql::ScriptException_StackTraceFrame& stack_trace(int index) const;
  ::zetasql::ScriptException_StackTraceFrame* add_stack_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ScriptException_StackTraceFrame >&
      stack_trace() const;

  // optional string statement_text = 1;
  bool has_statement_text() const;
  private:
  bool _internal_has_statement_text() const;
  public:
  void clear_statement_text();
  const std::string& statement_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statement_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statement_text();
  PROTOBUF_NODISCARD std::string* release_statement_text();
  void set_allocated_statement_text(std::string* statement_text);
  private:
  const std::string& _internal_statement_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statement_text(const std::string& value);
  std::string* _internal_mutable_statement_text();
  public:

  // @@protoc_insertion_point(class_scope:zetasql.ScriptException.Internal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ScriptException_StackTraceFrame > stack_trace_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statement_text_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fscripting_2fscript_5fexception_2eproto;
};
// -------------------------------------------------------------------

class ScriptException final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zetasql.ScriptException) */ {
 public:
  inline ScriptException() : ScriptException(nullptr) {}
  ~ScriptException() override;
  explicit PROTOBUF_CONSTEXPR ScriptException(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScriptException(const ScriptException& from);
  ScriptException(ScriptException&& from) noexcept
    : ScriptException() {
    *this = ::std::move(from);
  }

  inline ScriptException& operator=(const ScriptException& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScriptException& operator=(ScriptException&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScriptException& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScriptException* internal_default_instance() {
    return reinterpret_cast<const ScriptException*>(
               &_ScriptException_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScriptException& a, ScriptException& b) {
    a.Swap(&b);
  }
  inline void Swap(ScriptException* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScriptException* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScriptException* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScriptException>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScriptException& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScriptException& from) {
    ScriptException::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptException* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasql.ScriptException";
  }
  protected:
  explicit ScriptException(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScriptException_StackTraceFrame StackTraceFrame;
  typedef ScriptException_Internal Internal;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kInternalFieldNumber = 2,
  };
  // optional string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional .zetasql.ScriptException.Internal internal = 2;
  bool has_internal() const;
  private:
  bool _internal_has_internal() const;
  public:
  void clear_internal();
  const ::zetasql::ScriptException_Internal& internal() const;
  PROTOBUF_NODISCARD ::zetasql::ScriptException_Internal* release_internal();
  ::zetasql::ScriptException_Internal* mutable_internal();
  void set_allocated_internal(::zetasql::ScriptException_Internal* internal);
  private:
  const ::zetasql::ScriptException_Internal& _internal_internal() const;
  ::zetasql::ScriptException_Internal* _internal_mutable_internal();
  public:
  void unsafe_arena_set_allocated_internal(
      ::zetasql::ScriptException_Internal* internal);
  ::zetasql::ScriptException_Internal* unsafe_arena_release_internal();

  // @@protoc_insertion_point(class_scope:zetasql.ScriptException)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::zetasql::ScriptException_Internal* internal_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zetasql_2fscripting_2fscript_5fexception_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScriptException_StackTraceFrame

// optional int64 line = 1;
inline bool ScriptException_StackTraceFrame::_internal_has_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScriptException_StackTraceFrame::has_line() const {
  return _internal_has_line();
}
inline void ScriptException_StackTraceFrame::clear_line() {
  _impl_.line_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ScriptException_StackTraceFrame::_internal_line() const {
  return _impl_.line_;
}
inline int64_t ScriptException_StackTraceFrame::line() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptException.StackTraceFrame.line)
  return _internal_line();
}
inline void ScriptException_StackTraceFrame::_internal_set_line(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.line_ = value;
}
inline void ScriptException_StackTraceFrame::set_line(int64_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:zetasql.ScriptException.StackTraceFrame.line)
}

// optional int64 column = 2;
inline bool ScriptException_StackTraceFrame::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScriptException_StackTraceFrame::has_column() const {
  return _internal_has_column();
}
inline void ScriptException_StackTraceFrame::clear_column() {
  _impl_.column_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t ScriptException_StackTraceFrame::_internal_column() const {
  return _impl_.column_;
}
inline int64_t ScriptException_StackTraceFrame::column() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptException.StackTraceFrame.column)
  return _internal_column();
}
inline void ScriptException_StackTraceFrame::_internal_set_column(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.column_ = value;
}
inline void ScriptException_StackTraceFrame::set_column(int64_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:zetasql.ScriptException.StackTraceFrame.column)
}

// optional string filename = 3;
inline bool ScriptException_StackTraceFrame::_internal_has_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScriptException_StackTraceFrame::has_filename() const {
  return _internal_has_filename();
}
inline void ScriptException_StackTraceFrame::clear_filename() {
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScriptException_StackTraceFrame::filename() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptException.StackTraceFrame.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScriptException_StackTraceFrame::set_filename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ScriptException.StackTraceFrame.filename)
}
inline std::string* ScriptException_StackTraceFrame::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptException.StackTraceFrame.filename)
  return _s;
}
inline const std::string& ScriptException_StackTraceFrame::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void ScriptException_StackTraceFrame::_internal_set_filename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* ScriptException_StackTraceFrame::_internal_mutable_filename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* ScriptException_StackTraceFrame::release_filename() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptException.StackTraceFrame.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ScriptException_StackTraceFrame::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptException.StackTraceFrame.filename)
}

// optional string location = 4;
inline bool ScriptException_StackTraceFrame::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScriptException_StackTraceFrame::has_location() const {
  return _internal_has_location();
}
inline void ScriptException_StackTraceFrame::clear_location() {
  _impl_.location_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ScriptException_StackTraceFrame::location() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptException.StackTraceFrame.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScriptException_StackTraceFrame::set_location(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ScriptException.StackTraceFrame.location)
}
inline std::string* ScriptException_StackTraceFrame::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptException.StackTraceFrame.location)
  return _s;
}
inline const std::string& ScriptException_StackTraceFrame::_internal_location() const {
  return _impl_.location_.Get();
}
inline void ScriptException_StackTraceFrame::_internal_set_location(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* ScriptException_StackTraceFrame::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* ScriptException_StackTraceFrame::release_location() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptException.StackTraceFrame.location)
  if (!_internal_has_location()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.location_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ScriptException_StackTraceFrame::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptException.StackTraceFrame.location)
}

// -------------------------------------------------------------------

// ScriptException_Internal

// optional string statement_text = 1;
inline bool ScriptException_Internal::_internal_has_statement_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScriptException_Internal::has_statement_text() const {
  return _internal_has_statement_text();
}
inline void ScriptException_Internal::clear_statement_text() {
  _impl_.statement_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScriptException_Internal::statement_text() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptException.Internal.statement_text)
  return _internal_statement_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScriptException_Internal::set_statement_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.statement_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ScriptException.Internal.statement_text)
}
inline std::string* ScriptException_Internal::mutable_statement_text() {
  std::string* _s = _internal_mutable_statement_text();
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptException.Internal.statement_text)
  return _s;
}
inline const std::string& ScriptException_Internal::_internal_statement_text() const {
  return _impl_.statement_text_.Get();
}
inline void ScriptException_Internal::_internal_set_statement_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.statement_text_.Set(value, GetArenaForAllocation());
}
inline std::string* ScriptException_Internal::_internal_mutable_statement_text() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.statement_text_.Mutable(GetArenaForAllocation());
}
inline std::string* ScriptException_Internal::release_statement_text() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptException.Internal.statement_text)
  if (!_internal_has_statement_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.statement_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.statement_text_.IsDefault()) {
    _impl_.statement_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ScriptException_Internal::set_allocated_statement_text(std::string* statement_text) {
  if (statement_text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.statement_text_.SetAllocated(statement_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.statement_text_.IsDefault()) {
    _impl_.statement_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptException.Internal.statement_text)
}

// repeated .zetasql.ScriptException.StackTraceFrame stack_trace = 2;
inline int ScriptException_Internal::_internal_stack_trace_size() const {
  return _impl_.stack_trace_.size();
}
inline int ScriptException_Internal::stack_trace_size() const {
  return _internal_stack_trace_size();
}
inline void ScriptException_Internal::clear_stack_trace() {
  _impl_.stack_trace_.Clear();
}
inline ::zetasql::ScriptException_StackTraceFrame* ScriptException_Internal::mutable_stack_trace(int index) {
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptException.Internal.stack_trace)
  return _impl_.stack_trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ScriptException_StackTraceFrame >*
ScriptException_Internal::mutable_stack_trace() {
  // @@protoc_insertion_point(field_mutable_list:zetasql.ScriptException.Internal.stack_trace)
  return &_impl_.stack_trace_;
}
inline const ::zetasql::ScriptException_StackTraceFrame& ScriptException_Internal::_internal_stack_trace(int index) const {
  return _impl_.stack_trace_.Get(index);
}
inline const ::zetasql::ScriptException_StackTraceFrame& ScriptException_Internal::stack_trace(int index) const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptException.Internal.stack_trace)
  return _internal_stack_trace(index);
}
inline ::zetasql::ScriptException_StackTraceFrame* ScriptException_Internal::_internal_add_stack_trace() {
  return _impl_.stack_trace_.Add();
}
inline ::zetasql::ScriptException_StackTraceFrame* ScriptException_Internal::add_stack_trace() {
  ::zetasql::ScriptException_StackTraceFrame* _add = _internal_add_stack_trace();
  // @@protoc_insertion_point(field_add:zetasql.ScriptException.Internal.stack_trace)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasql::ScriptException_StackTraceFrame >&
ScriptException_Internal::stack_trace() const {
  // @@protoc_insertion_point(field_list:zetasql.ScriptException.Internal.stack_trace)
  return _impl_.stack_trace_;
}

// -------------------------------------------------------------------

// ScriptException

// optional string message = 1;
inline bool ScriptException::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScriptException::has_message() const {
  return _internal_has_message();
}
inline void ScriptException::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScriptException::message() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptException.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScriptException::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zetasql.ScriptException.message)
}
inline std::string* ScriptException::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptException.message)
  return _s;
}
inline const std::string& ScriptException::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ScriptException::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ScriptException::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ScriptException::release_message() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptException.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ScriptException::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptException.message)
}

// optional .zetasql.ScriptException.Internal internal = 2;
inline bool ScriptException::_internal_has_internal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.internal_ != nullptr);
  return value;
}
inline bool ScriptException::has_internal() const {
  return _internal_has_internal();
}
inline void ScriptException::clear_internal() {
  if (_impl_.internal_ != nullptr) _impl_.internal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::zetasql::ScriptException_Internal& ScriptException::_internal_internal() const {
  const ::zetasql::ScriptException_Internal* p = _impl_.internal_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::ScriptException_Internal&>(
      ::zetasql::_ScriptException_Internal_default_instance_);
}
inline const ::zetasql::ScriptException_Internal& ScriptException::internal() const {
  // @@protoc_insertion_point(field_get:zetasql.ScriptException.internal)
  return _internal_internal();
}
inline void ScriptException::unsafe_arena_set_allocated_internal(
    ::zetasql::ScriptException_Internal* internal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.internal_);
  }
  _impl_.internal_ = internal;
  if (internal) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zetasql.ScriptException.internal)
}
inline ::zetasql::ScriptException_Internal* ScriptException::release_internal() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ScriptException_Internal* temp = _impl_.internal_;
  _impl_.internal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::ScriptException_Internal* ScriptException::unsafe_arena_release_internal() {
  // @@protoc_insertion_point(field_release:zetasql.ScriptException.internal)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::zetasql::ScriptException_Internal* temp = _impl_.internal_;
  _impl_.internal_ = nullptr;
  return temp;
}
inline ::zetasql::ScriptException_Internal* ScriptException::_internal_mutable_internal() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.internal_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::ScriptException_Internal>(GetArenaForAllocation());
    _impl_.internal_ = p;
  }
  return _impl_.internal_;
}
inline ::zetasql::ScriptException_Internal* ScriptException::mutable_internal() {
  ::zetasql::ScriptException_Internal* _msg = _internal_mutable_internal();
  // @@protoc_insertion_point(field_mutable:zetasql.ScriptException.internal)
  return _msg;
}
inline void ScriptException::set_allocated_internal(::zetasql::ScriptException_Internal* internal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.internal_;
  }
  if (internal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(internal);
    if (message_arena != submessage_arena) {
      internal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.internal_ = internal;
  // @@protoc_insertion_point(field_set_allocated:zetasql.ScriptException.internal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zetasql

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zetasql_2fscripting_2fscript_5fexception_2eproto
