// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/confidence-interval.proto

#include "proto/confidence-interval.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace differential_privacy {
PROTOBUF_CONSTEXPR ConfidenceInterval::ConfidenceInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.upper_bound_)*/0
  , /*decltype(_impl_.lower_bound_)*/0
  , /*decltype(_impl_.confidence_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfidenceIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfidenceIntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfidenceIntervalDefaultTypeInternal() {}
  union {
    ConfidenceInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfidenceIntervalDefaultTypeInternal _ConfidenceInterval_default_instance_;
}  // namespace differential_privacy
static ::_pb::Metadata file_level_metadata_proto_2fconfidence_2dinterval_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fconfidence_2dinterval_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fconfidence_2dinterval_2eproto = nullptr;

const uint32_t TableStruct_proto_2fconfidence_2dinterval_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differential_privacy::ConfidenceInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::differential_privacy::ConfidenceInterval, _impl_.upper_bound_),
  PROTOBUF_FIELD_OFFSET(::differential_privacy::ConfidenceInterval, _impl_.lower_bound_),
  PROTOBUF_FIELD_OFFSET(::differential_privacy::ConfidenceInterval, _impl_.confidence_level_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::differential_privacy::ConfidenceInterval)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::differential_privacy::_ConfidenceInterval_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fconfidence_2dinterval_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037proto/confidence-interval.proto\022\024diffe"
  "rential_privacy\"X\n\022ConfidenceInterval\022\023\n"
  "\013upper_bound\030\001 \001(\001\022\023\n\013lower_bound\030\002 \001(\001\022"
  "\030\n\020confidence_level\030\003 \001(\001B.\n,com.google."
  "privacy.differentialprivacy.protob\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fconfidence_2dinterval_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fconfidence_2dinterval_2eproto = {
    false, false, 201, descriptor_table_protodef_proto_2fconfidence_2dinterval_2eproto,
    "proto/confidence-interval.proto",
    &descriptor_table_proto_2fconfidence_2dinterval_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_proto_2fconfidence_2dinterval_2eproto::offsets,
    file_level_metadata_proto_2fconfidence_2dinterval_2eproto, file_level_enum_descriptors_proto_2fconfidence_2dinterval_2eproto,
    file_level_service_descriptors_proto_2fconfidence_2dinterval_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fconfidence_2dinterval_2eproto_getter() {
  return &descriptor_table_proto_2fconfidence_2dinterval_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fconfidence_2dinterval_2eproto(&descriptor_table_proto_2fconfidence_2dinterval_2eproto);
namespace differential_privacy {

// ===================================================================

class ConfidenceInterval::_Internal {
 public:
};

ConfidenceInterval::ConfidenceInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:differential_privacy.ConfidenceInterval)
}
ConfidenceInterval::ConfidenceInterval(const ConfidenceInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfidenceInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.upper_bound_){}
    , decltype(_impl_.lower_bound_){}
    , decltype(_impl_.confidence_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.upper_bound_, &from._impl_.upper_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_level_) -
    reinterpret_cast<char*>(&_impl_.upper_bound_)) + sizeof(_impl_.confidence_level_));
  // @@protoc_insertion_point(copy_constructor:differential_privacy.ConfidenceInterval)
}

inline void ConfidenceInterval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.upper_bound_){0}
    , decltype(_impl_.lower_bound_){0}
    , decltype(_impl_.confidence_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfidenceInterval::~ConfidenceInterval() {
  // @@protoc_insertion_point(destructor:differential_privacy.ConfidenceInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfidenceInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfidenceInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfidenceInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:differential_privacy.ConfidenceInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.upper_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.confidence_level_) -
      reinterpret_cast<char*>(&_impl_.upper_bound_)) + sizeof(_impl_.confidence_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfidenceInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double upper_bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lower_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double confidence_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.confidence_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfidenceInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differential_privacy.ConfidenceInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double upper_bound = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upper_bound = this->_internal_upper_bound();
  uint64_t raw_upper_bound;
  memcpy(&raw_upper_bound, &tmp_upper_bound, sizeof(tmp_upper_bound));
  if (raw_upper_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_upper_bound(), target);
  }

  // double lower_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lower_bound = this->_internal_lower_bound();
  uint64_t raw_lower_bound;
  memcpy(&raw_lower_bound, &tmp_lower_bound, sizeof(tmp_lower_bound));
  if (raw_lower_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_lower_bound(), target);
  }

  // double confidence_level = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence_level = this->_internal_confidence_level();
  uint64_t raw_confidence_level;
  memcpy(&raw_confidence_level, &tmp_confidence_level, sizeof(tmp_confidence_level));
  if (raw_confidence_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_confidence_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differential_privacy.ConfidenceInterval)
  return target;
}

size_t ConfidenceInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differential_privacy.ConfidenceInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double upper_bound = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upper_bound = this->_internal_upper_bound();
  uint64_t raw_upper_bound;
  memcpy(&raw_upper_bound, &tmp_upper_bound, sizeof(tmp_upper_bound));
  if (raw_upper_bound != 0) {
    total_size += 1 + 8;
  }

  // double lower_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lower_bound = this->_internal_lower_bound();
  uint64_t raw_lower_bound;
  memcpy(&raw_lower_bound, &tmp_lower_bound, sizeof(tmp_lower_bound));
  if (raw_lower_bound != 0) {
    total_size += 1 + 8;
  }

  // double confidence_level = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence_level = this->_internal_confidence_level();
  uint64_t raw_confidence_level;
  memcpy(&raw_confidence_level, &tmp_confidence_level, sizeof(tmp_confidence_level));
  if (raw_confidence_level != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfidenceInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfidenceInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfidenceInterval::GetClassData() const { return &_class_data_; }


void ConfidenceInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfidenceInterval*>(&to_msg);
  auto& from = static_cast<const ConfidenceInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:differential_privacy.ConfidenceInterval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upper_bound = from._internal_upper_bound();
  uint64_t raw_upper_bound;
  memcpy(&raw_upper_bound, &tmp_upper_bound, sizeof(tmp_upper_bound));
  if (raw_upper_bound != 0) {
    _this->_internal_set_upper_bound(from._internal_upper_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lower_bound = from._internal_lower_bound();
  uint64_t raw_lower_bound;
  memcpy(&raw_lower_bound, &tmp_lower_bound, sizeof(tmp_lower_bound));
  if (raw_lower_bound != 0) {
    _this->_internal_set_lower_bound(from._internal_lower_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence_level = from._internal_confidence_level();
  uint64_t raw_confidence_level;
  memcpy(&raw_confidence_level, &tmp_confidence_level, sizeof(tmp_confidence_level));
  if (raw_confidence_level != 0) {
    _this->_internal_set_confidence_level(from._internal_confidence_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfidenceInterval::CopyFrom(const ConfidenceInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differential_privacy.ConfidenceInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfidenceInterval::IsInitialized() const {
  return true;
}

void ConfidenceInterval::InternalSwap(ConfidenceInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfidenceInterval, _impl_.confidence_level_)
      + sizeof(ConfidenceInterval::_impl_.confidence_level_)
      - PROTOBUF_FIELD_OFFSET(ConfidenceInterval, _impl_.upper_bound_)>(
          reinterpret_cast<char*>(&_impl_.upper_bound_),
          reinterpret_cast<char*>(&other->_impl_.upper_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfidenceInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fconfidence_2dinterval_2eproto_getter, &descriptor_table_proto_2fconfidence_2dinterval_2eproto_once,
      file_level_metadata_proto_2fconfidence_2dinterval_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace differential_privacy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::differential_privacy::ConfidenceInterval*
Arena::CreateMaybeMessage< ::differential_privacy::ConfidenceInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::differential_privacy::ConfidenceInterval >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
