// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/numerical-mechanism.proto

#include "proto/numerical-mechanism.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace differential_privacy {
namespace serialization {
PROTOBUF_CONSTEXPR GaussianMechanism::GaussianMechanism(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.epsilon_)*/0
  , /*decltype(_impl_.delta_)*/0
  , /*decltype(_impl_.l2_sensitivity_)*/0} {}
struct GaussianMechanismDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GaussianMechanismDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GaussianMechanismDefaultTypeInternal() {}
  union {
    GaussianMechanism _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GaussianMechanismDefaultTypeInternal _GaussianMechanism_default_instance_;
PROTOBUF_CONSTEXPR LaplaceMechanism::LaplaceMechanism(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.epsilon_)*/0
  , /*decltype(_impl_.l1_sensitivity_)*/0} {}
struct LaplaceMechanismDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaplaceMechanismDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaplaceMechanismDefaultTypeInternal() {}
  union {
    LaplaceMechanism _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaplaceMechanismDefaultTypeInternal _LaplaceMechanism_default_instance_;
}  // namespace serialization
}  // namespace differential_privacy
static ::_pb::Metadata file_level_metadata_proto_2fnumerical_2dmechanism_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fnumerical_2dmechanism_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fnumerical_2dmechanism_2eproto = nullptr;

const uint32_t TableStruct_proto_2fnumerical_2dmechanism_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::differential_privacy::serialization::GaussianMechanism, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::differential_privacy::serialization::GaussianMechanism, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::differential_privacy::serialization::GaussianMechanism, _impl_.epsilon_),
  PROTOBUF_FIELD_OFFSET(::differential_privacy::serialization::GaussianMechanism, _impl_.delta_),
  PROTOBUF_FIELD_OFFSET(::differential_privacy::serialization::GaussianMechanism, _impl_.l2_sensitivity_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::differential_privacy::serialization::LaplaceMechanism, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::differential_privacy::serialization::LaplaceMechanism, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::differential_privacy::serialization::LaplaceMechanism, _impl_.epsilon_),
  PROTOBUF_FIELD_OFFSET(::differential_privacy::serialization::LaplaceMechanism, _impl_.l1_sensitivity_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::differential_privacy::serialization::GaussianMechanism)},
  { 12, 20, -1, sizeof(::differential_privacy::serialization::LaplaceMechanism)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::differential_privacy::serialization::_GaussianMechanism_default_instance_._instance,
  &::differential_privacy::serialization::_LaplaceMechanism_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fnumerical_2dmechanism_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037proto/numerical-mechanism.proto\022\"diffe"
  "rential_privacy.serialization\"K\n\021Gaussia"
  "nMechanism\022\017\n\007epsilon\030\001 \001(\001\022\r\n\005delta\030\002 \001"
  "(\001\022\026\n\016l2_sensitivity\030\003 \001(\001\";\n\020LaplaceMec"
  "hanism\022\017\n\007epsilon\030\001 \001(\001\022\026\n\016l1_sensitivit"
  "y\030\002 \001(\001"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fnumerical_2dmechanism_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fnumerical_2dmechanism_2eproto = {
    false, false, 207, descriptor_table_protodef_proto_2fnumerical_2dmechanism_2eproto,
    "proto/numerical-mechanism.proto",
    &descriptor_table_proto_2fnumerical_2dmechanism_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_proto_2fnumerical_2dmechanism_2eproto::offsets,
    file_level_metadata_proto_2fnumerical_2dmechanism_2eproto, file_level_enum_descriptors_proto_2fnumerical_2dmechanism_2eproto,
    file_level_service_descriptors_proto_2fnumerical_2dmechanism_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fnumerical_2dmechanism_2eproto_getter() {
  return &descriptor_table_proto_2fnumerical_2dmechanism_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fnumerical_2dmechanism_2eproto(&descriptor_table_proto_2fnumerical_2dmechanism_2eproto);
namespace differential_privacy {
namespace serialization {

// ===================================================================

class GaussianMechanism::_Internal {
 public:
  using HasBits = decltype(std::declval<GaussianMechanism>()._impl_._has_bits_);
  static void set_has_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_l2_sensitivity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GaussianMechanism::GaussianMechanism(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:differential_privacy.serialization.GaussianMechanism)
}
GaussianMechanism::GaussianMechanism(const GaussianMechanism& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GaussianMechanism* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.epsilon_){}
    , decltype(_impl_.delta_){}
    , decltype(_impl_.l2_sensitivity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.epsilon_, &from._impl_.epsilon_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.l2_sensitivity_) -
    reinterpret_cast<char*>(&_impl_.epsilon_)) + sizeof(_impl_.l2_sensitivity_));
  // @@protoc_insertion_point(copy_constructor:differential_privacy.serialization.GaussianMechanism)
}

inline void GaussianMechanism::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.epsilon_){0}
    , decltype(_impl_.delta_){0}
    , decltype(_impl_.l2_sensitivity_){0}
  };
}

GaussianMechanism::~GaussianMechanism() {
  // @@protoc_insertion_point(destructor:differential_privacy.serialization.GaussianMechanism)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GaussianMechanism::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GaussianMechanism::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GaussianMechanism::Clear() {
// @@protoc_insertion_point(message_clear_start:differential_privacy.serialization.GaussianMechanism)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.epsilon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.l2_sensitivity_) -
        reinterpret_cast<char*>(&_impl_.epsilon_)) + sizeof(_impl_.l2_sensitivity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GaussianMechanism::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double epsilon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_epsilon(&has_bits);
          _impl_.epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_delta(&has_bits);
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l2_sensitivity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_l2_sensitivity(&has_bits);
          _impl_.l2_sensitivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GaussianMechanism::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differential_privacy.serialization.GaussianMechanism)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double epsilon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_epsilon(), target);
  }

  // optional double delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_delta(), target);
  }

  // optional double l2_sensitivity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_l2_sensitivity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differential_privacy.serialization.GaussianMechanism)
  return target;
}

size_t GaussianMechanism::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differential_privacy.serialization.GaussianMechanism)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double epsilon = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double l2_sensitivity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GaussianMechanism::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GaussianMechanism::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GaussianMechanism::GetClassData() const { return &_class_data_; }


void GaussianMechanism::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GaussianMechanism*>(&to_msg);
  auto& from = static_cast<const GaussianMechanism&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:differential_privacy.serialization.GaussianMechanism)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.epsilon_ = from._impl_.epsilon_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.delta_ = from._impl_.delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.l2_sensitivity_ = from._impl_.l2_sensitivity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GaussianMechanism::CopyFrom(const GaussianMechanism& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differential_privacy.serialization.GaussianMechanism)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaussianMechanism::IsInitialized() const {
  return true;
}

void GaussianMechanism::InternalSwap(GaussianMechanism* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GaussianMechanism, _impl_.l2_sensitivity_)
      + sizeof(GaussianMechanism::_impl_.l2_sensitivity_)
      - PROTOBUF_FIELD_OFFSET(GaussianMechanism, _impl_.epsilon_)>(
          reinterpret_cast<char*>(&_impl_.epsilon_),
          reinterpret_cast<char*>(&other->_impl_.epsilon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GaussianMechanism::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fnumerical_2dmechanism_2eproto_getter, &descriptor_table_proto_2fnumerical_2dmechanism_2eproto_once,
      file_level_metadata_proto_2fnumerical_2dmechanism_2eproto[0]);
}

// ===================================================================

class LaplaceMechanism::_Internal {
 public:
  using HasBits = decltype(std::declval<LaplaceMechanism>()._impl_._has_bits_);
  static void set_has_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_l1_sensitivity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LaplaceMechanism::LaplaceMechanism(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:differential_privacy.serialization.LaplaceMechanism)
}
LaplaceMechanism::LaplaceMechanism(const LaplaceMechanism& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaplaceMechanism* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.epsilon_){}
    , decltype(_impl_.l1_sensitivity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.epsilon_, &from._impl_.epsilon_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.l1_sensitivity_) -
    reinterpret_cast<char*>(&_impl_.epsilon_)) + sizeof(_impl_.l1_sensitivity_));
  // @@protoc_insertion_point(copy_constructor:differential_privacy.serialization.LaplaceMechanism)
}

inline void LaplaceMechanism::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.epsilon_){0}
    , decltype(_impl_.l1_sensitivity_){0}
  };
}

LaplaceMechanism::~LaplaceMechanism() {
  // @@protoc_insertion_point(destructor:differential_privacy.serialization.LaplaceMechanism)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaplaceMechanism::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaplaceMechanism::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaplaceMechanism::Clear() {
// @@protoc_insertion_point(message_clear_start:differential_privacy.serialization.LaplaceMechanism)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.epsilon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.l1_sensitivity_) -
        reinterpret_cast<char*>(&_impl_.epsilon_)) + sizeof(_impl_.l1_sensitivity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaplaceMechanism::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double epsilon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_epsilon(&has_bits);
          _impl_.epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l1_sensitivity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_l1_sensitivity(&has_bits);
          _impl_.l1_sensitivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaplaceMechanism::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differential_privacy.serialization.LaplaceMechanism)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double epsilon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_epsilon(), target);
  }

  // optional double l1_sensitivity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_l1_sensitivity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differential_privacy.serialization.LaplaceMechanism)
  return target;
}

size_t LaplaceMechanism::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differential_privacy.serialization.LaplaceMechanism)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double epsilon = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double l1_sensitivity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaplaceMechanism::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaplaceMechanism::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaplaceMechanism::GetClassData() const { return &_class_data_; }


void LaplaceMechanism::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaplaceMechanism*>(&to_msg);
  auto& from = static_cast<const LaplaceMechanism&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:differential_privacy.serialization.LaplaceMechanism)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.epsilon_ = from._impl_.epsilon_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.l1_sensitivity_ = from._impl_.l1_sensitivity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaplaceMechanism::CopyFrom(const LaplaceMechanism& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differential_privacy.serialization.LaplaceMechanism)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaplaceMechanism::IsInitialized() const {
  return true;
}

void LaplaceMechanism::InternalSwap(LaplaceMechanism* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaplaceMechanism, _impl_.l1_sensitivity_)
      + sizeof(LaplaceMechanism::_impl_.l1_sensitivity_)
      - PROTOBUF_FIELD_OFFSET(LaplaceMechanism, _impl_.epsilon_)>(
          reinterpret_cast<char*>(&_impl_.epsilon_),
          reinterpret_cast<char*>(&other->_impl_.epsilon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaplaceMechanism::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fnumerical_2dmechanism_2eproto_getter, &descriptor_table_proto_2fnumerical_2dmechanism_2eproto_once,
      file_level_metadata_proto_2fnumerical_2dmechanism_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serialization
}  // namespace differential_privacy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::differential_privacy::serialization::GaussianMechanism*
Arena::CreateMaybeMessage< ::differential_privacy::serialization::GaussianMechanism >(Arena* arena) {
  return Arena::CreateMessageInternal< ::differential_privacy::serialization::GaussianMechanism >(arena);
}
template<> PROTOBUF_NOINLINE ::differential_privacy::serialization::LaplaceMechanism*
Arena::CreateMaybeMessage< ::differential_privacy::serialization::LaplaceMechanism >(Arena* arena) {
  return Arena::CreateMessageInternal< ::differential_privacy::serialization::LaplaceMechanism >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
