// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/numerical-mechanism.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fnumerical_2dmechanism_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fnumerical_2dmechanism_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fnumerical_2dmechanism_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fnumerical_2dmechanism_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fnumerical_2dmechanism_2eproto;
namespace differential_privacy {
namespace serialization {
class GaussianMechanism;
struct GaussianMechanismDefaultTypeInternal;
extern GaussianMechanismDefaultTypeInternal _GaussianMechanism_default_instance_;
class LaplaceMechanism;
struct LaplaceMechanismDefaultTypeInternal;
extern LaplaceMechanismDefaultTypeInternal _LaplaceMechanism_default_instance_;
}  // namespace serialization
}  // namespace differential_privacy
PROTOBUF_NAMESPACE_OPEN
template<> ::differential_privacy::serialization::GaussianMechanism* Arena::CreateMaybeMessage<::differential_privacy::serialization::GaussianMechanism>(Arena*);
template<> ::differential_privacy::serialization::LaplaceMechanism* Arena::CreateMaybeMessage<::differential_privacy::serialization::LaplaceMechanism>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace differential_privacy {
namespace serialization {

// ===================================================================

class GaussianMechanism final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differential_privacy.serialization.GaussianMechanism) */ {
 public:
  inline GaussianMechanism() : GaussianMechanism(nullptr) {}
  ~GaussianMechanism() override;
  explicit PROTOBUF_CONSTEXPR GaussianMechanism(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GaussianMechanism(const GaussianMechanism& from);
  GaussianMechanism(GaussianMechanism&& from) noexcept
    : GaussianMechanism() {
    *this = ::std::move(from);
  }

  inline GaussianMechanism& operator=(const GaussianMechanism& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaussianMechanism& operator=(GaussianMechanism&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GaussianMechanism& default_instance() {
    return *internal_default_instance();
  }
  static inline const GaussianMechanism* internal_default_instance() {
    return reinterpret_cast<const GaussianMechanism*>(
               &_GaussianMechanism_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GaussianMechanism& a, GaussianMechanism& b) {
    a.Swap(&b);
  }
  inline void Swap(GaussianMechanism* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GaussianMechanism* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GaussianMechanism* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GaussianMechanism>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GaussianMechanism& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GaussianMechanism& from) {
    GaussianMechanism::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GaussianMechanism* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differential_privacy.serialization.GaussianMechanism";
  }
  protected:
  explicit GaussianMechanism(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpsilonFieldNumber = 1,
    kDeltaFieldNumber = 2,
    kL2SensitivityFieldNumber = 3,
  };
  // optional double epsilon = 1;
  bool has_epsilon() const;
  private:
  bool _internal_has_epsilon() const;
  public:
  void clear_epsilon();
  double epsilon() const;
  void set_epsilon(double value);
  private:
  double _internal_epsilon() const;
  void _internal_set_epsilon(double value);
  public:

  // optional double delta = 2;
  bool has_delta() const;
  private:
  bool _internal_has_delta() const;
  public:
  void clear_delta();
  double delta() const;
  void set_delta(double value);
  private:
  double _internal_delta() const;
  void _internal_set_delta(double value);
  public:

  // optional double l2_sensitivity = 3;
  bool has_l2_sensitivity() const;
  private:
  bool _internal_has_l2_sensitivity() const;
  public:
  void clear_l2_sensitivity();
  double l2_sensitivity() const;
  void set_l2_sensitivity(double value);
  private:
  double _internal_l2_sensitivity() const;
  void _internal_set_l2_sensitivity(double value);
  public:

  // @@protoc_insertion_point(class_scope:differential_privacy.serialization.GaussianMechanism)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double epsilon_;
    double delta_;
    double l2_sensitivity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fnumerical_2dmechanism_2eproto;
};
// -------------------------------------------------------------------

class LaplaceMechanism final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differential_privacy.serialization.LaplaceMechanism) */ {
 public:
  inline LaplaceMechanism() : LaplaceMechanism(nullptr) {}
  ~LaplaceMechanism() override;
  explicit PROTOBUF_CONSTEXPR LaplaceMechanism(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaplaceMechanism(const LaplaceMechanism& from);
  LaplaceMechanism(LaplaceMechanism&& from) noexcept
    : LaplaceMechanism() {
    *this = ::std::move(from);
  }

  inline LaplaceMechanism& operator=(const LaplaceMechanism& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaplaceMechanism& operator=(LaplaceMechanism&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaplaceMechanism& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaplaceMechanism* internal_default_instance() {
    return reinterpret_cast<const LaplaceMechanism*>(
               &_LaplaceMechanism_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaplaceMechanism& a, LaplaceMechanism& b) {
    a.Swap(&b);
  }
  inline void Swap(LaplaceMechanism* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaplaceMechanism* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaplaceMechanism* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaplaceMechanism>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaplaceMechanism& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LaplaceMechanism& from) {
    LaplaceMechanism::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaplaceMechanism* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differential_privacy.serialization.LaplaceMechanism";
  }
  protected:
  explicit LaplaceMechanism(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpsilonFieldNumber = 1,
    kL1SensitivityFieldNumber = 2,
  };
  // optional double epsilon = 1;
  bool has_epsilon() const;
  private:
  bool _internal_has_epsilon() const;
  public:
  void clear_epsilon();
  double epsilon() const;
  void set_epsilon(double value);
  private:
  double _internal_epsilon() const;
  void _internal_set_epsilon(double value);
  public:

  // optional double l1_sensitivity = 2;
  bool has_l1_sensitivity() const;
  private:
  bool _internal_has_l1_sensitivity() const;
  public:
  void clear_l1_sensitivity();
  double l1_sensitivity() const;
  void set_l1_sensitivity(double value);
  private:
  double _internal_l1_sensitivity() const;
  void _internal_set_l1_sensitivity(double value);
  public:

  // @@protoc_insertion_point(class_scope:differential_privacy.serialization.LaplaceMechanism)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double epsilon_;
    double l1_sensitivity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fnumerical_2dmechanism_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GaussianMechanism

// optional double epsilon = 1;
inline bool GaussianMechanism::_internal_has_epsilon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GaussianMechanism::has_epsilon() const {
  return _internal_has_epsilon();
}
inline void GaussianMechanism::clear_epsilon() {
  _impl_.epsilon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double GaussianMechanism::_internal_epsilon() const {
  return _impl_.epsilon_;
}
inline double GaussianMechanism::epsilon() const {
  // @@protoc_insertion_point(field_get:differential_privacy.serialization.GaussianMechanism.epsilon)
  return _internal_epsilon();
}
inline void GaussianMechanism::_internal_set_epsilon(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.epsilon_ = value;
}
inline void GaussianMechanism::set_epsilon(double value) {
  _internal_set_epsilon(value);
  // @@protoc_insertion_point(field_set:differential_privacy.serialization.GaussianMechanism.epsilon)
}

// optional double delta = 2;
inline bool GaussianMechanism::_internal_has_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GaussianMechanism::has_delta() const {
  return _internal_has_delta();
}
inline void GaussianMechanism::clear_delta() {
  _impl_.delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double GaussianMechanism::_internal_delta() const {
  return _impl_.delta_;
}
inline double GaussianMechanism::delta() const {
  // @@protoc_insertion_point(field_get:differential_privacy.serialization.GaussianMechanism.delta)
  return _internal_delta();
}
inline void GaussianMechanism::_internal_set_delta(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.delta_ = value;
}
inline void GaussianMechanism::set_delta(double value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:differential_privacy.serialization.GaussianMechanism.delta)
}

// optional double l2_sensitivity = 3;
inline bool GaussianMechanism::_internal_has_l2_sensitivity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GaussianMechanism::has_l2_sensitivity() const {
  return _internal_has_l2_sensitivity();
}
inline void GaussianMechanism::clear_l2_sensitivity() {
  _impl_.l2_sensitivity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double GaussianMechanism::_internal_l2_sensitivity() const {
  return _impl_.l2_sensitivity_;
}
inline double GaussianMechanism::l2_sensitivity() const {
  // @@protoc_insertion_point(field_get:differential_privacy.serialization.GaussianMechanism.l2_sensitivity)
  return _internal_l2_sensitivity();
}
inline void GaussianMechanism::_internal_set_l2_sensitivity(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.l2_sensitivity_ = value;
}
inline void GaussianMechanism::set_l2_sensitivity(double value) {
  _internal_set_l2_sensitivity(value);
  // @@protoc_insertion_point(field_set:differential_privacy.serialization.GaussianMechanism.l2_sensitivity)
}

// -------------------------------------------------------------------

// LaplaceMechanism

// optional double epsilon = 1;
inline bool LaplaceMechanism::_internal_has_epsilon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaplaceMechanism::has_epsilon() const {
  return _internal_has_epsilon();
}
inline void LaplaceMechanism::clear_epsilon() {
  _impl_.epsilon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LaplaceMechanism::_internal_epsilon() const {
  return _impl_.epsilon_;
}
inline double LaplaceMechanism::epsilon() const {
  // @@protoc_insertion_point(field_get:differential_privacy.serialization.LaplaceMechanism.epsilon)
  return _internal_epsilon();
}
inline void LaplaceMechanism::_internal_set_epsilon(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.epsilon_ = value;
}
inline void LaplaceMechanism::set_epsilon(double value) {
  _internal_set_epsilon(value);
  // @@protoc_insertion_point(field_set:differential_privacy.serialization.LaplaceMechanism.epsilon)
}

// optional double l1_sensitivity = 2;
inline bool LaplaceMechanism::_internal_has_l1_sensitivity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaplaceMechanism::has_l1_sensitivity() const {
  return _internal_has_l1_sensitivity();
}
inline void LaplaceMechanism::clear_l1_sensitivity() {
  _impl_.l1_sensitivity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LaplaceMechanism::_internal_l1_sensitivity() const {
  return _impl_.l1_sensitivity_;
}
inline double LaplaceMechanism::l1_sensitivity() const {
  // @@protoc_insertion_point(field_get:differential_privacy.serialization.LaplaceMechanism.l1_sensitivity)
  return _internal_l1_sensitivity();
}
inline void LaplaceMechanism::_internal_set_l1_sensitivity(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.l1_sensitivity_ = value;
}
inline void LaplaceMechanism::set_l1_sensitivity(double value) {
  _internal_set_l1_sensitivity(value);
  // @@protoc_insertion_point(field_set:differential_privacy.serialization.LaplaceMechanism.l1_sensitivity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialization
}  // namespace differential_privacy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fnumerical_2dmechanism_2eproto
