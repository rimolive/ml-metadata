// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ml_metadata/proto/metadata_store_service.proto

#include "ml_metadata/proto/metadata_store_service.pb.h"
#include "ml_metadata/proto/metadata_store_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ml_metadata {

static const char* MetadataStoreService_method_names[] = {
  "/ml_metadata.MetadataStoreService/PutArtifactType",
  "/ml_metadata.MetadataStoreService/PutExecutionType",
  "/ml_metadata.MetadataStoreService/PutContextType",
  "/ml_metadata.MetadataStoreService/PutTypes",
  "/ml_metadata.MetadataStoreService/PutArtifacts",
  "/ml_metadata.MetadataStoreService/PutExecutions",
  "/ml_metadata.MetadataStoreService/PutEvents",
  "/ml_metadata.MetadataStoreService/PutExecution",
  "/ml_metadata.MetadataStoreService/PutLineageSubgraph",
  "/ml_metadata.MetadataStoreService/PutContexts",
  "/ml_metadata.MetadataStoreService/PutAttributionsAndAssociations",
  "/ml_metadata.MetadataStoreService/PutParentContexts",
  "/ml_metadata.MetadataStoreService/GetArtifactType",
  "/ml_metadata.MetadataStoreService/GetArtifactTypesByID",
  "/ml_metadata.MetadataStoreService/GetArtifactTypes",
  "/ml_metadata.MetadataStoreService/GetExecutionType",
  "/ml_metadata.MetadataStoreService/GetExecutionTypesByID",
  "/ml_metadata.MetadataStoreService/GetExecutionTypes",
  "/ml_metadata.MetadataStoreService/GetContextType",
  "/ml_metadata.MetadataStoreService/GetContextTypesByID",
  "/ml_metadata.MetadataStoreService/GetContextTypes",
  "/ml_metadata.MetadataStoreService/GetArtifacts",
  "/ml_metadata.MetadataStoreService/GetExecutions",
  "/ml_metadata.MetadataStoreService/GetContexts",
  "/ml_metadata.MetadataStoreService/GetArtifactsByID",
  "/ml_metadata.MetadataStoreService/GetExecutionsByID",
  "/ml_metadata.MetadataStoreService/GetContextsByID",
  "/ml_metadata.MetadataStoreService/GetArtifactsByType",
  "/ml_metadata.MetadataStoreService/GetExecutionsByType",
  "/ml_metadata.MetadataStoreService/GetContextsByType",
  "/ml_metadata.MetadataStoreService/GetArtifactByTypeAndName",
  "/ml_metadata.MetadataStoreService/GetExecutionByTypeAndName",
  "/ml_metadata.MetadataStoreService/GetContextByTypeAndName",
  "/ml_metadata.MetadataStoreService/GetArtifactsByURI",
  "/ml_metadata.MetadataStoreService/GetEventsByExecutionIDs",
  "/ml_metadata.MetadataStoreService/GetEventsByArtifactIDs",
  "/ml_metadata.MetadataStoreService/GetArtifactsByExternalIds",
  "/ml_metadata.MetadataStoreService/GetExecutionsByExternalIds",
  "/ml_metadata.MetadataStoreService/GetContextsByExternalIds",
  "/ml_metadata.MetadataStoreService/GetArtifactTypesByExternalIds",
  "/ml_metadata.MetadataStoreService/GetExecutionTypesByExternalIds",
  "/ml_metadata.MetadataStoreService/GetContextTypesByExternalIds",
  "/ml_metadata.MetadataStoreService/GetContextsByArtifact",
  "/ml_metadata.MetadataStoreService/GetContextsByExecution",
  "/ml_metadata.MetadataStoreService/GetParentContextsByContext",
  "/ml_metadata.MetadataStoreService/GetChildrenContextsByContext",
  "/ml_metadata.MetadataStoreService/GetParentContextsByContexts",
  "/ml_metadata.MetadataStoreService/GetChildrenContextsByContexts",
  "/ml_metadata.MetadataStoreService/GetArtifactsByContext",
  "/ml_metadata.MetadataStoreService/GetExecutionsByContext",
  "/ml_metadata.MetadataStoreService/GetLineageGraph",
  "/ml_metadata.MetadataStoreService/GetLineageSubgraph",
};

std::unique_ptr< MetadataStoreService::Stub> MetadataStoreService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MetadataStoreService::Stub> stub(new MetadataStoreService::Stub(channel, options));
  return stub;
}

MetadataStoreService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PutArtifactType_(MetadataStoreService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutExecutionType_(MetadataStoreService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutContextType_(MetadataStoreService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutTypes_(MetadataStoreService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutArtifacts_(MetadataStoreService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutExecutions_(MetadataStoreService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutEvents_(MetadataStoreService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutExecution_(MetadataStoreService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutLineageSubgraph_(MetadataStoreService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutContexts_(MetadataStoreService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutAttributionsAndAssociations_(MetadataStoreService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutParentContexts_(MetadataStoreService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactType_(MetadataStoreService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactTypesByID_(MetadataStoreService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactTypes_(MetadataStoreService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionType_(MetadataStoreService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionTypesByID_(MetadataStoreService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionTypes_(MetadataStoreService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextType_(MetadataStoreService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextTypesByID_(MetadataStoreService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextTypes_(MetadataStoreService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifacts_(MetadataStoreService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutions_(MetadataStoreService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContexts_(MetadataStoreService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactsByID_(MetadataStoreService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionsByID_(MetadataStoreService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextsByID_(MetadataStoreService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactsByType_(MetadataStoreService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionsByType_(MetadataStoreService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextsByType_(MetadataStoreService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactByTypeAndName_(MetadataStoreService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionByTypeAndName_(MetadataStoreService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextByTypeAndName_(MetadataStoreService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactsByURI_(MetadataStoreService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEventsByExecutionIDs_(MetadataStoreService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEventsByArtifactIDs_(MetadataStoreService_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactsByExternalIds_(MetadataStoreService_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionsByExternalIds_(MetadataStoreService_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextsByExternalIds_(MetadataStoreService_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactTypesByExternalIds_(MetadataStoreService_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionTypesByExternalIds_(MetadataStoreService_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextTypesByExternalIds_(MetadataStoreService_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextsByArtifact_(MetadataStoreService_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContextsByExecution_(MetadataStoreService_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetParentContextsByContext_(MetadataStoreService_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChildrenContextsByContext_(MetadataStoreService_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetParentContextsByContexts_(MetadataStoreService_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChildrenContextsByContexts_(MetadataStoreService_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetArtifactsByContext_(MetadataStoreService_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionsByContext_(MetadataStoreService_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLineageGraph_(MetadataStoreService_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLineageSubgraph_(MetadataStoreService_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MetadataStoreService::Stub::PutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::ml_metadata::PutArtifactTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutArtifactTypeRequest, ::ml_metadata::PutArtifactTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutArtifactType_, context, request, response);
}

void MetadataStoreService::Stub::async::PutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest* request, ::ml_metadata::PutArtifactTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutArtifactTypeRequest, ::ml_metadata::PutArtifactTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutArtifactType_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest* request, ::ml_metadata::PutArtifactTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutArtifactType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactTypeResponse>* MetadataStoreService::Stub::PrepareAsyncPutArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutArtifactTypeResponse, ::ml_metadata::PutArtifactTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutArtifactType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactTypeResponse>* MetadataStoreService::Stub::AsyncPutArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutArtifactTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::ml_metadata::PutExecutionTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutExecutionTypeRequest, ::ml_metadata::PutExecutionTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutExecutionType_, context, request, response);
}

void MetadataStoreService::Stub::async::PutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest* request, ::ml_metadata::PutExecutionTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutExecutionTypeRequest, ::ml_metadata::PutExecutionTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutExecutionType_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest* request, ::ml_metadata::PutExecutionTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutExecutionType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionTypeResponse>* MetadataStoreService::Stub::PrepareAsyncPutExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutExecutionTypeResponse, ::ml_metadata::PutExecutionTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutExecutionType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionTypeResponse>* MetadataStoreService::Stub::AsyncPutExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutExecutionTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::ml_metadata::PutContextTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutContextTypeRequest, ::ml_metadata::PutContextTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutContextType_, context, request, response);
}

void MetadataStoreService::Stub::async::PutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest* request, ::ml_metadata::PutContextTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutContextTypeRequest, ::ml_metadata::PutContextTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutContextType_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest* request, ::ml_metadata::PutContextTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutContextType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextTypeResponse>* MetadataStoreService::Stub::PrepareAsyncPutContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutContextTypeResponse, ::ml_metadata::PutContextTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutContextType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextTypeResponse>* MetadataStoreService::Stub::AsyncPutContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutContextTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::ml_metadata::PutTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutTypesRequest, ::ml_metadata::PutTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutTypes_, context, request, response);
}

void MetadataStoreService::Stub::async::PutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest* request, ::ml_metadata::PutTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutTypesRequest, ::ml_metadata::PutTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutTypes_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest* request, ::ml_metadata::PutTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutTypesResponse>* MetadataStoreService::Stub::PrepareAsyncPutTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutTypesResponse, ::ml_metadata::PutTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutTypesResponse>* MetadataStoreService::Stub::AsyncPutTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::ml_metadata::PutArtifactsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutArtifactsRequest, ::ml_metadata::PutArtifactsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutArtifacts_, context, request, response);
}

void MetadataStoreService::Stub::async::PutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest* request, ::ml_metadata::PutArtifactsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutArtifactsRequest, ::ml_metadata::PutArtifactsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutArtifacts_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest* request, ::ml_metadata::PutArtifactsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutArtifacts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactsResponse>* MetadataStoreService::Stub::PrepareAsyncPutArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutArtifactsResponse, ::ml_metadata::PutArtifactsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutArtifacts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactsResponse>* MetadataStoreService::Stub::AsyncPutArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutArtifactsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::ml_metadata::PutExecutionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutExecutionsRequest, ::ml_metadata::PutExecutionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutExecutions_, context, request, response);
}

void MetadataStoreService::Stub::async::PutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest* request, ::ml_metadata::PutExecutionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutExecutionsRequest, ::ml_metadata::PutExecutionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutExecutions_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest* request, ::ml_metadata::PutExecutionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutExecutions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionsResponse>* MetadataStoreService::Stub::PrepareAsyncPutExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutExecutionsResponse, ::ml_metadata::PutExecutionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutExecutions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionsResponse>* MetadataStoreService::Stub::AsyncPutExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutExecutionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::ml_metadata::PutEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutEventsRequest, ::ml_metadata::PutEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutEvents_, context, request, response);
}

void MetadataStoreService::Stub::async::PutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest* request, ::ml_metadata::PutEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutEventsRequest, ::ml_metadata::PutEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutEvents_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest* request, ::ml_metadata::PutEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutEventsResponse>* MetadataStoreService::Stub::PrepareAsyncPutEventsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutEventsResponse, ::ml_metadata::PutEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutEventsResponse>* MetadataStoreService::Stub::AsyncPutEventsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::ml_metadata::PutExecutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutExecutionRequest, ::ml_metadata::PutExecutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutExecution_, context, request, response);
}

void MetadataStoreService::Stub::async::PutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest* request, ::ml_metadata::PutExecutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutExecutionRequest, ::ml_metadata::PutExecutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutExecution_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest* request, ::ml_metadata::PutExecutionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionResponse>* MetadataStoreService::Stub::PrepareAsyncPutExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutExecutionResponse, ::ml_metadata::PutExecutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutExecution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionResponse>* MetadataStoreService::Stub::AsyncPutExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutExecutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::ml_metadata::PutLineageSubgraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutLineageSubgraphRequest, ::ml_metadata::PutLineageSubgraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutLineageSubgraph_, context, request, response);
}

void MetadataStoreService::Stub::async::PutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest* request, ::ml_metadata::PutLineageSubgraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutLineageSubgraphRequest, ::ml_metadata::PutLineageSubgraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutLineageSubgraph_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest* request, ::ml_metadata::PutLineageSubgraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutLineageSubgraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutLineageSubgraphResponse>* MetadataStoreService::Stub::PrepareAsyncPutLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutLineageSubgraphResponse, ::ml_metadata::PutLineageSubgraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutLineageSubgraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutLineageSubgraphResponse>* MetadataStoreService::Stub::AsyncPutLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutLineageSubgraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::ml_metadata::PutContextsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutContextsRequest, ::ml_metadata::PutContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutContexts_, context, request, response);
}

void MetadataStoreService::Stub::async::PutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest* request, ::ml_metadata::PutContextsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutContextsRequest, ::ml_metadata::PutContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutContexts_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest* request, ::ml_metadata::PutContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutContexts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextsResponse>* MetadataStoreService::Stub::PrepareAsyncPutContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutContextsResponse, ::ml_metadata::PutContextsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutContexts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextsResponse>* MetadataStoreService::Stub::AsyncPutContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutContextsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutAttributionsAndAssociationsRequest, ::ml_metadata::PutAttributionsAndAssociationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutAttributionsAndAssociations_, context, request, response);
}

void MetadataStoreService::Stub::async::PutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutAttributionsAndAssociationsRequest, ::ml_metadata::PutAttributionsAndAssociationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutAttributionsAndAssociations_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutAttributionsAndAssociations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutAttributionsAndAssociationsResponse>* MetadataStoreService::Stub::PrepareAsyncPutAttributionsAndAssociationsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutAttributionsAndAssociationsResponse, ::ml_metadata::PutAttributionsAndAssociationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutAttributionsAndAssociations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutAttributionsAndAssociationsResponse>* MetadataStoreService::Stub::AsyncPutAttributionsAndAssociationsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutAttributionsAndAssociationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::PutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::ml_metadata::PutParentContextsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::PutParentContextsRequest, ::ml_metadata::PutParentContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutParentContexts_, context, request, response);
}

void MetadataStoreService::Stub::async::PutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest* request, ::ml_metadata::PutParentContextsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::PutParentContextsRequest, ::ml_metadata::PutParentContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutParentContexts_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::PutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest* request, ::ml_metadata::PutParentContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutParentContexts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutParentContextsResponse>* MetadataStoreService::Stub::PrepareAsyncPutParentContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::PutParentContextsResponse, ::ml_metadata::PutParentContextsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutParentContexts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::PutParentContextsResponse>* MetadataStoreService::Stub::AsyncPutParentContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutParentContextsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::ml_metadata::GetArtifactTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactTypeRequest, ::ml_metadata::GetArtifactTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactType_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest* request, ::ml_metadata::GetArtifactTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactTypeRequest, ::ml_metadata::GetArtifactTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactType_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest* request, ::ml_metadata::GetArtifactTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypeResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactTypeResponse, ::ml_metadata::GetArtifactTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypeResponse>* MetadataStoreService::Stub::AsyncGetArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::ml_metadata::GetArtifactTypesByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactTypesByIDRequest, ::ml_metadata::GetArtifactTypesByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactTypesByID_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest* request, ::ml_metadata::GetArtifactTypesByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactTypesByIDRequest, ::ml_metadata::GetArtifactTypesByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactTypesByID_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest* request, ::ml_metadata::GetArtifactTypesByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactTypesByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByIDResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactTypesByIDResponse, ::ml_metadata::GetArtifactTypesByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactTypesByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByIDResponse>* MetadataStoreService::Stub::AsyncGetArtifactTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactTypesByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::ml_metadata::GetArtifactTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactTypesRequest, ::ml_metadata::GetArtifactTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactTypes_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest* request, ::ml_metadata::GetArtifactTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactTypesRequest, ::ml_metadata::GetArtifactTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactTypes_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest* request, ::ml_metadata::GetArtifactTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactTypesResponse, ::ml_metadata::GetArtifactTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesResponse>* MetadataStoreService::Stub::AsyncGetArtifactTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::ml_metadata::GetExecutionTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionTypeRequest, ::ml_metadata::GetExecutionTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionType_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest* request, ::ml_metadata::GetExecutionTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionTypeRequest, ::ml_metadata::GetExecutionTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionType_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest* request, ::ml_metadata::GetExecutionTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypeResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionTypeResponse, ::ml_metadata::GetExecutionTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypeResponse>* MetadataStoreService::Stub::AsyncGetExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::ml_metadata::GetExecutionTypesByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionTypesByIDRequest, ::ml_metadata::GetExecutionTypesByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionTypesByID_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest* request, ::ml_metadata::GetExecutionTypesByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionTypesByIDRequest, ::ml_metadata::GetExecutionTypesByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionTypesByID_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest* request, ::ml_metadata::GetExecutionTypesByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionTypesByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByIDResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionTypesByIDResponse, ::ml_metadata::GetExecutionTypesByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionTypesByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByIDResponse>* MetadataStoreService::Stub::AsyncGetExecutionTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionTypesByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::ml_metadata::GetExecutionTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionTypesRequest, ::ml_metadata::GetExecutionTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionTypes_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest* request, ::ml_metadata::GetExecutionTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionTypesRequest, ::ml_metadata::GetExecutionTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionTypes_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest* request, ::ml_metadata::GetExecutionTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionTypesResponse, ::ml_metadata::GetExecutionTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesResponse>* MetadataStoreService::Stub::AsyncGetExecutionTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::ml_metadata::GetContextTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextTypeRequest, ::ml_metadata::GetContextTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextType_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest* request, ::ml_metadata::GetContextTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextTypeRequest, ::ml_metadata::GetContextTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextType_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest* request, ::ml_metadata::GetContextTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypeResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextTypeResponse, ::ml_metadata::GetContextTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypeResponse>* MetadataStoreService::Stub::AsyncGetContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::ml_metadata::GetContextTypesByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextTypesByIDRequest, ::ml_metadata::GetContextTypesByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextTypesByID_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest* request, ::ml_metadata::GetContextTypesByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextTypesByIDRequest, ::ml_metadata::GetContextTypesByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextTypesByID_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest* request, ::ml_metadata::GetContextTypesByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextTypesByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByIDResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextTypesByIDResponse, ::ml_metadata::GetContextTypesByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextTypesByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByIDResponse>* MetadataStoreService::Stub::AsyncGetContextTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextTypesByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::ml_metadata::GetContextTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextTypesRequest, ::ml_metadata::GetContextTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextTypes_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest* request, ::ml_metadata::GetContextTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextTypesRequest, ::ml_metadata::GetContextTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextTypes_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest* request, ::ml_metadata::GetContextTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextTypesResponse, ::ml_metadata::GetContextTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesResponse>* MetadataStoreService::Stub::AsyncGetContextTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::ml_metadata::GetArtifactsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactsRequest, ::ml_metadata::GetArtifactsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifacts_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest* request, ::ml_metadata::GetArtifactsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactsRequest, ::ml_metadata::GetArtifactsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifacts_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest* request, ::ml_metadata::GetArtifactsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifacts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactsResponse, ::ml_metadata::GetArtifactsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifacts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsResponse>* MetadataStoreService::Stub::AsyncGetArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::ml_metadata::GetExecutionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionsRequest, ::ml_metadata::GetExecutionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutions_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest* request, ::ml_metadata::GetExecutionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionsRequest, ::ml_metadata::GetExecutionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutions_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest* request, ::ml_metadata::GetExecutionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionsResponse, ::ml_metadata::GetExecutionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsResponse>* MetadataStoreService::Stub::AsyncGetExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::ml_metadata::GetContextsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextsRequest, ::ml_metadata::GetContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContexts_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest* request, ::ml_metadata::GetContextsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextsRequest, ::ml_metadata::GetContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContexts_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest* request, ::ml_metadata::GetContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContexts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextsResponse, ::ml_metadata::GetContextsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContexts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsResponse>* MetadataStoreService::Stub::AsyncGetContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::ml_metadata::GetArtifactsByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactsByIDRequest, ::ml_metadata::GetArtifactsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactsByID_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest* request, ::ml_metadata::GetArtifactsByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactsByIDRequest, ::ml_metadata::GetArtifactsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByID_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest* request, ::ml_metadata::GetArtifactsByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByIDResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactsByIDResponse, ::ml_metadata::GetArtifactsByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactsByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByIDResponse>* MetadataStoreService::Stub::AsyncGetArtifactsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactsByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::ml_metadata::GetExecutionsByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionsByIDRequest, ::ml_metadata::GetExecutionsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionsByID_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest* request, ::ml_metadata::GetExecutionsByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionsByIDRequest, ::ml_metadata::GetExecutionsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionsByID_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest* request, ::ml_metadata::GetExecutionsByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionsByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByIDResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionsByIDResponse, ::ml_metadata::GetExecutionsByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionsByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByIDResponse>* MetadataStoreService::Stub::AsyncGetExecutionsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionsByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::ml_metadata::GetContextsByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextsByIDRequest, ::ml_metadata::GetContextsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextsByID_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest* request, ::ml_metadata::GetContextsByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextsByIDRequest, ::ml_metadata::GetContextsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByID_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest* request, ::ml_metadata::GetContextsByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByIDResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextsByIDResponse, ::ml_metadata::GetContextsByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextsByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByIDResponse>* MetadataStoreService::Stub::AsyncGetContextsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextsByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::ml_metadata::GetArtifactsByTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactsByTypeRequest, ::ml_metadata::GetArtifactsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactsByType_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest* request, ::ml_metadata::GetArtifactsByTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactsByTypeRequest, ::ml_metadata::GetArtifactsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByType_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest* request, ::ml_metadata::GetArtifactsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByTypeResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactsByTypeResponse, ::ml_metadata::GetArtifactsByTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactsByType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByTypeResponse>* MetadataStoreService::Stub::AsyncGetArtifactsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactsByTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::ml_metadata::GetExecutionsByTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionsByTypeRequest, ::ml_metadata::GetExecutionsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionsByType_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest* request, ::ml_metadata::GetExecutionsByTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionsByTypeRequest, ::ml_metadata::GetExecutionsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionsByType_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest* request, ::ml_metadata::GetExecutionsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionsByType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByTypeResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionsByTypeResponse, ::ml_metadata::GetExecutionsByTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionsByType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByTypeResponse>* MetadataStoreService::Stub::AsyncGetExecutionsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionsByTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::ml_metadata::GetContextsByTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextsByTypeRequest, ::ml_metadata::GetContextsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextsByType_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest* request, ::ml_metadata::GetContextsByTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextsByTypeRequest, ::ml_metadata::GetContextsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByType_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest* request, ::ml_metadata::GetContextsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByTypeResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextsByTypeResponse, ::ml_metadata::GetContextsByTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextsByType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByTypeResponse>* MetadataStoreService::Stub::AsyncGetContextsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextsByTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactByTypeAndNameRequest, ::ml_metadata::GetArtifactByTypeAndNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactByTypeAndName_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactByTypeAndNameRequest, ::ml_metadata::GetArtifactByTypeAndNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactByTypeAndName_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactByTypeAndName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactByTypeAndNameResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactByTypeAndNameResponse, ::ml_metadata::GetArtifactByTypeAndNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactByTypeAndName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactByTypeAndNameResponse>* MetadataStoreService::Stub::AsyncGetArtifactByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactByTypeAndNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionByTypeAndNameRequest, ::ml_metadata::GetExecutionByTypeAndNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionByTypeAndName_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionByTypeAndNameRequest, ::ml_metadata::GetExecutionByTypeAndNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionByTypeAndName_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionByTypeAndName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionByTypeAndNameResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionByTypeAndNameResponse, ::ml_metadata::GetExecutionByTypeAndNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionByTypeAndName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionByTypeAndNameResponse>* MetadataStoreService::Stub::AsyncGetExecutionByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionByTypeAndNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::ml_metadata::GetContextByTypeAndNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextByTypeAndNameRequest, ::ml_metadata::GetContextByTypeAndNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextByTypeAndName_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest* request, ::ml_metadata::GetContextByTypeAndNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextByTypeAndNameRequest, ::ml_metadata::GetContextByTypeAndNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextByTypeAndName_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest* request, ::ml_metadata::GetContextByTypeAndNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextByTypeAndName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextByTypeAndNameResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextByTypeAndNameResponse, ::ml_metadata::GetContextByTypeAndNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextByTypeAndName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextByTypeAndNameResponse>* MetadataStoreService::Stub::AsyncGetContextByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextByTypeAndNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::ml_metadata::GetArtifactsByURIResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactsByURIRequest, ::ml_metadata::GetArtifactsByURIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactsByURI_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest* request, ::ml_metadata::GetArtifactsByURIResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactsByURIRequest, ::ml_metadata::GetArtifactsByURIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByURI_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest* request, ::ml_metadata::GetArtifactsByURIResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByURI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByURIResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactsByURIRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactsByURIResponse, ::ml_metadata::GetArtifactsByURIRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactsByURI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByURIResponse>* MetadataStoreService::Stub::AsyncGetArtifactsByURIRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactsByURIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::ml_metadata::GetEventsByExecutionIDsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetEventsByExecutionIDsRequest, ::ml_metadata::GetEventsByExecutionIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEventsByExecutionIDs_, context, request, response);
}

void MetadataStoreService::Stub::async::GetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::ml_metadata::GetEventsByExecutionIDsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetEventsByExecutionIDsRequest, ::ml_metadata::GetEventsByExecutionIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsByExecutionIDs_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::ml_metadata::GetEventsByExecutionIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsByExecutionIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByExecutionIDsResponse>* MetadataStoreService::Stub::PrepareAsyncGetEventsByExecutionIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetEventsByExecutionIDsResponse, ::ml_metadata::GetEventsByExecutionIDsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEventsByExecutionIDs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByExecutionIDsResponse>* MetadataStoreService::Stub::AsyncGetEventsByExecutionIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventsByExecutionIDsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::ml_metadata::GetEventsByArtifactIDsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetEventsByArtifactIDsRequest, ::ml_metadata::GetEventsByArtifactIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEventsByArtifactIDs_, context, request, response);
}

void MetadataStoreService::Stub::async::GetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::ml_metadata::GetEventsByArtifactIDsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetEventsByArtifactIDsRequest, ::ml_metadata::GetEventsByArtifactIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsByArtifactIDs_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::ml_metadata::GetEventsByArtifactIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventsByArtifactIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByArtifactIDsResponse>* MetadataStoreService::Stub::PrepareAsyncGetEventsByArtifactIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetEventsByArtifactIDsResponse, ::ml_metadata::GetEventsByArtifactIDsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEventsByArtifactIDs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByArtifactIDsResponse>* MetadataStoreService::Stub::AsyncGetEventsByArtifactIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventsByArtifactIDsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactsByExternalIdsRequest, ::ml_metadata::GetArtifactsByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactsByExternalIds_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactsByExternalIdsRequest, ::ml_metadata::GetArtifactsByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByExternalIds_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByExternalIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByExternalIdsResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactsByExternalIdsResponse, ::ml_metadata::GetArtifactsByExternalIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactsByExternalIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByExternalIdsResponse>* MetadataStoreService::Stub::AsyncGetArtifactsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactsByExternalIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionsByExternalIdsRequest, ::ml_metadata::GetExecutionsByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionsByExternalIds_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionsByExternalIdsRequest, ::ml_metadata::GetExecutionsByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionsByExternalIds_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionsByExternalIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByExternalIdsResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionsByExternalIdsResponse, ::ml_metadata::GetExecutionsByExternalIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionsByExternalIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByExternalIdsResponse>* MetadataStoreService::Stub::AsyncGetExecutionsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionsByExternalIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::ml_metadata::GetContextsByExternalIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextsByExternalIdsRequest, ::ml_metadata::GetContextsByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextsByExternalIds_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest* request, ::ml_metadata::GetContextsByExternalIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextsByExternalIdsRequest, ::ml_metadata::GetContextsByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByExternalIds_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest* request, ::ml_metadata::GetContextsByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByExternalIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExternalIdsResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextsByExternalIdsResponse, ::ml_metadata::GetContextsByExternalIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextsByExternalIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExternalIdsResponse>* MetadataStoreService::Stub::AsyncGetContextsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextsByExternalIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactTypesByExternalIdsRequest, ::ml_metadata::GetArtifactTypesByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactTypesByExternalIds_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactTypesByExternalIdsRequest, ::ml_metadata::GetArtifactTypesByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactTypesByExternalIds_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactTypesByExternalIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactTypesByExternalIdsResponse, ::ml_metadata::GetArtifactTypesByExternalIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactTypesByExternalIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>* MetadataStoreService::Stub::AsyncGetArtifactTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactTypesByExternalIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionTypesByExternalIdsRequest, ::ml_metadata::GetExecutionTypesByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionTypesByExternalIds_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionTypesByExternalIdsRequest, ::ml_metadata::GetExecutionTypesByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionTypesByExternalIds_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionTypesByExternalIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionTypesByExternalIdsResponse, ::ml_metadata::GetExecutionTypesByExternalIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionTypesByExternalIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>* MetadataStoreService::Stub::AsyncGetExecutionTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionTypesByExternalIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextTypesByExternalIdsRequest, ::ml_metadata::GetContextTypesByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextTypesByExternalIds_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextTypesByExternalIdsRequest, ::ml_metadata::GetContextTypesByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextTypesByExternalIds_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextTypesByExternalIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByExternalIdsResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextTypesByExternalIdsResponse, ::ml_metadata::GetContextTypesByExternalIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextTypesByExternalIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByExternalIdsResponse>* MetadataStoreService::Stub::AsyncGetContextTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextTypesByExternalIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::ml_metadata::GetContextsByArtifactResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextsByArtifactRequest, ::ml_metadata::GetContextsByArtifactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextsByArtifact_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest* request, ::ml_metadata::GetContextsByArtifactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextsByArtifactRequest, ::ml_metadata::GetContextsByArtifactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByArtifact_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest* request, ::ml_metadata::GetContextsByArtifactResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByArtifact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByArtifactResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextsByArtifactRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextsByArtifactResponse, ::ml_metadata::GetContextsByArtifactRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextsByArtifact_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByArtifactResponse>* MetadataStoreService::Stub::AsyncGetContextsByArtifactRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextsByArtifactRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::ml_metadata::GetContextsByExecutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetContextsByExecutionRequest, ::ml_metadata::GetContextsByExecutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContextsByExecution_, context, request, response);
}

void MetadataStoreService::Stub::async::GetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest* request, ::ml_metadata::GetContextsByExecutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetContextsByExecutionRequest, ::ml_metadata::GetContextsByExecutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByExecution_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest* request, ::ml_metadata::GetContextsByExecutionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContextsByExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExecutionResponse>* MetadataStoreService::Stub::PrepareAsyncGetContextsByExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetContextsByExecutionResponse, ::ml_metadata::GetContextsByExecutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContextsByExecution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExecutionResponse>* MetadataStoreService::Stub::AsyncGetContextsByExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContextsByExecutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::ml_metadata::GetParentContextsByContextResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetParentContextsByContextRequest, ::ml_metadata::GetParentContextsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetParentContextsByContext_, context, request, response);
}

void MetadataStoreService::Stub::async::GetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest* request, ::ml_metadata::GetParentContextsByContextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetParentContextsByContextRequest, ::ml_metadata::GetParentContextsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetParentContextsByContext_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest* request, ::ml_metadata::GetParentContextsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetParentContextsByContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextResponse>* MetadataStoreService::Stub::PrepareAsyncGetParentContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetParentContextsByContextResponse, ::ml_metadata::GetParentContextsByContextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetParentContextsByContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextResponse>* MetadataStoreService::Stub::AsyncGetParentContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetParentContextsByContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::ml_metadata::GetChildrenContextsByContextResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetChildrenContextsByContextRequest, ::ml_metadata::GetChildrenContextsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChildrenContextsByContext_, context, request, response);
}

void MetadataStoreService::Stub::async::GetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest* request, ::ml_metadata::GetChildrenContextsByContextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetChildrenContextsByContextRequest, ::ml_metadata::GetChildrenContextsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChildrenContextsByContext_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest* request, ::ml_metadata::GetChildrenContextsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChildrenContextsByContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextResponse>* MetadataStoreService::Stub::PrepareAsyncGetChildrenContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetChildrenContextsByContextResponse, ::ml_metadata::GetChildrenContextsByContextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChildrenContextsByContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextResponse>* MetadataStoreService::Stub::AsyncGetChildrenContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChildrenContextsByContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::ml_metadata::GetParentContextsByContextsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetParentContextsByContextsRequest, ::ml_metadata::GetParentContextsByContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetParentContextsByContexts_, context, request, response);
}

void MetadataStoreService::Stub::async::GetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest* request, ::ml_metadata::GetParentContextsByContextsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetParentContextsByContextsRequest, ::ml_metadata::GetParentContextsByContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetParentContextsByContexts_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest* request, ::ml_metadata::GetParentContextsByContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetParentContextsByContexts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextsResponse>* MetadataStoreService::Stub::PrepareAsyncGetParentContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetParentContextsByContextsResponse, ::ml_metadata::GetParentContextsByContextsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetParentContextsByContexts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextsResponse>* MetadataStoreService::Stub::AsyncGetParentContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetParentContextsByContextsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::ml_metadata::GetChildrenContextsByContextsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetChildrenContextsByContextsRequest, ::ml_metadata::GetChildrenContextsByContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChildrenContextsByContexts_, context, request, response);
}

void MetadataStoreService::Stub::async::GetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::ml_metadata::GetChildrenContextsByContextsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetChildrenContextsByContextsRequest, ::ml_metadata::GetChildrenContextsByContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChildrenContextsByContexts_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::ml_metadata::GetChildrenContextsByContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChildrenContextsByContexts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextsResponse>* MetadataStoreService::Stub::PrepareAsyncGetChildrenContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetChildrenContextsByContextsResponse, ::ml_metadata::GetChildrenContextsByContextsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChildrenContextsByContexts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextsResponse>* MetadataStoreService::Stub::AsyncGetChildrenContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChildrenContextsByContextsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::ml_metadata::GetArtifactsByContextResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetArtifactsByContextRequest, ::ml_metadata::GetArtifactsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetArtifactsByContext_, context, request, response);
}

void MetadataStoreService::Stub::async::GetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest* request, ::ml_metadata::GetArtifactsByContextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetArtifactsByContextRequest, ::ml_metadata::GetArtifactsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByContext_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest* request, ::ml_metadata::GetArtifactsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetArtifactsByContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByContextResponse>* MetadataStoreService::Stub::PrepareAsyncGetArtifactsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetArtifactsByContextResponse, ::ml_metadata::GetArtifactsByContextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetArtifactsByContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByContextResponse>* MetadataStoreService::Stub::AsyncGetArtifactsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetArtifactsByContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::ml_metadata::GetExecutionsByContextResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetExecutionsByContextRequest, ::ml_metadata::GetExecutionsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExecutionsByContext_, context, request, response);
}

void MetadataStoreService::Stub::async::GetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest* request, ::ml_metadata::GetExecutionsByContextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetExecutionsByContextRequest, ::ml_metadata::GetExecutionsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionsByContext_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest* request, ::ml_metadata::GetExecutionsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExecutionsByContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByContextResponse>* MetadataStoreService::Stub::PrepareAsyncGetExecutionsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetExecutionsByContextResponse, ::ml_metadata::GetExecutionsByContextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExecutionsByContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByContextResponse>* MetadataStoreService::Stub::AsyncGetExecutionsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExecutionsByContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::ml_metadata::GetLineageGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetLineageGraphRequest, ::ml_metadata::GetLineageGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLineageGraph_, context, request, response);
}

void MetadataStoreService::Stub::async::GetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest* request, ::ml_metadata::GetLineageGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetLineageGraphRequest, ::ml_metadata::GetLineageGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLineageGraph_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest* request, ::ml_metadata::GetLineageGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLineageGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageGraphResponse>* MetadataStoreService::Stub::PrepareAsyncGetLineageGraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetLineageGraphResponse, ::ml_metadata::GetLineageGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLineageGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageGraphResponse>* MetadataStoreService::Stub::AsyncGetLineageGraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLineageGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetadataStoreService::Stub::GetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::ml_metadata::GetLineageSubgraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ml_metadata::GetLineageSubgraphRequest, ::ml_metadata::GetLineageSubgraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLineageSubgraph_, context, request, response);
}

void MetadataStoreService::Stub::async::GetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest* request, ::ml_metadata::GetLineageSubgraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ml_metadata::GetLineageSubgraphRequest, ::ml_metadata::GetLineageSubgraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLineageSubgraph_, context, request, response, std::move(f));
}

void MetadataStoreService::Stub::async::GetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest* request, ::ml_metadata::GetLineageSubgraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLineageSubgraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageSubgraphResponse>* MetadataStoreService::Stub::PrepareAsyncGetLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ml_metadata::GetLineageSubgraphResponse, ::ml_metadata::GetLineageSubgraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLineageSubgraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageSubgraphResponse>* MetadataStoreService::Stub::AsyncGetLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLineageSubgraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

MetadataStoreService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutArtifactTypeRequest, ::ml_metadata::PutArtifactTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutArtifactTypeRequest* req,
             ::ml_metadata::PutArtifactTypeResponse* resp) {
               return service->PutArtifactType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutExecutionTypeRequest, ::ml_metadata::PutExecutionTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutExecutionTypeRequest* req,
             ::ml_metadata::PutExecutionTypeResponse* resp) {
               return service->PutExecutionType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutContextTypeRequest, ::ml_metadata::PutContextTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutContextTypeRequest* req,
             ::ml_metadata::PutContextTypeResponse* resp) {
               return service->PutContextType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutTypesRequest, ::ml_metadata::PutTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutTypesRequest* req,
             ::ml_metadata::PutTypesResponse* resp) {
               return service->PutTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutArtifactsRequest, ::ml_metadata::PutArtifactsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutArtifactsRequest* req,
             ::ml_metadata::PutArtifactsResponse* resp) {
               return service->PutArtifacts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutExecutionsRequest, ::ml_metadata::PutExecutionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutExecutionsRequest* req,
             ::ml_metadata::PutExecutionsResponse* resp) {
               return service->PutExecutions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutEventsRequest, ::ml_metadata::PutEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutEventsRequest* req,
             ::ml_metadata::PutEventsResponse* resp) {
               return service->PutEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutExecutionRequest, ::ml_metadata::PutExecutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutExecutionRequest* req,
             ::ml_metadata::PutExecutionResponse* resp) {
               return service->PutExecution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutLineageSubgraphRequest, ::ml_metadata::PutLineageSubgraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutLineageSubgraphRequest* req,
             ::ml_metadata::PutLineageSubgraphResponse* resp) {
               return service->PutLineageSubgraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutContextsRequest, ::ml_metadata::PutContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutContextsRequest* req,
             ::ml_metadata::PutContextsResponse* resp) {
               return service->PutContexts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutAttributionsAndAssociationsRequest, ::ml_metadata::PutAttributionsAndAssociationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutAttributionsAndAssociationsRequest* req,
             ::ml_metadata::PutAttributionsAndAssociationsResponse* resp) {
               return service->PutAttributionsAndAssociations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::PutParentContextsRequest, ::ml_metadata::PutParentContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::PutParentContextsRequest* req,
             ::ml_metadata::PutParentContextsResponse* resp) {
               return service->PutParentContexts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactTypeRequest, ::ml_metadata::GetArtifactTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactTypeRequest* req,
             ::ml_metadata::GetArtifactTypeResponse* resp) {
               return service->GetArtifactType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactTypesByIDRequest, ::ml_metadata::GetArtifactTypesByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactTypesByIDRequest* req,
             ::ml_metadata::GetArtifactTypesByIDResponse* resp) {
               return service->GetArtifactTypesByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactTypesRequest, ::ml_metadata::GetArtifactTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactTypesRequest* req,
             ::ml_metadata::GetArtifactTypesResponse* resp) {
               return service->GetArtifactTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionTypeRequest, ::ml_metadata::GetExecutionTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionTypeRequest* req,
             ::ml_metadata::GetExecutionTypeResponse* resp) {
               return service->GetExecutionType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionTypesByIDRequest, ::ml_metadata::GetExecutionTypesByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionTypesByIDRequest* req,
             ::ml_metadata::GetExecutionTypesByIDResponse* resp) {
               return service->GetExecutionTypesByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionTypesRequest, ::ml_metadata::GetExecutionTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionTypesRequest* req,
             ::ml_metadata::GetExecutionTypesResponse* resp) {
               return service->GetExecutionTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextTypeRequest, ::ml_metadata::GetContextTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextTypeRequest* req,
             ::ml_metadata::GetContextTypeResponse* resp) {
               return service->GetContextType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextTypesByIDRequest, ::ml_metadata::GetContextTypesByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextTypesByIDRequest* req,
             ::ml_metadata::GetContextTypesByIDResponse* resp) {
               return service->GetContextTypesByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextTypesRequest, ::ml_metadata::GetContextTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextTypesRequest* req,
             ::ml_metadata::GetContextTypesResponse* resp) {
               return service->GetContextTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactsRequest, ::ml_metadata::GetArtifactsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactsRequest* req,
             ::ml_metadata::GetArtifactsResponse* resp) {
               return service->GetArtifacts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionsRequest, ::ml_metadata::GetExecutionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionsRequest* req,
             ::ml_metadata::GetExecutionsResponse* resp) {
               return service->GetExecutions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextsRequest, ::ml_metadata::GetContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextsRequest* req,
             ::ml_metadata::GetContextsResponse* resp) {
               return service->GetContexts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactsByIDRequest, ::ml_metadata::GetArtifactsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactsByIDRequest* req,
             ::ml_metadata::GetArtifactsByIDResponse* resp) {
               return service->GetArtifactsByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionsByIDRequest, ::ml_metadata::GetExecutionsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionsByIDRequest* req,
             ::ml_metadata::GetExecutionsByIDResponse* resp) {
               return service->GetExecutionsByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextsByIDRequest, ::ml_metadata::GetContextsByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextsByIDRequest* req,
             ::ml_metadata::GetContextsByIDResponse* resp) {
               return service->GetContextsByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactsByTypeRequest, ::ml_metadata::GetArtifactsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactsByTypeRequest* req,
             ::ml_metadata::GetArtifactsByTypeResponse* resp) {
               return service->GetArtifactsByType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionsByTypeRequest, ::ml_metadata::GetExecutionsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionsByTypeRequest* req,
             ::ml_metadata::GetExecutionsByTypeResponse* resp) {
               return service->GetExecutionsByType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextsByTypeRequest, ::ml_metadata::GetContextsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextsByTypeRequest* req,
             ::ml_metadata::GetContextsByTypeResponse* resp) {
               return service->GetContextsByType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactByTypeAndNameRequest, ::ml_metadata::GetArtifactByTypeAndNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactByTypeAndNameRequest* req,
             ::ml_metadata::GetArtifactByTypeAndNameResponse* resp) {
               return service->GetArtifactByTypeAndName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionByTypeAndNameRequest, ::ml_metadata::GetExecutionByTypeAndNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionByTypeAndNameRequest* req,
             ::ml_metadata::GetExecutionByTypeAndNameResponse* resp) {
               return service->GetExecutionByTypeAndName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextByTypeAndNameRequest, ::ml_metadata::GetContextByTypeAndNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextByTypeAndNameRequest* req,
             ::ml_metadata::GetContextByTypeAndNameResponse* resp) {
               return service->GetContextByTypeAndName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactsByURIRequest, ::ml_metadata::GetArtifactsByURIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactsByURIRequest* req,
             ::ml_metadata::GetArtifactsByURIResponse* resp) {
               return service->GetArtifactsByURI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetEventsByExecutionIDsRequest, ::ml_metadata::GetEventsByExecutionIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetEventsByExecutionIDsRequest* req,
             ::ml_metadata::GetEventsByExecutionIDsResponse* resp) {
               return service->GetEventsByExecutionIDs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetEventsByArtifactIDsRequest, ::ml_metadata::GetEventsByArtifactIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetEventsByArtifactIDsRequest* req,
             ::ml_metadata::GetEventsByArtifactIDsResponse* resp) {
               return service->GetEventsByArtifactIDs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactsByExternalIdsRequest, ::ml_metadata::GetArtifactsByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactsByExternalIdsRequest* req,
             ::ml_metadata::GetArtifactsByExternalIdsResponse* resp) {
               return service->GetArtifactsByExternalIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionsByExternalIdsRequest, ::ml_metadata::GetExecutionsByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionsByExternalIdsRequest* req,
             ::ml_metadata::GetExecutionsByExternalIdsResponse* resp) {
               return service->GetExecutionsByExternalIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextsByExternalIdsRequest, ::ml_metadata::GetContextsByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextsByExternalIdsRequest* req,
             ::ml_metadata::GetContextsByExternalIdsResponse* resp) {
               return service->GetContextsByExternalIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactTypesByExternalIdsRequest, ::ml_metadata::GetArtifactTypesByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* req,
             ::ml_metadata::GetArtifactTypesByExternalIdsResponse* resp) {
               return service->GetArtifactTypesByExternalIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionTypesByExternalIdsRequest, ::ml_metadata::GetExecutionTypesByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* req,
             ::ml_metadata::GetExecutionTypesByExternalIdsResponse* resp) {
               return service->GetExecutionTypesByExternalIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextTypesByExternalIdsRequest, ::ml_metadata::GetContextTypesByExternalIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextTypesByExternalIdsRequest* req,
             ::ml_metadata::GetContextTypesByExternalIdsResponse* resp) {
               return service->GetContextTypesByExternalIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextsByArtifactRequest, ::ml_metadata::GetContextsByArtifactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextsByArtifactRequest* req,
             ::ml_metadata::GetContextsByArtifactResponse* resp) {
               return service->GetContextsByArtifact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetContextsByExecutionRequest, ::ml_metadata::GetContextsByExecutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetContextsByExecutionRequest* req,
             ::ml_metadata::GetContextsByExecutionResponse* resp) {
               return service->GetContextsByExecution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetParentContextsByContextRequest, ::ml_metadata::GetParentContextsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetParentContextsByContextRequest* req,
             ::ml_metadata::GetParentContextsByContextResponse* resp) {
               return service->GetParentContextsByContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetChildrenContextsByContextRequest, ::ml_metadata::GetChildrenContextsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetChildrenContextsByContextRequest* req,
             ::ml_metadata::GetChildrenContextsByContextResponse* resp) {
               return service->GetChildrenContextsByContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetParentContextsByContextsRequest, ::ml_metadata::GetParentContextsByContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetParentContextsByContextsRequest* req,
             ::ml_metadata::GetParentContextsByContextsResponse* resp) {
               return service->GetParentContextsByContexts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetChildrenContextsByContextsRequest, ::ml_metadata::GetChildrenContextsByContextsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetChildrenContextsByContextsRequest* req,
             ::ml_metadata::GetChildrenContextsByContextsResponse* resp) {
               return service->GetChildrenContextsByContexts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetArtifactsByContextRequest, ::ml_metadata::GetArtifactsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetArtifactsByContextRequest* req,
             ::ml_metadata::GetArtifactsByContextResponse* resp) {
               return service->GetArtifactsByContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetExecutionsByContextRequest, ::ml_metadata::GetExecutionsByContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetExecutionsByContextRequest* req,
             ::ml_metadata::GetExecutionsByContextResponse* resp) {
               return service->GetExecutionsByContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetLineageGraphRequest, ::ml_metadata::GetLineageGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetLineageGraphRequest* req,
             ::ml_metadata::GetLineageGraphResponse* resp) {
               return service->GetLineageGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataStoreService_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataStoreService::Service, ::ml_metadata::GetLineageSubgraphRequest, ::ml_metadata::GetLineageSubgraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetadataStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ml_metadata::GetLineageSubgraphRequest* req,
             ::ml_metadata::GetLineageSubgraphResponse* resp) {
               return service->GetLineageSubgraph(ctx, req, resp);
             }, this)));
}

MetadataStoreService::Service::~Service() {
}

::grpc::Status MetadataStoreService::Service::PutArtifactType(::grpc::ServerContext* context, const ::ml_metadata::PutArtifactTypeRequest* request, ::ml_metadata::PutArtifactTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutExecutionType(::grpc::ServerContext* context, const ::ml_metadata::PutExecutionTypeRequest* request, ::ml_metadata::PutExecutionTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutContextType(::grpc::ServerContext* context, const ::ml_metadata::PutContextTypeRequest* request, ::ml_metadata::PutContextTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutTypes(::grpc::ServerContext* context, const ::ml_metadata::PutTypesRequest* request, ::ml_metadata::PutTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutArtifacts(::grpc::ServerContext* context, const ::ml_metadata::PutArtifactsRequest* request, ::ml_metadata::PutArtifactsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutExecutions(::grpc::ServerContext* context, const ::ml_metadata::PutExecutionsRequest* request, ::ml_metadata::PutExecutionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutEvents(::grpc::ServerContext* context, const ::ml_metadata::PutEventsRequest* request, ::ml_metadata::PutEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutExecution(::grpc::ServerContext* context, const ::ml_metadata::PutExecutionRequest* request, ::ml_metadata::PutExecutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutLineageSubgraph(::grpc::ServerContext* context, const ::ml_metadata::PutLineageSubgraphRequest* request, ::ml_metadata::PutLineageSubgraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutContexts(::grpc::ServerContext* context, const ::ml_metadata::PutContextsRequest* request, ::ml_metadata::PutContextsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutAttributionsAndAssociations(::grpc::ServerContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::PutParentContexts(::grpc::ServerContext* context, const ::ml_metadata::PutParentContextsRequest* request, ::ml_metadata::PutParentContextsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactType(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactTypeRequest* request, ::ml_metadata::GetArtifactTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactTypesByID(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest* request, ::ml_metadata::GetArtifactTypesByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactTypes(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactTypesRequest* request, ::ml_metadata::GetArtifactTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutionType(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionTypeRequest* request, ::ml_metadata::GetExecutionTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutionTypesByID(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest* request, ::ml_metadata::GetExecutionTypesByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutionTypes(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionTypesRequest* request, ::ml_metadata::GetExecutionTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextType(::grpc::ServerContext* context, const ::ml_metadata::GetContextTypeRequest* request, ::ml_metadata::GetContextTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextTypesByID(::grpc::ServerContext* context, const ::ml_metadata::GetContextTypesByIDRequest* request, ::ml_metadata::GetContextTypesByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextTypes(::grpc::ServerContext* context, const ::ml_metadata::GetContextTypesRequest* request, ::ml_metadata::GetContextTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifacts(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsRequest* request, ::ml_metadata::GetArtifactsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutions(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsRequest* request, ::ml_metadata::GetExecutionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContexts(::grpc::ServerContext* context, const ::ml_metadata::GetContextsRequest* request, ::ml_metadata::GetContextsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactsByID(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByIDRequest* request, ::ml_metadata::GetArtifactsByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutionsByID(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsByIDRequest* request, ::ml_metadata::GetExecutionsByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextsByID(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByIDRequest* request, ::ml_metadata::GetContextsByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactsByType(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByTypeRequest* request, ::ml_metadata::GetArtifactsByTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutionsByType(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsByTypeRequest* request, ::ml_metadata::GetExecutionsByTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextsByType(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByTypeRequest* request, ::ml_metadata::GetContextsByTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactByTypeAndName(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutionByTypeAndName(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextByTypeAndName(::grpc::ServerContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest* request, ::ml_metadata::GetContextByTypeAndNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactsByURI(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByURIRequest* request, ::ml_metadata::GetArtifactsByURIResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetEventsByExecutionIDs(::grpc::ServerContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::ml_metadata::GetEventsByExecutionIDsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetEventsByArtifactIDs(::grpc::ServerContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::ml_metadata::GetEventsByArtifactIDsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactsByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutionsByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextsByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest* request, ::ml_metadata::GetContextsByExternalIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactTypesByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutionTypesByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextTypesByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextsByArtifact(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByArtifactRequest* request, ::ml_metadata::GetContextsByArtifactResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetContextsByExecution(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByExecutionRequest* request, ::ml_metadata::GetContextsByExecutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetParentContextsByContext(::grpc::ServerContext* context, const ::ml_metadata::GetParentContextsByContextRequest* request, ::ml_metadata::GetParentContextsByContextResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetChildrenContextsByContext(::grpc::ServerContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest* request, ::ml_metadata::GetChildrenContextsByContextResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetParentContextsByContexts(::grpc::ServerContext* context, const ::ml_metadata::GetParentContextsByContextsRequest* request, ::ml_metadata::GetParentContextsByContextsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetChildrenContextsByContexts(::grpc::ServerContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::ml_metadata::GetChildrenContextsByContextsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetArtifactsByContext(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByContextRequest* request, ::ml_metadata::GetArtifactsByContextResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetExecutionsByContext(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsByContextRequest* request, ::ml_metadata::GetExecutionsByContextResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetLineageGraph(::grpc::ServerContext* context, const ::ml_metadata::GetLineageGraphRequest* request, ::ml_metadata::GetLineageGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataStoreService::Service::GetLineageSubgraph(::grpc::ServerContext* context, const ::ml_metadata::GetLineageSubgraphRequest* request, ::ml_metadata::GetLineageSubgraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ml_metadata

