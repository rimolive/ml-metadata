// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ml_metadata/proto/metadata_source.proto

#include "ml_metadata/proto/metadata_source.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ml_metadata {
PROTOBUF_CONSTEXPR RecordSet_Record::RecordSet_Record(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordSet_RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordSet_RecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordSet_RecordDefaultTypeInternal() {}
  union {
    RecordSet_Record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordSet_RecordDefaultTypeInternal _RecordSet_Record_default_instance_;
PROTOBUF_CONSTEXPR RecordSet::RecordSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_names_)*/{}
  , /*decltype(_impl_.records_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordSetDefaultTypeInternal() {}
  union {
    RecordSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordSetDefaultTypeInternal _RecordSet_default_instance_;
PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_TemplateQuery::MetadataSourceQueryConfig_TemplateQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parameter_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataSourceQueryConfig_TemplateQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_TemplateQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataSourceQueryConfig_TemplateQueryDefaultTypeInternal() {}
  union {
    MetadataSourceQueryConfig_TemplateQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataSourceQueryConfig_TemplateQueryDefaultTypeInternal _MetadataSourceQueryConfig_TemplateQuery_default_instance_;
PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_DbVerification::MetadataSourceQueryConfig_DbVerification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_num_tables_)*/0
  , /*decltype(_impl_.total_num_indexes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataSourceQueryConfig_DbVerificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_DbVerificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataSourceQueryConfig_DbVerificationDefaultTypeInternal() {}
  union {
    MetadataSourceQueryConfig_DbVerification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataSourceQueryConfig_DbVerificationDefaultTypeInternal _MetadataSourceQueryConfig_DbVerification_default_instance_;
PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.previous_version_setup_queries_)*/{}
  , /*decltype(_impl_.post_migration_verification_queries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataSourceQueryConfig_MigrationScheme_VerificationSchemeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_MigrationScheme_VerificationSchemeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataSourceQueryConfig_MigrationScheme_VerificationSchemeDefaultTypeInternal() {}
  union {
    MetadataSourceQueryConfig_MigrationScheme_VerificationScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataSourceQueryConfig_MigrationScheme_VerificationSchemeDefaultTypeInternal _MetadataSourceQueryConfig_MigrationScheme_VerificationScheme_default_instance_;
PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_MigrationScheme::MetadataSourceQueryConfig_MigrationScheme(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.upgrade_queries_)*/{}
  , /*decltype(_impl_.downgrade_queries_)*/{}
  , /*decltype(_impl_.upgrade_verification_)*/nullptr
  , /*decltype(_impl_.downgrade_verification_)*/nullptr
  , /*decltype(_impl_.db_verification_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataSourceQueryConfig_MigrationSchemeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_MigrationSchemeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataSourceQueryConfig_MigrationSchemeDefaultTypeInternal() {}
  union {
    MetadataSourceQueryConfig_MigrationScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataSourceQueryConfig_MigrationSchemeDefaultTypeInternal _MetadataSourceQueryConfig_MigrationScheme_default_instance_;
PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUseDefaultTypeInternal _MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MetadataSourceQueryConfig::MetadataSourceQueryConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.migration_schemes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.secondary_indices_)*/{}
  , /*decltype(_impl_.drop_type_table_)*/nullptr
  , /*decltype(_impl_.create_type_table_)*/nullptr
  , /*decltype(_impl_.select_type_by_id_)*/nullptr
  , /*decltype(_impl_.drop_type_property_table_)*/nullptr
  , /*decltype(_impl_.create_type_property_table_)*/nullptr
  , /*decltype(_impl_.insert_type_property_)*/nullptr
  , /*decltype(_impl_.select_property_by_type_id_)*/nullptr
  , /*decltype(_impl_.select_last_insert_id_)*/nullptr
  , /*decltype(_impl_.drop_artifact_table_)*/nullptr
  , /*decltype(_impl_.create_artifact_table_)*/nullptr
  , /*decltype(_impl_.insert_artifact_)*/nullptr
  , /*decltype(_impl_.select_artifact_by_id_)*/nullptr
  , /*decltype(_impl_.drop_artifact_property_table_)*/nullptr
  , /*decltype(_impl_.create_artifact_property_table_)*/nullptr
  , /*decltype(_impl_.insert_artifact_property_)*/nullptr
  , /*decltype(_impl_.select_artifact_property_by_artifact_id_)*/nullptr
  , /*decltype(_impl_.select_type_by_name_)*/nullptr
  , /*decltype(_impl_.update_artifact_)*/nullptr
  , /*decltype(_impl_.update_artifact_property_)*/nullptr
  , /*decltype(_impl_.delete_artifact_property_)*/nullptr
  , /*decltype(_impl_.drop_execution_table_)*/nullptr
  , /*decltype(_impl_.create_execution_table_)*/nullptr
  , /*decltype(_impl_.drop_execution_property_table_)*/nullptr
  , /*decltype(_impl_.create_execution_property_table_)*/nullptr
  , /*decltype(_impl_.insert_execution_)*/nullptr
  , /*decltype(_impl_.select_execution_by_id_)*/nullptr
  , /*decltype(_impl_.insert_execution_property_)*/nullptr
  , /*decltype(_impl_.select_execution_property_by_execution_id_)*/nullptr
  , /*decltype(_impl_.update_execution_property_)*/nullptr
  , /*decltype(_impl_.delete_execution_property_)*/nullptr
  , /*decltype(_impl_.update_execution_)*/nullptr
  , /*decltype(_impl_.drop_event_table_)*/nullptr
  , /*decltype(_impl_.create_event_table_)*/nullptr
  , /*decltype(_impl_.insert_event_)*/nullptr
  , /*decltype(_impl_.drop_event_path_table_)*/nullptr
  , /*decltype(_impl_.create_event_path_table_)*/nullptr
  , /*decltype(_impl_.insert_event_path_)*/nullptr
  , /*decltype(_impl_.check_type_table_)*/nullptr
  , /*decltype(_impl_.check_type_property_table_)*/nullptr
  , /*decltype(_impl_.check_artifact_table_)*/nullptr
  , /*decltype(_impl_.check_artifact_property_table_)*/nullptr
  , /*decltype(_impl_.check_execution_table_)*/nullptr
  , /*decltype(_impl_.check_execution_property_table_)*/nullptr
  , /*decltype(_impl_.check_event_table_)*/nullptr
  , /*decltype(_impl_.check_event_path_table_)*/nullptr
  , /*decltype(_impl_.select_artifacts_by_type_id_)*/nullptr
  , /*decltype(_impl_.select_executions_by_type_id_)*/nullptr
  , /*decltype(_impl_.insert_artifact_type_)*/nullptr
  , /*decltype(_impl_.insert_execution_type_)*/nullptr
  , /*decltype(_impl_.select_artifacts_by_uri_)*/nullptr
  , /*decltype(_impl_.select_all_types_)*/nullptr
  , /*decltype(_impl_.insert_context_type_)*/nullptr
  , /*decltype(_impl_.drop_mlmd_env_table_)*/nullptr
  , /*decltype(_impl_.create_mlmd_env_table_)*/nullptr
  , /*decltype(_impl_.check_mlmd_env_table_)*/nullptr
  , /*decltype(_impl_.update_schema_version_)*/nullptr
  , /*decltype(_impl_.check_tables_in_v0_13_2_)*/nullptr
  , /*decltype(_impl_.insert_schema_version_)*/nullptr
  , /*decltype(_impl_.drop_context_table_)*/nullptr
  , /*decltype(_impl_.create_context_table_)*/nullptr
  , /*decltype(_impl_.check_context_table_)*/nullptr
  , /*decltype(_impl_.insert_context_)*/nullptr
  , /*decltype(_impl_.select_context_by_id_)*/nullptr
  , /*decltype(_impl_.select_contexts_by_type_id_)*/nullptr
  , /*decltype(_impl_.update_context_)*/nullptr
  , /*decltype(_impl_.drop_context_property_table_)*/nullptr
  , /*decltype(_impl_.create_context_property_table_)*/nullptr
  , /*decltype(_impl_.check_context_property_table_)*/nullptr
  , /*decltype(_impl_.insert_context_property_)*/nullptr
  , /*decltype(_impl_.select_context_property_by_context_id_)*/nullptr
  , /*decltype(_impl_.update_context_property_)*/nullptr
  , /*decltype(_impl_.delete_context_property_)*/nullptr
  , /*decltype(_impl_.drop_association_table_)*/nullptr
  , /*decltype(_impl_.create_association_table_)*/nullptr
  , /*decltype(_impl_.check_association_table_)*/nullptr
  , /*decltype(_impl_.insert_association_)*/nullptr
  , /*decltype(_impl_.select_association_by_context_id_)*/nullptr
  , /*decltype(_impl_.drop_attribution_table_)*/nullptr
  , /*decltype(_impl_.create_attribution_table_)*/nullptr
  , /*decltype(_impl_.check_attribution_table_)*/nullptr
  , /*decltype(_impl_.insert_attribution_)*/nullptr
  , /*decltype(_impl_.select_attribution_by_context_id_)*/nullptr
  , /*decltype(_impl_.select_context_by_type_id_and_name_)*/nullptr
  , /*decltype(_impl_.select_artifact_by_type_id_and_name_)*/nullptr
  , /*decltype(_impl_.select_execution_by_type_id_and_name_)*/nullptr
  , /*decltype(_impl_.select_event_by_artifact_ids_)*/nullptr
  , /*decltype(_impl_.select_event_by_execution_ids_)*/nullptr
  , /*decltype(_impl_.select_event_path_by_event_ids_)*/nullptr
  , /*decltype(_impl_.drop_parent_type_table_)*/nullptr
  , /*decltype(_impl_.create_parent_type_table_)*/nullptr
  , /*decltype(_impl_.check_parent_type_table_)*/nullptr
  , /*decltype(_impl_.drop_parent_context_table_)*/nullptr
  , /*decltype(_impl_.create_parent_context_table_)*/nullptr
  , /*decltype(_impl_.check_parent_context_table_)*/nullptr
  , /*decltype(_impl_.insert_parent_context_)*/nullptr
  , /*decltype(_impl_.select_parent_context_by_context_id_)*/nullptr
  , /*decltype(_impl_.select_parent_context_by_parent_context_id_)*/nullptr
  , /*decltype(_impl_.insert_parent_type_)*/nullptr
  , /*decltype(_impl_.select_parent_type_by_type_id_)*/nullptr
  , /*decltype(_impl_.select_type_by_name_and_version_)*/nullptr
  , /*decltype(_impl_.delete_contexts_by_id_)*/nullptr
  , /*decltype(_impl_.delete_contexts_properties_by_contexts_id_)*/nullptr
  , /*decltype(_impl_.delete_parent_contexts_by_parent_ids_)*/nullptr
  , /*decltype(_impl_.delete_parent_contexts_by_child_ids_)*/nullptr
  , /*decltype(_impl_.delete_artifacts_by_id_)*/nullptr
  , /*decltype(_impl_.delete_artifacts_properties_by_artifacts_id_)*/nullptr
  , /*decltype(_impl_.delete_executions_by_id_)*/nullptr
  , /*decltype(_impl_.delete_executions_properties_by_executions_id_)*/nullptr
  , /*decltype(_impl_.delete_events_by_artifacts_id_)*/nullptr
  , /*decltype(_impl_.delete_events_by_executions_id_)*/nullptr
  , /*decltype(_impl_.delete_associations_by_contexts_id_)*/nullptr
  , /*decltype(_impl_.delete_associations_by_executions_id_)*/nullptr
  , /*decltype(_impl_.delete_attributions_by_contexts_id_)*/nullptr
  , /*decltype(_impl_.delete_attributions_by_artifacts_id_)*/nullptr
  , /*decltype(_impl_.delete_event_paths_)*/nullptr
  , /*decltype(_impl_.delete_parent_type_)*/nullptr
  , /*decltype(_impl_.select_types_by_id_)*/nullptr
  , /*decltype(_impl_.select_properties_by_type_id_)*/nullptr
  , /*decltype(_impl_.select_artifacts_by_external_ids_)*/nullptr
  , /*decltype(_impl_.delete_parent_contexts_by_parent_id_and_child_ids_)*/nullptr
  , /*decltype(_impl_.select_executions_by_external_ids_)*/nullptr
  , /*decltype(_impl_.select_contexts_by_external_ids_)*/nullptr
  , /*decltype(_impl_.select_types_by_external_ids_)*/nullptr
  , /*decltype(_impl_.metadata_source_type_specific_options_)*/nullptr
  , /*decltype(_impl_.select_types_by_names_)*/nullptr
  , /*decltype(_impl_.select_types_by_names_and_versions_)*/nullptr
  , /*decltype(_impl_.update_type_)*/nullptr
  , /*decltype(_impl_.select_parent_contexts_by_context_ids_)*/nullptr
  , /*decltype(_impl_.select_parent_contexts_by_parent_context_ids_)*/nullptr
  , /*decltype(_impl_.check_mlmd_env_table_existence_)*/nullptr
  , /*decltype(_impl_.select_associations_by_execution_ids_)*/nullptr
  , /*decltype(_impl_.select_attributions_by_artifact_ids_)*/nullptr
  , /*decltype(_impl_.schema_version_)*/int64_t{0}
  , /*decltype(_impl_.metadata_source_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataSourceQueryConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataSourceQueryConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataSourceQueryConfigDefaultTypeInternal() {}
  union {
    MetadataSourceQueryConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataSourceQueryConfigDefaultTypeInternal _MetadataSourceQueryConfig_default_instance_;
PROTOBUF_CONSTEXPR MySQLSourceErrorInfo::MySQLSourceErrorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mysql_error_code_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MySQLSourceErrorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MySQLSourceErrorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MySQLSourceErrorInfoDefaultTypeInternal() {}
  union {
    MySQLSourceErrorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MySQLSourceErrorInfoDefaultTypeInternal _MySQLSourceErrorInfo_default_instance_;
}  // namespace ml_metadata
static ::_pb::Metadata file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto = nullptr;

const uint32_t TableStruct_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::RecordSet_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::RecordSet_Record, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::RecordSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::RecordSet, _impl_.column_names_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::RecordSet, _impl_.records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_TemplateQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_TemplateQuery, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_TemplateQuery, _impl_.parameter_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_DbVerification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_DbVerification, _impl_.total_num_tables_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_DbVerification, _impl_.total_num_indexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme, _impl_.previous_version_setup_queries_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme, _impl_.post_migration_verification_queries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme, _impl_.upgrade_queries_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme, _impl_.downgrade_queries_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme, _impl_.upgrade_verification_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme, _impl_.downgrade_verification_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme, _impl_.db_verification_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.metadata_source_type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_type_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_type_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_type_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_artifact_type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_execution_type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_context_type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_types_by_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_types_by_external_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_type_by_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_type_by_name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_type_by_name_and_version_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_types_by_names_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_types_by_names_and_versions_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_all_types_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.update_type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_parent_type_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_parent_type_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_parent_type_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_parent_type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_parent_type_by_type_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_type_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_type_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_type_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_type_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_property_by_type_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_last_insert_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_artifact_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_artifact_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_artifact_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_artifact_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_artifact_by_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_artifact_by_type_id_and_name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_artifacts_by_type_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_artifacts_by_uri_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_artifacts_by_external_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.update_artifact_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_artifact_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_artifact_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_artifact_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_artifact_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_artifact_property_by_artifact_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.update_artifact_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_artifact_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_execution_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_execution_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_execution_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_execution_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_execution_by_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_execution_by_type_id_and_name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_executions_by_type_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_executions_by_external_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.update_execution_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_execution_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_execution_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_execution_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_execution_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_execution_property_by_execution_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.update_execution_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_execution_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_context_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_context_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_context_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_context_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_context_by_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_contexts_by_type_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_context_by_type_id_and_name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_contexts_by_external_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.update_context_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_context_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_context_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_context_property_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_context_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_context_property_by_context_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.update_context_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_context_property_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_parent_context_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_parent_context_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_parent_context_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_parent_context_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_parent_context_by_context_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_parent_context_by_parent_context_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_parent_contexts_by_context_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_parent_contexts_by_parent_context_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_event_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_event_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_event_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_event_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_event_by_artifact_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_event_by_execution_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_event_path_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_event_path_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_event_path_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_event_path_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_event_path_by_event_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_association_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_association_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_association_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_association_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_association_by_context_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_associations_by_execution_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_attribution_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_attribution_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_attribution_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_attribution_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_attribution_by_context_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_attributions_by_artifact_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.drop_mlmd_env_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.create_mlmd_env_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.schema_version_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_mlmd_env_table_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_mlmd_env_table_existence_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.insert_schema_version_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.update_schema_version_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.check_tables_in_v0_13_2_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.secondary_indices_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.migration_schemes_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_contexts_by_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_contexts_properties_by_contexts_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_parent_contexts_by_parent_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_parent_contexts_by_child_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_parent_contexts_by_parent_id_and_child_ids_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_artifacts_by_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_artifacts_properties_by_artifacts_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_executions_by_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_executions_properties_by_executions_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_events_by_artifacts_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_events_by_executions_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_associations_by_contexts_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_associations_by_executions_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_attributions_by_contexts_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_attributions_by_artifacts_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_event_paths_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.delete_parent_type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.select_properties_by_type_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataSourceQueryConfig, _impl_.metadata_source_type_specific_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLSourceErrorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLSourceErrorInfo, _impl_.mysql_error_code_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ml_metadata::RecordSet_Record)},
  { 7, -1, -1, sizeof(::ml_metadata::RecordSet)},
  { 15, -1, -1, sizeof(::ml_metadata::MetadataSourceQueryConfig_TemplateQuery)},
  { 23, -1, -1, sizeof(::ml_metadata::MetadataSourceQueryConfig_DbVerification)},
  { 31, -1, -1, sizeof(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme)},
  { 39, -1, -1, sizeof(::ml_metadata::MetadataSourceQueryConfig_MigrationScheme)},
  { 50, 58, -1, sizeof(::ml_metadata::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse)},
  { 60, -1, -1, sizeof(::ml_metadata::MetadataSourceQueryConfig)},
  { 202, -1, -1, sizeof(::ml_metadata::MySQLSourceErrorInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ml_metadata::_RecordSet_Record_default_instance_._instance,
  &::ml_metadata::_RecordSet_default_instance_._instance,
  &::ml_metadata::_MetadataSourceQueryConfig_TemplateQuery_default_instance_._instance,
  &::ml_metadata::_MetadataSourceQueryConfig_DbVerification_default_instance_._instance,
  &::ml_metadata::_MetadataSourceQueryConfig_MigrationScheme_VerificationScheme_default_instance_._instance,
  &::ml_metadata::_MetadataSourceQueryConfig_MigrationScheme_default_instance_._instance,
  &::ml_metadata::_MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_MetadataSourceQueryConfig_default_instance_._instance,
  &::ml_metadata::_MySQLSourceErrorInfo_default_instance_._instance,
};

const char descriptor_table_protodef_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'ml_metadata/proto/metadata_source.prot"
  "o\022\013ml_metadata\032\031google/protobuf/any.prot"
  "o\"k\n\tRecordSet\022\024\n\014column_names\030\001 \003(\t\022.\n\007"
  "records\030\002 \003(\0132\035.ml_metadata.RecordSet.Re"
  "cord\032\030\n\006Record\022\016\n\006values\030\001 \003(\t\"\352e\n\031Metad"
  "ataSourceQueryConfig\022=\n\024metadata_source_"
  "type\030\001 \001(\0162\037.ml_metadata.MetadataSourceT"
  "ype\022M\n\017drop_type_table\030\003 \001(\01324.ml_metada"
  "ta.MetadataSourceQueryConfig.TemplateQue"
  "ry\022O\n\021create_type_table\030\004 \001(\01324.ml_metad"
  "ata.MetadataSourceQueryConfig.TemplateQu"
  "ery\022N\n\020check_type_table\030, \001(\01324.ml_metad"
  "ata.MetadataSourceQueryConfig.TemplateQu"
  "ery\022R\n\024insert_artifact_type\0306 \001(\01324.ml_m"
  "etadata.MetadataSourceQueryConfig.Templa"
  "teQuery\022S\n\025insert_execution_type\0307 \001(\01324"
  ".ml_metadata.MetadataSourceQueryConfig.T"
  "emplateQuery\022Q\n\023insert_context_type\030: \001("
  "\01324.ml_metadata.MetadataSourceQueryConfi"
  "g.TemplateQuery\022Q\n\022select_types_by_id\030\200\001"
  " \001(\01324.ml_metadata.MetadataSourceQueryCo"
  "nfig.TemplateQuery\022[\n\034select_types_by_ex"
  "ternal_ids\030\206\001 \001(\01324.ml_metadata.Metadata"
  "SourceQueryConfig.TemplateQuery\022O\n\021selec"
  "t_type_by_id\030\006 \001(\01324.ml_metadata.Metadat"
  "aSourceQueryConfig.TemplateQuery\022Q\n\023sele"
  "ct_type_by_name\030\024 \001(\01324.ml_metadata.Meta"
  "dataSourceQueryConfig.TemplateQuery\022]\n\037s"
  "elect_type_by_name_and_version\030o \001(\01324.m"
  "l_metadata.MetadataSourceQueryConfig.Tem"
  "plateQuery\022T\n\025select_types_by_names\030\210\001 \001"
  "(\01324.ml_metadata.MetadataSourceQueryConf"
  "ig.TemplateQuery\022a\n\"select_types_by_name"
  "s_and_versions\030\211\001 \001(\01324.ml_metadata.Meta"
  "dataSourceQueryConfig.TemplateQuery\022N\n\020s"
  "elect_all_types\0309 \001(\01324.ml_metadata.Meta"
  "dataSourceQueryConfig.TemplateQuery\022J\n\013u"
  "pdate_type\030\212\001 \001(\01324.ml_metadata.Metadata"
  "SourceQueryConfig.TemplateQuery\022T\n\026drop_"
  "parent_type_table\030c \001(\01324.ml_metadata.Me"
  "tadataSourceQueryConfig.TemplateQuery\022V\n"
  "\030create_parent_type_table\030d \001(\01324.ml_met"
  "adata.MetadataSourceQueryConfig.Template"
  "Query\022U\n\027check_parent_type_table\030e \001(\01324"
  ".ml_metadata.MetadataSourceQueryConfig.T"
  "emplateQuery\022P\n\022insert_parent_type\030m \001(\013"
  "24.ml_metadata.MetadataSourceQueryConfig"
  ".TemplateQuery\022[\n\035select_parent_type_by_"
  "type_id\030n \001(\01324.ml_metadata.MetadataSour"
  "ceQueryConfig.TemplateQuery\022V\n\030drop_type"
  "_property_table\030\007 \001(\01324.ml_metadata.Meta"
  "dataSourceQueryConfig.TemplateQuery\022X\n\032c"
  "reate_type_property_table\030\010 \001(\01324.ml_met"
  "adata.MetadataSourceQueryConfig.Template"
  "Query\022W\n\031check_type_property_table\030- \001(\013"
  "24.ml_metadata.MetadataSourceQueryConfig"
  ".TemplateQuery\022R\n\024insert_type_property\030\t"
  " \001(\01324.ml_metadata.MetadataSourceQueryCo"
  "nfig.TemplateQuery\022X\n\032select_property_by"
  "_type_id\030\n \001(\01324.ml_metadata.MetadataSou"
  "rceQueryConfig.TemplateQuery\022S\n\025select_l"
  "ast_insert_id\030\013 \001(\01324.ml_metadata.Metada"
  "taSourceQueryConfig.TemplateQuery\022Q\n\023dro"
  "p_artifact_table\030\014 \001(\01324.ml_metadata.Met"
  "adataSourceQueryConfig.TemplateQuery\022S\n\025"
  "create_artifact_table\030\r \001(\01324.ml_metadat"
  "a.MetadataSourceQueryConfig.TemplateQuer"
  "y\022R\n\024check_artifact_table\030. \001(\01324.ml_met"
  "adata.MetadataSourceQueryConfig.Template"
  "Query\022M\n\017insert_artifact\030\016 \001(\01324.ml_meta"
  "data.MetadataSourceQueryConfig.TemplateQ"
  "uery\022S\n\025select_artifact_by_id\030\017 \001(\01324.ml"
  "_metadata.MetadataSourceQueryConfig.Temp"
  "lateQuery\022a\n#select_artifact_by_type_id_"
  "and_name\030^ \001(\01324.ml_metadata.MetadataSou"
  "rceQueryConfig.TemplateQuery\022Y\n\033select_a"
  "rtifacts_by_type_id\0304 \001(\01324.ml_metadata."
  "MetadataSourceQueryConfig.TemplateQuery\022"
  "U\n\027select_artifacts_by_uri\0308 \001(\01324.ml_me"
  "tadata.MetadataSourceQueryConfig.Templat"
  "eQuery\022_\n select_artifacts_by_external_i"
  "ds\030\202\001 \001(\01324.ml_metadata.MetadataSourceQu"
  "eryConfig.TemplateQuery\022M\n\017update_artifa"
  "ct\030\025 \001(\01324.ml_metadata.MetadataSourceQue"
  "ryConfig.TemplateQuery\022Z\n\034drop_artifact_"
  "property_table\030\020 \001(\01324.ml_metadata.Metad"
  "ataSourceQueryConfig.TemplateQuery\022\\\n\036cr"
  "eate_artifact_property_table\030\021 \001(\01324.ml_"
  "metadata.MetadataSourceQueryConfig.Templ"
  "ateQuery\022[\n\035check_artifact_property_tabl"
  "e\030/ \001(\01324.ml_metadata.MetadataSourceQuer"
  "yConfig.TemplateQuery\022V\n\030insert_artifact"
  "_property\030\022 \001(\01324.ml_metadata.MetadataSo"
  "urceQueryConfig.TemplateQuery\022e\n\'select_"
  "artifact_property_by_artifact_id\030\023 \001(\01324"
  ".ml_metadata.MetadataSourceQueryConfig.T"
  "emplateQuery\022V\n\030update_artifact_property"
  "\030\026 \001(\01324.ml_metadata.MetadataSourceQuery"
  "Config.TemplateQuery\022V\n\030delete_artifact_"
  "property\030\027 \001(\01324.ml_metadata.MetadataSou"
  "rceQueryConfig.TemplateQuery\022R\n\024drop_exe"
  "cution_table\030\030 \001(\01324.ml_metadata.Metadat"
  "aSourceQueryConfig.TemplateQuery\022T\n\026crea"
  "te_execution_table\030\031 \001(\01324.ml_metadata.M"
  "etadataSourceQueryConfig.TemplateQuery\022S"
  "\n\025check_execution_table\0300 \001(\01324.ml_metad"
  "ata.MetadataSourceQueryConfig.TemplateQu"
  "ery\022N\n\020insert_execution\030\034 \001(\01324.ml_metad"
  "ata.MetadataSourceQueryConfig.TemplateQu"
  "ery\022T\n\026select_execution_by_id\030\035 \001(\01324.ml"
  "_metadata.MetadataSourceQueryConfig.Temp"
  "lateQuery\022b\n$select_execution_by_type_id"
  "_and_name\030_ \001(\01324.ml_metadata.MetadataSo"
  "urceQueryConfig.TemplateQuery\022Z\n\034select_"
  "executions_by_type_id\0305 \001(\01324.ml_metadat"
  "a.MetadataSourceQueryConfig.TemplateQuer"
  "y\022`\n!select_executions_by_external_ids\030\204"
  "\001 \001(\01324.ml_metadata.MetadataSourceQueryC"
  "onfig.TemplateQuery\022N\n\020update_execution\030"
  "\" \001(\01324.ml_metadata.MetadataSourceQueryC"
  "onfig.TemplateQuery\022[\n\035drop_execution_pr"
  "operty_table\030\032 \001(\01324.ml_metadata.Metadat"
  "aSourceQueryConfig.TemplateQuery\022]\n\037crea"
  "te_execution_property_table\030\033 \001(\01324.ml_m"
  "etadata.MetadataSourceQueryConfig.Templa"
  "teQuery\022\\\n\036check_execution_property_tabl"
  "e\0301 \001(\01324.ml_metadata.MetadataSourceQuer"
  "yConfig.TemplateQuery\022W\n\031insert_executio"
  "n_property\030\036 \001(\01324.ml_metadata.MetadataS"
  "ourceQueryConfig.TemplateQuery\022g\n)select"
  "_execution_property_by_execution_id\030\037 \001("
  "\01324.ml_metadata.MetadataSourceQueryConfi"
  "g.TemplateQuery\022W\n\031update_execution_prop"
  "erty\030  \001(\01324.ml_metadata.MetadataSourceQ"
  "ueryConfig.TemplateQuery\022W\n\031delete_execu"
  "tion_property\030! \001(\01324.ml_metadata.Metada"
  "taSourceQueryConfig.TemplateQuery\022P\n\022dro"
  "p_context_table\030C \001(\01324.ml_metadata.Meta"
  "dataSourceQueryConfig.TemplateQuery\022R\n\024c"
  "reate_context_table\030D \001(\01324.ml_metadata."
  "MetadataSourceQueryConfig.TemplateQuery\022"
  "Q\n\023check_context_table\030E \001(\01324.ml_metada"
  "ta.MetadataSourceQueryConfig.TemplateQue"
  "ry\022L\n\016insert_context\030F \001(\01324.ml_metadata"
  ".MetadataSourceQueryConfig.TemplateQuery"
  "\022R\n\024select_context_by_id\030G \001(\01324.ml_meta"
  "data.MetadataSourceQueryConfig.TemplateQ"
  "uery\022X\n\032select_contexts_by_type_id\030H \001(\013"
  "24.ml_metadata.MetadataSourceQueryConfig"
  ".TemplateQuery\022`\n\"select_context_by_type"
  "_id_and_name\030] \001(\01324.ml_metadata.Metadat"
  "aSourceQueryConfig.TemplateQuery\022^\n\037sele"
  "ct_contexts_by_external_ids\030\205\001 \001(\01324.ml_"
  "metadata.MetadataSourceQueryConfig.Templ"
  "ateQuery\022L\n\016update_context\030I \001(\01324.ml_me"
  "tadata.MetadataSourceQueryConfig.Templat"
  "eQuery\022Y\n\033drop_context_property_table\030J "
  "\001(\01324.ml_metadata.MetadataSourceQueryCon"
  "fig.TemplateQuery\022[\n\035create_context_prop"
  "erty_table\030K \001(\01324.ml_metadata.MetadataS"
  "ourceQueryConfig.TemplateQuery\022Z\n\034check_"
  "context_property_table\030L \001(\01324.ml_metada"
  "ta.MetadataSourceQueryConfig.TemplateQue"
  "ry\022U\n\027insert_context_property\030M \001(\01324.ml"
  "_metadata.MetadataSourceQueryConfig.Temp"
  "lateQuery\022c\n%select_context_property_by_"
  "context_id\030N \001(\01324.ml_metadata.MetadataS"
  "ourceQueryConfig.TemplateQuery\022U\n\027update"
  "_context_property\030O \001(\01324.ml_metadata.Me"
  "tadataSourceQueryConfig.TemplateQuery\022U\n"
  "\027delete_context_property\030P \001(\01324.ml_meta"
  "data.MetadataSourceQueryConfig.TemplateQ"
  "uery\022W\n\031drop_parent_context_table\030f \001(\0132"
  "4.ml_metadata.MetadataSourceQueryConfig."
  "TemplateQuery\022Y\n\033create_parent_context_t"
  "able\030g \001(\01324.ml_metadata.MetadataSourceQ"
  "ueryConfig.TemplateQuery\022X\n\032check_parent"
  "_context_table\030h \001(\01324.ml_metadata.Metad"
  "ataSourceQueryConfig.TemplateQuery\022S\n\025in"
  "sert_parent_context\030j \001(\01324.ml_metadata."
  "MetadataSourceQueryConfig.TemplateQuery\022"
  "a\n#select_parent_context_by_context_id\030k"
  " \001(\01324.ml_metadata.MetadataSourceQueryCo"
  "nfig.TemplateQuery\022h\n*select_parent_cont"
  "ext_by_parent_context_id\030l \001(\01324.ml_meta"
  "data.MetadataSourceQueryConfig.TemplateQ"
  "uery\022d\n%select_parent_contexts_by_contex"
  "t_ids\030\213\001 \001(\01324.ml_metadata.MetadataSourc"
  "eQueryConfig.TemplateQuery\022k\n,select_par"
  "ent_contexts_by_parent_context_ids\030\214\001 \001("
  "\01324.ml_metadata.MetadataSourceQueryConfi"
  "g.TemplateQuery\022N\n\020drop_event_table\030# \001("
  "\01324.ml_metadata.MetadataSourceQueryConfi"
  "g.TemplateQuery\022P\n\022create_event_table\030$ "
  "\001(\01324.ml_metadata.MetadataSourceQueryCon"
  "fig.TemplateQuery\022O\n\021check_event_table\0302"
  " \001(\01324.ml_metadata.MetadataSourceQueryCo"
  "nfig.TemplateQuery\022J\n\014insert_event\030% \001(\013"
  "24.ml_metadata.MetadataSourceQueryConfig"
  ".TemplateQuery\022Z\n\034select_event_by_artifa"
  "ct_ids\030` \001(\01324.ml_metadata.MetadataSourc"
  "eQueryConfig.TemplateQuery\022[\n\035select_eve"
  "nt_by_execution_ids\030a \001(\01324.ml_metadata."
  "MetadataSourceQueryConfig.TemplateQuery\022"
  "S\n\025drop_event_path_table\030( \001(\01324.ml_meta"
  "data.MetadataSourceQueryConfig.TemplateQ"
  "uery\022U\n\027create_event_path_table\030) \001(\01324."
  "ml_metadata.MetadataSourceQueryConfig.Te"
  "mplateQuery\022T\n\026check_event_path_table\0303 "
  "\001(\01324.ml_metadata.MetadataSourceQueryCon"
  "fig.TemplateQuery\022O\n\021insert_event_path\030*"
  " \001(\01324.ml_metadata.MetadataSourceQueryCo"
  "nfig.TemplateQuery\022\\\n\036select_event_path_"
  "by_event_ids\030b \001(\01324.ml_metadata.Metadat"
  "aSourceQueryConfig.TemplateQuery\022T\n\026drop"
  "_association_table\030Q \001(\01324.ml_metadata.M"
  "etadataSourceQueryConfig.TemplateQuery\022V"
  "\n\030create_association_table\030R \001(\01324.ml_me"
  "tadata.MetadataSourceQueryConfig.Templat"
  "eQuery\022U\n\027check_association_table\030S \001(\0132"
  "4.ml_metadata.MetadataSourceQueryConfig."
  "TemplateQuery\022P\n\022insert_association\030T \001("
  "\01324.ml_metadata.MetadataSourceQueryConfi"
  "g.TemplateQuery\022^\n select_association_by"
  "_context_id\030U \001(\01324.ml_metadata.Metadata"
  "SourceQueryConfig.TemplateQuery\022c\n$selec"
  "t_associations_by_execution_ids\030\216\001 \001(\01324"
  ".ml_metadata.MetadataSourceQueryConfig.T"
  "emplateQuery\022T\n\026drop_attribution_table\030W"
  " \001(\01324.ml_metadata.MetadataSourceQueryCo"
  "nfig.TemplateQuery\022V\n\030create_attribution"
  "_table\030X \001(\01324.ml_metadata.MetadataSourc"
  "eQueryConfig.TemplateQuery\022U\n\027check_attr"
  "ibution_table\030Y \001(\01324.ml_metadata.Metada"
  "taSourceQueryConfig.TemplateQuery\022P\n\022ins"
  "ert_attribution\030Z \001(\01324.ml_metadata.Meta"
  "dataSourceQueryConfig.TemplateQuery\022^\n s"
  "elect_attribution_by_context_id\030[ \001(\01324."
  "ml_metadata.MetadataSourceQueryConfig.Te"
  "mplateQuery\022b\n#select_attributions_by_ar"
  "tifact_ids\030\217\001 \001(\01324.ml_metadata.Metadata"
  "SourceQueryConfig.TemplateQuery\022Q\n\023drop_"
  "mlmd_env_table\030< \001(\01324.ml_metadata.Metad"
  "ataSourceQueryConfig.TemplateQuery\022S\n\025cr"
  "eate_mlmd_env_table\030= \001(\01324.ml_metadata."
  "MetadataSourceQueryConfig.TemplateQuery\022"
  "\026\n\016schema_version\030; \001(\003\022R\n\024check_mlmd_en"
  "v_table\030\? \001(\01324.ml_metadata.MetadataSour"
  "ceQueryConfig.TemplateQuery\022]\n\036check_mlm"
  "d_env_table_existence\030\215\001 \001(\01324.ml_metada"
  "ta.MetadataSourceQueryConfig.TemplateQue"
  "ry\022S\n\025insert_schema_version\030B \001(\01324.ml_m"
  "etadata.MetadataSourceQueryConfig.Templa"
  "teQuery\022S\n\025update_schema_version\030@ \001(\01324"
  ".ml_metadata.MetadataSourceQueryConfig.T"
  "emplateQuery\022U\n\027check_tables_in_v0_13_2\030"
  "A \001(\01324.ml_metadata.MetadataSourceQueryC"
  "onfig.TemplateQuery\022O\n\021secondary_indices"
  "\030i \003(\01324.ml_metadata.MetadataSourceQuery"
  "Config.TemplateQuery\022W\n\021migration_scheme"
  "s\030> \003(\0132<.ml_metadata.MetadataSourceQuer"
  "yConfig.MigrationSchemesEntry\022S\n\025delete_"
  "contexts_by_id\030p \001(\01324.ml_metadata.Metad"
  "ataSourceQueryConfig.TemplateQuery\022g\n)de"
  "lete_contexts_properties_by_contexts_id\030"
  "q \001(\01324.ml_metadata.MetadataSourceQueryC"
  "onfig.TemplateQuery\022b\n$delete_parent_con"
  "texts_by_parent_ids\030r \001(\01324.ml_metadata."
  "MetadataSourceQueryConfig.TemplateQuery\022"
  "a\n#delete_parent_contexts_by_child_ids\030s"
  " \001(\01324.ml_metadata.MetadataSourceQueryCo"
  "nfig.TemplateQuery\022p\n1delete_parent_cont"
  "exts_by_parent_id_and_child_ids\030\203\001 \001(\01324"
  ".ml_metadata.MetadataSourceQueryConfig.T"
  "emplateQuery\022T\n\026delete_artifacts_by_id\030t"
  " \001(\01324.ml_metadata.MetadataSourceQueryCo"
  "nfig.TemplateQuery\022i\n+delete_artifacts_p"
  "roperties_by_artifacts_id\030u \001(\01324.ml_met"
  "adata.MetadataSourceQueryConfig.Template"
  "Query\022U\n\027delete_executions_by_id\030v \001(\01324"
  ".ml_metadata.MetadataSourceQueryConfig.T"
  "emplateQuery\022k\n-delete_executions_proper"
  "ties_by_executions_id\030w \001(\01324.ml_metadat"
  "a.MetadataSourceQueryConfig.TemplateQuer"
  "y\022[\n\035delete_events_by_artifacts_id\030x \001(\013"
  "24.ml_metadata.MetadataSourceQueryConfig"
  ".TemplateQuery\022\\\n\036delete_events_by_execu"
  "tions_id\030y \001(\01324.ml_metadata.MetadataSou"
  "rceQueryConfig.TemplateQuery\022`\n\"delete_a"
  "ssociations_by_contexts_id\030z \001(\01324.ml_me"
  "tadata.MetadataSourceQueryConfig.Templat"
  "eQuery\022b\n$delete_associations_by_executi"
  "ons_id\030{ \001(\01324.ml_metadata.MetadataSourc"
  "eQueryConfig.TemplateQuery\022`\n\"delete_att"
  "ributions_by_contexts_id\030| \001(\01324.ml_meta"
  "data.MetadataSourceQueryConfig.TemplateQ"
  "uery\022a\n#delete_attributions_by_artifacts"
  "_id\030} \001(\01324.ml_metadata.MetadataSourceQu"
  "eryConfig.TemplateQuery\022P\n\022delete_event_"
  "paths\030~ \001(\01324.ml_metadata.MetadataSource"
  "QueryConfig.TemplateQuery\022P\n\022delete_pare"
  "nt_type\030\177 \001(\01324.ml_metadata.MetadataSour"
  "ceQueryConfig.TemplateQuery\022[\n\034select_pr"
  "operties_by_type_id\030\201\001 \001(\01324.ml_metadata"
  ".MetadataSourceQueryConfig.TemplateQuery"
  "\022D\n%metadata_source_type_specific_option"
  "s\030\207\001 \001(\0132\024.google.protobuf.Any\0325\n\rTempla"
  "teQuery\022\r\n\005query\030\001 \001(\t\022\025\n\rparameter_num\030"
  "\002 \001(\005\032E\n\016DbVerification\022\030\n\020total_num_tab"
  "les\030\001 \001(\005\022\031\n\021total_num_indexes\030\002 \001(\005\032\255\005\n"
  "\017MigrationScheme\022M\n\017upgrade_queries\030\001 \003("
  "\01324.ml_metadata.MetadataSourceQueryConfi"
  "g.TemplateQuery\022O\n\021downgrade_queries\030\003 \003"
  "(\01324.ml_metadata.MetadataSourceQueryConf"
  "ig.TemplateQuery\022g\n\024upgrade_verification"
  "\030\002 \001(\0132I.ml_metadata.MetadataSourceQuery"
  "Config.MigrationScheme.VerificationSchem"
  "e\022i\n\026downgrade_verification\030\004 \001(\0132I.ml_m"
  "etadata.MetadataSourceQueryConfig.Migrat"
  "ionScheme.VerificationScheme\022N\n\017db_verif"
  "ication\030\005 \001(\01325.ml_metadata.MetadataSour"
  "ceQueryConfig.DbVerification\032\325\001\n\022Verific"
  "ationScheme\022\\\n\036previous_version_setup_qu"
  "eries\030\001 \003(\01324.ml_metadata.MetadataSource"
  "QueryConfig.TemplateQuery\022a\n#post_migrat"
  "ion_verification_queries\030\002 \003(\01324.ml_meta"
  "data.MetadataSourceQueryConfig.TemplateQ"
  "uery\032o\n\025MigrationSchemesEntry\022\013\n\003key\030\001 \001"
  "(\003\022E\n\005value\030\002 \001(\01326.ml_metadata.Metadata"
  "SourceQueryConfig.MigrationScheme:\0028\001J\004\010"
  "V\020WJ\004\010\\\020]J\004\010&\020\'J\004\010\'\020(J\004\010+\020,\"0\n\024MySQLSour"
  "ceErrorInfo\022\030\n\020mysql_error_code\030\001 \001(\003*\242\001"
  "\n\022MetadataSourceType\022\033\n\027UNKNOWN_METADATA"
  "_SOURCE\020\000\022\030\n\024FAKE_METADATA_SOURCE\020\001\022\031\n\025M"
  "YSQL_METADATA_SOURCE\020\002\022\032\n\026SQLITE_METADAT"
  "A_SOURCE\020\003\022\036\n\032POSTGRESQL_METADATA_SOURCE"
  "\020\006b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto = {
    false, false, 13450, descriptor_table_protodef_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto,
    "ml_metadata/proto/metadata_source.proto",
    &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once, descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto::offsets,
    file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto, file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto,
    file_level_service_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter() {
  return &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto);
namespace ml_metadata {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetadataSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[0];
}
bool MetadataSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RecordSet_Record::_Internal {
 public:
};

RecordSet_Record::RecordSet_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.RecordSet.Record)
}
RecordSet_Record::RecordSet_Record(const RecordSet_Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordSet_Record* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.RecordSet.Record)
}

inline void RecordSet_Record::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecordSet_Record::~RecordSet_Record() {
  // @@protoc_insertion_point(destructor:ml_metadata.RecordSet.Record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordSet_Record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void RecordSet_Record::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordSet_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.RecordSet.Record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordSet_Record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ml_metadata.RecordSet.Record.values"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordSet_Record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.RecordSet.Record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ml_metadata.RecordSet.Record.values");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.RecordSet.Record)
  return target;
}

size_t RecordSet_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.RecordSet.Record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.values_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordSet_Record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordSet_Record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordSet_Record::GetClassData() const { return &_class_data_; }


void RecordSet_Record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordSet_Record*>(&to_msg);
  auto& from = static_cast<const RecordSet_Record&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.RecordSet.Record)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordSet_Record::CopyFrom(const RecordSet_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.RecordSet.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSet_Record::IsInitialized() const {
  return true;
}

void RecordSet_Record::InternalSwap(RecordSet_Record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordSet_Record::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[0]);
}

// ===================================================================

class RecordSet::_Internal {
 public:
};

RecordSet::RecordSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.RecordSet)
}
RecordSet::RecordSet(const RecordSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){from._impl_.column_names_}
    , decltype(_impl_.records_){from._impl_.records_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.RecordSet)
}

inline void RecordSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){arena}
    , decltype(_impl_.records_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecordSet::~RecordSet() {
  // @@protoc_insertion_point(destructor:ml_metadata.RecordSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_names_.~RepeatedPtrField();
  _impl_.records_.~RepeatedPtrField();
}

void RecordSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordSet::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.RecordSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_names_.Clear();
  _impl_.records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string column_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ml_metadata.RecordSet.column_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.RecordSet.Record records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.RecordSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string column_names = 1;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ml_metadata.RecordSet.column_names");
    target = stream->WriteString(1, s, target);
  }

  // repeated .ml_metadata.RecordSet.Record records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.RecordSet)
  return target;
}

size_t RecordSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.RecordSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_names_.size());
  for (int i = 0, n = _impl_.column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_names_.Get(i));
  }

  // repeated .ml_metadata.RecordSet.Record records = 2;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->_impl_.records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordSet::GetClassData() const { return &_class_data_; }


void RecordSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordSet*>(&to_msg);
  auto& from = static_cast<const RecordSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.RecordSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_names_.MergeFrom(from._impl_.column_names_);
  _this->_impl_.records_.MergeFrom(from._impl_.records_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordSet::CopyFrom(const RecordSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.RecordSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSet::IsInitialized() const {
  return true;
}

void RecordSet::InternalSwap(RecordSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.column_names_.InternalSwap(&other->_impl_.column_names_);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[1]);
}

// ===================================================================

class MetadataSourceQueryConfig_TemplateQuery::_Internal {
 public:
};

MetadataSourceQueryConfig_TemplateQuery::MetadataSourceQueryConfig_TemplateQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MetadataSourceQueryConfig.TemplateQuery)
}
MetadataSourceQueryConfig_TemplateQuery::MetadataSourceQueryConfig_TemplateQuery(const MetadataSourceQueryConfig_TemplateQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetadataSourceQueryConfig_TemplateQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_){}
    , decltype(_impl_.parameter_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.parameter_num_ = from._impl_.parameter_num_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MetadataSourceQueryConfig.TemplateQuery)
}

inline void MetadataSourceQueryConfig_TemplateQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_){}
    , decltype(_impl_.parameter_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetadataSourceQueryConfig_TemplateQuery::~MetadataSourceQueryConfig_TemplateQuery() {
  // @@protoc_insertion_point(destructor:ml_metadata.MetadataSourceQueryConfig.TemplateQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataSourceQueryConfig_TemplateQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_.Destroy();
}

void MetadataSourceQueryConfig_TemplateQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetadataSourceQueryConfig_TemplateQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MetadataSourceQueryConfig.TemplateQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_.ClearToEmpty();
  _impl_.parameter_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataSourceQueryConfig_TemplateQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ml_metadata.MetadataSourceQueryConfig.TemplateQuery.query"));
        } else
          goto handle_unusual;
        continue;
      // int32 parameter_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.parameter_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataSourceQueryConfig_TemplateQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MetadataSourceQueryConfig.TemplateQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ml_metadata.MetadataSourceQueryConfig.TemplateQuery.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  // int32 parameter_num = 2;
  if (this->_internal_parameter_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_parameter_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MetadataSourceQueryConfig.TemplateQuery)
  return target;
}

size_t MetadataSourceQueryConfig_TemplateQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MetadataSourceQueryConfig.TemplateQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // int32 parameter_num = 2;
  if (this->_internal_parameter_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parameter_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataSourceQueryConfig_TemplateQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetadataSourceQueryConfig_TemplateQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataSourceQueryConfig_TemplateQuery::GetClassData() const { return &_class_data_; }


void MetadataSourceQueryConfig_TemplateQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetadataSourceQueryConfig_TemplateQuery*>(&to_msg);
  auto& from = static_cast<const MetadataSourceQueryConfig_TemplateQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MetadataSourceQueryConfig.TemplateQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  if (from._internal_parameter_num() != 0) {
    _this->_internal_set_parameter_num(from._internal_parameter_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataSourceQueryConfig_TemplateQuery::CopyFrom(const MetadataSourceQueryConfig_TemplateQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MetadataSourceQueryConfig.TemplateQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataSourceQueryConfig_TemplateQuery::IsInitialized() const {
  return true;
}

void MetadataSourceQueryConfig_TemplateQuery::InternalSwap(MetadataSourceQueryConfig_TemplateQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  swap(_impl_.parameter_num_, other->_impl_.parameter_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataSourceQueryConfig_TemplateQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[2]);
}

// ===================================================================

class MetadataSourceQueryConfig_DbVerification::_Internal {
 public:
};

MetadataSourceQueryConfig_DbVerification::MetadataSourceQueryConfig_DbVerification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MetadataSourceQueryConfig.DbVerification)
}
MetadataSourceQueryConfig_DbVerification::MetadataSourceQueryConfig_DbVerification(const MetadataSourceQueryConfig_DbVerification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetadataSourceQueryConfig_DbVerification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_num_tables_){}
    , decltype(_impl_.total_num_indexes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_num_tables_, &from._impl_.total_num_tables_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_num_indexes_) -
    reinterpret_cast<char*>(&_impl_.total_num_tables_)) + sizeof(_impl_.total_num_indexes_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MetadataSourceQueryConfig.DbVerification)
}

inline void MetadataSourceQueryConfig_DbVerification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_num_tables_){0}
    , decltype(_impl_.total_num_indexes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetadataSourceQueryConfig_DbVerification::~MetadataSourceQueryConfig_DbVerification() {
  // @@protoc_insertion_point(destructor:ml_metadata.MetadataSourceQueryConfig.DbVerification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataSourceQueryConfig_DbVerification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetadataSourceQueryConfig_DbVerification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetadataSourceQueryConfig_DbVerification::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MetadataSourceQueryConfig.DbVerification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_num_tables_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_num_indexes_) -
      reinterpret_cast<char*>(&_impl_.total_num_tables_)) + sizeof(_impl_.total_num_indexes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataSourceQueryConfig_DbVerification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_num_tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_num_tables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_num_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_num_indexes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataSourceQueryConfig_DbVerification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MetadataSourceQueryConfig.DbVerification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_num_tables = 1;
  if (this->_internal_total_num_tables() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_num_tables(), target);
  }

  // int32 total_num_indexes = 2;
  if (this->_internal_total_num_indexes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_num_indexes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MetadataSourceQueryConfig.DbVerification)
  return target;
}

size_t MetadataSourceQueryConfig_DbVerification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MetadataSourceQueryConfig.DbVerification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_num_tables = 1;
  if (this->_internal_total_num_tables() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_num_tables());
  }

  // int32 total_num_indexes = 2;
  if (this->_internal_total_num_indexes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_num_indexes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataSourceQueryConfig_DbVerification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetadataSourceQueryConfig_DbVerification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataSourceQueryConfig_DbVerification::GetClassData() const { return &_class_data_; }


void MetadataSourceQueryConfig_DbVerification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetadataSourceQueryConfig_DbVerification*>(&to_msg);
  auto& from = static_cast<const MetadataSourceQueryConfig_DbVerification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MetadataSourceQueryConfig.DbVerification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_num_tables() != 0) {
    _this->_internal_set_total_num_tables(from._internal_total_num_tables());
  }
  if (from._internal_total_num_indexes() != 0) {
    _this->_internal_set_total_num_indexes(from._internal_total_num_indexes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataSourceQueryConfig_DbVerification::CopyFrom(const MetadataSourceQueryConfig_DbVerification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MetadataSourceQueryConfig.DbVerification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataSourceQueryConfig_DbVerification::IsInitialized() const {
  return true;
}

void MetadataSourceQueryConfig_DbVerification::InternalSwap(MetadataSourceQueryConfig_DbVerification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetadataSourceQueryConfig_DbVerification, _impl_.total_num_indexes_)
      + sizeof(MetadataSourceQueryConfig_DbVerification::_impl_.total_num_indexes_)
      - PROTOBUF_FIELD_OFFSET(MetadataSourceQueryConfig_DbVerification, _impl_.total_num_tables_)>(
          reinterpret_cast<char*>(&_impl_.total_num_tables_),
          reinterpret_cast<char*>(&other->_impl_.total_num_tables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataSourceQueryConfig_DbVerification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[3]);
}

// ===================================================================

class MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::_Internal {
 public:
};

MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme)
}
MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme(const MetadataSourceQueryConfig_MigrationScheme_VerificationScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetadataSourceQueryConfig_MigrationScheme_VerificationScheme* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.previous_version_setup_queries_){from._impl_.previous_version_setup_queries_}
    , decltype(_impl_.post_migration_verification_queries_){from._impl_.post_migration_verification_queries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme)
}

inline void MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.previous_version_setup_queries_){arena}
    , decltype(_impl_.post_migration_verification_queries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::~MetadataSourceQueryConfig_MigrationScheme_VerificationScheme() {
  // @@protoc_insertion_point(destructor:ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.previous_version_setup_queries_.~RepeatedPtrField();
  _impl_.post_migration_verification_queries_.~RepeatedPtrField();
}

void MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.previous_version_setup_queries_.Clear();
  _impl_.post_migration_verification_queries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery previous_version_setup_queries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_version_setup_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery post_migration_verification_queries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_post_migration_verification_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery previous_version_setup_queries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_previous_version_setup_queries_size()); i < n; i++) {
    const auto& repfield = this->_internal_previous_version_setup_queries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery post_migration_verification_queries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_post_migration_verification_queries_size()); i < n; i++) {
    const auto& repfield = this->_internal_post_migration_verification_queries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme)
  return target;
}

size_t MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery previous_version_setup_queries = 1;
  total_size += 1UL * this->_internal_previous_version_setup_queries_size();
  for (const auto& msg : this->_impl_.previous_version_setup_queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery post_migration_verification_queries = 2;
  total_size += 1UL * this->_internal_post_migration_verification_queries_size();
  for (const auto& msg : this->_impl_.post_migration_verification_queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::GetClassData() const { return &_class_data_; }


void MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetadataSourceQueryConfig_MigrationScheme_VerificationScheme*>(&to_msg);
  auto& from = static_cast<const MetadataSourceQueryConfig_MigrationScheme_VerificationScheme&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.previous_version_setup_queries_.MergeFrom(from._impl_.previous_version_setup_queries_);
  _this->_impl_.post_migration_verification_queries_.MergeFrom(from._impl_.post_migration_verification_queries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::CopyFrom(const MetadataSourceQueryConfig_MigrationScheme_VerificationScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::IsInitialized() const {
  return true;
}

void MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::InternalSwap(MetadataSourceQueryConfig_MigrationScheme_VerificationScheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.previous_version_setup_queries_.InternalSwap(&other->_impl_.previous_version_setup_queries_);
  _impl_.post_migration_verification_queries_.InternalSwap(&other->_impl_.post_migration_verification_queries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[4]);
}

// ===================================================================

class MetadataSourceQueryConfig_MigrationScheme::_Internal {
 public:
  static const ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme& upgrade_verification(const MetadataSourceQueryConfig_MigrationScheme* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme& downgrade_verification(const MetadataSourceQueryConfig_MigrationScheme* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_DbVerification& db_verification(const MetadataSourceQueryConfig_MigrationScheme* msg);
};

const ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme&
MetadataSourceQueryConfig_MigrationScheme::_Internal::upgrade_verification(const MetadataSourceQueryConfig_MigrationScheme* msg) {
  return *msg->_impl_.upgrade_verification_;
}
const ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme&
MetadataSourceQueryConfig_MigrationScheme::_Internal::downgrade_verification(const MetadataSourceQueryConfig_MigrationScheme* msg) {
  return *msg->_impl_.downgrade_verification_;
}
const ::ml_metadata::MetadataSourceQueryConfig_DbVerification&
MetadataSourceQueryConfig_MigrationScheme::_Internal::db_verification(const MetadataSourceQueryConfig_MigrationScheme* msg) {
  return *msg->_impl_.db_verification_;
}
MetadataSourceQueryConfig_MigrationScheme::MetadataSourceQueryConfig_MigrationScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MetadataSourceQueryConfig.MigrationScheme)
}
MetadataSourceQueryConfig_MigrationScheme::MetadataSourceQueryConfig_MigrationScheme(const MetadataSourceQueryConfig_MigrationScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetadataSourceQueryConfig_MigrationScheme* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.upgrade_queries_){from._impl_.upgrade_queries_}
    , decltype(_impl_.downgrade_queries_){from._impl_.downgrade_queries_}
    , decltype(_impl_.upgrade_verification_){nullptr}
    , decltype(_impl_.downgrade_verification_){nullptr}
    , decltype(_impl_.db_verification_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upgrade_verification()) {
    _this->_impl_.upgrade_verification_ = new ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme(*from._impl_.upgrade_verification_);
  }
  if (from._internal_has_downgrade_verification()) {
    _this->_impl_.downgrade_verification_ = new ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme(*from._impl_.downgrade_verification_);
  }
  if (from._internal_has_db_verification()) {
    _this->_impl_.db_verification_ = new ::ml_metadata::MetadataSourceQueryConfig_DbVerification(*from._impl_.db_verification_);
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MetadataSourceQueryConfig.MigrationScheme)
}

inline void MetadataSourceQueryConfig_MigrationScheme::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.upgrade_queries_){arena}
    , decltype(_impl_.downgrade_queries_){arena}
    , decltype(_impl_.upgrade_verification_){nullptr}
    , decltype(_impl_.downgrade_verification_){nullptr}
    , decltype(_impl_.db_verification_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetadataSourceQueryConfig_MigrationScheme::~MetadataSourceQueryConfig_MigrationScheme() {
  // @@protoc_insertion_point(destructor:ml_metadata.MetadataSourceQueryConfig.MigrationScheme)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataSourceQueryConfig_MigrationScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.upgrade_queries_.~RepeatedPtrField();
  _impl_.downgrade_queries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.upgrade_verification_;
  if (this != internal_default_instance()) delete _impl_.downgrade_verification_;
  if (this != internal_default_instance()) delete _impl_.db_verification_;
}

void MetadataSourceQueryConfig_MigrationScheme::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetadataSourceQueryConfig_MigrationScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.upgrade_queries_.Clear();
  _impl_.downgrade_queries_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.upgrade_verification_ != nullptr) {
    delete _impl_.upgrade_verification_;
  }
  _impl_.upgrade_verification_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.downgrade_verification_ != nullptr) {
    delete _impl_.downgrade_verification_;
  }
  _impl_.downgrade_verification_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.db_verification_ != nullptr) {
    delete _impl_.db_verification_;
  }
  _impl_.db_verification_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataSourceQueryConfig_MigrationScheme::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery upgrade_queries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upgrade_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme upgrade_verification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgrade_verification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery downgrade_queries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_downgrade_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme downgrade_verification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_downgrade_verification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.DbVerification db_verification = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_db_verification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataSourceQueryConfig_MigrationScheme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery upgrade_queries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_upgrade_queries_size()); i < n; i++) {
    const auto& repfield = this->_internal_upgrade_queries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme upgrade_verification = 2;
  if (this->_internal_has_upgrade_verification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::upgrade_verification(this),
        _Internal::upgrade_verification(this).GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery downgrade_queries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_downgrade_queries_size()); i < n; i++) {
    const auto& repfield = this->_internal_downgrade_queries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme downgrade_verification = 4;
  if (this->_internal_has_downgrade_verification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::downgrade_verification(this),
        _Internal::downgrade_verification(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.DbVerification db_verification = 5;
  if (this->_internal_has_db_verification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::db_verification(this),
        _Internal::db_verification(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MetadataSourceQueryConfig.MigrationScheme)
  return target;
}

size_t MetadataSourceQueryConfig_MigrationScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery upgrade_queries = 1;
  total_size += 1UL * this->_internal_upgrade_queries_size();
  for (const auto& msg : this->_impl_.upgrade_queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery downgrade_queries = 3;
  total_size += 1UL * this->_internal_downgrade_queries_size();
  for (const auto& msg : this->_impl_.downgrade_queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme upgrade_verification = 2;
  if (this->_internal_has_upgrade_verification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upgrade_verification_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme downgrade_verification = 4;
  if (this->_internal_has_downgrade_verification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.downgrade_verification_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.DbVerification db_verification = 5;
  if (this->_internal_has_db_verification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.db_verification_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataSourceQueryConfig_MigrationScheme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetadataSourceQueryConfig_MigrationScheme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataSourceQueryConfig_MigrationScheme::GetClassData() const { return &_class_data_; }


void MetadataSourceQueryConfig_MigrationScheme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetadataSourceQueryConfig_MigrationScheme*>(&to_msg);
  auto& from = static_cast<const MetadataSourceQueryConfig_MigrationScheme&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.upgrade_queries_.MergeFrom(from._impl_.upgrade_queries_);
  _this->_impl_.downgrade_queries_.MergeFrom(from._impl_.downgrade_queries_);
  if (from._internal_has_upgrade_verification()) {
    _this->_internal_mutable_upgrade_verification()->::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::MergeFrom(
        from._internal_upgrade_verification());
  }
  if (from._internal_has_downgrade_verification()) {
    _this->_internal_mutable_downgrade_verification()->::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme::MergeFrom(
        from._internal_downgrade_verification());
  }
  if (from._internal_has_db_verification()) {
    _this->_internal_mutable_db_verification()->::ml_metadata::MetadataSourceQueryConfig_DbVerification::MergeFrom(
        from._internal_db_verification());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataSourceQueryConfig_MigrationScheme::CopyFrom(const MetadataSourceQueryConfig_MigrationScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MetadataSourceQueryConfig.MigrationScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataSourceQueryConfig_MigrationScheme::IsInitialized() const {
  return true;
}

void MetadataSourceQueryConfig_MigrationScheme::InternalSwap(MetadataSourceQueryConfig_MigrationScheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.upgrade_queries_.InternalSwap(&other->_impl_.upgrade_queries_);
  _impl_.downgrade_queries_.InternalSwap(&other->_impl_.downgrade_queries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetadataSourceQueryConfig_MigrationScheme, _impl_.db_verification_)
      + sizeof(MetadataSourceQueryConfig_MigrationScheme::_impl_.db_verification_)
      - PROTOBUF_FIELD_OFFSET(MetadataSourceQueryConfig_MigrationScheme, _impl_.upgrade_verification_)>(
          reinterpret_cast<char*>(&_impl_.upgrade_verification_),
          reinterpret_cast<char*>(&other->_impl_.upgrade_verification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataSourceQueryConfig_MigrationScheme::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[5]);
}

// ===================================================================

MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse() {}
MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse::MergeFrom(const MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[6]);
}

// ===================================================================

class MetadataSourceQueryConfig::_Internal {
 public:
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_type_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_type_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_type_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_artifact_type(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_execution_type(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_context_type(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_types_by_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_types_by_external_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_type_by_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_type_by_name(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_type_by_name_and_version(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_types_by_names(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_types_by_names_and_versions(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_all_types(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& update_type(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_parent_type_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_parent_type_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_parent_type_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_parent_type(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_parent_type_by_type_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_type_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_type_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_type_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_type_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_property_by_type_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_last_insert_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_artifact_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_artifact_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_artifact_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_artifact(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_artifact_by_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_artifact_by_type_id_and_name(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_artifacts_by_type_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_artifacts_by_uri(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_artifacts_by_external_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& update_artifact(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_artifact_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_artifact_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_artifact_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_artifact_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_artifact_property_by_artifact_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& update_artifact_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_artifact_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_execution_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_execution_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_execution_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_execution(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_execution_by_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_execution_by_type_id_and_name(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_executions_by_type_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_executions_by_external_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& update_execution(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_execution_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_execution_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_execution_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_execution_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_execution_property_by_execution_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& update_execution_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_execution_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_context_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_context_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_context_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_context(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_context_by_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_contexts_by_type_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_context_by_type_id_and_name(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_contexts_by_external_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& update_context(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_context_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_context_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_context_property_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_context_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_context_property_by_context_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& update_context_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_context_property(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_parent_context_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_parent_context_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_parent_context_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_parent_context(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_parent_context_by_context_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_parent_context_by_parent_context_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_parent_contexts_by_context_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_parent_contexts_by_parent_context_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_event_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_event_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_event_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_event(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_event_by_artifact_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_event_by_execution_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_event_path_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_event_path_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_event_path_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_event_path(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_event_path_by_event_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_association_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_association_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_association_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_association(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_association_by_context_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_associations_by_execution_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_attribution_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_attribution_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_attribution_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_attribution(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_attribution_by_context_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_attributions_by_artifact_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& drop_mlmd_env_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& create_mlmd_env_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_mlmd_env_table(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_mlmd_env_table_existence(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& insert_schema_version(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& update_schema_version(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& check_tables_in_v0_13_2(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_contexts_by_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_contexts_properties_by_contexts_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_parent_contexts_by_parent_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_parent_contexts_by_child_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_parent_contexts_by_parent_id_and_child_ids(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_artifacts_by_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_artifacts_properties_by_artifacts_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_executions_by_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_executions_properties_by_executions_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_events_by_artifacts_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_events_by_executions_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_associations_by_contexts_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_associations_by_executions_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_attributions_by_contexts_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_attributions_by_artifacts_id(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_event_paths(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& delete_parent_type(const MetadataSourceQueryConfig* msg);
  static const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery& select_properties_by_type_id(const MetadataSourceQueryConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& metadata_source_type_specific_options(const MetadataSourceQueryConfig* msg);
};

const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_type_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_type_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_type_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_type_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_type_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_type_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_artifact_type(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_artifact_type_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_execution_type(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_execution_type_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_context_type(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_context_type_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_types_by_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_types_by_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_types_by_external_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_types_by_external_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_type_by_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_type_by_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_type_by_name(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_type_by_name_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_type_by_name_and_version(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_type_by_name_and_version_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_types_by_names(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_types_by_names_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_types_by_names_and_versions(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_types_by_names_and_versions_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_all_types(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_all_types_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::update_type(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.update_type_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_parent_type_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_parent_type_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_parent_type_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_parent_type_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_parent_type_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_parent_type_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_parent_type(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_parent_type_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_parent_type_by_type_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_parent_type_by_type_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_type_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_type_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_type_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_type_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_type_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_type_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_type_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_type_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_property_by_type_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_property_by_type_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_last_insert_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_last_insert_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_artifact_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_artifact_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_artifact_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_artifact_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_artifact_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_artifact_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_artifact(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_artifact_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_artifact_by_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_artifact_by_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_artifact_by_type_id_and_name(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_artifact_by_type_id_and_name_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_artifacts_by_type_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_artifacts_by_type_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_artifacts_by_uri(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_artifacts_by_uri_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_artifacts_by_external_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_artifacts_by_external_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::update_artifact(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.update_artifact_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_artifact_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_artifact_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_artifact_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_artifact_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_artifact_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_artifact_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_artifact_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_artifact_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_artifact_property_by_artifact_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_artifact_property_by_artifact_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::update_artifact_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.update_artifact_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_artifact_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_artifact_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_execution_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_execution_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_execution_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_execution_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_execution_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_execution_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_execution(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_execution_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_execution_by_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_execution_by_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_execution_by_type_id_and_name(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_execution_by_type_id_and_name_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_executions_by_type_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_executions_by_type_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_executions_by_external_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_executions_by_external_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::update_execution(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.update_execution_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_execution_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_execution_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_execution_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_execution_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_execution_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_execution_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_execution_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_execution_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_execution_property_by_execution_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_execution_property_by_execution_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::update_execution_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.update_execution_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_execution_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_execution_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_context_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_context_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_context_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_context_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_context_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_context_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_context(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_context_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_context_by_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_context_by_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_contexts_by_type_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_contexts_by_type_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_context_by_type_id_and_name(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_context_by_type_id_and_name_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_contexts_by_external_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_contexts_by_external_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::update_context(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.update_context_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_context_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_context_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_context_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_context_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_context_property_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_context_property_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_context_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_context_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_context_property_by_context_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_context_property_by_context_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::update_context_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.update_context_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_context_property(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_context_property_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_parent_context_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_parent_context_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_parent_context_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_parent_context_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_parent_context_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_parent_context_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_parent_context(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_parent_context_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_parent_context_by_context_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_parent_context_by_context_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_parent_context_by_parent_context_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_parent_context_by_parent_context_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_parent_contexts_by_context_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_parent_contexts_by_context_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_parent_contexts_by_parent_context_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_parent_contexts_by_parent_context_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_event_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_event_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_event_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_event_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_event_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_event_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_event(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_event_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_event_by_artifact_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_event_by_artifact_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_event_by_execution_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_event_by_execution_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_event_path_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_event_path_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_event_path_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_event_path_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_event_path_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_event_path_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_event_path(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_event_path_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_event_path_by_event_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_event_path_by_event_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_association_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_association_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_association_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_association_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_association_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_association_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_association(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_association_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_association_by_context_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_association_by_context_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_associations_by_execution_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_associations_by_execution_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_attribution_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_attribution_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_attribution_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_attribution_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_attribution_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_attribution_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_attribution(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_attribution_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_attribution_by_context_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_attribution_by_context_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_attributions_by_artifact_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_attributions_by_artifact_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::drop_mlmd_env_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.drop_mlmd_env_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::create_mlmd_env_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.create_mlmd_env_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_mlmd_env_table(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_mlmd_env_table_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_mlmd_env_table_existence(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_mlmd_env_table_existence_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::insert_schema_version(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.insert_schema_version_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::update_schema_version(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.update_schema_version_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::check_tables_in_v0_13_2(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.check_tables_in_v0_13_2_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_contexts_by_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_contexts_by_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_contexts_properties_by_contexts_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_contexts_properties_by_contexts_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_parent_contexts_by_parent_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_parent_contexts_by_parent_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_parent_contexts_by_child_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_parent_contexts_by_child_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_parent_contexts_by_parent_id_and_child_ids(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_parent_contexts_by_parent_id_and_child_ids_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_artifacts_by_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_artifacts_by_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_artifacts_properties_by_artifacts_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_artifacts_properties_by_artifacts_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_executions_by_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_executions_by_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_executions_properties_by_executions_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_executions_properties_by_executions_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_events_by_artifacts_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_events_by_artifacts_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_events_by_executions_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_events_by_executions_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_associations_by_contexts_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_associations_by_contexts_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_associations_by_executions_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_associations_by_executions_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_attributions_by_contexts_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_attributions_by_contexts_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_attributions_by_artifacts_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_attributions_by_artifacts_id_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_event_paths(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_event_paths_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::delete_parent_type(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.delete_parent_type_;
}
const ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery&
MetadataSourceQueryConfig::_Internal::select_properties_by_type_id(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.select_properties_by_type_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
MetadataSourceQueryConfig::_Internal::metadata_source_type_specific_options(const MetadataSourceQueryConfig* msg) {
  return *msg->_impl_.metadata_source_type_specific_options_;
}
void MetadataSourceQueryConfig::clear_metadata_source_type_specific_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_source_type_specific_options_ != nullptr) {
    delete _impl_.metadata_source_type_specific_options_;
  }
  _impl_.metadata_source_type_specific_options_ = nullptr;
}
MetadataSourceQueryConfig::MetadataSourceQueryConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MetadataSourceQueryConfig::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MetadataSourceQueryConfig)
}
MetadataSourceQueryConfig::MetadataSourceQueryConfig(const MetadataSourceQueryConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetadataSourceQueryConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.migration_schemes_)*/{}
    , decltype(_impl_.secondary_indices_){from._impl_.secondary_indices_}
    , decltype(_impl_.drop_type_table_){nullptr}
    , decltype(_impl_.create_type_table_){nullptr}
    , decltype(_impl_.select_type_by_id_){nullptr}
    , decltype(_impl_.drop_type_property_table_){nullptr}
    , decltype(_impl_.create_type_property_table_){nullptr}
    , decltype(_impl_.insert_type_property_){nullptr}
    , decltype(_impl_.select_property_by_type_id_){nullptr}
    , decltype(_impl_.select_last_insert_id_){nullptr}
    , decltype(_impl_.drop_artifact_table_){nullptr}
    , decltype(_impl_.create_artifact_table_){nullptr}
    , decltype(_impl_.insert_artifact_){nullptr}
    , decltype(_impl_.select_artifact_by_id_){nullptr}
    , decltype(_impl_.drop_artifact_property_table_){nullptr}
    , decltype(_impl_.create_artifact_property_table_){nullptr}
    , decltype(_impl_.insert_artifact_property_){nullptr}
    , decltype(_impl_.select_artifact_property_by_artifact_id_){nullptr}
    , decltype(_impl_.select_type_by_name_){nullptr}
    , decltype(_impl_.update_artifact_){nullptr}
    , decltype(_impl_.update_artifact_property_){nullptr}
    , decltype(_impl_.delete_artifact_property_){nullptr}
    , decltype(_impl_.drop_execution_table_){nullptr}
    , decltype(_impl_.create_execution_table_){nullptr}
    , decltype(_impl_.drop_execution_property_table_){nullptr}
    , decltype(_impl_.create_execution_property_table_){nullptr}
    , decltype(_impl_.insert_execution_){nullptr}
    , decltype(_impl_.select_execution_by_id_){nullptr}
    , decltype(_impl_.insert_execution_property_){nullptr}
    , decltype(_impl_.select_execution_property_by_execution_id_){nullptr}
    , decltype(_impl_.update_execution_property_){nullptr}
    , decltype(_impl_.delete_execution_property_){nullptr}
    , decltype(_impl_.update_execution_){nullptr}
    , decltype(_impl_.drop_event_table_){nullptr}
    , decltype(_impl_.create_event_table_){nullptr}
    , decltype(_impl_.insert_event_){nullptr}
    , decltype(_impl_.drop_event_path_table_){nullptr}
    , decltype(_impl_.create_event_path_table_){nullptr}
    , decltype(_impl_.insert_event_path_){nullptr}
    , decltype(_impl_.check_type_table_){nullptr}
    , decltype(_impl_.check_type_property_table_){nullptr}
    , decltype(_impl_.check_artifact_table_){nullptr}
    , decltype(_impl_.check_artifact_property_table_){nullptr}
    , decltype(_impl_.check_execution_table_){nullptr}
    , decltype(_impl_.check_execution_property_table_){nullptr}
    , decltype(_impl_.check_event_table_){nullptr}
    , decltype(_impl_.check_event_path_table_){nullptr}
    , decltype(_impl_.select_artifacts_by_type_id_){nullptr}
    , decltype(_impl_.select_executions_by_type_id_){nullptr}
    , decltype(_impl_.insert_artifact_type_){nullptr}
    , decltype(_impl_.insert_execution_type_){nullptr}
    , decltype(_impl_.select_artifacts_by_uri_){nullptr}
    , decltype(_impl_.select_all_types_){nullptr}
    , decltype(_impl_.insert_context_type_){nullptr}
    , decltype(_impl_.drop_mlmd_env_table_){nullptr}
    , decltype(_impl_.create_mlmd_env_table_){nullptr}
    , decltype(_impl_.check_mlmd_env_table_){nullptr}
    , decltype(_impl_.update_schema_version_){nullptr}
    , decltype(_impl_.check_tables_in_v0_13_2_){nullptr}
    , decltype(_impl_.insert_schema_version_){nullptr}
    , decltype(_impl_.drop_context_table_){nullptr}
    , decltype(_impl_.create_context_table_){nullptr}
    , decltype(_impl_.check_context_table_){nullptr}
    , decltype(_impl_.insert_context_){nullptr}
    , decltype(_impl_.select_context_by_id_){nullptr}
    , decltype(_impl_.select_contexts_by_type_id_){nullptr}
    , decltype(_impl_.update_context_){nullptr}
    , decltype(_impl_.drop_context_property_table_){nullptr}
    , decltype(_impl_.create_context_property_table_){nullptr}
    , decltype(_impl_.check_context_property_table_){nullptr}
    , decltype(_impl_.insert_context_property_){nullptr}
    , decltype(_impl_.select_context_property_by_context_id_){nullptr}
    , decltype(_impl_.update_context_property_){nullptr}
    , decltype(_impl_.delete_context_property_){nullptr}
    , decltype(_impl_.drop_association_table_){nullptr}
    , decltype(_impl_.create_association_table_){nullptr}
    , decltype(_impl_.check_association_table_){nullptr}
    , decltype(_impl_.insert_association_){nullptr}
    , decltype(_impl_.select_association_by_context_id_){nullptr}
    , decltype(_impl_.drop_attribution_table_){nullptr}
    , decltype(_impl_.create_attribution_table_){nullptr}
    , decltype(_impl_.check_attribution_table_){nullptr}
    , decltype(_impl_.insert_attribution_){nullptr}
    , decltype(_impl_.select_attribution_by_context_id_){nullptr}
    , decltype(_impl_.select_context_by_type_id_and_name_){nullptr}
    , decltype(_impl_.select_artifact_by_type_id_and_name_){nullptr}
    , decltype(_impl_.select_execution_by_type_id_and_name_){nullptr}
    , decltype(_impl_.select_event_by_artifact_ids_){nullptr}
    , decltype(_impl_.select_event_by_execution_ids_){nullptr}
    , decltype(_impl_.select_event_path_by_event_ids_){nullptr}
    , decltype(_impl_.drop_parent_type_table_){nullptr}
    , decltype(_impl_.create_parent_type_table_){nullptr}
    , decltype(_impl_.check_parent_type_table_){nullptr}
    , decltype(_impl_.drop_parent_context_table_){nullptr}
    , decltype(_impl_.create_parent_context_table_){nullptr}
    , decltype(_impl_.check_parent_context_table_){nullptr}
    , decltype(_impl_.insert_parent_context_){nullptr}
    , decltype(_impl_.select_parent_context_by_context_id_){nullptr}
    , decltype(_impl_.select_parent_context_by_parent_context_id_){nullptr}
    , decltype(_impl_.insert_parent_type_){nullptr}
    , decltype(_impl_.select_parent_type_by_type_id_){nullptr}
    , decltype(_impl_.select_type_by_name_and_version_){nullptr}
    , decltype(_impl_.delete_contexts_by_id_){nullptr}
    , decltype(_impl_.delete_contexts_properties_by_contexts_id_){nullptr}
    , decltype(_impl_.delete_parent_contexts_by_parent_ids_){nullptr}
    , decltype(_impl_.delete_parent_contexts_by_child_ids_){nullptr}
    , decltype(_impl_.delete_artifacts_by_id_){nullptr}
    , decltype(_impl_.delete_artifacts_properties_by_artifacts_id_){nullptr}
    , decltype(_impl_.delete_executions_by_id_){nullptr}
    , decltype(_impl_.delete_executions_properties_by_executions_id_){nullptr}
    , decltype(_impl_.delete_events_by_artifacts_id_){nullptr}
    , decltype(_impl_.delete_events_by_executions_id_){nullptr}
    , decltype(_impl_.delete_associations_by_contexts_id_){nullptr}
    , decltype(_impl_.delete_associations_by_executions_id_){nullptr}
    , decltype(_impl_.delete_attributions_by_contexts_id_){nullptr}
    , decltype(_impl_.delete_attributions_by_artifacts_id_){nullptr}
    , decltype(_impl_.delete_event_paths_){nullptr}
    , decltype(_impl_.delete_parent_type_){nullptr}
    , decltype(_impl_.select_types_by_id_){nullptr}
    , decltype(_impl_.select_properties_by_type_id_){nullptr}
    , decltype(_impl_.select_artifacts_by_external_ids_){nullptr}
    , decltype(_impl_.delete_parent_contexts_by_parent_id_and_child_ids_){nullptr}
    , decltype(_impl_.select_executions_by_external_ids_){nullptr}
    , decltype(_impl_.select_contexts_by_external_ids_){nullptr}
    , decltype(_impl_.select_types_by_external_ids_){nullptr}
    , decltype(_impl_.metadata_source_type_specific_options_){nullptr}
    , decltype(_impl_.select_types_by_names_){nullptr}
    , decltype(_impl_.select_types_by_names_and_versions_){nullptr}
    , decltype(_impl_.update_type_){nullptr}
    , decltype(_impl_.select_parent_contexts_by_context_ids_){nullptr}
    , decltype(_impl_.select_parent_contexts_by_parent_context_ids_){nullptr}
    , decltype(_impl_.check_mlmd_env_table_existence_){nullptr}
    , decltype(_impl_.select_associations_by_execution_ids_){nullptr}
    , decltype(_impl_.select_attributions_by_artifact_ids_){nullptr}
    , decltype(_impl_.schema_version_){}
    , decltype(_impl_.metadata_source_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.migration_schemes_.MergeFrom(from._impl_.migration_schemes_);
  if (from._internal_has_drop_type_table()) {
    _this->_impl_.drop_type_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_type_table_);
  }
  if (from._internal_has_create_type_table()) {
    _this->_impl_.create_type_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_type_table_);
  }
  if (from._internal_has_select_type_by_id()) {
    _this->_impl_.select_type_by_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_type_by_id_);
  }
  if (from._internal_has_drop_type_property_table()) {
    _this->_impl_.drop_type_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_type_property_table_);
  }
  if (from._internal_has_create_type_property_table()) {
    _this->_impl_.create_type_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_type_property_table_);
  }
  if (from._internal_has_insert_type_property()) {
    _this->_impl_.insert_type_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_type_property_);
  }
  if (from._internal_has_select_property_by_type_id()) {
    _this->_impl_.select_property_by_type_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_property_by_type_id_);
  }
  if (from._internal_has_select_last_insert_id()) {
    _this->_impl_.select_last_insert_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_last_insert_id_);
  }
  if (from._internal_has_drop_artifact_table()) {
    _this->_impl_.drop_artifact_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_artifact_table_);
  }
  if (from._internal_has_create_artifact_table()) {
    _this->_impl_.create_artifact_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_artifact_table_);
  }
  if (from._internal_has_insert_artifact()) {
    _this->_impl_.insert_artifact_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_artifact_);
  }
  if (from._internal_has_select_artifact_by_id()) {
    _this->_impl_.select_artifact_by_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_artifact_by_id_);
  }
  if (from._internal_has_drop_artifact_property_table()) {
    _this->_impl_.drop_artifact_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_artifact_property_table_);
  }
  if (from._internal_has_create_artifact_property_table()) {
    _this->_impl_.create_artifact_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_artifact_property_table_);
  }
  if (from._internal_has_insert_artifact_property()) {
    _this->_impl_.insert_artifact_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_artifact_property_);
  }
  if (from._internal_has_select_artifact_property_by_artifact_id()) {
    _this->_impl_.select_artifact_property_by_artifact_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_artifact_property_by_artifact_id_);
  }
  if (from._internal_has_select_type_by_name()) {
    _this->_impl_.select_type_by_name_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_type_by_name_);
  }
  if (from._internal_has_update_artifact()) {
    _this->_impl_.update_artifact_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.update_artifact_);
  }
  if (from._internal_has_update_artifact_property()) {
    _this->_impl_.update_artifact_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.update_artifact_property_);
  }
  if (from._internal_has_delete_artifact_property()) {
    _this->_impl_.delete_artifact_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_artifact_property_);
  }
  if (from._internal_has_drop_execution_table()) {
    _this->_impl_.drop_execution_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_execution_table_);
  }
  if (from._internal_has_create_execution_table()) {
    _this->_impl_.create_execution_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_execution_table_);
  }
  if (from._internal_has_drop_execution_property_table()) {
    _this->_impl_.drop_execution_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_execution_property_table_);
  }
  if (from._internal_has_create_execution_property_table()) {
    _this->_impl_.create_execution_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_execution_property_table_);
  }
  if (from._internal_has_insert_execution()) {
    _this->_impl_.insert_execution_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_execution_);
  }
  if (from._internal_has_select_execution_by_id()) {
    _this->_impl_.select_execution_by_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_execution_by_id_);
  }
  if (from._internal_has_insert_execution_property()) {
    _this->_impl_.insert_execution_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_execution_property_);
  }
  if (from._internal_has_select_execution_property_by_execution_id()) {
    _this->_impl_.select_execution_property_by_execution_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_execution_property_by_execution_id_);
  }
  if (from._internal_has_update_execution_property()) {
    _this->_impl_.update_execution_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.update_execution_property_);
  }
  if (from._internal_has_delete_execution_property()) {
    _this->_impl_.delete_execution_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_execution_property_);
  }
  if (from._internal_has_update_execution()) {
    _this->_impl_.update_execution_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.update_execution_);
  }
  if (from._internal_has_drop_event_table()) {
    _this->_impl_.drop_event_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_event_table_);
  }
  if (from._internal_has_create_event_table()) {
    _this->_impl_.create_event_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_event_table_);
  }
  if (from._internal_has_insert_event()) {
    _this->_impl_.insert_event_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_event_);
  }
  if (from._internal_has_drop_event_path_table()) {
    _this->_impl_.drop_event_path_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_event_path_table_);
  }
  if (from._internal_has_create_event_path_table()) {
    _this->_impl_.create_event_path_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_event_path_table_);
  }
  if (from._internal_has_insert_event_path()) {
    _this->_impl_.insert_event_path_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_event_path_);
  }
  if (from._internal_has_check_type_table()) {
    _this->_impl_.check_type_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_type_table_);
  }
  if (from._internal_has_check_type_property_table()) {
    _this->_impl_.check_type_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_type_property_table_);
  }
  if (from._internal_has_check_artifact_table()) {
    _this->_impl_.check_artifact_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_artifact_table_);
  }
  if (from._internal_has_check_artifact_property_table()) {
    _this->_impl_.check_artifact_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_artifact_property_table_);
  }
  if (from._internal_has_check_execution_table()) {
    _this->_impl_.check_execution_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_execution_table_);
  }
  if (from._internal_has_check_execution_property_table()) {
    _this->_impl_.check_execution_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_execution_property_table_);
  }
  if (from._internal_has_check_event_table()) {
    _this->_impl_.check_event_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_event_table_);
  }
  if (from._internal_has_check_event_path_table()) {
    _this->_impl_.check_event_path_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_event_path_table_);
  }
  if (from._internal_has_select_artifacts_by_type_id()) {
    _this->_impl_.select_artifacts_by_type_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_artifacts_by_type_id_);
  }
  if (from._internal_has_select_executions_by_type_id()) {
    _this->_impl_.select_executions_by_type_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_executions_by_type_id_);
  }
  if (from._internal_has_insert_artifact_type()) {
    _this->_impl_.insert_artifact_type_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_artifact_type_);
  }
  if (from._internal_has_insert_execution_type()) {
    _this->_impl_.insert_execution_type_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_execution_type_);
  }
  if (from._internal_has_select_artifacts_by_uri()) {
    _this->_impl_.select_artifacts_by_uri_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_artifacts_by_uri_);
  }
  if (from._internal_has_select_all_types()) {
    _this->_impl_.select_all_types_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_all_types_);
  }
  if (from._internal_has_insert_context_type()) {
    _this->_impl_.insert_context_type_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_context_type_);
  }
  if (from._internal_has_drop_mlmd_env_table()) {
    _this->_impl_.drop_mlmd_env_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_mlmd_env_table_);
  }
  if (from._internal_has_create_mlmd_env_table()) {
    _this->_impl_.create_mlmd_env_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_mlmd_env_table_);
  }
  if (from._internal_has_check_mlmd_env_table()) {
    _this->_impl_.check_mlmd_env_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_mlmd_env_table_);
  }
  if (from._internal_has_update_schema_version()) {
    _this->_impl_.update_schema_version_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.update_schema_version_);
  }
  if (from._internal_has_check_tables_in_v0_13_2()) {
    _this->_impl_.check_tables_in_v0_13_2_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_tables_in_v0_13_2_);
  }
  if (from._internal_has_insert_schema_version()) {
    _this->_impl_.insert_schema_version_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_schema_version_);
  }
  if (from._internal_has_drop_context_table()) {
    _this->_impl_.drop_context_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_context_table_);
  }
  if (from._internal_has_create_context_table()) {
    _this->_impl_.create_context_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_context_table_);
  }
  if (from._internal_has_check_context_table()) {
    _this->_impl_.check_context_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_context_table_);
  }
  if (from._internal_has_insert_context()) {
    _this->_impl_.insert_context_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_context_);
  }
  if (from._internal_has_select_context_by_id()) {
    _this->_impl_.select_context_by_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_context_by_id_);
  }
  if (from._internal_has_select_contexts_by_type_id()) {
    _this->_impl_.select_contexts_by_type_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_contexts_by_type_id_);
  }
  if (from._internal_has_update_context()) {
    _this->_impl_.update_context_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.update_context_);
  }
  if (from._internal_has_drop_context_property_table()) {
    _this->_impl_.drop_context_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_context_property_table_);
  }
  if (from._internal_has_create_context_property_table()) {
    _this->_impl_.create_context_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_context_property_table_);
  }
  if (from._internal_has_check_context_property_table()) {
    _this->_impl_.check_context_property_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_context_property_table_);
  }
  if (from._internal_has_insert_context_property()) {
    _this->_impl_.insert_context_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_context_property_);
  }
  if (from._internal_has_select_context_property_by_context_id()) {
    _this->_impl_.select_context_property_by_context_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_context_property_by_context_id_);
  }
  if (from._internal_has_update_context_property()) {
    _this->_impl_.update_context_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.update_context_property_);
  }
  if (from._internal_has_delete_context_property()) {
    _this->_impl_.delete_context_property_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_context_property_);
  }
  if (from._internal_has_drop_association_table()) {
    _this->_impl_.drop_association_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_association_table_);
  }
  if (from._internal_has_create_association_table()) {
    _this->_impl_.create_association_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_association_table_);
  }
  if (from._internal_has_check_association_table()) {
    _this->_impl_.check_association_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_association_table_);
  }
  if (from._internal_has_insert_association()) {
    _this->_impl_.insert_association_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_association_);
  }
  if (from._internal_has_select_association_by_context_id()) {
    _this->_impl_.select_association_by_context_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_association_by_context_id_);
  }
  if (from._internal_has_drop_attribution_table()) {
    _this->_impl_.drop_attribution_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_attribution_table_);
  }
  if (from._internal_has_create_attribution_table()) {
    _this->_impl_.create_attribution_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_attribution_table_);
  }
  if (from._internal_has_check_attribution_table()) {
    _this->_impl_.check_attribution_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_attribution_table_);
  }
  if (from._internal_has_insert_attribution()) {
    _this->_impl_.insert_attribution_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_attribution_);
  }
  if (from._internal_has_select_attribution_by_context_id()) {
    _this->_impl_.select_attribution_by_context_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_attribution_by_context_id_);
  }
  if (from._internal_has_select_context_by_type_id_and_name()) {
    _this->_impl_.select_context_by_type_id_and_name_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_context_by_type_id_and_name_);
  }
  if (from._internal_has_select_artifact_by_type_id_and_name()) {
    _this->_impl_.select_artifact_by_type_id_and_name_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_artifact_by_type_id_and_name_);
  }
  if (from._internal_has_select_execution_by_type_id_and_name()) {
    _this->_impl_.select_execution_by_type_id_and_name_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_execution_by_type_id_and_name_);
  }
  if (from._internal_has_select_event_by_artifact_ids()) {
    _this->_impl_.select_event_by_artifact_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_event_by_artifact_ids_);
  }
  if (from._internal_has_select_event_by_execution_ids()) {
    _this->_impl_.select_event_by_execution_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_event_by_execution_ids_);
  }
  if (from._internal_has_select_event_path_by_event_ids()) {
    _this->_impl_.select_event_path_by_event_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_event_path_by_event_ids_);
  }
  if (from._internal_has_drop_parent_type_table()) {
    _this->_impl_.drop_parent_type_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_parent_type_table_);
  }
  if (from._internal_has_create_parent_type_table()) {
    _this->_impl_.create_parent_type_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_parent_type_table_);
  }
  if (from._internal_has_check_parent_type_table()) {
    _this->_impl_.check_parent_type_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_parent_type_table_);
  }
  if (from._internal_has_drop_parent_context_table()) {
    _this->_impl_.drop_parent_context_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.drop_parent_context_table_);
  }
  if (from._internal_has_create_parent_context_table()) {
    _this->_impl_.create_parent_context_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.create_parent_context_table_);
  }
  if (from._internal_has_check_parent_context_table()) {
    _this->_impl_.check_parent_context_table_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_parent_context_table_);
  }
  if (from._internal_has_insert_parent_context()) {
    _this->_impl_.insert_parent_context_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_parent_context_);
  }
  if (from._internal_has_select_parent_context_by_context_id()) {
    _this->_impl_.select_parent_context_by_context_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_parent_context_by_context_id_);
  }
  if (from._internal_has_select_parent_context_by_parent_context_id()) {
    _this->_impl_.select_parent_context_by_parent_context_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_parent_context_by_parent_context_id_);
  }
  if (from._internal_has_insert_parent_type()) {
    _this->_impl_.insert_parent_type_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.insert_parent_type_);
  }
  if (from._internal_has_select_parent_type_by_type_id()) {
    _this->_impl_.select_parent_type_by_type_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_parent_type_by_type_id_);
  }
  if (from._internal_has_select_type_by_name_and_version()) {
    _this->_impl_.select_type_by_name_and_version_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_type_by_name_and_version_);
  }
  if (from._internal_has_delete_contexts_by_id()) {
    _this->_impl_.delete_contexts_by_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_contexts_by_id_);
  }
  if (from._internal_has_delete_contexts_properties_by_contexts_id()) {
    _this->_impl_.delete_contexts_properties_by_contexts_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_contexts_properties_by_contexts_id_);
  }
  if (from._internal_has_delete_parent_contexts_by_parent_ids()) {
    _this->_impl_.delete_parent_contexts_by_parent_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_parent_contexts_by_parent_ids_);
  }
  if (from._internal_has_delete_parent_contexts_by_child_ids()) {
    _this->_impl_.delete_parent_contexts_by_child_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_parent_contexts_by_child_ids_);
  }
  if (from._internal_has_delete_artifacts_by_id()) {
    _this->_impl_.delete_artifacts_by_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_artifacts_by_id_);
  }
  if (from._internal_has_delete_artifacts_properties_by_artifacts_id()) {
    _this->_impl_.delete_artifacts_properties_by_artifacts_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_artifacts_properties_by_artifacts_id_);
  }
  if (from._internal_has_delete_executions_by_id()) {
    _this->_impl_.delete_executions_by_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_executions_by_id_);
  }
  if (from._internal_has_delete_executions_properties_by_executions_id()) {
    _this->_impl_.delete_executions_properties_by_executions_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_executions_properties_by_executions_id_);
  }
  if (from._internal_has_delete_events_by_artifacts_id()) {
    _this->_impl_.delete_events_by_artifacts_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_events_by_artifacts_id_);
  }
  if (from._internal_has_delete_events_by_executions_id()) {
    _this->_impl_.delete_events_by_executions_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_events_by_executions_id_);
  }
  if (from._internal_has_delete_associations_by_contexts_id()) {
    _this->_impl_.delete_associations_by_contexts_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_associations_by_contexts_id_);
  }
  if (from._internal_has_delete_associations_by_executions_id()) {
    _this->_impl_.delete_associations_by_executions_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_associations_by_executions_id_);
  }
  if (from._internal_has_delete_attributions_by_contexts_id()) {
    _this->_impl_.delete_attributions_by_contexts_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_attributions_by_contexts_id_);
  }
  if (from._internal_has_delete_attributions_by_artifacts_id()) {
    _this->_impl_.delete_attributions_by_artifacts_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_attributions_by_artifacts_id_);
  }
  if (from._internal_has_delete_event_paths()) {
    _this->_impl_.delete_event_paths_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_event_paths_);
  }
  if (from._internal_has_delete_parent_type()) {
    _this->_impl_.delete_parent_type_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_parent_type_);
  }
  if (from._internal_has_select_types_by_id()) {
    _this->_impl_.select_types_by_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_types_by_id_);
  }
  if (from._internal_has_select_properties_by_type_id()) {
    _this->_impl_.select_properties_by_type_id_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_properties_by_type_id_);
  }
  if (from._internal_has_select_artifacts_by_external_ids()) {
    _this->_impl_.select_artifacts_by_external_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_artifacts_by_external_ids_);
  }
  if (from._internal_has_delete_parent_contexts_by_parent_id_and_child_ids()) {
    _this->_impl_.delete_parent_contexts_by_parent_id_and_child_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.delete_parent_contexts_by_parent_id_and_child_ids_);
  }
  if (from._internal_has_select_executions_by_external_ids()) {
    _this->_impl_.select_executions_by_external_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_executions_by_external_ids_);
  }
  if (from._internal_has_select_contexts_by_external_ids()) {
    _this->_impl_.select_contexts_by_external_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_contexts_by_external_ids_);
  }
  if (from._internal_has_select_types_by_external_ids()) {
    _this->_impl_.select_types_by_external_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_types_by_external_ids_);
  }
  if (from._internal_has_metadata_source_type_specific_options()) {
    _this->_impl_.metadata_source_type_specific_options_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.metadata_source_type_specific_options_);
  }
  if (from._internal_has_select_types_by_names()) {
    _this->_impl_.select_types_by_names_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_types_by_names_);
  }
  if (from._internal_has_select_types_by_names_and_versions()) {
    _this->_impl_.select_types_by_names_and_versions_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_types_by_names_and_versions_);
  }
  if (from._internal_has_update_type()) {
    _this->_impl_.update_type_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.update_type_);
  }
  if (from._internal_has_select_parent_contexts_by_context_ids()) {
    _this->_impl_.select_parent_contexts_by_context_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_parent_contexts_by_context_ids_);
  }
  if (from._internal_has_select_parent_contexts_by_parent_context_ids()) {
    _this->_impl_.select_parent_contexts_by_parent_context_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_parent_contexts_by_parent_context_ids_);
  }
  if (from._internal_has_check_mlmd_env_table_existence()) {
    _this->_impl_.check_mlmd_env_table_existence_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.check_mlmd_env_table_existence_);
  }
  if (from._internal_has_select_associations_by_execution_ids()) {
    _this->_impl_.select_associations_by_execution_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_associations_by_execution_ids_);
  }
  if (from._internal_has_select_attributions_by_artifact_ids()) {
    _this->_impl_.select_attributions_by_artifact_ids_ = new ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery(*from._impl_.select_attributions_by_artifact_ids_);
  }
  ::memcpy(&_impl_.schema_version_, &from._impl_.schema_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.metadata_source_type_) -
    reinterpret_cast<char*>(&_impl_.schema_version_)) + sizeof(_impl_.metadata_source_type_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MetadataSourceQueryConfig)
}

inline void MetadataSourceQueryConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.migration_schemes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.secondary_indices_){arena}
    , decltype(_impl_.drop_type_table_){nullptr}
    , decltype(_impl_.create_type_table_){nullptr}
    , decltype(_impl_.select_type_by_id_){nullptr}
    , decltype(_impl_.drop_type_property_table_){nullptr}
    , decltype(_impl_.create_type_property_table_){nullptr}
    , decltype(_impl_.insert_type_property_){nullptr}
    , decltype(_impl_.select_property_by_type_id_){nullptr}
    , decltype(_impl_.select_last_insert_id_){nullptr}
    , decltype(_impl_.drop_artifact_table_){nullptr}
    , decltype(_impl_.create_artifact_table_){nullptr}
    , decltype(_impl_.insert_artifact_){nullptr}
    , decltype(_impl_.select_artifact_by_id_){nullptr}
    , decltype(_impl_.drop_artifact_property_table_){nullptr}
    , decltype(_impl_.create_artifact_property_table_){nullptr}
    , decltype(_impl_.insert_artifact_property_){nullptr}
    , decltype(_impl_.select_artifact_property_by_artifact_id_){nullptr}
    , decltype(_impl_.select_type_by_name_){nullptr}
    , decltype(_impl_.update_artifact_){nullptr}
    , decltype(_impl_.update_artifact_property_){nullptr}
    , decltype(_impl_.delete_artifact_property_){nullptr}
    , decltype(_impl_.drop_execution_table_){nullptr}
    , decltype(_impl_.create_execution_table_){nullptr}
    , decltype(_impl_.drop_execution_property_table_){nullptr}
    , decltype(_impl_.create_execution_property_table_){nullptr}
    , decltype(_impl_.insert_execution_){nullptr}
    , decltype(_impl_.select_execution_by_id_){nullptr}
    , decltype(_impl_.insert_execution_property_){nullptr}
    , decltype(_impl_.select_execution_property_by_execution_id_){nullptr}
    , decltype(_impl_.update_execution_property_){nullptr}
    , decltype(_impl_.delete_execution_property_){nullptr}
    , decltype(_impl_.update_execution_){nullptr}
    , decltype(_impl_.drop_event_table_){nullptr}
    , decltype(_impl_.create_event_table_){nullptr}
    , decltype(_impl_.insert_event_){nullptr}
    , decltype(_impl_.drop_event_path_table_){nullptr}
    , decltype(_impl_.create_event_path_table_){nullptr}
    , decltype(_impl_.insert_event_path_){nullptr}
    , decltype(_impl_.check_type_table_){nullptr}
    , decltype(_impl_.check_type_property_table_){nullptr}
    , decltype(_impl_.check_artifact_table_){nullptr}
    , decltype(_impl_.check_artifact_property_table_){nullptr}
    , decltype(_impl_.check_execution_table_){nullptr}
    , decltype(_impl_.check_execution_property_table_){nullptr}
    , decltype(_impl_.check_event_table_){nullptr}
    , decltype(_impl_.check_event_path_table_){nullptr}
    , decltype(_impl_.select_artifacts_by_type_id_){nullptr}
    , decltype(_impl_.select_executions_by_type_id_){nullptr}
    , decltype(_impl_.insert_artifact_type_){nullptr}
    , decltype(_impl_.insert_execution_type_){nullptr}
    , decltype(_impl_.select_artifacts_by_uri_){nullptr}
    , decltype(_impl_.select_all_types_){nullptr}
    , decltype(_impl_.insert_context_type_){nullptr}
    , decltype(_impl_.drop_mlmd_env_table_){nullptr}
    , decltype(_impl_.create_mlmd_env_table_){nullptr}
    , decltype(_impl_.check_mlmd_env_table_){nullptr}
    , decltype(_impl_.update_schema_version_){nullptr}
    , decltype(_impl_.check_tables_in_v0_13_2_){nullptr}
    , decltype(_impl_.insert_schema_version_){nullptr}
    , decltype(_impl_.drop_context_table_){nullptr}
    , decltype(_impl_.create_context_table_){nullptr}
    , decltype(_impl_.check_context_table_){nullptr}
    , decltype(_impl_.insert_context_){nullptr}
    , decltype(_impl_.select_context_by_id_){nullptr}
    , decltype(_impl_.select_contexts_by_type_id_){nullptr}
    , decltype(_impl_.update_context_){nullptr}
    , decltype(_impl_.drop_context_property_table_){nullptr}
    , decltype(_impl_.create_context_property_table_){nullptr}
    , decltype(_impl_.check_context_property_table_){nullptr}
    , decltype(_impl_.insert_context_property_){nullptr}
    , decltype(_impl_.select_context_property_by_context_id_){nullptr}
    , decltype(_impl_.update_context_property_){nullptr}
    , decltype(_impl_.delete_context_property_){nullptr}
    , decltype(_impl_.drop_association_table_){nullptr}
    , decltype(_impl_.create_association_table_){nullptr}
    , decltype(_impl_.check_association_table_){nullptr}
    , decltype(_impl_.insert_association_){nullptr}
    , decltype(_impl_.select_association_by_context_id_){nullptr}
    , decltype(_impl_.drop_attribution_table_){nullptr}
    , decltype(_impl_.create_attribution_table_){nullptr}
    , decltype(_impl_.check_attribution_table_){nullptr}
    , decltype(_impl_.insert_attribution_){nullptr}
    , decltype(_impl_.select_attribution_by_context_id_){nullptr}
    , decltype(_impl_.select_context_by_type_id_and_name_){nullptr}
    , decltype(_impl_.select_artifact_by_type_id_and_name_){nullptr}
    , decltype(_impl_.select_execution_by_type_id_and_name_){nullptr}
    , decltype(_impl_.select_event_by_artifact_ids_){nullptr}
    , decltype(_impl_.select_event_by_execution_ids_){nullptr}
    , decltype(_impl_.select_event_path_by_event_ids_){nullptr}
    , decltype(_impl_.drop_parent_type_table_){nullptr}
    , decltype(_impl_.create_parent_type_table_){nullptr}
    , decltype(_impl_.check_parent_type_table_){nullptr}
    , decltype(_impl_.drop_parent_context_table_){nullptr}
    , decltype(_impl_.create_parent_context_table_){nullptr}
    , decltype(_impl_.check_parent_context_table_){nullptr}
    , decltype(_impl_.insert_parent_context_){nullptr}
    , decltype(_impl_.select_parent_context_by_context_id_){nullptr}
    , decltype(_impl_.select_parent_context_by_parent_context_id_){nullptr}
    , decltype(_impl_.insert_parent_type_){nullptr}
    , decltype(_impl_.select_parent_type_by_type_id_){nullptr}
    , decltype(_impl_.select_type_by_name_and_version_){nullptr}
    , decltype(_impl_.delete_contexts_by_id_){nullptr}
    , decltype(_impl_.delete_contexts_properties_by_contexts_id_){nullptr}
    , decltype(_impl_.delete_parent_contexts_by_parent_ids_){nullptr}
    , decltype(_impl_.delete_parent_contexts_by_child_ids_){nullptr}
    , decltype(_impl_.delete_artifacts_by_id_){nullptr}
    , decltype(_impl_.delete_artifacts_properties_by_artifacts_id_){nullptr}
    , decltype(_impl_.delete_executions_by_id_){nullptr}
    , decltype(_impl_.delete_executions_properties_by_executions_id_){nullptr}
    , decltype(_impl_.delete_events_by_artifacts_id_){nullptr}
    , decltype(_impl_.delete_events_by_executions_id_){nullptr}
    , decltype(_impl_.delete_associations_by_contexts_id_){nullptr}
    , decltype(_impl_.delete_associations_by_executions_id_){nullptr}
    , decltype(_impl_.delete_attributions_by_contexts_id_){nullptr}
    , decltype(_impl_.delete_attributions_by_artifacts_id_){nullptr}
    , decltype(_impl_.delete_event_paths_){nullptr}
    , decltype(_impl_.delete_parent_type_){nullptr}
    , decltype(_impl_.select_types_by_id_){nullptr}
    , decltype(_impl_.select_properties_by_type_id_){nullptr}
    , decltype(_impl_.select_artifacts_by_external_ids_){nullptr}
    , decltype(_impl_.delete_parent_contexts_by_parent_id_and_child_ids_){nullptr}
    , decltype(_impl_.select_executions_by_external_ids_){nullptr}
    , decltype(_impl_.select_contexts_by_external_ids_){nullptr}
    , decltype(_impl_.select_types_by_external_ids_){nullptr}
    , decltype(_impl_.metadata_source_type_specific_options_){nullptr}
    , decltype(_impl_.select_types_by_names_){nullptr}
    , decltype(_impl_.select_types_by_names_and_versions_){nullptr}
    , decltype(_impl_.update_type_){nullptr}
    , decltype(_impl_.select_parent_contexts_by_context_ids_){nullptr}
    , decltype(_impl_.select_parent_contexts_by_parent_context_ids_){nullptr}
    , decltype(_impl_.check_mlmd_env_table_existence_){nullptr}
    , decltype(_impl_.select_associations_by_execution_ids_){nullptr}
    , decltype(_impl_.select_attributions_by_artifact_ids_){nullptr}
    , decltype(_impl_.schema_version_){int64_t{0}}
    , decltype(_impl_.metadata_source_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetadataSourceQueryConfig::~MetadataSourceQueryConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.MetadataSourceQueryConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MetadataSourceQueryConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.migration_schemes_.Destruct();
  _impl_.migration_schemes_.~MapField();
  _impl_.secondary_indices_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.drop_type_table_;
  if (this != internal_default_instance()) delete _impl_.create_type_table_;
  if (this != internal_default_instance()) delete _impl_.select_type_by_id_;
  if (this != internal_default_instance()) delete _impl_.drop_type_property_table_;
  if (this != internal_default_instance()) delete _impl_.create_type_property_table_;
  if (this != internal_default_instance()) delete _impl_.insert_type_property_;
  if (this != internal_default_instance()) delete _impl_.select_property_by_type_id_;
  if (this != internal_default_instance()) delete _impl_.select_last_insert_id_;
  if (this != internal_default_instance()) delete _impl_.drop_artifact_table_;
  if (this != internal_default_instance()) delete _impl_.create_artifact_table_;
  if (this != internal_default_instance()) delete _impl_.insert_artifact_;
  if (this != internal_default_instance()) delete _impl_.select_artifact_by_id_;
  if (this != internal_default_instance()) delete _impl_.drop_artifact_property_table_;
  if (this != internal_default_instance()) delete _impl_.create_artifact_property_table_;
  if (this != internal_default_instance()) delete _impl_.insert_artifact_property_;
  if (this != internal_default_instance()) delete _impl_.select_artifact_property_by_artifact_id_;
  if (this != internal_default_instance()) delete _impl_.select_type_by_name_;
  if (this != internal_default_instance()) delete _impl_.update_artifact_;
  if (this != internal_default_instance()) delete _impl_.update_artifact_property_;
  if (this != internal_default_instance()) delete _impl_.delete_artifact_property_;
  if (this != internal_default_instance()) delete _impl_.drop_execution_table_;
  if (this != internal_default_instance()) delete _impl_.create_execution_table_;
  if (this != internal_default_instance()) delete _impl_.drop_execution_property_table_;
  if (this != internal_default_instance()) delete _impl_.create_execution_property_table_;
  if (this != internal_default_instance()) delete _impl_.insert_execution_;
  if (this != internal_default_instance()) delete _impl_.select_execution_by_id_;
  if (this != internal_default_instance()) delete _impl_.insert_execution_property_;
  if (this != internal_default_instance()) delete _impl_.select_execution_property_by_execution_id_;
  if (this != internal_default_instance()) delete _impl_.update_execution_property_;
  if (this != internal_default_instance()) delete _impl_.delete_execution_property_;
  if (this != internal_default_instance()) delete _impl_.update_execution_;
  if (this != internal_default_instance()) delete _impl_.drop_event_table_;
  if (this != internal_default_instance()) delete _impl_.create_event_table_;
  if (this != internal_default_instance()) delete _impl_.insert_event_;
  if (this != internal_default_instance()) delete _impl_.drop_event_path_table_;
  if (this != internal_default_instance()) delete _impl_.create_event_path_table_;
  if (this != internal_default_instance()) delete _impl_.insert_event_path_;
  if (this != internal_default_instance()) delete _impl_.check_type_table_;
  if (this != internal_default_instance()) delete _impl_.check_type_property_table_;
  if (this != internal_default_instance()) delete _impl_.check_artifact_table_;
  if (this != internal_default_instance()) delete _impl_.check_artifact_property_table_;
  if (this != internal_default_instance()) delete _impl_.check_execution_table_;
  if (this != internal_default_instance()) delete _impl_.check_execution_property_table_;
  if (this != internal_default_instance()) delete _impl_.check_event_table_;
  if (this != internal_default_instance()) delete _impl_.check_event_path_table_;
  if (this != internal_default_instance()) delete _impl_.select_artifacts_by_type_id_;
  if (this != internal_default_instance()) delete _impl_.select_executions_by_type_id_;
  if (this != internal_default_instance()) delete _impl_.insert_artifact_type_;
  if (this != internal_default_instance()) delete _impl_.insert_execution_type_;
  if (this != internal_default_instance()) delete _impl_.select_artifacts_by_uri_;
  if (this != internal_default_instance()) delete _impl_.select_all_types_;
  if (this != internal_default_instance()) delete _impl_.insert_context_type_;
  if (this != internal_default_instance()) delete _impl_.drop_mlmd_env_table_;
  if (this != internal_default_instance()) delete _impl_.create_mlmd_env_table_;
  if (this != internal_default_instance()) delete _impl_.check_mlmd_env_table_;
  if (this != internal_default_instance()) delete _impl_.update_schema_version_;
  if (this != internal_default_instance()) delete _impl_.check_tables_in_v0_13_2_;
  if (this != internal_default_instance()) delete _impl_.insert_schema_version_;
  if (this != internal_default_instance()) delete _impl_.drop_context_table_;
  if (this != internal_default_instance()) delete _impl_.create_context_table_;
  if (this != internal_default_instance()) delete _impl_.check_context_table_;
  if (this != internal_default_instance()) delete _impl_.insert_context_;
  if (this != internal_default_instance()) delete _impl_.select_context_by_id_;
  if (this != internal_default_instance()) delete _impl_.select_contexts_by_type_id_;
  if (this != internal_default_instance()) delete _impl_.update_context_;
  if (this != internal_default_instance()) delete _impl_.drop_context_property_table_;
  if (this != internal_default_instance()) delete _impl_.create_context_property_table_;
  if (this != internal_default_instance()) delete _impl_.check_context_property_table_;
  if (this != internal_default_instance()) delete _impl_.insert_context_property_;
  if (this != internal_default_instance()) delete _impl_.select_context_property_by_context_id_;
  if (this != internal_default_instance()) delete _impl_.update_context_property_;
  if (this != internal_default_instance()) delete _impl_.delete_context_property_;
  if (this != internal_default_instance()) delete _impl_.drop_association_table_;
  if (this != internal_default_instance()) delete _impl_.create_association_table_;
  if (this != internal_default_instance()) delete _impl_.check_association_table_;
  if (this != internal_default_instance()) delete _impl_.insert_association_;
  if (this != internal_default_instance()) delete _impl_.select_association_by_context_id_;
  if (this != internal_default_instance()) delete _impl_.drop_attribution_table_;
  if (this != internal_default_instance()) delete _impl_.create_attribution_table_;
  if (this != internal_default_instance()) delete _impl_.check_attribution_table_;
  if (this != internal_default_instance()) delete _impl_.insert_attribution_;
  if (this != internal_default_instance()) delete _impl_.select_attribution_by_context_id_;
  if (this != internal_default_instance()) delete _impl_.select_context_by_type_id_and_name_;
  if (this != internal_default_instance()) delete _impl_.select_artifact_by_type_id_and_name_;
  if (this != internal_default_instance()) delete _impl_.select_execution_by_type_id_and_name_;
  if (this != internal_default_instance()) delete _impl_.select_event_by_artifact_ids_;
  if (this != internal_default_instance()) delete _impl_.select_event_by_execution_ids_;
  if (this != internal_default_instance()) delete _impl_.select_event_path_by_event_ids_;
  if (this != internal_default_instance()) delete _impl_.drop_parent_type_table_;
  if (this != internal_default_instance()) delete _impl_.create_parent_type_table_;
  if (this != internal_default_instance()) delete _impl_.check_parent_type_table_;
  if (this != internal_default_instance()) delete _impl_.drop_parent_context_table_;
  if (this != internal_default_instance()) delete _impl_.create_parent_context_table_;
  if (this != internal_default_instance()) delete _impl_.check_parent_context_table_;
  if (this != internal_default_instance()) delete _impl_.insert_parent_context_;
  if (this != internal_default_instance()) delete _impl_.select_parent_context_by_context_id_;
  if (this != internal_default_instance()) delete _impl_.select_parent_context_by_parent_context_id_;
  if (this != internal_default_instance()) delete _impl_.insert_parent_type_;
  if (this != internal_default_instance()) delete _impl_.select_parent_type_by_type_id_;
  if (this != internal_default_instance()) delete _impl_.select_type_by_name_and_version_;
  if (this != internal_default_instance()) delete _impl_.delete_contexts_by_id_;
  if (this != internal_default_instance()) delete _impl_.delete_contexts_properties_by_contexts_id_;
  if (this != internal_default_instance()) delete _impl_.delete_parent_contexts_by_parent_ids_;
  if (this != internal_default_instance()) delete _impl_.delete_parent_contexts_by_child_ids_;
  if (this != internal_default_instance()) delete _impl_.delete_artifacts_by_id_;
  if (this != internal_default_instance()) delete _impl_.delete_artifacts_properties_by_artifacts_id_;
  if (this != internal_default_instance()) delete _impl_.delete_executions_by_id_;
  if (this != internal_default_instance()) delete _impl_.delete_executions_properties_by_executions_id_;
  if (this != internal_default_instance()) delete _impl_.delete_events_by_artifacts_id_;
  if (this != internal_default_instance()) delete _impl_.delete_events_by_executions_id_;
  if (this != internal_default_instance()) delete _impl_.delete_associations_by_contexts_id_;
  if (this != internal_default_instance()) delete _impl_.delete_associations_by_executions_id_;
  if (this != internal_default_instance()) delete _impl_.delete_attributions_by_contexts_id_;
  if (this != internal_default_instance()) delete _impl_.delete_attributions_by_artifacts_id_;
  if (this != internal_default_instance()) delete _impl_.delete_event_paths_;
  if (this != internal_default_instance()) delete _impl_.delete_parent_type_;
  if (this != internal_default_instance()) delete _impl_.select_types_by_id_;
  if (this != internal_default_instance()) delete _impl_.select_properties_by_type_id_;
  if (this != internal_default_instance()) delete _impl_.select_artifacts_by_external_ids_;
  if (this != internal_default_instance()) delete _impl_.delete_parent_contexts_by_parent_id_and_child_ids_;
  if (this != internal_default_instance()) delete _impl_.select_executions_by_external_ids_;
  if (this != internal_default_instance()) delete _impl_.select_contexts_by_external_ids_;
  if (this != internal_default_instance()) delete _impl_.select_types_by_external_ids_;
  if (this != internal_default_instance()) delete _impl_.metadata_source_type_specific_options_;
  if (this != internal_default_instance()) delete _impl_.select_types_by_names_;
  if (this != internal_default_instance()) delete _impl_.select_types_by_names_and_versions_;
  if (this != internal_default_instance()) delete _impl_.update_type_;
  if (this != internal_default_instance()) delete _impl_.select_parent_contexts_by_context_ids_;
  if (this != internal_default_instance()) delete _impl_.select_parent_contexts_by_parent_context_ids_;
  if (this != internal_default_instance()) delete _impl_.check_mlmd_env_table_existence_;
  if (this != internal_default_instance()) delete _impl_.select_associations_by_execution_ids_;
  if (this != internal_default_instance()) delete _impl_.select_attributions_by_artifact_ids_;
}

void MetadataSourceQueryConfig::ArenaDtor(void* object) {
  MetadataSourceQueryConfig* _this = reinterpret_cast< MetadataSourceQueryConfig* >(object);
  _this->_impl_.migration_schemes_.Destruct();
}
void MetadataSourceQueryConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetadataSourceQueryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MetadataSourceQueryConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.migration_schemes_.Clear();
  _impl_.secondary_indices_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.drop_type_table_ != nullptr) {
    delete _impl_.drop_type_table_;
  }
  _impl_.drop_type_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_type_table_ != nullptr) {
    delete _impl_.create_type_table_;
  }
  _impl_.create_type_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_type_by_id_ != nullptr) {
    delete _impl_.select_type_by_id_;
  }
  _impl_.select_type_by_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_type_property_table_ != nullptr) {
    delete _impl_.drop_type_property_table_;
  }
  _impl_.drop_type_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_type_property_table_ != nullptr) {
    delete _impl_.create_type_property_table_;
  }
  _impl_.create_type_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_type_property_ != nullptr) {
    delete _impl_.insert_type_property_;
  }
  _impl_.insert_type_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_property_by_type_id_ != nullptr) {
    delete _impl_.select_property_by_type_id_;
  }
  _impl_.select_property_by_type_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_last_insert_id_ != nullptr) {
    delete _impl_.select_last_insert_id_;
  }
  _impl_.select_last_insert_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_artifact_table_ != nullptr) {
    delete _impl_.drop_artifact_table_;
  }
  _impl_.drop_artifact_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_artifact_table_ != nullptr) {
    delete _impl_.create_artifact_table_;
  }
  _impl_.create_artifact_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_artifact_ != nullptr) {
    delete _impl_.insert_artifact_;
  }
  _impl_.insert_artifact_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_artifact_by_id_ != nullptr) {
    delete _impl_.select_artifact_by_id_;
  }
  _impl_.select_artifact_by_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_artifact_property_table_ != nullptr) {
    delete _impl_.drop_artifact_property_table_;
  }
  _impl_.drop_artifact_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_artifact_property_table_ != nullptr) {
    delete _impl_.create_artifact_property_table_;
  }
  _impl_.create_artifact_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_artifact_property_ != nullptr) {
    delete _impl_.insert_artifact_property_;
  }
  _impl_.insert_artifact_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_artifact_property_by_artifact_id_ != nullptr) {
    delete _impl_.select_artifact_property_by_artifact_id_;
  }
  _impl_.select_artifact_property_by_artifact_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_type_by_name_ != nullptr) {
    delete _impl_.select_type_by_name_;
  }
  _impl_.select_type_by_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_artifact_ != nullptr) {
    delete _impl_.update_artifact_;
  }
  _impl_.update_artifact_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_artifact_property_ != nullptr) {
    delete _impl_.update_artifact_property_;
  }
  _impl_.update_artifact_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_artifact_property_ != nullptr) {
    delete _impl_.delete_artifact_property_;
  }
  _impl_.delete_artifact_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_execution_table_ != nullptr) {
    delete _impl_.drop_execution_table_;
  }
  _impl_.drop_execution_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_execution_table_ != nullptr) {
    delete _impl_.create_execution_table_;
  }
  _impl_.create_execution_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_execution_property_table_ != nullptr) {
    delete _impl_.drop_execution_property_table_;
  }
  _impl_.drop_execution_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_execution_property_table_ != nullptr) {
    delete _impl_.create_execution_property_table_;
  }
  _impl_.create_execution_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_execution_ != nullptr) {
    delete _impl_.insert_execution_;
  }
  _impl_.insert_execution_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_execution_by_id_ != nullptr) {
    delete _impl_.select_execution_by_id_;
  }
  _impl_.select_execution_by_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_execution_property_ != nullptr) {
    delete _impl_.insert_execution_property_;
  }
  _impl_.insert_execution_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_execution_property_by_execution_id_ != nullptr) {
    delete _impl_.select_execution_property_by_execution_id_;
  }
  _impl_.select_execution_property_by_execution_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_execution_property_ != nullptr) {
    delete _impl_.update_execution_property_;
  }
  _impl_.update_execution_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_execution_property_ != nullptr) {
    delete _impl_.delete_execution_property_;
  }
  _impl_.delete_execution_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_execution_ != nullptr) {
    delete _impl_.update_execution_;
  }
  _impl_.update_execution_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_event_table_ != nullptr) {
    delete _impl_.drop_event_table_;
  }
  _impl_.drop_event_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_event_table_ != nullptr) {
    delete _impl_.create_event_table_;
  }
  _impl_.create_event_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_event_ != nullptr) {
    delete _impl_.insert_event_;
  }
  _impl_.insert_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_event_path_table_ != nullptr) {
    delete _impl_.drop_event_path_table_;
  }
  _impl_.drop_event_path_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_event_path_table_ != nullptr) {
    delete _impl_.create_event_path_table_;
  }
  _impl_.create_event_path_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_event_path_ != nullptr) {
    delete _impl_.insert_event_path_;
  }
  _impl_.insert_event_path_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_type_table_ != nullptr) {
    delete _impl_.check_type_table_;
  }
  _impl_.check_type_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_type_property_table_ != nullptr) {
    delete _impl_.check_type_property_table_;
  }
  _impl_.check_type_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_artifact_table_ != nullptr) {
    delete _impl_.check_artifact_table_;
  }
  _impl_.check_artifact_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_artifact_property_table_ != nullptr) {
    delete _impl_.check_artifact_property_table_;
  }
  _impl_.check_artifact_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_execution_table_ != nullptr) {
    delete _impl_.check_execution_table_;
  }
  _impl_.check_execution_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_execution_property_table_ != nullptr) {
    delete _impl_.check_execution_property_table_;
  }
  _impl_.check_execution_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_event_table_ != nullptr) {
    delete _impl_.check_event_table_;
  }
  _impl_.check_event_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_event_path_table_ != nullptr) {
    delete _impl_.check_event_path_table_;
  }
  _impl_.check_event_path_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_artifacts_by_type_id_ != nullptr) {
    delete _impl_.select_artifacts_by_type_id_;
  }
  _impl_.select_artifacts_by_type_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_executions_by_type_id_ != nullptr) {
    delete _impl_.select_executions_by_type_id_;
  }
  _impl_.select_executions_by_type_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_artifact_type_ != nullptr) {
    delete _impl_.insert_artifact_type_;
  }
  _impl_.insert_artifact_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_execution_type_ != nullptr) {
    delete _impl_.insert_execution_type_;
  }
  _impl_.insert_execution_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_artifacts_by_uri_ != nullptr) {
    delete _impl_.select_artifacts_by_uri_;
  }
  _impl_.select_artifacts_by_uri_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_all_types_ != nullptr) {
    delete _impl_.select_all_types_;
  }
  _impl_.select_all_types_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_context_type_ != nullptr) {
    delete _impl_.insert_context_type_;
  }
  _impl_.insert_context_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_mlmd_env_table_ != nullptr) {
    delete _impl_.drop_mlmd_env_table_;
  }
  _impl_.drop_mlmd_env_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_mlmd_env_table_ != nullptr) {
    delete _impl_.create_mlmd_env_table_;
  }
  _impl_.create_mlmd_env_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_mlmd_env_table_ != nullptr) {
    delete _impl_.check_mlmd_env_table_;
  }
  _impl_.check_mlmd_env_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_schema_version_ != nullptr) {
    delete _impl_.update_schema_version_;
  }
  _impl_.update_schema_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_tables_in_v0_13_2_ != nullptr) {
    delete _impl_.check_tables_in_v0_13_2_;
  }
  _impl_.check_tables_in_v0_13_2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_schema_version_ != nullptr) {
    delete _impl_.insert_schema_version_;
  }
  _impl_.insert_schema_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_context_table_ != nullptr) {
    delete _impl_.drop_context_table_;
  }
  _impl_.drop_context_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_context_table_ != nullptr) {
    delete _impl_.create_context_table_;
  }
  _impl_.create_context_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_context_table_ != nullptr) {
    delete _impl_.check_context_table_;
  }
  _impl_.check_context_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_context_ != nullptr) {
    delete _impl_.insert_context_;
  }
  _impl_.insert_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_context_by_id_ != nullptr) {
    delete _impl_.select_context_by_id_;
  }
  _impl_.select_context_by_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_contexts_by_type_id_ != nullptr) {
    delete _impl_.select_contexts_by_type_id_;
  }
  _impl_.select_contexts_by_type_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_context_ != nullptr) {
    delete _impl_.update_context_;
  }
  _impl_.update_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_context_property_table_ != nullptr) {
    delete _impl_.drop_context_property_table_;
  }
  _impl_.drop_context_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_context_property_table_ != nullptr) {
    delete _impl_.create_context_property_table_;
  }
  _impl_.create_context_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_context_property_table_ != nullptr) {
    delete _impl_.check_context_property_table_;
  }
  _impl_.check_context_property_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_context_property_ != nullptr) {
    delete _impl_.insert_context_property_;
  }
  _impl_.insert_context_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_context_property_by_context_id_ != nullptr) {
    delete _impl_.select_context_property_by_context_id_;
  }
  _impl_.select_context_property_by_context_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_context_property_ != nullptr) {
    delete _impl_.update_context_property_;
  }
  _impl_.update_context_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_context_property_ != nullptr) {
    delete _impl_.delete_context_property_;
  }
  _impl_.delete_context_property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_association_table_ != nullptr) {
    delete _impl_.drop_association_table_;
  }
  _impl_.drop_association_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_association_table_ != nullptr) {
    delete _impl_.create_association_table_;
  }
  _impl_.create_association_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_association_table_ != nullptr) {
    delete _impl_.check_association_table_;
  }
  _impl_.check_association_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_association_ != nullptr) {
    delete _impl_.insert_association_;
  }
  _impl_.insert_association_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_association_by_context_id_ != nullptr) {
    delete _impl_.select_association_by_context_id_;
  }
  _impl_.select_association_by_context_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_attribution_table_ != nullptr) {
    delete _impl_.drop_attribution_table_;
  }
  _impl_.drop_attribution_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_attribution_table_ != nullptr) {
    delete _impl_.create_attribution_table_;
  }
  _impl_.create_attribution_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_attribution_table_ != nullptr) {
    delete _impl_.check_attribution_table_;
  }
  _impl_.check_attribution_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_attribution_ != nullptr) {
    delete _impl_.insert_attribution_;
  }
  _impl_.insert_attribution_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_attribution_by_context_id_ != nullptr) {
    delete _impl_.select_attribution_by_context_id_;
  }
  _impl_.select_attribution_by_context_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_context_by_type_id_and_name_ != nullptr) {
    delete _impl_.select_context_by_type_id_and_name_;
  }
  _impl_.select_context_by_type_id_and_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_artifact_by_type_id_and_name_ != nullptr) {
    delete _impl_.select_artifact_by_type_id_and_name_;
  }
  _impl_.select_artifact_by_type_id_and_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_execution_by_type_id_and_name_ != nullptr) {
    delete _impl_.select_execution_by_type_id_and_name_;
  }
  _impl_.select_execution_by_type_id_and_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_event_by_artifact_ids_ != nullptr) {
    delete _impl_.select_event_by_artifact_ids_;
  }
  _impl_.select_event_by_artifact_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_event_by_execution_ids_ != nullptr) {
    delete _impl_.select_event_by_execution_ids_;
  }
  _impl_.select_event_by_execution_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_event_path_by_event_ids_ != nullptr) {
    delete _impl_.select_event_path_by_event_ids_;
  }
  _impl_.select_event_path_by_event_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_parent_type_table_ != nullptr) {
    delete _impl_.drop_parent_type_table_;
  }
  _impl_.drop_parent_type_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_parent_type_table_ != nullptr) {
    delete _impl_.create_parent_type_table_;
  }
  _impl_.create_parent_type_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_parent_type_table_ != nullptr) {
    delete _impl_.check_parent_type_table_;
  }
  _impl_.check_parent_type_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.drop_parent_context_table_ != nullptr) {
    delete _impl_.drop_parent_context_table_;
  }
  _impl_.drop_parent_context_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_parent_context_table_ != nullptr) {
    delete _impl_.create_parent_context_table_;
  }
  _impl_.create_parent_context_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_parent_context_table_ != nullptr) {
    delete _impl_.check_parent_context_table_;
  }
  _impl_.check_parent_context_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_parent_context_ != nullptr) {
    delete _impl_.insert_parent_context_;
  }
  _impl_.insert_parent_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_parent_context_by_context_id_ != nullptr) {
    delete _impl_.select_parent_context_by_context_id_;
  }
  _impl_.select_parent_context_by_context_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_parent_context_by_parent_context_id_ != nullptr) {
    delete _impl_.select_parent_context_by_parent_context_id_;
  }
  _impl_.select_parent_context_by_parent_context_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_parent_type_ != nullptr) {
    delete _impl_.insert_parent_type_;
  }
  _impl_.insert_parent_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_parent_type_by_type_id_ != nullptr) {
    delete _impl_.select_parent_type_by_type_id_;
  }
  _impl_.select_parent_type_by_type_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_type_by_name_and_version_ != nullptr) {
    delete _impl_.select_type_by_name_and_version_;
  }
  _impl_.select_type_by_name_and_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_contexts_by_id_ != nullptr) {
    delete _impl_.delete_contexts_by_id_;
  }
  _impl_.delete_contexts_by_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_contexts_properties_by_contexts_id_ != nullptr) {
    delete _impl_.delete_contexts_properties_by_contexts_id_;
  }
  _impl_.delete_contexts_properties_by_contexts_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_parent_contexts_by_parent_ids_ != nullptr) {
    delete _impl_.delete_parent_contexts_by_parent_ids_;
  }
  _impl_.delete_parent_contexts_by_parent_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_parent_contexts_by_child_ids_ != nullptr) {
    delete _impl_.delete_parent_contexts_by_child_ids_;
  }
  _impl_.delete_parent_contexts_by_child_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_artifacts_by_id_ != nullptr) {
    delete _impl_.delete_artifacts_by_id_;
  }
  _impl_.delete_artifacts_by_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_artifacts_properties_by_artifacts_id_ != nullptr) {
    delete _impl_.delete_artifacts_properties_by_artifacts_id_;
  }
  _impl_.delete_artifacts_properties_by_artifacts_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_executions_by_id_ != nullptr) {
    delete _impl_.delete_executions_by_id_;
  }
  _impl_.delete_executions_by_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_executions_properties_by_executions_id_ != nullptr) {
    delete _impl_.delete_executions_properties_by_executions_id_;
  }
  _impl_.delete_executions_properties_by_executions_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_events_by_artifacts_id_ != nullptr) {
    delete _impl_.delete_events_by_artifacts_id_;
  }
  _impl_.delete_events_by_artifacts_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_events_by_executions_id_ != nullptr) {
    delete _impl_.delete_events_by_executions_id_;
  }
  _impl_.delete_events_by_executions_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_associations_by_contexts_id_ != nullptr) {
    delete _impl_.delete_associations_by_contexts_id_;
  }
  _impl_.delete_associations_by_contexts_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_associations_by_executions_id_ != nullptr) {
    delete _impl_.delete_associations_by_executions_id_;
  }
  _impl_.delete_associations_by_executions_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_attributions_by_contexts_id_ != nullptr) {
    delete _impl_.delete_attributions_by_contexts_id_;
  }
  _impl_.delete_attributions_by_contexts_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_attributions_by_artifacts_id_ != nullptr) {
    delete _impl_.delete_attributions_by_artifacts_id_;
  }
  _impl_.delete_attributions_by_artifacts_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_event_paths_ != nullptr) {
    delete _impl_.delete_event_paths_;
  }
  _impl_.delete_event_paths_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_parent_type_ != nullptr) {
    delete _impl_.delete_parent_type_;
  }
  _impl_.delete_parent_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_types_by_id_ != nullptr) {
    delete _impl_.select_types_by_id_;
  }
  _impl_.select_types_by_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_properties_by_type_id_ != nullptr) {
    delete _impl_.select_properties_by_type_id_;
  }
  _impl_.select_properties_by_type_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_artifacts_by_external_ids_ != nullptr) {
    delete _impl_.select_artifacts_by_external_ids_;
  }
  _impl_.select_artifacts_by_external_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delete_parent_contexts_by_parent_id_and_child_ids_ != nullptr) {
    delete _impl_.delete_parent_contexts_by_parent_id_and_child_ids_;
  }
  _impl_.delete_parent_contexts_by_parent_id_and_child_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_executions_by_external_ids_ != nullptr) {
    delete _impl_.select_executions_by_external_ids_;
  }
  _impl_.select_executions_by_external_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_contexts_by_external_ids_ != nullptr) {
    delete _impl_.select_contexts_by_external_ids_;
  }
  _impl_.select_contexts_by_external_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_types_by_external_ids_ != nullptr) {
    delete _impl_.select_types_by_external_ids_;
  }
  _impl_.select_types_by_external_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_source_type_specific_options_ != nullptr) {
    delete _impl_.metadata_source_type_specific_options_;
  }
  _impl_.metadata_source_type_specific_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_types_by_names_ != nullptr) {
    delete _impl_.select_types_by_names_;
  }
  _impl_.select_types_by_names_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_types_by_names_and_versions_ != nullptr) {
    delete _impl_.select_types_by_names_and_versions_;
  }
  _impl_.select_types_by_names_and_versions_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_type_ != nullptr) {
    delete _impl_.update_type_;
  }
  _impl_.update_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_parent_contexts_by_context_ids_ != nullptr) {
    delete _impl_.select_parent_contexts_by_context_ids_;
  }
  _impl_.select_parent_contexts_by_context_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_parent_contexts_by_parent_context_ids_ != nullptr) {
    delete _impl_.select_parent_contexts_by_parent_context_ids_;
  }
  _impl_.select_parent_contexts_by_parent_context_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.check_mlmd_env_table_existence_ != nullptr) {
    delete _impl_.check_mlmd_env_table_existence_;
  }
  _impl_.check_mlmd_env_table_existence_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_associations_by_execution_ids_ != nullptr) {
    delete _impl_.select_associations_by_execution_ids_;
  }
  _impl_.select_associations_by_execution_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_attributions_by_artifact_ids_ != nullptr) {
    delete _impl_.select_attributions_by_artifact_ids_;
  }
  _impl_.select_attributions_by_artifact_ids_ = nullptr;
  ::memset(&_impl_.schema_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.metadata_source_type_) -
      reinterpret_cast<char*>(&_impl_.schema_version_)) + sizeof(_impl_.metadata_source_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataSourceQueryConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ml_metadata.MetadataSourceType metadata_source_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_metadata_source_type(static_cast<::ml_metadata::MetadataSourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_type_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_type_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_type_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_type_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_type_by_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_type_by_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_type_property_table = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_type_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_type_property_table = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_type_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_type_property = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_type_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_property_by_type_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_property_by_type_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_last_insert_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_last_insert_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_artifact_table = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_artifact_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_artifact_table = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_artifact_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_artifact = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_artifact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifact_by_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_artifact_by_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_artifact_property_table = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_artifact_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_artifact_property_table = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_artifact_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_artifact_property = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_artifact_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifact_property_by_artifact_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_artifact_property_by_artifact_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_type_by_name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_type_by_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_artifact = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_artifact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_artifact_property = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_artifact_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_artifact_property = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_artifact_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_execution_table = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_execution_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_execution_table = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_execution_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_execution_property_table = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_execution_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_execution_property_table = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_execution_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_execution = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_execution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_execution_by_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_execution_by_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_execution_property = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_execution_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_execution_property_by_execution_id = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_execution_property_by_execution_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_execution_property = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_execution_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_execution_property = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_execution_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_execution = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_execution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_event_table = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_event_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_event_table = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_event_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_event = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_event_path_table = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_event_path_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_event_path_table = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_event_path_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_event_path = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_event_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_type_table = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_type_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_type_property_table = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_type_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_artifact_table = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_artifact_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_artifact_property_table = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_artifact_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_execution_table = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_execution_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_execution_property_table = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_execution_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_event_table = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_event_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_event_path_table = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_event_path_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifacts_by_type_id = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_artifacts_by_type_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_executions_by_type_id = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_executions_by_type_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_artifact_type = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_artifact_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_execution_type = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_execution_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifacts_by_uri = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_artifacts_by_uri(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_all_types = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_context_type = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_context_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 schema_version = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.schema_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_mlmd_env_table = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_mlmd_env_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_mlmd_env_table = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_mlmd_env_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int64, .ml_metadata.MetadataSourceQueryConfig.MigrationScheme> migration_schemes = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.migration_schemes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<498>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_mlmd_env_table = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_mlmd_env_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_schema_version = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_schema_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_tables_in_v0_13_2 = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_tables_in_v0_13_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_schema_version = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_schema_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_context_table = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_context_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_context_table = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_context_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_context_table = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_context_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_context = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_context_by_id = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_context_by_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_contexts_by_type_id = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_contexts_by_type_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_context = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_context_property_table = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_context_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_context_property_table = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_context_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_context_property_table = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_context_property_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_context_property = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_context_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_context_property_by_context_id = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_context_property_by_context_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_context_property = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_context_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_context_property = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_context_property(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_association_table = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_association_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_association_table = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_association_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_association_table = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_association_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_association = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_association(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_association_by_context_id = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_association_by_context_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_attribution_table = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_attribution_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_attribution_table = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_attribution_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_attribution_table = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_attribution_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_attribution = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_attribution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_attribution_by_context_id = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_attribution_by_context_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_context_by_type_id_and_name = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_context_by_type_id_and_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifact_by_type_id_and_name = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_artifact_by_type_id_and_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_execution_by_type_id_and_name = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_execution_by_type_id_and_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_event_by_artifact_ids = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_event_by_artifact_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_event_by_execution_ids = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_event_by_execution_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_event_path_by_event_ids = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_event_path_by_event_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_parent_type_table = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_parent_type_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_parent_type_table = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_parent_type_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_parent_type_table = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_parent_type_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_parent_context_table = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_parent_context_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_parent_context_table = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_parent_context_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_parent_context_table = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_parent_context_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery secondary_indices = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_secondary_indices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<842>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_parent_context = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_parent_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_context_by_context_id = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_parent_context_by_context_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_context_by_parent_context_id = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_parent_context_by_parent_context_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_parent_type = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_parent_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_type_by_type_id = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_parent_type_by_type_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_type_by_name_and_version = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_type_by_name_and_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_contexts_by_id = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_contexts_by_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_contexts_properties_by_contexts_id = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_contexts_properties_by_contexts_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_contexts_by_parent_ids = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_parent_contexts_by_parent_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_contexts_by_child_ids = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_parent_contexts_by_child_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_artifacts_by_id = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_artifacts_by_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_artifacts_properties_by_artifacts_id = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_artifacts_properties_by_artifacts_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_executions_by_id = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_executions_by_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_executions_properties_by_executions_id = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_executions_properties_by_executions_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_events_by_artifacts_id = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_events_by_artifacts_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_events_by_executions_id = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_events_by_executions_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_associations_by_contexts_id = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_associations_by_contexts_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_associations_by_executions_id = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_associations_by_executions_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_attributions_by_contexts_id = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_attributions_by_contexts_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_attributions_by_artifacts_id = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_attributions_by_artifacts_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_event_paths = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_event_paths(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_type = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_parent_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_id = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_types_by_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_properties_by_type_id = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_properties_by_type_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifacts_by_external_ids = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_artifacts_by_external_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_contexts_by_parent_id_and_child_ids = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_parent_contexts_by_parent_id_and_child_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_executions_by_external_ids = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_executions_by_external_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_contexts_by_external_ids = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_contexts_by_external_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_external_ids = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_types_by_external_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any metadata_source_type_specific_options = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_source_type_specific_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_names = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_types_by_names(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_names_and_versions = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_types_by_names_and_versions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_type = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_contexts_by_context_ids = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_parent_contexts_by_context_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_contexts_by_parent_context_ids = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_parent_contexts_by_parent_context_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_mlmd_env_table_existence = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_mlmd_env_table_existence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_associations_by_execution_ids = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_associations_by_execution_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_attributions_by_artifact_ids = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_attributions_by_artifact_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataSourceQueryConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MetadataSourceQueryConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ml_metadata.MetadataSourceType metadata_source_type = 1;
  if (this->_internal_metadata_source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_metadata_source_type(), target);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_type_table = 3;
  if (this->_internal_has_drop_type_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::drop_type_table(this),
        _Internal::drop_type_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_type_table = 4;
  if (this->_internal_has_create_type_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::create_type_table(this),
        _Internal::create_type_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_type_by_id = 6;
  if (this->_internal_has_select_type_by_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::select_type_by_id(this),
        _Internal::select_type_by_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_type_property_table = 7;
  if (this->_internal_has_drop_type_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::drop_type_property_table(this),
        _Internal::drop_type_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_type_property_table = 8;
  if (this->_internal_has_create_type_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::create_type_property_table(this),
        _Internal::create_type_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_type_property = 9;
  if (this->_internal_has_insert_type_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::insert_type_property(this),
        _Internal::insert_type_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_property_by_type_id = 10;
  if (this->_internal_has_select_property_by_type_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::select_property_by_type_id(this),
        _Internal::select_property_by_type_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_last_insert_id = 11;
  if (this->_internal_has_select_last_insert_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::select_last_insert_id(this),
        _Internal::select_last_insert_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_artifact_table = 12;
  if (this->_internal_has_drop_artifact_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::drop_artifact_table(this),
        _Internal::drop_artifact_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_artifact_table = 13;
  if (this->_internal_has_create_artifact_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::create_artifact_table(this),
        _Internal::create_artifact_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_artifact = 14;
  if (this->_internal_has_insert_artifact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::insert_artifact(this),
        _Internal::insert_artifact(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifact_by_id = 15;
  if (this->_internal_has_select_artifact_by_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::select_artifact_by_id(this),
        _Internal::select_artifact_by_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_artifact_property_table = 16;
  if (this->_internal_has_drop_artifact_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::drop_artifact_property_table(this),
        _Internal::drop_artifact_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_artifact_property_table = 17;
  if (this->_internal_has_create_artifact_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::create_artifact_property_table(this),
        _Internal::create_artifact_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_artifact_property = 18;
  if (this->_internal_has_insert_artifact_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::insert_artifact_property(this),
        _Internal::insert_artifact_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifact_property_by_artifact_id = 19;
  if (this->_internal_has_select_artifact_property_by_artifact_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::select_artifact_property_by_artifact_id(this),
        _Internal::select_artifact_property_by_artifact_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_type_by_name = 20;
  if (this->_internal_has_select_type_by_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::select_type_by_name(this),
        _Internal::select_type_by_name(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_artifact = 21;
  if (this->_internal_has_update_artifact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::update_artifact(this),
        _Internal::update_artifact(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_artifact_property = 22;
  if (this->_internal_has_update_artifact_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::update_artifact_property(this),
        _Internal::update_artifact_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_artifact_property = 23;
  if (this->_internal_has_delete_artifact_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::delete_artifact_property(this),
        _Internal::delete_artifact_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_execution_table = 24;
  if (this->_internal_has_drop_execution_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::drop_execution_table(this),
        _Internal::drop_execution_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_execution_table = 25;
  if (this->_internal_has_create_execution_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::create_execution_table(this),
        _Internal::create_execution_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_execution_property_table = 26;
  if (this->_internal_has_drop_execution_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::drop_execution_property_table(this),
        _Internal::drop_execution_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_execution_property_table = 27;
  if (this->_internal_has_create_execution_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::create_execution_property_table(this),
        _Internal::create_execution_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_execution = 28;
  if (this->_internal_has_insert_execution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::insert_execution(this),
        _Internal::insert_execution(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_execution_by_id = 29;
  if (this->_internal_has_select_execution_by_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::select_execution_by_id(this),
        _Internal::select_execution_by_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_execution_property = 30;
  if (this->_internal_has_insert_execution_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::insert_execution_property(this),
        _Internal::insert_execution_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_execution_property_by_execution_id = 31;
  if (this->_internal_has_select_execution_property_by_execution_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::select_execution_property_by_execution_id(this),
        _Internal::select_execution_property_by_execution_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_execution_property = 32;
  if (this->_internal_has_update_execution_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::update_execution_property(this),
        _Internal::update_execution_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_execution_property = 33;
  if (this->_internal_has_delete_execution_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::delete_execution_property(this),
        _Internal::delete_execution_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_execution = 34;
  if (this->_internal_has_update_execution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::update_execution(this),
        _Internal::update_execution(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_event_table = 35;
  if (this->_internal_has_drop_event_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::drop_event_table(this),
        _Internal::drop_event_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_event_table = 36;
  if (this->_internal_has_create_event_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::create_event_table(this),
        _Internal::create_event_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_event = 37;
  if (this->_internal_has_insert_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::insert_event(this),
        _Internal::insert_event(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_event_path_table = 40;
  if (this->_internal_has_drop_event_path_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::drop_event_path_table(this),
        _Internal::drop_event_path_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_event_path_table = 41;
  if (this->_internal_has_create_event_path_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::create_event_path_table(this),
        _Internal::create_event_path_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_event_path = 42;
  if (this->_internal_has_insert_event_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::insert_event_path(this),
        _Internal::insert_event_path(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_type_table = 44;
  if (this->_internal_has_check_type_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::check_type_table(this),
        _Internal::check_type_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_type_property_table = 45;
  if (this->_internal_has_check_type_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::check_type_property_table(this),
        _Internal::check_type_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_artifact_table = 46;
  if (this->_internal_has_check_artifact_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::check_artifact_table(this),
        _Internal::check_artifact_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_artifact_property_table = 47;
  if (this->_internal_has_check_artifact_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::check_artifact_property_table(this),
        _Internal::check_artifact_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_execution_table = 48;
  if (this->_internal_has_check_execution_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::check_execution_table(this),
        _Internal::check_execution_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_execution_property_table = 49;
  if (this->_internal_has_check_execution_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::check_execution_property_table(this),
        _Internal::check_execution_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_event_table = 50;
  if (this->_internal_has_check_event_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::check_event_table(this),
        _Internal::check_event_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_event_path_table = 51;
  if (this->_internal_has_check_event_path_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::check_event_path_table(this),
        _Internal::check_event_path_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifacts_by_type_id = 52;
  if (this->_internal_has_select_artifacts_by_type_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::select_artifacts_by_type_id(this),
        _Internal::select_artifacts_by_type_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_executions_by_type_id = 53;
  if (this->_internal_has_select_executions_by_type_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::select_executions_by_type_id(this),
        _Internal::select_executions_by_type_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_artifact_type = 54;
  if (this->_internal_has_insert_artifact_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::insert_artifact_type(this),
        _Internal::insert_artifact_type(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_execution_type = 55;
  if (this->_internal_has_insert_execution_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::insert_execution_type(this),
        _Internal::insert_execution_type(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifacts_by_uri = 56;
  if (this->_internal_has_select_artifacts_by_uri()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::select_artifacts_by_uri(this),
        _Internal::select_artifacts_by_uri(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_all_types = 57;
  if (this->_internal_has_select_all_types()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::select_all_types(this),
        _Internal::select_all_types(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_context_type = 58;
  if (this->_internal_has_insert_context_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, _Internal::insert_context_type(this),
        _Internal::insert_context_type(this).GetCachedSize(), target, stream);
  }

  // int64 schema_version = 59;
  if (this->_internal_schema_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(59, this->_internal_schema_version(), target);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_mlmd_env_table = 60;
  if (this->_internal_has_drop_mlmd_env_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::drop_mlmd_env_table(this),
        _Internal::drop_mlmd_env_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_mlmd_env_table = 61;
  if (this->_internal_has_create_mlmd_env_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::create_mlmd_env_table(this),
        _Internal::create_mlmd_env_table(this).GetCachedSize(), target, stream);
  }

  // map<int64, .ml_metadata.MetadataSourceQueryConfig.MigrationScheme> migration_schemes = 62;
  if (!this->_internal_migration_schemes().empty()) {
    using MapType = ::_pb::Map<int64_t, ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme>;
    using WireHelper = MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_migration_schemes();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(62, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(62, entry.first, entry.second, target, stream);
      }
    }
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_mlmd_env_table = 63;
  if (this->_internal_has_check_mlmd_env_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, _Internal::check_mlmd_env_table(this),
        _Internal::check_mlmd_env_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_schema_version = 64;
  if (this->_internal_has_update_schema_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::update_schema_version(this),
        _Internal::update_schema_version(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_tables_in_v0_13_2 = 65;
  if (this->_internal_has_check_tables_in_v0_13_2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(65, _Internal::check_tables_in_v0_13_2(this),
        _Internal::check_tables_in_v0_13_2(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_schema_version = 66;
  if (this->_internal_has_insert_schema_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(66, _Internal::insert_schema_version(this),
        _Internal::insert_schema_version(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_context_table = 67;
  if (this->_internal_has_drop_context_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, _Internal::drop_context_table(this),
        _Internal::drop_context_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_context_table = 68;
  if (this->_internal_has_create_context_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(68, _Internal::create_context_table(this),
        _Internal::create_context_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_context_table = 69;
  if (this->_internal_has_check_context_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(69, _Internal::check_context_table(this),
        _Internal::check_context_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_context = 70;
  if (this->_internal_has_insert_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, _Internal::insert_context(this),
        _Internal::insert_context(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_context_by_id = 71;
  if (this->_internal_has_select_context_by_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(71, _Internal::select_context_by_id(this),
        _Internal::select_context_by_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_contexts_by_type_id = 72;
  if (this->_internal_has_select_contexts_by_type_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(72, _Internal::select_contexts_by_type_id(this),
        _Internal::select_contexts_by_type_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_context = 73;
  if (this->_internal_has_update_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(73, _Internal::update_context(this),
        _Internal::update_context(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_context_property_table = 74;
  if (this->_internal_has_drop_context_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(74, _Internal::drop_context_property_table(this),
        _Internal::drop_context_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_context_property_table = 75;
  if (this->_internal_has_create_context_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, _Internal::create_context_property_table(this),
        _Internal::create_context_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_context_property_table = 76;
  if (this->_internal_has_check_context_property_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, _Internal::check_context_property_table(this),
        _Internal::check_context_property_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_context_property = 77;
  if (this->_internal_has_insert_context_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, _Internal::insert_context_property(this),
        _Internal::insert_context_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_context_property_by_context_id = 78;
  if (this->_internal_has_select_context_property_by_context_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, _Internal::select_context_property_by_context_id(this),
        _Internal::select_context_property_by_context_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_context_property = 79;
  if (this->_internal_has_update_context_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, _Internal::update_context_property(this),
        _Internal::update_context_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_context_property = 80;
  if (this->_internal_has_delete_context_property()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, _Internal::delete_context_property(this),
        _Internal::delete_context_property(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_association_table = 81;
  if (this->_internal_has_drop_association_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(81, _Internal::drop_association_table(this),
        _Internal::drop_association_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_association_table = 82;
  if (this->_internal_has_create_association_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(82, _Internal::create_association_table(this),
        _Internal::create_association_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_association_table = 83;
  if (this->_internal_has_check_association_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(83, _Internal::check_association_table(this),
        _Internal::check_association_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_association = 84;
  if (this->_internal_has_insert_association()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(84, _Internal::insert_association(this),
        _Internal::insert_association(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_association_by_context_id = 85;
  if (this->_internal_has_select_association_by_context_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::select_association_by_context_id(this),
        _Internal::select_association_by_context_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_attribution_table = 87;
  if (this->_internal_has_drop_attribution_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(87, _Internal::drop_attribution_table(this),
        _Internal::drop_attribution_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_attribution_table = 88;
  if (this->_internal_has_create_attribution_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(88, _Internal::create_attribution_table(this),
        _Internal::create_attribution_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_attribution_table = 89;
  if (this->_internal_has_check_attribution_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(89, _Internal::check_attribution_table(this),
        _Internal::check_attribution_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_attribution = 90;
  if (this->_internal_has_insert_attribution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(90, _Internal::insert_attribution(this),
        _Internal::insert_attribution(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_attribution_by_context_id = 91;
  if (this->_internal_has_select_attribution_by_context_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(91, _Internal::select_attribution_by_context_id(this),
        _Internal::select_attribution_by_context_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_context_by_type_id_and_name = 93;
  if (this->_internal_has_select_context_by_type_id_and_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(93, _Internal::select_context_by_type_id_and_name(this),
        _Internal::select_context_by_type_id_and_name(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifact_by_type_id_and_name = 94;
  if (this->_internal_has_select_artifact_by_type_id_and_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(94, _Internal::select_artifact_by_type_id_and_name(this),
        _Internal::select_artifact_by_type_id_and_name(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_execution_by_type_id_and_name = 95;
  if (this->_internal_has_select_execution_by_type_id_and_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(95, _Internal::select_execution_by_type_id_and_name(this),
        _Internal::select_execution_by_type_id_and_name(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_event_by_artifact_ids = 96;
  if (this->_internal_has_select_event_by_artifact_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(96, _Internal::select_event_by_artifact_ids(this),
        _Internal::select_event_by_artifact_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_event_by_execution_ids = 97;
  if (this->_internal_has_select_event_by_execution_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(97, _Internal::select_event_by_execution_ids(this),
        _Internal::select_event_by_execution_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_event_path_by_event_ids = 98;
  if (this->_internal_has_select_event_path_by_event_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(98, _Internal::select_event_path_by_event_ids(this),
        _Internal::select_event_path_by_event_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_parent_type_table = 99;
  if (this->_internal_has_drop_parent_type_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::drop_parent_type_table(this),
        _Internal::drop_parent_type_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_parent_type_table = 100;
  if (this->_internal_has_create_parent_type_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::create_parent_type_table(this),
        _Internal::create_parent_type_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_parent_type_table = 101;
  if (this->_internal_has_check_parent_type_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::check_parent_type_table(this),
        _Internal::check_parent_type_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_parent_context_table = 102;
  if (this->_internal_has_drop_parent_context_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::drop_parent_context_table(this),
        _Internal::drop_parent_context_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_parent_context_table = 103;
  if (this->_internal_has_create_parent_context_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::create_parent_context_table(this),
        _Internal::create_parent_context_table(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_parent_context_table = 104;
  if (this->_internal_has_check_parent_context_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::check_parent_context_table(this),
        _Internal::check_parent_context_table(this).GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery secondary_indices = 105;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_secondary_indices_size()); i < n; i++) {
    const auto& repfield = this->_internal_secondary_indices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(105, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_parent_context = 106;
  if (this->_internal_has_insert_parent_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(106, _Internal::insert_parent_context(this),
        _Internal::insert_parent_context(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_context_by_context_id = 107;
  if (this->_internal_has_select_parent_context_by_context_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, _Internal::select_parent_context_by_context_id(this),
        _Internal::select_parent_context_by_context_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_context_by_parent_context_id = 108;
  if (this->_internal_has_select_parent_context_by_parent_context_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, _Internal::select_parent_context_by_parent_context_id(this),
        _Internal::select_parent_context_by_parent_context_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_parent_type = 109;
  if (this->_internal_has_insert_parent_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(109, _Internal::insert_parent_type(this),
        _Internal::insert_parent_type(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_type_by_type_id = 110;
  if (this->_internal_has_select_parent_type_by_type_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(110, _Internal::select_parent_type_by_type_id(this),
        _Internal::select_parent_type_by_type_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_type_by_name_and_version = 111;
  if (this->_internal_has_select_type_by_name_and_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(111, _Internal::select_type_by_name_and_version(this),
        _Internal::select_type_by_name_and_version(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_contexts_by_id = 112;
  if (this->_internal_has_delete_contexts_by_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(112, _Internal::delete_contexts_by_id(this),
        _Internal::delete_contexts_by_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_contexts_properties_by_contexts_id = 113;
  if (this->_internal_has_delete_contexts_properties_by_contexts_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(113, _Internal::delete_contexts_properties_by_contexts_id(this),
        _Internal::delete_contexts_properties_by_contexts_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_contexts_by_parent_ids = 114;
  if (this->_internal_has_delete_parent_contexts_by_parent_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(114, _Internal::delete_parent_contexts_by_parent_ids(this),
        _Internal::delete_parent_contexts_by_parent_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_contexts_by_child_ids = 115;
  if (this->_internal_has_delete_parent_contexts_by_child_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(115, _Internal::delete_parent_contexts_by_child_ids(this),
        _Internal::delete_parent_contexts_by_child_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_artifacts_by_id = 116;
  if (this->_internal_has_delete_artifacts_by_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(116, _Internal::delete_artifacts_by_id(this),
        _Internal::delete_artifacts_by_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_artifacts_properties_by_artifacts_id = 117;
  if (this->_internal_has_delete_artifacts_properties_by_artifacts_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(117, _Internal::delete_artifacts_properties_by_artifacts_id(this),
        _Internal::delete_artifacts_properties_by_artifacts_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_executions_by_id = 118;
  if (this->_internal_has_delete_executions_by_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(118, _Internal::delete_executions_by_id(this),
        _Internal::delete_executions_by_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_executions_properties_by_executions_id = 119;
  if (this->_internal_has_delete_executions_properties_by_executions_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(119, _Internal::delete_executions_properties_by_executions_id(this),
        _Internal::delete_executions_properties_by_executions_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_events_by_artifacts_id = 120;
  if (this->_internal_has_delete_events_by_artifacts_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(120, _Internal::delete_events_by_artifacts_id(this),
        _Internal::delete_events_by_artifacts_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_events_by_executions_id = 121;
  if (this->_internal_has_delete_events_by_executions_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(121, _Internal::delete_events_by_executions_id(this),
        _Internal::delete_events_by_executions_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_associations_by_contexts_id = 122;
  if (this->_internal_has_delete_associations_by_contexts_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(122, _Internal::delete_associations_by_contexts_id(this),
        _Internal::delete_associations_by_contexts_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_associations_by_executions_id = 123;
  if (this->_internal_has_delete_associations_by_executions_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(123, _Internal::delete_associations_by_executions_id(this),
        _Internal::delete_associations_by_executions_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_attributions_by_contexts_id = 124;
  if (this->_internal_has_delete_attributions_by_contexts_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(124, _Internal::delete_attributions_by_contexts_id(this),
        _Internal::delete_attributions_by_contexts_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_attributions_by_artifacts_id = 125;
  if (this->_internal_has_delete_attributions_by_artifacts_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(125, _Internal::delete_attributions_by_artifacts_id(this),
        _Internal::delete_attributions_by_artifacts_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_event_paths = 126;
  if (this->_internal_has_delete_event_paths()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(126, _Internal::delete_event_paths(this),
        _Internal::delete_event_paths(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_type = 127;
  if (this->_internal_has_delete_parent_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(127, _Internal::delete_parent_type(this),
        _Internal::delete_parent_type(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_id = 128;
  if (this->_internal_has_select_types_by_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(128, _Internal::select_types_by_id(this),
        _Internal::select_types_by_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_properties_by_type_id = 129;
  if (this->_internal_has_select_properties_by_type_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(129, _Internal::select_properties_by_type_id(this),
        _Internal::select_properties_by_type_id(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifacts_by_external_ids = 130;
  if (this->_internal_has_select_artifacts_by_external_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(130, _Internal::select_artifacts_by_external_ids(this),
        _Internal::select_artifacts_by_external_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_contexts_by_parent_id_and_child_ids = 131;
  if (this->_internal_has_delete_parent_contexts_by_parent_id_and_child_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(131, _Internal::delete_parent_contexts_by_parent_id_and_child_ids(this),
        _Internal::delete_parent_contexts_by_parent_id_and_child_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_executions_by_external_ids = 132;
  if (this->_internal_has_select_executions_by_external_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(132, _Internal::select_executions_by_external_ids(this),
        _Internal::select_executions_by_external_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_contexts_by_external_ids = 133;
  if (this->_internal_has_select_contexts_by_external_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(133, _Internal::select_contexts_by_external_ids(this),
        _Internal::select_contexts_by_external_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_external_ids = 134;
  if (this->_internal_has_select_types_by_external_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(134, _Internal::select_types_by_external_ids(this),
        _Internal::select_types_by_external_ids(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any metadata_source_type_specific_options = 135;
  if (this->_internal_has_metadata_source_type_specific_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(135, _Internal::metadata_source_type_specific_options(this),
        _Internal::metadata_source_type_specific_options(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_names = 136;
  if (this->_internal_has_select_types_by_names()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(136, _Internal::select_types_by_names(this),
        _Internal::select_types_by_names(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_names_and_versions = 137;
  if (this->_internal_has_select_types_by_names_and_versions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(137, _Internal::select_types_by_names_and_versions(this),
        _Internal::select_types_by_names_and_versions(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_type = 138;
  if (this->_internal_has_update_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(138, _Internal::update_type(this),
        _Internal::update_type(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_contexts_by_context_ids = 139;
  if (this->_internal_has_select_parent_contexts_by_context_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(139, _Internal::select_parent_contexts_by_context_ids(this),
        _Internal::select_parent_contexts_by_context_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_contexts_by_parent_context_ids = 140;
  if (this->_internal_has_select_parent_contexts_by_parent_context_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(140, _Internal::select_parent_contexts_by_parent_context_ids(this),
        _Internal::select_parent_contexts_by_parent_context_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_mlmd_env_table_existence = 141;
  if (this->_internal_has_check_mlmd_env_table_existence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(141, _Internal::check_mlmd_env_table_existence(this),
        _Internal::check_mlmd_env_table_existence(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_associations_by_execution_ids = 142;
  if (this->_internal_has_select_associations_by_execution_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(142, _Internal::select_associations_by_execution_ids(this),
        _Internal::select_associations_by_execution_ids(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_attributions_by_artifact_ids = 143;
  if (this->_internal_has_select_attributions_by_artifact_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(143, _Internal::select_attributions_by_artifact_ids(this),
        _Internal::select_attributions_by_artifact_ids(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MetadataSourceQueryConfig)
  return target;
}

size_t MetadataSourceQueryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MetadataSourceQueryConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .ml_metadata.MetadataSourceQueryConfig.MigrationScheme> migration_schemes = 62;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_migration_schemes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme >::const_iterator
      it = this->_internal_migration_schemes().begin();
      it != this->_internal_migration_schemes().end(); ++it) {
    total_size += MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .ml_metadata.MetadataSourceQueryConfig.TemplateQuery secondary_indices = 105;
  total_size += 2UL * this->_internal_secondary_indices_size();
  for (const auto& msg : this->_impl_.secondary_indices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_type_table = 3;
  if (this->_internal_has_drop_type_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_type_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_type_table = 4;
  if (this->_internal_has_create_type_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_type_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_type_by_id = 6;
  if (this->_internal_has_select_type_by_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_type_by_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_type_property_table = 7;
  if (this->_internal_has_drop_type_property_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_type_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_type_property_table = 8;
  if (this->_internal_has_create_type_property_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_type_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_type_property = 9;
  if (this->_internal_has_insert_type_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_type_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_property_by_type_id = 10;
  if (this->_internal_has_select_property_by_type_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_property_by_type_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_last_insert_id = 11;
  if (this->_internal_has_select_last_insert_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_last_insert_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_artifact_table = 12;
  if (this->_internal_has_drop_artifact_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_artifact_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_artifact_table = 13;
  if (this->_internal_has_create_artifact_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_artifact_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_artifact = 14;
  if (this->_internal_has_insert_artifact()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_artifact_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifact_by_id = 15;
  if (this->_internal_has_select_artifact_by_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_artifact_by_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_artifact_property_table = 16;
  if (this->_internal_has_drop_artifact_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_artifact_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_artifact_property_table = 17;
  if (this->_internal_has_create_artifact_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_artifact_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_artifact_property = 18;
  if (this->_internal_has_insert_artifact_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_artifact_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifact_property_by_artifact_id = 19;
  if (this->_internal_has_select_artifact_property_by_artifact_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_artifact_property_by_artifact_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_type_by_name = 20;
  if (this->_internal_has_select_type_by_name()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_type_by_name_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_artifact = 21;
  if (this->_internal_has_update_artifact()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_artifact_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_artifact_property = 22;
  if (this->_internal_has_update_artifact_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_artifact_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_artifact_property = 23;
  if (this->_internal_has_delete_artifact_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_artifact_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_execution_table = 24;
  if (this->_internal_has_drop_execution_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_execution_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_execution_table = 25;
  if (this->_internal_has_create_execution_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_execution_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_execution_property_table = 26;
  if (this->_internal_has_drop_execution_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_execution_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_execution_property_table = 27;
  if (this->_internal_has_create_execution_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_execution_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_execution = 28;
  if (this->_internal_has_insert_execution()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_execution_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_execution_by_id = 29;
  if (this->_internal_has_select_execution_by_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_execution_by_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_execution_property = 30;
  if (this->_internal_has_insert_execution_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_execution_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_execution_property_by_execution_id = 31;
  if (this->_internal_has_select_execution_property_by_execution_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_execution_property_by_execution_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_execution_property = 32;
  if (this->_internal_has_update_execution_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_execution_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_execution_property = 33;
  if (this->_internal_has_delete_execution_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_execution_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_execution = 34;
  if (this->_internal_has_update_execution()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_execution_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_event_table = 35;
  if (this->_internal_has_drop_event_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_event_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_event_table = 36;
  if (this->_internal_has_create_event_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_event_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_event = 37;
  if (this->_internal_has_insert_event()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_event_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_event_path_table = 40;
  if (this->_internal_has_drop_event_path_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_event_path_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_event_path_table = 41;
  if (this->_internal_has_create_event_path_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_event_path_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_event_path = 42;
  if (this->_internal_has_insert_event_path()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_event_path_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_type_table = 44;
  if (this->_internal_has_check_type_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_type_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_type_property_table = 45;
  if (this->_internal_has_check_type_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_type_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_artifact_table = 46;
  if (this->_internal_has_check_artifact_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_artifact_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_artifact_property_table = 47;
  if (this->_internal_has_check_artifact_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_artifact_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_execution_table = 48;
  if (this->_internal_has_check_execution_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_execution_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_execution_property_table = 49;
  if (this->_internal_has_check_execution_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_execution_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_event_table = 50;
  if (this->_internal_has_check_event_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_event_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_event_path_table = 51;
  if (this->_internal_has_check_event_path_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_event_path_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifacts_by_type_id = 52;
  if (this->_internal_has_select_artifacts_by_type_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_artifacts_by_type_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_executions_by_type_id = 53;
  if (this->_internal_has_select_executions_by_type_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_executions_by_type_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_artifact_type = 54;
  if (this->_internal_has_insert_artifact_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_artifact_type_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_execution_type = 55;
  if (this->_internal_has_insert_execution_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_execution_type_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifacts_by_uri = 56;
  if (this->_internal_has_select_artifacts_by_uri()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_artifacts_by_uri_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_all_types = 57;
  if (this->_internal_has_select_all_types()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_all_types_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_context_type = 58;
  if (this->_internal_has_insert_context_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_context_type_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_mlmd_env_table = 60;
  if (this->_internal_has_drop_mlmd_env_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_mlmd_env_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_mlmd_env_table = 61;
  if (this->_internal_has_create_mlmd_env_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_mlmd_env_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_mlmd_env_table = 63;
  if (this->_internal_has_check_mlmd_env_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_mlmd_env_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_schema_version = 64;
  if (this->_internal_has_update_schema_version()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_schema_version_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_tables_in_v0_13_2 = 65;
  if (this->_internal_has_check_tables_in_v0_13_2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_tables_in_v0_13_2_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_schema_version = 66;
  if (this->_internal_has_insert_schema_version()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_schema_version_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_context_table = 67;
  if (this->_internal_has_drop_context_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_context_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_context_table = 68;
  if (this->_internal_has_create_context_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_context_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_context_table = 69;
  if (this->_internal_has_check_context_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_context_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_context = 70;
  if (this->_internal_has_insert_context()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_context_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_context_by_id = 71;
  if (this->_internal_has_select_context_by_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_context_by_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_contexts_by_type_id = 72;
  if (this->_internal_has_select_contexts_by_type_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_contexts_by_type_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_context = 73;
  if (this->_internal_has_update_context()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_context_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_context_property_table = 74;
  if (this->_internal_has_drop_context_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_context_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_context_property_table = 75;
  if (this->_internal_has_create_context_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_context_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_context_property_table = 76;
  if (this->_internal_has_check_context_property_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_context_property_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_context_property = 77;
  if (this->_internal_has_insert_context_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_context_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_context_property_by_context_id = 78;
  if (this->_internal_has_select_context_property_by_context_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_context_property_by_context_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_context_property = 79;
  if (this->_internal_has_update_context_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_context_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_context_property = 80;
  if (this->_internal_has_delete_context_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_context_property_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_association_table = 81;
  if (this->_internal_has_drop_association_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_association_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_association_table = 82;
  if (this->_internal_has_create_association_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_association_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_association_table = 83;
  if (this->_internal_has_check_association_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_association_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_association = 84;
  if (this->_internal_has_insert_association()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_association_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_association_by_context_id = 85;
  if (this->_internal_has_select_association_by_context_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_association_by_context_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_attribution_table = 87;
  if (this->_internal_has_drop_attribution_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_attribution_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_attribution_table = 88;
  if (this->_internal_has_create_attribution_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_attribution_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_attribution_table = 89;
  if (this->_internal_has_check_attribution_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_attribution_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_attribution = 90;
  if (this->_internal_has_insert_attribution()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_attribution_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_attribution_by_context_id = 91;
  if (this->_internal_has_select_attribution_by_context_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_attribution_by_context_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_context_by_type_id_and_name = 93;
  if (this->_internal_has_select_context_by_type_id_and_name()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_context_by_type_id_and_name_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifact_by_type_id_and_name = 94;
  if (this->_internal_has_select_artifact_by_type_id_and_name()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_artifact_by_type_id_and_name_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_execution_by_type_id_and_name = 95;
  if (this->_internal_has_select_execution_by_type_id_and_name()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_execution_by_type_id_and_name_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_event_by_artifact_ids = 96;
  if (this->_internal_has_select_event_by_artifact_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_event_by_artifact_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_event_by_execution_ids = 97;
  if (this->_internal_has_select_event_by_execution_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_event_by_execution_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_event_path_by_event_ids = 98;
  if (this->_internal_has_select_event_path_by_event_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_event_path_by_event_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_parent_type_table = 99;
  if (this->_internal_has_drop_parent_type_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_parent_type_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_parent_type_table = 100;
  if (this->_internal_has_create_parent_type_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_parent_type_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_parent_type_table = 101;
  if (this->_internal_has_check_parent_type_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_parent_type_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery drop_parent_context_table = 102;
  if (this->_internal_has_drop_parent_context_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drop_parent_context_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery create_parent_context_table = 103;
  if (this->_internal_has_create_parent_context_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_parent_context_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_parent_context_table = 104;
  if (this->_internal_has_check_parent_context_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_parent_context_table_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_parent_context = 106;
  if (this->_internal_has_insert_parent_context()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_parent_context_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_context_by_context_id = 107;
  if (this->_internal_has_select_parent_context_by_context_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_parent_context_by_context_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_context_by_parent_context_id = 108;
  if (this->_internal_has_select_parent_context_by_parent_context_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_parent_context_by_parent_context_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery insert_parent_type = 109;
  if (this->_internal_has_insert_parent_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_parent_type_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_type_by_type_id = 110;
  if (this->_internal_has_select_parent_type_by_type_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_parent_type_by_type_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_type_by_name_and_version = 111;
  if (this->_internal_has_select_type_by_name_and_version()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_type_by_name_and_version_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_contexts_by_id = 112;
  if (this->_internal_has_delete_contexts_by_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_contexts_by_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_contexts_properties_by_contexts_id = 113;
  if (this->_internal_has_delete_contexts_properties_by_contexts_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_contexts_properties_by_contexts_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_contexts_by_parent_ids = 114;
  if (this->_internal_has_delete_parent_contexts_by_parent_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_parent_contexts_by_parent_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_contexts_by_child_ids = 115;
  if (this->_internal_has_delete_parent_contexts_by_child_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_parent_contexts_by_child_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_artifacts_by_id = 116;
  if (this->_internal_has_delete_artifacts_by_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_artifacts_by_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_artifacts_properties_by_artifacts_id = 117;
  if (this->_internal_has_delete_artifacts_properties_by_artifacts_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_artifacts_properties_by_artifacts_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_executions_by_id = 118;
  if (this->_internal_has_delete_executions_by_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_executions_by_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_executions_properties_by_executions_id = 119;
  if (this->_internal_has_delete_executions_properties_by_executions_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_executions_properties_by_executions_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_events_by_artifacts_id = 120;
  if (this->_internal_has_delete_events_by_artifacts_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_events_by_artifacts_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_events_by_executions_id = 121;
  if (this->_internal_has_delete_events_by_executions_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_events_by_executions_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_associations_by_contexts_id = 122;
  if (this->_internal_has_delete_associations_by_contexts_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_associations_by_contexts_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_associations_by_executions_id = 123;
  if (this->_internal_has_delete_associations_by_executions_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_associations_by_executions_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_attributions_by_contexts_id = 124;
  if (this->_internal_has_delete_attributions_by_contexts_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_attributions_by_contexts_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_attributions_by_artifacts_id = 125;
  if (this->_internal_has_delete_attributions_by_artifacts_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_attributions_by_artifacts_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_event_paths = 126;
  if (this->_internal_has_delete_event_paths()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_event_paths_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_type = 127;
  if (this->_internal_has_delete_parent_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_parent_type_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_id = 128;
  if (this->_internal_has_select_types_by_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_types_by_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_properties_by_type_id = 129;
  if (this->_internal_has_select_properties_by_type_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_properties_by_type_id_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_artifacts_by_external_ids = 130;
  if (this->_internal_has_select_artifacts_by_external_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_artifacts_by_external_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery delete_parent_contexts_by_parent_id_and_child_ids = 131;
  if (this->_internal_has_delete_parent_contexts_by_parent_id_and_child_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delete_parent_contexts_by_parent_id_and_child_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_executions_by_external_ids = 132;
  if (this->_internal_has_select_executions_by_external_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_executions_by_external_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_contexts_by_external_ids = 133;
  if (this->_internal_has_select_contexts_by_external_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_contexts_by_external_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_external_ids = 134;
  if (this->_internal_has_select_types_by_external_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_types_by_external_ids_);
  }

  // .google.protobuf.Any metadata_source_type_specific_options = 135;
  if (this->_internal_has_metadata_source_type_specific_options()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_source_type_specific_options_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_names = 136;
  if (this->_internal_has_select_types_by_names()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_types_by_names_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_types_by_names_and_versions = 137;
  if (this->_internal_has_select_types_by_names_and_versions()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_types_by_names_and_versions_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery update_type = 138;
  if (this->_internal_has_update_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_type_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_contexts_by_context_ids = 139;
  if (this->_internal_has_select_parent_contexts_by_context_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_parent_contexts_by_context_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_parent_contexts_by_parent_context_ids = 140;
  if (this->_internal_has_select_parent_contexts_by_parent_context_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_parent_contexts_by_parent_context_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery check_mlmd_env_table_existence = 141;
  if (this->_internal_has_check_mlmd_env_table_existence()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.check_mlmd_env_table_existence_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_associations_by_execution_ids = 142;
  if (this->_internal_has_select_associations_by_execution_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_associations_by_execution_ids_);
  }

  // .ml_metadata.MetadataSourceQueryConfig.TemplateQuery select_attributions_by_artifact_ids = 143;
  if (this->_internal_has_select_attributions_by_artifact_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_attributions_by_artifact_ids_);
  }

  // int64 schema_version = 59;
  if (this->_internal_schema_version() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_schema_version());
  }

  // .ml_metadata.MetadataSourceType metadata_source_type = 1;
  if (this->_internal_metadata_source_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_metadata_source_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataSourceQueryConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetadataSourceQueryConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataSourceQueryConfig::GetClassData() const { return &_class_data_; }


void MetadataSourceQueryConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetadataSourceQueryConfig*>(&to_msg);
  auto& from = static_cast<const MetadataSourceQueryConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MetadataSourceQueryConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.migration_schemes_.MergeFrom(from._impl_.migration_schemes_);
  _this->_impl_.secondary_indices_.MergeFrom(from._impl_.secondary_indices_);
  if (from._internal_has_drop_type_table()) {
    _this->_internal_mutable_drop_type_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_type_table());
  }
  if (from._internal_has_create_type_table()) {
    _this->_internal_mutable_create_type_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_type_table());
  }
  if (from._internal_has_select_type_by_id()) {
    _this->_internal_mutable_select_type_by_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_type_by_id());
  }
  if (from._internal_has_drop_type_property_table()) {
    _this->_internal_mutable_drop_type_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_type_property_table());
  }
  if (from._internal_has_create_type_property_table()) {
    _this->_internal_mutable_create_type_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_type_property_table());
  }
  if (from._internal_has_insert_type_property()) {
    _this->_internal_mutable_insert_type_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_type_property());
  }
  if (from._internal_has_select_property_by_type_id()) {
    _this->_internal_mutable_select_property_by_type_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_property_by_type_id());
  }
  if (from._internal_has_select_last_insert_id()) {
    _this->_internal_mutable_select_last_insert_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_last_insert_id());
  }
  if (from._internal_has_drop_artifact_table()) {
    _this->_internal_mutable_drop_artifact_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_artifact_table());
  }
  if (from._internal_has_create_artifact_table()) {
    _this->_internal_mutable_create_artifact_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_artifact_table());
  }
  if (from._internal_has_insert_artifact()) {
    _this->_internal_mutable_insert_artifact()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_artifact());
  }
  if (from._internal_has_select_artifact_by_id()) {
    _this->_internal_mutable_select_artifact_by_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_artifact_by_id());
  }
  if (from._internal_has_drop_artifact_property_table()) {
    _this->_internal_mutable_drop_artifact_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_artifact_property_table());
  }
  if (from._internal_has_create_artifact_property_table()) {
    _this->_internal_mutable_create_artifact_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_artifact_property_table());
  }
  if (from._internal_has_insert_artifact_property()) {
    _this->_internal_mutable_insert_artifact_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_artifact_property());
  }
  if (from._internal_has_select_artifact_property_by_artifact_id()) {
    _this->_internal_mutable_select_artifact_property_by_artifact_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_artifact_property_by_artifact_id());
  }
  if (from._internal_has_select_type_by_name()) {
    _this->_internal_mutable_select_type_by_name()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_type_by_name());
  }
  if (from._internal_has_update_artifact()) {
    _this->_internal_mutable_update_artifact()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_update_artifact());
  }
  if (from._internal_has_update_artifact_property()) {
    _this->_internal_mutable_update_artifact_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_update_artifact_property());
  }
  if (from._internal_has_delete_artifact_property()) {
    _this->_internal_mutable_delete_artifact_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_artifact_property());
  }
  if (from._internal_has_drop_execution_table()) {
    _this->_internal_mutable_drop_execution_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_execution_table());
  }
  if (from._internal_has_create_execution_table()) {
    _this->_internal_mutable_create_execution_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_execution_table());
  }
  if (from._internal_has_drop_execution_property_table()) {
    _this->_internal_mutable_drop_execution_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_execution_property_table());
  }
  if (from._internal_has_create_execution_property_table()) {
    _this->_internal_mutable_create_execution_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_execution_property_table());
  }
  if (from._internal_has_insert_execution()) {
    _this->_internal_mutable_insert_execution()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_execution());
  }
  if (from._internal_has_select_execution_by_id()) {
    _this->_internal_mutable_select_execution_by_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_execution_by_id());
  }
  if (from._internal_has_insert_execution_property()) {
    _this->_internal_mutable_insert_execution_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_execution_property());
  }
  if (from._internal_has_select_execution_property_by_execution_id()) {
    _this->_internal_mutable_select_execution_property_by_execution_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_execution_property_by_execution_id());
  }
  if (from._internal_has_update_execution_property()) {
    _this->_internal_mutable_update_execution_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_update_execution_property());
  }
  if (from._internal_has_delete_execution_property()) {
    _this->_internal_mutable_delete_execution_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_execution_property());
  }
  if (from._internal_has_update_execution()) {
    _this->_internal_mutable_update_execution()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_update_execution());
  }
  if (from._internal_has_drop_event_table()) {
    _this->_internal_mutable_drop_event_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_event_table());
  }
  if (from._internal_has_create_event_table()) {
    _this->_internal_mutable_create_event_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_event_table());
  }
  if (from._internal_has_insert_event()) {
    _this->_internal_mutable_insert_event()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_event());
  }
  if (from._internal_has_drop_event_path_table()) {
    _this->_internal_mutable_drop_event_path_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_event_path_table());
  }
  if (from._internal_has_create_event_path_table()) {
    _this->_internal_mutable_create_event_path_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_event_path_table());
  }
  if (from._internal_has_insert_event_path()) {
    _this->_internal_mutable_insert_event_path()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_event_path());
  }
  if (from._internal_has_check_type_table()) {
    _this->_internal_mutable_check_type_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_type_table());
  }
  if (from._internal_has_check_type_property_table()) {
    _this->_internal_mutable_check_type_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_type_property_table());
  }
  if (from._internal_has_check_artifact_table()) {
    _this->_internal_mutable_check_artifact_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_artifact_table());
  }
  if (from._internal_has_check_artifact_property_table()) {
    _this->_internal_mutable_check_artifact_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_artifact_property_table());
  }
  if (from._internal_has_check_execution_table()) {
    _this->_internal_mutable_check_execution_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_execution_table());
  }
  if (from._internal_has_check_execution_property_table()) {
    _this->_internal_mutable_check_execution_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_execution_property_table());
  }
  if (from._internal_has_check_event_table()) {
    _this->_internal_mutable_check_event_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_event_table());
  }
  if (from._internal_has_check_event_path_table()) {
    _this->_internal_mutable_check_event_path_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_event_path_table());
  }
  if (from._internal_has_select_artifacts_by_type_id()) {
    _this->_internal_mutable_select_artifacts_by_type_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_artifacts_by_type_id());
  }
  if (from._internal_has_select_executions_by_type_id()) {
    _this->_internal_mutable_select_executions_by_type_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_executions_by_type_id());
  }
  if (from._internal_has_insert_artifact_type()) {
    _this->_internal_mutable_insert_artifact_type()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_artifact_type());
  }
  if (from._internal_has_insert_execution_type()) {
    _this->_internal_mutable_insert_execution_type()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_execution_type());
  }
  if (from._internal_has_select_artifacts_by_uri()) {
    _this->_internal_mutable_select_artifacts_by_uri()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_artifacts_by_uri());
  }
  if (from._internal_has_select_all_types()) {
    _this->_internal_mutable_select_all_types()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_all_types());
  }
  if (from._internal_has_insert_context_type()) {
    _this->_internal_mutable_insert_context_type()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_context_type());
  }
  if (from._internal_has_drop_mlmd_env_table()) {
    _this->_internal_mutable_drop_mlmd_env_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_mlmd_env_table());
  }
  if (from._internal_has_create_mlmd_env_table()) {
    _this->_internal_mutable_create_mlmd_env_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_mlmd_env_table());
  }
  if (from._internal_has_check_mlmd_env_table()) {
    _this->_internal_mutable_check_mlmd_env_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_mlmd_env_table());
  }
  if (from._internal_has_update_schema_version()) {
    _this->_internal_mutable_update_schema_version()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_update_schema_version());
  }
  if (from._internal_has_check_tables_in_v0_13_2()) {
    _this->_internal_mutable_check_tables_in_v0_13_2()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_tables_in_v0_13_2());
  }
  if (from._internal_has_insert_schema_version()) {
    _this->_internal_mutable_insert_schema_version()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_schema_version());
  }
  if (from._internal_has_drop_context_table()) {
    _this->_internal_mutable_drop_context_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_context_table());
  }
  if (from._internal_has_create_context_table()) {
    _this->_internal_mutable_create_context_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_context_table());
  }
  if (from._internal_has_check_context_table()) {
    _this->_internal_mutable_check_context_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_context_table());
  }
  if (from._internal_has_insert_context()) {
    _this->_internal_mutable_insert_context()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_context());
  }
  if (from._internal_has_select_context_by_id()) {
    _this->_internal_mutable_select_context_by_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_context_by_id());
  }
  if (from._internal_has_select_contexts_by_type_id()) {
    _this->_internal_mutable_select_contexts_by_type_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_contexts_by_type_id());
  }
  if (from._internal_has_update_context()) {
    _this->_internal_mutable_update_context()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_update_context());
  }
  if (from._internal_has_drop_context_property_table()) {
    _this->_internal_mutable_drop_context_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_context_property_table());
  }
  if (from._internal_has_create_context_property_table()) {
    _this->_internal_mutable_create_context_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_context_property_table());
  }
  if (from._internal_has_check_context_property_table()) {
    _this->_internal_mutable_check_context_property_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_context_property_table());
  }
  if (from._internal_has_insert_context_property()) {
    _this->_internal_mutable_insert_context_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_context_property());
  }
  if (from._internal_has_select_context_property_by_context_id()) {
    _this->_internal_mutable_select_context_property_by_context_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_context_property_by_context_id());
  }
  if (from._internal_has_update_context_property()) {
    _this->_internal_mutable_update_context_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_update_context_property());
  }
  if (from._internal_has_delete_context_property()) {
    _this->_internal_mutable_delete_context_property()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_context_property());
  }
  if (from._internal_has_drop_association_table()) {
    _this->_internal_mutable_drop_association_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_association_table());
  }
  if (from._internal_has_create_association_table()) {
    _this->_internal_mutable_create_association_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_association_table());
  }
  if (from._internal_has_check_association_table()) {
    _this->_internal_mutable_check_association_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_association_table());
  }
  if (from._internal_has_insert_association()) {
    _this->_internal_mutable_insert_association()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_association());
  }
  if (from._internal_has_select_association_by_context_id()) {
    _this->_internal_mutable_select_association_by_context_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_association_by_context_id());
  }
  if (from._internal_has_drop_attribution_table()) {
    _this->_internal_mutable_drop_attribution_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_attribution_table());
  }
  if (from._internal_has_create_attribution_table()) {
    _this->_internal_mutable_create_attribution_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_attribution_table());
  }
  if (from._internal_has_check_attribution_table()) {
    _this->_internal_mutable_check_attribution_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_attribution_table());
  }
  if (from._internal_has_insert_attribution()) {
    _this->_internal_mutable_insert_attribution()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_attribution());
  }
  if (from._internal_has_select_attribution_by_context_id()) {
    _this->_internal_mutable_select_attribution_by_context_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_attribution_by_context_id());
  }
  if (from._internal_has_select_context_by_type_id_and_name()) {
    _this->_internal_mutable_select_context_by_type_id_and_name()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_context_by_type_id_and_name());
  }
  if (from._internal_has_select_artifact_by_type_id_and_name()) {
    _this->_internal_mutable_select_artifact_by_type_id_and_name()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_artifact_by_type_id_and_name());
  }
  if (from._internal_has_select_execution_by_type_id_and_name()) {
    _this->_internal_mutable_select_execution_by_type_id_and_name()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_execution_by_type_id_and_name());
  }
  if (from._internal_has_select_event_by_artifact_ids()) {
    _this->_internal_mutable_select_event_by_artifact_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_event_by_artifact_ids());
  }
  if (from._internal_has_select_event_by_execution_ids()) {
    _this->_internal_mutable_select_event_by_execution_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_event_by_execution_ids());
  }
  if (from._internal_has_select_event_path_by_event_ids()) {
    _this->_internal_mutable_select_event_path_by_event_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_event_path_by_event_ids());
  }
  if (from._internal_has_drop_parent_type_table()) {
    _this->_internal_mutable_drop_parent_type_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_parent_type_table());
  }
  if (from._internal_has_create_parent_type_table()) {
    _this->_internal_mutable_create_parent_type_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_parent_type_table());
  }
  if (from._internal_has_check_parent_type_table()) {
    _this->_internal_mutable_check_parent_type_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_parent_type_table());
  }
  if (from._internal_has_drop_parent_context_table()) {
    _this->_internal_mutable_drop_parent_context_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_drop_parent_context_table());
  }
  if (from._internal_has_create_parent_context_table()) {
    _this->_internal_mutable_create_parent_context_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_create_parent_context_table());
  }
  if (from._internal_has_check_parent_context_table()) {
    _this->_internal_mutable_check_parent_context_table()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_parent_context_table());
  }
  if (from._internal_has_insert_parent_context()) {
    _this->_internal_mutable_insert_parent_context()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_parent_context());
  }
  if (from._internal_has_select_parent_context_by_context_id()) {
    _this->_internal_mutable_select_parent_context_by_context_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_parent_context_by_context_id());
  }
  if (from._internal_has_select_parent_context_by_parent_context_id()) {
    _this->_internal_mutable_select_parent_context_by_parent_context_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_parent_context_by_parent_context_id());
  }
  if (from._internal_has_insert_parent_type()) {
    _this->_internal_mutable_insert_parent_type()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_insert_parent_type());
  }
  if (from._internal_has_select_parent_type_by_type_id()) {
    _this->_internal_mutable_select_parent_type_by_type_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_parent_type_by_type_id());
  }
  if (from._internal_has_select_type_by_name_and_version()) {
    _this->_internal_mutable_select_type_by_name_and_version()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_type_by_name_and_version());
  }
  if (from._internal_has_delete_contexts_by_id()) {
    _this->_internal_mutable_delete_contexts_by_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_contexts_by_id());
  }
  if (from._internal_has_delete_contexts_properties_by_contexts_id()) {
    _this->_internal_mutable_delete_contexts_properties_by_contexts_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_contexts_properties_by_contexts_id());
  }
  if (from._internal_has_delete_parent_contexts_by_parent_ids()) {
    _this->_internal_mutable_delete_parent_contexts_by_parent_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_parent_contexts_by_parent_ids());
  }
  if (from._internal_has_delete_parent_contexts_by_child_ids()) {
    _this->_internal_mutable_delete_parent_contexts_by_child_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_parent_contexts_by_child_ids());
  }
  if (from._internal_has_delete_artifacts_by_id()) {
    _this->_internal_mutable_delete_artifacts_by_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_artifacts_by_id());
  }
  if (from._internal_has_delete_artifacts_properties_by_artifacts_id()) {
    _this->_internal_mutable_delete_artifacts_properties_by_artifacts_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_artifacts_properties_by_artifacts_id());
  }
  if (from._internal_has_delete_executions_by_id()) {
    _this->_internal_mutable_delete_executions_by_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_executions_by_id());
  }
  if (from._internal_has_delete_executions_properties_by_executions_id()) {
    _this->_internal_mutable_delete_executions_properties_by_executions_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_executions_properties_by_executions_id());
  }
  if (from._internal_has_delete_events_by_artifacts_id()) {
    _this->_internal_mutable_delete_events_by_artifacts_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_events_by_artifacts_id());
  }
  if (from._internal_has_delete_events_by_executions_id()) {
    _this->_internal_mutable_delete_events_by_executions_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_events_by_executions_id());
  }
  if (from._internal_has_delete_associations_by_contexts_id()) {
    _this->_internal_mutable_delete_associations_by_contexts_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_associations_by_contexts_id());
  }
  if (from._internal_has_delete_associations_by_executions_id()) {
    _this->_internal_mutable_delete_associations_by_executions_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_associations_by_executions_id());
  }
  if (from._internal_has_delete_attributions_by_contexts_id()) {
    _this->_internal_mutable_delete_attributions_by_contexts_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_attributions_by_contexts_id());
  }
  if (from._internal_has_delete_attributions_by_artifacts_id()) {
    _this->_internal_mutable_delete_attributions_by_artifacts_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_attributions_by_artifacts_id());
  }
  if (from._internal_has_delete_event_paths()) {
    _this->_internal_mutable_delete_event_paths()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_event_paths());
  }
  if (from._internal_has_delete_parent_type()) {
    _this->_internal_mutable_delete_parent_type()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_parent_type());
  }
  if (from._internal_has_select_types_by_id()) {
    _this->_internal_mutable_select_types_by_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_types_by_id());
  }
  if (from._internal_has_select_properties_by_type_id()) {
    _this->_internal_mutable_select_properties_by_type_id()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_properties_by_type_id());
  }
  if (from._internal_has_select_artifacts_by_external_ids()) {
    _this->_internal_mutable_select_artifacts_by_external_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_artifacts_by_external_ids());
  }
  if (from._internal_has_delete_parent_contexts_by_parent_id_and_child_ids()) {
    _this->_internal_mutable_delete_parent_contexts_by_parent_id_and_child_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_delete_parent_contexts_by_parent_id_and_child_ids());
  }
  if (from._internal_has_select_executions_by_external_ids()) {
    _this->_internal_mutable_select_executions_by_external_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_executions_by_external_ids());
  }
  if (from._internal_has_select_contexts_by_external_ids()) {
    _this->_internal_mutable_select_contexts_by_external_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_contexts_by_external_ids());
  }
  if (from._internal_has_select_types_by_external_ids()) {
    _this->_internal_mutable_select_types_by_external_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_types_by_external_ids());
  }
  if (from._internal_has_metadata_source_type_specific_options()) {
    _this->_internal_mutable_metadata_source_type_specific_options()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_metadata_source_type_specific_options());
  }
  if (from._internal_has_select_types_by_names()) {
    _this->_internal_mutable_select_types_by_names()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_types_by_names());
  }
  if (from._internal_has_select_types_by_names_and_versions()) {
    _this->_internal_mutable_select_types_by_names_and_versions()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_types_by_names_and_versions());
  }
  if (from._internal_has_update_type()) {
    _this->_internal_mutable_update_type()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_update_type());
  }
  if (from._internal_has_select_parent_contexts_by_context_ids()) {
    _this->_internal_mutable_select_parent_contexts_by_context_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_parent_contexts_by_context_ids());
  }
  if (from._internal_has_select_parent_contexts_by_parent_context_ids()) {
    _this->_internal_mutable_select_parent_contexts_by_parent_context_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_parent_contexts_by_parent_context_ids());
  }
  if (from._internal_has_check_mlmd_env_table_existence()) {
    _this->_internal_mutable_check_mlmd_env_table_existence()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_check_mlmd_env_table_existence());
  }
  if (from._internal_has_select_associations_by_execution_ids()) {
    _this->_internal_mutable_select_associations_by_execution_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_associations_by_execution_ids());
  }
  if (from._internal_has_select_attributions_by_artifact_ids()) {
    _this->_internal_mutable_select_attributions_by_artifact_ids()->::ml_metadata::MetadataSourceQueryConfig_TemplateQuery::MergeFrom(
        from._internal_select_attributions_by_artifact_ids());
  }
  if (from._internal_schema_version() != 0) {
    _this->_internal_set_schema_version(from._internal_schema_version());
  }
  if (from._internal_metadata_source_type() != 0) {
    _this->_internal_set_metadata_source_type(from._internal_metadata_source_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataSourceQueryConfig::CopyFrom(const MetadataSourceQueryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MetadataSourceQueryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataSourceQueryConfig::IsInitialized() const {
  return true;
}

void MetadataSourceQueryConfig::InternalSwap(MetadataSourceQueryConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.migration_schemes_.InternalSwap(&other->_impl_.migration_schemes_);
  _impl_.secondary_indices_.InternalSwap(&other->_impl_.secondary_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetadataSourceQueryConfig, _impl_.metadata_source_type_)
      + sizeof(MetadataSourceQueryConfig::_impl_.metadata_source_type_)
      - PROTOBUF_FIELD_OFFSET(MetadataSourceQueryConfig, _impl_.drop_type_table_)>(
          reinterpret_cast<char*>(&_impl_.drop_type_table_),
          reinterpret_cast<char*>(&other->_impl_.drop_type_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataSourceQueryConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[7]);
}

// ===================================================================

class MySQLSourceErrorInfo::_Internal {
 public:
};

MySQLSourceErrorInfo::MySQLSourceErrorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MySQLSourceErrorInfo)
}
MySQLSourceErrorInfo::MySQLSourceErrorInfo(const MySQLSourceErrorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MySQLSourceErrorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mysql_error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mysql_error_code_ = from._impl_.mysql_error_code_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MySQLSourceErrorInfo)
}

inline void MySQLSourceErrorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mysql_error_code_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MySQLSourceErrorInfo::~MySQLSourceErrorInfo() {
  // @@protoc_insertion_point(destructor:ml_metadata.MySQLSourceErrorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MySQLSourceErrorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MySQLSourceErrorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MySQLSourceErrorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MySQLSourceErrorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mysql_error_code_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MySQLSourceErrorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 mysql_error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mysql_error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MySQLSourceErrorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MySQLSourceErrorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mysql_error_code = 1;
  if (this->_internal_mysql_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mysql_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MySQLSourceErrorInfo)
  return target;
}

size_t MySQLSourceErrorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MySQLSourceErrorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mysql_error_code = 1;
  if (this->_internal_mysql_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mysql_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MySQLSourceErrorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MySQLSourceErrorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MySQLSourceErrorInfo::GetClassData() const { return &_class_data_; }


void MySQLSourceErrorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MySQLSourceErrorInfo*>(&to_msg);
  auto& from = static_cast<const MySQLSourceErrorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MySQLSourceErrorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mysql_error_code() != 0) {
    _this->_internal_set_mysql_error_code(from._internal_mysql_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MySQLSourceErrorInfo::CopyFrom(const MySQLSourceErrorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MySQLSourceErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLSourceErrorInfo::IsInitialized() const {
  return true;
}

void MySQLSourceErrorInfo::InternalSwap(MySQLSourceErrorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mysql_error_code_, other->_impl_.mysql_error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MySQLSourceErrorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fsource_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ml_metadata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ml_metadata::RecordSet_Record*
Arena::CreateMaybeMessage< ::ml_metadata::RecordSet_Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::RecordSet_Record >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::RecordSet*
Arena::CreateMaybeMessage< ::ml_metadata::RecordSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::RecordSet >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataSourceQueryConfig_TemplateQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataSourceQueryConfig_DbVerification*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataSourceQueryConfig_DbVerification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataSourceQueryConfig_DbVerification >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme_VerificationScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataSourceQueryConfig_MigrationScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataSourceQueryConfig_MigrationSchemesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataSourceQueryConfig*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataSourceQueryConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataSourceQueryConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MySQLSourceErrorInfo*
Arena::CreateMaybeMessage< ::ml_metadata::MySQLSourceErrorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MySQLSourceErrorInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
