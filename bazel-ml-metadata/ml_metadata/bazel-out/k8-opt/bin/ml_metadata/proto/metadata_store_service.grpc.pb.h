// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ml_metadata/proto/metadata_store_service.proto
// Original file comments:
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_ml_5fmetadata_2fproto_2fmetadata_5fstore_5fservice_2eproto__INCLUDED
#define GRPC_ml_5fmetadata_2fproto_2fmetadata_5fstore_5fservice_2eproto__INCLUDED

#include "ml_metadata/proto/metadata_store_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ml_metadata {

// LINT.IfChange
class MetadataStoreService final {
 public:
  static constexpr char const* service_full_name() {
    return "ml_metadata.MetadataStoreService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Inserts or updates an ArtifactType.
    //
    // A type has a set of strong typed properties describing the schema of any
    // stored instance associated with that type. A type is identified by a name
    // and an optional version.
    //
    // Type Creation:
    // If no type exists in the database with the given identifier
    // (name, version), it creates a new type and returns the type_id.
    //
    // Type Evolution:
    // If the request type with the same (name, version) already exists
    // (let's call it stored_type), the method enforces the stored_type can be
    // updated only when the request type is backward compatible for the already
    // stored instances.
    //
    // Backwards compatibility is violated iff:
    //
    //   a) there is a property where the request type and stored_type have
    //      different value type (e.g., int vs. string)
    //   b) `can_add_fields = false` and the request type has a new property that
    //      is not stored.
    //   c) `can_omit_fields = false` and stored_type has an existing property
    //      that is not provided in the request type.
    //
    // If non-backward type change is required in the application, e.g.,
    // deprecate properties, re-purpose property name, change value types,
    // a new type can be created with a different (name, version) identifier.
    // Note the type version is optional, and a version value with empty string
    // is treated as unset.
    //
    // Args:
    //   artifact_type: the type to be inserted or updated.
    //   can_add_fields:
    //     when set to true, new properties can be added;
    //     when set to false, returns ALREADY_EXISTS if the request type has
    //     properties that are not in stored_type.
    //   can_omit_fields:
    //     when set to true, stored properties can be omitted in the request type;
    //     when set to false, returns ALREADY_EXISTS if the stored_type has
    //     properties not in the request type.
    //
    // Returns:
    //   The type_id of the stored type.
    //
    // Raises:
    //   ALREADY_EXISTS error in the case listed above.
    //   INVALID_ARGUMENT error, if the given type has no name, or any
    //     property value type is unknown.
    virtual ::grpc::Status PutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::ml_metadata::PutArtifactTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactTypeResponse>> AsyncPutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactTypeResponse>>(AsyncPutArtifactTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactTypeResponse>> PrepareAsyncPutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactTypeResponse>>(PrepareAsyncPutArtifactTypeRaw(context, request, cq));
    }
    // Inserts or updates an ExecutionType. Please refer to PutArtifactType for
    // type upsert API description.
    virtual ::grpc::Status PutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::ml_metadata::PutExecutionTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionTypeResponse>> AsyncPutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionTypeResponse>>(AsyncPutExecutionTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionTypeResponse>> PrepareAsyncPutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionTypeResponse>>(PrepareAsyncPutExecutionTypeRaw(context, request, cq));
    }
    // Inserts or updates an ContextType. Please refer to PutArtifactType for
    // type upsert API description.
    virtual ::grpc::Status PutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::ml_metadata::PutContextTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextTypeResponse>> AsyncPutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextTypeResponse>>(AsyncPutContextTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextTypeResponse>> PrepareAsyncPutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextTypeResponse>>(PrepareAsyncPutContextTypeRaw(context, request, cq));
    }
    // Bulk inserts types atomically.
    virtual ::grpc::Status PutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::ml_metadata::PutTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutTypesResponse>> AsyncPutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutTypesResponse>>(AsyncPutTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutTypesResponse>> PrepareAsyncPutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutTypesResponse>>(PrepareAsyncPutTypesRaw(context, request, cq));
    }
    // Inserts or updates artifacts in the database.
    //
    // If an artifact_id is specified for an artifact, it is an update.
    // If an artifact_id is unspecified, it will insert a new artifact.
    // For new artifacts, type must be specified.
    // For old artifacts, type must be unchanged or unspecified.
    //
    // It is not guaranteed that the created or updated artifacts will share the
    // same `create_time_since_epoch` or `last_update_time_since_epoch`
    // timestamps.
    //
    // Args:
    //   artifacts: A list of artifacts to insert or update.
    //
    // Returns:
    //   A list of artifact ids index-aligned with the input.
    virtual ::grpc::Status PutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::ml_metadata::PutArtifactsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactsResponse>> AsyncPutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactsResponse>>(AsyncPutArtifactsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactsResponse>> PrepareAsyncPutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactsResponse>>(PrepareAsyncPutArtifactsRaw(context, request, cq));
    }
    // Inserts or updates executions in the database.
    //
    // If an execution_id is specified for an execution, it is an update.
    // If an execution_id is unspecified, it will insert a new execution.
    // For new executions, type must be specified.
    // For old executions, type must be unchanged or unspecified.
    //
    // It is not guaranteed that the created or updated executions will share the
    // same `create_time_since_epoch` or `last_update_time_since_epoch`
    // timestamps.
    //
    // Args:
    //   executions: A list of executions to insert or update.
    //
    // Returns:
    //   A list of execution ids index-aligned with the input.
    //
    virtual ::grpc::Status PutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::ml_metadata::PutExecutionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionsResponse>> AsyncPutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionsResponse>>(AsyncPutExecutionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionsResponse>> PrepareAsyncPutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionsResponse>>(PrepareAsyncPutExecutionsRaw(context, request, cq));
    }
    // Inserts events in the database.
    //
    // The execution_id and artifact_id must already exist.
    // Once created, events cannot be modified.
    // AlreadyExists error will be raised if duplicated events are found.
    //
    // It is not guaranteed that the created or updated events will share the
    // same `milliseconds_since_epoch` timestamps.
    //
    // Args:
    //   events: A list of events to insert or update.
    virtual ::grpc::Status PutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::ml_metadata::PutEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutEventsResponse>> AsyncPutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutEventsResponse>>(AsyncPutEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutEventsResponse>> PrepareAsyncPutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutEventsResponse>>(PrepareAsyncPutEventsRaw(context, request, cq));
    }
    // Inserts or updates an Execution and its input and output artifacts and
    // related contexts atomically. The `artifact_event_pairs` include the state
    // changes of the Artifacts used or generated by the Execution, as well as the
    // input/output Event. The `contexts` describe the associations of the
    // execution and the attributions of the artifacts.
    //
    // If an execution_id is specified, it is an update on the corresponding
    // execution, otherwise it does an insertion.
    // For insertion, type must be specified. Same rule applies to artifacts
    // and contexts in the request. Corresponding errors may raised. For example:
    // AlreadyExists error will be raised if duplicated executions, artifacts
    // or events are found.
    //
    // It is not guaranteed that the created or updated executions, artifacts,
    // contexts and events will share the same `create_time_since_epoch`,
    // `last_update_time_since_epoch`, or `milliseconds_since_epoch` timestamps.
    //
    // Args:
    //   execution: An execution to insert or update.
    //   artifact_event_pairs: Artifacts to insert or update and events to insert.
    //   contexts: The contexts that the execution and the artifacts belong to.
    //
    // Returns:
    //   An execution id and a list of artifacts and contexts ids index-aligned
    //   with the input.
    virtual ::grpc::Status PutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::ml_metadata::PutExecutionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionResponse>> AsyncPutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionResponse>>(AsyncPutExecutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionResponse>> PrepareAsyncPutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionResponse>>(PrepareAsyncPutExecutionRaw(context, request, cq));
    }
    // Inserts or updates a lineage subgraph (i.e. a collection of event edges
    // and its executions, artifacts, and related contexts) atomically. The
    // `event_edges` include an Event and the indices of the corresponding
    // execution and artifact from the input list of executions and artifacts. The
    // `contexts` describe the associations of the Execution and the attributions
    // of the Artifact.
    //
    // If an execution_id is specified, it is an update on the corresponding
    // Execution, otherwise it does an insertion. For insertion, type must be
    // specified. These rules apply to Artifacts and Contexts as well.
    // Corresponding errors may be raised. For example: AlreadyExists error will
    // be raised if duplicated executions, artifacts, or events are found.
    //
    // It is not guaranteed that the created or updated executions, artifacts,
    // contexts and events will share the same `create_time_since_epoch`,
    // `last_update_time_since_epoch`, or `milliseconds_since_epoch` timestamps.
    //
    // Args:
    //   executions: A list of executions to insert or update.
    //   artifacts: A list of artifacts to insert or update.
    //   contexts: A list of contexts to insert and/or create associations and
    //       attributions with.
    //   event_edges: A list of events to insert with the indices of the
    //       corresponding execution and artifact from the input lists of
    //       executions and artifacts.
    //
    // Returns:
    //   Lists of execution, artifact, and context ids index-aligned with the
    //   inputs.
    virtual ::grpc::Status PutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::ml_metadata::PutLineageSubgraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutLineageSubgraphResponse>> AsyncPutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutLineageSubgraphResponse>>(AsyncPutLineageSubgraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutLineageSubgraphResponse>> PrepareAsyncPutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutLineageSubgraphResponse>>(PrepareAsyncPutLineageSubgraphRaw(context, request, cq));
    }
    // Inserts or updates contexts in database and returns a list of context ids.
    //
    // If an context_id is specified for a context, it is an update.
    // If an context_id is unspecified, it will insert a new context.
    // For new contexts, type must be specified.
    // For old contexts, type must be unchanged or unspecified.
    //
    // It is not guaranteed that the created or updated contexts will share the
    // same `create_time_since_epoch` or `last_update_time_since_epoch`
    // timestamps.
    //
    // Args:
    //   contexts: A list of contexts to insert or update.
    //
    // Returns:
    //   A list of context ids index-aligned with the input.
    virtual ::grpc::Status PutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::ml_metadata::PutContextsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextsResponse>> AsyncPutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextsResponse>>(AsyncPutContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextsResponse>> PrepareAsyncPutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextsResponse>>(PrepareAsyncPutContextsRaw(context, request, cq));
    }
    // Inserts attribution and association relationships in the database.
    // The context_id, artifact_id, and execution_id must already exist.
    // If the relationship exists, this call does nothing. Once added, the
    // relationships cannot be modified.
    //
    // Args:
    //   attributions: A list of attributions to insert.
    //   associations: A list of associations to insert.
    virtual ::grpc::Status PutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutAttributionsAndAssociationsResponse>> AsyncPutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutAttributionsAndAssociationsResponse>>(AsyncPutAttributionsAndAssociationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutAttributionsAndAssociationsResponse>> PrepareAsyncPutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutAttributionsAndAssociationsResponse>>(PrepareAsyncPutAttributionsAndAssociationsRaw(context, request, cq));
    }
    // Inserts parental context relationships in the database.
    // The ParentContext relationship has direction. The call fails if cycles are
    // detected.
    //
    // Args:
    //   parent_contexts: A list of parent contexts to insert.
    virtual ::grpc::Status PutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::ml_metadata::PutParentContextsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutParentContextsResponse>> AsyncPutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutParentContextsResponse>>(AsyncPutParentContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutParentContextsResponse>> PrepareAsyncPutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutParentContextsResponse>>(PrepareAsyncPutParentContextsRaw(context, request, cq));
    }
    // Gets an artifact type. Returns a NOT_FOUND error if the type does not
    // exist.
    virtual ::grpc::Status GetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::ml_metadata::GetArtifactTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypeResponse>> AsyncGetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypeResponse>>(AsyncGetArtifactTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypeResponse>> PrepareAsyncGetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypeResponse>>(PrepareAsyncGetArtifactTypeRaw(context, request, cq));
    }
    // Gets a list of artifact types by ID.
    // If no artifact types with an ID exists, the artifact type is skipped.
    virtual ::grpc::Status GetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::ml_metadata::GetArtifactTypesByIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByIDResponse>> AsyncGetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByIDResponse>>(AsyncGetArtifactTypesByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByIDResponse>> PrepareAsyncGetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByIDResponse>>(PrepareAsyncGetArtifactTypesByIDRaw(context, request, cq));
    }
    // Gets a list of all artifact types.
    virtual ::grpc::Status GetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::ml_metadata::GetArtifactTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesResponse>> AsyncGetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesResponse>>(AsyncGetArtifactTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesResponse>> PrepareAsyncGetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesResponse>>(PrepareAsyncGetArtifactTypesRaw(context, request, cq));
    }
    // Gets an execution type, or None if it does not exist.
    virtual ::grpc::Status GetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::ml_metadata::GetExecutionTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypeResponse>> AsyncGetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypeResponse>>(AsyncGetExecutionTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypeResponse>> PrepareAsyncGetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypeResponse>>(PrepareAsyncGetExecutionTypeRaw(context, request, cq));
    }
    // Gets a list of execution types by ID.
    // If no execution types with an ID exists, the execution type is skipped.
    virtual ::grpc::Status GetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::ml_metadata::GetExecutionTypesByIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByIDResponse>> AsyncGetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByIDResponse>>(AsyncGetExecutionTypesByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByIDResponse>> PrepareAsyncGetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByIDResponse>>(PrepareAsyncGetExecutionTypesByIDRaw(context, request, cq));
    }
    // Gets a list of all execution types.
    virtual ::grpc::Status GetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::ml_metadata::GetExecutionTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesResponse>> AsyncGetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesResponse>>(AsyncGetExecutionTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesResponse>> PrepareAsyncGetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesResponse>>(PrepareAsyncGetExecutionTypesRaw(context, request, cq));
    }
    // Gets a context type. Returns a NOT_FOUND error if the type does not exist.
    virtual ::grpc::Status GetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::ml_metadata::GetContextTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypeResponse>> AsyncGetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypeResponse>>(AsyncGetContextTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypeResponse>> PrepareAsyncGetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypeResponse>>(PrepareAsyncGetContextTypeRaw(context, request, cq));
    }
    // Gets a list of context types by ID.
    // If no context types with an ID exists, the context type is skipped.
    virtual ::grpc::Status GetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::ml_metadata::GetContextTypesByIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByIDResponse>> AsyncGetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByIDResponse>>(AsyncGetContextTypesByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByIDResponse>> PrepareAsyncGetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByIDResponse>>(PrepareAsyncGetContextTypesByIDRaw(context, request, cq));
    }
    // Gets a list of all context types.
    virtual ::grpc::Status GetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::ml_metadata::GetContextTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesResponse>> AsyncGetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesResponse>>(AsyncGetContextTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesResponse>> PrepareAsyncGetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesResponse>>(PrepareAsyncGetContextTypesRaw(context, request, cq));
    }
    // Gets all the artifacts.
    virtual ::grpc::Status GetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::ml_metadata::GetArtifactsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsResponse>> AsyncGetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsResponse>>(AsyncGetArtifactsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsResponse>> PrepareAsyncGetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsResponse>>(PrepareAsyncGetArtifactsRaw(context, request, cq));
    }
    // Gets all the executions.
    virtual ::grpc::Status GetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::ml_metadata::GetExecutionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsResponse>> AsyncGetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsResponse>>(AsyncGetExecutionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsResponse>> PrepareAsyncGetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsResponse>>(PrepareAsyncGetExecutionsRaw(context, request, cq));
    }
    // Gets all the contexts.
    virtual ::grpc::Status GetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::ml_metadata::GetContextsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsResponse>> AsyncGetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsResponse>>(AsyncGetContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsResponse>> PrepareAsyncGetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsResponse>>(PrepareAsyncGetContextsRaw(context, request, cq));
    }
    // Gets all artifacts with matching ids.
    //
    // The result is not index-aligned: if an id is not found, it is not returned.
    //
    // Args:
    //   artifact_ids: A list of artifact ids to retrieve.
    //
    // Returns:
    //   Artifacts with matching ids.
    virtual ::grpc::Status GetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::ml_metadata::GetArtifactsByIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByIDResponse>> AsyncGetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByIDResponse>>(AsyncGetArtifactsByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByIDResponse>> PrepareAsyncGetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByIDResponse>>(PrepareAsyncGetArtifactsByIDRaw(context, request, cq));
    }
    // Gets all executions with matching ids.
    //
    // The result is not index-aligned: if an id is not found, it is not returned.
    //
    // Args:
    //   execution_ids: A list of execution ids to retrieve.
    virtual ::grpc::Status GetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::ml_metadata::GetExecutionsByIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByIDResponse>> AsyncGetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByIDResponse>>(AsyncGetExecutionsByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByIDResponse>> PrepareAsyncGetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByIDResponse>>(PrepareAsyncGetExecutionsByIDRaw(context, request, cq));
    }
    // Gets all contexts with matching ids.
    //
    // The result is not index-aligned: if an id is not found, it is not returned.
    //
    // Args:
    //   context_ids: A list of context ids to retrieve.
    virtual ::grpc::Status GetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::ml_metadata::GetContextsByIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByIDResponse>> AsyncGetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByIDResponse>>(AsyncGetContextsByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByIDResponse>> PrepareAsyncGetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByIDResponse>>(PrepareAsyncGetContextsByIDRaw(context, request, cq));
    }
    // Gets all the artifacts of a given type.
    virtual ::grpc::Status GetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::ml_metadata::GetArtifactsByTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByTypeResponse>> AsyncGetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByTypeResponse>>(AsyncGetArtifactsByTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByTypeResponse>> PrepareAsyncGetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByTypeResponse>>(PrepareAsyncGetArtifactsByTypeRaw(context, request, cq));
    }
    // Gets all the executions of a given type.
    virtual ::grpc::Status GetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::ml_metadata::GetExecutionsByTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByTypeResponse>> AsyncGetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByTypeResponse>>(AsyncGetExecutionsByTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByTypeResponse>> PrepareAsyncGetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByTypeResponse>>(PrepareAsyncGetExecutionsByTypeRaw(context, request, cq));
    }
    // Gets all the contexts of a given type.
    virtual ::grpc::Status GetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::ml_metadata::GetContextsByTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByTypeResponse>> AsyncGetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByTypeResponse>>(AsyncGetContextsByTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByTypeResponse>> PrepareAsyncGetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByTypeResponse>>(PrepareAsyncGetContextsByTypeRaw(context, request, cq));
    }
    // Gets the artifact of the given type and artifact name.
    virtual ::grpc::Status GetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactByTypeAndNameResponse>> AsyncGetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactByTypeAndNameResponse>>(AsyncGetArtifactByTypeAndNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactByTypeAndNameResponse>> PrepareAsyncGetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactByTypeAndNameResponse>>(PrepareAsyncGetArtifactByTypeAndNameRaw(context, request, cq));
    }
    // Gets the execution of the given type and execution name.
    virtual ::grpc::Status GetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionByTypeAndNameResponse>> AsyncGetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionByTypeAndNameResponse>>(AsyncGetExecutionByTypeAndNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionByTypeAndNameResponse>> PrepareAsyncGetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionByTypeAndNameResponse>>(PrepareAsyncGetExecutionByTypeAndNameRaw(context, request, cq));
    }
    // Gets the context of the given type and context name.
    virtual ::grpc::Status GetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::ml_metadata::GetContextByTypeAndNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextByTypeAndNameResponse>> AsyncGetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextByTypeAndNameResponse>>(AsyncGetContextByTypeAndNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextByTypeAndNameResponse>> PrepareAsyncGetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextByTypeAndNameResponse>>(PrepareAsyncGetContextByTypeAndNameRaw(context, request, cq));
    }
    // Gets all the artifacts with matching uris.
    virtual ::grpc::Status GetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::ml_metadata::GetArtifactsByURIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByURIResponse>> AsyncGetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByURIResponse>>(AsyncGetArtifactsByURIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByURIResponse>> PrepareAsyncGetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByURIResponse>>(PrepareAsyncGetArtifactsByURIRaw(context, request, cq));
    }
    // Gets all events with matching execution ids.
    virtual ::grpc::Status GetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::ml_metadata::GetEventsByExecutionIDsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByExecutionIDsResponse>> AsyncGetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByExecutionIDsResponse>>(AsyncGetEventsByExecutionIDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByExecutionIDsResponse>> PrepareAsyncGetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByExecutionIDsResponse>>(PrepareAsyncGetEventsByExecutionIDsRaw(context, request, cq));
    }
    // Gets all events with matching artifact ids.
    virtual ::grpc::Status GetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::ml_metadata::GetEventsByArtifactIDsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByArtifactIDsResponse>> AsyncGetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByArtifactIDsResponse>>(AsyncGetEventsByArtifactIDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByArtifactIDsResponse>> PrepareAsyncGetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByArtifactIDsResponse>>(PrepareAsyncGetEventsByArtifactIDsRaw(context, request, cq));
    }
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByExternalIdsResponse>> AsyncGetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByExternalIdsResponse>>(AsyncGetArtifactsByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByExternalIdsResponse>> PrepareAsyncGetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByExternalIdsResponse>>(PrepareAsyncGetArtifactsByExternalIdsRaw(context, request, cq));
    }
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByExternalIdsResponse>> AsyncGetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByExternalIdsResponse>>(AsyncGetExecutionsByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByExternalIdsResponse>> PrepareAsyncGetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByExternalIdsResponse>>(PrepareAsyncGetExecutionsByExternalIdsRaw(context, request, cq));
    }
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::ml_metadata::GetContextsByExternalIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExternalIdsResponse>> AsyncGetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExternalIdsResponse>>(AsyncGetContextsByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExternalIdsResponse>> PrepareAsyncGetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExternalIdsResponse>>(PrepareAsyncGetContextsByExternalIdsRaw(context, request, cq));
    }
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>> AsyncGetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>>(AsyncGetArtifactTypesByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>> PrepareAsyncGetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>>(PrepareAsyncGetArtifactTypesByExternalIdsRaw(context, request, cq));
    }
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>> AsyncGetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>>(AsyncGetExecutionTypesByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>> PrepareAsyncGetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>>(PrepareAsyncGetExecutionTypesByExternalIdsRaw(context, request, cq));
    }
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByExternalIdsResponse>> AsyncGetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByExternalIdsResponse>>(AsyncGetContextTypesByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByExternalIdsResponse>> PrepareAsyncGetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByExternalIdsResponse>>(PrepareAsyncGetContextTypesByExternalIdsRaw(context, request, cq));
    }
    // Gets all context that an artifact is attributed to.
    virtual ::grpc::Status GetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::ml_metadata::GetContextsByArtifactResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByArtifactResponse>> AsyncGetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByArtifactResponse>>(AsyncGetContextsByArtifactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByArtifactResponse>> PrepareAsyncGetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByArtifactResponse>>(PrepareAsyncGetContextsByArtifactRaw(context, request, cq));
    }
    // Gets all context that an execution is associated with.
    virtual ::grpc::Status GetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::ml_metadata::GetContextsByExecutionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExecutionResponse>> AsyncGetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExecutionResponse>>(AsyncGetContextsByExecutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExecutionResponse>> PrepareAsyncGetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExecutionResponse>>(PrepareAsyncGetContextsByExecutionRaw(context, request, cq));
    }
    // Gets all parent contexts that a context is related.
    virtual ::grpc::Status GetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::ml_metadata::GetParentContextsByContextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextResponse>> AsyncGetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextResponse>>(AsyncGetParentContextsByContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextResponse>> PrepareAsyncGetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextResponse>>(PrepareAsyncGetParentContextsByContextRaw(context, request, cq));
    }
    // Gets all children contexts that a context is related.
    virtual ::grpc::Status GetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::ml_metadata::GetChildrenContextsByContextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextResponse>> AsyncGetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextResponse>>(AsyncGetChildrenContextsByContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextResponse>> PrepareAsyncGetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextResponse>>(PrepareAsyncGetChildrenContextsByContextRaw(context, request, cq));
    }
    // Batch getting all the parent contexts that a list of contexts are related.
    virtual ::grpc::Status GetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::ml_metadata::GetParentContextsByContextsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextsResponse>> AsyncGetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextsResponse>>(AsyncGetParentContextsByContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextsResponse>> PrepareAsyncGetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextsResponse>>(PrepareAsyncGetParentContextsByContextsRaw(context, request, cq));
    }
    // Batch getting all the children contexts that a list of contexts are
    // related.
    virtual ::grpc::Status GetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::ml_metadata::GetChildrenContextsByContextsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextsResponse>> AsyncGetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextsResponse>>(AsyncGetChildrenContextsByContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextsResponse>> PrepareAsyncGetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextsResponse>>(PrepareAsyncGetChildrenContextsByContextsRaw(context, request, cq));
    }
    // Gets all direct artifacts that a context attributes to.
    virtual ::grpc::Status GetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::ml_metadata::GetArtifactsByContextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByContextResponse>> AsyncGetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByContextResponse>>(AsyncGetArtifactsByContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByContextResponse>> PrepareAsyncGetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByContextResponse>>(PrepareAsyncGetArtifactsByContextRaw(context, request, cq));
    }
    // Gets all direct executions that a context associates with.
    virtual ::grpc::Status GetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::ml_metadata::GetExecutionsByContextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByContextResponse>> AsyncGetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByContextResponse>>(AsyncGetExecutionsByContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByContextResponse>> PrepareAsyncGetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByContextResponse>>(PrepareAsyncGetExecutionsByContextRaw(context, request, cq));
    }
    // Deprecated: GetLineageGraph API is deprecated, please refer to
    // GetLineageSubgraph API as the alternative.
    //
    // The transaction performs a constrained transitive closure and returns a
    // lineage subgraph satisfying the conditions and constraints specified in
    // the GetLineageGraphRequest.
    virtual ::grpc::Status GetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::ml_metadata::GetLineageGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageGraphResponse>> AsyncGetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageGraphResponse>>(AsyncGetLineageGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageGraphResponse>> PrepareAsyncGetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageGraphResponse>>(PrepareAsyncGetLineageGraphRaw(context, request, cq));
    }
    // Gets a lineage subgraph by performing graph traversal from a list of
    // interested nodes.
    // A lineage subgraph without node details (e.g., external_id, properties)
    // will be returned.
    virtual ::grpc::Status GetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::ml_metadata::GetLineageSubgraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageSubgraphResponse>> AsyncGetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageSubgraphResponse>>(AsyncGetLineageSubgraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageSubgraphResponse>> PrepareAsyncGetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageSubgraphResponse>>(PrepareAsyncGetLineageSubgraphRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Inserts or updates an ArtifactType.
      //
      // A type has a set of strong typed properties describing the schema of any
      // stored instance associated with that type. A type is identified by a name
      // and an optional version.
      //
      // Type Creation:
      // If no type exists in the database with the given identifier
      // (name, version), it creates a new type and returns the type_id.
      //
      // Type Evolution:
      // If the request type with the same (name, version) already exists
      // (let's call it stored_type), the method enforces the stored_type can be
      // updated only when the request type is backward compatible for the already
      // stored instances.
      //
      // Backwards compatibility is violated iff:
      //
      //   a) there is a property where the request type and stored_type have
      //      different value type (e.g., int vs. string)
      //   b) `can_add_fields = false` and the request type has a new property that
      //      is not stored.
      //   c) `can_omit_fields = false` and stored_type has an existing property
      //      that is not provided in the request type.
      //
      // If non-backward type change is required in the application, e.g.,
      // deprecate properties, re-purpose property name, change value types,
      // a new type can be created with a different (name, version) identifier.
      // Note the type version is optional, and a version value with empty string
      // is treated as unset.
      //
      // Args:
      //   artifact_type: the type to be inserted or updated.
      //   can_add_fields:
      //     when set to true, new properties can be added;
      //     when set to false, returns ALREADY_EXISTS if the request type has
      //     properties that are not in stored_type.
      //   can_omit_fields:
      //     when set to true, stored properties can be omitted in the request type;
      //     when set to false, returns ALREADY_EXISTS if the stored_type has
      //     properties not in the request type.
      //
      // Returns:
      //   The type_id of the stored type.
      //
      // Raises:
      //   ALREADY_EXISTS error in the case listed above.
      //   INVALID_ARGUMENT error, if the given type has no name, or any
      //     property value type is unknown.
      virtual void PutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest* request, ::ml_metadata::PutArtifactTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest* request, ::ml_metadata::PutArtifactTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts or updates an ExecutionType. Please refer to PutArtifactType for
      // type upsert API description.
      virtual void PutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest* request, ::ml_metadata::PutExecutionTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest* request, ::ml_metadata::PutExecutionTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts or updates an ContextType. Please refer to PutArtifactType for
      // type upsert API description.
      virtual void PutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest* request, ::ml_metadata::PutContextTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest* request, ::ml_metadata::PutContextTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Bulk inserts types atomically.
      virtual void PutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest* request, ::ml_metadata::PutTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest* request, ::ml_metadata::PutTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts or updates artifacts in the database.
      //
      // If an artifact_id is specified for an artifact, it is an update.
      // If an artifact_id is unspecified, it will insert a new artifact.
      // For new artifacts, type must be specified.
      // For old artifacts, type must be unchanged or unspecified.
      //
      // It is not guaranteed that the created or updated artifacts will share the
      // same `create_time_since_epoch` or `last_update_time_since_epoch`
      // timestamps.
      //
      // Args:
      //   artifacts: A list of artifacts to insert or update.
      //
      // Returns:
      //   A list of artifact ids index-aligned with the input.
      virtual void PutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest* request, ::ml_metadata::PutArtifactsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest* request, ::ml_metadata::PutArtifactsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts or updates executions in the database.
      //
      // If an execution_id is specified for an execution, it is an update.
      // If an execution_id is unspecified, it will insert a new execution.
      // For new executions, type must be specified.
      // For old executions, type must be unchanged or unspecified.
      //
      // It is not guaranteed that the created or updated executions will share the
      // same `create_time_since_epoch` or `last_update_time_since_epoch`
      // timestamps.
      //
      // Args:
      //   executions: A list of executions to insert or update.
      //
      // Returns:
      //   A list of execution ids index-aligned with the input.
      //
      virtual void PutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest* request, ::ml_metadata::PutExecutionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest* request, ::ml_metadata::PutExecutionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts events in the database.
      //
      // The execution_id and artifact_id must already exist.
      // Once created, events cannot be modified.
      // AlreadyExists error will be raised if duplicated events are found.
      //
      // It is not guaranteed that the created or updated events will share the
      // same `milliseconds_since_epoch` timestamps.
      //
      // Args:
      //   events: A list of events to insert or update.
      virtual void PutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest* request, ::ml_metadata::PutEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest* request, ::ml_metadata::PutEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts or updates an Execution and its input and output artifacts and
      // related contexts atomically. The `artifact_event_pairs` include the state
      // changes of the Artifacts used or generated by the Execution, as well as the
      // input/output Event. The `contexts` describe the associations of the
      // execution and the attributions of the artifacts.
      //
      // If an execution_id is specified, it is an update on the corresponding
      // execution, otherwise it does an insertion.
      // For insertion, type must be specified. Same rule applies to artifacts
      // and contexts in the request. Corresponding errors may raised. For example:
      // AlreadyExists error will be raised if duplicated executions, artifacts
      // or events are found.
      //
      // It is not guaranteed that the created or updated executions, artifacts,
      // contexts and events will share the same `create_time_since_epoch`,
      // `last_update_time_since_epoch`, or `milliseconds_since_epoch` timestamps.
      //
      // Args:
      //   execution: An execution to insert or update.
      //   artifact_event_pairs: Artifacts to insert or update and events to insert.
      //   contexts: The contexts that the execution and the artifacts belong to.
      //
      // Returns:
      //   An execution id and a list of artifacts and contexts ids index-aligned
      //   with the input.
      virtual void PutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest* request, ::ml_metadata::PutExecutionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest* request, ::ml_metadata::PutExecutionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts or updates a lineage subgraph (i.e. a collection of event edges
      // and its executions, artifacts, and related contexts) atomically. The
      // `event_edges` include an Event and the indices of the corresponding
      // execution and artifact from the input list of executions and artifacts. The
      // `contexts` describe the associations of the Execution and the attributions
      // of the Artifact.
      //
      // If an execution_id is specified, it is an update on the corresponding
      // Execution, otherwise it does an insertion. For insertion, type must be
      // specified. These rules apply to Artifacts and Contexts as well.
      // Corresponding errors may be raised. For example: AlreadyExists error will
      // be raised if duplicated executions, artifacts, or events are found.
      //
      // It is not guaranteed that the created or updated executions, artifacts,
      // contexts and events will share the same `create_time_since_epoch`,
      // `last_update_time_since_epoch`, or `milliseconds_since_epoch` timestamps.
      //
      // Args:
      //   executions: A list of executions to insert or update.
      //   artifacts: A list of artifacts to insert or update.
      //   contexts: A list of contexts to insert and/or create associations and
      //       attributions with.
      //   event_edges: A list of events to insert with the indices of the
      //       corresponding execution and artifact from the input lists of
      //       executions and artifacts.
      //
      // Returns:
      //   Lists of execution, artifact, and context ids index-aligned with the
      //   inputs.
      virtual void PutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest* request, ::ml_metadata::PutLineageSubgraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest* request, ::ml_metadata::PutLineageSubgraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts or updates contexts in database and returns a list of context ids.
      //
      // If an context_id is specified for a context, it is an update.
      // If an context_id is unspecified, it will insert a new context.
      // For new contexts, type must be specified.
      // For old contexts, type must be unchanged or unspecified.
      //
      // It is not guaranteed that the created or updated contexts will share the
      // same `create_time_since_epoch` or `last_update_time_since_epoch`
      // timestamps.
      //
      // Args:
      //   contexts: A list of contexts to insert or update.
      //
      // Returns:
      //   A list of context ids index-aligned with the input.
      virtual void PutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest* request, ::ml_metadata::PutContextsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest* request, ::ml_metadata::PutContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts attribution and association relationships in the database.
      // The context_id, artifact_id, and execution_id must already exist.
      // If the relationship exists, this call does nothing. Once added, the
      // relationships cannot be modified.
      //
      // Args:
      //   attributions: A list of attributions to insert.
      //   associations: A list of associations to insert.
      virtual void PutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inserts parental context relationships in the database.
      // The ParentContext relationship has direction. The call fails if cycles are
      // detected.
      //
      // Args:
      //   parent_contexts: A list of parent contexts to insert.
      virtual void PutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest* request, ::ml_metadata::PutParentContextsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest* request, ::ml_metadata::PutParentContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets an artifact type. Returns a NOT_FOUND error if the type does not
      // exist.
      virtual void GetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest* request, ::ml_metadata::GetArtifactTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest* request, ::ml_metadata::GetArtifactTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a list of artifact types by ID.
      // If no artifact types with an ID exists, the artifact type is skipped.
      virtual void GetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest* request, ::ml_metadata::GetArtifactTypesByIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest* request, ::ml_metadata::GetArtifactTypesByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a list of all artifact types.
      virtual void GetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest* request, ::ml_metadata::GetArtifactTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest* request, ::ml_metadata::GetArtifactTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets an execution type, or None if it does not exist.
      virtual void GetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest* request, ::ml_metadata::GetExecutionTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest* request, ::ml_metadata::GetExecutionTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a list of execution types by ID.
      // If no execution types with an ID exists, the execution type is skipped.
      virtual void GetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest* request, ::ml_metadata::GetExecutionTypesByIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest* request, ::ml_metadata::GetExecutionTypesByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a list of all execution types.
      virtual void GetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest* request, ::ml_metadata::GetExecutionTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest* request, ::ml_metadata::GetExecutionTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a context type. Returns a NOT_FOUND error if the type does not exist.
      virtual void GetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest* request, ::ml_metadata::GetContextTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest* request, ::ml_metadata::GetContextTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a list of context types by ID.
      // If no context types with an ID exists, the context type is skipped.
      virtual void GetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest* request, ::ml_metadata::GetContextTypesByIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest* request, ::ml_metadata::GetContextTypesByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a list of all context types.
      virtual void GetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest* request, ::ml_metadata::GetContextTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest* request, ::ml_metadata::GetContextTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the artifacts.
      virtual void GetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest* request, ::ml_metadata::GetArtifactsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest* request, ::ml_metadata::GetArtifactsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the executions.
      virtual void GetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest* request, ::ml_metadata::GetExecutionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest* request, ::ml_metadata::GetExecutionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the contexts.
      virtual void GetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest* request, ::ml_metadata::GetContextsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest* request, ::ml_metadata::GetContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all artifacts with matching ids.
      //
      // The result is not index-aligned: if an id is not found, it is not returned.
      //
      // Args:
      //   artifact_ids: A list of artifact ids to retrieve.
      //
      // Returns:
      //   Artifacts with matching ids.
      virtual void GetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest* request, ::ml_metadata::GetArtifactsByIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest* request, ::ml_metadata::GetArtifactsByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all executions with matching ids.
      //
      // The result is not index-aligned: if an id is not found, it is not returned.
      //
      // Args:
      //   execution_ids: A list of execution ids to retrieve.
      virtual void GetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest* request, ::ml_metadata::GetExecutionsByIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest* request, ::ml_metadata::GetExecutionsByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all contexts with matching ids.
      //
      // The result is not index-aligned: if an id is not found, it is not returned.
      //
      // Args:
      //   context_ids: A list of context ids to retrieve.
      virtual void GetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest* request, ::ml_metadata::GetContextsByIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest* request, ::ml_metadata::GetContextsByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the artifacts of a given type.
      virtual void GetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest* request, ::ml_metadata::GetArtifactsByTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest* request, ::ml_metadata::GetArtifactsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the executions of a given type.
      virtual void GetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest* request, ::ml_metadata::GetExecutionsByTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest* request, ::ml_metadata::GetExecutionsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the contexts of a given type.
      virtual void GetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest* request, ::ml_metadata::GetContextsByTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest* request, ::ml_metadata::GetContextsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the artifact of the given type and artifact name.
      virtual void GetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the execution of the given type and execution name.
      virtual void GetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the context of the given type and context name.
      virtual void GetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest* request, ::ml_metadata::GetContextByTypeAndNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest* request, ::ml_metadata::GetContextByTypeAndNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the artifacts with matching uris.
      virtual void GetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest* request, ::ml_metadata::GetArtifactsByURIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest* request, ::ml_metadata::GetArtifactsByURIResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all events with matching execution ids.
      virtual void GetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::ml_metadata::GetEventsByExecutionIDsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::ml_metadata::GetEventsByExecutionIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all events with matching artifact ids.
      virtual void GetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::ml_metadata::GetEventsByArtifactIDsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::ml_metadata::GetEventsByArtifactIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the artifacts with matching external ids.
      virtual void GetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the artifacts with matching external ids.
      virtual void GetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the artifacts with matching external ids.
      virtual void GetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest* request, ::ml_metadata::GetContextsByExternalIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest* request, ::ml_metadata::GetContextsByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the artifacts with matching external ids.
      virtual void GetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the artifacts with matching external ids.
      virtual void GetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all the artifacts with matching external ids.
      virtual void GetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all context that an artifact is attributed to.
      virtual void GetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest* request, ::ml_metadata::GetContextsByArtifactResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest* request, ::ml_metadata::GetContextsByArtifactResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all context that an execution is associated with.
      virtual void GetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest* request, ::ml_metadata::GetContextsByExecutionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest* request, ::ml_metadata::GetContextsByExecutionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all parent contexts that a context is related.
      virtual void GetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest* request, ::ml_metadata::GetParentContextsByContextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest* request, ::ml_metadata::GetParentContextsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all children contexts that a context is related.
      virtual void GetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest* request, ::ml_metadata::GetChildrenContextsByContextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest* request, ::ml_metadata::GetChildrenContextsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Batch getting all the parent contexts that a list of contexts are related.
      virtual void GetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest* request, ::ml_metadata::GetParentContextsByContextsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest* request, ::ml_metadata::GetParentContextsByContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Batch getting all the children contexts that a list of contexts are
      // related.
      virtual void GetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::ml_metadata::GetChildrenContextsByContextsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::ml_metadata::GetChildrenContextsByContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all direct artifacts that a context attributes to.
      virtual void GetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest* request, ::ml_metadata::GetArtifactsByContextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest* request, ::ml_metadata::GetArtifactsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all direct executions that a context associates with.
      virtual void GetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest* request, ::ml_metadata::GetExecutionsByContextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest* request, ::ml_metadata::GetExecutionsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deprecated: GetLineageGraph API is deprecated, please refer to
      // GetLineageSubgraph API as the alternative.
      //
      // The transaction performs a constrained transitive closure and returns a
      // lineage subgraph satisfying the conditions and constraints specified in
      // the GetLineageGraphRequest.
      virtual void GetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest* request, ::ml_metadata::GetLineageGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest* request, ::ml_metadata::GetLineageGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a lineage subgraph by performing graph traversal from a list of
      // interested nodes.
      // A lineage subgraph without node details (e.g., external_id, properties)
      // will be returned.
      virtual void GetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest* request, ::ml_metadata::GetLineageSubgraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest* request, ::ml_metadata::GetLineageSubgraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactTypeResponse>* AsyncPutArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactTypeResponse>* PrepareAsyncPutArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionTypeResponse>* AsyncPutExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionTypeResponse>* PrepareAsyncPutExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextTypeResponse>* AsyncPutContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextTypeResponse>* PrepareAsyncPutContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutTypesResponse>* AsyncPutTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutTypesResponse>* PrepareAsyncPutTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactsResponse>* AsyncPutArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutArtifactsResponse>* PrepareAsyncPutArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionsResponse>* AsyncPutExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionsResponse>* PrepareAsyncPutExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutEventsResponse>* AsyncPutEventsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutEventsResponse>* PrepareAsyncPutEventsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionResponse>* AsyncPutExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutExecutionResponse>* PrepareAsyncPutExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutLineageSubgraphResponse>* AsyncPutLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutLineageSubgraphResponse>* PrepareAsyncPutLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextsResponse>* AsyncPutContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutContextsResponse>* PrepareAsyncPutContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutAttributionsAndAssociationsResponse>* AsyncPutAttributionsAndAssociationsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutAttributionsAndAssociationsResponse>* PrepareAsyncPutAttributionsAndAssociationsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutParentContextsResponse>* AsyncPutParentContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::PutParentContextsResponse>* PrepareAsyncPutParentContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypeResponse>* AsyncGetArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypeResponse>* PrepareAsyncGetArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByIDResponse>* AsyncGetArtifactTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByIDResponse>* PrepareAsyncGetArtifactTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesResponse>* AsyncGetArtifactTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesResponse>* PrepareAsyncGetArtifactTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypeResponse>* AsyncGetExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypeResponse>* PrepareAsyncGetExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByIDResponse>* AsyncGetExecutionTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByIDResponse>* PrepareAsyncGetExecutionTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesResponse>* AsyncGetExecutionTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesResponse>* PrepareAsyncGetExecutionTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypeResponse>* AsyncGetContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypeResponse>* PrepareAsyncGetContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByIDResponse>* AsyncGetContextTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByIDResponse>* PrepareAsyncGetContextTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesResponse>* AsyncGetContextTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesResponse>* PrepareAsyncGetContextTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsResponse>* AsyncGetArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsResponse>* PrepareAsyncGetArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsResponse>* AsyncGetExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsResponse>* PrepareAsyncGetExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsResponse>* AsyncGetContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsResponse>* PrepareAsyncGetContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByIDResponse>* AsyncGetArtifactsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByIDResponse>* PrepareAsyncGetArtifactsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByIDResponse>* AsyncGetExecutionsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByIDResponse>* PrepareAsyncGetExecutionsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByIDResponse>* AsyncGetContextsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByIDResponse>* PrepareAsyncGetContextsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByTypeResponse>* AsyncGetArtifactsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByTypeResponse>* PrepareAsyncGetArtifactsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByTypeResponse>* AsyncGetExecutionsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByTypeResponse>* PrepareAsyncGetExecutionsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByTypeResponse>* AsyncGetContextsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByTypeResponse>* PrepareAsyncGetContextsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactByTypeAndNameResponse>* AsyncGetArtifactByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactByTypeAndNameResponse>* PrepareAsyncGetArtifactByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionByTypeAndNameResponse>* AsyncGetExecutionByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionByTypeAndNameResponse>* PrepareAsyncGetExecutionByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextByTypeAndNameResponse>* AsyncGetContextByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextByTypeAndNameResponse>* PrepareAsyncGetContextByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByURIResponse>* AsyncGetArtifactsByURIRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByURIResponse>* PrepareAsyncGetArtifactsByURIRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByExecutionIDsResponse>* AsyncGetEventsByExecutionIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByExecutionIDsResponse>* PrepareAsyncGetEventsByExecutionIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByArtifactIDsResponse>* AsyncGetEventsByArtifactIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetEventsByArtifactIDsResponse>* PrepareAsyncGetEventsByArtifactIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByExternalIdsResponse>* AsyncGetArtifactsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByExternalIdsResponse>* PrepareAsyncGetArtifactsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByExternalIdsResponse>* AsyncGetExecutionsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByExternalIdsResponse>* PrepareAsyncGetExecutionsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExternalIdsResponse>* AsyncGetContextsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExternalIdsResponse>* PrepareAsyncGetContextsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>* AsyncGetArtifactTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>* PrepareAsyncGetArtifactTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>* AsyncGetExecutionTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>* PrepareAsyncGetExecutionTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByExternalIdsResponse>* AsyncGetContextTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextTypesByExternalIdsResponse>* PrepareAsyncGetContextTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByArtifactResponse>* AsyncGetContextsByArtifactRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByArtifactResponse>* PrepareAsyncGetContextsByArtifactRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExecutionResponse>* AsyncGetContextsByExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetContextsByExecutionResponse>* PrepareAsyncGetContextsByExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextResponse>* AsyncGetParentContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextResponse>* PrepareAsyncGetParentContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextResponse>* AsyncGetChildrenContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextResponse>* PrepareAsyncGetChildrenContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextsResponse>* AsyncGetParentContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetParentContextsByContextsResponse>* PrepareAsyncGetParentContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextsResponse>* AsyncGetChildrenContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetChildrenContextsByContextsResponse>* PrepareAsyncGetChildrenContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByContextResponse>* AsyncGetArtifactsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetArtifactsByContextResponse>* PrepareAsyncGetArtifactsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByContextResponse>* AsyncGetExecutionsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetExecutionsByContextResponse>* PrepareAsyncGetExecutionsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageGraphResponse>* AsyncGetLineageGraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageGraphResponse>* PrepareAsyncGetLineageGraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageSubgraphResponse>* AsyncGetLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ml_metadata::GetLineageSubgraphResponse>* PrepareAsyncGetLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::ml_metadata::PutArtifactTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactTypeResponse>> AsyncPutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactTypeResponse>>(AsyncPutArtifactTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactTypeResponse>> PrepareAsyncPutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactTypeResponse>>(PrepareAsyncPutArtifactTypeRaw(context, request, cq));
    }
    ::grpc::Status PutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::ml_metadata::PutExecutionTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionTypeResponse>> AsyncPutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionTypeResponse>>(AsyncPutExecutionTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionTypeResponse>> PrepareAsyncPutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionTypeResponse>>(PrepareAsyncPutExecutionTypeRaw(context, request, cq));
    }
    ::grpc::Status PutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::ml_metadata::PutContextTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextTypeResponse>> AsyncPutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextTypeResponse>>(AsyncPutContextTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextTypeResponse>> PrepareAsyncPutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextTypeResponse>>(PrepareAsyncPutContextTypeRaw(context, request, cq));
    }
    ::grpc::Status PutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::ml_metadata::PutTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutTypesResponse>> AsyncPutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutTypesResponse>>(AsyncPutTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutTypesResponse>> PrepareAsyncPutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutTypesResponse>>(PrepareAsyncPutTypesRaw(context, request, cq));
    }
    ::grpc::Status PutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::ml_metadata::PutArtifactsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactsResponse>> AsyncPutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactsResponse>>(AsyncPutArtifactsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactsResponse>> PrepareAsyncPutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactsResponse>>(PrepareAsyncPutArtifactsRaw(context, request, cq));
    }
    ::grpc::Status PutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::ml_metadata::PutExecutionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionsResponse>> AsyncPutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionsResponse>>(AsyncPutExecutionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionsResponse>> PrepareAsyncPutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionsResponse>>(PrepareAsyncPutExecutionsRaw(context, request, cq));
    }
    ::grpc::Status PutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::ml_metadata::PutEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutEventsResponse>> AsyncPutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutEventsResponse>>(AsyncPutEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutEventsResponse>> PrepareAsyncPutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutEventsResponse>>(PrepareAsyncPutEventsRaw(context, request, cq));
    }
    ::grpc::Status PutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::ml_metadata::PutExecutionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionResponse>> AsyncPutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionResponse>>(AsyncPutExecutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionResponse>> PrepareAsyncPutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionResponse>>(PrepareAsyncPutExecutionRaw(context, request, cq));
    }
    ::grpc::Status PutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::ml_metadata::PutLineageSubgraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutLineageSubgraphResponse>> AsyncPutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutLineageSubgraphResponse>>(AsyncPutLineageSubgraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutLineageSubgraphResponse>> PrepareAsyncPutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutLineageSubgraphResponse>>(PrepareAsyncPutLineageSubgraphRaw(context, request, cq));
    }
    ::grpc::Status PutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::ml_metadata::PutContextsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextsResponse>> AsyncPutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextsResponse>>(AsyncPutContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextsResponse>> PrepareAsyncPutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextsResponse>>(PrepareAsyncPutContextsRaw(context, request, cq));
    }
    ::grpc::Status PutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutAttributionsAndAssociationsResponse>> AsyncPutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutAttributionsAndAssociationsResponse>>(AsyncPutAttributionsAndAssociationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutAttributionsAndAssociationsResponse>> PrepareAsyncPutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutAttributionsAndAssociationsResponse>>(PrepareAsyncPutAttributionsAndAssociationsRaw(context, request, cq));
    }
    ::grpc::Status PutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::ml_metadata::PutParentContextsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutParentContextsResponse>> AsyncPutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutParentContextsResponse>>(AsyncPutParentContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutParentContextsResponse>> PrepareAsyncPutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutParentContextsResponse>>(PrepareAsyncPutParentContextsRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::ml_metadata::GetArtifactTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypeResponse>> AsyncGetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypeResponse>>(AsyncGetArtifactTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypeResponse>> PrepareAsyncGetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypeResponse>>(PrepareAsyncGetArtifactTypeRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::ml_metadata::GetArtifactTypesByIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByIDResponse>> AsyncGetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByIDResponse>>(AsyncGetArtifactTypesByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByIDResponse>> PrepareAsyncGetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByIDResponse>>(PrepareAsyncGetArtifactTypesByIDRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::ml_metadata::GetArtifactTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesResponse>> AsyncGetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesResponse>>(AsyncGetArtifactTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesResponse>> PrepareAsyncGetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesResponse>>(PrepareAsyncGetArtifactTypesRaw(context, request, cq));
    }
    ::grpc::Status GetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::ml_metadata::GetExecutionTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypeResponse>> AsyncGetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypeResponse>>(AsyncGetExecutionTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypeResponse>> PrepareAsyncGetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypeResponse>>(PrepareAsyncGetExecutionTypeRaw(context, request, cq));
    }
    ::grpc::Status GetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::ml_metadata::GetExecutionTypesByIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByIDResponse>> AsyncGetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByIDResponse>>(AsyncGetExecutionTypesByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByIDResponse>> PrepareAsyncGetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByIDResponse>>(PrepareAsyncGetExecutionTypesByIDRaw(context, request, cq));
    }
    ::grpc::Status GetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::ml_metadata::GetExecutionTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesResponse>> AsyncGetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesResponse>>(AsyncGetExecutionTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesResponse>> PrepareAsyncGetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesResponse>>(PrepareAsyncGetExecutionTypesRaw(context, request, cq));
    }
    ::grpc::Status GetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::ml_metadata::GetContextTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypeResponse>> AsyncGetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypeResponse>>(AsyncGetContextTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypeResponse>> PrepareAsyncGetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypeResponse>>(PrepareAsyncGetContextTypeRaw(context, request, cq));
    }
    ::grpc::Status GetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::ml_metadata::GetContextTypesByIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByIDResponse>> AsyncGetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByIDResponse>>(AsyncGetContextTypesByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByIDResponse>> PrepareAsyncGetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByIDResponse>>(PrepareAsyncGetContextTypesByIDRaw(context, request, cq));
    }
    ::grpc::Status GetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::ml_metadata::GetContextTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesResponse>> AsyncGetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesResponse>>(AsyncGetContextTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesResponse>> PrepareAsyncGetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesResponse>>(PrepareAsyncGetContextTypesRaw(context, request, cq));
    }
    ::grpc::Status GetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::ml_metadata::GetArtifactsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsResponse>> AsyncGetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsResponse>>(AsyncGetArtifactsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsResponse>> PrepareAsyncGetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsResponse>>(PrepareAsyncGetArtifactsRaw(context, request, cq));
    }
    ::grpc::Status GetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::ml_metadata::GetExecutionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsResponse>> AsyncGetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsResponse>>(AsyncGetExecutionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsResponse>> PrepareAsyncGetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsResponse>>(PrepareAsyncGetExecutionsRaw(context, request, cq));
    }
    ::grpc::Status GetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::ml_metadata::GetContextsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsResponse>> AsyncGetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsResponse>>(AsyncGetContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsResponse>> PrepareAsyncGetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsResponse>>(PrepareAsyncGetContextsRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::ml_metadata::GetArtifactsByIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByIDResponse>> AsyncGetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByIDResponse>>(AsyncGetArtifactsByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByIDResponse>> PrepareAsyncGetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByIDResponse>>(PrepareAsyncGetArtifactsByIDRaw(context, request, cq));
    }
    ::grpc::Status GetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::ml_metadata::GetExecutionsByIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByIDResponse>> AsyncGetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByIDResponse>>(AsyncGetExecutionsByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByIDResponse>> PrepareAsyncGetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByIDResponse>>(PrepareAsyncGetExecutionsByIDRaw(context, request, cq));
    }
    ::grpc::Status GetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::ml_metadata::GetContextsByIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByIDResponse>> AsyncGetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByIDResponse>>(AsyncGetContextsByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByIDResponse>> PrepareAsyncGetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByIDResponse>>(PrepareAsyncGetContextsByIDRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::ml_metadata::GetArtifactsByTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByTypeResponse>> AsyncGetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByTypeResponse>>(AsyncGetArtifactsByTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByTypeResponse>> PrepareAsyncGetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByTypeResponse>>(PrepareAsyncGetArtifactsByTypeRaw(context, request, cq));
    }
    ::grpc::Status GetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::ml_metadata::GetExecutionsByTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByTypeResponse>> AsyncGetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByTypeResponse>>(AsyncGetExecutionsByTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByTypeResponse>> PrepareAsyncGetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByTypeResponse>>(PrepareAsyncGetExecutionsByTypeRaw(context, request, cq));
    }
    ::grpc::Status GetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::ml_metadata::GetContextsByTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByTypeResponse>> AsyncGetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByTypeResponse>>(AsyncGetContextsByTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByTypeResponse>> PrepareAsyncGetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByTypeResponse>>(PrepareAsyncGetContextsByTypeRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactByTypeAndNameResponse>> AsyncGetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactByTypeAndNameResponse>>(AsyncGetArtifactByTypeAndNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactByTypeAndNameResponse>> PrepareAsyncGetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactByTypeAndNameResponse>>(PrepareAsyncGetArtifactByTypeAndNameRaw(context, request, cq));
    }
    ::grpc::Status GetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionByTypeAndNameResponse>> AsyncGetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionByTypeAndNameResponse>>(AsyncGetExecutionByTypeAndNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionByTypeAndNameResponse>> PrepareAsyncGetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionByTypeAndNameResponse>>(PrepareAsyncGetExecutionByTypeAndNameRaw(context, request, cq));
    }
    ::grpc::Status GetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::ml_metadata::GetContextByTypeAndNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextByTypeAndNameResponse>> AsyncGetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextByTypeAndNameResponse>>(AsyncGetContextByTypeAndNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextByTypeAndNameResponse>> PrepareAsyncGetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextByTypeAndNameResponse>>(PrepareAsyncGetContextByTypeAndNameRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::ml_metadata::GetArtifactsByURIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByURIResponse>> AsyncGetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByURIResponse>>(AsyncGetArtifactsByURIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByURIResponse>> PrepareAsyncGetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByURIResponse>>(PrepareAsyncGetArtifactsByURIRaw(context, request, cq));
    }
    ::grpc::Status GetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::ml_metadata::GetEventsByExecutionIDsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByExecutionIDsResponse>> AsyncGetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByExecutionIDsResponse>>(AsyncGetEventsByExecutionIDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByExecutionIDsResponse>> PrepareAsyncGetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByExecutionIDsResponse>>(PrepareAsyncGetEventsByExecutionIDsRaw(context, request, cq));
    }
    ::grpc::Status GetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::ml_metadata::GetEventsByArtifactIDsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByArtifactIDsResponse>> AsyncGetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByArtifactIDsResponse>>(AsyncGetEventsByArtifactIDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByArtifactIDsResponse>> PrepareAsyncGetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByArtifactIDsResponse>>(PrepareAsyncGetEventsByArtifactIDsRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByExternalIdsResponse>> AsyncGetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByExternalIdsResponse>>(AsyncGetArtifactsByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByExternalIdsResponse>> PrepareAsyncGetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByExternalIdsResponse>>(PrepareAsyncGetArtifactsByExternalIdsRaw(context, request, cq));
    }
    ::grpc::Status GetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByExternalIdsResponse>> AsyncGetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByExternalIdsResponse>>(AsyncGetExecutionsByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByExternalIdsResponse>> PrepareAsyncGetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByExternalIdsResponse>>(PrepareAsyncGetExecutionsByExternalIdsRaw(context, request, cq));
    }
    ::grpc::Status GetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::ml_metadata::GetContextsByExternalIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExternalIdsResponse>> AsyncGetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExternalIdsResponse>>(AsyncGetContextsByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExternalIdsResponse>> PrepareAsyncGetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExternalIdsResponse>>(PrepareAsyncGetContextsByExternalIdsRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>> AsyncGetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>>(AsyncGetArtifactTypesByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>> PrepareAsyncGetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>>(PrepareAsyncGetArtifactTypesByExternalIdsRaw(context, request, cq));
    }
    ::grpc::Status GetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>> AsyncGetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>>(AsyncGetExecutionTypesByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>> PrepareAsyncGetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>>(PrepareAsyncGetExecutionTypesByExternalIdsRaw(context, request, cq));
    }
    ::grpc::Status GetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByExternalIdsResponse>> AsyncGetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByExternalIdsResponse>>(AsyncGetContextTypesByExternalIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByExternalIdsResponse>> PrepareAsyncGetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByExternalIdsResponse>>(PrepareAsyncGetContextTypesByExternalIdsRaw(context, request, cq));
    }
    ::grpc::Status GetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::ml_metadata::GetContextsByArtifactResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByArtifactResponse>> AsyncGetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByArtifactResponse>>(AsyncGetContextsByArtifactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByArtifactResponse>> PrepareAsyncGetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByArtifactResponse>>(PrepareAsyncGetContextsByArtifactRaw(context, request, cq));
    }
    ::grpc::Status GetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::ml_metadata::GetContextsByExecutionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExecutionResponse>> AsyncGetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExecutionResponse>>(AsyncGetContextsByExecutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExecutionResponse>> PrepareAsyncGetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExecutionResponse>>(PrepareAsyncGetContextsByExecutionRaw(context, request, cq));
    }
    ::grpc::Status GetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::ml_metadata::GetParentContextsByContextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextResponse>> AsyncGetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextResponse>>(AsyncGetParentContextsByContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextResponse>> PrepareAsyncGetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextResponse>>(PrepareAsyncGetParentContextsByContextRaw(context, request, cq));
    }
    ::grpc::Status GetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::ml_metadata::GetChildrenContextsByContextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextResponse>> AsyncGetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextResponse>>(AsyncGetChildrenContextsByContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextResponse>> PrepareAsyncGetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextResponse>>(PrepareAsyncGetChildrenContextsByContextRaw(context, request, cq));
    }
    ::grpc::Status GetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::ml_metadata::GetParentContextsByContextsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextsResponse>> AsyncGetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextsResponse>>(AsyncGetParentContextsByContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextsResponse>> PrepareAsyncGetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextsResponse>>(PrepareAsyncGetParentContextsByContextsRaw(context, request, cq));
    }
    ::grpc::Status GetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::ml_metadata::GetChildrenContextsByContextsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextsResponse>> AsyncGetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextsResponse>>(AsyncGetChildrenContextsByContextsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextsResponse>> PrepareAsyncGetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextsResponse>>(PrepareAsyncGetChildrenContextsByContextsRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::ml_metadata::GetArtifactsByContextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByContextResponse>> AsyncGetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByContextResponse>>(AsyncGetArtifactsByContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByContextResponse>> PrepareAsyncGetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByContextResponse>>(PrepareAsyncGetArtifactsByContextRaw(context, request, cq));
    }
    ::grpc::Status GetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::ml_metadata::GetExecutionsByContextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByContextResponse>> AsyncGetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByContextResponse>>(AsyncGetExecutionsByContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByContextResponse>> PrepareAsyncGetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByContextResponse>>(PrepareAsyncGetExecutionsByContextRaw(context, request, cq));
    }
    ::grpc::Status GetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::ml_metadata::GetLineageGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageGraphResponse>> AsyncGetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageGraphResponse>>(AsyncGetLineageGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageGraphResponse>> PrepareAsyncGetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageGraphResponse>>(PrepareAsyncGetLineageGraphRaw(context, request, cq));
    }
    ::grpc::Status GetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::ml_metadata::GetLineageSubgraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageSubgraphResponse>> AsyncGetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageSubgraphResponse>>(AsyncGetLineageSubgraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageSubgraphResponse>> PrepareAsyncGetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageSubgraphResponse>>(PrepareAsyncGetLineageSubgraphRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest* request, ::ml_metadata::PutArtifactTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void PutArtifactType(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest* request, ::ml_metadata::PutArtifactTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest* request, ::ml_metadata::PutExecutionTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void PutExecutionType(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest* request, ::ml_metadata::PutExecutionTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest* request, ::ml_metadata::PutContextTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void PutContextType(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest* request, ::ml_metadata::PutContextTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest* request, ::ml_metadata::PutTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void PutTypes(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest* request, ::ml_metadata::PutTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest* request, ::ml_metadata::PutArtifactsResponse* response, std::function<void(::grpc::Status)>) override;
      void PutArtifacts(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest* request, ::ml_metadata::PutArtifactsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest* request, ::ml_metadata::PutExecutionsResponse* response, std::function<void(::grpc::Status)>) override;
      void PutExecutions(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest* request, ::ml_metadata::PutExecutionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest* request, ::ml_metadata::PutEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void PutEvents(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest* request, ::ml_metadata::PutEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest* request, ::ml_metadata::PutExecutionResponse* response, std::function<void(::grpc::Status)>) override;
      void PutExecution(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest* request, ::ml_metadata::PutExecutionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest* request, ::ml_metadata::PutLineageSubgraphResponse* response, std::function<void(::grpc::Status)>) override;
      void PutLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest* request, ::ml_metadata::PutLineageSubgraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest* request, ::ml_metadata::PutContextsResponse* response, std::function<void(::grpc::Status)>) override;
      void PutContexts(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest* request, ::ml_metadata::PutContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response, std::function<void(::grpc::Status)>) override;
      void PutAttributionsAndAssociations(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest* request, ::ml_metadata::PutParentContextsResponse* response, std::function<void(::grpc::Status)>) override;
      void PutParentContexts(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest* request, ::ml_metadata::PutParentContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest* request, ::ml_metadata::GetArtifactTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest* request, ::ml_metadata::GetArtifactTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest* request, ::ml_metadata::GetArtifactTypesByIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest* request, ::ml_metadata::GetArtifactTypesByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest* request, ::ml_metadata::GetArtifactTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactTypes(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest* request, ::ml_metadata::GetArtifactTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest* request, ::ml_metadata::GetExecutionTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutionType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest* request, ::ml_metadata::GetExecutionTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest* request, ::ml_metadata::GetExecutionTypesByIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutionTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest* request, ::ml_metadata::GetExecutionTypesByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest* request, ::ml_metadata::GetExecutionTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutionTypes(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest* request, ::ml_metadata::GetExecutionTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest* request, ::ml_metadata::GetContextTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextType(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest* request, ::ml_metadata::GetContextTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest* request, ::ml_metadata::GetContextTypesByIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextTypesByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest* request, ::ml_metadata::GetContextTypesByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest* request, ::ml_metadata::GetContextTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextTypes(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest* request, ::ml_metadata::GetContextTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest* request, ::ml_metadata::GetArtifactsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifacts(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest* request, ::ml_metadata::GetArtifactsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest* request, ::ml_metadata::GetExecutionsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutions(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest* request, ::ml_metadata::GetExecutionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest* request, ::ml_metadata::GetContextsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContexts(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest* request, ::ml_metadata::GetContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest* request, ::ml_metadata::GetArtifactsByIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactsByID(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest* request, ::ml_metadata::GetArtifactsByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest* request, ::ml_metadata::GetExecutionsByIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutionsByID(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest* request, ::ml_metadata::GetExecutionsByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest* request, ::ml_metadata::GetContextsByIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextsByID(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest* request, ::ml_metadata::GetContextsByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest* request, ::ml_metadata::GetArtifactsByTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactsByType(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest* request, ::ml_metadata::GetArtifactsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest* request, ::ml_metadata::GetExecutionsByTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutionsByType(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest* request, ::ml_metadata::GetExecutionsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest* request, ::ml_metadata::GetContextsByTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextsByType(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest* request, ::ml_metadata::GetContextsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutionByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest* request, ::ml_metadata::GetContextByTypeAndNameResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextByTypeAndName(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest* request, ::ml_metadata::GetContextByTypeAndNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest* request, ::ml_metadata::GetArtifactsByURIResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactsByURI(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest* request, ::ml_metadata::GetArtifactsByURIResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::ml_metadata::GetEventsByExecutionIDsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEventsByExecutionIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::ml_metadata::GetEventsByExecutionIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::ml_metadata::GetEventsByArtifactIDsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEventsByArtifactIDs(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::ml_metadata::GetEventsByArtifactIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutionsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest* request, ::ml_metadata::GetContextsByExternalIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextsByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest* request, ::ml_metadata::GetContextsByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutionTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextTypesByExternalIds(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest* request, ::ml_metadata::GetContextsByArtifactResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextsByArtifact(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest* request, ::ml_metadata::GetContextsByArtifactResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest* request, ::ml_metadata::GetContextsByExecutionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContextsByExecution(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest* request, ::ml_metadata::GetContextsByExecutionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest* request, ::ml_metadata::GetParentContextsByContextResponse* response, std::function<void(::grpc::Status)>) override;
      void GetParentContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest* request, ::ml_metadata::GetParentContextsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest* request, ::ml_metadata::GetChildrenContextsByContextResponse* response, std::function<void(::grpc::Status)>) override;
      void GetChildrenContextsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest* request, ::ml_metadata::GetChildrenContextsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest* request, ::ml_metadata::GetParentContextsByContextsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetParentContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest* request, ::ml_metadata::GetParentContextsByContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::ml_metadata::GetChildrenContextsByContextsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetChildrenContextsByContexts(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::ml_metadata::GetChildrenContextsByContextsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest* request, ::ml_metadata::GetArtifactsByContextResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest* request, ::ml_metadata::GetArtifactsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest* request, ::ml_metadata::GetExecutionsByContextResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExecutionsByContext(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest* request, ::ml_metadata::GetExecutionsByContextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest* request, ::ml_metadata::GetLineageGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLineageGraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest* request, ::ml_metadata::GetLineageGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest* request, ::ml_metadata::GetLineageSubgraphResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLineageSubgraph(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest* request, ::ml_metadata::GetLineageSubgraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactTypeResponse>* AsyncPutArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactTypeResponse>* PrepareAsyncPutArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionTypeResponse>* AsyncPutExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionTypeResponse>* PrepareAsyncPutExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextTypeResponse>* AsyncPutContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextTypeResponse>* PrepareAsyncPutContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutTypesResponse>* AsyncPutTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutTypesResponse>* PrepareAsyncPutTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::PutTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactsResponse>* AsyncPutArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutArtifactsResponse>* PrepareAsyncPutArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutArtifactsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionsResponse>* AsyncPutExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionsResponse>* PrepareAsyncPutExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutEventsResponse>* AsyncPutEventsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutEventsResponse>* PrepareAsyncPutEventsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionResponse>* AsyncPutExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutExecutionResponse>* PrepareAsyncPutExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::PutExecutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutLineageSubgraphResponse>* AsyncPutLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutLineageSubgraphResponse>* PrepareAsyncPutLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::PutLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextsResponse>* AsyncPutContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutContextsResponse>* PrepareAsyncPutContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutAttributionsAndAssociationsResponse>* AsyncPutAttributionsAndAssociationsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutAttributionsAndAssociationsResponse>* PrepareAsyncPutAttributionsAndAssociationsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutParentContextsResponse>* AsyncPutParentContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::PutParentContextsResponse>* PrepareAsyncPutParentContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::PutParentContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypeResponse>* AsyncGetArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypeResponse>* PrepareAsyncGetArtifactTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByIDResponse>* AsyncGetArtifactTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByIDResponse>* PrepareAsyncGetArtifactTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesResponse>* AsyncGetArtifactTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesResponse>* PrepareAsyncGetArtifactTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypeResponse>* AsyncGetExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypeResponse>* PrepareAsyncGetExecutionTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByIDResponse>* AsyncGetExecutionTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByIDResponse>* PrepareAsyncGetExecutionTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesResponse>* AsyncGetExecutionTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesResponse>* PrepareAsyncGetExecutionTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypeResponse>* AsyncGetContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypeResponse>* PrepareAsyncGetContextTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByIDResponse>* AsyncGetContextTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByIDResponse>* PrepareAsyncGetContextTypesByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesResponse>* AsyncGetContextTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesResponse>* PrepareAsyncGetContextTypesRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsResponse>* AsyncGetArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsResponse>* PrepareAsyncGetArtifactsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsResponse>* AsyncGetExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsResponse>* PrepareAsyncGetExecutionsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsResponse>* AsyncGetContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsResponse>* PrepareAsyncGetContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByIDResponse>* AsyncGetArtifactsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByIDResponse>* PrepareAsyncGetArtifactsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByIDResponse>* AsyncGetExecutionsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByIDResponse>* PrepareAsyncGetExecutionsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByIDResponse>* AsyncGetContextsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByIDResponse>* PrepareAsyncGetContextsByIDRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByTypeResponse>* AsyncGetArtifactsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByTypeResponse>* PrepareAsyncGetArtifactsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByTypeResponse>* AsyncGetExecutionsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByTypeResponse>* PrepareAsyncGetExecutionsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByTypeResponse>* AsyncGetContextsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByTypeResponse>* PrepareAsyncGetContextsByTypeRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactByTypeAndNameResponse>* AsyncGetArtifactByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactByTypeAndNameResponse>* PrepareAsyncGetArtifactByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionByTypeAndNameResponse>* AsyncGetExecutionByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionByTypeAndNameResponse>* PrepareAsyncGetExecutionByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextByTypeAndNameResponse>* AsyncGetContextByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextByTypeAndNameResponse>* PrepareAsyncGetContextByTypeAndNameRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByURIResponse>* AsyncGetArtifactsByURIRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByURIResponse>* PrepareAsyncGetArtifactsByURIRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByURIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByExecutionIDsResponse>* AsyncGetEventsByExecutionIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByExecutionIDsResponse>* PrepareAsyncGetEventsByExecutionIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByArtifactIDsResponse>* AsyncGetEventsByArtifactIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetEventsByArtifactIDsResponse>* PrepareAsyncGetEventsByArtifactIDsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByExternalIdsResponse>* AsyncGetArtifactsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByExternalIdsResponse>* PrepareAsyncGetArtifactsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByExternalIdsResponse>* AsyncGetExecutionsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByExternalIdsResponse>* PrepareAsyncGetExecutionsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExternalIdsResponse>* AsyncGetContextsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExternalIdsResponse>* PrepareAsyncGetContextsByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>* AsyncGetArtifactTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>* PrepareAsyncGetArtifactTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>* AsyncGetExecutionTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>* PrepareAsyncGetExecutionTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByExternalIdsResponse>* AsyncGetContextTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextTypesByExternalIdsResponse>* PrepareAsyncGetContextTypesByExternalIdsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByArtifactResponse>* AsyncGetContextsByArtifactRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByArtifactResponse>* PrepareAsyncGetContextsByArtifactRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByArtifactRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExecutionResponse>* AsyncGetContextsByExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetContextsByExecutionResponse>* PrepareAsyncGetContextsByExecutionRaw(::grpc::ClientContext* context, const ::ml_metadata::GetContextsByExecutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextResponse>* AsyncGetParentContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextResponse>* PrepareAsyncGetParentContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextResponse>* AsyncGetChildrenContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextResponse>* PrepareAsyncGetChildrenContextsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextsResponse>* AsyncGetParentContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetParentContextsByContextsResponse>* PrepareAsyncGetParentContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetParentContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextsResponse>* AsyncGetChildrenContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetChildrenContextsByContextsResponse>* PrepareAsyncGetChildrenContextsByContextsRaw(::grpc::ClientContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByContextResponse>* AsyncGetArtifactsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetArtifactsByContextResponse>* PrepareAsyncGetArtifactsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetArtifactsByContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByContextResponse>* AsyncGetExecutionsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetExecutionsByContextResponse>* PrepareAsyncGetExecutionsByContextRaw(::grpc::ClientContext* context, const ::ml_metadata::GetExecutionsByContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageGraphResponse>* AsyncGetLineageGraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageGraphResponse>* PrepareAsyncGetLineageGraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageSubgraphResponse>* AsyncGetLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ml_metadata::GetLineageSubgraphResponse>* PrepareAsyncGetLineageSubgraphRaw(::grpc::ClientContext* context, const ::ml_metadata::GetLineageSubgraphRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PutArtifactType_;
    const ::grpc::internal::RpcMethod rpcmethod_PutExecutionType_;
    const ::grpc::internal::RpcMethod rpcmethod_PutContextType_;
    const ::grpc::internal::RpcMethod rpcmethod_PutTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_PutArtifacts_;
    const ::grpc::internal::RpcMethod rpcmethod_PutExecutions_;
    const ::grpc::internal::RpcMethod rpcmethod_PutEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_PutExecution_;
    const ::grpc::internal::RpcMethod rpcmethod_PutLineageSubgraph_;
    const ::grpc::internal::RpcMethod rpcmethod_PutContexts_;
    const ::grpc::internal::RpcMethod rpcmethod_PutAttributionsAndAssociations_;
    const ::grpc::internal::RpcMethod rpcmethod_PutParentContexts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactType_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactTypesByID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutionType_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutionTypesByID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutionTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextType_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextTypesByID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifacts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContexts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactsByID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutionsByID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextsByID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactsByType_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutionsByType_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextsByType_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactByTypeAndName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutionByTypeAndName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextByTypeAndName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactsByURI_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEventsByExecutionIDs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEventsByArtifactIDs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactsByExternalIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutionsByExternalIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextsByExternalIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactTypesByExternalIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutionTypesByExternalIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextTypesByExternalIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextsByArtifact_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContextsByExecution_;
    const ::grpc::internal::RpcMethod rpcmethod_GetParentContextsByContext_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChildrenContextsByContext_;
    const ::grpc::internal::RpcMethod rpcmethod_GetParentContextsByContexts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChildrenContextsByContexts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactsByContext_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExecutionsByContext_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLineageGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLineageSubgraph_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Inserts or updates an ArtifactType.
    //
    // A type has a set of strong typed properties describing the schema of any
    // stored instance associated with that type. A type is identified by a name
    // and an optional version.
    //
    // Type Creation:
    // If no type exists in the database with the given identifier
    // (name, version), it creates a new type and returns the type_id.
    //
    // Type Evolution:
    // If the request type with the same (name, version) already exists
    // (let's call it stored_type), the method enforces the stored_type can be
    // updated only when the request type is backward compatible for the already
    // stored instances.
    //
    // Backwards compatibility is violated iff:
    //
    //   a) there is a property where the request type and stored_type have
    //      different value type (e.g., int vs. string)
    //   b) `can_add_fields = false` and the request type has a new property that
    //      is not stored.
    //   c) `can_omit_fields = false` and stored_type has an existing property
    //      that is not provided in the request type.
    //
    // If non-backward type change is required in the application, e.g.,
    // deprecate properties, re-purpose property name, change value types,
    // a new type can be created with a different (name, version) identifier.
    // Note the type version is optional, and a version value with empty string
    // is treated as unset.
    //
    // Args:
    //   artifact_type: the type to be inserted or updated.
    //   can_add_fields:
    //     when set to true, new properties can be added;
    //     when set to false, returns ALREADY_EXISTS if the request type has
    //     properties that are not in stored_type.
    //   can_omit_fields:
    //     when set to true, stored properties can be omitted in the request type;
    //     when set to false, returns ALREADY_EXISTS if the stored_type has
    //     properties not in the request type.
    //
    // Returns:
    //   The type_id of the stored type.
    //
    // Raises:
    //   ALREADY_EXISTS error in the case listed above.
    //   INVALID_ARGUMENT error, if the given type has no name, or any
    //     property value type is unknown.
    virtual ::grpc::Status PutArtifactType(::grpc::ServerContext* context, const ::ml_metadata::PutArtifactTypeRequest* request, ::ml_metadata::PutArtifactTypeResponse* response);
    // Inserts or updates an ExecutionType. Please refer to PutArtifactType for
    // type upsert API description.
    virtual ::grpc::Status PutExecutionType(::grpc::ServerContext* context, const ::ml_metadata::PutExecutionTypeRequest* request, ::ml_metadata::PutExecutionTypeResponse* response);
    // Inserts or updates an ContextType. Please refer to PutArtifactType for
    // type upsert API description.
    virtual ::grpc::Status PutContextType(::grpc::ServerContext* context, const ::ml_metadata::PutContextTypeRequest* request, ::ml_metadata::PutContextTypeResponse* response);
    // Bulk inserts types atomically.
    virtual ::grpc::Status PutTypes(::grpc::ServerContext* context, const ::ml_metadata::PutTypesRequest* request, ::ml_metadata::PutTypesResponse* response);
    // Inserts or updates artifacts in the database.
    //
    // If an artifact_id is specified for an artifact, it is an update.
    // If an artifact_id is unspecified, it will insert a new artifact.
    // For new artifacts, type must be specified.
    // For old artifacts, type must be unchanged or unspecified.
    //
    // It is not guaranteed that the created or updated artifacts will share the
    // same `create_time_since_epoch` or `last_update_time_since_epoch`
    // timestamps.
    //
    // Args:
    //   artifacts: A list of artifacts to insert or update.
    //
    // Returns:
    //   A list of artifact ids index-aligned with the input.
    virtual ::grpc::Status PutArtifacts(::grpc::ServerContext* context, const ::ml_metadata::PutArtifactsRequest* request, ::ml_metadata::PutArtifactsResponse* response);
    // Inserts or updates executions in the database.
    //
    // If an execution_id is specified for an execution, it is an update.
    // If an execution_id is unspecified, it will insert a new execution.
    // For new executions, type must be specified.
    // For old executions, type must be unchanged or unspecified.
    //
    // It is not guaranteed that the created or updated executions will share the
    // same `create_time_since_epoch` or `last_update_time_since_epoch`
    // timestamps.
    //
    // Args:
    //   executions: A list of executions to insert or update.
    //
    // Returns:
    //   A list of execution ids index-aligned with the input.
    //
    virtual ::grpc::Status PutExecutions(::grpc::ServerContext* context, const ::ml_metadata::PutExecutionsRequest* request, ::ml_metadata::PutExecutionsResponse* response);
    // Inserts events in the database.
    //
    // The execution_id and artifact_id must already exist.
    // Once created, events cannot be modified.
    // AlreadyExists error will be raised if duplicated events are found.
    //
    // It is not guaranteed that the created or updated events will share the
    // same `milliseconds_since_epoch` timestamps.
    //
    // Args:
    //   events: A list of events to insert or update.
    virtual ::grpc::Status PutEvents(::grpc::ServerContext* context, const ::ml_metadata::PutEventsRequest* request, ::ml_metadata::PutEventsResponse* response);
    // Inserts or updates an Execution and its input and output artifacts and
    // related contexts atomically. The `artifact_event_pairs` include the state
    // changes of the Artifacts used or generated by the Execution, as well as the
    // input/output Event. The `contexts` describe the associations of the
    // execution and the attributions of the artifacts.
    //
    // If an execution_id is specified, it is an update on the corresponding
    // execution, otherwise it does an insertion.
    // For insertion, type must be specified. Same rule applies to artifacts
    // and contexts in the request. Corresponding errors may raised. For example:
    // AlreadyExists error will be raised if duplicated executions, artifacts
    // or events are found.
    //
    // It is not guaranteed that the created or updated executions, artifacts,
    // contexts and events will share the same `create_time_since_epoch`,
    // `last_update_time_since_epoch`, or `milliseconds_since_epoch` timestamps.
    //
    // Args:
    //   execution: An execution to insert or update.
    //   artifact_event_pairs: Artifacts to insert or update and events to insert.
    //   contexts: The contexts that the execution and the artifacts belong to.
    //
    // Returns:
    //   An execution id and a list of artifacts and contexts ids index-aligned
    //   with the input.
    virtual ::grpc::Status PutExecution(::grpc::ServerContext* context, const ::ml_metadata::PutExecutionRequest* request, ::ml_metadata::PutExecutionResponse* response);
    // Inserts or updates a lineage subgraph (i.e. a collection of event edges
    // and its executions, artifacts, and related contexts) atomically. The
    // `event_edges` include an Event and the indices of the corresponding
    // execution and artifact from the input list of executions and artifacts. The
    // `contexts` describe the associations of the Execution and the attributions
    // of the Artifact.
    //
    // If an execution_id is specified, it is an update on the corresponding
    // Execution, otherwise it does an insertion. For insertion, type must be
    // specified. These rules apply to Artifacts and Contexts as well.
    // Corresponding errors may be raised. For example: AlreadyExists error will
    // be raised if duplicated executions, artifacts, or events are found.
    //
    // It is not guaranteed that the created or updated executions, artifacts,
    // contexts and events will share the same `create_time_since_epoch`,
    // `last_update_time_since_epoch`, or `milliseconds_since_epoch` timestamps.
    //
    // Args:
    //   executions: A list of executions to insert or update.
    //   artifacts: A list of artifacts to insert or update.
    //   contexts: A list of contexts to insert and/or create associations and
    //       attributions with.
    //   event_edges: A list of events to insert with the indices of the
    //       corresponding execution and artifact from the input lists of
    //       executions and artifacts.
    //
    // Returns:
    //   Lists of execution, artifact, and context ids index-aligned with the
    //   inputs.
    virtual ::grpc::Status PutLineageSubgraph(::grpc::ServerContext* context, const ::ml_metadata::PutLineageSubgraphRequest* request, ::ml_metadata::PutLineageSubgraphResponse* response);
    // Inserts or updates contexts in database and returns a list of context ids.
    //
    // If an context_id is specified for a context, it is an update.
    // If an context_id is unspecified, it will insert a new context.
    // For new contexts, type must be specified.
    // For old contexts, type must be unchanged or unspecified.
    //
    // It is not guaranteed that the created or updated contexts will share the
    // same `create_time_since_epoch` or `last_update_time_since_epoch`
    // timestamps.
    //
    // Args:
    //   contexts: A list of contexts to insert or update.
    //
    // Returns:
    //   A list of context ids index-aligned with the input.
    virtual ::grpc::Status PutContexts(::grpc::ServerContext* context, const ::ml_metadata::PutContextsRequest* request, ::ml_metadata::PutContextsResponse* response);
    // Inserts attribution and association relationships in the database.
    // The context_id, artifact_id, and execution_id must already exist.
    // If the relationship exists, this call does nothing. Once added, the
    // relationships cannot be modified.
    //
    // Args:
    //   attributions: A list of attributions to insert.
    //   associations: A list of associations to insert.
    virtual ::grpc::Status PutAttributionsAndAssociations(::grpc::ServerContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response);
    // Inserts parental context relationships in the database.
    // The ParentContext relationship has direction. The call fails if cycles are
    // detected.
    //
    // Args:
    //   parent_contexts: A list of parent contexts to insert.
    virtual ::grpc::Status PutParentContexts(::grpc::ServerContext* context, const ::ml_metadata::PutParentContextsRequest* request, ::ml_metadata::PutParentContextsResponse* response);
    // Gets an artifact type. Returns a NOT_FOUND error if the type does not
    // exist.
    virtual ::grpc::Status GetArtifactType(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactTypeRequest* request, ::ml_metadata::GetArtifactTypeResponse* response);
    // Gets a list of artifact types by ID.
    // If no artifact types with an ID exists, the artifact type is skipped.
    virtual ::grpc::Status GetArtifactTypesByID(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest* request, ::ml_metadata::GetArtifactTypesByIDResponse* response);
    // Gets a list of all artifact types.
    virtual ::grpc::Status GetArtifactTypes(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactTypesRequest* request, ::ml_metadata::GetArtifactTypesResponse* response);
    // Gets an execution type, or None if it does not exist.
    virtual ::grpc::Status GetExecutionType(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionTypeRequest* request, ::ml_metadata::GetExecutionTypeResponse* response);
    // Gets a list of execution types by ID.
    // If no execution types with an ID exists, the execution type is skipped.
    virtual ::grpc::Status GetExecutionTypesByID(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest* request, ::ml_metadata::GetExecutionTypesByIDResponse* response);
    // Gets a list of all execution types.
    virtual ::grpc::Status GetExecutionTypes(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionTypesRequest* request, ::ml_metadata::GetExecutionTypesResponse* response);
    // Gets a context type. Returns a NOT_FOUND error if the type does not exist.
    virtual ::grpc::Status GetContextType(::grpc::ServerContext* context, const ::ml_metadata::GetContextTypeRequest* request, ::ml_metadata::GetContextTypeResponse* response);
    // Gets a list of context types by ID.
    // If no context types with an ID exists, the context type is skipped.
    virtual ::grpc::Status GetContextTypesByID(::grpc::ServerContext* context, const ::ml_metadata::GetContextTypesByIDRequest* request, ::ml_metadata::GetContextTypesByIDResponse* response);
    // Gets a list of all context types.
    virtual ::grpc::Status GetContextTypes(::grpc::ServerContext* context, const ::ml_metadata::GetContextTypesRequest* request, ::ml_metadata::GetContextTypesResponse* response);
    // Gets all the artifacts.
    virtual ::grpc::Status GetArtifacts(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsRequest* request, ::ml_metadata::GetArtifactsResponse* response);
    // Gets all the executions.
    virtual ::grpc::Status GetExecutions(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsRequest* request, ::ml_metadata::GetExecutionsResponse* response);
    // Gets all the contexts.
    virtual ::grpc::Status GetContexts(::grpc::ServerContext* context, const ::ml_metadata::GetContextsRequest* request, ::ml_metadata::GetContextsResponse* response);
    // Gets all artifacts with matching ids.
    //
    // The result is not index-aligned: if an id is not found, it is not returned.
    //
    // Args:
    //   artifact_ids: A list of artifact ids to retrieve.
    //
    // Returns:
    //   Artifacts with matching ids.
    virtual ::grpc::Status GetArtifactsByID(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByIDRequest* request, ::ml_metadata::GetArtifactsByIDResponse* response);
    // Gets all executions with matching ids.
    //
    // The result is not index-aligned: if an id is not found, it is not returned.
    //
    // Args:
    //   execution_ids: A list of execution ids to retrieve.
    virtual ::grpc::Status GetExecutionsByID(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsByIDRequest* request, ::ml_metadata::GetExecutionsByIDResponse* response);
    // Gets all contexts with matching ids.
    //
    // The result is not index-aligned: if an id is not found, it is not returned.
    //
    // Args:
    //   context_ids: A list of context ids to retrieve.
    virtual ::grpc::Status GetContextsByID(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByIDRequest* request, ::ml_metadata::GetContextsByIDResponse* response);
    // Gets all the artifacts of a given type.
    virtual ::grpc::Status GetArtifactsByType(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByTypeRequest* request, ::ml_metadata::GetArtifactsByTypeResponse* response);
    // Gets all the executions of a given type.
    virtual ::grpc::Status GetExecutionsByType(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsByTypeRequest* request, ::ml_metadata::GetExecutionsByTypeResponse* response);
    // Gets all the contexts of a given type.
    virtual ::grpc::Status GetContextsByType(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByTypeRequest* request, ::ml_metadata::GetContextsByTypeResponse* response);
    // Gets the artifact of the given type and artifact name.
    virtual ::grpc::Status GetArtifactByTypeAndName(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response);
    // Gets the execution of the given type and execution name.
    virtual ::grpc::Status GetExecutionByTypeAndName(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response);
    // Gets the context of the given type and context name.
    virtual ::grpc::Status GetContextByTypeAndName(::grpc::ServerContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest* request, ::ml_metadata::GetContextByTypeAndNameResponse* response);
    // Gets all the artifacts with matching uris.
    virtual ::grpc::Status GetArtifactsByURI(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByURIRequest* request, ::ml_metadata::GetArtifactsByURIResponse* response);
    // Gets all events with matching execution ids.
    virtual ::grpc::Status GetEventsByExecutionIDs(::grpc::ServerContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::ml_metadata::GetEventsByExecutionIDsResponse* response);
    // Gets all events with matching artifact ids.
    virtual ::grpc::Status GetEventsByArtifactIDs(::grpc::ServerContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::ml_metadata::GetEventsByArtifactIDsResponse* response);
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetArtifactsByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response);
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetExecutionsByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response);
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetContextsByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest* request, ::ml_metadata::GetContextsByExternalIdsResponse* response);
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetArtifactTypesByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response);
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetExecutionTypesByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response);
    // Gets all the artifacts with matching external ids.
    virtual ::grpc::Status GetContextTypesByExternalIds(::grpc::ServerContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response);
    // Gets all context that an artifact is attributed to.
    virtual ::grpc::Status GetContextsByArtifact(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByArtifactRequest* request, ::ml_metadata::GetContextsByArtifactResponse* response);
    // Gets all context that an execution is associated with.
    virtual ::grpc::Status GetContextsByExecution(::grpc::ServerContext* context, const ::ml_metadata::GetContextsByExecutionRequest* request, ::ml_metadata::GetContextsByExecutionResponse* response);
    // Gets all parent contexts that a context is related.
    virtual ::grpc::Status GetParentContextsByContext(::grpc::ServerContext* context, const ::ml_metadata::GetParentContextsByContextRequest* request, ::ml_metadata::GetParentContextsByContextResponse* response);
    // Gets all children contexts that a context is related.
    virtual ::grpc::Status GetChildrenContextsByContext(::grpc::ServerContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest* request, ::ml_metadata::GetChildrenContextsByContextResponse* response);
    // Batch getting all the parent contexts that a list of contexts are related.
    virtual ::grpc::Status GetParentContextsByContexts(::grpc::ServerContext* context, const ::ml_metadata::GetParentContextsByContextsRequest* request, ::ml_metadata::GetParentContextsByContextsResponse* response);
    // Batch getting all the children contexts that a list of contexts are
    // related.
    virtual ::grpc::Status GetChildrenContextsByContexts(::grpc::ServerContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::ml_metadata::GetChildrenContextsByContextsResponse* response);
    // Gets all direct artifacts that a context attributes to.
    virtual ::grpc::Status GetArtifactsByContext(::grpc::ServerContext* context, const ::ml_metadata::GetArtifactsByContextRequest* request, ::ml_metadata::GetArtifactsByContextResponse* response);
    // Gets all direct executions that a context associates with.
    virtual ::grpc::Status GetExecutionsByContext(::grpc::ServerContext* context, const ::ml_metadata::GetExecutionsByContextRequest* request, ::ml_metadata::GetExecutionsByContextResponse* response);
    // Deprecated: GetLineageGraph API is deprecated, please refer to
    // GetLineageSubgraph API as the alternative.
    //
    // The transaction performs a constrained transitive closure and returns a
    // lineage subgraph satisfying the conditions and constraints specified in
    // the GetLineageGraphRequest.
    virtual ::grpc::Status GetLineageGraph(::grpc::ServerContext* context, const ::ml_metadata::GetLineageGraphRequest* request, ::ml_metadata::GetLineageGraphResponse* response);
    // Gets a lineage subgraph by performing graph traversal from a list of
    // interested nodes.
    // A lineage subgraph without node details (e.g., external_id, properties)
    // will be returned.
    virtual ::grpc::Status GetLineageSubgraph(::grpc::ServerContext* context, const ::ml_metadata::GetLineageSubgraphRequest* request, ::ml_metadata::GetLineageSubgraphResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PutArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutArtifactType() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PutArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactTypeRequest* /*request*/, ::ml_metadata::PutArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutArtifactType(::grpc::ServerContext* context, ::ml_metadata::PutArtifactTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutArtifactTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutExecutionType() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PutExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionTypeRequest* /*request*/, ::ml_metadata::PutExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutExecutionType(::grpc::ServerContext* context, ::ml_metadata::PutExecutionTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutExecutionTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutContextType() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PutContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextTypeRequest* /*request*/, ::ml_metadata::PutContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutContextType(::grpc::ServerContext* context, ::ml_metadata::PutContextTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutContextTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutTypes() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PutTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutTypesRequest* /*request*/, ::ml_metadata::PutTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutTypes(::grpc::ServerContext* context, ::ml_metadata::PutTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutArtifacts() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PutArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactsRequest* /*request*/, ::ml_metadata::PutArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutArtifacts(::grpc::ServerContext* context, ::ml_metadata::PutArtifactsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutArtifactsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutExecutions() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PutExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionsRequest* /*request*/, ::ml_metadata::PutExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutExecutions(::grpc::ServerContext* context, ::ml_metadata::PutExecutionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutExecutionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutEvents() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PutEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutEvents(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutEventsRequest* /*request*/, ::ml_metadata::PutEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutEvents(::grpc::ServerContext* context, ::ml_metadata::PutEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutExecution() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_PutExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionRequest* /*request*/, ::ml_metadata::PutExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutExecution(::grpc::ServerContext* context, ::ml_metadata::PutExecutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutExecutionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutLineageSubgraph() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PutLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutLineageSubgraphRequest* /*request*/, ::ml_metadata::PutLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutLineageSubgraph(::grpc::ServerContext* context, ::ml_metadata::PutLineageSubgraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutLineageSubgraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutContexts() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_PutContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextsRequest* /*request*/, ::ml_metadata::PutContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutContexts(::grpc::ServerContext* context, ::ml_metadata::PutContextsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutContextsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutAttributionsAndAssociations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutAttributionsAndAssociations() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_PutAttributionsAndAssociations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutAttributionsAndAssociations(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutAttributionsAndAssociationsRequest* /*request*/, ::ml_metadata::PutAttributionsAndAssociationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutAttributionsAndAssociations(::grpc::ServerContext* context, ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutAttributionsAndAssociationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutParentContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutParentContexts() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_PutParentContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutParentContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutParentContextsRequest* /*request*/, ::ml_metadata::PutParentContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutParentContexts(::grpc::ServerContext* context, ::ml_metadata::PutParentContextsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::PutParentContextsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactType() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypeRequest* /*request*/, ::ml_metadata::GetArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactType(::grpc::ServerContext* context, ::ml_metadata::GetArtifactTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactTypesByID() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetArtifactTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByIDRequest* /*request*/, ::ml_metadata::GetArtifactTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactTypesByID(::grpc::ServerContext* context, ::ml_metadata::GetArtifactTypesByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactTypesByIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactTypes() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetArtifactTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesRequest* /*request*/, ::ml_metadata::GetArtifactTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactTypes(::grpc::ServerContext* context, ::ml_metadata::GetArtifactTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutionType() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypeRequest* /*request*/, ::ml_metadata::GetExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionType(::grpc::ServerContext* context, ::ml_metadata::GetExecutionTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutionTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutionTypesByID() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetExecutionTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByIDRequest* /*request*/, ::ml_metadata::GetExecutionTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionTypesByID(::grpc::ServerContext* context, ::ml_metadata::GetExecutionTypesByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionTypesByIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutionTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutionTypes() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetExecutionTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesRequest* /*request*/, ::ml_metadata::GetExecutionTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionTypes(::grpc::ServerContext* context, ::ml_metadata::GetExecutionTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextType() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypeRequest* /*request*/, ::ml_metadata::GetContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextType(::grpc::ServerContext* context, ::ml_metadata::GetContextTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextTypesByID() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetContextTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByIDRequest* /*request*/, ::ml_metadata::GetContextTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextTypesByID(::grpc::ServerContext* context, ::ml_metadata::GetContextTypesByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextTypesByIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextTypes() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetContextTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesRequest* /*request*/, ::ml_metadata::GetContextTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextTypes(::grpc::ServerContext* context, ::ml_metadata::GetContextTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifacts() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_GetArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsRequest* /*request*/, ::ml_metadata::GetArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifacts(::grpc::ServerContext* context, ::ml_metadata::GetArtifactsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutions() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsRequest* /*request*/, ::ml_metadata::GetExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutions(::grpc::ServerContext* context, ::ml_metadata::GetExecutionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContexts() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_GetContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsRequest* /*request*/, ::ml_metadata::GetContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContexts(::grpc::ServerContext* context, ::ml_metadata::GetContextsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactsByID() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_GetArtifactsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByIDRequest* /*request*/, ::ml_metadata::GetArtifactsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByID(::grpc::ServerContext* context, ::ml_metadata::GetArtifactsByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactsByIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutionsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutionsByID() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_GetExecutionsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByIDRequest* /*request*/, ::ml_metadata::GetExecutionsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionsByID(::grpc::ServerContext* context, ::ml_metadata::GetExecutionsByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionsByIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextsByID() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetContextsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByIDRequest* /*request*/, ::ml_metadata::GetContextsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByID(::grpc::ServerContext* context, ::ml_metadata::GetContextsByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextsByIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactsByType() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_GetArtifactsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByTypeRequest* /*request*/, ::ml_metadata::GetArtifactsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByType(::grpc::ServerContext* context, ::ml_metadata::GetArtifactsByTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactsByTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutionsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutionsByType() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetExecutionsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByTypeRequest* /*request*/, ::ml_metadata::GetExecutionsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionsByType(::grpc::ServerContext* context, ::ml_metadata::GetExecutionsByTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionsByTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextsByType() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_GetContextsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByTypeRequest* /*request*/, ::ml_metadata::GetContextsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByType(::grpc::ServerContext* context, ::ml_metadata::GetContextsByTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextsByTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactByTypeAndName() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_GetArtifactByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactByTypeAndNameRequest* /*request*/, ::ml_metadata::GetArtifactByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactByTypeAndName(::grpc::ServerContext* context, ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactByTypeAndNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutionByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutionByTypeAndName() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_GetExecutionByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionByTypeAndNameRequest* /*request*/, ::ml_metadata::GetExecutionByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionByTypeAndName(::grpc::ServerContext* context, ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionByTypeAndNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextByTypeAndName() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_GetContextByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextByTypeAndNameRequest* /*request*/, ::ml_metadata::GetContextByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextByTypeAndName(::grpc::ServerContext* context, ::ml_metadata::GetContextByTypeAndNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextByTypeAndNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactsByURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactsByURI() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_GetArtifactsByURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByURI(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByURIRequest* /*request*/, ::ml_metadata::GetArtifactsByURIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByURI(::grpc::ServerContext* context, ::ml_metadata::GetArtifactsByURIRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactsByURIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEventsByExecutionIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEventsByExecutionIDs() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_GetEventsByExecutionIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByExecutionIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByExecutionIDsRequest* /*request*/, ::ml_metadata::GetEventsByExecutionIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventsByExecutionIDs(::grpc::ServerContext* context, ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetEventsByExecutionIDsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEventsByArtifactIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEventsByArtifactIDs() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_GetEventsByArtifactIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByArtifactIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByArtifactIDsRequest* /*request*/, ::ml_metadata::GetEventsByArtifactIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventsByArtifactIDs(::grpc::ServerContext* context, ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetEventsByArtifactIDsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactsByExternalIds() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_GetArtifactsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByExternalIds(::grpc::ServerContext* context, ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactsByExternalIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutionsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutionsByExternalIds() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_GetExecutionsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionsByExternalIds(::grpc::ServerContext* context, ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionsByExternalIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextsByExternalIds() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_GetContextsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByExternalIds(::grpc::ServerContext* context, ::ml_metadata::GetContextsByExternalIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextsByExternalIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactTypesByExternalIds() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_GetArtifactTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactTypesByExternalIds(::grpc::ServerContext* context, ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactTypesByExternalIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutionTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutionTypesByExternalIds() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_GetExecutionTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionTypesByExternalIds(::grpc::ServerContext* context, ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionTypesByExternalIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextTypesByExternalIds() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_GetContextTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextTypesByExternalIds(::grpc::ServerContext* context, ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextTypesByExternalIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextsByArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextsByArtifact() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_GetContextsByArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByArtifact(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByArtifactRequest* /*request*/, ::ml_metadata::GetContextsByArtifactResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByArtifact(::grpc::ServerContext* context, ::ml_metadata::GetContextsByArtifactRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextsByArtifactResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContextsByExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContextsByExecution() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_GetContextsByExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExecutionRequest* /*request*/, ::ml_metadata::GetContextsByExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByExecution(::grpc::ServerContext* context, ::ml_metadata::GetContextsByExecutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetContextsByExecutionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetParentContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetParentContextsByContext() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_GetParentContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextRequest* /*request*/, ::ml_metadata::GetParentContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetParentContextsByContext(::grpc::ServerContext* context, ::ml_metadata::GetParentContextsByContextRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetParentContextsByContextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChildrenContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChildrenContextsByContext() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_GetChildrenContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChildrenContextsByContext(::grpc::ServerContext* context, ::ml_metadata::GetChildrenContextsByContextRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetChildrenContextsByContextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetParentContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetParentContextsByContexts() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_GetParentContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextsRequest* /*request*/, ::ml_metadata::GetParentContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetParentContextsByContexts(::grpc::ServerContext* context, ::ml_metadata::GetParentContextsByContextsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetParentContextsByContextsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChildrenContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChildrenContextsByContexts() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_GetChildrenContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextsRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChildrenContextsByContexts(::grpc::ServerContext* context, ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetChildrenContextsByContextsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactsByContext() {
      ::grpc::Service::MarkMethodAsync(48);
    }
    ~WithAsyncMethod_GetArtifactsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByContextRequest* /*request*/, ::ml_metadata::GetArtifactsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByContext(::grpc::ServerContext* context, ::ml_metadata::GetArtifactsByContextRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetArtifactsByContextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExecutionsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExecutionsByContext() {
      ::grpc::Service::MarkMethodAsync(49);
    }
    ~WithAsyncMethod_GetExecutionsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByContextRequest* /*request*/, ::ml_metadata::GetExecutionsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionsByContext(::grpc::ServerContext* context, ::ml_metadata::GetExecutionsByContextRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetExecutionsByContextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLineageGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLineageGraph() {
      ::grpc::Service::MarkMethodAsync(50);
    }
    ~WithAsyncMethod_GetLineageGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageGraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageGraphRequest* /*request*/, ::ml_metadata::GetLineageGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLineageGraph(::grpc::ServerContext* context, ::ml_metadata::GetLineageGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetLineageGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLineageSubgraph() {
      ::grpc::Service::MarkMethodAsync(51);
    }
    ~WithAsyncMethod_GetLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageSubgraphRequest* /*request*/, ::ml_metadata::GetLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLineageSubgraph(::grpc::ServerContext* context, ::ml_metadata::GetLineageSubgraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::ml_metadata::GetLineageSubgraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PutArtifactType<WithAsyncMethod_PutExecutionType<WithAsyncMethod_PutContextType<WithAsyncMethod_PutTypes<WithAsyncMethod_PutArtifacts<WithAsyncMethod_PutExecutions<WithAsyncMethod_PutEvents<WithAsyncMethod_PutExecution<WithAsyncMethod_PutLineageSubgraph<WithAsyncMethod_PutContexts<WithAsyncMethod_PutAttributionsAndAssociations<WithAsyncMethod_PutParentContexts<WithAsyncMethod_GetArtifactType<WithAsyncMethod_GetArtifactTypesByID<WithAsyncMethod_GetArtifactTypes<WithAsyncMethod_GetExecutionType<WithAsyncMethod_GetExecutionTypesByID<WithAsyncMethod_GetExecutionTypes<WithAsyncMethod_GetContextType<WithAsyncMethod_GetContextTypesByID<WithAsyncMethod_GetContextTypes<WithAsyncMethod_GetArtifacts<WithAsyncMethod_GetExecutions<WithAsyncMethod_GetContexts<WithAsyncMethod_GetArtifactsByID<WithAsyncMethod_GetExecutionsByID<WithAsyncMethod_GetContextsByID<WithAsyncMethod_GetArtifactsByType<WithAsyncMethod_GetExecutionsByType<WithAsyncMethod_GetContextsByType<WithAsyncMethod_GetArtifactByTypeAndName<WithAsyncMethod_GetExecutionByTypeAndName<WithAsyncMethod_GetContextByTypeAndName<WithAsyncMethod_GetArtifactsByURI<WithAsyncMethod_GetEventsByExecutionIDs<WithAsyncMethod_GetEventsByArtifactIDs<WithAsyncMethod_GetArtifactsByExternalIds<WithAsyncMethod_GetExecutionsByExternalIds<WithAsyncMethod_GetContextsByExternalIds<WithAsyncMethod_GetArtifactTypesByExternalIds<WithAsyncMethod_GetExecutionTypesByExternalIds<WithAsyncMethod_GetContextTypesByExternalIds<WithAsyncMethod_GetContextsByArtifact<WithAsyncMethod_GetContextsByExecution<WithAsyncMethod_GetParentContextsByContext<WithAsyncMethod_GetChildrenContextsByContext<WithAsyncMethod_GetParentContextsByContexts<WithAsyncMethod_GetChildrenContextsByContexts<WithAsyncMethod_GetArtifactsByContext<WithAsyncMethod_GetExecutionsByContext<WithAsyncMethod_GetLineageGraph<WithAsyncMethod_GetLineageSubgraph<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PutArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutArtifactType() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutArtifactTypeRequest, ::ml_metadata::PutArtifactTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutArtifactTypeRequest* request, ::ml_metadata::PutArtifactTypeResponse* response) { return this->PutArtifactType(context, request, response); }));}
    void SetMessageAllocatorFor_PutArtifactType(
        ::grpc::MessageAllocator< ::ml_metadata::PutArtifactTypeRequest, ::ml_metadata::PutArtifactTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutArtifactTypeRequest, ::ml_metadata::PutArtifactTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactTypeRequest* /*request*/, ::ml_metadata::PutArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutArtifactType(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutArtifactTypeRequest* /*request*/, ::ml_metadata::PutArtifactTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutExecutionType() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutExecutionTypeRequest, ::ml_metadata::PutExecutionTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutExecutionTypeRequest* request, ::ml_metadata::PutExecutionTypeResponse* response) { return this->PutExecutionType(context, request, response); }));}
    void SetMessageAllocatorFor_PutExecutionType(
        ::grpc::MessageAllocator< ::ml_metadata::PutExecutionTypeRequest, ::ml_metadata::PutExecutionTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutExecutionTypeRequest, ::ml_metadata::PutExecutionTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionTypeRequest* /*request*/, ::ml_metadata::PutExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutExecutionType(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutExecutionTypeRequest* /*request*/, ::ml_metadata::PutExecutionTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutContextType() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutContextTypeRequest, ::ml_metadata::PutContextTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutContextTypeRequest* request, ::ml_metadata::PutContextTypeResponse* response) { return this->PutContextType(context, request, response); }));}
    void SetMessageAllocatorFor_PutContextType(
        ::grpc::MessageAllocator< ::ml_metadata::PutContextTypeRequest, ::ml_metadata::PutContextTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutContextTypeRequest, ::ml_metadata::PutContextTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextTypeRequest* /*request*/, ::ml_metadata::PutContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutContextType(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutContextTypeRequest* /*request*/, ::ml_metadata::PutContextTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutTypes() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutTypesRequest, ::ml_metadata::PutTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutTypesRequest* request, ::ml_metadata::PutTypesResponse* response) { return this->PutTypes(context, request, response); }));}
    void SetMessageAllocatorFor_PutTypes(
        ::grpc::MessageAllocator< ::ml_metadata::PutTypesRequest, ::ml_metadata::PutTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutTypesRequest, ::ml_metadata::PutTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutTypesRequest* /*request*/, ::ml_metadata::PutTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutTypesRequest* /*request*/, ::ml_metadata::PutTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutArtifacts() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutArtifactsRequest, ::ml_metadata::PutArtifactsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutArtifactsRequest* request, ::ml_metadata::PutArtifactsResponse* response) { return this->PutArtifacts(context, request, response); }));}
    void SetMessageAllocatorFor_PutArtifacts(
        ::grpc::MessageAllocator< ::ml_metadata::PutArtifactsRequest, ::ml_metadata::PutArtifactsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutArtifactsRequest, ::ml_metadata::PutArtifactsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactsRequest* /*request*/, ::ml_metadata::PutArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutArtifacts(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutArtifactsRequest* /*request*/, ::ml_metadata::PutArtifactsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutExecutions() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutExecutionsRequest, ::ml_metadata::PutExecutionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutExecutionsRequest* request, ::ml_metadata::PutExecutionsResponse* response) { return this->PutExecutions(context, request, response); }));}
    void SetMessageAllocatorFor_PutExecutions(
        ::grpc::MessageAllocator< ::ml_metadata::PutExecutionsRequest, ::ml_metadata::PutExecutionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutExecutionsRequest, ::ml_metadata::PutExecutionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionsRequest* /*request*/, ::ml_metadata::PutExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutExecutions(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutExecutionsRequest* /*request*/, ::ml_metadata::PutExecutionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutEvents() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutEventsRequest, ::ml_metadata::PutEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutEventsRequest* request, ::ml_metadata::PutEventsResponse* response) { return this->PutEvents(context, request, response); }));}
    void SetMessageAllocatorFor_PutEvents(
        ::grpc::MessageAllocator< ::ml_metadata::PutEventsRequest, ::ml_metadata::PutEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutEventsRequest, ::ml_metadata::PutEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutEvents(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutEventsRequest* /*request*/, ::ml_metadata::PutEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutEventsRequest* /*request*/, ::ml_metadata::PutEventsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutExecution() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutExecutionRequest, ::ml_metadata::PutExecutionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutExecutionRequest* request, ::ml_metadata::PutExecutionResponse* response) { return this->PutExecution(context, request, response); }));}
    void SetMessageAllocatorFor_PutExecution(
        ::grpc::MessageAllocator< ::ml_metadata::PutExecutionRequest, ::ml_metadata::PutExecutionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutExecutionRequest, ::ml_metadata::PutExecutionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionRequest* /*request*/, ::ml_metadata::PutExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutExecution(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutExecutionRequest* /*request*/, ::ml_metadata::PutExecutionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutLineageSubgraph() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutLineageSubgraphRequest, ::ml_metadata::PutLineageSubgraphResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutLineageSubgraphRequest* request, ::ml_metadata::PutLineageSubgraphResponse* response) { return this->PutLineageSubgraph(context, request, response); }));}
    void SetMessageAllocatorFor_PutLineageSubgraph(
        ::grpc::MessageAllocator< ::ml_metadata::PutLineageSubgraphRequest, ::ml_metadata::PutLineageSubgraphResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutLineageSubgraphRequest, ::ml_metadata::PutLineageSubgraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutLineageSubgraphRequest* /*request*/, ::ml_metadata::PutLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutLineageSubgraph(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutLineageSubgraphRequest* /*request*/, ::ml_metadata::PutLineageSubgraphResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutContexts() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutContextsRequest, ::ml_metadata::PutContextsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutContextsRequest* request, ::ml_metadata::PutContextsResponse* response) { return this->PutContexts(context, request, response); }));}
    void SetMessageAllocatorFor_PutContexts(
        ::grpc::MessageAllocator< ::ml_metadata::PutContextsRequest, ::ml_metadata::PutContextsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutContextsRequest, ::ml_metadata::PutContextsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextsRequest* /*request*/, ::ml_metadata::PutContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutContextsRequest* /*request*/, ::ml_metadata::PutContextsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutAttributionsAndAssociations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutAttributionsAndAssociations() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutAttributionsAndAssociationsRequest, ::ml_metadata::PutAttributionsAndAssociationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutAttributionsAndAssociationsRequest* request, ::ml_metadata::PutAttributionsAndAssociationsResponse* response) { return this->PutAttributionsAndAssociations(context, request, response); }));}
    void SetMessageAllocatorFor_PutAttributionsAndAssociations(
        ::grpc::MessageAllocator< ::ml_metadata::PutAttributionsAndAssociationsRequest, ::ml_metadata::PutAttributionsAndAssociationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutAttributionsAndAssociationsRequest, ::ml_metadata::PutAttributionsAndAssociationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutAttributionsAndAssociations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutAttributionsAndAssociations(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutAttributionsAndAssociationsRequest* /*request*/, ::ml_metadata::PutAttributionsAndAssociationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutAttributionsAndAssociations(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutAttributionsAndAssociationsRequest* /*request*/, ::ml_metadata::PutAttributionsAndAssociationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutParentContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutParentContexts() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutParentContextsRequest, ::ml_metadata::PutParentContextsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::PutParentContextsRequest* request, ::ml_metadata::PutParentContextsResponse* response) { return this->PutParentContexts(context, request, response); }));}
    void SetMessageAllocatorFor_PutParentContexts(
        ::grpc::MessageAllocator< ::ml_metadata::PutParentContextsRequest, ::ml_metadata::PutParentContextsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::PutParentContextsRequest, ::ml_metadata::PutParentContextsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutParentContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutParentContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutParentContextsRequest* /*request*/, ::ml_metadata::PutParentContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutParentContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::PutParentContextsRequest* /*request*/, ::ml_metadata::PutParentContextsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactType() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactTypeRequest, ::ml_metadata::GetArtifactTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactTypeRequest* request, ::ml_metadata::GetArtifactTypeResponse* response) { return this->GetArtifactType(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactType(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactTypeRequest, ::ml_metadata::GetArtifactTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactTypeRequest, ::ml_metadata::GetArtifactTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypeRequest* /*request*/, ::ml_metadata::GetArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactType(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactTypeRequest* /*request*/, ::ml_metadata::GetArtifactTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactTypesByID() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactTypesByIDRequest, ::ml_metadata::GetArtifactTypesByIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactTypesByIDRequest* request, ::ml_metadata::GetArtifactTypesByIDResponse* response) { return this->GetArtifactTypesByID(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactTypesByID(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactTypesByIDRequest, ::ml_metadata::GetArtifactTypesByIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactTypesByIDRequest, ::ml_metadata::GetArtifactTypesByIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByIDRequest* /*request*/, ::ml_metadata::GetArtifactTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactTypesByID(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByIDRequest* /*request*/, ::ml_metadata::GetArtifactTypesByIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactTypes() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactTypesRequest, ::ml_metadata::GetArtifactTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactTypesRequest* request, ::ml_metadata::GetArtifactTypesResponse* response) { return this->GetArtifactTypes(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactTypes(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactTypesRequest, ::ml_metadata::GetArtifactTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactTypesRequest, ::ml_metadata::GetArtifactTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesRequest* /*request*/, ::ml_metadata::GetArtifactTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesRequest* /*request*/, ::ml_metadata::GetArtifactTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutionType() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionTypeRequest, ::ml_metadata::GetExecutionTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionTypeRequest* request, ::ml_metadata::GetExecutionTypeResponse* response) { return this->GetExecutionType(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutionType(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionTypeRequest, ::ml_metadata::GetExecutionTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionTypeRequest, ::ml_metadata::GetExecutionTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypeRequest* /*request*/, ::ml_metadata::GetExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionType(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionTypeRequest* /*request*/, ::ml_metadata::GetExecutionTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutionTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutionTypesByID() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionTypesByIDRequest, ::ml_metadata::GetExecutionTypesByIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionTypesByIDRequest* request, ::ml_metadata::GetExecutionTypesByIDResponse* response) { return this->GetExecutionTypesByID(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutionTypesByID(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionTypesByIDRequest, ::ml_metadata::GetExecutionTypesByIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionTypesByIDRequest, ::ml_metadata::GetExecutionTypesByIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutionTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByIDRequest* /*request*/, ::ml_metadata::GetExecutionTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionTypesByID(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByIDRequest* /*request*/, ::ml_metadata::GetExecutionTypesByIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutionTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutionTypes() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionTypesRequest, ::ml_metadata::GetExecutionTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionTypesRequest* request, ::ml_metadata::GetExecutionTypesResponse* response) { return this->GetExecutionTypes(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutionTypes(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionTypesRequest, ::ml_metadata::GetExecutionTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionTypesRequest, ::ml_metadata::GetExecutionTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutionTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesRequest* /*request*/, ::ml_metadata::GetExecutionTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesRequest* /*request*/, ::ml_metadata::GetExecutionTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextType() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextTypeRequest, ::ml_metadata::GetContextTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextTypeRequest* request, ::ml_metadata::GetContextTypeResponse* response) { return this->GetContextType(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextType(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextTypeRequest, ::ml_metadata::GetContextTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextTypeRequest, ::ml_metadata::GetContextTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypeRequest* /*request*/, ::ml_metadata::GetContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextType(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextTypeRequest* /*request*/, ::ml_metadata::GetContextTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextTypesByID() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextTypesByIDRequest, ::ml_metadata::GetContextTypesByIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextTypesByIDRequest* request, ::ml_metadata::GetContextTypesByIDResponse* response) { return this->GetContextTypesByID(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextTypesByID(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextTypesByIDRequest, ::ml_metadata::GetContextTypesByIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextTypesByIDRequest, ::ml_metadata::GetContextTypesByIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByIDRequest* /*request*/, ::ml_metadata::GetContextTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextTypesByID(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextTypesByIDRequest* /*request*/, ::ml_metadata::GetContextTypesByIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextTypes() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextTypesRequest, ::ml_metadata::GetContextTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextTypesRequest* request, ::ml_metadata::GetContextTypesResponse* response) { return this->GetContextTypes(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextTypes(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextTypesRequest, ::ml_metadata::GetContextTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextTypesRequest, ::ml_metadata::GetContextTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesRequest* /*request*/, ::ml_metadata::GetContextTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextTypesRequest* /*request*/, ::ml_metadata::GetContextTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifacts() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsRequest, ::ml_metadata::GetArtifactsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactsRequest* request, ::ml_metadata::GetArtifactsResponse* response) { return this->GetArtifacts(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifacts(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactsRequest, ::ml_metadata::GetArtifactsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsRequest, ::ml_metadata::GetArtifactsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsRequest* /*request*/, ::ml_metadata::GetArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifacts(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactsRequest* /*request*/, ::ml_metadata::GetArtifactsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutions() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsRequest, ::ml_metadata::GetExecutionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionsRequest* request, ::ml_metadata::GetExecutionsResponse* response) { return this->GetExecutions(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutions(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionsRequest, ::ml_metadata::GetExecutionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsRequest, ::ml_metadata::GetExecutionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsRequest* /*request*/, ::ml_metadata::GetExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutions(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionsRequest* /*request*/, ::ml_metadata::GetExecutionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContexts() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsRequest, ::ml_metadata::GetContextsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextsRequest* request, ::ml_metadata::GetContextsResponse* response) { return this->GetContexts(context, request, response); }));}
    void SetMessageAllocatorFor_GetContexts(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextsRequest, ::ml_metadata::GetContextsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsRequest, ::ml_metadata::GetContextsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsRequest* /*request*/, ::ml_metadata::GetContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextsRequest* /*request*/, ::ml_metadata::GetContextsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactsByID() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByIDRequest, ::ml_metadata::GetArtifactsByIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactsByIDRequest* request, ::ml_metadata::GetArtifactsByIDResponse* response) { return this->GetArtifactsByID(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactsByID(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactsByIDRequest, ::ml_metadata::GetArtifactsByIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByIDRequest, ::ml_metadata::GetArtifactsByIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByIDRequest* /*request*/, ::ml_metadata::GetArtifactsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByID(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactsByIDRequest* /*request*/, ::ml_metadata::GetArtifactsByIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutionsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutionsByID() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsByIDRequest, ::ml_metadata::GetExecutionsByIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionsByIDRequest* request, ::ml_metadata::GetExecutionsByIDResponse* response) { return this->GetExecutionsByID(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutionsByID(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionsByIDRequest, ::ml_metadata::GetExecutionsByIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsByIDRequest, ::ml_metadata::GetExecutionsByIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutionsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByIDRequest* /*request*/, ::ml_metadata::GetExecutionsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionsByID(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionsByIDRequest* /*request*/, ::ml_metadata::GetExecutionsByIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextsByID() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByIDRequest, ::ml_metadata::GetContextsByIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextsByIDRequest* request, ::ml_metadata::GetContextsByIDResponse* response) { return this->GetContextsByID(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextsByID(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextsByIDRequest, ::ml_metadata::GetContextsByIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByIDRequest, ::ml_metadata::GetContextsByIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByIDRequest* /*request*/, ::ml_metadata::GetContextsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByID(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextsByIDRequest* /*request*/, ::ml_metadata::GetContextsByIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactsByType() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByTypeRequest, ::ml_metadata::GetArtifactsByTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactsByTypeRequest* request, ::ml_metadata::GetArtifactsByTypeResponse* response) { return this->GetArtifactsByType(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactsByType(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactsByTypeRequest, ::ml_metadata::GetArtifactsByTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByTypeRequest, ::ml_metadata::GetArtifactsByTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByTypeRequest* /*request*/, ::ml_metadata::GetArtifactsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByType(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactsByTypeRequest* /*request*/, ::ml_metadata::GetArtifactsByTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutionsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutionsByType() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsByTypeRequest, ::ml_metadata::GetExecutionsByTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionsByTypeRequest* request, ::ml_metadata::GetExecutionsByTypeResponse* response) { return this->GetExecutionsByType(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutionsByType(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionsByTypeRequest, ::ml_metadata::GetExecutionsByTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsByTypeRequest, ::ml_metadata::GetExecutionsByTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutionsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByTypeRequest* /*request*/, ::ml_metadata::GetExecutionsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionsByType(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionsByTypeRequest* /*request*/, ::ml_metadata::GetExecutionsByTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextsByType() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByTypeRequest, ::ml_metadata::GetContextsByTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextsByTypeRequest* request, ::ml_metadata::GetContextsByTypeResponse* response) { return this->GetContextsByType(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextsByType(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextsByTypeRequest, ::ml_metadata::GetContextsByTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByTypeRequest, ::ml_metadata::GetContextsByTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByTypeRequest* /*request*/, ::ml_metadata::GetContextsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByType(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextsByTypeRequest* /*request*/, ::ml_metadata::GetContextsByTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactByTypeAndName() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactByTypeAndNameRequest, ::ml_metadata::GetArtifactByTypeAndNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactByTypeAndNameRequest* request, ::ml_metadata::GetArtifactByTypeAndNameResponse* response) { return this->GetArtifactByTypeAndName(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactByTypeAndName(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactByTypeAndNameRequest, ::ml_metadata::GetArtifactByTypeAndNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactByTypeAndNameRequest, ::ml_metadata::GetArtifactByTypeAndNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactByTypeAndNameRequest* /*request*/, ::ml_metadata::GetArtifactByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactByTypeAndName(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactByTypeAndNameRequest* /*request*/, ::ml_metadata::GetArtifactByTypeAndNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutionByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutionByTypeAndName() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionByTypeAndNameRequest, ::ml_metadata::GetExecutionByTypeAndNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionByTypeAndNameRequest* request, ::ml_metadata::GetExecutionByTypeAndNameResponse* response) { return this->GetExecutionByTypeAndName(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutionByTypeAndName(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionByTypeAndNameRequest, ::ml_metadata::GetExecutionByTypeAndNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionByTypeAndNameRequest, ::ml_metadata::GetExecutionByTypeAndNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutionByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionByTypeAndNameRequest* /*request*/, ::ml_metadata::GetExecutionByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionByTypeAndName(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionByTypeAndNameRequest* /*request*/, ::ml_metadata::GetExecutionByTypeAndNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextByTypeAndName() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextByTypeAndNameRequest, ::ml_metadata::GetContextByTypeAndNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextByTypeAndNameRequest* request, ::ml_metadata::GetContextByTypeAndNameResponse* response) { return this->GetContextByTypeAndName(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextByTypeAndName(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextByTypeAndNameRequest, ::ml_metadata::GetContextByTypeAndNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextByTypeAndNameRequest, ::ml_metadata::GetContextByTypeAndNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextByTypeAndNameRequest* /*request*/, ::ml_metadata::GetContextByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextByTypeAndName(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextByTypeAndNameRequest* /*request*/, ::ml_metadata::GetContextByTypeAndNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactsByURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactsByURI() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByURIRequest, ::ml_metadata::GetArtifactsByURIResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactsByURIRequest* request, ::ml_metadata::GetArtifactsByURIResponse* response) { return this->GetArtifactsByURI(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactsByURI(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactsByURIRequest, ::ml_metadata::GetArtifactsByURIResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByURIRequest, ::ml_metadata::GetArtifactsByURIResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactsByURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByURI(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByURIRequest* /*request*/, ::ml_metadata::GetArtifactsByURIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByURI(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactsByURIRequest* /*request*/, ::ml_metadata::GetArtifactsByURIResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEventsByExecutionIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEventsByExecutionIDs() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetEventsByExecutionIDsRequest, ::ml_metadata::GetEventsByExecutionIDsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetEventsByExecutionIDsRequest* request, ::ml_metadata::GetEventsByExecutionIDsResponse* response) { return this->GetEventsByExecutionIDs(context, request, response); }));}
    void SetMessageAllocatorFor_GetEventsByExecutionIDs(
        ::grpc::MessageAllocator< ::ml_metadata::GetEventsByExecutionIDsRequest, ::ml_metadata::GetEventsByExecutionIDsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetEventsByExecutionIDsRequest, ::ml_metadata::GetEventsByExecutionIDsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEventsByExecutionIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByExecutionIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByExecutionIDsRequest* /*request*/, ::ml_metadata::GetEventsByExecutionIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventsByExecutionIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetEventsByExecutionIDsRequest* /*request*/, ::ml_metadata::GetEventsByExecutionIDsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEventsByArtifactIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEventsByArtifactIDs() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetEventsByArtifactIDsRequest, ::ml_metadata::GetEventsByArtifactIDsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetEventsByArtifactIDsRequest* request, ::ml_metadata::GetEventsByArtifactIDsResponse* response) { return this->GetEventsByArtifactIDs(context, request, response); }));}
    void SetMessageAllocatorFor_GetEventsByArtifactIDs(
        ::grpc::MessageAllocator< ::ml_metadata::GetEventsByArtifactIDsRequest, ::ml_metadata::GetEventsByArtifactIDsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetEventsByArtifactIDsRequest, ::ml_metadata::GetEventsByArtifactIDsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEventsByArtifactIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByArtifactIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByArtifactIDsRequest* /*request*/, ::ml_metadata::GetEventsByArtifactIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventsByArtifactIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetEventsByArtifactIDsRequest* /*request*/, ::ml_metadata::GetEventsByArtifactIDsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactsByExternalIds() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByExternalIdsRequest, ::ml_metadata::GetArtifactsByExternalIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactsByExternalIdsRequest* request, ::ml_metadata::GetArtifactsByExternalIdsResponse* response) { return this->GetArtifactsByExternalIds(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactsByExternalIds(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactsByExternalIdsRequest, ::ml_metadata::GetArtifactsByExternalIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByExternalIdsRequest, ::ml_metadata::GetArtifactsByExternalIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactsByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactsByExternalIdsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutionsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutionsByExternalIds() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsByExternalIdsRequest, ::ml_metadata::GetExecutionsByExternalIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionsByExternalIdsRequest* request, ::ml_metadata::GetExecutionsByExternalIdsResponse* response) { return this->GetExecutionsByExternalIds(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutionsByExternalIds(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionsByExternalIdsRequest, ::ml_metadata::GetExecutionsByExternalIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsByExternalIdsRequest, ::ml_metadata::GetExecutionsByExternalIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutionsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionsByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionsByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionsByExternalIdsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextsByExternalIds() {
      ::grpc::Service::MarkMethodCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByExternalIdsRequest, ::ml_metadata::GetContextsByExternalIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextsByExternalIdsRequest* request, ::ml_metadata::GetContextsByExternalIdsResponse* response) { return this->GetContextsByExternalIds(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextsByExternalIds(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextsByExternalIdsRequest, ::ml_metadata::GetContextsByExternalIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByExternalIdsRequest, ::ml_metadata::GetContextsByExternalIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextsByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextsByExternalIdsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactTypesByExternalIds() {
      ::grpc::Service::MarkMethodCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactTypesByExternalIdsRequest, ::ml_metadata::GetArtifactTypesByExternalIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* request, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* response) { return this->GetArtifactTypesByExternalIds(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactTypesByExternalIds(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactTypesByExternalIdsRequest, ::ml_metadata::GetArtifactTypesByExternalIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactTypesByExternalIdsRequest, ::ml_metadata::GetArtifactTypesByExternalIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactTypesByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutionTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutionTypesByExternalIds() {
      ::grpc::Service::MarkMethodCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionTypesByExternalIdsRequest, ::ml_metadata::GetExecutionTypesByExternalIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* request, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* response) { return this->GetExecutionTypesByExternalIds(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutionTypesByExternalIds(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionTypesByExternalIdsRequest, ::ml_metadata::GetExecutionTypesByExternalIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionTypesByExternalIdsRequest, ::ml_metadata::GetExecutionTypesByExternalIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutionTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionTypesByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextTypesByExternalIds() {
      ::grpc::Service::MarkMethodCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextTypesByExternalIdsRequest, ::ml_metadata::GetContextTypesByExternalIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextTypesByExternalIdsRequest* request, ::ml_metadata::GetContextTypesByExternalIdsResponse* response) { return this->GetContextTypesByExternalIds(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextTypesByExternalIds(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextTypesByExternalIdsRequest, ::ml_metadata::GetContextTypesByExternalIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextTypesByExternalIdsRequest, ::ml_metadata::GetContextTypesByExternalIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextTypesByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextTypesByExternalIdsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextsByArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextsByArtifact() {
      ::grpc::Service::MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByArtifactRequest, ::ml_metadata::GetContextsByArtifactResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextsByArtifactRequest* request, ::ml_metadata::GetContextsByArtifactResponse* response) { return this->GetContextsByArtifact(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextsByArtifact(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextsByArtifactRequest, ::ml_metadata::GetContextsByArtifactResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByArtifactRequest, ::ml_metadata::GetContextsByArtifactResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextsByArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByArtifact(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByArtifactRequest* /*request*/, ::ml_metadata::GetContextsByArtifactResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByArtifact(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextsByArtifactRequest* /*request*/, ::ml_metadata::GetContextsByArtifactResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContextsByExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContextsByExecution() {
      ::grpc::Service::MarkMethodCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByExecutionRequest, ::ml_metadata::GetContextsByExecutionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetContextsByExecutionRequest* request, ::ml_metadata::GetContextsByExecutionResponse* response) { return this->GetContextsByExecution(context, request, response); }));}
    void SetMessageAllocatorFor_GetContextsByExecution(
        ::grpc::MessageAllocator< ::ml_metadata::GetContextsByExecutionRequest, ::ml_metadata::GetContextsByExecutionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetContextsByExecutionRequest, ::ml_metadata::GetContextsByExecutionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContextsByExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExecutionRequest* /*request*/, ::ml_metadata::GetContextsByExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByExecution(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetContextsByExecutionRequest* /*request*/, ::ml_metadata::GetContextsByExecutionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetParentContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetParentContextsByContext() {
      ::grpc::Service::MarkMethodCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetParentContextsByContextRequest, ::ml_metadata::GetParentContextsByContextResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetParentContextsByContextRequest* request, ::ml_metadata::GetParentContextsByContextResponse* response) { return this->GetParentContextsByContext(context, request, response); }));}
    void SetMessageAllocatorFor_GetParentContextsByContext(
        ::grpc::MessageAllocator< ::ml_metadata::GetParentContextsByContextRequest, ::ml_metadata::GetParentContextsByContextResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetParentContextsByContextRequest, ::ml_metadata::GetParentContextsByContextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetParentContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextRequest* /*request*/, ::ml_metadata::GetParentContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetParentContextsByContext(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextRequest* /*request*/, ::ml_metadata::GetParentContextsByContextResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChildrenContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChildrenContextsByContext() {
      ::grpc::Service::MarkMethodCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetChildrenContextsByContextRequest, ::ml_metadata::GetChildrenContextsByContextResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetChildrenContextsByContextRequest* request, ::ml_metadata::GetChildrenContextsByContextResponse* response) { return this->GetChildrenContextsByContext(context, request, response); }));}
    void SetMessageAllocatorFor_GetChildrenContextsByContext(
        ::grpc::MessageAllocator< ::ml_metadata::GetChildrenContextsByContextRequest, ::ml_metadata::GetChildrenContextsByContextResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetChildrenContextsByContextRequest, ::ml_metadata::GetChildrenContextsByContextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChildrenContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChildrenContextsByContext(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetParentContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetParentContextsByContexts() {
      ::grpc::Service::MarkMethodCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetParentContextsByContextsRequest, ::ml_metadata::GetParentContextsByContextsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetParentContextsByContextsRequest* request, ::ml_metadata::GetParentContextsByContextsResponse* response) { return this->GetParentContextsByContexts(context, request, response); }));}
    void SetMessageAllocatorFor_GetParentContextsByContexts(
        ::grpc::MessageAllocator< ::ml_metadata::GetParentContextsByContextsRequest, ::ml_metadata::GetParentContextsByContextsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetParentContextsByContextsRequest, ::ml_metadata::GetParentContextsByContextsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetParentContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextsRequest* /*request*/, ::ml_metadata::GetParentContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetParentContextsByContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextsRequest* /*request*/, ::ml_metadata::GetParentContextsByContextsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChildrenContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChildrenContextsByContexts() {
      ::grpc::Service::MarkMethodCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetChildrenContextsByContextsRequest, ::ml_metadata::GetChildrenContextsByContextsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetChildrenContextsByContextsRequest* request, ::ml_metadata::GetChildrenContextsByContextsResponse* response) { return this->GetChildrenContextsByContexts(context, request, response); }));}
    void SetMessageAllocatorFor_GetChildrenContextsByContexts(
        ::grpc::MessageAllocator< ::ml_metadata::GetChildrenContextsByContextsRequest, ::ml_metadata::GetChildrenContextsByContextsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetChildrenContextsByContextsRequest, ::ml_metadata::GetChildrenContextsByContextsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChildrenContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextsRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChildrenContextsByContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextsRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactsByContext() {
      ::grpc::Service::MarkMethodCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByContextRequest, ::ml_metadata::GetArtifactsByContextResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetArtifactsByContextRequest* request, ::ml_metadata::GetArtifactsByContextResponse* response) { return this->GetArtifactsByContext(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactsByContext(
        ::grpc::MessageAllocator< ::ml_metadata::GetArtifactsByContextRequest, ::ml_metadata::GetArtifactsByContextResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(48);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetArtifactsByContextRequest, ::ml_metadata::GetArtifactsByContextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByContextRequest* /*request*/, ::ml_metadata::GetArtifactsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByContext(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetArtifactsByContextRequest* /*request*/, ::ml_metadata::GetArtifactsByContextResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExecutionsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExecutionsByContext() {
      ::grpc::Service::MarkMethodCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsByContextRequest, ::ml_metadata::GetExecutionsByContextResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetExecutionsByContextRequest* request, ::ml_metadata::GetExecutionsByContextResponse* response) { return this->GetExecutionsByContext(context, request, response); }));}
    void SetMessageAllocatorFor_GetExecutionsByContext(
        ::grpc::MessageAllocator< ::ml_metadata::GetExecutionsByContextRequest, ::ml_metadata::GetExecutionsByContextResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(49);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetExecutionsByContextRequest, ::ml_metadata::GetExecutionsByContextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExecutionsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByContextRequest* /*request*/, ::ml_metadata::GetExecutionsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionsByContext(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetExecutionsByContextRequest* /*request*/, ::ml_metadata::GetExecutionsByContextResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLineageGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLineageGraph() {
      ::grpc::Service::MarkMethodCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetLineageGraphRequest, ::ml_metadata::GetLineageGraphResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetLineageGraphRequest* request, ::ml_metadata::GetLineageGraphResponse* response) { return this->GetLineageGraph(context, request, response); }));}
    void SetMessageAllocatorFor_GetLineageGraph(
        ::grpc::MessageAllocator< ::ml_metadata::GetLineageGraphRequest, ::ml_metadata::GetLineageGraphResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(50);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetLineageGraphRequest, ::ml_metadata::GetLineageGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLineageGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageGraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageGraphRequest* /*request*/, ::ml_metadata::GetLineageGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLineageGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetLineageGraphRequest* /*request*/, ::ml_metadata::GetLineageGraphResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLineageSubgraph() {
      ::grpc::Service::MarkMethodCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetLineageSubgraphRequest, ::ml_metadata::GetLineageSubgraphResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ml_metadata::GetLineageSubgraphRequest* request, ::ml_metadata::GetLineageSubgraphResponse* response) { return this->GetLineageSubgraph(context, request, response); }));}
    void SetMessageAllocatorFor_GetLineageSubgraph(
        ::grpc::MessageAllocator< ::ml_metadata::GetLineageSubgraphRequest, ::ml_metadata::GetLineageSubgraphResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(51);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ml_metadata::GetLineageSubgraphRequest, ::ml_metadata::GetLineageSubgraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageSubgraphRequest* /*request*/, ::ml_metadata::GetLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLineageSubgraph(
      ::grpc::CallbackServerContext* /*context*/, const ::ml_metadata::GetLineageSubgraphRequest* /*request*/, ::ml_metadata::GetLineageSubgraphResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PutArtifactType<WithCallbackMethod_PutExecutionType<WithCallbackMethod_PutContextType<WithCallbackMethod_PutTypes<WithCallbackMethod_PutArtifacts<WithCallbackMethod_PutExecutions<WithCallbackMethod_PutEvents<WithCallbackMethod_PutExecution<WithCallbackMethod_PutLineageSubgraph<WithCallbackMethod_PutContexts<WithCallbackMethod_PutAttributionsAndAssociations<WithCallbackMethod_PutParentContexts<WithCallbackMethod_GetArtifactType<WithCallbackMethod_GetArtifactTypesByID<WithCallbackMethod_GetArtifactTypes<WithCallbackMethod_GetExecutionType<WithCallbackMethod_GetExecutionTypesByID<WithCallbackMethod_GetExecutionTypes<WithCallbackMethod_GetContextType<WithCallbackMethod_GetContextTypesByID<WithCallbackMethod_GetContextTypes<WithCallbackMethod_GetArtifacts<WithCallbackMethod_GetExecutions<WithCallbackMethod_GetContexts<WithCallbackMethod_GetArtifactsByID<WithCallbackMethod_GetExecutionsByID<WithCallbackMethod_GetContextsByID<WithCallbackMethod_GetArtifactsByType<WithCallbackMethod_GetExecutionsByType<WithCallbackMethod_GetContextsByType<WithCallbackMethod_GetArtifactByTypeAndName<WithCallbackMethod_GetExecutionByTypeAndName<WithCallbackMethod_GetContextByTypeAndName<WithCallbackMethod_GetArtifactsByURI<WithCallbackMethod_GetEventsByExecutionIDs<WithCallbackMethod_GetEventsByArtifactIDs<WithCallbackMethod_GetArtifactsByExternalIds<WithCallbackMethod_GetExecutionsByExternalIds<WithCallbackMethod_GetContextsByExternalIds<WithCallbackMethod_GetArtifactTypesByExternalIds<WithCallbackMethod_GetExecutionTypesByExternalIds<WithCallbackMethod_GetContextTypesByExternalIds<WithCallbackMethod_GetContextsByArtifact<WithCallbackMethod_GetContextsByExecution<WithCallbackMethod_GetParentContextsByContext<WithCallbackMethod_GetChildrenContextsByContext<WithCallbackMethod_GetParentContextsByContexts<WithCallbackMethod_GetChildrenContextsByContexts<WithCallbackMethod_GetArtifactsByContext<WithCallbackMethod_GetExecutionsByContext<WithCallbackMethod_GetLineageGraph<WithCallbackMethod_GetLineageSubgraph<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PutArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutArtifactType() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PutArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactTypeRequest* /*request*/, ::ml_metadata::PutArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutExecutionType() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PutExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionTypeRequest* /*request*/, ::ml_metadata::PutExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutContextType() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PutContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextTypeRequest* /*request*/, ::ml_metadata::PutContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutTypes() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PutTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutTypesRequest* /*request*/, ::ml_metadata::PutTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutArtifacts() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PutArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactsRequest* /*request*/, ::ml_metadata::PutArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutExecutions() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PutExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionsRequest* /*request*/, ::ml_metadata::PutExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutEvents() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PutEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutEvents(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutEventsRequest* /*request*/, ::ml_metadata::PutEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutExecution() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_PutExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionRequest* /*request*/, ::ml_metadata::PutExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutLineageSubgraph() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PutLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutLineageSubgraphRequest* /*request*/, ::ml_metadata::PutLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutContexts() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_PutContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextsRequest* /*request*/, ::ml_metadata::PutContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutAttributionsAndAssociations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutAttributionsAndAssociations() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_PutAttributionsAndAssociations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutAttributionsAndAssociations(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutAttributionsAndAssociationsRequest* /*request*/, ::ml_metadata::PutAttributionsAndAssociationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutParentContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutParentContexts() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_PutParentContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutParentContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutParentContextsRequest* /*request*/, ::ml_metadata::PutParentContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactType() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypeRequest* /*request*/, ::ml_metadata::GetArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactTypesByID() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetArtifactTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByIDRequest* /*request*/, ::ml_metadata::GetArtifactTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactTypes() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetArtifactTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesRequest* /*request*/, ::ml_metadata::GetArtifactTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutionType() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypeRequest* /*request*/, ::ml_metadata::GetExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutionTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutionTypesByID() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetExecutionTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByIDRequest* /*request*/, ::ml_metadata::GetExecutionTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutionTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutionTypes() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetExecutionTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesRequest* /*request*/, ::ml_metadata::GetExecutionTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextType() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypeRequest* /*request*/, ::ml_metadata::GetContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextTypesByID() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetContextTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByIDRequest* /*request*/, ::ml_metadata::GetContextTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextTypes() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetContextTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesRequest* /*request*/, ::ml_metadata::GetContextTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifacts() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_GetArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsRequest* /*request*/, ::ml_metadata::GetArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutions() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsRequest* /*request*/, ::ml_metadata::GetExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContexts() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_GetContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsRequest* /*request*/, ::ml_metadata::GetContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactsByID() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_GetArtifactsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByIDRequest* /*request*/, ::ml_metadata::GetArtifactsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutionsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutionsByID() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_GetExecutionsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByIDRequest* /*request*/, ::ml_metadata::GetExecutionsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextsByID() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetContextsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByIDRequest* /*request*/, ::ml_metadata::GetContextsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactsByType() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_GetArtifactsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByTypeRequest* /*request*/, ::ml_metadata::GetArtifactsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutionsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutionsByType() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetExecutionsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByTypeRequest* /*request*/, ::ml_metadata::GetExecutionsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextsByType() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_GetContextsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByTypeRequest* /*request*/, ::ml_metadata::GetContextsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactByTypeAndName() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_GetArtifactByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactByTypeAndNameRequest* /*request*/, ::ml_metadata::GetArtifactByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutionByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutionByTypeAndName() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_GetExecutionByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionByTypeAndNameRequest* /*request*/, ::ml_metadata::GetExecutionByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextByTypeAndName() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_GetContextByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextByTypeAndNameRequest* /*request*/, ::ml_metadata::GetContextByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactsByURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactsByURI() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_GetArtifactsByURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByURI(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByURIRequest* /*request*/, ::ml_metadata::GetArtifactsByURIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEventsByExecutionIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEventsByExecutionIDs() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_GetEventsByExecutionIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByExecutionIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByExecutionIDsRequest* /*request*/, ::ml_metadata::GetEventsByExecutionIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEventsByArtifactIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEventsByArtifactIDs() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_GetEventsByArtifactIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByArtifactIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByArtifactIDsRequest* /*request*/, ::ml_metadata::GetEventsByArtifactIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactsByExternalIds() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_GetArtifactsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutionsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutionsByExternalIds() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_GetExecutionsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextsByExternalIds() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_GetContextsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactTypesByExternalIds() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_GetArtifactTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutionTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutionTypesByExternalIds() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_GetExecutionTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextTypesByExternalIds() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_GetContextTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextsByArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextsByArtifact() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_GetContextsByArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByArtifact(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByArtifactRequest* /*request*/, ::ml_metadata::GetContextsByArtifactResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContextsByExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContextsByExecution() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_GetContextsByExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExecutionRequest* /*request*/, ::ml_metadata::GetContextsByExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetParentContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetParentContextsByContext() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_GetParentContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextRequest* /*request*/, ::ml_metadata::GetParentContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChildrenContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChildrenContextsByContext() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_GetChildrenContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetParentContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetParentContextsByContexts() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_GetParentContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextsRequest* /*request*/, ::ml_metadata::GetParentContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChildrenContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChildrenContextsByContexts() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_GetChildrenContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextsRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactsByContext() {
      ::grpc::Service::MarkMethodGeneric(48);
    }
    ~WithGenericMethod_GetArtifactsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByContextRequest* /*request*/, ::ml_metadata::GetArtifactsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExecutionsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExecutionsByContext() {
      ::grpc::Service::MarkMethodGeneric(49);
    }
    ~WithGenericMethod_GetExecutionsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByContextRequest* /*request*/, ::ml_metadata::GetExecutionsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLineageGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLineageGraph() {
      ::grpc::Service::MarkMethodGeneric(50);
    }
    ~WithGenericMethod_GetLineageGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageGraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageGraphRequest* /*request*/, ::ml_metadata::GetLineageGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLineageSubgraph() {
      ::grpc::Service::MarkMethodGeneric(51);
    }
    ~WithGenericMethod_GetLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageSubgraphRequest* /*request*/, ::ml_metadata::GetLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutArtifactType() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PutArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactTypeRequest* /*request*/, ::ml_metadata::PutArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutArtifactType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutExecutionType() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PutExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionTypeRequest* /*request*/, ::ml_metadata::PutExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutExecutionType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutContextType() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PutContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextTypeRequest* /*request*/, ::ml_metadata::PutContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutContextType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutTypes() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PutTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutTypesRequest* /*request*/, ::ml_metadata::PutTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutArtifacts() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PutArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactsRequest* /*request*/, ::ml_metadata::PutArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutArtifacts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutExecutions() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PutExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionsRequest* /*request*/, ::ml_metadata::PutExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutExecutions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutEvents() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_PutEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutEvents(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutEventsRequest* /*request*/, ::ml_metadata::PutEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutExecution() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_PutExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionRequest* /*request*/, ::ml_metadata::PutExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutExecution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutLineageSubgraph() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PutLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutLineageSubgraphRequest* /*request*/, ::ml_metadata::PutLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutLineageSubgraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutContexts() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_PutContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextsRequest* /*request*/, ::ml_metadata::PutContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutContexts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutAttributionsAndAssociations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutAttributionsAndAssociations() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_PutAttributionsAndAssociations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutAttributionsAndAssociations(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutAttributionsAndAssociationsRequest* /*request*/, ::ml_metadata::PutAttributionsAndAssociationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutAttributionsAndAssociations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutParentContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutParentContexts() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_PutParentContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutParentContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutParentContextsRequest* /*request*/, ::ml_metadata::PutParentContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutParentContexts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactType() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypeRequest* /*request*/, ::ml_metadata::GetArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactTypesByID() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetArtifactTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByIDRequest* /*request*/, ::ml_metadata::GetArtifactTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactTypesByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactTypes() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetArtifactTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesRequest* /*request*/, ::ml_metadata::GetArtifactTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutionType() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypeRequest* /*request*/, ::ml_metadata::GetExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutionTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutionTypesByID() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetExecutionTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByIDRequest* /*request*/, ::ml_metadata::GetExecutionTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionTypesByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutionTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutionTypes() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetExecutionTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesRequest* /*request*/, ::ml_metadata::GetExecutionTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextType() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypeRequest* /*request*/, ::ml_metadata::GetContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextTypesByID() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GetContextTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByIDRequest* /*request*/, ::ml_metadata::GetContextTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextTypesByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextTypes() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_GetContextTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesRequest* /*request*/, ::ml_metadata::GetContextTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifacts() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_GetArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsRequest* /*request*/, ::ml_metadata::GetArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifacts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutions() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_GetExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsRequest* /*request*/, ::ml_metadata::GetExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContexts() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_GetContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsRequest* /*request*/, ::ml_metadata::GetContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContexts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactsByID() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_GetArtifactsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByIDRequest* /*request*/, ::ml_metadata::GetArtifactsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutionsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutionsByID() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_GetExecutionsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByIDRequest* /*request*/, ::ml_metadata::GetExecutionsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionsByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextsByID() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_GetContextsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByIDRequest* /*request*/, ::ml_metadata::GetContextsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactsByType() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_GetArtifactsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByTypeRequest* /*request*/, ::ml_metadata::GetArtifactsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutionsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutionsByType() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_GetExecutionsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByTypeRequest* /*request*/, ::ml_metadata::GetExecutionsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionsByType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextsByType() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_GetContextsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByTypeRequest* /*request*/, ::ml_metadata::GetContextsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactByTypeAndName() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_GetArtifactByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactByTypeAndNameRequest* /*request*/, ::ml_metadata::GetArtifactByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactByTypeAndName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutionByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutionByTypeAndName() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_GetExecutionByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionByTypeAndNameRequest* /*request*/, ::ml_metadata::GetExecutionByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionByTypeAndName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextByTypeAndName() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_GetContextByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextByTypeAndNameRequest* /*request*/, ::ml_metadata::GetContextByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextByTypeAndName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactsByURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactsByURI() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_GetArtifactsByURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByURI(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByURIRequest* /*request*/, ::ml_metadata::GetArtifactsByURIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByURI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEventsByExecutionIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEventsByExecutionIDs() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_GetEventsByExecutionIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByExecutionIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByExecutionIDsRequest* /*request*/, ::ml_metadata::GetEventsByExecutionIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventsByExecutionIDs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEventsByArtifactIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEventsByArtifactIDs() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_GetEventsByArtifactIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByArtifactIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByArtifactIDsRequest* /*request*/, ::ml_metadata::GetEventsByArtifactIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventsByArtifactIDs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactsByExternalIds() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_GetArtifactsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByExternalIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutionsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutionsByExternalIds() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_GetExecutionsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionsByExternalIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextsByExternalIds() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_GetContextsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByExternalIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactTypesByExternalIds() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_GetArtifactTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactTypesByExternalIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutionTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutionTypesByExternalIds() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_GetExecutionTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionTypesByExternalIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextTypesByExternalIds() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_GetContextTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextTypesByExternalIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextsByArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextsByArtifact() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_GetContextsByArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByArtifact(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByArtifactRequest* /*request*/, ::ml_metadata::GetContextsByArtifactResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByArtifact(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContextsByExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContextsByExecution() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_GetContextsByExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExecutionRequest* /*request*/, ::ml_metadata::GetContextsByExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContextsByExecution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetParentContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetParentContextsByContext() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_GetParentContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextRequest* /*request*/, ::ml_metadata::GetParentContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetParentContextsByContext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChildrenContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChildrenContextsByContext() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_GetChildrenContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChildrenContextsByContext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetParentContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetParentContextsByContexts() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_GetParentContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextsRequest* /*request*/, ::ml_metadata::GetParentContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetParentContextsByContexts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChildrenContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChildrenContextsByContexts() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_GetChildrenContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextsRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChildrenContextsByContexts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactsByContext() {
      ::grpc::Service::MarkMethodRaw(48);
    }
    ~WithRawMethod_GetArtifactsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByContextRequest* /*request*/, ::ml_metadata::GetArtifactsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactsByContext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExecutionsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExecutionsByContext() {
      ::grpc::Service::MarkMethodRaw(49);
    }
    ~WithRawMethod_GetExecutionsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByContextRequest* /*request*/, ::ml_metadata::GetExecutionsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExecutionsByContext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLineageGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLineageGraph() {
      ::grpc::Service::MarkMethodRaw(50);
    }
    ~WithRawMethod_GetLineageGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageGraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageGraphRequest* /*request*/, ::ml_metadata::GetLineageGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLineageGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLineageSubgraph() {
      ::grpc::Service::MarkMethodRaw(51);
    }
    ~WithRawMethod_GetLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageSubgraphRequest* /*request*/, ::ml_metadata::GetLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLineageSubgraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutArtifactType() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutArtifactType(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactTypeRequest* /*request*/, ::ml_metadata::PutArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutArtifactType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutExecutionType() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutExecutionType(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionTypeRequest* /*request*/, ::ml_metadata::PutExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutExecutionType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutContextType() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutContextType(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextTypeRequest* /*request*/, ::ml_metadata::PutContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutContextType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutTypes() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutTypesRequest* /*request*/, ::ml_metadata::PutTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutArtifacts() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutArtifacts(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactsRequest* /*request*/, ::ml_metadata::PutArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutArtifacts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutExecutions() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutExecutions(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionsRequest* /*request*/, ::ml_metadata::PutExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutExecutions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutEvents() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutEvents(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutEventsRequest* /*request*/, ::ml_metadata::PutEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutExecution() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutExecution(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionRequest* /*request*/, ::ml_metadata::PutExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutExecution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutLineageSubgraph() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutLineageSubgraph(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutLineageSubgraphRequest* /*request*/, ::ml_metadata::PutLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutLineageSubgraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutContexts() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutContexts(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextsRequest* /*request*/, ::ml_metadata::PutContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutAttributionsAndAssociations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutAttributionsAndAssociations() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutAttributionsAndAssociations(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutAttributionsAndAssociations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutAttributionsAndAssociations(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutAttributionsAndAssociationsRequest* /*request*/, ::ml_metadata::PutAttributionsAndAssociationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutAttributionsAndAssociations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutParentContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutParentContexts() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutParentContexts(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutParentContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutParentContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutParentContextsRequest* /*request*/, ::ml_metadata::PutParentContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutParentContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactType() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactType(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypeRequest* /*request*/, ::ml_metadata::GetArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactTypesByID() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactTypesByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByIDRequest* /*request*/, ::ml_metadata::GetArtifactTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactTypesByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactTypes() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesRequest* /*request*/, ::ml_metadata::GetArtifactTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutionType() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutionType(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypeRequest* /*request*/, ::ml_metadata::GetExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutionTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutionTypesByID() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutionTypesByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutionTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByIDRequest* /*request*/, ::ml_metadata::GetExecutionTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionTypesByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutionTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutionTypes() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutionTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutionTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesRequest* /*request*/, ::ml_metadata::GetExecutionTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextType() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextType(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypeRequest* /*request*/, ::ml_metadata::GetContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextTypesByID() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextTypesByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByIDRequest* /*request*/, ::ml_metadata::GetContextTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextTypesByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextTypes() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesRequest* /*request*/, ::ml_metadata::GetContextTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifacts() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifacts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsRequest* /*request*/, ::ml_metadata::GetArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifacts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutions() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutions(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsRequest* /*request*/, ::ml_metadata::GetExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContexts() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContexts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsRequest* /*request*/, ::ml_metadata::GetContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactsByID() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactsByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByIDRequest* /*request*/, ::ml_metadata::GetArtifactsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutionsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutionsByID() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutionsByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutionsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByIDRequest* /*request*/, ::ml_metadata::GetExecutionsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionsByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextsByID() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextsByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByIDRequest* /*request*/, ::ml_metadata::GetContextsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactsByType() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactsByType(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByTypeRequest* /*request*/, ::ml_metadata::GetArtifactsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutionsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutionsByType() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutionsByType(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutionsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByTypeRequest* /*request*/, ::ml_metadata::GetExecutionsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionsByType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextsByType() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextsByType(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByTypeRequest* /*request*/, ::ml_metadata::GetContextsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactByTypeAndName() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactByTypeAndName(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactByTypeAndNameRequest* /*request*/, ::ml_metadata::GetArtifactByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactByTypeAndName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutionByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutionByTypeAndName() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutionByTypeAndName(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutionByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionByTypeAndNameRequest* /*request*/, ::ml_metadata::GetExecutionByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionByTypeAndName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextByTypeAndName() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextByTypeAndName(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextByTypeAndNameRequest* /*request*/, ::ml_metadata::GetContextByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextByTypeAndName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactsByURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactsByURI() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactsByURI(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactsByURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByURI(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByURIRequest* /*request*/, ::ml_metadata::GetArtifactsByURIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByURI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEventsByExecutionIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEventsByExecutionIDs() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEventsByExecutionIDs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEventsByExecutionIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByExecutionIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByExecutionIDsRequest* /*request*/, ::ml_metadata::GetEventsByExecutionIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventsByExecutionIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEventsByArtifactIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEventsByArtifactIDs() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEventsByArtifactIDs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEventsByArtifactIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByArtifactIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByArtifactIDsRequest* /*request*/, ::ml_metadata::GetEventsByArtifactIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventsByArtifactIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactsByExternalIds() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactsByExternalIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutionsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutionsByExternalIds() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutionsByExternalIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutionsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionsByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextsByExternalIds() {
      ::grpc::Service::MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextsByExternalIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactTypesByExternalIds() {
      ::grpc::Service::MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactTypesByExternalIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactTypesByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutionTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutionTypesByExternalIds() {
      ::grpc::Service::MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutionTypesByExternalIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutionTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionTypesByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextTypesByExternalIds() {
      ::grpc::Service::MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextTypesByExternalIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextTypesByExternalIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextsByArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextsByArtifact() {
      ::grpc::Service::MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextsByArtifact(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextsByArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByArtifact(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByArtifactRequest* /*request*/, ::ml_metadata::GetContextsByArtifactResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByArtifact(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContextsByExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContextsByExecution() {
      ::grpc::Service::MarkMethodRawCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContextsByExecution(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContextsByExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContextsByExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExecutionRequest* /*request*/, ::ml_metadata::GetContextsByExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContextsByExecution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetParentContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetParentContextsByContext() {
      ::grpc::Service::MarkMethodRawCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetParentContextsByContext(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetParentContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextRequest* /*request*/, ::ml_metadata::GetParentContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetParentContextsByContext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChildrenContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChildrenContextsByContext() {
      ::grpc::Service::MarkMethodRawCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChildrenContextsByContext(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChildrenContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChildrenContextsByContext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetParentContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetParentContextsByContexts() {
      ::grpc::Service::MarkMethodRawCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetParentContextsByContexts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetParentContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParentContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextsRequest* /*request*/, ::ml_metadata::GetParentContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetParentContextsByContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChildrenContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChildrenContextsByContexts() {
      ::grpc::Service::MarkMethodRawCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChildrenContextsByContexts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChildrenContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildrenContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextsRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChildrenContextsByContexts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactsByContext() {
      ::grpc::Service::MarkMethodRawCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactsByContext(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByContextRequest* /*request*/, ::ml_metadata::GetArtifactsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactsByContext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExecutionsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExecutionsByContext() {
      ::grpc::Service::MarkMethodRawCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExecutionsByContext(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExecutionsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExecutionsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByContextRequest* /*request*/, ::ml_metadata::GetExecutionsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExecutionsByContext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLineageGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLineageGraph() {
      ::grpc::Service::MarkMethodRawCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLineageGraph(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLineageGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageGraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageGraphRequest* /*request*/, ::ml_metadata::GetLineageGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLineageGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLineageSubgraph() {
      ::grpc::Service::MarkMethodRawCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLineageSubgraph(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageSubgraphRequest* /*request*/, ::ml_metadata::GetLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLineageSubgraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutArtifactType() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutArtifactTypeRequest, ::ml_metadata::PutArtifactTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutArtifactTypeRequest, ::ml_metadata::PutArtifactTypeResponse>* streamer) {
                       return this->StreamedPutArtifactType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactTypeRequest* /*request*/, ::ml_metadata::PutArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutArtifactType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutArtifactTypeRequest,::ml_metadata::PutArtifactTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutExecutionType() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutExecutionTypeRequest, ::ml_metadata::PutExecutionTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutExecutionTypeRequest, ::ml_metadata::PutExecutionTypeResponse>* streamer) {
                       return this->StreamedPutExecutionType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionTypeRequest* /*request*/, ::ml_metadata::PutExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutExecutionType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutExecutionTypeRequest,::ml_metadata::PutExecutionTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutContextType() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutContextTypeRequest, ::ml_metadata::PutContextTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutContextTypeRequest, ::ml_metadata::PutContextTypeResponse>* streamer) {
                       return this->StreamedPutContextType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextTypeRequest* /*request*/, ::ml_metadata::PutContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutContextType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutContextTypeRequest,::ml_metadata::PutContextTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutTypes() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutTypesRequest, ::ml_metadata::PutTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutTypesRequest, ::ml_metadata::PutTypesResponse>* streamer) {
                       return this->StreamedPutTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutTypesRequest* /*request*/, ::ml_metadata::PutTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutTypesRequest,::ml_metadata::PutTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutArtifacts() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutArtifactsRequest, ::ml_metadata::PutArtifactsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutArtifactsRequest, ::ml_metadata::PutArtifactsResponse>* streamer) {
                       return this->StreamedPutArtifacts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutArtifactsRequest* /*request*/, ::ml_metadata::PutArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutArtifacts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutArtifactsRequest,::ml_metadata::PutArtifactsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutExecutions() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutExecutionsRequest, ::ml_metadata::PutExecutionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutExecutionsRequest, ::ml_metadata::PutExecutionsResponse>* streamer) {
                       return this->StreamedPutExecutions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionsRequest* /*request*/, ::ml_metadata::PutExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutExecutions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutExecutionsRequest,::ml_metadata::PutExecutionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutEvents() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutEventsRequest, ::ml_metadata::PutEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutEventsRequest, ::ml_metadata::PutEventsResponse>* streamer) {
                       return this->StreamedPutEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutEvents(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutEventsRequest* /*request*/, ::ml_metadata::PutEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutEventsRequest,::ml_metadata::PutEventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutExecution() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutExecutionRequest, ::ml_metadata::PutExecutionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutExecutionRequest, ::ml_metadata::PutExecutionResponse>* streamer) {
                       return this->StreamedPutExecution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutExecutionRequest* /*request*/, ::ml_metadata::PutExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutExecution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutExecutionRequest,::ml_metadata::PutExecutionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutLineageSubgraph() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutLineageSubgraphRequest, ::ml_metadata::PutLineageSubgraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutLineageSubgraphRequest, ::ml_metadata::PutLineageSubgraphResponse>* streamer) {
                       return this->StreamedPutLineageSubgraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutLineageSubgraphRequest* /*request*/, ::ml_metadata::PutLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutLineageSubgraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutLineageSubgraphRequest,::ml_metadata::PutLineageSubgraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutContexts() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutContextsRequest, ::ml_metadata::PutContextsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutContextsRequest, ::ml_metadata::PutContextsResponse>* streamer) {
                       return this->StreamedPutContexts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutContextsRequest* /*request*/, ::ml_metadata::PutContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutContexts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutContextsRequest,::ml_metadata::PutContextsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutAttributionsAndAssociations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutAttributionsAndAssociations() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutAttributionsAndAssociationsRequest, ::ml_metadata::PutAttributionsAndAssociationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutAttributionsAndAssociationsRequest, ::ml_metadata::PutAttributionsAndAssociationsResponse>* streamer) {
                       return this->StreamedPutAttributionsAndAssociations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutAttributionsAndAssociations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutAttributionsAndAssociations(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutAttributionsAndAssociationsRequest* /*request*/, ::ml_metadata::PutAttributionsAndAssociationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutAttributionsAndAssociations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutAttributionsAndAssociationsRequest,::ml_metadata::PutAttributionsAndAssociationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutParentContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutParentContexts() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::PutParentContextsRequest, ::ml_metadata::PutParentContextsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::PutParentContextsRequest, ::ml_metadata::PutParentContextsResponse>* streamer) {
                       return this->StreamedPutParentContexts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutParentContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutParentContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::PutParentContextsRequest* /*request*/, ::ml_metadata::PutParentContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutParentContexts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::PutParentContextsRequest,::ml_metadata::PutParentContextsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactType() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactTypeRequest, ::ml_metadata::GetArtifactTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactTypeRequest, ::ml_metadata::GetArtifactTypeResponse>* streamer) {
                       return this->StreamedGetArtifactType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypeRequest* /*request*/, ::ml_metadata::GetArtifactTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactTypeRequest,::ml_metadata::GetArtifactTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactTypesByID() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactTypesByIDRequest, ::ml_metadata::GetArtifactTypesByIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactTypesByIDRequest, ::ml_metadata::GetArtifactTypesByIDResponse>* streamer) {
                       return this->StreamedGetArtifactTypesByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByIDRequest* /*request*/, ::ml_metadata::GetArtifactTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactTypesByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactTypesByIDRequest,::ml_metadata::GetArtifactTypesByIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactTypes() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactTypesRequest, ::ml_metadata::GetArtifactTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactTypesRequest, ::ml_metadata::GetArtifactTypesResponse>* streamer) {
                       return this->StreamedGetArtifactTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesRequest* /*request*/, ::ml_metadata::GetArtifactTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactTypesRequest,::ml_metadata::GetArtifactTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutionType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutionType() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionTypeRequest, ::ml_metadata::GetExecutionTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionTypeRequest, ::ml_metadata::GetExecutionTypeResponse>* streamer) {
                       return this->StreamedGetExecutionType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutionType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutionType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypeRequest* /*request*/, ::ml_metadata::GetExecutionTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutionType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionTypeRequest,::ml_metadata::GetExecutionTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutionTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutionTypesByID() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionTypesByIDRequest, ::ml_metadata::GetExecutionTypesByIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionTypesByIDRequest, ::ml_metadata::GetExecutionTypesByIDResponse>* streamer) {
                       return this->StreamedGetExecutionTypesByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutionTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutionTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByIDRequest* /*request*/, ::ml_metadata::GetExecutionTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutionTypesByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionTypesByIDRequest,::ml_metadata::GetExecutionTypesByIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutionTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutionTypes() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionTypesRequest, ::ml_metadata::GetExecutionTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionTypesRequest, ::ml_metadata::GetExecutionTypesResponse>* streamer) {
                       return this->StreamedGetExecutionTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutionTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutionTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesRequest* /*request*/, ::ml_metadata::GetExecutionTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutionTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionTypesRequest,::ml_metadata::GetExecutionTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextType() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextTypeRequest, ::ml_metadata::GetContextTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextTypeRequest, ::ml_metadata::GetContextTypeResponse>* streamer) {
                       return this->StreamedGetContextType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypeRequest* /*request*/, ::ml_metadata::GetContextTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextTypeRequest,::ml_metadata::GetContextTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextTypesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextTypesByID() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextTypesByIDRequest, ::ml_metadata::GetContextTypesByIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextTypesByIDRequest, ::ml_metadata::GetContextTypesByIDResponse>* streamer) {
                       return this->StreamedGetContextTypesByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextTypesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextTypesByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByIDRequest* /*request*/, ::ml_metadata::GetContextTypesByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextTypesByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextTypesByIDRequest,::ml_metadata::GetContextTypesByIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextTypes() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextTypesRequest, ::ml_metadata::GetContextTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextTypesRequest, ::ml_metadata::GetContextTypesResponse>* streamer) {
                       return this->StreamedGetContextTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextTypes(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesRequest* /*request*/, ::ml_metadata::GetContextTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextTypesRequest,::ml_metadata::GetContextTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifacts() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactsRequest, ::ml_metadata::GetArtifactsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactsRequest, ::ml_metadata::GetArtifactsResponse>* streamer) {
                       return this->StreamedGetArtifacts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifacts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsRequest* /*request*/, ::ml_metadata::GetArtifactsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifacts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactsRequest,::ml_metadata::GetArtifactsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutions() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionsRequest, ::ml_metadata::GetExecutionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionsRequest, ::ml_metadata::GetExecutionsResponse>* streamer) {
                       return this->StreamedGetExecutions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutions(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsRequest* /*request*/, ::ml_metadata::GetExecutionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionsRequest,::ml_metadata::GetExecutionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContexts() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextsRequest, ::ml_metadata::GetContextsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextsRequest, ::ml_metadata::GetContextsResponse>* streamer) {
                       return this->StreamedGetContexts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsRequest* /*request*/, ::ml_metadata::GetContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContexts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextsRequest,::ml_metadata::GetContextsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactsByID() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactsByIDRequest, ::ml_metadata::GetArtifactsByIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactsByIDRequest, ::ml_metadata::GetArtifactsByIDResponse>* streamer) {
                       return this->StreamedGetArtifactsByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByIDRequest* /*request*/, ::ml_metadata::GetArtifactsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactsByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactsByIDRequest,::ml_metadata::GetArtifactsByIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutionsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutionsByID() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionsByIDRequest, ::ml_metadata::GetExecutionsByIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionsByIDRequest, ::ml_metadata::GetExecutionsByIDResponse>* streamer) {
                       return this->StreamedGetExecutionsByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutionsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutionsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByIDRequest* /*request*/, ::ml_metadata::GetExecutionsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutionsByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionsByIDRequest,::ml_metadata::GetExecutionsByIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextsByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextsByID() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextsByIDRequest, ::ml_metadata::GetContextsByIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextsByIDRequest, ::ml_metadata::GetContextsByIDResponse>* streamer) {
                       return this->StreamedGetContextsByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextsByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextsByID(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByIDRequest* /*request*/, ::ml_metadata::GetContextsByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextsByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextsByIDRequest,::ml_metadata::GetContextsByIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactsByType() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactsByTypeRequest, ::ml_metadata::GetArtifactsByTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactsByTypeRequest, ::ml_metadata::GetArtifactsByTypeResponse>* streamer) {
                       return this->StreamedGetArtifactsByType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByTypeRequest* /*request*/, ::ml_metadata::GetArtifactsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactsByType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactsByTypeRequest,::ml_metadata::GetArtifactsByTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutionsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutionsByType() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionsByTypeRequest, ::ml_metadata::GetExecutionsByTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionsByTypeRequest, ::ml_metadata::GetExecutionsByTypeResponse>* streamer) {
                       return this->StreamedGetExecutionsByType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutionsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutionsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByTypeRequest* /*request*/, ::ml_metadata::GetExecutionsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutionsByType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionsByTypeRequest,::ml_metadata::GetExecutionsByTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextsByType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextsByType() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextsByTypeRequest, ::ml_metadata::GetContextsByTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextsByTypeRequest, ::ml_metadata::GetContextsByTypeResponse>* streamer) {
                       return this->StreamedGetContextsByType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextsByType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextsByType(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByTypeRequest* /*request*/, ::ml_metadata::GetContextsByTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextsByType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextsByTypeRequest,::ml_metadata::GetContextsByTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactByTypeAndName() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactByTypeAndNameRequest, ::ml_metadata::GetArtifactByTypeAndNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactByTypeAndNameRequest, ::ml_metadata::GetArtifactByTypeAndNameResponse>* streamer) {
                       return this->StreamedGetArtifactByTypeAndName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactByTypeAndNameRequest* /*request*/, ::ml_metadata::GetArtifactByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactByTypeAndName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactByTypeAndNameRequest,::ml_metadata::GetArtifactByTypeAndNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutionByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutionByTypeAndName() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionByTypeAndNameRequest, ::ml_metadata::GetExecutionByTypeAndNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionByTypeAndNameRequest, ::ml_metadata::GetExecutionByTypeAndNameResponse>* streamer) {
                       return this->StreamedGetExecutionByTypeAndName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutionByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutionByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionByTypeAndNameRequest* /*request*/, ::ml_metadata::GetExecutionByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutionByTypeAndName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionByTypeAndNameRequest,::ml_metadata::GetExecutionByTypeAndNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextByTypeAndName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextByTypeAndName() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextByTypeAndNameRequest, ::ml_metadata::GetContextByTypeAndNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextByTypeAndNameRequest, ::ml_metadata::GetContextByTypeAndNameResponse>* streamer) {
                       return this->StreamedGetContextByTypeAndName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextByTypeAndName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextByTypeAndName(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextByTypeAndNameRequest* /*request*/, ::ml_metadata::GetContextByTypeAndNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextByTypeAndName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextByTypeAndNameRequest,::ml_metadata::GetContextByTypeAndNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactsByURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactsByURI() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactsByURIRequest, ::ml_metadata::GetArtifactsByURIResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactsByURIRequest, ::ml_metadata::GetArtifactsByURIResponse>* streamer) {
                       return this->StreamedGetArtifactsByURI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactsByURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactsByURI(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByURIRequest* /*request*/, ::ml_metadata::GetArtifactsByURIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactsByURI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactsByURIRequest,::ml_metadata::GetArtifactsByURIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEventsByExecutionIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEventsByExecutionIDs() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetEventsByExecutionIDsRequest, ::ml_metadata::GetEventsByExecutionIDsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetEventsByExecutionIDsRequest, ::ml_metadata::GetEventsByExecutionIDsResponse>* streamer) {
                       return this->StreamedGetEventsByExecutionIDs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEventsByExecutionIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEventsByExecutionIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByExecutionIDsRequest* /*request*/, ::ml_metadata::GetEventsByExecutionIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEventsByExecutionIDs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetEventsByExecutionIDsRequest,::ml_metadata::GetEventsByExecutionIDsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEventsByArtifactIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEventsByArtifactIDs() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetEventsByArtifactIDsRequest, ::ml_metadata::GetEventsByArtifactIDsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetEventsByArtifactIDsRequest, ::ml_metadata::GetEventsByArtifactIDsResponse>* streamer) {
                       return this->StreamedGetEventsByArtifactIDs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEventsByArtifactIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEventsByArtifactIDs(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetEventsByArtifactIDsRequest* /*request*/, ::ml_metadata::GetEventsByArtifactIDsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEventsByArtifactIDs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetEventsByArtifactIDsRequest,::ml_metadata::GetEventsByArtifactIDsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactsByExternalIds() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactsByExternalIdsRequest, ::ml_metadata::GetArtifactsByExternalIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactsByExternalIdsRequest, ::ml_metadata::GetArtifactsByExternalIdsResponse>* streamer) {
                       return this->StreamedGetArtifactsByExternalIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactsByExternalIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactsByExternalIdsRequest,::ml_metadata::GetArtifactsByExternalIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutionsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutionsByExternalIds() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionsByExternalIdsRequest, ::ml_metadata::GetExecutionsByExternalIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionsByExternalIdsRequest, ::ml_metadata::GetExecutionsByExternalIdsResponse>* streamer) {
                       return this->StreamedGetExecutionsByExternalIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutionsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutionsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutionsByExternalIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionsByExternalIdsRequest,::ml_metadata::GetExecutionsByExternalIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextsByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextsByExternalIds() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextsByExternalIdsRequest, ::ml_metadata::GetContextsByExternalIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextsByExternalIdsRequest, ::ml_metadata::GetContextsByExternalIdsResponse>* streamer) {
                       return this->StreamedGetContextsByExternalIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextsByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextsByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextsByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextsByExternalIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextsByExternalIdsRequest,::ml_metadata::GetContextsByExternalIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactTypesByExternalIds() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactTypesByExternalIdsRequest, ::ml_metadata::GetArtifactTypesByExternalIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactTypesByExternalIdsRequest, ::ml_metadata::GetArtifactTypesByExternalIdsResponse>* streamer) {
                       return this->StreamedGetArtifactTypesByExternalIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetArtifactTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactTypesByExternalIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactTypesByExternalIdsRequest,::ml_metadata::GetArtifactTypesByExternalIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutionTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutionTypesByExternalIds() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionTypesByExternalIdsRequest, ::ml_metadata::GetExecutionTypesByExternalIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionTypesByExternalIdsRequest, ::ml_metadata::GetExecutionTypesByExternalIdsResponse>* streamer) {
                       return this->StreamedGetExecutionTypesByExternalIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutionTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutionTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetExecutionTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutionTypesByExternalIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionTypesByExternalIdsRequest,::ml_metadata::GetExecutionTypesByExternalIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextTypesByExternalIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextTypesByExternalIds() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextTypesByExternalIdsRequest, ::ml_metadata::GetContextTypesByExternalIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextTypesByExternalIdsRequest, ::ml_metadata::GetContextTypesByExternalIdsResponse>* streamer) {
                       return this->StreamedGetContextTypesByExternalIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextTypesByExternalIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextTypesByExternalIds(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextTypesByExternalIdsRequest* /*request*/, ::ml_metadata::GetContextTypesByExternalIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextTypesByExternalIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextTypesByExternalIdsRequest,::ml_metadata::GetContextTypesByExternalIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextsByArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextsByArtifact() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextsByArtifactRequest, ::ml_metadata::GetContextsByArtifactResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextsByArtifactRequest, ::ml_metadata::GetContextsByArtifactResponse>* streamer) {
                       return this->StreamedGetContextsByArtifact(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextsByArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextsByArtifact(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByArtifactRequest* /*request*/, ::ml_metadata::GetContextsByArtifactResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextsByArtifact(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextsByArtifactRequest,::ml_metadata::GetContextsByArtifactResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContextsByExecution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContextsByExecution() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetContextsByExecutionRequest, ::ml_metadata::GetContextsByExecutionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetContextsByExecutionRequest, ::ml_metadata::GetContextsByExecutionResponse>* streamer) {
                       return this->StreamedGetContextsByExecution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContextsByExecution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContextsByExecution(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetContextsByExecutionRequest* /*request*/, ::ml_metadata::GetContextsByExecutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContextsByExecution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetContextsByExecutionRequest,::ml_metadata::GetContextsByExecutionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetParentContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetParentContextsByContext() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetParentContextsByContextRequest, ::ml_metadata::GetParentContextsByContextResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetParentContextsByContextRequest, ::ml_metadata::GetParentContextsByContextResponse>* streamer) {
                       return this->StreamedGetParentContextsByContext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetParentContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetParentContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextRequest* /*request*/, ::ml_metadata::GetParentContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetParentContextsByContext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetParentContextsByContextRequest,::ml_metadata::GetParentContextsByContextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChildrenContextsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChildrenContextsByContext() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetChildrenContextsByContextRequest, ::ml_metadata::GetChildrenContextsByContextResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetChildrenContextsByContextRequest, ::ml_metadata::GetChildrenContextsByContextResponse>* streamer) {
                       return this->StreamedGetChildrenContextsByContext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChildrenContextsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChildrenContextsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChildrenContextsByContext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetChildrenContextsByContextRequest,::ml_metadata::GetChildrenContextsByContextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetParentContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetParentContextsByContexts() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetParentContextsByContextsRequest, ::ml_metadata::GetParentContextsByContextsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetParentContextsByContextsRequest, ::ml_metadata::GetParentContextsByContextsResponse>* streamer) {
                       return this->StreamedGetParentContextsByContexts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetParentContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetParentContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetParentContextsByContextsRequest* /*request*/, ::ml_metadata::GetParentContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetParentContextsByContexts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetParentContextsByContextsRequest,::ml_metadata::GetParentContextsByContextsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChildrenContextsByContexts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChildrenContextsByContexts() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetChildrenContextsByContextsRequest, ::ml_metadata::GetChildrenContextsByContextsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetChildrenContextsByContextsRequest, ::ml_metadata::GetChildrenContextsByContextsResponse>* streamer) {
                       return this->StreamedGetChildrenContextsByContexts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChildrenContextsByContexts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChildrenContextsByContexts(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetChildrenContextsByContextsRequest* /*request*/, ::ml_metadata::GetChildrenContextsByContextsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChildrenContextsByContexts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetChildrenContextsByContextsRequest,::ml_metadata::GetChildrenContextsByContextsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactsByContext() {
      ::grpc::Service::MarkMethodStreamed(48,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetArtifactsByContextRequest, ::ml_metadata::GetArtifactsByContextResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetArtifactsByContextRequest, ::ml_metadata::GetArtifactsByContextResponse>* streamer) {
                       return this->StreamedGetArtifactsByContext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetArtifactsByContextRequest* /*request*/, ::ml_metadata::GetArtifactsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactsByContext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetArtifactsByContextRequest,::ml_metadata::GetArtifactsByContextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExecutionsByContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExecutionsByContext() {
      ::grpc::Service::MarkMethodStreamed(49,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetExecutionsByContextRequest, ::ml_metadata::GetExecutionsByContextResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetExecutionsByContextRequest, ::ml_metadata::GetExecutionsByContextResponse>* streamer) {
                       return this->StreamedGetExecutionsByContext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExecutionsByContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExecutionsByContext(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetExecutionsByContextRequest* /*request*/, ::ml_metadata::GetExecutionsByContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExecutionsByContext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetExecutionsByContextRequest,::ml_metadata::GetExecutionsByContextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLineageGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLineageGraph() {
      ::grpc::Service::MarkMethodStreamed(50,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetLineageGraphRequest, ::ml_metadata::GetLineageGraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetLineageGraphRequest, ::ml_metadata::GetLineageGraphResponse>* streamer) {
                       return this->StreamedGetLineageGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLineageGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLineageGraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageGraphRequest* /*request*/, ::ml_metadata::GetLineageGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLineageGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetLineageGraphRequest,::ml_metadata::GetLineageGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLineageSubgraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLineageSubgraph() {
      ::grpc::Service::MarkMethodStreamed(51,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ml_metadata::GetLineageSubgraphRequest, ::ml_metadata::GetLineageSubgraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ml_metadata::GetLineageSubgraphRequest, ::ml_metadata::GetLineageSubgraphResponse>* streamer) {
                       return this->StreamedGetLineageSubgraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLineageSubgraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLineageSubgraph(::grpc::ServerContext* /*context*/, const ::ml_metadata::GetLineageSubgraphRequest* /*request*/, ::ml_metadata::GetLineageSubgraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLineageSubgraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ml_metadata::GetLineageSubgraphRequest,::ml_metadata::GetLineageSubgraphResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PutArtifactType<WithStreamedUnaryMethod_PutExecutionType<WithStreamedUnaryMethod_PutContextType<WithStreamedUnaryMethod_PutTypes<WithStreamedUnaryMethod_PutArtifacts<WithStreamedUnaryMethod_PutExecutions<WithStreamedUnaryMethod_PutEvents<WithStreamedUnaryMethod_PutExecution<WithStreamedUnaryMethod_PutLineageSubgraph<WithStreamedUnaryMethod_PutContexts<WithStreamedUnaryMethod_PutAttributionsAndAssociations<WithStreamedUnaryMethod_PutParentContexts<WithStreamedUnaryMethod_GetArtifactType<WithStreamedUnaryMethod_GetArtifactTypesByID<WithStreamedUnaryMethod_GetArtifactTypes<WithStreamedUnaryMethod_GetExecutionType<WithStreamedUnaryMethod_GetExecutionTypesByID<WithStreamedUnaryMethod_GetExecutionTypes<WithStreamedUnaryMethod_GetContextType<WithStreamedUnaryMethod_GetContextTypesByID<WithStreamedUnaryMethod_GetContextTypes<WithStreamedUnaryMethod_GetArtifacts<WithStreamedUnaryMethod_GetExecutions<WithStreamedUnaryMethod_GetContexts<WithStreamedUnaryMethod_GetArtifactsByID<WithStreamedUnaryMethod_GetExecutionsByID<WithStreamedUnaryMethod_GetContextsByID<WithStreamedUnaryMethod_GetArtifactsByType<WithStreamedUnaryMethod_GetExecutionsByType<WithStreamedUnaryMethod_GetContextsByType<WithStreamedUnaryMethod_GetArtifactByTypeAndName<WithStreamedUnaryMethod_GetExecutionByTypeAndName<WithStreamedUnaryMethod_GetContextByTypeAndName<WithStreamedUnaryMethod_GetArtifactsByURI<WithStreamedUnaryMethod_GetEventsByExecutionIDs<WithStreamedUnaryMethod_GetEventsByArtifactIDs<WithStreamedUnaryMethod_GetArtifactsByExternalIds<WithStreamedUnaryMethod_GetExecutionsByExternalIds<WithStreamedUnaryMethod_GetContextsByExternalIds<WithStreamedUnaryMethod_GetArtifactTypesByExternalIds<WithStreamedUnaryMethod_GetExecutionTypesByExternalIds<WithStreamedUnaryMethod_GetContextTypesByExternalIds<WithStreamedUnaryMethod_GetContextsByArtifact<WithStreamedUnaryMethod_GetContextsByExecution<WithStreamedUnaryMethod_GetParentContextsByContext<WithStreamedUnaryMethod_GetChildrenContextsByContext<WithStreamedUnaryMethod_GetParentContextsByContexts<WithStreamedUnaryMethod_GetChildrenContextsByContexts<WithStreamedUnaryMethod_GetArtifactsByContext<WithStreamedUnaryMethod_GetExecutionsByContext<WithStreamedUnaryMethod_GetLineageGraph<WithStreamedUnaryMethod_GetLineageSubgraph<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PutArtifactType<WithStreamedUnaryMethod_PutExecutionType<WithStreamedUnaryMethod_PutContextType<WithStreamedUnaryMethod_PutTypes<WithStreamedUnaryMethod_PutArtifacts<WithStreamedUnaryMethod_PutExecutions<WithStreamedUnaryMethod_PutEvents<WithStreamedUnaryMethod_PutExecution<WithStreamedUnaryMethod_PutLineageSubgraph<WithStreamedUnaryMethod_PutContexts<WithStreamedUnaryMethod_PutAttributionsAndAssociations<WithStreamedUnaryMethod_PutParentContexts<WithStreamedUnaryMethod_GetArtifactType<WithStreamedUnaryMethod_GetArtifactTypesByID<WithStreamedUnaryMethod_GetArtifactTypes<WithStreamedUnaryMethod_GetExecutionType<WithStreamedUnaryMethod_GetExecutionTypesByID<WithStreamedUnaryMethod_GetExecutionTypes<WithStreamedUnaryMethod_GetContextType<WithStreamedUnaryMethod_GetContextTypesByID<WithStreamedUnaryMethod_GetContextTypes<WithStreamedUnaryMethod_GetArtifacts<WithStreamedUnaryMethod_GetExecutions<WithStreamedUnaryMethod_GetContexts<WithStreamedUnaryMethod_GetArtifactsByID<WithStreamedUnaryMethod_GetExecutionsByID<WithStreamedUnaryMethod_GetContextsByID<WithStreamedUnaryMethod_GetArtifactsByType<WithStreamedUnaryMethod_GetExecutionsByType<WithStreamedUnaryMethod_GetContextsByType<WithStreamedUnaryMethod_GetArtifactByTypeAndName<WithStreamedUnaryMethod_GetExecutionByTypeAndName<WithStreamedUnaryMethod_GetContextByTypeAndName<WithStreamedUnaryMethod_GetArtifactsByURI<WithStreamedUnaryMethod_GetEventsByExecutionIDs<WithStreamedUnaryMethod_GetEventsByArtifactIDs<WithStreamedUnaryMethod_GetArtifactsByExternalIds<WithStreamedUnaryMethod_GetExecutionsByExternalIds<WithStreamedUnaryMethod_GetContextsByExternalIds<WithStreamedUnaryMethod_GetArtifactTypesByExternalIds<WithStreamedUnaryMethod_GetExecutionTypesByExternalIds<WithStreamedUnaryMethod_GetContextTypesByExternalIds<WithStreamedUnaryMethod_GetContextsByArtifact<WithStreamedUnaryMethod_GetContextsByExecution<WithStreamedUnaryMethod_GetParentContextsByContext<WithStreamedUnaryMethod_GetChildrenContextsByContext<WithStreamedUnaryMethod_GetParentContextsByContexts<WithStreamedUnaryMethod_GetChildrenContextsByContexts<WithStreamedUnaryMethod_GetArtifactsByContext<WithStreamedUnaryMethod_GetExecutionsByContext<WithStreamedUnaryMethod_GetLineageGraph<WithStreamedUnaryMethod_GetLineageSubgraph<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace ml_metadata


#endif  // GRPC_ml_5fmetadata_2fproto_2fmetadata_5fstore_5fservice_2eproto__INCLUDED
