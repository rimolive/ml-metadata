// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ml_metadata/proto/metadata_store.proto

#include "ml_metadata/proto/metadata_store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ml_metadata {
PROTOBUF_CONSTEXPR SystemTypeExtension::SystemTypeExtension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SystemTypeExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemTypeExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemTypeExtensionDefaultTypeInternal() {}
  union {
    SystemTypeExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemTypeExtensionDefaultTypeInternal _SystemTypeExtension_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR Artifact_PropertiesEntry_DoNotUse::Artifact_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Artifact_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Artifact_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Artifact_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Artifact_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Artifact_PropertiesEntry_DoNotUseDefaultTypeInternal _Artifact_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Artifact_CustomPropertiesEntry_DoNotUse::Artifact_CustomPropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Artifact_CustomPropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Artifact_CustomPropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Artifact_CustomPropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Artifact_CustomPropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Artifact_CustomPropertiesEntry_DoNotUseDefaultTypeInternal _Artifact_CustomPropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Artifact::Artifact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.custom_properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.external_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.system_metadata_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.type_id_)*/int64_t{0}
  , /*decltype(_impl_.create_time_since_epoch_)*/int64_t{0}
  , /*decltype(_impl_.last_update_time_since_epoch_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0} {}
struct ArtifactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArtifactDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArtifactDefaultTypeInternal() {}
  union {
    Artifact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArtifactDefaultTypeInternal _Artifact_default_instance_;
PROTOBUF_CONSTEXPR ArtifactType_PropertiesEntry_DoNotUse::ArtifactType_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ArtifactType_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArtifactType_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArtifactType_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ArtifactType_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArtifactType_PropertiesEntry_DoNotUseDefaultTypeInternal _ArtifactType_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ArtifactType::ArtifactType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.external_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.base_type_)*/0} {}
struct ArtifactTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArtifactTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArtifactTypeDefaultTypeInternal() {}
  union {
    ArtifactType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArtifactTypeDefaultTypeInternal _ArtifactType_default_instance_;
PROTOBUF_CONSTEXPR Event_Path_Step::Event_Path_Step(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Event_Path_StepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Event_Path_StepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Event_Path_StepDefaultTypeInternal() {}
  union {
    Event_Path_Step _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Event_Path_StepDefaultTypeInternal _Event_Path_Step_default_instance_;
PROTOBUF_CONSTEXPR Event_Path::Event_Path(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.steps_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Event_PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Event_PathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Event_PathDefaultTypeInternal() {}
  union {
    Event_Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Event_PathDefaultTypeInternal _Event_Path_default_instance_;
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/nullptr
  , /*decltype(_impl_.system_metadata_)*/nullptr
  , /*decltype(_impl_.artifact_id_)*/int64_t{0}
  , /*decltype(_impl_.execution_id_)*/int64_t{0}
  , /*decltype(_impl_.milliseconds_since_epoch_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
PROTOBUF_CONSTEXPR Execution_PropertiesEntry_DoNotUse::Execution_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Execution_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Execution_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Execution_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Execution_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Execution_PropertiesEntry_DoNotUseDefaultTypeInternal _Execution_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Execution_CustomPropertiesEntry_DoNotUse::Execution_CustomPropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Execution_CustomPropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Execution_CustomPropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Execution_CustomPropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Execution_CustomPropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Execution_CustomPropertiesEntry_DoNotUseDefaultTypeInternal _Execution_CustomPropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Execution::Execution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.custom_properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.external_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.system_metadata_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.type_id_)*/int64_t{0}
  , /*decltype(_impl_.create_time_since_epoch_)*/int64_t{0}
  , /*decltype(_impl_.last_update_time_since_epoch_)*/int64_t{0}
  , /*decltype(_impl_.last_known_state_)*/0} {}
struct ExecutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionDefaultTypeInternal() {}
  union {
    Execution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionDefaultTypeInternal _Execution_default_instance_;
PROTOBUF_CONSTEXPR ExecutionType_PropertiesEntry_DoNotUse::ExecutionType_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ExecutionType_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionType_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionType_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ExecutionType_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionType_PropertiesEntry_DoNotUseDefaultTypeInternal _ExecutionType_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ExecutionType::ExecutionType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.external_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_type_)*/nullptr
  , /*decltype(_impl_.output_type_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.base_type_)*/0} {}
struct ExecutionTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionTypeDefaultTypeInternal() {}
  union {
    ExecutionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionTypeDefaultTypeInternal _ExecutionType_default_instance_;
PROTOBUF_CONSTEXPR ContextType_PropertiesEntry_DoNotUse::ContextType_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ContextType_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextType_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextType_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ContextType_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextType_PropertiesEntry_DoNotUseDefaultTypeInternal _ContextType_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ContextType::ContextType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.external_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.base_type_)*/0} {}
struct ContextTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextTypeDefaultTypeInternal() {}
  union {
    ContextType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextTypeDefaultTypeInternal _ContextType_default_instance_;
PROTOBUF_CONSTEXPR Context_PropertiesEntry_DoNotUse::Context_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Context_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Context_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Context_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Context_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Context_PropertiesEntry_DoNotUseDefaultTypeInternal _Context_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Context_CustomPropertiesEntry_DoNotUse::Context_CustomPropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Context_CustomPropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Context_CustomPropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Context_CustomPropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Context_CustomPropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Context_CustomPropertiesEntry_DoNotUseDefaultTypeInternal _Context_CustomPropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Context::Context(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.custom_properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.external_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.system_metadata_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.type_id_)*/int64_t{0}
  , /*decltype(_impl_.create_time_since_epoch_)*/int64_t{0}
  , /*decltype(_impl_.last_update_time_since_epoch_)*/int64_t{0}} {}
struct ContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextDefaultTypeInternal() {}
  union {
    Context _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextDefaultTypeInternal _Context_default_instance_;
PROTOBUF_CONSTEXPR Attribution::Attribution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.system_metadata_)*/nullptr
  , /*decltype(_impl_.artifact_id_)*/int64_t{0}
  , /*decltype(_impl_.context_id_)*/int64_t{0}} {}
struct AttributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributionDefaultTypeInternal() {}
  union {
    Attribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributionDefaultTypeInternal _Attribution_default_instance_;
PROTOBUF_CONSTEXPR Association::Association(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.system_metadata_)*/nullptr
  , /*decltype(_impl_.execution_id_)*/int64_t{0}
  , /*decltype(_impl_.context_id_)*/int64_t{0}} {}
struct AssociationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssociationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssociationDefaultTypeInternal() {}
  union {
    Association _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssociationDefaultTypeInternal _Association_default_instance_;
PROTOBUF_CONSTEXPR ParentContext::ParentContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.system_metadata_)*/nullptr
  , /*decltype(_impl_.child_id_)*/int64_t{0}
  , /*decltype(_impl_.parent_id_)*/int64_t{0}} {}
struct ParentContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParentContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParentContextDefaultTypeInternal() {}
  union {
    ParentContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParentContextDefaultTypeInternal _ParentContext_default_instance_;
PROTOBUF_CONSTEXPR LineageGraph::LineageGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.artifact_types_)*/{}
  , /*decltype(_impl_.execution_types_)*/{}
  , /*decltype(_impl_.context_types_)*/{}
  , /*decltype(_impl_.artifacts_)*/{}
  , /*decltype(_impl_.executions_)*/{}
  , /*decltype(_impl_.contexts_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.attributions_)*/{}
  , /*decltype(_impl_.associations_)*/{}
  , /*decltype(_impl_.parent_contexts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LineageGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineageGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineageGraphDefaultTypeInternal() {}
  union {
    LineageGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineageGraphDefaultTypeInternal _LineageGraph_default_instance_;
PROTOBUF_CONSTEXPR ArtifactStructType::ArtifactStructType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ArtifactStructTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArtifactStructTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArtifactStructTypeDefaultTypeInternal() {}
  union {
    ArtifactStructType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArtifactStructTypeDefaultTypeInternal _ArtifactStructType_default_instance_;
PROTOBUF_CONSTEXPR UnionArtifactStructType::UnionArtifactStructType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candidates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnionArtifactStructTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnionArtifactStructTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnionArtifactStructTypeDefaultTypeInternal() {}
  union {
    UnionArtifactStructType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnionArtifactStructTypeDefaultTypeInternal _UnionArtifactStructType_default_instance_;
PROTOBUF_CONSTEXPR IntersectionArtifactStructType::IntersectionArtifactStructType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.constraints_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntersectionArtifactStructTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntersectionArtifactStructTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntersectionArtifactStructTypeDefaultTypeInternal() {}
  union {
    IntersectionArtifactStructType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntersectionArtifactStructTypeDefaultTypeInternal _IntersectionArtifactStructType_default_instance_;
PROTOBUF_CONSTEXPR ListArtifactStructType::ListArtifactStructType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_)*/nullptr} {}
struct ListArtifactStructTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListArtifactStructTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListArtifactStructTypeDefaultTypeInternal() {}
  union {
    ListArtifactStructType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListArtifactStructTypeDefaultTypeInternal _ListArtifactStructType_default_instance_;
PROTOBUF_CONSTEXPR NoneArtifactStructType::NoneArtifactStructType(
    ::_pbi::ConstantInitialized) {}
struct NoneArtifactStructTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoneArtifactStructTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoneArtifactStructTypeDefaultTypeInternal() {}
  union {
    NoneArtifactStructType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoneArtifactStructTypeDefaultTypeInternal _NoneArtifactStructType_default_instance_;
PROTOBUF_CONSTEXPR AnyArtifactStructType::AnyArtifactStructType(
    ::_pbi::ConstantInitialized) {}
struct AnyArtifactStructTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyArtifactStructTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyArtifactStructTypeDefaultTypeInternal() {}
  union {
    AnyArtifactStructType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyArtifactStructTypeDefaultTypeInternal _AnyArtifactStructType_default_instance_;
PROTOBUF_CONSTEXPR TupleArtifactStructType::TupleArtifactStructType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elements_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TupleArtifactStructTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TupleArtifactStructTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TupleArtifactStructTypeDefaultTypeInternal() {}
  union {
    TupleArtifactStructType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TupleArtifactStructTypeDefaultTypeInternal _TupleArtifactStructType_default_instance_;
PROTOBUF_CONSTEXPR DictArtifactStructType_PropertiesEntry_DoNotUse::DictArtifactStructType_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DictArtifactStructType_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DictArtifactStructType_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DictArtifactStructType_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DictArtifactStructType_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DictArtifactStructType_PropertiesEntry_DoNotUseDefaultTypeInternal _DictArtifactStructType_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DictArtifactStructType::DictArtifactStructType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.extra_properties_type_)*/nullptr
  , /*decltype(_impl_.none_type_not_required_)*/false} {}
struct DictArtifactStructTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DictArtifactStructTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DictArtifactStructTypeDefaultTypeInternal() {}
  union {
    DictArtifactStructType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DictArtifactStructTypeDefaultTypeInternal _DictArtifactStructType_default_instance_;
PROTOBUF_CONSTEXPR FakeDatabaseConfig::FakeDatabaseConfig(
    ::_pbi::ConstantInitialized) {}
struct FakeDatabaseConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FakeDatabaseConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FakeDatabaseConfigDefaultTypeInternal() {}
  union {
    FakeDatabaseConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FakeDatabaseConfigDefaultTypeInternal _FakeDatabaseConfig_default_instance_;
PROTOBUF_CONSTEXPR MySQLDatabaseConfig_SSLOptions::MySQLDatabaseConfig_SSLOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cert_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ca_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cipher_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_server_cert_)*/false} {}
struct MySQLDatabaseConfig_SSLOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MySQLDatabaseConfig_SSLOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MySQLDatabaseConfig_SSLOptionsDefaultTypeInternal() {}
  union {
    MySQLDatabaseConfig_SSLOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MySQLDatabaseConfig_SSLOptionsDefaultTypeInternal _MySQLDatabaseConfig_SSLOptions_default_instance_;
PROTOBUF_CONSTEXPR MySQLDatabaseConfig::MySQLDatabaseConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.socket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ssl_options_)*/nullptr
  , /*decltype(_impl_.port_)*/int64_t{0}
  , /*decltype(_impl_.skip_db_creation_)*/false} {}
struct MySQLDatabaseConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MySQLDatabaseConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MySQLDatabaseConfigDefaultTypeInternal() {}
  union {
    MySQLDatabaseConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MySQLDatabaseConfigDefaultTypeInternal _MySQLDatabaseConfig_default_instance_;
PROTOBUF_CONSTEXPR SqliteMetadataSourceConfig::SqliteMetadataSourceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filename_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connection_mode_)*/0} {}
struct SqliteMetadataSourceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SqliteMetadataSourceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SqliteMetadataSourceConfigDefaultTypeInternal() {}
  union {
    SqliteMetadataSourceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SqliteMetadataSourceConfigDefaultTypeInternal _SqliteMetadataSourceConfig_default_instance_;
PROTOBUF_CONSTEXPR PostgreSQLDatabaseConfig_SSLOptions::PostgreSQLDatabaseConfig_SSLOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sslmode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sslcert_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sslkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sslpassword_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sslrootcert_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PostgreSQLDatabaseConfig_SSLOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostgreSQLDatabaseConfig_SSLOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostgreSQLDatabaseConfig_SSLOptionsDefaultTypeInternal() {}
  union {
    PostgreSQLDatabaseConfig_SSLOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostgreSQLDatabaseConfig_SSLOptionsDefaultTypeInternal _PostgreSQLDatabaseConfig_SSLOptions_default_instance_;
PROTOBUF_CONSTEXPR PostgreSQLDatabaseConfig::PostgreSQLDatabaseConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passfile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dbname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ssloption_)*/nullptr
  , /*decltype(_impl_.skip_db_creation_)*/false} {}
struct PostgreSQLDatabaseConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostgreSQLDatabaseConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostgreSQLDatabaseConfigDefaultTypeInternal() {}
  union {
    PostgreSQLDatabaseConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostgreSQLDatabaseConfigDefaultTypeInternal _PostgreSQLDatabaseConfig_default_instance_;
PROTOBUF_CONSTEXPR MigrationOptions::MigrationOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enable_upgrade_migration_)*/false
  , /*decltype(_impl_.downgrade_to_schema_version_)*/int64_t{-1}} {}
struct MigrationOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MigrationOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MigrationOptionsDefaultTypeInternal() {}
  union {
    MigrationOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MigrationOptionsDefaultTypeInternal _MigrationOptions_default_instance_;
PROTOBUF_CONSTEXPR RetryOptions::RetryOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_num_retries_)*/int64_t{0}} {}
struct RetryOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetryOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetryOptionsDefaultTypeInternal() {}
  union {
    RetryOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetryOptionsDefaultTypeInternal _RetryOptions_default_instance_;
PROTOBUF_CONSTEXPR ConnectionConfig::ConnectionConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.retry_options_)*/nullptr
  , /*decltype(_impl_.config_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConnectionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionConfigDefaultTypeInternal() {}
  union {
    ConnectionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionConfigDefaultTypeInternal _ConnectionConfig_default_instance_;
PROTOBUF_CONSTEXPR GrpcChannelArguments::GrpcChannelArguments(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_receive_message_length_)*/int64_t{0}
  , /*decltype(_impl_.http2_max_ping_strikes_)*/int64_t{0}} {}
struct GrpcChannelArgumentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrpcChannelArgumentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrpcChannelArgumentsDefaultTypeInternal() {}
  union {
    GrpcChannelArguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrpcChannelArgumentsDefaultTypeInternal _GrpcChannelArguments_default_instance_;
PROTOBUF_CONSTEXPR MetadataStoreClientConfig_SSLConfig::MetadataStoreClientConfig_SSLConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_cert_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_ca_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MetadataStoreClientConfig_SSLConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataStoreClientConfig_SSLConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataStoreClientConfig_SSLConfigDefaultTypeInternal() {}
  union {
    MetadataStoreClientConfig_SSLConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataStoreClientConfig_SSLConfigDefaultTypeInternal _MetadataStoreClientConfig_SSLConfig_default_instance_;
PROTOBUF_CONSTEXPR MetadataStoreClientConfig::MetadataStoreClientConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ssl_config_)*/nullptr
  , /*decltype(_impl_.channel_arguments_)*/nullptr
  , /*decltype(_impl_.port_)*/int64_t{0}
  , /*decltype(_impl_.client_timeout_sec_)*/0} {}
struct MetadataStoreClientConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataStoreClientConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataStoreClientConfigDefaultTypeInternal() {}
  union {
    MetadataStoreClientConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataStoreClientConfigDefaultTypeInternal _MetadataStoreClientConfig_default_instance_;
PROTOBUF_CONSTEXPR MetadataStoreServerConfig_SSLConfig::MetadataStoreServerConfig_SSLConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_cert_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_ca_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_verify_)*/false} {}
struct MetadataStoreServerConfig_SSLConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataStoreServerConfig_SSLConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataStoreServerConfig_SSLConfigDefaultTypeInternal() {}
  union {
    MetadataStoreServerConfig_SSLConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataStoreServerConfig_SSLConfigDefaultTypeInternal _MetadataStoreServerConfig_SSLConfig_default_instance_;
PROTOBUF_CONSTEXPR MetadataStoreServerConfig::MetadataStoreServerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connection_config_)*/nullptr
  , /*decltype(_impl_.ssl_config_)*/nullptr
  , /*decltype(_impl_.migration_options_)*/nullptr} {}
struct MetadataStoreServerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataStoreServerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataStoreServerConfigDefaultTypeInternal() {}
  union {
    MetadataStoreServerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataStoreServerConfigDefaultTypeInternal _MetadataStoreServerConfig_default_instance_;
PROTOBUF_CONSTEXPR ListOperationOptions_OrderByField::ListOperationOptions_OrderByField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/3
  , /*decltype(_impl_.is_asc_)*/true} {}
struct ListOperationOptions_OrderByFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListOperationOptions_OrderByFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListOperationOptions_OrderByFieldDefaultTypeInternal() {}
  union {
    ListOperationOptions_OrderByField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListOperationOptions_OrderByFieldDefaultTypeInternal _ListOperationOptions_OrderByField_default_instance_;
PROTOBUF_CONSTEXPR ListOperationOptions::ListOperationOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filter_query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_by_field_)*/nullptr
  , /*decltype(_impl_.max_result_size_)*/20} {}
struct ListOperationOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListOperationOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListOperationOptionsDefaultTypeInternal() {}
  union {
    ListOperationOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListOperationOptionsDefaultTypeInternal _ListOperationOptions_default_instance_;
PROTOBUF_CONSTEXPR ListOperationNextPageToken::ListOperationNextPageToken(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.listed_ids_)*/{}
  , /*decltype(_impl_.set_options_)*/nullptr
  , /*decltype(_impl_.id_offset_)*/int64_t{0}
  , /*decltype(_impl_.field_offset_)*/int64_t{0}} {}
struct ListOperationNextPageTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListOperationNextPageTokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListOperationNextPageTokenDefaultTypeInternal() {}
  union {
    ListOperationNextPageToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListOperationNextPageTokenDefaultTypeInternal _ListOperationNextPageToken_default_instance_;
PROTOBUF_CONSTEXPR TransactionOptions::TransactionOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TransactionOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionOptionsDefaultTypeInternal() {}
  union {
    TransactionOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionOptionsDefaultTypeInternal _TransactionOptions_default_instance_;
PROTOBUF_CONSTEXPR LineageGraphQueryOptions_BoundaryConstraint::LineageGraphQueryOptions_BoundaryConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.boundary_artifacts_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.boundary_executions_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_num_hops_)*/int64_t{0}} {}
struct LineageGraphQueryOptions_BoundaryConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineageGraphQueryOptions_BoundaryConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineageGraphQueryOptions_BoundaryConstraintDefaultTypeInternal() {}
  union {
    LineageGraphQueryOptions_BoundaryConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineageGraphQueryOptions_BoundaryConstraintDefaultTypeInternal _LineageGraphQueryOptions_BoundaryConstraint_default_instance_;
PROTOBUF_CONSTEXPR LineageGraphQueryOptions::LineageGraphQueryOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stop_conditions_)*/nullptr
  , /*decltype(_impl_.max_node_size_)*/int64_t{20}
  , /*decltype(_impl_.query_nodes_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LineageGraphQueryOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineageGraphQueryOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineageGraphQueryOptionsDefaultTypeInternal() {}
  union {
    LineageGraphQueryOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineageGraphQueryOptionsDefaultTypeInternal _LineageGraphQueryOptions_default_instance_;
PROTOBUF_CONSTEXPR LineageSubgraphQueryOptions_StartingNodes::LineageSubgraphQueryOptions_StartingNodes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filter_query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LineageSubgraphQueryOptions_StartingNodesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineageSubgraphQueryOptions_StartingNodesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineageSubgraphQueryOptions_StartingNodesDefaultTypeInternal() {}
  union {
    LineageSubgraphQueryOptions_StartingNodes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineageSubgraphQueryOptions_StartingNodesDefaultTypeInternal _LineageSubgraphQueryOptions_StartingNodes_default_instance_;
PROTOBUF_CONSTEXPR LineageSubgraphQueryOptions_EndingNodes::LineageSubgraphQueryOptions_EndingNodes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filter_query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_ending_nodes_)*/false} {}
struct LineageSubgraphQueryOptions_EndingNodesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineageSubgraphQueryOptions_EndingNodesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineageSubgraphQueryOptions_EndingNodesDefaultTypeInternal() {}
  union {
    LineageSubgraphQueryOptions_EndingNodes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineageSubgraphQueryOptions_EndingNodesDefaultTypeInternal _LineageSubgraphQueryOptions_EndingNodes_default_instance_;
PROTOBUF_CONSTEXPR LineageSubgraphQueryOptions::LineageSubgraphQueryOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ending_artifacts_)*/nullptr
  , /*decltype(_impl_.ending_executions_)*/nullptr
  , /*decltype(_impl_.max_num_hops_)*/int64_t{0}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.starting_nodes_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LineageSubgraphQueryOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineageSubgraphQueryOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineageSubgraphQueryOptionsDefaultTypeInternal() {}
  union {
    LineageSubgraphQueryOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineageSubgraphQueryOptionsDefaultTypeInternal _LineageSubgraphQueryOptions_default_instance_;
}  // namespace ml_metadata
static ::_pb::Metadata file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[56];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto = nullptr;

const uint32_t TableStruct_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ml_metadata::SystemTypeExtension, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::SystemTypeExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::SystemTypeExtension, _impl_.type_name_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Value, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Value, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact_CustomPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact_CustomPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact_CustomPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact_CustomPropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.type_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.external_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.custom_properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.create_time_since_epoch_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.last_update_time_since_epoch_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Artifact, _impl_.system_metadata_),
  5,
  1,
  6,
  2,
  0,
  3,
  ~0u,
  ~0u,
  9,
  7,
  8,
  4,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType, _impl_.external_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactType, _impl_.base_type_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event_Path_Step, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event_Path_Step, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event_Path_Step, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event_Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event_Path, _impl_.steps_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event, _impl_.artifact_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event, _impl_.execution_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event, _impl_.milliseconds_since_epoch_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Event, _impl_.system_metadata_),
  2,
  3,
  0,
  5,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution_CustomPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution_CustomPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution_CustomPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution_CustomPropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.type_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.external_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.last_known_state_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.custom_properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.create_time_since_epoch_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.last_update_time_since_epoch_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Execution, _impl_.system_metadata_),
  4,
  0,
  5,
  1,
  2,
  8,
  ~0u,
  ~0u,
  6,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_.external_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_.input_type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_.output_type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ExecutionType, _impl_.base_type_),
  6,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType, _impl_.external_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ContextType, _impl_.base_type_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context_CustomPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context_CustomPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context_CustomPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context_CustomPropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.type_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.external_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.custom_properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.create_time_since_epoch_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.last_update_time_since_epoch_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Context, _impl_.system_metadata_),
  4,
  0,
  5,
  1,
  2,
  ~0u,
  ~0u,
  6,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Attribution, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Attribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Attribution, _impl_.artifact_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Attribution, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Attribution, _impl_.system_metadata_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Association, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Association, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Association, _impl_.execution_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Association, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Association, _impl_.system_metadata_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ParentContext, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ParentContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ParentContext, _impl_.child_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ParentContext, _impl_.parent_id_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ParentContext, _impl_.system_metadata_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.artifact_types_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.execution_types_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.context_types_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.artifacts_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.executions_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.contexts_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.attributions_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.associations_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraph, _impl_.parent_contexts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactStructType, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ArtifactStructType, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::UnionArtifactStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::UnionArtifactStructType, _impl_.candidates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::IntersectionArtifactStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::IntersectionArtifactStructType, _impl_.constraints_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListArtifactStructType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListArtifactStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListArtifactStructType, _impl_.element_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::NoneArtifactStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::AnyArtifactStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::TupleArtifactStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::TupleArtifactStructType, _impl_.elements_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::DictArtifactStructType_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::DictArtifactStructType_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::DictArtifactStructType_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::DictArtifactStructType_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::DictArtifactStructType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::DictArtifactStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::DictArtifactStructType, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::DictArtifactStructType, _impl_.none_type_not_required_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::DictArtifactStructType, _impl_.extra_properties_type_),
  ~0u,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FakeDatabaseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig_SSLOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig_SSLOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig_SSLOptions, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig_SSLOptions, _impl_.cert_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig_SSLOptions, _impl_.ca_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig_SSLOptions, _impl_.capath_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig_SSLOptions, _impl_.cipher_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig_SSLOptions, _impl_.verify_server_cert_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _impl_.database_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _impl_.socket_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _impl_.ssl_options_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MySQLDatabaseConfig, _impl_.skip_db_creation_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::SqliteMetadataSourceConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::SqliteMetadataSourceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::SqliteMetadataSourceConfig, _impl_.filename_uri_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::SqliteMetadataSourceConfig, _impl_.connection_mode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions, _impl_.sslmode_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions, _impl_.sslcert_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions, _impl_.sslkey_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions, _impl_.sslpassword_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions, _impl_.sslrootcert_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_.hostaddr_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_.passfile_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_.dbname_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_.skip_db_creation_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::PostgreSQLDatabaseConfig, _impl_.ssloption_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MigrationOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MigrationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MigrationOptions, _impl_.enable_upgrade_migration_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MigrationOptions, _impl_.downgrade_to_schema_version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::RetryOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::RetryOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::RetryOptions, _impl_.max_num_retries_),
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ConnectionConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ConnectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ConnectionConfig, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ConnectionConfig, _impl_.retry_options_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ConnectionConfig, _impl_.config_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::GrpcChannelArguments, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::GrpcChannelArguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::GrpcChannelArguments, _impl_.max_receive_message_length_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::GrpcChannelArguments, _impl_.http2_max_ping_strikes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig_SSLConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig_SSLConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig_SSLConfig, _impl_.client_key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig_SSLConfig, _impl_.server_cert_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig_SSLConfig, _impl_.custom_ca_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig, _impl_.ssl_config_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig, _impl_.channel_arguments_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreClientConfig, _impl_.client_timeout_sec_),
  0,
  3,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig_SSLConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig_SSLConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig_SSLConfig, _impl_.server_key_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig_SSLConfig, _impl_.server_cert_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig_SSLConfig, _impl_.custom_ca_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig_SSLConfig, _impl_.client_verify_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig, _impl_.connection_config_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig, _impl_.migration_options_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MetadataStoreServerConfig, _impl_.ssl_config_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions_OrderByField, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions_OrderByField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions_OrderByField, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions_OrderByField, _impl_.is_asc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions, _impl_.max_result_size_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions, _impl_.order_by_field_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions, _impl_.next_page_token_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationOptions, _impl_.filter_query_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationNextPageToken, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationNextPageToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationNextPageToken, _impl_.id_offset_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationNextPageToken, _impl_.field_offset_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationNextPageToken, _impl_.set_options_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ListOperationNextPageToken, _impl_.listed_ids_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::TransactionOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::TransactionOptions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::TransactionOptions, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::TransactionOptions, _impl_.tag_),
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint, _impl_.max_num_hops_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint, _impl_.boundary_artifacts_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint, _impl_.boundary_executions_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions, _impl_.stop_conditions_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions, _impl_.max_node_size_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageGraphQueryOptions, _impl_.query_nodes_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions_StartingNodes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions_StartingNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions_StartingNodes, _impl_.filter_query_),
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions_EndingNodes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions_EndingNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions_EndingNodes, _impl_.filter_query_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions_EndingNodes, _impl_.include_ending_nodes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions, _impl_.max_num_hops_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions, _impl_.ending_artifacts_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions, _impl_.ending_executions_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::LineageSubgraphQueryOptions, _impl_.starting_nodes_),
  ~0u,
  ~0u,
  2,
  3,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::ml_metadata::SystemTypeExtension)},
  { 8, -1, -1, sizeof(::ml_metadata::Value)},
  { 21, 29, -1, sizeof(::ml_metadata::Artifact_PropertiesEntry_DoNotUse)},
  { 31, 39, -1, sizeof(::ml_metadata::Artifact_CustomPropertiesEntry_DoNotUse)},
  { 41, 59, -1, sizeof(::ml_metadata::Artifact)},
  { 71, 79, -1, sizeof(::ml_metadata::ArtifactType_PropertiesEntry_DoNotUse)},
  { 81, 94, -1, sizeof(::ml_metadata::ArtifactType)},
  { 101, -1, -1, sizeof(::ml_metadata::Event_Path_Step)},
  { 110, -1, -1, sizeof(::ml_metadata::Event_Path)},
  { 117, 129, -1, sizeof(::ml_metadata::Event)},
  { 135, 143, -1, sizeof(::ml_metadata::Execution_PropertiesEntry_DoNotUse)},
  { 145, 153, -1, sizeof(::ml_metadata::Execution_CustomPropertiesEntry_DoNotUse)},
  { 155, 172, -1, sizeof(::ml_metadata::Execution)},
  { 183, 191, -1, sizeof(::ml_metadata::ExecutionType_PropertiesEntry_DoNotUse)},
  { 193, 208, -1, sizeof(::ml_metadata::ExecutionType)},
  { 217, 225, -1, sizeof(::ml_metadata::ContextType_PropertiesEntry_DoNotUse)},
  { 227, 240, -1, sizeof(::ml_metadata::ContextType)},
  { 247, 255, -1, sizeof(::ml_metadata::Context_PropertiesEntry_DoNotUse)},
  { 257, 265, -1, sizeof(::ml_metadata::Context_CustomPropertiesEntry_DoNotUse)},
  { 267, 283, -1, sizeof(::ml_metadata::Context)},
  { 293, 302, -1, sizeof(::ml_metadata::Attribution)},
  { 305, 314, -1, sizeof(::ml_metadata::Association)},
  { 317, 326, -1, sizeof(::ml_metadata::ParentContext)},
  { 329, -1, -1, sizeof(::ml_metadata::LineageGraph)},
  { 345, -1, -1, sizeof(::ml_metadata::ArtifactStructType)},
  { 360, -1, -1, sizeof(::ml_metadata::UnionArtifactStructType)},
  { 367, -1, -1, sizeof(::ml_metadata::IntersectionArtifactStructType)},
  { 374, 381, -1, sizeof(::ml_metadata::ListArtifactStructType)},
  { 382, -1, -1, sizeof(::ml_metadata::NoneArtifactStructType)},
  { 388, -1, -1, sizeof(::ml_metadata::AnyArtifactStructType)},
  { 394, -1, -1, sizeof(::ml_metadata::TupleArtifactStructType)},
  { 401, 409, -1, sizeof(::ml_metadata::DictArtifactStructType_PropertiesEntry_DoNotUse)},
  { 411, 420, -1, sizeof(::ml_metadata::DictArtifactStructType)},
  { 423, -1, -1, sizeof(::ml_metadata::FakeDatabaseConfig)},
  { 429, 441, -1, sizeof(::ml_metadata::MySQLDatabaseConfig_SSLOptions)},
  { 447, 461, -1, sizeof(::ml_metadata::MySQLDatabaseConfig)},
  { 469, 477, -1, sizeof(::ml_metadata::SqliteMetadataSourceConfig)},
  { 479, 490, -1, sizeof(::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions)},
  { 495, 510, -1, sizeof(::ml_metadata::PostgreSQLDatabaseConfig)},
  { 519, 527, -1, sizeof(::ml_metadata::MigrationOptions)},
  { 529, 536, -1, sizeof(::ml_metadata::RetryOptions)},
  { 537, 549, -1, sizeof(::ml_metadata::ConnectionConfig)},
  { 554, 562, -1, sizeof(::ml_metadata::GrpcChannelArguments)},
  { 564, 573, -1, sizeof(::ml_metadata::MetadataStoreClientConfig_SSLConfig)},
  { 576, 587, -1, sizeof(::ml_metadata::MetadataStoreClientConfig)},
  { 592, 602, -1, sizeof(::ml_metadata::MetadataStoreServerConfig_SSLConfig)},
  { 606, 615, -1, sizeof(::ml_metadata::MetadataStoreServerConfig)},
  { 618, 626, -1, sizeof(::ml_metadata::ListOperationOptions_OrderByField)},
  { 628, 638, -1, sizeof(::ml_metadata::ListOperationOptions)},
  { 642, 652, -1, sizeof(::ml_metadata::ListOperationNextPageToken)},
  { 656, 663, -1, sizeof(::ml_metadata::TransactionOptions)},
  { 664, 673, -1, sizeof(::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint)},
  { 676, 686, -1, sizeof(::ml_metadata::LineageGraphQueryOptions)},
  { 689, 696, -1, sizeof(::ml_metadata::LineageSubgraphQueryOptions_StartingNodes)},
  { 697, 705, -1, sizeof(::ml_metadata::LineageSubgraphQueryOptions_EndingNodes)},
  { 707, 720, -1, sizeof(::ml_metadata::LineageSubgraphQueryOptions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ml_metadata::_SystemTypeExtension_default_instance_._instance,
  &::ml_metadata::_Value_default_instance_._instance,
  &::ml_metadata::_Artifact_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_Artifact_CustomPropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_Artifact_default_instance_._instance,
  &::ml_metadata::_ArtifactType_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_ArtifactType_default_instance_._instance,
  &::ml_metadata::_Event_Path_Step_default_instance_._instance,
  &::ml_metadata::_Event_Path_default_instance_._instance,
  &::ml_metadata::_Event_default_instance_._instance,
  &::ml_metadata::_Execution_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_Execution_CustomPropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_Execution_default_instance_._instance,
  &::ml_metadata::_ExecutionType_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_ExecutionType_default_instance_._instance,
  &::ml_metadata::_ContextType_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_ContextType_default_instance_._instance,
  &::ml_metadata::_Context_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_Context_CustomPropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_Context_default_instance_._instance,
  &::ml_metadata::_Attribution_default_instance_._instance,
  &::ml_metadata::_Association_default_instance_._instance,
  &::ml_metadata::_ParentContext_default_instance_._instance,
  &::ml_metadata::_LineageGraph_default_instance_._instance,
  &::ml_metadata::_ArtifactStructType_default_instance_._instance,
  &::ml_metadata::_UnionArtifactStructType_default_instance_._instance,
  &::ml_metadata::_IntersectionArtifactStructType_default_instance_._instance,
  &::ml_metadata::_ListArtifactStructType_default_instance_._instance,
  &::ml_metadata::_NoneArtifactStructType_default_instance_._instance,
  &::ml_metadata::_AnyArtifactStructType_default_instance_._instance,
  &::ml_metadata::_TupleArtifactStructType_default_instance_._instance,
  &::ml_metadata::_DictArtifactStructType_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::ml_metadata::_DictArtifactStructType_default_instance_._instance,
  &::ml_metadata::_FakeDatabaseConfig_default_instance_._instance,
  &::ml_metadata::_MySQLDatabaseConfig_SSLOptions_default_instance_._instance,
  &::ml_metadata::_MySQLDatabaseConfig_default_instance_._instance,
  &::ml_metadata::_SqliteMetadataSourceConfig_default_instance_._instance,
  &::ml_metadata::_PostgreSQLDatabaseConfig_SSLOptions_default_instance_._instance,
  &::ml_metadata::_PostgreSQLDatabaseConfig_default_instance_._instance,
  &::ml_metadata::_MigrationOptions_default_instance_._instance,
  &::ml_metadata::_RetryOptions_default_instance_._instance,
  &::ml_metadata::_ConnectionConfig_default_instance_._instance,
  &::ml_metadata::_GrpcChannelArguments_default_instance_._instance,
  &::ml_metadata::_MetadataStoreClientConfig_SSLConfig_default_instance_._instance,
  &::ml_metadata::_MetadataStoreClientConfig_default_instance_._instance,
  &::ml_metadata::_MetadataStoreServerConfig_SSLConfig_default_instance_._instance,
  &::ml_metadata::_MetadataStoreServerConfig_default_instance_._instance,
  &::ml_metadata::_ListOperationOptions_OrderByField_default_instance_._instance,
  &::ml_metadata::_ListOperationOptions_default_instance_._instance,
  &::ml_metadata::_ListOperationNextPageToken_default_instance_._instance,
  &::ml_metadata::_TransactionOptions_default_instance_._instance,
  &::ml_metadata::_LineageGraphQueryOptions_BoundaryConstraint_default_instance_._instance,
  &::ml_metadata::_LineageGraphQueryOptions_default_instance_._instance,
  &::ml_metadata::_LineageSubgraphQueryOptions_StartingNodes_default_instance_._instance,
  &::ml_metadata::_LineageSubgraphQueryOptions_EndingNodes_default_instance_._instance,
  &::ml_metadata::_LineageSubgraphQueryOptions_default_instance_._instance,
};

const char descriptor_table_protodef_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&ml_metadata/proto/metadata_store.proto"
  "\022\013ml_metadata\032\031google/protobuf/any.proto"
  "\032\034google/protobuf/struct.proto\032 google/p"
  "rotobuf/descriptor.proto\"(\n\023SystemTypeEx"
  "tension\022\021\n\ttype_name\030\001 \001(\t\"\311\001\n\005Value\022\023\n\t"
  "int_value\030\001 \001(\003H\000\022\026\n\014double_value\030\002 \001(\001H"
  "\000\022\026\n\014string_value\030\003 \001(\tH\000\022/\n\014struct_valu"
  "e\030\004 \001(\0132\027.google.protobuf.StructH\000\022+\n\013pr"
  "oto_value\030\005 \001(\0132\024.google.protobuf.AnyH\000\022"
  "\024\n\nbool_value\030\006 \001(\010H\000B\007\n\005value\"\217\005\n\010Artif"
  "act\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\007 \001(\t\022\017\n\007type_id"
  "\030\002 \001(\003\022\014\n\004type\030\010 \001(\t\022\013\n\003uri\030\003 \001(\t\022\023\n\013ext"
  "ernal_id\030\013 \001(\t\0229\n\nproperties\030\004 \003(\0132%.ml_"
  "metadata.Artifact.PropertiesEntry\022F\n\021cus"
  "tom_properties\030\005 \003(\0132+.ml_metadata.Artif"
  "act.CustomPropertiesEntry\022*\n\005state\030\006 \001(\016"
  "2\033.ml_metadata.Artifact.State\022\037\n\027create_"
  "time_since_epoch\030\t \001(\003\022$\n\034last_update_ti"
  "me_since_epoch\030\n \001(\003\022-\n\017system_metadata\030"
  "\014 \001(\0132\024.google.protobuf.Any\032E\n\017Propertie"
  "sEntry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.ml_"
  "metadata.Value:\0028\001\032K\n\025CustomPropertiesEn"
  "try\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.ml_met"
  "adata.Value:\0028\001\"o\n\005State\022\013\n\007UNKNOWN\020\000\022\013\n"
  "\007PENDING\020\001\022\010\n\004LIVE\020\002\022\027\n\023MARKED_FOR_DELET"
  "ION\020\003\022\013\n\007DELETED\020\004\022\r\n\tABANDONED\020\005\022\r\n\tREF"
  "ERENCE\020\006\"\204\004\n\014ArtifactType\022\n\n\002id\030\001 \001(\003\022\014\n"
  "\004name\030\002 \001(\t\022\017\n\007version\030\004 \001(\t\022\023\n\013descript"
  "ion\030\005 \001(\t\022\023\n\013external_id\030\007 \001(\t\022=\n\nproper"
  "ties\030\003 \003(\0132).ml_metadata.ArtifactType.Pr"
  "opertiesEntry\022B\n\tbase_type\030\006 \001(\0162/.ml_me"
  "tadata.ArtifactType.SystemDefinedBaseTyp"
  "e\032L\n\017PropertiesEntry\022\013\n\003key\030\001 \001(\t\022(\n\005val"
  "ue\030\002 \001(\0162\031.ml_metadata.PropertyType:\0028\001\""
  "\315\001\n\025SystemDefinedBaseType\022&\n\005UNSET\020\000\032\033\252\361"
  "\375\272\013\025\n\023unset_artifact_type\022!\n\007DATASET\020\001\032\024"
  "\252\361\375\272\013\016\n\014mlmd.Dataset\022\035\n\005MODEL\020\002\032\022\252\361\375\272\013\014\n"
  "\nmlmd.Model\022!\n\007METRICS\020\003\032\024\252\361\375\272\013\016\n\014mlmd.M"
  "etrics\022\'\n\nSTATISTICS\020\004\032\027\252\361\375\272\013\021\n\017mlmd.Sta"
  "tistics\"\312\003\n\005Event\022\023\n\013artifact_id\030\001 \001(\003\022\024"
  "\n\014execution_id\030\002 \001(\003\022%\n\004path\030\003 \001(\0132\027.ml_"
  "metadata.Event.Path\022%\n\004type\030\004 \001(\0162\027.ml_m"
  "etadata.Event.Type\022 \n\030milliseconds_since"
  "_epoch\030\005 \001(\003\022-\n\017system_metadata\030\006 \001(\0132\024."
  "google.protobuf.Any\032d\n\004Path\022+\n\005steps\030\001 \003"
  "(\0132\034.ml_metadata.Event.Path.Step\032/\n\004Step"
  "\022\017\n\005index\030\001 \001(\003H\000\022\r\n\003key\030\002 \001(\tH\000B\007\n\005valu"
  "e\"\220\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017DECLARED_OUTP"
  "UT\020\001\022\022\n\016DECLARED_INPUT\020\002\022\t\n\005INPUT\020\003\022\n\n\006O"
  "UTPUT\020\004\022\022\n\016INTERNAL_INPUT\020\005\022\023\n\017INTERNAL_"
  "OUTPUT\020\006\022\022\n\016PENDING_OUTPUT\020\007\"\200\005\n\tExecuti"
  "on\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\006 \001(\t\022\017\n\007type_id\030"
  "\002 \001(\003\022\014\n\004type\030\007 \001(\t\022\023\n\013external_id\030\n \001(\t"
  "\0226\n\020last_known_state\030\003 \001(\0162\034.ml_metadata"
  ".Execution.State\022:\n\nproperties\030\004 \003(\0132&.m"
  "l_metadata.Execution.PropertiesEntry\022G\n\021"
  "custom_properties\030\005 \003(\0132,.ml_metadata.Ex"
  "ecution.CustomPropertiesEntry\022\037\n\027create_"
  "time_since_epoch\030\010 \001(\003\022$\n\034last_update_ti"
  "me_since_epoch\030\t \001(\003\022-\n\017system_metadata\030"
  "\013 \001(\0132\024.google.protobuf.Any\032E\n\017Propertie"
  "sEntry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.ml_"
  "metadata.Value:\0028\001\032K\n\025CustomPropertiesEn"
  "try\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.ml_met"
  "adata.Value:\0028\001\"^\n\005State\022\013\n\007UNKNOWN\020\000\022\007\n"
  "\003NEW\020\001\022\013\n\007RUNNING\020\002\022\014\n\010COMPLETE\020\003\022\n\n\006FAI"
  "LED\020\004\022\n\n\006CACHED\020\005\022\014\n\010CANCELED\020\006\"\224\005\n\rExec"
  "utionType\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\017\n\007v"
  "ersion\030\006 \001(\t\022\023\n\013description\030\007 \001(\t\022\023\n\013ext"
  "ernal_id\030\t \001(\t\022>\n\nproperties\030\003 \003(\0132*.ml_"
  "metadata.ExecutionType.PropertiesEntry\0223"
  "\n\ninput_type\030\004 \001(\0132\037.ml_metadata.Artifac"
  "tStructType\0224\n\013output_type\030\005 \001(\0132\037.ml_me"
  "tadata.ArtifactStructType\022C\n\tbase_type\030\010"
  " \001(\01620.ml_metadata.ExecutionType.SystemD"
  "efinedBaseType\032L\n\017PropertiesEntry\022\013\n\003key"
  "\030\001 \001(\t\022(\n\005value\030\002 \001(\0162\031.ml_metadata.Prop"
  "ertyType:\0028\001\"\357\001\n\025SystemDefinedBaseType\022\'"
  "\n\005UNSET\020\000\032\034\252\361\375\272\013\026\n\024unset_execution_type\022"
  "\035\n\005TRAIN\020\001\032\022\252\361\375\272\013\014\n\nmlmd.Train\022%\n\tTRANSF"
  "ORM\020\002\032\026\252\361\375\272\013\020\n\016mlmd.Transform\022!\n\007PROCESS"
  "\020\003\032\024\252\361\375\272\013\016\n\014mlmd.Process\022#\n\010EVALUATE\020\004\032\025"
  "\252\361\375\272\013\017\n\rmlmd.Evaluate\022\037\n\006DEPLOY\020\005\032\023\252\361\375\272\013"
  "\r\n\013mlmd.Deploy\"\361\002\n\013ContextType\022\n\n\002id\030\001 \001"
  "(\003\022\014\n\004name\030\002 \001(\t\022\017\n\007version\030\004 \001(\t\022\023\n\013des"
  "cription\030\005 \001(\t\022\023\n\013external_id\030\007 \001(\t\022<\n\np"
  "roperties\030\003 \003(\0132(.ml_metadata.ContextTyp"
  "e.PropertiesEntry\022A\n\tbase_type\030\006 \001(\0162..m"
  "l_metadata.ContextType.SystemDefinedBase"
  "Type\032L\n\017PropertiesEntry\022\013\n\003key\030\001 \001(\t\022(\n\005"
  "value\030\002 \001(\0162\031.ml_metadata.PropertyType:\002"
  "8\001\">\n\025SystemDefinedBaseType\022%\n\005UNSET\020\000\032\032"
  "\252\361\375\272\013\024\n\022unset_context_type\"\342\003\n\007Context\022\n"
  "\n\002id\030\001 \001(\003\022\014\n\004name\030\003 \001(\t\022\017\n\007type_id\030\002 \001("
  "\003\022\014\n\004type\030\006 \001(\t\022\023\n\013external_id\030\t \001(\t\0228\n\n"
  "properties\030\004 \003(\0132$.ml_metadata.Context.P"
  "ropertiesEntry\022E\n\021custom_properties\030\005 \003("
  "\0132*.ml_metadata.Context.CustomProperties"
  "Entry\022\037\n\027create_time_since_epoch\030\007 \001(\003\022$"
  "\n\034last_update_time_since_epoch\030\010 \001(\003\022-\n\017"
  "system_metadata\030\n \001(\0132\024.google.protobuf."
  "Any\032E\n\017PropertiesEntry\022\013\n\003key\030\001 \001(\t\022!\n\005v"
  "alue\030\002 \001(\0132\022.ml_metadata.Value:\0028\001\032K\n\025Cu"
  "stomPropertiesEntry\022\013\n\003key\030\001 \001(\t\022!\n\005valu"
  "e\030\002 \001(\0132\022.ml_metadata.Value:\0028\001\"e\n\013Attri"
  "bution\022\023\n\013artifact_id\030\001 \001(\003\022\022\n\ncontext_i"
  "d\030\002 \001(\003\022-\n\017system_metadata\030\003 \001(\0132\024.googl"
  "e.protobuf.Any\"f\n\013Association\022\024\n\014executi"
  "on_id\030\001 \001(\003\022\022\n\ncontext_id\030\002 \001(\003\022-\n\017syste"
  "m_metadata\030\003 \001(\0132\024.google.protobuf.Any\"c"
  "\n\rParentContext\022\020\n\010child_id\030\001 \001(\003\022\021\n\tpar"
  "ent_id\030\002 \001(\003\022-\n\017system_metadata\030\003 \001(\0132\024."
  "google.protobuf.Any\"\336\003\n\014LineageGraph\0221\n\016"
  "artifact_types\030\001 \003(\0132\031.ml_metadata.Artif"
  "actType\0223\n\017execution_types\030\002 \003(\0132\032.ml_me"
  "tadata.ExecutionType\022/\n\rcontext_types\030\003 "
  "\003(\0132\030.ml_metadata.ContextType\022(\n\tartifac"
  "ts\030\004 \003(\0132\025.ml_metadata.Artifact\022*\n\nexecu"
  "tions\030\005 \003(\0132\026.ml_metadata.Execution\022&\n\010c"
  "ontexts\030\006 \003(\0132\024.ml_metadata.Context\022\"\n\006e"
  "vents\030\007 \003(\0132\022.ml_metadata.Event\022.\n\014attri"
  "butions\030\010 \003(\0132\030.ml_metadata.Attribution\022"
  ".\n\014associations\030\t \003(\0132\030.ml_metadata.Asso"
  "ciation\0223\n\017parent_contexts\030\n \003(\0132\032.ml_me"
  "tadata.ParentContext\"\323\003\n\022ArtifactStructT"
  "ype\022+\n\006simple\030\001 \001(\0132\031.ml_metadata.Artifa"
  "ctTypeH\000\022:\n\nunion_type\030\002 \001(\0132$.ml_metada"
  "ta.UnionArtifactStructTypeH\000\022C\n\014intersec"
  "tion\030\003 \001(\0132+.ml_metadata.IntersectionArt"
  "ifactStructTypeH\000\0223\n\004list\030\004 \001(\0132#.ml_met"
  "adata.ListArtifactStructTypeH\000\0223\n\004none\030\005"
  " \001(\0132#.ml_metadata.NoneArtifactStructTyp"
  "eH\000\0221\n\003any\030\006 \001(\0132\".ml_metadata.AnyArtifa"
  "ctStructTypeH\000\0225\n\005tuple\030\007 \001(\0132$.ml_metad"
  "ata.TupleArtifactStructTypeH\000\0223\n\004dict\030\010 "
  "\001(\0132#.ml_metadata.DictArtifactStructType"
  "H\000B\006\n\004kind\"N\n\027UnionArtifactStructType\0223\n"
  "\ncandidates\030\001 \003(\0132\037.ml_metadata.Artifact"
  "StructType\"V\n\036IntersectionArtifactStruct"
  "Type\0224\n\013constraints\030\001 \003(\0132\037.ml_metadata."
  "ArtifactStructType\"J\n\026ListArtifactStruct"
  "Type\0220\n\007element\030\001 \001(\0132\037.ml_metadata.Arti"
  "factStructType\"\030\n\026NoneArtifactStructType"
  "\"\027\n\025AnyArtifactStructType\"L\n\027TupleArtifa"
  "ctStructType\0221\n\010elements\030\001 \003(\0132\037.ml_meta"
  "data.ArtifactStructType\"\225\002\n\026DictArtifact"
  "StructType\022G\n\nproperties\030\001 \003(\01323.ml_meta"
  "data.DictArtifactStructType.PropertiesEn"
  "try\022\036\n\026none_type_not_required\030\002 \001(\010\022>\n\025e"
  "xtra_properties_type\030\003 \001(\0132\037.ml_metadata"
  ".ArtifactStructType\032R\n\017PropertiesEntry\022\013"
  "\n\003key\030\001 \001(\t\022.\n\005value\030\002 \001(\0132\037.ml_metadata"
  ".ArtifactStructType:\0028\001\"\024\n\022FakeDatabaseC"
  "onfig\"\300\002\n\023MySQLDatabaseConfig\022\014\n\004host\030\001 "
  "\001(\t\022\014\n\004port\030\002 \001(\003\022\020\n\010database\030\003 \001(\t\022\014\n\004u"
  "ser\030\004 \001(\t\022\020\n\010password\030\005 \001(\t\022\016\n\006socket\030\006 "
  "\001(\t\022@\n\013ssl_options\030\007 \001(\0132+.ml_metadata.M"
  "ySQLDatabaseConfig.SSLOptions\022\030\n\020skip_db"
  "_creation\030\010 \001(\010\032o\n\nSSLOptions\022\013\n\003key\030\001 \001"
  "(\t\022\014\n\004cert\030\002 \001(\t\022\n\n\002ca\030\003 \001(\t\022\016\n\006capath\030\004"
  " \001(\t\022\016\n\006cipher\030\005 \001(\t\022\032\n\022verify_server_ce"
  "rt\030\006 \001(\010\"\331\001\n\032SqliteMetadataSourceConfig\022"
  "\024\n\014filename_uri\030\001 \001(\t\022O\n\017connection_mode"
  "\030\002 \001(\01626.ml_metadata.SqliteMetadataSourc"
  "eConfig.ConnectionMode\"T\n\016ConnectionMode"
  "\022\013\n\007UNKNOWN\020\000\022\014\n\010READONLY\020\001\022\r\n\tREADWRITE"
  "\020\002\022\030\n\024READWRITE_OPENCREATE\020\003\"\323\002\n\030Postgre"
  "SQLDatabaseConfig\022\014\n\004host\030\001 \001(\t\022\020\n\010hosta"
  "ddr\030\002 \001(\t\022\014\n\004port\030\003 \001(\t\022\014\n\004user\030\004 \001(\t\022\020\n"
  "\010password\030\005 \001(\t\022\020\n\010passfile\030\006 \001(\t\022\016\n\006dbn"
  "ame\030\007 \001(\t\022\030\n\020skip_db_creation\030\010 \001(\010\022C\n\ts"
  "sloption\030\t \001(\01320.ml_metadata.PostgreSQLD"
  "atabaseConfig.SSLOptions\032h\n\nSSLOptions\022\017"
  "\n\007sslmode\030\001 \001(\t\022\017\n\007sslcert\030\002 \001(\t\022\016\n\006sslk"
  "ey\030\003 \001(\t\022\023\n\013sslpassword\030\004 \001(\t\022\023\n\013sslroot"
  "cert\030\005 \001(\t\"c\n\020MigrationOptions\022 \n\030enable"
  "_upgrade_migration\030\003 \001(\010\022\'\n\033downgrade_to"
  "_schema_version\030\002 \001(\003:\002-1J\004\010\001\020\002\"\'\n\014Retry"
  "Options\022\027\n\017max_num_retries\030\001 \001(\003\"\263\002\n\020Con"
  "nectionConfig\0228\n\rfake_database\030\001 \001(\0132\037.m"
  "l_metadata.FakeDatabaseConfigH\000\0221\n\005mysql"
  "\030\002 \001(\0132 .ml_metadata.MySQLDatabaseConfig"
  "H\000\0229\n\006sqlite\030\003 \001(\0132\'.ml_metadata.SqliteM"
  "etadataSourceConfigH\000\022;\n\npostgresql\030\005 \001("
  "\0132%.ml_metadata.PostgreSQLDatabaseConfig"
  "H\000\0220\n\rretry_options\030\004 \001(\0132\031.ml_metadata."
  "RetryOptionsB\010\n\006config\"Z\n\024GrpcChannelArg"
  "uments\022\"\n\032max_receive_message_length\030\001 \001"
  "(\003\022\036\n\026http2_max_ping_strikes\030\002 \001(\003\"\240\002\n\031M"
  "etadataStoreClientConfig\022\014\n\004host\030\001 \001(\t\022\014"
  "\n\004port\030\002 \001(\003\022D\n\nssl_config\030\003 \001(\01320.ml_me"
  "tadata.MetadataStoreClientConfig.SSLConf"
  "ig\022<\n\021channel_arguments\030\004 \001(\0132!.ml_metad"
  "ata.GrpcChannelArguments\022\032\n\022client_timeo"
  "ut_sec\030\005 \001(\001\032G\n\tSSLConfig\022\022\n\nclient_key\030"
  "\001 \001(\t\022\023\n\013server_cert\030\002 \001(\t\022\021\n\tcustom_ca\030"
  "\003 \001(\t\"\265\002\n\031MetadataStoreServerConfig\0228\n\021c"
  "onnection_config\030\001 \001(\0132\035.ml_metadata.Con"
  "nectionConfig\0228\n\021migration_options\030\003 \001(\013"
  "2\035.ml_metadata.MigrationOptions\022D\n\nssl_c"
  "onfig\030\002 \001(\01320.ml_metadata.MetadataStoreS"
  "erverConfig.SSLConfig\032^\n\tSSLConfig\022\022\n\nse"
  "rver_key\030\001 \001(\t\022\023\n\013server_cert\030\002 \001(\t\022\021\n\tc"
  "ustom_ca\030\003 \001(\t\022\025\n\rclient_verify\030\004 \001(\010\"\351\002"
  "\n\024ListOperationOptions\022\033\n\017max_result_siz"
  "e\030\001 \001(\005:\00220\022F\n\016order_by_field\030\002 \001(\0132..ml"
  "_metadata.ListOperationOptions.OrderByFi"
  "eld\022\027\n\017next_page_token\030\003 \001(\t\022\024\n\014filter_q"
  "uery\030\004 \001(\t\032\274\001\n\014OrderByField\022G\n\005field\030\001 \001"
  "(\01624.ml_metadata.ListOperationOptions.Or"
  "derByField.Field:\002ID\022\024\n\006is_asc\030\002 \001(\010:\004tr"
  "ue\"M\n\005Field\022\025\n\021FIELD_UNSPECIFIED\020\000\022\017\n\013CR"
  "EATE_TIME\020\001\022\024\n\020LAST_UPDATE_TIME\020\002\022\006\n\002ID\020"
  "\003\"\221\001\n\032ListOperationNextPageToken\022\021\n\tid_o"
  "ffset\030\001 \001(\003\022\024\n\014field_offset\030\002 \001(\003\0226\n\013set"
  "_options\030\003 \001(\0132!.ml_metadata.ListOperati"
  "onOptions\022\022\n\nlisted_ids\030\004 \003(\003\",\n\022Transac"
  "tionOptions\022\013\n\003tag\030\001 \001(\t*\t\010\350\007\020\200\200\200\200\002\"\300\002\n\030"
  "LineageGraphQueryOptions\022>\n\021artifacts_op"
  "tions\030\001 \001(\0132!.ml_metadata.ListOperationO"
  "ptionsH\000\022Q\n\017stop_conditions\030\002 \001(\01328.ml_m"
  "etadata.LineageGraphQueryOptions.Boundar"
  "yConstraint\022\031\n\rmax_node_size\030\003 \001(\003:\00220\032c"
  "\n\022BoundaryConstraint\022\024\n\014max_num_hops\030\001 \001"
  "(\003\022\032\n\022boundary_artifacts\030\002 \001(\t\022\033\n\023bounda"
  "ry_executions\030\003 \001(\t:\002\030\001B\r\n\013query_nodes\"\244"
  "\005\n\033LineageSubgraphQueryOptions\022T\n\022starti"
  "ng_artifacts\030\001 \001(\01326.ml_metadata.Lineage"
  "SubgraphQueryOptions.StartingNodesH\000\022U\n\023"
  "starting_executions\030\002 \001(\01326.ml_metadata."
  "LineageSubgraphQueryOptions.StartingNode"
  "sH\000\022\024\n\014max_num_hops\030\003 \001(\003\022E\n\tdirection\030\004"
  " \001(\01622.ml_metadata.LineageSubgraphQueryO"
  "ptions.Direction\022N\n\020ending_artifacts\030\005 \001"
  "(\01324.ml_metadata.LineageSubgraphQueryOpt"
  "ions.EndingNodes\022O\n\021ending_executions\030\006 "
  "\001(\01324.ml_metadata.LineageSubgraphQueryOp"
  "tions.EndingNodes\032%\n\rStartingNodes\022\024\n\014fi"
  "lter_query\030\001 \001(\t\032H\n\013EndingNodes\022\024\n\014filte"
  "r_query\030\001 \001(\t\022#\n\024include_ending_nodes\030\002 "
  "\001(\010:\005false\"W\n\tDirection\022\031\n\025DIRECTION_UNS"
  "PECIFIED\020\000\022\014\n\010UPSTREAM\020\001\022\016\n\nDOWNSTREAM\020\002"
  "\022\021\n\rBIDIRECTIONAL\020\003B\020\n\016starting_nodes*`\n"
  "\014PropertyType\022\013\n\007UNKNOWN\020\000\022\007\n\003INT\020\001\022\n\n\006D"
  "OUBLE\020\002\022\n\n\006STRING\020\003\022\n\n\006STRUCT\020\004\022\t\n\005PROTO"
  "\020\005\022\013\n\007BOOLEAN\020\006:f\n\025system_type_extension"
  "\022!.google.protobuf.EnumValueOptions\030\225\336\257\267"
  "\001 \001(\0132 .ml_metadata.SystemTypeExtension"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto = {
    false, false, 9919, descriptor_table_protodef_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto,
    "ml_metadata/proto/metadata_store.proto",
    &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once, descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_deps, 3, 56,
    schemas, file_default_instances, TableStruct_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto::offsets,
    file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto, file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto,
    file_level_service_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter() {
  return &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
namespace ml_metadata {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Artifact_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[0];
}
bool Artifact_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Artifact_State Artifact::UNKNOWN;
constexpr Artifact_State Artifact::PENDING;
constexpr Artifact_State Artifact::LIVE;
constexpr Artifact_State Artifact::MARKED_FOR_DELETION;
constexpr Artifact_State Artifact::DELETED;
constexpr Artifact_State Artifact::ABANDONED;
constexpr Artifact_State Artifact::REFERENCE;
constexpr Artifact_State Artifact::State_MIN;
constexpr Artifact_State Artifact::State_MAX;
constexpr int Artifact::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArtifactType_SystemDefinedBaseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[1];
}
bool ArtifactType_SystemDefinedBaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ArtifactType_SystemDefinedBaseType ArtifactType::UNSET;
constexpr ArtifactType_SystemDefinedBaseType ArtifactType::DATASET;
constexpr ArtifactType_SystemDefinedBaseType ArtifactType::MODEL;
constexpr ArtifactType_SystemDefinedBaseType ArtifactType::METRICS;
constexpr ArtifactType_SystemDefinedBaseType ArtifactType::STATISTICS;
constexpr ArtifactType_SystemDefinedBaseType ArtifactType::SystemDefinedBaseType_MIN;
constexpr ArtifactType_SystemDefinedBaseType ArtifactType::SystemDefinedBaseType_MAX;
constexpr int ArtifactType::SystemDefinedBaseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[2];
}
bool Event_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Event_Type Event::UNKNOWN;
constexpr Event_Type Event::DECLARED_OUTPUT;
constexpr Event_Type Event::DECLARED_INPUT;
constexpr Event_Type Event::INPUT;
constexpr Event_Type Event::OUTPUT;
constexpr Event_Type Event::INTERNAL_INPUT;
constexpr Event_Type Event::INTERNAL_OUTPUT;
constexpr Event_Type Event::PENDING_OUTPUT;
constexpr Event_Type Event::Type_MIN;
constexpr Event_Type Event::Type_MAX;
constexpr int Event::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Execution_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[3];
}
bool Execution_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Execution_State Execution::UNKNOWN;
constexpr Execution_State Execution::NEW;
constexpr Execution_State Execution::RUNNING;
constexpr Execution_State Execution::COMPLETE;
constexpr Execution_State Execution::FAILED;
constexpr Execution_State Execution::CACHED;
constexpr Execution_State Execution::CANCELED;
constexpr Execution_State Execution::State_MIN;
constexpr Execution_State Execution::State_MAX;
constexpr int Execution::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionType_SystemDefinedBaseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[4];
}
bool ExecutionType_SystemDefinedBaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExecutionType_SystemDefinedBaseType ExecutionType::UNSET;
constexpr ExecutionType_SystemDefinedBaseType ExecutionType::TRAIN;
constexpr ExecutionType_SystemDefinedBaseType ExecutionType::TRANSFORM;
constexpr ExecutionType_SystemDefinedBaseType ExecutionType::PROCESS;
constexpr ExecutionType_SystemDefinedBaseType ExecutionType::EVALUATE;
constexpr ExecutionType_SystemDefinedBaseType ExecutionType::DEPLOY;
constexpr ExecutionType_SystemDefinedBaseType ExecutionType::SystemDefinedBaseType_MIN;
constexpr ExecutionType_SystemDefinedBaseType ExecutionType::SystemDefinedBaseType_MAX;
constexpr int ExecutionType::SystemDefinedBaseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContextType_SystemDefinedBaseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[5];
}
bool ContextType_SystemDefinedBaseType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ContextType_SystemDefinedBaseType ContextType::UNSET;
constexpr ContextType_SystemDefinedBaseType ContextType::SystemDefinedBaseType_MIN;
constexpr ContextType_SystemDefinedBaseType ContextType::SystemDefinedBaseType_MAX;
constexpr int ContextType::SystemDefinedBaseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SqliteMetadataSourceConfig_ConnectionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[6];
}
bool SqliteMetadataSourceConfig_ConnectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SqliteMetadataSourceConfig_ConnectionMode SqliteMetadataSourceConfig::UNKNOWN;
constexpr SqliteMetadataSourceConfig_ConnectionMode SqliteMetadataSourceConfig::READONLY;
constexpr SqliteMetadataSourceConfig_ConnectionMode SqliteMetadataSourceConfig::READWRITE;
constexpr SqliteMetadataSourceConfig_ConnectionMode SqliteMetadataSourceConfig::READWRITE_OPENCREATE;
constexpr SqliteMetadataSourceConfig_ConnectionMode SqliteMetadataSourceConfig::ConnectionMode_MIN;
constexpr SqliteMetadataSourceConfig_ConnectionMode SqliteMetadataSourceConfig::ConnectionMode_MAX;
constexpr int SqliteMetadataSourceConfig::ConnectionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListOperationOptions_OrderByField_Field_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[7];
}
bool ListOperationOptions_OrderByField_Field_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ListOperationOptions_OrderByField_Field ListOperationOptions_OrderByField::FIELD_UNSPECIFIED;
constexpr ListOperationOptions_OrderByField_Field ListOperationOptions_OrderByField::CREATE_TIME;
constexpr ListOperationOptions_OrderByField_Field ListOperationOptions_OrderByField::LAST_UPDATE_TIME;
constexpr ListOperationOptions_OrderByField_Field ListOperationOptions_OrderByField::ID;
constexpr ListOperationOptions_OrderByField_Field ListOperationOptions_OrderByField::Field_MIN;
constexpr ListOperationOptions_OrderByField_Field ListOperationOptions_OrderByField::Field_MAX;
constexpr int ListOperationOptions_OrderByField::Field_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineageSubgraphQueryOptions_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[8];
}
bool LineageSubgraphQueryOptions_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LineageSubgraphQueryOptions_Direction LineageSubgraphQueryOptions::DIRECTION_UNSPECIFIED;
constexpr LineageSubgraphQueryOptions_Direction LineageSubgraphQueryOptions::UPSTREAM;
constexpr LineageSubgraphQueryOptions_Direction LineageSubgraphQueryOptions::DOWNSTREAM;
constexpr LineageSubgraphQueryOptions_Direction LineageSubgraphQueryOptions::BIDIRECTIONAL;
constexpr LineageSubgraphQueryOptions_Direction LineageSubgraphQueryOptions::Direction_MIN;
constexpr LineageSubgraphQueryOptions_Direction LineageSubgraphQueryOptions::Direction_MAX;
constexpr int LineageSubgraphQueryOptions::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto);
  return file_level_enum_descriptors_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[9];
}
bool PropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SystemTypeExtension::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemTypeExtension>()._impl_._has_bits_);
  static void set_has_type_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SystemTypeExtension::SystemTypeExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.SystemTypeExtension)
}
SystemTypeExtension::SystemTypeExtension(const SystemTypeExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemTypeExtension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type_name()) {
    _this->_impl_.type_name_.Set(from._internal_type_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.SystemTypeExtension)
}

inline void SystemTypeExtension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_name_){}
  };
  _impl_.type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemTypeExtension::~SystemTypeExtension() {
  // @@protoc_insertion_point(destructor:ml_metadata.SystemTypeExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemTypeExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_name_.Destroy();
}

void SystemTypeExtension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemTypeExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.SystemTypeExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.type_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemTypeExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.SystemTypeExtension.type_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemTypeExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.SystemTypeExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type_name().data(), static_cast<int>(this->_internal_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.SystemTypeExtension.type_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.SystemTypeExtension)
  return target;
}

size_t SystemTypeExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.SystemTypeExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string type_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemTypeExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemTypeExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemTypeExtension::GetClassData() const { return &_class_data_; }


void SystemTypeExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemTypeExtension*>(&to_msg);
  auto& from = static_cast<const SystemTypeExtension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.SystemTypeExtension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type_name()) {
    _this->_internal_set_type_name(from._internal_type_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemTypeExtension::CopyFrom(const SystemTypeExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.SystemTypeExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemTypeExtension::IsInitialized() const {
  return true;
}

void SystemTypeExtension::InternalSwap(SystemTypeExtension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_name_, lhs_arena,
      &other->_impl_.type_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemTypeExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[0]);
}

// ===================================================================

class Value::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& struct_value(const Value* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& proto_value(const Value* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
Value::_Internal::struct_value(const Value* msg) {
  return *msg->_impl_.value_.struct_value_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
Value::_Internal::proto_value(const Value* msg) {
  return *msg->_impl_.value_.proto_value_;
}
void Value::set_allocated_struct_value(::PROTOBUF_NAMESPACE_ID::Struct* struct_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (struct_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_value));
    if (message_arena != submessage_arena) {
      struct_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_value, submessage_arena);
    }
    set_has_struct_value();
    _impl_.value_.struct_value_ = struct_value;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.Value.struct_value)
}
void Value::clear_struct_value() {
  if (_internal_has_struct_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.struct_value_;
    }
    clear_has_value();
  }
}
void Value::set_allocated_proto_value(::PROTOBUF_NAMESPACE_ID::Any* proto_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (proto_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_value));
    if (message_arena != submessage_arena) {
      proto_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proto_value, submessage_arena);
    }
    set_has_proto_value();
    _impl_.value_.proto_value_ = proto_value;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.Value.proto_value)
}
void Value::clear_proto_value() {
  if (_internal_has_proto_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.proto_value_;
    }
    clear_has_value();
  }
}
Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Value* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kStructValue: {
      _this->_internal_mutable_struct_value()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
          from._internal_struct_value());
      break;
    }
    case kProtoValue: {
      _this->_internal_mutable_proto_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_proto_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Value)
}

inline void Value::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:ml_metadata.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Value::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:ml_metadata.Value)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kStructValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.struct_value_;
      }
      break;
    }
    case kProtoValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.proto_value_;
      }
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 int_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string string_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Value.string_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct struct_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any proto_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_proto_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_int_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
      break;
    }
    case kStringValue: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.Value.string_value");
      target = stream->WriteStringMaybeAliased(
          3, this->_internal_string_value(), target);
      break;
    }
    case kStructValue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::struct_value(this),
          _Internal::struct_value(this).GetCachedSize(), target, stream);
      break;
    }
    case kProtoValue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::proto_value(this),
          _Internal::proto_value(this).GetCachedSize(), target, stream);
      break;
    }
    case kBoolValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_bool_value(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // int64 int_value = 1;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int_value());
      break;
    }
    // double double_value = 2;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 3;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // .google.protobuf.Struct struct_value = 4;
    case kStructValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.struct_value_);
      break;
    }
    // .google.protobuf.Any proto_value = 5;
    case kProtoValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.proto_value_);
      break;
    }
    // bool bool_value = 6;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }


void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Value*>(&to_msg);
  auto& from = static_cast<const Value&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Value)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kStructValue: {
      _this->_internal_mutable_struct_value()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
          from._internal_struct_value());
      break;
    }
    case kProtoValue: {
      _this->_internal_mutable_proto_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_proto_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[1]);
}

// ===================================================================

Artifact_PropertiesEntry_DoNotUse::Artifact_PropertiesEntry_DoNotUse() {}
Artifact_PropertiesEntry_DoNotUse::Artifact_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Artifact_PropertiesEntry_DoNotUse::MergeFrom(const Artifact_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Artifact_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[2]);
}

// ===================================================================

Artifact_CustomPropertiesEntry_DoNotUse::Artifact_CustomPropertiesEntry_DoNotUse() {}
Artifact_CustomPropertiesEntry_DoNotUse::Artifact_CustomPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Artifact_CustomPropertiesEntry_DoNotUse::MergeFrom(const Artifact_CustomPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Artifact_CustomPropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[3]);
}

// ===================================================================

class Artifact::_Internal {
 public:
  using HasBits = decltype(std::declval<Artifact>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_external_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_create_time_since_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_update_time_since_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& system_metadata(const Artifact* msg);
  static void set_has_system_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Artifact::_Internal::system_metadata(const Artifact* msg) {
  return *msg->_impl_.system_metadata_;
}
void Artifact::clear_system_metadata() {
  if (_impl_.system_metadata_ != nullptr) _impl_.system_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Artifact::Artifact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Artifact::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Artifact)
}
Artifact::Artifact(const Artifact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Artifact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{}
    , /*decltype(_impl_.custom_properties_)*/{}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_id_){}
    , decltype(_impl_.create_time_since_epoch_){}
    , decltype(_impl_.last_update_time_since_epoch_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.custom_properties_.MergeFrom(from._impl_.custom_properties_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uri()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_external_id()) {
    _this->_impl_.external_id_.Set(from._internal_external_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_system_metadata()) {
    _this->_impl_.system_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.system_metadata_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Artifact)
}

inline void Artifact::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.custom_properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.type_id_){int64_t{0}}
    , decltype(_impl_.create_time_since_epoch_){int64_t{0}}
    , decltype(_impl_.last_update_time_since_epoch_){int64_t{0}}
    , decltype(_impl_.state_){0}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Artifact::~Artifact() {
  // @@protoc_insertion_point(destructor:ml_metadata.Artifact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Artifact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.custom_properties_.Destruct();
  _impl_.custom_properties_.~MapField();
  _impl_.uri_.Destroy();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.external_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.system_metadata_;
}

void Artifact::ArenaDtor(void* object) {
  Artifact* _this = reinterpret_cast< Artifact* >(object);
  _this->_impl_.properties_.Destruct();
  _this->_impl_.custom_properties_.Destruct();
}
void Artifact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Artifact::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Artifact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.custom_properties_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.external_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.system_metadata_ != nullptr);
      _impl_.system_metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.create_time_since_epoch_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.create_time_since_epoch_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.last_update_time_since_epoch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.last_update_time_since_epoch_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Artifact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type_id(&has_bits);
          _impl_.type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string uri = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Artifact.uri");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, .ml_metadata.Value> properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .ml_metadata.Value> custom_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.custom_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.Artifact.State state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ml_metadata::Artifact_State_IsValid(val))) {
            _internal_set_state(static_cast<::ml_metadata::Artifact_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Artifact.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Artifact.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 create_time_since_epoch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_create_time_since_epoch(&has_bits);
          _impl_.create_time_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_update_time_since_epoch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_last_update_time_since_epoch(&has_bits);
          _impl_.last_update_time_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string external_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_external_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Artifact.external_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Any system_metadata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Artifact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Artifact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional int64 type_id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_type_id(), target);
  }

  // optional string uri = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Artifact.uri");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uri(), target);
  }

  // map<string, .ml_metadata.Value> properties = 4;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::Value>;
    using WireHelper = Artifact_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.Artifact.PropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .ml_metadata.Value> custom_properties = 5;
  if (!this->_internal_custom_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::Value>;
    using WireHelper = Artifact_CustomPropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_custom_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.Artifact.CustomPropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .ml_metadata.Artifact.State state = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state(), target);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Artifact.name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name(), target);
  }

  // optional string type = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Artifact.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  // optional int64 create_time_since_epoch = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_create_time_since_epoch(), target);
  }

  // optional int64 last_update_time_since_epoch = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_last_update_time_since_epoch(), target);
  }

  // optional string external_id = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Artifact.external_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_external_id(), target);
  }

  // optional .google.protobuf.Any system_metadata = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::system_metadata(this),
        _Internal::system_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Artifact)
  return target;
}

size_t Artifact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Artifact)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ml_metadata.Value> properties = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::Value >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += Artifact_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .ml_metadata.Value> custom_properties = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::Value >::const_iterator
      it = this->_internal_custom_properties().begin();
      it != this->_internal_custom_properties().end(); ++it) {
    total_size += Artifact_CustomPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string uri = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
    }

    // optional string name = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string type = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string external_id = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_id());
    }

    // optional .google.protobuf.Any system_metadata = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_metadata_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional int64 type_id = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_type_id());
    }

    // optional int64 create_time_since_epoch = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time_since_epoch());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 last_update_time_since_epoch = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_update_time_since_epoch());
    }

    // optional .ml_metadata.Artifact.State state = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Artifact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Artifact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Artifact::GetClassData() const { return &_class_data_; }


void Artifact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Artifact*>(&to_msg);
  auto& from = static_cast<const Artifact&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Artifact)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.custom_properties_.MergeFrom(from._impl_.custom_properties_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_external_id(from._internal_external_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_system_metadata()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_system_metadata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_id_ = from._impl_.type_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.create_time_since_epoch_ = from._impl_.create_time_since_epoch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.last_update_time_since_epoch_ = from._impl_.last_update_time_since_epoch_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Artifact::CopyFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Artifact::IsInitialized() const {
  return true;
}

void Artifact::InternalSwap(Artifact* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  _impl_.custom_properties_.InternalSwap(&other->_impl_.custom_properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.external_id_, lhs_arena,
      &other->_impl_.external_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Artifact, _impl_.state_)
      + sizeof(Artifact::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Artifact, _impl_.system_metadata_)>(
          reinterpret_cast<char*>(&_impl_.system_metadata_),
          reinterpret_cast<char*>(&other->_impl_.system_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Artifact::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[4]);
}

// ===================================================================

ArtifactType_PropertiesEntry_DoNotUse::ArtifactType_PropertiesEntry_DoNotUse() {}
ArtifactType_PropertiesEntry_DoNotUse::ArtifactType_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ArtifactType_PropertiesEntry_DoNotUse::MergeFrom(const ArtifactType_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ArtifactType_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[5]);
}

// ===================================================================

class ArtifactType::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactType>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_external_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_base_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ArtifactType::ArtifactType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ArtifactType::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ArtifactType)
}
ArtifactType::ArtifactType(const ArtifactType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArtifactType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.base_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_external_id()) {
    _this->_impl_.external_id_.Set(from._internal_external_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.base_type_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ArtifactType)
}

inline void ArtifactType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.base_type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ArtifactType::~ArtifactType() {
  // @@protoc_insertion_point(destructor:ml_metadata.ArtifactType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ArtifactType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.description_.Destroy();
  _impl_.external_id_.Destroy();
}

void ArtifactType::ArenaDtor(void* object) {
  ArtifactType* _this = reinterpret_cast< ArtifactType* >(object);
  _this->_impl_.properties_.Destruct();
}
void ArtifactType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArtifactType::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ArtifactType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.external_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_type_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.base_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ArtifactType.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, .ml_metadata.PropertyType> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&_impl_.properties_, ::ml_metadata::PropertyType_IsValid, 3, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ArtifactType.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ArtifactType.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.ArtifactType.SystemDefinedBaseType base_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ml_metadata::ArtifactType_SystemDefinedBaseType_IsValid(val))) {
            _internal_set_base_type(static_cast<::ml_metadata::ArtifactType_SystemDefinedBaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string external_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_external_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ArtifactType.external_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArtifactType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ArtifactType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ArtifactType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // map<string, .ml_metadata.PropertyType> properties = 3;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::PropertyType>;
    using WireHelper = ArtifactType_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.ArtifactType.PropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional string version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ArtifactType.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ArtifactType.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // optional .ml_metadata.ArtifactType.SystemDefinedBaseType base_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_base_type(), target);
  }

  // optional string external_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ArtifactType.external_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_external_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ArtifactType)
  return target;
}

size_t ArtifactType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ArtifactType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ml_metadata.PropertyType> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::PropertyType >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += ArtifactType_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string external_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_id());
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional .ml_metadata.ArtifactType.SystemDefinedBaseType base_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_base_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArtifactType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArtifactType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArtifactType::GetClassData() const { return &_class_data_; }


void ArtifactType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArtifactType*>(&to_msg);
  auto& from = static_cast<const ArtifactType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ArtifactType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_external_id(from._internal_external_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.base_type_ = from._impl_.base_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArtifactType::CopyFrom(const ArtifactType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ArtifactType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactType::IsInitialized() const {
  return true;
}

void ArtifactType::InternalSwap(ArtifactType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.external_id_, lhs_arena,
      &other->_impl_.external_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactType, _impl_.base_type_)
      + sizeof(ArtifactType::_impl_.base_type_)
      - PROTOBUF_FIELD_OFFSET(ArtifactType, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[6]);
}

// ===================================================================

class Event_Path_Step::_Internal {
 public:
};

Event_Path_Step::Event_Path_Step(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Event.Path.Step)
}
Event_Path_Step::Event_Path_Step(const Event_Path_Step& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Event_Path_Step* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kIndex: {
      _this->_internal_set_index(from._internal_index());
      break;
    }
    case kKey: {
      _this->_internal_set_key(from._internal_key());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Event.Path.Step)
}

inline void Event_Path_Step::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

Event_Path_Step::~Event_Path_Step() {
  // @@protoc_insertion_point(destructor:ml_metadata.Event.Path.Step)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event_Path_Step::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Event_Path_Step::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event_Path_Step::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:ml_metadata.Event.Path.Step)
  switch (value_case()) {
    case kIndex: {
      // No need to clear
      break;
    }
    case kKey: {
      _impl_.value_.key_.Destroy();
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Event_Path_Step::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Event.Path.Step)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_Path_Step::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Event.Path.Step.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event_Path_Step::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Event.Path.Step)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kIndex: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
      break;
    }
    case kKey: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.Event.Path.Step.key");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_key(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Event.Path.Step)
  return target;
}

size_t Event_Path_Step::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Event.Path.Step)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // int64 index = 1;
    case kIndex: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
      break;
    }
    // string key = 2;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event_Path_Step::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Event_Path_Step::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event_Path_Step::GetClassData() const { return &_class_data_; }


void Event_Path_Step::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Event_Path_Step*>(&to_msg);
  auto& from = static_cast<const Event_Path_Step&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Event.Path.Step)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kIndex: {
      _this->_internal_set_index(from._internal_index());
      break;
    }
    case kKey: {
      _this->_internal_set_key(from._internal_key());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event_Path_Step::CopyFrom(const Event_Path_Step& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Event.Path.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Path_Step::IsInitialized() const {
  return true;
}

void Event_Path_Step::InternalSwap(Event_Path_Step* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_Path_Step::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[7]);
}

// ===================================================================

class Event_Path::_Internal {
 public:
};

Event_Path::Event_Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Event.Path)
}
Event_Path::Event_Path(const Event_Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Event_Path* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.steps_){from._impl_.steps_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Event.Path)
}

inline void Event_Path::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.steps_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Event_Path::~Event_Path() {
  // @@protoc_insertion_point(destructor:ml_metadata.Event.Path)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event_Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.steps_.~RepeatedPtrField();
}

void Event_Path::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event_Path::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Event.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_Path::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ml_metadata.Event.Path.Step steps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event_Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Event.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ml_metadata.Event.Path.Step steps = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_steps_size()); i < n; i++) {
    const auto& repfield = this->_internal_steps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Event.Path)
  return target;
}

size_t Event_Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Event.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ml_metadata.Event.Path.Step steps = 1;
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->_impl_.steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event_Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Event_Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event_Path::GetClassData() const { return &_class_data_; }


void Event_Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Event_Path*>(&to_msg);
  auto& from = static_cast<const Event_Path&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Event.Path)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.steps_.MergeFrom(from._impl_.steps_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event_Path::CopyFrom(const Event_Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Event.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Path::IsInitialized() const {
  return true;
}

void Event_Path::InternalSwap(Event_Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.steps_.InternalSwap(&other->_impl_.steps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[8]);
}

// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._impl_._has_bits_);
  static void set_has_artifact_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_execution_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ml_metadata::Event_Path& path(const Event* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_milliseconds_since_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& system_metadata(const Event* msg);
  static void set_has_system_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ml_metadata::Event_Path&
Event::_Internal::path(const Event* msg) {
  return *msg->_impl_.path_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
Event::_Internal::system_metadata(const Event* msg) {
  return *msg->_impl_.system_metadata_;
}
void Event::clear_system_metadata() {
  if (_impl_.system_metadata_ != nullptr) _impl_.system_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.artifact_id_){}
    , decltype(_impl_.execution_id_){}
    , decltype(_impl_.milliseconds_since_epoch_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    _this->_impl_.path_ = new ::ml_metadata::Event_Path(*from._impl_.path_);
  }
  if (from._internal_has_system_metadata()) {
    _this->_impl_.system_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.system_metadata_);
  }
  ::memcpy(&_impl_.artifact_id_, &from._impl_.artifact_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.artifact_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Event)
}

inline void Event::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.artifact_id_){int64_t{0}}
    , decltype(_impl_.execution_id_){int64_t{0}}
    , decltype(_impl_.milliseconds_since_epoch_){int64_t{0}}
    , decltype(_impl_.type_){0}
  };
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:ml_metadata.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_;
  if (this != internal_default_instance()) delete _impl_.system_metadata_;
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.path_ != nullptr);
      _impl_.path_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.system_metadata_ != nullptr);
      _impl_.system_metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.artifact_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.artifact_id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 artifact_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_artifact_id(&has_bits);
          _impl_.artifact_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 execution_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_execution_id(&has_bits);
          _impl_.execution_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.Event.Path path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.Event.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ml_metadata::Event_Type_IsValid(val))) {
            _internal_set_type(static_cast<::ml_metadata::Event_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 milliseconds_since_epoch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_milliseconds_since_epoch(&has_bits);
          _impl_.milliseconds_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Any system_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 artifact_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_artifact_id(), target);
  }

  // optional int64 execution_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_execution_id(), target);
  }

  // optional .ml_metadata.Event.Path path = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::path(this),
        _Internal::path(this).GetCachedSize(), target, stream);
  }

  // optional .ml_metadata.Event.Type type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional int64 milliseconds_since_epoch = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_milliseconds_since_epoch(), target);
  }

  // optional .google.protobuf.Any system_metadata = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::system_metadata(this),
        _Internal::system_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .ml_metadata.Event.Path path = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_);
    }

    // optional .google.protobuf.Any system_metadata = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_metadata_);
    }

    // optional int64 artifact_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_artifact_id());
    }

    // optional int64 execution_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_id());
    }

    // optional int64 milliseconds_since_epoch = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_milliseconds_since_epoch());
    }

    // optional .ml_metadata.Event.Type type = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Event)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_path()->::ml_metadata::Event_Path::MergeFrom(
          from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_system_metadata()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_system_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.artifact_id_ = from._impl_.artifact_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.execution_id_ = from._impl_.execution_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.milliseconds_since_epoch_ = from._impl_.milliseconds_since_epoch_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.type_)
      + sizeof(Event::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.path_)>(
          reinterpret_cast<char*>(&_impl_.path_),
          reinterpret_cast<char*>(&other->_impl_.path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[9]);
}

// ===================================================================

Execution_PropertiesEntry_DoNotUse::Execution_PropertiesEntry_DoNotUse() {}
Execution_PropertiesEntry_DoNotUse::Execution_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Execution_PropertiesEntry_DoNotUse::MergeFrom(const Execution_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Execution_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[10]);
}

// ===================================================================

Execution_CustomPropertiesEntry_DoNotUse::Execution_CustomPropertiesEntry_DoNotUse() {}
Execution_CustomPropertiesEntry_DoNotUse::Execution_CustomPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Execution_CustomPropertiesEntry_DoNotUse::MergeFrom(const Execution_CustomPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Execution_CustomPropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[11]);
}

// ===================================================================

class Execution::_Internal {
 public:
  using HasBits = decltype(std::declval<Execution>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_external_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_known_state(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_create_time_since_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_update_time_since_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& system_metadata(const Execution* msg);
  static void set_has_system_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Execution::_Internal::system_metadata(const Execution* msg) {
  return *msg->_impl_.system_metadata_;
}
void Execution::clear_system_metadata() {
  if (_impl_.system_metadata_ != nullptr) _impl_.system_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Execution::Execution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Execution::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Execution)
}
Execution::Execution(const Execution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Execution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{}
    , /*decltype(_impl_.custom_properties_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_id_){}
    , decltype(_impl_.create_time_since_epoch_){}
    , decltype(_impl_.last_update_time_since_epoch_){}
    , decltype(_impl_.last_known_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.custom_properties_.MergeFrom(from._impl_.custom_properties_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_external_id()) {
    _this->_impl_.external_id_.Set(from._internal_external_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_system_metadata()) {
    _this->_impl_.system_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.system_metadata_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_known_state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.last_known_state_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Execution)
}

inline void Execution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.custom_properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.type_id_){int64_t{0}}
    , decltype(_impl_.create_time_since_epoch_){int64_t{0}}
    , decltype(_impl_.last_update_time_since_epoch_){int64_t{0}}
    , decltype(_impl_.last_known_state_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Execution::~Execution() {
  // @@protoc_insertion_point(destructor:ml_metadata.Execution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Execution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.custom_properties_.Destruct();
  _impl_.custom_properties_.~MapField();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.external_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.system_metadata_;
}

void Execution::ArenaDtor(void* object) {
  Execution* _this = reinterpret_cast< Execution* >(object);
  _this->_impl_.properties_.Destruct();
  _this->_impl_.custom_properties_.Destruct();
}
void Execution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Execution::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Execution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.custom_properties_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.external_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.system_metadata_ != nullptr);
      _impl_.system_metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_update_time_since_epoch_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.last_update_time_since_epoch_));
  }
  _impl_.last_known_state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Execution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type_id(&has_bits);
          _impl_.type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.Execution.State last_known_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ml_metadata::Execution_State_IsValid(val))) {
            _internal_set_last_known_state(static_cast<::ml_metadata::Execution_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // map<string, .ml_metadata.Value> properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .ml_metadata.Value> custom_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.custom_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Execution.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Execution.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 create_time_since_epoch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_create_time_since_epoch(&has_bits);
          _impl_.create_time_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_update_time_since_epoch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_last_update_time_since_epoch(&has_bits);
          _impl_.last_update_time_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string external_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_external_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Execution.external_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Any system_metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Execution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Execution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional int64 type_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_type_id(), target);
  }

  // optional .ml_metadata.Execution.State last_known_state = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_last_known_state(), target);
  }

  // map<string, .ml_metadata.Value> properties = 4;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::Value>;
    using WireHelper = Execution_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.Execution.PropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .ml_metadata.Value> custom_properties = 5;
  if (!this->_internal_custom_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::Value>;
    using WireHelper = Execution_CustomPropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_custom_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.Execution.CustomPropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Execution.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // optional string type = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Execution.type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_type(), target);
  }

  // optional int64 create_time_since_epoch = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_create_time_since_epoch(), target);
  }

  // optional int64 last_update_time_since_epoch = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_last_update_time_since_epoch(), target);
  }

  // optional string external_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Execution.external_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_external_id(), target);
  }

  // optional .google.protobuf.Any system_metadata = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::system_metadata(this),
        _Internal::system_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Execution)
  return target;
}

size_t Execution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Execution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ml_metadata.Value> properties = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::Value >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += Execution_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .ml_metadata.Value> custom_properties = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::Value >::const_iterator
      it = this->_internal_custom_properties().begin();
      it != this->_internal_custom_properties().end(); ++it) {
    total_size += Execution_CustomPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string type = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string external_id = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_id());
    }

    // optional .google.protobuf.Any system_metadata = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_metadata_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional int64 type_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_type_id());
    }

    // optional int64 create_time_since_epoch = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time_since_epoch());
    }

    // optional int64 last_update_time_since_epoch = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_update_time_since_epoch());
    }

  }
  // optional .ml_metadata.Execution.State last_known_state = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_last_known_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Execution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Execution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Execution::GetClassData() const { return &_class_data_; }


void Execution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Execution*>(&to_msg);
  auto& from = static_cast<const Execution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Execution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.custom_properties_.MergeFrom(from._impl_.custom_properties_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_external_id(from._internal_external_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_system_metadata()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_system_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_id_ = from._impl_.type_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.create_time_since_epoch_ = from._impl_.create_time_since_epoch_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.last_update_time_since_epoch_ = from._impl_.last_update_time_since_epoch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_last_known_state(from._internal_last_known_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Execution::CopyFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execution::IsInitialized() const {
  return true;
}

void Execution::InternalSwap(Execution* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  _impl_.custom_properties_.InternalSwap(&other->_impl_.custom_properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.external_id_, lhs_arena,
      &other->_impl_.external_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Execution, _impl_.last_known_state_)
      + sizeof(Execution::_impl_.last_known_state_)
      - PROTOBUF_FIELD_OFFSET(Execution, _impl_.system_metadata_)>(
          reinterpret_cast<char*>(&_impl_.system_metadata_),
          reinterpret_cast<char*>(&other->_impl_.system_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Execution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[12]);
}

// ===================================================================

ExecutionType_PropertiesEntry_DoNotUse::ExecutionType_PropertiesEntry_DoNotUse() {}
ExecutionType_PropertiesEntry_DoNotUse::ExecutionType_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExecutionType_PropertiesEntry_DoNotUse::MergeFrom(const ExecutionType_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ExecutionType_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[13]);
}

// ===================================================================

class ExecutionType::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecutionType>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_external_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ml_metadata::ArtifactStructType& input_type(const ExecutionType* msg);
  static void set_has_input_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ml_metadata::ArtifactStructType& output_type(const ExecutionType* msg);
  static void set_has_output_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ml_metadata::ArtifactStructType&
ExecutionType::_Internal::input_type(const ExecutionType* msg) {
  return *msg->_impl_.input_type_;
}
const ::ml_metadata::ArtifactStructType&
ExecutionType::_Internal::output_type(const ExecutionType* msg) {
  return *msg->_impl_.output_type_;
}
ExecutionType::ExecutionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ExecutionType::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ExecutionType)
}
ExecutionType::ExecutionType(const ExecutionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecutionType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.input_type_){nullptr}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.base_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_external_id()) {
    _this->_impl_.external_id_.Set(from._internal_external_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_input_type()) {
    _this->_impl_.input_type_ = new ::ml_metadata::ArtifactStructType(*from._impl_.input_type_);
  }
  if (from._internal_has_output_type()) {
    _this->_impl_.output_type_ = new ::ml_metadata::ArtifactStructType(*from._impl_.output_type_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.base_type_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ExecutionType)
}

inline void ExecutionType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.input_type_){nullptr}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.base_type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecutionType::~ExecutionType() {
  // @@protoc_insertion_point(destructor:ml_metadata.ExecutionType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ExecutionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.description_.Destroy();
  _impl_.external_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.input_type_;
  if (this != internal_default_instance()) delete _impl_.output_type_;
}

void ExecutionType::ArenaDtor(void* object) {
  ExecutionType* _this = reinterpret_cast< ExecutionType* >(object);
  _this->_impl_.properties_.Destruct();
}
void ExecutionType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecutionType::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ExecutionType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.external_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.input_type_ != nullptr);
      _impl_.input_type_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.output_type_ != nullptr);
      _impl_.output_type_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_type_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.base_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ExecutionType.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, .ml_metadata.PropertyType> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&_impl_.properties_, ::ml_metadata::PropertyType_IsValid, 3, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.ArtifactStructType input_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.ArtifactStructType output_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ExecutionType.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ExecutionType.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.ExecutionType.SystemDefinedBaseType base_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ml_metadata::ExecutionType_SystemDefinedBaseType_IsValid(val))) {
            _internal_set_base_type(static_cast<::ml_metadata::ExecutionType_SystemDefinedBaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string external_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_external_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ExecutionType.external_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecutionType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ExecutionType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ExecutionType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // map<string, .ml_metadata.PropertyType> properties = 3;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::PropertyType>;
    using WireHelper = ExecutionType_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.ExecutionType.PropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .ml_metadata.ArtifactStructType input_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::input_type(this),
        _Internal::input_type(this).GetCachedSize(), target, stream);
  }

  // optional .ml_metadata.ArtifactStructType output_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::output_type(this),
        _Internal::output_type(this).GetCachedSize(), target, stream);
  }

  // optional string version = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ExecutionType.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  // optional string description = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ExecutionType.description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  // optional .ml_metadata.ExecutionType.SystemDefinedBaseType base_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_base_type(), target);
  }

  // optional string external_id = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ExecutionType.external_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_external_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ExecutionType)
  return target;
}

size_t ExecutionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ExecutionType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ml_metadata.PropertyType> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::PropertyType >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += ExecutionType_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string description = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string external_id = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_id());
    }

    // optional .ml_metadata.ArtifactStructType input_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.input_type_);
    }

    // optional .ml_metadata.ArtifactStructType output_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_type_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional .ml_metadata.ExecutionType.SystemDefinedBaseType base_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_base_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecutionType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionType::GetClassData() const { return &_class_data_; }


void ExecutionType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecutionType*>(&to_msg);
  auto& from = static_cast<const ExecutionType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ExecutionType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_external_id(from._internal_external_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_input_type()->::ml_metadata::ArtifactStructType::MergeFrom(
          from._internal_input_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_output_type()->::ml_metadata::ArtifactStructType::MergeFrom(
          from._internal_output_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.base_type_ = from._impl_.base_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionType::CopyFrom(const ExecutionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ExecutionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionType::IsInitialized() const {
  return true;
}

void ExecutionType::InternalSwap(ExecutionType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.external_id_, lhs_arena,
      &other->_impl_.external_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionType, _impl_.base_type_)
      + sizeof(ExecutionType::_impl_.base_type_)
      - PROTOBUF_FIELD_OFFSET(ExecutionType, _impl_.input_type_)>(
          reinterpret_cast<char*>(&_impl_.input_type_),
          reinterpret_cast<char*>(&other->_impl_.input_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[14]);
}

// ===================================================================

ContextType_PropertiesEntry_DoNotUse::ContextType_PropertiesEntry_DoNotUse() {}
ContextType_PropertiesEntry_DoNotUse::ContextType_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContextType_PropertiesEntry_DoNotUse::MergeFrom(const ContextType_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContextType_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[15]);
}

// ===================================================================

class ContextType::_Internal {
 public:
  using HasBits = decltype(std::declval<ContextType>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_external_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_base_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ContextType::ContextType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ContextType::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ContextType)
}
ContextType::ContextType(const ContextType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContextType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.base_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_external_id()) {
    _this->_impl_.external_id_.Set(from._internal_external_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.base_type_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ContextType)
}

inline void ContextType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.base_type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContextType::~ContextType() {
  // @@protoc_insertion_point(destructor:ml_metadata.ContextType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ContextType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.description_.Destroy();
  _impl_.external_id_.Destroy();
}

void ContextType::ArenaDtor(void* object) {
  ContextType* _this = reinterpret_cast< ContextType* >(object);
  _this->_impl_.properties_.Destruct();
}
void ContextType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContextType::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ContextType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.external_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_type_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.base_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ContextType.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, .ml_metadata.PropertyType> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&_impl_.properties_, ::ml_metadata::PropertyType_IsValid, 3, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ContextType.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ContextType.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.ContextType.SystemDefinedBaseType base_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ml_metadata::ContextType_SystemDefinedBaseType_IsValid(val))) {
            _internal_set_base_type(static_cast<::ml_metadata::ContextType_SystemDefinedBaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string external_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_external_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ContextType.external_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ContextType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ContextType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // map<string, .ml_metadata.PropertyType> properties = 3;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::PropertyType>;
    using WireHelper = ContextType_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.ContextType.PropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional string version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ContextType.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ContextType.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // optional .ml_metadata.ContextType.SystemDefinedBaseType base_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_base_type(), target);
  }

  // optional string external_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ContextType.external_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_external_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ContextType)
  return target;
}

size_t ContextType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ContextType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ml_metadata.PropertyType> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::PropertyType >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += ContextType_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string external_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_id());
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional .ml_metadata.ContextType.SystemDefinedBaseType base_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_base_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContextType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextType::GetClassData() const { return &_class_data_; }


void ContextType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContextType*>(&to_msg);
  auto& from = static_cast<const ContextType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ContextType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_external_id(from._internal_external_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.base_type_ = from._impl_.base_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextType::CopyFrom(const ContextType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ContextType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextType::IsInitialized() const {
  return true;
}

void ContextType::InternalSwap(ContextType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.external_id_, lhs_arena,
      &other->_impl_.external_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContextType, _impl_.base_type_)
      + sizeof(ContextType::_impl_.base_type_)
      - PROTOBUF_FIELD_OFFSET(ContextType, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[16]);
}

// ===================================================================

Context_PropertiesEntry_DoNotUse::Context_PropertiesEntry_DoNotUse() {}
Context_PropertiesEntry_DoNotUse::Context_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Context_PropertiesEntry_DoNotUse::MergeFrom(const Context_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Context_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[17]);
}

// ===================================================================

Context_CustomPropertiesEntry_DoNotUse::Context_CustomPropertiesEntry_DoNotUse() {}
Context_CustomPropertiesEntry_DoNotUse::Context_CustomPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Context_CustomPropertiesEntry_DoNotUse::MergeFrom(const Context_CustomPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Context_CustomPropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[18]);
}

// ===================================================================

class Context::_Internal {
 public:
  using HasBits = decltype(std::declval<Context>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_external_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_create_time_since_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_update_time_since_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& system_metadata(const Context* msg);
  static void set_has_system_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Context::_Internal::system_metadata(const Context* msg) {
  return *msg->_impl_.system_metadata_;
}
void Context::clear_system_metadata() {
  if (_impl_.system_metadata_ != nullptr) _impl_.system_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Context::Context(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Context::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Context)
}
Context::Context(const Context& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Context* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{}
    , /*decltype(_impl_.custom_properties_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_id_){}
    , decltype(_impl_.create_time_since_epoch_){}
    , decltype(_impl_.last_update_time_since_epoch_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.custom_properties_.MergeFrom(from._impl_.custom_properties_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_external_id()) {
    _this->_impl_.external_id_.Set(from._internal_external_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_system_metadata()) {
    _this->_impl_.system_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.system_metadata_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_update_time_since_epoch_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.last_update_time_since_epoch_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Context)
}

inline void Context::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.custom_properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.external_id_){}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.type_id_){int64_t{0}}
    , decltype(_impl_.create_time_since_epoch_){int64_t{0}}
    , decltype(_impl_.last_update_time_since_epoch_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.external_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:ml_metadata.Context)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Context::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.custom_properties_.Destruct();
  _impl_.custom_properties_.~MapField();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.external_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.system_metadata_;
}

void Context::ArenaDtor(void* object) {
  Context* _this = reinterpret_cast< Context* >(object);
  _this->_impl_.properties_.Destruct();
  _this->_impl_.custom_properties_.Destruct();
}
void Context::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Context)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.custom_properties_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.external_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.system_metadata_ != nullptr);
      _impl_.system_metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_update_time_since_epoch_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.last_update_time_since_epoch_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Context::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type_id(&has_bits);
          _impl_.type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Context.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, .ml_metadata.Value> properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .ml_metadata.Value> custom_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.custom_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Context.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 create_time_since_epoch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_create_time_since_epoch(&has_bits);
          _impl_.create_time_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_update_time_since_epoch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_last_update_time_since_epoch(&has_bits);
          _impl_.last_update_time_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string external_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_external_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.Context.external_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Any system_metadata = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Context::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Context)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional int64 type_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_type_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Context.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // map<string, .ml_metadata.Value> properties = 4;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::Value>;
    using WireHelper = Context_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.Context.PropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .ml_metadata.Value> custom_properties = 5;
  if (!this->_internal_custom_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::Value>;
    using WireHelper = Context_CustomPropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_custom_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.Context.CustomPropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional string type = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Context.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  // optional int64 create_time_since_epoch = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_create_time_since_epoch(), target);
  }

  // optional int64 last_update_time_since_epoch = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_last_update_time_since_epoch(), target);
  }

  // optional string external_id = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.Context.external_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_external_id(), target);
  }

  // optional .google.protobuf.Any system_metadata = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::system_metadata(this),
        _Internal::system_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Context)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ml_metadata.Value> properties = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::Value >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += Context_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .ml_metadata.Value> custom_properties = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::Value >::const_iterator
      it = this->_internal_custom_properties().begin();
      it != this->_internal_custom_properties().end(); ++it) {
    total_size += Context_CustomPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string type = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string external_id = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_id());
    }

    // optional .google.protobuf.Any system_metadata = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_metadata_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional int64 type_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_type_id());
    }

    // optional int64 create_time_since_epoch = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time_since_epoch());
    }

    // optional int64 last_update_time_since_epoch = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_update_time_since_epoch());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Context::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Context::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Context::GetClassData() const { return &_class_data_; }


void Context::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Context*>(&to_msg);
  auto& from = static_cast<const Context&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Context)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.custom_properties_.MergeFrom(from._impl_.custom_properties_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_external_id(from._internal_external_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_system_metadata()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_system_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_id_ = from._impl_.type_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.create_time_since_epoch_ = from._impl_.create_time_since_epoch_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.last_update_time_since_epoch_ = from._impl_.last_update_time_since_epoch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  return true;
}

void Context::InternalSwap(Context* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  _impl_.custom_properties_.InternalSwap(&other->_impl_.custom_properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.external_id_, lhs_arena,
      &other->_impl_.external_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Context, _impl_.last_update_time_since_epoch_)
      + sizeof(Context::_impl_.last_update_time_since_epoch_)
      - PROTOBUF_FIELD_OFFSET(Context, _impl_.system_metadata_)>(
          reinterpret_cast<char*>(&_impl_.system_metadata_),
          reinterpret_cast<char*>(&other->_impl_.system_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Context::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[19]);
}

// ===================================================================

class Attribution::_Internal {
 public:
  using HasBits = decltype(std::declval<Attribution>()._impl_._has_bits_);
  static void set_has_artifact_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& system_metadata(const Attribution* msg);
  static void set_has_system_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Attribution::_Internal::system_metadata(const Attribution* msg) {
  return *msg->_impl_.system_metadata_;
}
void Attribution::clear_system_metadata() {
  if (_impl_.system_metadata_ != nullptr) _impl_.system_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Attribution::Attribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Attribution)
}
Attribution::Attribution(const Attribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attribution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.artifact_id_){}
    , decltype(_impl_.context_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_system_metadata()) {
    _this->_impl_.system_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.system_metadata_);
  }
  ::memcpy(&_impl_.artifact_id_, &from._impl_.artifact_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.context_id_) -
    reinterpret_cast<char*>(&_impl_.artifact_id_)) + sizeof(_impl_.context_id_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Attribution)
}

inline void Attribution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.artifact_id_){int64_t{0}}
    , decltype(_impl_.context_id_){int64_t{0}}
  };
}

Attribution::~Attribution() {
  // @@protoc_insertion_point(destructor:ml_metadata.Attribution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.system_metadata_;
}

void Attribution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attribution::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Attribution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.system_metadata_ != nullptr);
    _impl_.system_metadata_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.artifact_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.context_id_) -
        reinterpret_cast<char*>(&_impl_.artifact_id_)) + sizeof(_impl_.context_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 artifact_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_artifact_id(&has_bits);
          _impl_.artifact_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 context_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_context_id(&has_bits);
          _impl_.context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Any system_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Attribution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Attribution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 artifact_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_artifact_id(), target);
  }

  // optional int64 context_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_context_id(), target);
  }

  // optional .google.protobuf.Any system_metadata = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::system_metadata(this),
        _Internal::system_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Attribution)
  return target;
}

size_t Attribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Attribution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .google.protobuf.Any system_metadata = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_metadata_);
    }

    // optional int64 artifact_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_artifact_id());
    }

    // optional int64 context_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_context_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attribution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attribution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attribution::GetClassData() const { return &_class_data_; }


void Attribution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attribution*>(&to_msg);
  auto& from = static_cast<const Attribution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Attribution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_system_metadata()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_system_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.artifact_id_ = from._impl_.artifact_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.context_id_ = from._impl_.context_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attribution::CopyFrom(const Attribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Attribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribution::IsInitialized() const {
  return true;
}

void Attribution::InternalSwap(Attribution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attribution, _impl_.context_id_)
      + sizeof(Attribution::_impl_.context_id_)
      - PROTOBUF_FIELD_OFFSET(Attribution, _impl_.system_metadata_)>(
          reinterpret_cast<char*>(&_impl_.system_metadata_),
          reinterpret_cast<char*>(&other->_impl_.system_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[20]);
}

// ===================================================================

class Association::_Internal {
 public:
  using HasBits = decltype(std::declval<Association>()._impl_._has_bits_);
  static void set_has_execution_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& system_metadata(const Association* msg);
  static void set_has_system_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Association::_Internal::system_metadata(const Association* msg) {
  return *msg->_impl_.system_metadata_;
}
void Association::clear_system_metadata() {
  if (_impl_.system_metadata_ != nullptr) _impl_.system_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Association::Association(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Association)
}
Association::Association(const Association& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Association* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.execution_id_){}
    , decltype(_impl_.context_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_system_metadata()) {
    _this->_impl_.system_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.system_metadata_);
  }
  ::memcpy(&_impl_.execution_id_, &from._impl_.execution_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.context_id_) -
    reinterpret_cast<char*>(&_impl_.execution_id_)) + sizeof(_impl_.context_id_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Association)
}

inline void Association::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.execution_id_){int64_t{0}}
    , decltype(_impl_.context_id_){int64_t{0}}
  };
}

Association::~Association() {
  // @@protoc_insertion_point(destructor:ml_metadata.Association)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Association::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.system_metadata_;
}

void Association::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Association::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Association)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.system_metadata_ != nullptr);
    _impl_.system_metadata_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.execution_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.context_id_) -
        reinterpret_cast<char*>(&_impl_.execution_id_)) + sizeof(_impl_.context_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Association::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 execution_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_execution_id(&has_bits);
          _impl_.execution_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 context_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_context_id(&has_bits);
          _impl_.context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Any system_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Association::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Association)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 execution_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_execution_id(), target);
  }

  // optional int64 context_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_context_id(), target);
  }

  // optional .google.protobuf.Any system_metadata = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::system_metadata(this),
        _Internal::system_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Association)
  return target;
}

size_t Association::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Association)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .google.protobuf.Any system_metadata = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_metadata_);
    }

    // optional int64 execution_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_execution_id());
    }

    // optional int64 context_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_context_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Association::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Association::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Association::GetClassData() const { return &_class_data_; }


void Association::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Association*>(&to_msg);
  auto& from = static_cast<const Association&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Association)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_system_metadata()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_system_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.execution_id_ = from._impl_.execution_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.context_id_ = from._impl_.context_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Association::CopyFrom(const Association& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Association)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Association::IsInitialized() const {
  return true;
}

void Association::InternalSwap(Association* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Association, _impl_.context_id_)
      + sizeof(Association::_impl_.context_id_)
      - PROTOBUF_FIELD_OFFSET(Association, _impl_.system_metadata_)>(
          reinterpret_cast<char*>(&_impl_.system_metadata_),
          reinterpret_cast<char*>(&other->_impl_.system_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Association::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[21]);
}

// ===================================================================

class ParentContext::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentContext>()._impl_._has_bits_);
  static void set_has_child_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& system_metadata(const ParentContext* msg);
  static void set_has_system_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ParentContext::_Internal::system_metadata(const ParentContext* msg) {
  return *msg->_impl_.system_metadata_;
}
void ParentContext::clear_system_metadata() {
  if (_impl_.system_metadata_ != nullptr) _impl_.system_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ParentContext::ParentContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ParentContext)
}
ParentContext::ParentContext(const ParentContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParentContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.child_id_){}
    , decltype(_impl_.parent_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_system_metadata()) {
    _this->_impl_.system_metadata_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.system_metadata_);
  }
  ::memcpy(&_impl_.child_id_, &from._impl_.child_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.parent_id_) -
    reinterpret_cast<char*>(&_impl_.child_id_)) + sizeof(_impl_.parent_id_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ParentContext)
}

inline void ParentContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.system_metadata_){nullptr}
    , decltype(_impl_.child_id_){int64_t{0}}
    , decltype(_impl_.parent_id_){int64_t{0}}
  };
}

ParentContext::~ParentContext() {
  // @@protoc_insertion_point(destructor:ml_metadata.ParentContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParentContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.system_metadata_;
}

void ParentContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParentContext::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ParentContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.system_metadata_ != nullptr);
    _impl_.system_metadata_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.child_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.parent_id_) -
        reinterpret_cast<char*>(&_impl_.child_id_)) + sizeof(_impl_.parent_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 child_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_child_id(&has_bits);
          _impl_.child_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 parent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_parent_id(&has_bits);
          _impl_.parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Any system_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParentContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ParentContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 child_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_child_id(), target);
  }

  // optional int64 parent_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_parent_id(), target);
  }

  // optional .google.protobuf.Any system_metadata = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::system_metadata(this),
        _Internal::system_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ParentContext)
  return target;
}

size_t ParentContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ParentContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .google.protobuf.Any system_metadata = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.system_metadata_);
    }

    // optional int64 child_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_child_id());
    }

    // optional int64 parent_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_parent_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParentContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParentContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParentContext::GetClassData() const { return &_class_data_; }


void ParentContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParentContext*>(&to_msg);
  auto& from = static_cast<const ParentContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ParentContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_system_metadata()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_system_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.child_id_ = from._impl_.child_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.parent_id_ = from._impl_.parent_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParentContext::CopyFrom(const ParentContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ParentContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentContext::IsInitialized() const {
  return true;
}

void ParentContext::InternalSwap(ParentContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentContext, _impl_.parent_id_)
      + sizeof(ParentContext::_impl_.parent_id_)
      - PROTOBUF_FIELD_OFFSET(ParentContext, _impl_.system_metadata_)>(
          reinterpret_cast<char*>(&_impl_.system_metadata_),
          reinterpret_cast<char*>(&other->_impl_.system_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[22]);
}

// ===================================================================

class LineageGraph::_Internal {
 public:
};

LineageGraph::LineageGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.LineageGraph)
}
LineageGraph::LineageGraph(const LineageGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineageGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.artifact_types_){from._impl_.artifact_types_}
    , decltype(_impl_.execution_types_){from._impl_.execution_types_}
    , decltype(_impl_.context_types_){from._impl_.context_types_}
    , decltype(_impl_.artifacts_){from._impl_.artifacts_}
    , decltype(_impl_.executions_){from._impl_.executions_}
    , decltype(_impl_.contexts_){from._impl_.contexts_}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.attributions_){from._impl_.attributions_}
    , decltype(_impl_.associations_){from._impl_.associations_}
    , decltype(_impl_.parent_contexts_){from._impl_.parent_contexts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.LineageGraph)
}

inline void LineageGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.artifact_types_){arena}
    , decltype(_impl_.execution_types_){arena}
    , decltype(_impl_.context_types_){arena}
    , decltype(_impl_.artifacts_){arena}
    , decltype(_impl_.executions_){arena}
    , decltype(_impl_.contexts_){arena}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.attributions_){arena}
    , decltype(_impl_.associations_){arena}
    , decltype(_impl_.parent_contexts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LineageGraph::~LineageGraph() {
  // @@protoc_insertion_point(destructor:ml_metadata.LineageGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineageGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.artifact_types_.~RepeatedPtrField();
  _impl_.execution_types_.~RepeatedPtrField();
  _impl_.context_types_.~RepeatedPtrField();
  _impl_.artifacts_.~RepeatedPtrField();
  _impl_.executions_.~RepeatedPtrField();
  _impl_.contexts_.~RepeatedPtrField();
  _impl_.events_.~RepeatedPtrField();
  _impl_.attributions_.~RepeatedPtrField();
  _impl_.associations_.~RepeatedPtrField();
  _impl_.parent_contexts_.~RepeatedPtrField();
}

void LineageGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineageGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.LineageGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.artifact_types_.Clear();
  _impl_.execution_types_.Clear();
  _impl_.context_types_.Clear();
  _impl_.artifacts_.Clear();
  _impl_.executions_.Clear();
  _impl_.contexts_.Clear();
  _impl_.events_.Clear();
  _impl_.attributions_.Clear();
  _impl_.associations_.Clear();
  _impl_.parent_contexts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineageGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ml_metadata.ArtifactType artifact_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artifact_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.ExecutionType execution_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_execution_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.ContextType context_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_context_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.Artifact artifacts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artifacts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.Execution executions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_executions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.Context contexts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.Event events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.Attribution attributions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.Association associations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_associations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ml_metadata.ParentContext parent_contexts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parent_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineageGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.LineageGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ml_metadata.ArtifactType artifact_types = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_artifact_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_artifact_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.ExecutionType execution_types = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_execution_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_execution_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.ContextType context_types = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_context_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_context_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.Artifact artifacts = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_artifacts_size()); i < n; i++) {
    const auto& repfield = this->_internal_artifacts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.Execution executions = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_executions_size()); i < n; i++) {
    const auto& repfield = this->_internal_executions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.Context contexts = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contexts_size()); i < n; i++) {
    const auto& repfield = this->_internal_contexts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.Event events = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.Attribution attributions = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributions_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.Association associations = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_associations_size()); i < n; i++) {
    const auto& repfield = this->_internal_associations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ml_metadata.ParentContext parent_contexts = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parent_contexts_size()); i < n; i++) {
    const auto& repfield = this->_internal_parent_contexts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.LineageGraph)
  return target;
}

size_t LineageGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.LineageGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ml_metadata.ArtifactType artifact_types = 1;
  total_size += 1UL * this->_internal_artifact_types_size();
  for (const auto& msg : this->_impl_.artifact_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.ExecutionType execution_types = 2;
  total_size += 1UL * this->_internal_execution_types_size();
  for (const auto& msg : this->_impl_.execution_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.ContextType context_types = 3;
  total_size += 1UL * this->_internal_context_types_size();
  for (const auto& msg : this->_impl_.context_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.Artifact artifacts = 4;
  total_size += 1UL * this->_internal_artifacts_size();
  for (const auto& msg : this->_impl_.artifacts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.Execution executions = 5;
  total_size += 1UL * this->_internal_executions_size();
  for (const auto& msg : this->_impl_.executions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.Context contexts = 6;
  total_size += 1UL * this->_internal_contexts_size();
  for (const auto& msg : this->_impl_.contexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.Event events = 7;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.Attribution attributions = 8;
  total_size += 1UL * this->_internal_attributions_size();
  for (const auto& msg : this->_impl_.attributions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.Association associations = 9;
  total_size += 1UL * this->_internal_associations_size();
  for (const auto& msg : this->_impl_.associations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ml_metadata.ParentContext parent_contexts = 10;
  total_size += 1UL * this->_internal_parent_contexts_size();
  for (const auto& msg : this->_impl_.parent_contexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineageGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineageGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineageGraph::GetClassData() const { return &_class_data_; }


void LineageGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineageGraph*>(&to_msg);
  auto& from = static_cast<const LineageGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.LineageGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.artifact_types_.MergeFrom(from._impl_.artifact_types_);
  _this->_impl_.execution_types_.MergeFrom(from._impl_.execution_types_);
  _this->_impl_.context_types_.MergeFrom(from._impl_.context_types_);
  _this->_impl_.artifacts_.MergeFrom(from._impl_.artifacts_);
  _this->_impl_.executions_.MergeFrom(from._impl_.executions_);
  _this->_impl_.contexts_.MergeFrom(from._impl_.contexts_);
  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_impl_.attributions_.MergeFrom(from._impl_.attributions_);
  _this->_impl_.associations_.MergeFrom(from._impl_.associations_);
  _this->_impl_.parent_contexts_.MergeFrom(from._impl_.parent_contexts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineageGraph::CopyFrom(const LineageGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.LineageGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineageGraph::IsInitialized() const {
  return true;
}

void LineageGraph::InternalSwap(LineageGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.artifact_types_.InternalSwap(&other->_impl_.artifact_types_);
  _impl_.execution_types_.InternalSwap(&other->_impl_.execution_types_);
  _impl_.context_types_.InternalSwap(&other->_impl_.context_types_);
  _impl_.artifacts_.InternalSwap(&other->_impl_.artifacts_);
  _impl_.executions_.InternalSwap(&other->_impl_.executions_);
  _impl_.contexts_.InternalSwap(&other->_impl_.contexts_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  _impl_.attributions_.InternalSwap(&other->_impl_.attributions_);
  _impl_.associations_.InternalSwap(&other->_impl_.associations_);
  _impl_.parent_contexts_.InternalSwap(&other->_impl_.parent_contexts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineageGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[23]);
}

// ===================================================================

class ArtifactStructType::_Internal {
 public:
  static const ::ml_metadata::ArtifactType& simple(const ArtifactStructType* msg);
  static const ::ml_metadata::UnionArtifactStructType& union_type(const ArtifactStructType* msg);
  static const ::ml_metadata::IntersectionArtifactStructType& intersection(const ArtifactStructType* msg);
  static const ::ml_metadata::ListArtifactStructType& list(const ArtifactStructType* msg);
  static const ::ml_metadata::NoneArtifactStructType& none(const ArtifactStructType* msg);
  static const ::ml_metadata::AnyArtifactStructType& any(const ArtifactStructType* msg);
  static const ::ml_metadata::TupleArtifactStructType& tuple(const ArtifactStructType* msg);
  static const ::ml_metadata::DictArtifactStructType& dict(const ArtifactStructType* msg);
};

const ::ml_metadata::ArtifactType&
ArtifactStructType::_Internal::simple(const ArtifactStructType* msg) {
  return *msg->_impl_.kind_.simple_;
}
const ::ml_metadata::UnionArtifactStructType&
ArtifactStructType::_Internal::union_type(const ArtifactStructType* msg) {
  return *msg->_impl_.kind_.union_type_;
}
const ::ml_metadata::IntersectionArtifactStructType&
ArtifactStructType::_Internal::intersection(const ArtifactStructType* msg) {
  return *msg->_impl_.kind_.intersection_;
}
const ::ml_metadata::ListArtifactStructType&
ArtifactStructType::_Internal::list(const ArtifactStructType* msg) {
  return *msg->_impl_.kind_.list_;
}
const ::ml_metadata::NoneArtifactStructType&
ArtifactStructType::_Internal::none(const ArtifactStructType* msg) {
  return *msg->_impl_.kind_.none_;
}
const ::ml_metadata::AnyArtifactStructType&
ArtifactStructType::_Internal::any(const ArtifactStructType* msg) {
  return *msg->_impl_.kind_.any_;
}
const ::ml_metadata::TupleArtifactStructType&
ArtifactStructType::_Internal::tuple(const ArtifactStructType* msg) {
  return *msg->_impl_.kind_.tuple_;
}
const ::ml_metadata::DictArtifactStructType&
ArtifactStructType::_Internal::dict(const ArtifactStructType* msg) {
  return *msg->_impl_.kind_.dict_;
}
void ArtifactStructType::set_allocated_simple(::ml_metadata::ArtifactType* simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(simple);
    if (message_arena != submessage_arena) {
      simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple, submessage_arena);
    }
    set_has_simple();
    _impl_.kind_.simple_ = simple;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ArtifactStructType.simple)
}
void ArtifactStructType::set_allocated_union_type(::ml_metadata::UnionArtifactStructType* union_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (union_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(union_type);
    if (message_arena != submessage_arena) {
      union_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, union_type, submessage_arena);
    }
    set_has_union_type();
    _impl_.kind_.union_type_ = union_type;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ArtifactStructType.union_type)
}
void ArtifactStructType::set_allocated_intersection(::ml_metadata::IntersectionArtifactStructType* intersection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (intersection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(intersection);
    if (message_arena != submessage_arena) {
      intersection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intersection, submessage_arena);
    }
    set_has_intersection();
    _impl_.kind_.intersection_ = intersection;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ArtifactStructType.intersection)
}
void ArtifactStructType::set_allocated_list(::ml_metadata::ListArtifactStructType* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    _impl_.kind_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ArtifactStructType.list)
}
void ArtifactStructType::set_allocated_none(::ml_metadata::NoneArtifactStructType* none) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (none) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(none);
    if (message_arena != submessage_arena) {
      none = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, none, submessage_arena);
    }
    set_has_none();
    _impl_.kind_.none_ = none;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ArtifactStructType.none)
}
void ArtifactStructType::set_allocated_any(::ml_metadata::AnyArtifactStructType* any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(any);
    if (message_arena != submessage_arena) {
      any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any, submessage_arena);
    }
    set_has_any();
    _impl_.kind_.any_ = any;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ArtifactStructType.any)
}
void ArtifactStructType::set_allocated_tuple(::ml_metadata::TupleArtifactStructType* tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tuple);
    if (message_arena != submessage_arena) {
      tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple, submessage_arena);
    }
    set_has_tuple();
    _impl_.kind_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ArtifactStructType.tuple)
}
void ArtifactStructType::set_allocated_dict(::ml_metadata::DictArtifactStructType* dict) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (dict) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dict);
    if (message_arena != submessage_arena) {
      dict = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dict, submessage_arena);
    }
    set_has_dict();
    _impl_.kind_.dict_ = dict;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ArtifactStructType.dict)
}
ArtifactStructType::ArtifactStructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ArtifactStructType)
}
ArtifactStructType::ArtifactStructType(const ArtifactStructType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArtifactStructType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kSimple: {
      _this->_internal_mutable_simple()->::ml_metadata::ArtifactType::MergeFrom(
          from._internal_simple());
      break;
    }
    case kUnionType: {
      _this->_internal_mutable_union_type()->::ml_metadata::UnionArtifactStructType::MergeFrom(
          from._internal_union_type());
      break;
    }
    case kIntersection: {
      _this->_internal_mutable_intersection()->::ml_metadata::IntersectionArtifactStructType::MergeFrom(
          from._internal_intersection());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::ml_metadata::ListArtifactStructType::MergeFrom(
          from._internal_list());
      break;
    }
    case kNone: {
      _this->_internal_mutable_none()->::ml_metadata::NoneArtifactStructType::MergeFrom(
          from._internal_none());
      break;
    }
    case kAny: {
      _this->_internal_mutable_any()->::ml_metadata::AnyArtifactStructType::MergeFrom(
          from._internal_any());
      break;
    }
    case kTuple: {
      _this->_internal_mutable_tuple()->::ml_metadata::TupleArtifactStructType::MergeFrom(
          from._internal_tuple());
      break;
    }
    case kDict: {
      _this->_internal_mutable_dict()->::ml_metadata::DictArtifactStructType::MergeFrom(
          from._internal_dict());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ArtifactStructType)
}

inline void ArtifactStructType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

ArtifactStructType::~ArtifactStructType() {
  // @@protoc_insertion_point(destructor:ml_metadata.ArtifactStructType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArtifactStructType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void ArtifactStructType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArtifactStructType::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:ml_metadata.ArtifactStructType)
  switch (kind_case()) {
    case kSimple: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.simple_;
      }
      break;
    }
    case kUnionType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.union_type_;
      }
      break;
    }
    case kIntersection: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.intersection_;
      }
      break;
    }
    case kList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.list_;
      }
      break;
    }
    case kNone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.none_;
      }
      break;
    }
    case kAny: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.any_;
      }
      break;
    }
    case kTuple: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.tuple_;
      }
      break;
    }
    case kDict: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.dict_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void ArtifactStructType::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ArtifactStructType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactStructType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ml_metadata.ArtifactType simple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.UnionArtifactStructType union_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_union_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.IntersectionArtifactStructType intersection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_intersection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.ListArtifactStructType list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.NoneArtifactStructType none = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_none(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.AnyArtifactStructType any = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.TupleArtifactStructType tuple = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.DictArtifactStructType dict = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dict(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArtifactStructType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ArtifactStructType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (kind_case()) {
    case kSimple: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::simple(this),
          _Internal::simple(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnionType: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::union_type(this),
          _Internal::union_type(this).GetCachedSize(), target, stream);
      break;
    }
    case kIntersection: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::intersection(this),
          _Internal::intersection(this).GetCachedSize(), target, stream);
      break;
    }
    case kList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::list(this),
          _Internal::list(this).GetCachedSize(), target, stream);
      break;
    }
    case kNone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::none(this),
          _Internal::none(this).GetCachedSize(), target, stream);
      break;
    }
    case kAny: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::any(this),
          _Internal::any(this).GetCachedSize(), target, stream);
      break;
    }
    case kTuple: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::tuple(this),
          _Internal::tuple(this).GetCachedSize(), target, stream);
      break;
    }
    case kDict: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::dict(this),
          _Internal::dict(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ArtifactStructType)
  return target;
}

size_t ArtifactStructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ArtifactStructType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .ml_metadata.ArtifactType simple = 1;
    case kSimple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.simple_);
      break;
    }
    // .ml_metadata.UnionArtifactStructType union_type = 2;
    case kUnionType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.union_type_);
      break;
    }
    // .ml_metadata.IntersectionArtifactStructType intersection = 3;
    case kIntersection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.intersection_);
      break;
    }
    // .ml_metadata.ListArtifactStructType list = 4;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.list_);
      break;
    }
    // .ml_metadata.NoneArtifactStructType none = 5;
    case kNone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.none_);
      break;
    }
    // .ml_metadata.AnyArtifactStructType any = 6;
    case kAny: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.any_);
      break;
    }
    // .ml_metadata.TupleArtifactStructType tuple = 7;
    case kTuple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.tuple_);
      break;
    }
    // .ml_metadata.DictArtifactStructType dict = 8;
    case kDict: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.dict_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArtifactStructType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArtifactStructType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArtifactStructType::GetClassData() const { return &_class_data_; }


void ArtifactStructType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArtifactStructType*>(&to_msg);
  auto& from = static_cast<const ArtifactStructType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ArtifactStructType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kSimple: {
      _this->_internal_mutable_simple()->::ml_metadata::ArtifactType::MergeFrom(
          from._internal_simple());
      break;
    }
    case kUnionType: {
      _this->_internal_mutable_union_type()->::ml_metadata::UnionArtifactStructType::MergeFrom(
          from._internal_union_type());
      break;
    }
    case kIntersection: {
      _this->_internal_mutable_intersection()->::ml_metadata::IntersectionArtifactStructType::MergeFrom(
          from._internal_intersection());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::ml_metadata::ListArtifactStructType::MergeFrom(
          from._internal_list());
      break;
    }
    case kNone: {
      _this->_internal_mutable_none()->::ml_metadata::NoneArtifactStructType::MergeFrom(
          from._internal_none());
      break;
    }
    case kAny: {
      _this->_internal_mutable_any()->::ml_metadata::AnyArtifactStructType::MergeFrom(
          from._internal_any());
      break;
    }
    case kTuple: {
      _this->_internal_mutable_tuple()->::ml_metadata::TupleArtifactStructType::MergeFrom(
          from._internal_tuple());
      break;
    }
    case kDict: {
      _this->_internal_mutable_dict()->::ml_metadata::DictArtifactStructType::MergeFrom(
          from._internal_dict());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArtifactStructType::CopyFrom(const ArtifactStructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ArtifactStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactStructType::IsInitialized() const {
  return true;
}

void ArtifactStructType::InternalSwap(ArtifactStructType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactStructType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[24]);
}

// ===================================================================

class UnionArtifactStructType::_Internal {
 public:
};

UnionArtifactStructType::UnionArtifactStructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.UnionArtifactStructType)
}
UnionArtifactStructType::UnionArtifactStructType(const UnionArtifactStructType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnionArtifactStructType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candidates_){from._impl_.candidates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.UnionArtifactStructType)
}

inline void UnionArtifactStructType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candidates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnionArtifactStructType::~UnionArtifactStructType() {
  // @@protoc_insertion_point(destructor:ml_metadata.UnionArtifactStructType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnionArtifactStructType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candidates_.~RepeatedPtrField();
}

void UnionArtifactStructType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnionArtifactStructType::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.UnionArtifactStructType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candidates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnionArtifactStructType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ml_metadata.ArtifactStructType candidates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnionArtifactStructType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.UnionArtifactStructType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ml_metadata.ArtifactStructType candidates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candidates_size()); i < n; i++) {
    const auto& repfield = this->_internal_candidates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.UnionArtifactStructType)
  return target;
}

size_t UnionArtifactStructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.UnionArtifactStructType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ml_metadata.ArtifactStructType candidates = 1;
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->_impl_.candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnionArtifactStructType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnionArtifactStructType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnionArtifactStructType::GetClassData() const { return &_class_data_; }


void UnionArtifactStructType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnionArtifactStructType*>(&to_msg);
  auto& from = static_cast<const UnionArtifactStructType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.UnionArtifactStructType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candidates_.MergeFrom(from._impl_.candidates_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnionArtifactStructType::CopyFrom(const UnionArtifactStructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.UnionArtifactStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnionArtifactStructType::IsInitialized() const {
  return true;
}

void UnionArtifactStructType::InternalSwap(UnionArtifactStructType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.candidates_.InternalSwap(&other->_impl_.candidates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnionArtifactStructType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[25]);
}

// ===================================================================

class IntersectionArtifactStructType::_Internal {
 public:
};

IntersectionArtifactStructType::IntersectionArtifactStructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.IntersectionArtifactStructType)
}
IntersectionArtifactStructType::IntersectionArtifactStructType(const IntersectionArtifactStructType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntersectionArtifactStructType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.constraints_){from._impl_.constraints_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.IntersectionArtifactStructType)
}

inline void IntersectionArtifactStructType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.constraints_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntersectionArtifactStructType::~IntersectionArtifactStructType() {
  // @@protoc_insertion_point(destructor:ml_metadata.IntersectionArtifactStructType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntersectionArtifactStructType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.constraints_.~RepeatedPtrField();
}

void IntersectionArtifactStructType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntersectionArtifactStructType::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.IntersectionArtifactStructType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.constraints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntersectionArtifactStructType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ml_metadata.ArtifactStructType constraints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntersectionArtifactStructType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.IntersectionArtifactStructType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ml_metadata.ArtifactStructType constraints = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_constraints_size()); i < n; i++) {
    const auto& repfield = this->_internal_constraints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.IntersectionArtifactStructType)
  return target;
}

size_t IntersectionArtifactStructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.IntersectionArtifactStructType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ml_metadata.ArtifactStructType constraints = 1;
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->_impl_.constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntersectionArtifactStructType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntersectionArtifactStructType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntersectionArtifactStructType::GetClassData() const { return &_class_data_; }


void IntersectionArtifactStructType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntersectionArtifactStructType*>(&to_msg);
  auto& from = static_cast<const IntersectionArtifactStructType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.IntersectionArtifactStructType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.constraints_.MergeFrom(from._impl_.constraints_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntersectionArtifactStructType::CopyFrom(const IntersectionArtifactStructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.IntersectionArtifactStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntersectionArtifactStructType::IsInitialized() const {
  return true;
}

void IntersectionArtifactStructType::InternalSwap(IntersectionArtifactStructType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.constraints_.InternalSwap(&other->_impl_.constraints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntersectionArtifactStructType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[26]);
}

// ===================================================================

class ListArtifactStructType::_Internal {
 public:
  using HasBits = decltype(std::declval<ListArtifactStructType>()._impl_._has_bits_);
  static const ::ml_metadata::ArtifactStructType& element(const ListArtifactStructType* msg);
  static void set_has_element(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ml_metadata::ArtifactStructType&
ListArtifactStructType::_Internal::element(const ListArtifactStructType* msg) {
  return *msg->_impl_.element_;
}
ListArtifactStructType::ListArtifactStructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ListArtifactStructType)
}
ListArtifactStructType::ListArtifactStructType(const ListArtifactStructType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListArtifactStructType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_element()) {
    _this->_impl_.element_ = new ::ml_metadata::ArtifactStructType(*from._impl_.element_);
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ListArtifactStructType)
}

inline void ListArtifactStructType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){nullptr}
  };
}

ListArtifactStructType::~ListArtifactStructType() {
  // @@protoc_insertion_point(destructor:ml_metadata.ListArtifactStructType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListArtifactStructType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.element_;
}

void ListArtifactStructType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListArtifactStructType::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ListArtifactStructType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.element_ != nullptr);
    _impl_.element_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListArtifactStructType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ml_metadata.ArtifactStructType element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_element(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListArtifactStructType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ListArtifactStructType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ml_metadata.ArtifactStructType element = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::element(this),
        _Internal::element(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ListArtifactStructType)
  return target;
}

size_t ListArtifactStructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ListArtifactStructType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ml_metadata.ArtifactStructType element = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.element_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListArtifactStructType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListArtifactStructType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListArtifactStructType::GetClassData() const { return &_class_data_; }


void ListArtifactStructType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListArtifactStructType*>(&to_msg);
  auto& from = static_cast<const ListArtifactStructType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ListArtifactStructType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_element()) {
    _this->_internal_mutable_element()->::ml_metadata::ArtifactStructType::MergeFrom(
        from._internal_element());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListArtifactStructType::CopyFrom(const ListArtifactStructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ListArtifactStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListArtifactStructType::IsInitialized() const {
  return true;
}

void ListArtifactStructType::InternalSwap(ListArtifactStructType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.element_, other->_impl_.element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListArtifactStructType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[27]);
}

// ===================================================================

class NoneArtifactStructType::_Internal {
 public:
};

NoneArtifactStructType::NoneArtifactStructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ml_metadata.NoneArtifactStructType)
}
NoneArtifactStructType::NoneArtifactStructType(const NoneArtifactStructType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NoneArtifactStructType* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.NoneArtifactStructType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoneArtifactStructType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoneArtifactStructType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NoneArtifactStructType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[28]);
}

// ===================================================================

class AnyArtifactStructType::_Internal {
 public:
};

AnyArtifactStructType::AnyArtifactStructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ml_metadata.AnyArtifactStructType)
}
AnyArtifactStructType::AnyArtifactStructType(const AnyArtifactStructType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AnyArtifactStructType* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.AnyArtifactStructType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnyArtifactStructType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnyArtifactStructType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AnyArtifactStructType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[29]);
}

// ===================================================================

class TupleArtifactStructType::_Internal {
 public:
};

TupleArtifactStructType::TupleArtifactStructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.TupleArtifactStructType)
}
TupleArtifactStructType::TupleArtifactStructType(const TupleArtifactStructType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TupleArtifactStructType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elements_){from._impl_.elements_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.TupleArtifactStructType)
}

inline void TupleArtifactStructType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elements_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TupleArtifactStructType::~TupleArtifactStructType() {
  // @@protoc_insertion_point(destructor:ml_metadata.TupleArtifactStructType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TupleArtifactStructType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elements_.~RepeatedPtrField();
}

void TupleArtifactStructType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TupleArtifactStructType::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.TupleArtifactStructType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TupleArtifactStructType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ml_metadata.ArtifactStructType elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TupleArtifactStructType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.TupleArtifactStructType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ml_metadata.ArtifactStructType elements = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.TupleArtifactStructType)
  return target;
}

size_t TupleArtifactStructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.TupleArtifactStructType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ml_metadata.ArtifactStructType elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->_impl_.elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TupleArtifactStructType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TupleArtifactStructType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TupleArtifactStructType::GetClassData() const { return &_class_data_; }


void TupleArtifactStructType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TupleArtifactStructType*>(&to_msg);
  auto& from = static_cast<const TupleArtifactStructType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.TupleArtifactStructType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elements_.MergeFrom(from._impl_.elements_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TupleArtifactStructType::CopyFrom(const TupleArtifactStructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.TupleArtifactStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleArtifactStructType::IsInitialized() const {
  return true;
}

void TupleArtifactStructType::InternalSwap(TupleArtifactStructType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elements_.InternalSwap(&other->_impl_.elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TupleArtifactStructType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[30]);
}

// ===================================================================

DictArtifactStructType_PropertiesEntry_DoNotUse::DictArtifactStructType_PropertiesEntry_DoNotUse() {}
DictArtifactStructType_PropertiesEntry_DoNotUse::DictArtifactStructType_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DictArtifactStructType_PropertiesEntry_DoNotUse::MergeFrom(const DictArtifactStructType_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DictArtifactStructType_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[31]);
}

// ===================================================================

class DictArtifactStructType::_Internal {
 public:
  using HasBits = decltype(std::declval<DictArtifactStructType>()._impl_._has_bits_);
  static void set_has_none_type_not_required(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ml_metadata::ArtifactStructType& extra_properties_type(const DictArtifactStructType* msg);
  static void set_has_extra_properties_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ml_metadata::ArtifactStructType&
DictArtifactStructType::_Internal::extra_properties_type(const DictArtifactStructType* msg) {
  return *msg->_impl_.extra_properties_type_;
}
DictArtifactStructType::DictArtifactStructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DictArtifactStructType::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ml_metadata.DictArtifactStructType)
}
DictArtifactStructType::DictArtifactStructType(const DictArtifactStructType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DictArtifactStructType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{}
    , decltype(_impl_.extra_properties_type_){nullptr}
    , decltype(_impl_.none_type_not_required_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (from._internal_has_extra_properties_type()) {
    _this->_impl_.extra_properties_type_ = new ::ml_metadata::ArtifactStructType(*from._impl_.extra_properties_type_);
  }
  _this->_impl_.none_type_not_required_ = from._impl_.none_type_not_required_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.DictArtifactStructType)
}

inline void DictArtifactStructType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.extra_properties_type_){nullptr}
    , decltype(_impl_.none_type_not_required_){false}
  };
}

DictArtifactStructType::~DictArtifactStructType() {
  // @@protoc_insertion_point(destructor:ml_metadata.DictArtifactStructType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DictArtifactStructType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  if (this != internal_default_instance()) delete _impl_.extra_properties_type_;
}

void DictArtifactStructType::ArenaDtor(void* object) {
  DictArtifactStructType* _this = reinterpret_cast< DictArtifactStructType* >(object);
  _this->_impl_.properties_.Destruct();
}
void DictArtifactStructType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DictArtifactStructType::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.DictArtifactStructType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.extra_properties_type_ != nullptr);
    _impl_.extra_properties_type_->Clear();
  }
  _impl_.none_type_not_required_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictArtifactStructType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .ml_metadata.ArtifactStructType> properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool none_type_not_required = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_none_type_not_required(&has_bits);
          _impl_.none_type_not_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.ArtifactStructType extra_properties_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_properties_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DictArtifactStructType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.DictArtifactStructType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ml_metadata.ArtifactStructType> properties = 1;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, ::ml_metadata::ArtifactStructType>;
    using WireHelper = DictArtifactStructType_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "ml_metadata.DictArtifactStructType.PropertiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool none_type_not_required = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_none_type_not_required(), target);
  }

  // optional .ml_metadata.ArtifactStructType extra_properties_type = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::extra_properties_type(this),
        _Internal::extra_properties_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.DictArtifactStructType)
  return target;
}

size_t DictArtifactStructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.DictArtifactStructType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ml_metadata.ArtifactStructType> properties = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ml_metadata::ArtifactStructType >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += DictArtifactStructType_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ml_metadata.ArtifactStructType extra_properties_type = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.extra_properties_type_);
    }

    // optional bool none_type_not_required = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DictArtifactStructType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DictArtifactStructType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DictArtifactStructType::GetClassData() const { return &_class_data_; }


void DictArtifactStructType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DictArtifactStructType*>(&to_msg);
  auto& from = static_cast<const DictArtifactStructType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.DictArtifactStructType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_extra_properties_type()->::ml_metadata::ArtifactStructType::MergeFrom(
          from._internal_extra_properties_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.none_type_not_required_ = from._impl_.none_type_not_required_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DictArtifactStructType::CopyFrom(const DictArtifactStructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.DictArtifactStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictArtifactStructType::IsInitialized() const {
  return true;
}

void DictArtifactStructType::InternalSwap(DictArtifactStructType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DictArtifactStructType, _impl_.none_type_not_required_)
      + sizeof(DictArtifactStructType::_impl_.none_type_not_required_)
      - PROTOBUF_FIELD_OFFSET(DictArtifactStructType, _impl_.extra_properties_type_)>(
          reinterpret_cast<char*>(&_impl_.extra_properties_type_),
          reinterpret_cast<char*>(&other->_impl_.extra_properties_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DictArtifactStructType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[32]);
}

// ===================================================================

class FakeDatabaseConfig::_Internal {
 public:
};

FakeDatabaseConfig::FakeDatabaseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ml_metadata.FakeDatabaseConfig)
}
FakeDatabaseConfig::FakeDatabaseConfig(const FakeDatabaseConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  FakeDatabaseConfig* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.FakeDatabaseConfig)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FakeDatabaseConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FakeDatabaseConfig::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FakeDatabaseConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[33]);
}

// ===================================================================

class MySQLDatabaseConfig_SSLOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<MySQLDatabaseConfig_SSLOptions>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ca(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_capath(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cipher(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_verify_server_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MySQLDatabaseConfig_SSLOptions::MySQLDatabaseConfig_SSLOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MySQLDatabaseConfig.SSLOptions)
}
MySQLDatabaseConfig_SSLOptions::MySQLDatabaseConfig_SSLOptions(const MySQLDatabaseConfig_SSLOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MySQLDatabaseConfig_SSLOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.cert_){}
    , decltype(_impl_.ca_){}
    , decltype(_impl_.capath_){}
    , decltype(_impl_.cipher_){}
    , decltype(_impl_.verify_server_cert_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cert()) {
    _this->_impl_.cert_.Set(from._internal_cert(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ca_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ca()) {
    _this->_impl_.ca_.Set(from._internal_ca(), 
      _this->GetArenaForAllocation());
  }
  _impl_.capath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.capath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_capath()) {
    _this->_impl_.capath_.Set(from._internal_capath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cipher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cipher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cipher()) {
    _this->_impl_.cipher_.Set(from._internal_cipher(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.verify_server_cert_ = from._impl_.verify_server_cert_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MySQLDatabaseConfig.SSLOptions)
}

inline void MySQLDatabaseConfig_SSLOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.cert_){}
    , decltype(_impl_.ca_){}
    , decltype(_impl_.capath_){}
    , decltype(_impl_.cipher_){}
    , decltype(_impl_.verify_server_cert_){false}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ca_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.capath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.capath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cipher_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cipher_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MySQLDatabaseConfig_SSLOptions::~MySQLDatabaseConfig_SSLOptions() {
  // @@protoc_insertion_point(destructor:ml_metadata.MySQLDatabaseConfig.SSLOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MySQLDatabaseConfig_SSLOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.cert_.Destroy();
  _impl_.ca_.Destroy();
  _impl_.capath_.Destroy();
  _impl_.cipher_.Destroy();
}

void MySQLDatabaseConfig_SSLOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MySQLDatabaseConfig_SSLOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MySQLDatabaseConfig.SSLOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ca_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.capath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.cipher_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.verify_server_cert_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MySQLDatabaseConfig_SSLOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.SSLOptions.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string cert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cert();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.SSLOptions.cert");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ca = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ca();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.SSLOptions.ca");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string capath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_capath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.SSLOptions.capath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string cipher = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cipher();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.SSLOptions.cipher");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool verify_server_cert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_verify_server_cert(&has_bits);
          _impl_.verify_server_cert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MySQLDatabaseConfig_SSLOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MySQLDatabaseConfig.SSLOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.SSLOptions.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string cert = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cert().data(), static_cast<int>(this->_internal_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.SSLOptions.cert");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cert(), target);
  }

  // optional string ca = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ca().data(), static_cast<int>(this->_internal_ca().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.SSLOptions.ca");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ca(), target);
  }

  // optional string capath = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_capath().data(), static_cast<int>(this->_internal_capath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.SSLOptions.capath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_capath(), target);
  }

  // optional string cipher = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cipher().data(), static_cast<int>(this->_internal_cipher().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.SSLOptions.cipher");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cipher(), target);
  }

  // optional bool verify_server_cert = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_verify_server_cert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MySQLDatabaseConfig.SSLOptions)
  return target;
}

size_t MySQLDatabaseConfig_SSLOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MySQLDatabaseConfig.SSLOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string cert = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cert());
    }

    // optional string ca = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ca());
    }

    // optional string capath = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_capath());
    }

    // optional string cipher = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cipher());
    }

    // optional bool verify_server_cert = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MySQLDatabaseConfig_SSLOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MySQLDatabaseConfig_SSLOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MySQLDatabaseConfig_SSLOptions::GetClassData() const { return &_class_data_; }


void MySQLDatabaseConfig_SSLOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MySQLDatabaseConfig_SSLOptions*>(&to_msg);
  auto& from = static_cast<const MySQLDatabaseConfig_SSLOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MySQLDatabaseConfig.SSLOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cert(from._internal_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ca(from._internal_ca());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_capath(from._internal_capath());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_cipher(from._internal_cipher());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.verify_server_cert_ = from._impl_.verify_server_cert_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MySQLDatabaseConfig_SSLOptions::CopyFrom(const MySQLDatabaseConfig_SSLOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MySQLDatabaseConfig.SSLOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLDatabaseConfig_SSLOptions::IsInitialized() const {
  return true;
}

void MySQLDatabaseConfig_SSLOptions::InternalSwap(MySQLDatabaseConfig_SSLOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cert_, lhs_arena,
      &other->_impl_.cert_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ca_, lhs_arena,
      &other->_impl_.ca_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.capath_, lhs_arena,
      &other->_impl_.capath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cipher_, lhs_arena,
      &other->_impl_.cipher_, rhs_arena
  );
  swap(_impl_.verify_server_cert_, other->_impl_.verify_server_cert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MySQLDatabaseConfig_SSLOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[34]);
}

// ===================================================================

class MySQLDatabaseConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MySQLDatabaseConfig>()._impl_._has_bits_);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_database(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ml_metadata::MySQLDatabaseConfig_SSLOptions& ssl_options(const MySQLDatabaseConfig* msg);
  static void set_has_ssl_options(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_skip_db_creation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ml_metadata::MySQLDatabaseConfig_SSLOptions&
MySQLDatabaseConfig::_Internal::ssl_options(const MySQLDatabaseConfig* msg) {
  return *msg->_impl_.ssl_options_;
}
MySQLDatabaseConfig::MySQLDatabaseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MySQLDatabaseConfig)
}
MySQLDatabaseConfig::MySQLDatabaseConfig(const MySQLDatabaseConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MySQLDatabaseConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_){}
    , decltype(_impl_.database_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.socket_){}
    , decltype(_impl_.ssl_options_){nullptr}
    , decltype(_impl_.port_){}
    , decltype(_impl_.skip_db_creation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database()) {
    _this->_impl_.database_.Set(from._internal_database(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.socket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.socket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_socket()) {
    _this->_impl_.socket_.Set(from._internal_socket(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ssl_options()) {
    _this->_impl_.ssl_options_ = new ::ml_metadata::MySQLDatabaseConfig_SSLOptions(*from._impl_.ssl_options_);
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skip_db_creation_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.skip_db_creation_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MySQLDatabaseConfig)
}

inline void MySQLDatabaseConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_){}
    , decltype(_impl_.database_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.socket_){}
    , decltype(_impl_.ssl_options_){nullptr}
    , decltype(_impl_.port_){int64_t{0}}
    , decltype(_impl_.skip_db_creation_){false}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.socket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.socket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MySQLDatabaseConfig::~MySQLDatabaseConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.MySQLDatabaseConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MySQLDatabaseConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  _impl_.database_.Destroy();
  _impl_.user_.Destroy();
  _impl_.password_.Destroy();
  _impl_.socket_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ssl_options_;
}

void MySQLDatabaseConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MySQLDatabaseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MySQLDatabaseConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.database_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.user_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.socket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.ssl_options_ != nullptr);
      _impl_.ssl_options_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.skip_db_creation_) -
        reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.skip_db_creation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MySQLDatabaseConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string database = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_database();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.database");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string user = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.user");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.password");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string socket = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_socket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MySQLDatabaseConfig.socket");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.MySQLDatabaseConfig.SSLOptions ssl_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssl_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_db_creation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_skip_db_creation(&has_bits);
          _impl_.skip_db_creation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MySQLDatabaseConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MySQLDatabaseConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // optional int64 port = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_port(), target);
  }

  // optional string database = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database().data(), static_cast<int>(this->_internal_database().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.database");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_database(), target);
  }

  // optional string user = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.user");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user(), target);
  }

  // optional string password = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.password");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_password(), target);
  }

  // optional string socket = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_socket().data(), static_cast<int>(this->_internal_socket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MySQLDatabaseConfig.socket");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_socket(), target);
  }

  // optional .ml_metadata.MySQLDatabaseConfig.SSLOptions ssl_options = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ssl_options(this),
        _Internal::ssl_options(this).GetCachedSize(), target, stream);
  }

  // optional bool skip_db_creation = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_skip_db_creation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MySQLDatabaseConfig)
  return target;
}

size_t MySQLDatabaseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MySQLDatabaseConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string host = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host());
    }

    // optional string database = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database());
    }

    // optional string user = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user());
    }

    // optional string password = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string socket = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_socket());
    }

    // optional .ml_metadata.MySQLDatabaseConfig.SSLOptions ssl_options = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ssl_options_);
    }

    // optional int64 port = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port());
    }

    // optional bool skip_db_creation = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MySQLDatabaseConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MySQLDatabaseConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MySQLDatabaseConfig::GetClassData() const { return &_class_data_; }


void MySQLDatabaseConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MySQLDatabaseConfig*>(&to_msg);
  auto& from = static_cast<const MySQLDatabaseConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MySQLDatabaseConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_database(from._internal_database());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_user(from._internal_user());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_socket(from._internal_socket());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_ssl_options()->::ml_metadata::MySQLDatabaseConfig_SSLOptions::MergeFrom(
          from._internal_ssl_options());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.skip_db_creation_ = from._impl_.skip_db_creation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MySQLDatabaseConfig::CopyFrom(const MySQLDatabaseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MySQLDatabaseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLDatabaseConfig::IsInitialized() const {
  return true;
}

void MySQLDatabaseConfig::InternalSwap(MySQLDatabaseConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_, lhs_arena,
      &other->_impl_.database_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.socket_, lhs_arena,
      &other->_impl_.socket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MySQLDatabaseConfig, _impl_.skip_db_creation_)
      + sizeof(MySQLDatabaseConfig::_impl_.skip_db_creation_)
      - PROTOBUF_FIELD_OFFSET(MySQLDatabaseConfig, _impl_.ssl_options_)>(
          reinterpret_cast<char*>(&_impl_.ssl_options_),
          reinterpret_cast<char*>(&other->_impl_.ssl_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MySQLDatabaseConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[35]);
}

// ===================================================================

class SqliteMetadataSourceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SqliteMetadataSourceConfig>()._impl_._has_bits_);
  static void set_has_filename_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connection_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SqliteMetadataSourceConfig::SqliteMetadataSourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.SqliteMetadataSourceConfig)
}
SqliteMetadataSourceConfig::SqliteMetadataSourceConfig(const SqliteMetadataSourceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SqliteMetadataSourceConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_uri_){}
    , decltype(_impl_.connection_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename_uri()) {
    _this->_impl_.filename_uri_.Set(from._internal_filename_uri(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.connection_mode_ = from._impl_.connection_mode_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.SqliteMetadataSourceConfig)
}

inline void SqliteMetadataSourceConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_uri_){}
    , decltype(_impl_.connection_mode_){0}
  };
  _impl_.filename_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SqliteMetadataSourceConfig::~SqliteMetadataSourceConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.SqliteMetadataSourceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SqliteMetadataSourceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_uri_.Destroy();
}

void SqliteMetadataSourceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SqliteMetadataSourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.SqliteMetadataSourceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.filename_uri_.ClearNonDefaultToEmpty();
  }
  _impl_.connection_mode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SqliteMetadataSourceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.SqliteMetadataSourceConfig.filename_uri");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.SqliteMetadataSourceConfig.ConnectionMode connection_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ml_metadata::SqliteMetadataSourceConfig_ConnectionMode_IsValid(val))) {
            _internal_set_connection_mode(static_cast<::ml_metadata::SqliteMetadataSourceConfig_ConnectionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SqliteMetadataSourceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.SqliteMetadataSourceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string filename_uri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename_uri().data(), static_cast<int>(this->_internal_filename_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.SqliteMetadataSourceConfig.filename_uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename_uri(), target);
  }

  // optional .ml_metadata.SqliteMetadataSourceConfig.ConnectionMode connection_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_connection_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.SqliteMetadataSourceConfig)
  return target;
}

size_t SqliteMetadataSourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.SqliteMetadataSourceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename_uri = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename_uri());
    }

    // optional .ml_metadata.SqliteMetadataSourceConfig.ConnectionMode connection_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_connection_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SqliteMetadataSourceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SqliteMetadataSourceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SqliteMetadataSourceConfig::GetClassData() const { return &_class_data_; }


void SqliteMetadataSourceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SqliteMetadataSourceConfig*>(&to_msg);
  auto& from = static_cast<const SqliteMetadataSourceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.SqliteMetadataSourceConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename_uri(from._internal_filename_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.connection_mode_ = from._impl_.connection_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SqliteMetadataSourceConfig::CopyFrom(const SqliteMetadataSourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.SqliteMetadataSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SqliteMetadataSourceConfig::IsInitialized() const {
  return true;
}

void SqliteMetadataSourceConfig::InternalSwap(SqliteMetadataSourceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_uri_, lhs_arena,
      &other->_impl_.filename_uri_, rhs_arena
  );
  swap(_impl_.connection_mode_, other->_impl_.connection_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SqliteMetadataSourceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[36]);
}

// ===================================================================

class PostgreSQLDatabaseConfig_SSLOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<PostgreSQLDatabaseConfig_SSLOptions>()._impl_._has_bits_);
  static void set_has_sslmode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sslcert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sslkey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sslpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sslrootcert(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PostgreSQLDatabaseConfig_SSLOptions::PostgreSQLDatabaseConfig_SSLOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.PostgreSQLDatabaseConfig.SSLOptions)
}
PostgreSQLDatabaseConfig_SSLOptions::PostgreSQLDatabaseConfig_SSLOptions(const PostgreSQLDatabaseConfig_SSLOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostgreSQLDatabaseConfig_SSLOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sslmode_){}
    , decltype(_impl_.sslcert_){}
    , decltype(_impl_.sslkey_){}
    , decltype(_impl_.sslpassword_){}
    , decltype(_impl_.sslrootcert_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sslmode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslmode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sslmode()) {
    _this->_impl_.sslmode_.Set(from._internal_sslmode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sslcert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslcert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sslcert()) {
    _this->_impl_.sslcert_.Set(from._internal_sslcert(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sslkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sslkey()) {
    _this->_impl_.sslkey_.Set(from._internal_sslkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sslpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sslpassword()) {
    _this->_impl_.sslpassword_.Set(from._internal_sslpassword(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sslrootcert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslrootcert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sslrootcert()) {
    _this->_impl_.sslrootcert_.Set(from._internal_sslrootcert(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.PostgreSQLDatabaseConfig.SSLOptions)
}

inline void PostgreSQLDatabaseConfig_SSLOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sslmode_){}
    , decltype(_impl_.sslcert_){}
    , decltype(_impl_.sslkey_){}
    , decltype(_impl_.sslpassword_){}
    , decltype(_impl_.sslrootcert_){}
  };
  _impl_.sslmode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslmode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sslcert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslcert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sslkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sslpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sslrootcert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sslrootcert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostgreSQLDatabaseConfig_SSLOptions::~PostgreSQLDatabaseConfig_SSLOptions() {
  // @@protoc_insertion_point(destructor:ml_metadata.PostgreSQLDatabaseConfig.SSLOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostgreSQLDatabaseConfig_SSLOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sslmode_.Destroy();
  _impl_.sslcert_.Destroy();
  _impl_.sslkey_.Destroy();
  _impl_.sslpassword_.Destroy();
  _impl_.sslrootcert_.Destroy();
}

void PostgreSQLDatabaseConfig_SSLOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostgreSQLDatabaseConfig_SSLOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.PostgreSQLDatabaseConfig.SSLOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sslmode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sslcert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sslkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.sslpassword_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.sslrootcert_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostgreSQLDatabaseConfig_SSLOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sslmode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sslmode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslmode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sslcert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sslcert();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslcert");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sslkey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sslkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslkey");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sslpassword = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sslpassword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslpassword");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sslrootcert = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sslrootcert();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslrootcert");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostgreSQLDatabaseConfig_SSLOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.PostgreSQLDatabaseConfig.SSLOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sslmode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sslmode().data(), static_cast<int>(this->_internal_sslmode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslmode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sslmode(), target);
  }

  // optional string sslcert = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sslcert().data(), static_cast<int>(this->_internal_sslcert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslcert");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sslcert(), target);
  }

  // optional string sslkey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sslkey().data(), static_cast<int>(this->_internal_sslkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslkey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sslkey(), target);
  }

  // optional string sslpassword = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sslpassword().data(), static_cast<int>(this->_internal_sslpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslpassword");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sslpassword(), target);
  }

  // optional string sslrootcert = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sslrootcert().data(), static_cast<int>(this->_internal_sslrootcert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.SSLOptions.sslrootcert");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sslrootcert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.PostgreSQLDatabaseConfig.SSLOptions)
  return target;
}

size_t PostgreSQLDatabaseConfig_SSLOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.PostgreSQLDatabaseConfig.SSLOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string sslmode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sslmode());
    }

    // optional string sslcert = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sslcert());
    }

    // optional string sslkey = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sslkey());
    }

    // optional string sslpassword = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sslpassword());
    }

    // optional string sslrootcert = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sslrootcert());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostgreSQLDatabaseConfig_SSLOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostgreSQLDatabaseConfig_SSLOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostgreSQLDatabaseConfig_SSLOptions::GetClassData() const { return &_class_data_; }


void PostgreSQLDatabaseConfig_SSLOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostgreSQLDatabaseConfig_SSLOptions*>(&to_msg);
  auto& from = static_cast<const PostgreSQLDatabaseConfig_SSLOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.PostgreSQLDatabaseConfig.SSLOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sslmode(from._internal_sslmode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sslcert(from._internal_sslcert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_sslkey(from._internal_sslkey());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_sslpassword(from._internal_sslpassword());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_sslrootcert(from._internal_sslrootcert());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostgreSQLDatabaseConfig_SSLOptions::CopyFrom(const PostgreSQLDatabaseConfig_SSLOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.PostgreSQLDatabaseConfig.SSLOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostgreSQLDatabaseConfig_SSLOptions::IsInitialized() const {
  return true;
}

void PostgreSQLDatabaseConfig_SSLOptions::InternalSwap(PostgreSQLDatabaseConfig_SSLOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sslmode_, lhs_arena,
      &other->_impl_.sslmode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sslcert_, lhs_arena,
      &other->_impl_.sslcert_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sslkey_, lhs_arena,
      &other->_impl_.sslkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sslpassword_, lhs_arena,
      &other->_impl_.sslpassword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sslrootcert_, lhs_arena,
      &other->_impl_.sslrootcert_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PostgreSQLDatabaseConfig_SSLOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[37]);
}

// ===================================================================

class PostgreSQLDatabaseConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PostgreSQLDatabaseConfig>()._impl_._has_bits_);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hostaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_passfile(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dbname(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_skip_db_creation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions& ssloption(const PostgreSQLDatabaseConfig* msg);
  static void set_has_ssloption(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions&
PostgreSQLDatabaseConfig::_Internal::ssloption(const PostgreSQLDatabaseConfig* msg) {
  return *msg->_impl_.ssloption_;
}
PostgreSQLDatabaseConfig::PostgreSQLDatabaseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.PostgreSQLDatabaseConfig)
}
PostgreSQLDatabaseConfig::PostgreSQLDatabaseConfig(const PostgreSQLDatabaseConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostgreSQLDatabaseConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_){}
    , decltype(_impl_.hostaddr_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.passfile_){}
    , decltype(_impl_.dbname_){}
    , decltype(_impl_.ssloption_){nullptr}
    , decltype(_impl_.skip_db_creation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostaddr()) {
    _this->_impl_.hostaddr_.Set(from._internal_hostaddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_port()) {
    _this->_impl_.port_.Set(from._internal_port(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_passfile()) {
    _this->_impl_.passfile_.Set(from._internal_passfile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dbname()) {
    _this->_impl_.dbname_.Set(from._internal_dbname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ssloption()) {
    _this->_impl_.ssloption_ = new ::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions(*from._impl_.ssloption_);
  }
  _this->_impl_.skip_db_creation_ = from._impl_.skip_db_creation_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.PostgreSQLDatabaseConfig)
}

inline void PostgreSQLDatabaseConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_){}
    , decltype(_impl_.hostaddr_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.passfile_){}
    , decltype(_impl_.dbname_){}
    , decltype(_impl_.ssloption_){nullptr}
    , decltype(_impl_.skip_db_creation_){false}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostgreSQLDatabaseConfig::~PostgreSQLDatabaseConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.PostgreSQLDatabaseConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostgreSQLDatabaseConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  _impl_.hostaddr_.Destroy();
  _impl_.port_.Destroy();
  _impl_.user_.Destroy();
  _impl_.password_.Destroy();
  _impl_.passfile_.Destroy();
  _impl_.dbname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ssloption_;
}

void PostgreSQLDatabaseConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostgreSQLDatabaseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.PostgreSQLDatabaseConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hostaddr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.port_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.user_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.passfile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.dbname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.ssloption_ != nullptr);
      _impl_.ssloption_->Clear();
    }
  }
  _impl_.skip_db_creation_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostgreSQLDatabaseConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hostaddr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.hostaddr");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.port");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string user = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.user");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.password");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string passfile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_passfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.passfile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string dbname = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_dbname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.PostgreSQLDatabaseConfig.dbname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_db_creation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_skip_db_creation(&has_bits);
          _impl_.skip_db_creation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.PostgreSQLDatabaseConfig.SSLOptions ssloption = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssloption(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostgreSQLDatabaseConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.PostgreSQLDatabaseConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // optional string hostaddr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostaddr().data(), static_cast<int>(this->_internal_hostaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.hostaddr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostaddr(), target);
  }

  // optional string port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.port");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_port(), target);
  }

  // optional string user = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.user");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user(), target);
  }

  // optional string password = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.password");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_password(), target);
  }

  // optional string passfile = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passfile().data(), static_cast<int>(this->_internal_passfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.passfile");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_passfile(), target);
  }

  // optional string dbname = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dbname().data(), static_cast<int>(this->_internal_dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.PostgreSQLDatabaseConfig.dbname");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_dbname(), target);
  }

  // optional bool skip_db_creation = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_skip_db_creation(), target);
  }

  // optional .ml_metadata.PostgreSQLDatabaseConfig.SSLOptions ssloption = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ssloption(this),
        _Internal::ssloption(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.PostgreSQLDatabaseConfig)
  return target;
}

size_t PostgreSQLDatabaseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.PostgreSQLDatabaseConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string host = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host());
    }

    // optional string hostaddr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostaddr());
    }

    // optional string port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_port());
    }

    // optional string user = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user());
    }

    // optional string password = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string passfile = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_passfile());
    }

    // optional string dbname = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dbname());
    }

    // optional .ml_metadata.PostgreSQLDatabaseConfig.SSLOptions ssloption = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ssloption_);
    }

  }
  // optional bool skip_db_creation = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostgreSQLDatabaseConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostgreSQLDatabaseConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostgreSQLDatabaseConfig::GetClassData() const { return &_class_data_; }


void PostgreSQLDatabaseConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostgreSQLDatabaseConfig*>(&to_msg);
  auto& from = static_cast<const PostgreSQLDatabaseConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.PostgreSQLDatabaseConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hostaddr(from._internal_hostaddr());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_port(from._internal_port());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_user(from._internal_user());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_passfile(from._internal_passfile());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_dbname(from._internal_dbname());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_ssloption()->::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions::MergeFrom(
          from._internal_ssloption());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_skip_db_creation(from._internal_skip_db_creation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostgreSQLDatabaseConfig::CopyFrom(const PostgreSQLDatabaseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.PostgreSQLDatabaseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostgreSQLDatabaseConfig::IsInitialized() const {
  return true;
}

void PostgreSQLDatabaseConfig::InternalSwap(PostgreSQLDatabaseConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostaddr_, lhs_arena,
      &other->_impl_.hostaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.port_, lhs_arena,
      &other->_impl_.port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passfile_, lhs_arena,
      &other->_impl_.passfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dbname_, lhs_arena,
      &other->_impl_.dbname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostgreSQLDatabaseConfig, _impl_.skip_db_creation_)
      + sizeof(PostgreSQLDatabaseConfig::_impl_.skip_db_creation_)
      - PROTOBUF_FIELD_OFFSET(PostgreSQLDatabaseConfig, _impl_.ssloption_)>(
          reinterpret_cast<char*>(&_impl_.ssloption_),
          reinterpret_cast<char*>(&other->_impl_.ssloption_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostgreSQLDatabaseConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[38]);
}

// ===================================================================

class MigrationOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<MigrationOptions>()._impl_._has_bits_);
  static void set_has_enable_upgrade_migration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_downgrade_to_schema_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MigrationOptions::MigrationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MigrationOptions)
}
MigrationOptions::MigrationOptions(const MigrationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MigrationOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_upgrade_migration_){}
    , decltype(_impl_.downgrade_to_schema_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enable_upgrade_migration_, &from._impl_.enable_upgrade_migration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.downgrade_to_schema_version_) -
    reinterpret_cast<char*>(&_impl_.enable_upgrade_migration_)) + sizeof(_impl_.downgrade_to_schema_version_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MigrationOptions)
}

inline void MigrationOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_upgrade_migration_){false}
    , decltype(_impl_.downgrade_to_schema_version_){int64_t{-1}}
  };
}

MigrationOptions::~MigrationOptions() {
  // @@protoc_insertion_point(destructor:ml_metadata.MigrationOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MigrationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MigrationOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MigrationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MigrationOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.enable_upgrade_migration_ = false;
    _impl_.downgrade_to_schema_version_ = int64_t{-1};
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MigrationOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 downgrade_to_schema_version = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_downgrade_to_schema_version(&has_bits);
          _impl_.downgrade_to_schema_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_upgrade_migration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_upgrade_migration(&has_bits);
          _impl_.enable_upgrade_migration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MigrationOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MigrationOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 downgrade_to_schema_version = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_downgrade_to_schema_version(), target);
  }

  // optional bool enable_upgrade_migration = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_upgrade_migration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MigrationOptions)
  return target;
}

size_t MigrationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MigrationOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool enable_upgrade_migration = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int64 downgrade_to_schema_version = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_downgrade_to_schema_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MigrationOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MigrationOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MigrationOptions::GetClassData() const { return &_class_data_; }


void MigrationOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MigrationOptions*>(&to_msg);
  auto& from = static_cast<const MigrationOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MigrationOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.enable_upgrade_migration_ = from._impl_.enable_upgrade_migration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.downgrade_to_schema_version_ = from._impl_.downgrade_to_schema_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MigrationOptions::CopyFrom(const MigrationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MigrationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrationOptions::IsInitialized() const {
  return true;
}

void MigrationOptions::InternalSwap(MigrationOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enable_upgrade_migration_, other->_impl_.enable_upgrade_migration_);
  swap(_impl_.downgrade_to_schema_version_, other->_impl_.downgrade_to_schema_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MigrationOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[39]);
}

// ===================================================================

class RetryOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RetryOptions>()._impl_._has_bits_);
  static void set_has_max_num_retries(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RetryOptions::RetryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.RetryOptions)
}
RetryOptions::RetryOptions(const RetryOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RetryOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_num_retries_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.max_num_retries_ = from._impl_.max_num_retries_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.RetryOptions)
}

inline void RetryOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_num_retries_){int64_t{0}}
  };
}

RetryOptions::~RetryOptions() {
  // @@protoc_insertion_point(destructor:ml_metadata.RetryOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RetryOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RetryOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RetryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.RetryOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_num_retries_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetryOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 max_num_retries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_num_retries(&has_bits);
          _impl_.max_num_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RetryOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.RetryOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 max_num_retries = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_num_retries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.RetryOptions)
  return target;
}

size_t RetryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.RetryOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 max_num_retries = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_num_retries());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RetryOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RetryOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RetryOptions::GetClassData() const { return &_class_data_; }


void RetryOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RetryOptions*>(&to_msg);
  auto& from = static_cast<const RetryOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.RetryOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_num_retries()) {
    _this->_internal_set_max_num_retries(from._internal_max_num_retries());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RetryOptions::CopyFrom(const RetryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.RetryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetryOptions::IsInitialized() const {
  return true;
}

void RetryOptions::InternalSwap(RetryOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_num_retries_, other->_impl_.max_num_retries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetryOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[40]);
}

// ===================================================================

class ConnectionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionConfig>()._impl_._has_bits_);
  static const ::ml_metadata::FakeDatabaseConfig& fake_database(const ConnectionConfig* msg);
  static const ::ml_metadata::MySQLDatabaseConfig& mysql(const ConnectionConfig* msg);
  static const ::ml_metadata::SqliteMetadataSourceConfig& sqlite(const ConnectionConfig* msg);
  static const ::ml_metadata::PostgreSQLDatabaseConfig& postgresql(const ConnectionConfig* msg);
  static const ::ml_metadata::RetryOptions& retry_options(const ConnectionConfig* msg);
  static void set_has_retry_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ml_metadata::FakeDatabaseConfig&
ConnectionConfig::_Internal::fake_database(const ConnectionConfig* msg) {
  return *msg->_impl_.config_.fake_database_;
}
const ::ml_metadata::MySQLDatabaseConfig&
ConnectionConfig::_Internal::mysql(const ConnectionConfig* msg) {
  return *msg->_impl_.config_.mysql_;
}
const ::ml_metadata::SqliteMetadataSourceConfig&
ConnectionConfig::_Internal::sqlite(const ConnectionConfig* msg) {
  return *msg->_impl_.config_.sqlite_;
}
const ::ml_metadata::PostgreSQLDatabaseConfig&
ConnectionConfig::_Internal::postgresql(const ConnectionConfig* msg) {
  return *msg->_impl_.config_.postgresql_;
}
const ::ml_metadata::RetryOptions&
ConnectionConfig::_Internal::retry_options(const ConnectionConfig* msg) {
  return *msg->_impl_.retry_options_;
}
void ConnectionConfig::set_allocated_fake_database(::ml_metadata::FakeDatabaseConfig* fake_database) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (fake_database) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fake_database);
    if (message_arena != submessage_arena) {
      fake_database = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fake_database, submessage_arena);
    }
    set_has_fake_database();
    _impl_.config_.fake_database_ = fake_database;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ConnectionConfig.fake_database)
}
void ConnectionConfig::set_allocated_mysql(::ml_metadata::MySQLDatabaseConfig* mysql) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (mysql) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mysql);
    if (message_arena != submessage_arena) {
      mysql = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mysql, submessage_arena);
    }
    set_has_mysql();
    _impl_.config_.mysql_ = mysql;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ConnectionConfig.mysql)
}
void ConnectionConfig::set_allocated_sqlite(::ml_metadata::SqliteMetadataSourceConfig* sqlite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (sqlite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sqlite);
    if (message_arena != submessage_arena) {
      sqlite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sqlite, submessage_arena);
    }
    set_has_sqlite();
    _impl_.config_.sqlite_ = sqlite;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ConnectionConfig.sqlite)
}
void ConnectionConfig::set_allocated_postgresql(::ml_metadata::PostgreSQLDatabaseConfig* postgresql) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (postgresql) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(postgresql);
    if (message_arena != submessage_arena) {
      postgresql = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postgresql, submessage_arena);
    }
    set_has_postgresql();
    _impl_.config_.postgresql_ = postgresql;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.ConnectionConfig.postgresql)
}
ConnectionConfig::ConnectionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ConnectionConfig)
}
ConnectionConfig::ConnectionConfig(const ConnectionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retry_options_){nullptr}
    , decltype(_impl_.config_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_retry_options()) {
    _this->_impl_.retry_options_ = new ::ml_metadata::RetryOptions(*from._impl_.retry_options_);
  }
  clear_has_config();
  switch (from.config_case()) {
    case kFakeDatabase: {
      _this->_internal_mutable_fake_database()->::ml_metadata::FakeDatabaseConfig::MergeFrom(
          from._internal_fake_database());
      break;
    }
    case kMysql: {
      _this->_internal_mutable_mysql()->::ml_metadata::MySQLDatabaseConfig::MergeFrom(
          from._internal_mysql());
      break;
    }
    case kSqlite: {
      _this->_internal_mutable_sqlite()->::ml_metadata::SqliteMetadataSourceConfig::MergeFrom(
          from._internal_sqlite());
      break;
    }
    case kPostgresql: {
      _this->_internal_mutable_postgresql()->::ml_metadata::PostgreSQLDatabaseConfig::MergeFrom(
          from._internal_postgresql());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ConnectionConfig)
}

inline void ConnectionConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retry_options_){nullptr}
    , decltype(_impl_.config_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_config();
}

ConnectionConfig::~ConnectionConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.ConnectionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.retry_options_;
  if (has_config()) {
    clear_config();
  }
}

void ConnectionConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:ml_metadata.ConnectionConfig)
  switch (config_case()) {
    case kFakeDatabase: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.fake_database_;
      }
      break;
    }
    case kMysql: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.mysql_;
      }
      break;
    }
    case kSqlite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.sqlite_;
      }
      break;
    }
    case kPostgresql: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.postgresql_;
      }
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONFIG_NOT_SET;
}


void ConnectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ConnectionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.retry_options_ != nullptr);
    _impl_.retry_options_->Clear();
  }
  clear_config();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ml_metadata.FakeDatabaseConfig fake_database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fake_database(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.MySQLDatabaseConfig mysql = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mysql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.SqliteMetadataSourceConfig sqlite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sqlite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.RetryOptions retry_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_retry_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.PostgreSQLDatabaseConfig postgresql = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_postgresql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ConnectionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (config_case()) {
    case kFakeDatabase: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::fake_database(this),
          _Internal::fake_database(this).GetCachedSize(), target, stream);
      break;
    }
    case kMysql: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::mysql(this),
          _Internal::mysql(this).GetCachedSize(), target, stream);
      break;
    }
    case kSqlite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::sqlite(this),
          _Internal::sqlite(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional .ml_metadata.RetryOptions retry_options = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::retry_options(this),
        _Internal::retry_options(this).GetCachedSize(), target, stream);
  }

  // .ml_metadata.PostgreSQLDatabaseConfig postgresql = 5;
  if (_internal_has_postgresql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::postgresql(this),
        _Internal::postgresql(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ConnectionConfig)
  return target;
}

size_t ConnectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ConnectionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ml_metadata.RetryOptions retry_options = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.retry_options_);
  }

  switch (config_case()) {
    // .ml_metadata.FakeDatabaseConfig fake_database = 1;
    case kFakeDatabase: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.fake_database_);
      break;
    }
    // .ml_metadata.MySQLDatabaseConfig mysql = 2;
    case kMysql: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.mysql_);
      break;
    }
    // .ml_metadata.SqliteMetadataSourceConfig sqlite = 3;
    case kSqlite: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.sqlite_);
      break;
    }
    // .ml_metadata.PostgreSQLDatabaseConfig postgresql = 5;
    case kPostgresql: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.postgresql_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionConfig::GetClassData() const { return &_class_data_; }


void ConnectionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionConfig*>(&to_msg);
  auto& from = static_cast<const ConnectionConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ConnectionConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retry_options()) {
    _this->_internal_mutable_retry_options()->::ml_metadata::RetryOptions::MergeFrom(
        from._internal_retry_options());
  }
  switch (from.config_case()) {
    case kFakeDatabase: {
      _this->_internal_mutable_fake_database()->::ml_metadata::FakeDatabaseConfig::MergeFrom(
          from._internal_fake_database());
      break;
    }
    case kMysql: {
      _this->_internal_mutable_mysql()->::ml_metadata::MySQLDatabaseConfig::MergeFrom(
          from._internal_mysql());
      break;
    }
    case kSqlite: {
      _this->_internal_mutable_sqlite()->::ml_metadata::SqliteMetadataSourceConfig::MergeFrom(
          from._internal_sqlite());
      break;
    }
    case kPostgresql: {
      _this->_internal_mutable_postgresql()->::ml_metadata::PostgreSQLDatabaseConfig::MergeFrom(
          from._internal_postgresql());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionConfig::CopyFrom(const ConnectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ConnectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionConfig::IsInitialized() const {
  return true;
}

void ConnectionConfig::InternalSwap(ConnectionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.retry_options_, other->_impl_.retry_options_);
  swap(_impl_.config_, other->_impl_.config_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[41]);
}

// ===================================================================

class GrpcChannelArguments::_Internal {
 public:
  using HasBits = decltype(std::declval<GrpcChannelArguments>()._impl_._has_bits_);
  static void set_has_max_receive_message_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_http2_max_ping_strikes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GrpcChannelArguments::GrpcChannelArguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.GrpcChannelArguments)
}
GrpcChannelArguments::GrpcChannelArguments(const GrpcChannelArguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrpcChannelArguments* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_receive_message_length_){}
    , decltype(_impl_.http2_max_ping_strikes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_receive_message_length_, &from._impl_.max_receive_message_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.http2_max_ping_strikes_) -
    reinterpret_cast<char*>(&_impl_.max_receive_message_length_)) + sizeof(_impl_.http2_max_ping_strikes_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.GrpcChannelArguments)
}

inline void GrpcChannelArguments::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_receive_message_length_){int64_t{0}}
    , decltype(_impl_.http2_max_ping_strikes_){int64_t{0}}
  };
}

GrpcChannelArguments::~GrpcChannelArguments() {
  // @@protoc_insertion_point(destructor:ml_metadata.GrpcChannelArguments)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrpcChannelArguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GrpcChannelArguments::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrpcChannelArguments::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.GrpcChannelArguments)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_receive_message_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.http2_max_ping_strikes_) -
        reinterpret_cast<char*>(&_impl_.max_receive_message_length_)) + sizeof(_impl_.http2_max_ping_strikes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrpcChannelArguments::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 max_receive_message_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_receive_message_length(&has_bits);
          _impl_.max_receive_message_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 http2_max_ping_strikes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_http2_max_ping_strikes(&has_bits);
          _impl_.http2_max_ping_strikes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrpcChannelArguments::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.GrpcChannelArguments)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 max_receive_message_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_receive_message_length(), target);
  }

  // optional int64 http2_max_ping_strikes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_http2_max_ping_strikes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.GrpcChannelArguments)
  return target;
}

size_t GrpcChannelArguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.GrpcChannelArguments)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 max_receive_message_length = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_receive_message_length());
    }

    // optional int64 http2_max_ping_strikes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_http2_max_ping_strikes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrpcChannelArguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrpcChannelArguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrpcChannelArguments::GetClassData() const { return &_class_data_; }


void GrpcChannelArguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrpcChannelArguments*>(&to_msg);
  auto& from = static_cast<const GrpcChannelArguments&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.GrpcChannelArguments)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_receive_message_length_ = from._impl_.max_receive_message_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.http2_max_ping_strikes_ = from._impl_.http2_max_ping_strikes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrpcChannelArguments::CopyFrom(const GrpcChannelArguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.GrpcChannelArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpcChannelArguments::IsInitialized() const {
  return true;
}

void GrpcChannelArguments::InternalSwap(GrpcChannelArguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrpcChannelArguments, _impl_.http2_max_ping_strikes_)
      + sizeof(GrpcChannelArguments::_impl_.http2_max_ping_strikes_)
      - PROTOBUF_FIELD_OFFSET(GrpcChannelArguments, _impl_.max_receive_message_length_)>(
          reinterpret_cast<char*>(&_impl_.max_receive_message_length_),
          reinterpret_cast<char*>(&other->_impl_.max_receive_message_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrpcChannelArguments::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[42]);
}

// ===================================================================

class MetadataStoreClientConfig_SSLConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MetadataStoreClientConfig_SSLConfig>()._impl_._has_bits_);
  static void set_has_client_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_ca(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MetadataStoreClientConfig_SSLConfig::MetadataStoreClientConfig_SSLConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MetadataStoreClientConfig.SSLConfig)
}
MetadataStoreClientConfig_SSLConfig::MetadataStoreClientConfig_SSLConfig(const MetadataStoreClientConfig_SSLConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetadataStoreClientConfig_SSLConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_key_){}
    , decltype(_impl_.server_cert_){}
    , decltype(_impl_.custom_ca_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_key()) {
    _this->_impl_.client_key_.Set(from._internal_client_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_cert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_cert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_cert()) {
    _this->_impl_.server_cert_.Set(from._internal_server_cert(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_ca_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_ca_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_ca()) {
    _this->_impl_.custom_ca_.Set(from._internal_custom_ca(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MetadataStoreClientConfig.SSLConfig)
}

inline void MetadataStoreClientConfig_SSLConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_key_){}
    , decltype(_impl_.server_cert_){}
    , decltype(_impl_.custom_ca_){}
  };
  _impl_.client_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_cert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_cert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_ca_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_ca_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetadataStoreClientConfig_SSLConfig::~MetadataStoreClientConfig_SSLConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.MetadataStoreClientConfig.SSLConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataStoreClientConfig_SSLConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_key_.Destroy();
  _impl_.server_cert_.Destroy();
  _impl_.custom_ca_.Destroy();
}

void MetadataStoreClientConfig_SSLConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetadataStoreClientConfig_SSLConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MetadataStoreClientConfig.SSLConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.client_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.server_cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.custom_ca_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataStoreClientConfig_SSLConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string client_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MetadataStoreClientConfig.SSLConfig.client_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string server_cert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_cert();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MetadataStoreClientConfig.SSLConfig.server_cert");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string custom_ca = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_custom_ca();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MetadataStoreClientConfig.SSLConfig.custom_ca");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataStoreClientConfig_SSLConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MetadataStoreClientConfig.SSLConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string client_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_key().data(), static_cast<int>(this->_internal_client_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MetadataStoreClientConfig.SSLConfig.client_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_key(), target);
  }

  // optional string server_cert = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_cert().data(), static_cast<int>(this->_internal_server_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MetadataStoreClientConfig.SSLConfig.server_cert");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_cert(), target);
  }

  // optional string custom_ca = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_ca().data(), static_cast<int>(this->_internal_custom_ca().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MetadataStoreClientConfig.SSLConfig.custom_ca");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_custom_ca(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MetadataStoreClientConfig.SSLConfig)
  return target;
}

size_t MetadataStoreClientConfig_SSLConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MetadataStoreClientConfig.SSLConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string client_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_key());
    }

    // optional string server_cert = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_cert());
    }

    // optional string custom_ca = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_ca());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataStoreClientConfig_SSLConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetadataStoreClientConfig_SSLConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataStoreClientConfig_SSLConfig::GetClassData() const { return &_class_data_; }


void MetadataStoreClientConfig_SSLConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetadataStoreClientConfig_SSLConfig*>(&to_msg);
  auto& from = static_cast<const MetadataStoreClientConfig_SSLConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MetadataStoreClientConfig.SSLConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_client_key(from._internal_client_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_server_cert(from._internal_server_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_custom_ca(from._internal_custom_ca());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataStoreClientConfig_SSLConfig::CopyFrom(const MetadataStoreClientConfig_SSLConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MetadataStoreClientConfig.SSLConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataStoreClientConfig_SSLConfig::IsInitialized() const {
  return true;
}

void MetadataStoreClientConfig_SSLConfig::InternalSwap(MetadataStoreClientConfig_SSLConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_key_, lhs_arena,
      &other->_impl_.client_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_cert_, lhs_arena,
      &other->_impl_.server_cert_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_ca_, lhs_arena,
      &other->_impl_.custom_ca_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataStoreClientConfig_SSLConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[43]);
}

// ===================================================================

class MetadataStoreClientConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MetadataStoreClientConfig>()._impl_._has_bits_);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ml_metadata::MetadataStoreClientConfig_SSLConfig& ssl_config(const MetadataStoreClientConfig* msg);
  static void set_has_ssl_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ml_metadata::GrpcChannelArguments& channel_arguments(const MetadataStoreClientConfig* msg);
  static void set_has_channel_arguments(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ml_metadata::MetadataStoreClientConfig_SSLConfig&
MetadataStoreClientConfig::_Internal::ssl_config(const MetadataStoreClientConfig* msg) {
  return *msg->_impl_.ssl_config_;
}
const ::ml_metadata::GrpcChannelArguments&
MetadataStoreClientConfig::_Internal::channel_arguments(const MetadataStoreClientConfig* msg) {
  return *msg->_impl_.channel_arguments_;
}
MetadataStoreClientConfig::MetadataStoreClientConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MetadataStoreClientConfig)
}
MetadataStoreClientConfig::MetadataStoreClientConfig(const MetadataStoreClientConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetadataStoreClientConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_){}
    , decltype(_impl_.ssl_config_){nullptr}
    , decltype(_impl_.channel_arguments_){nullptr}
    , decltype(_impl_.port_){}
    , decltype(_impl_.client_timeout_sec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ssl_config()) {
    _this->_impl_.ssl_config_ = new ::ml_metadata::MetadataStoreClientConfig_SSLConfig(*from._impl_.ssl_config_);
  }
  if (from._internal_has_channel_arguments()) {
    _this->_impl_.channel_arguments_ = new ::ml_metadata::GrpcChannelArguments(*from._impl_.channel_arguments_);
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_timeout_sec_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.client_timeout_sec_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MetadataStoreClientConfig)
}

inline void MetadataStoreClientConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_){}
    , decltype(_impl_.ssl_config_){nullptr}
    , decltype(_impl_.channel_arguments_){nullptr}
    , decltype(_impl_.port_){int64_t{0}}
    , decltype(_impl_.client_timeout_sec_){0}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetadataStoreClientConfig::~MetadataStoreClientConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.MetadataStoreClientConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataStoreClientConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ssl_config_;
  if (this != internal_default_instance()) delete _impl_.channel_arguments_;
}

void MetadataStoreClientConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetadataStoreClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MetadataStoreClientConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ssl_config_ != nullptr);
      _impl_.ssl_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.channel_arguments_ != nullptr);
      _impl_.channel_arguments_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_timeout_sec_) -
        reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.client_timeout_sec_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataStoreClientConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MetadataStoreClientConfig.host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.MetadataStoreClientConfig.SSLConfig ssl_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssl_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.GrpcChannelArguments channel_arguments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_arguments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double client_timeout_sec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_client_timeout_sec(&has_bits);
          _impl_.client_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataStoreClientConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MetadataStoreClientConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MetadataStoreClientConfig.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // optional int64 port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_port(), target);
  }

  // optional .ml_metadata.MetadataStoreClientConfig.SSLConfig ssl_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ssl_config(this),
        _Internal::ssl_config(this).GetCachedSize(), target, stream);
  }

  // optional .ml_metadata.GrpcChannelArguments channel_arguments = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::channel_arguments(this),
        _Internal::channel_arguments(this).GetCachedSize(), target, stream);
  }

  // optional double client_timeout_sec = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_client_timeout_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MetadataStoreClientConfig)
  return target;
}

size_t MetadataStoreClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MetadataStoreClientConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string host = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host());
    }

    // optional .ml_metadata.MetadataStoreClientConfig.SSLConfig ssl_config = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ssl_config_);
    }

    // optional .ml_metadata.GrpcChannelArguments channel_arguments = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.channel_arguments_);
    }

    // optional int64 port = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port());
    }

    // optional double client_timeout_sec = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataStoreClientConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetadataStoreClientConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataStoreClientConfig::GetClassData() const { return &_class_data_; }


void MetadataStoreClientConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetadataStoreClientConfig*>(&to_msg);
  auto& from = static_cast<const MetadataStoreClientConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MetadataStoreClientConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ssl_config()->::ml_metadata::MetadataStoreClientConfig_SSLConfig::MergeFrom(
          from._internal_ssl_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_channel_arguments()->::ml_metadata::GrpcChannelArguments::MergeFrom(
          from._internal_channel_arguments());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.client_timeout_sec_ = from._impl_.client_timeout_sec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataStoreClientConfig::CopyFrom(const MetadataStoreClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MetadataStoreClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataStoreClientConfig::IsInitialized() const {
  return true;
}

void MetadataStoreClientConfig::InternalSwap(MetadataStoreClientConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetadataStoreClientConfig, _impl_.client_timeout_sec_)
      + sizeof(MetadataStoreClientConfig::_impl_.client_timeout_sec_)
      - PROTOBUF_FIELD_OFFSET(MetadataStoreClientConfig, _impl_.ssl_config_)>(
          reinterpret_cast<char*>(&_impl_.ssl_config_),
          reinterpret_cast<char*>(&other->_impl_.ssl_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataStoreClientConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[44]);
}

// ===================================================================

class MetadataStoreServerConfig_SSLConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MetadataStoreServerConfig_SSLConfig>()._impl_._has_bits_);
  static void set_has_server_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_ca(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_verify(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MetadataStoreServerConfig_SSLConfig::MetadataStoreServerConfig_SSLConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MetadataStoreServerConfig.SSLConfig)
}
MetadataStoreServerConfig_SSLConfig::MetadataStoreServerConfig_SSLConfig(const MetadataStoreServerConfig_SSLConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetadataStoreServerConfig_SSLConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_key_){}
    , decltype(_impl_.server_cert_){}
    , decltype(_impl_.custom_ca_){}
    , decltype(_impl_.client_verify_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_key()) {
    _this->_impl_.server_key_.Set(from._internal_server_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_cert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_cert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_cert()) {
    _this->_impl_.server_cert_.Set(from._internal_server_cert(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_ca_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_ca_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_ca()) {
    _this->_impl_.custom_ca_.Set(from._internal_custom_ca(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.client_verify_ = from._impl_.client_verify_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MetadataStoreServerConfig.SSLConfig)
}

inline void MetadataStoreServerConfig_SSLConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_key_){}
    , decltype(_impl_.server_cert_){}
    , decltype(_impl_.custom_ca_){}
    , decltype(_impl_.client_verify_){false}
  };
  _impl_.server_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_cert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_cert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_ca_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_ca_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetadataStoreServerConfig_SSLConfig::~MetadataStoreServerConfig_SSLConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.MetadataStoreServerConfig.SSLConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataStoreServerConfig_SSLConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_key_.Destroy();
  _impl_.server_cert_.Destroy();
  _impl_.custom_ca_.Destroy();
}

void MetadataStoreServerConfig_SSLConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetadataStoreServerConfig_SSLConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MetadataStoreServerConfig.SSLConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.server_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.server_cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.custom_ca_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.client_verify_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataStoreServerConfig_SSLConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string server_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MetadataStoreServerConfig.SSLConfig.server_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string server_cert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_cert();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MetadataStoreServerConfig.SSLConfig.server_cert");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string custom_ca = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_custom_ca();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.MetadataStoreServerConfig.SSLConfig.custom_ca");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool client_verify = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_client_verify(&has_bits);
          _impl_.client_verify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataStoreServerConfig_SSLConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MetadataStoreServerConfig.SSLConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string server_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_key().data(), static_cast<int>(this->_internal_server_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MetadataStoreServerConfig.SSLConfig.server_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_key(), target);
  }

  // optional string server_cert = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_cert().data(), static_cast<int>(this->_internal_server_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MetadataStoreServerConfig.SSLConfig.server_cert");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_cert(), target);
  }

  // optional string custom_ca = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_ca().data(), static_cast<int>(this->_internal_custom_ca().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.MetadataStoreServerConfig.SSLConfig.custom_ca");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_custom_ca(), target);
  }

  // optional bool client_verify = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_client_verify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MetadataStoreServerConfig.SSLConfig)
  return target;
}

size_t MetadataStoreServerConfig_SSLConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MetadataStoreServerConfig.SSLConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string server_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_key());
    }

    // optional string server_cert = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_cert());
    }

    // optional string custom_ca = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_ca());
    }

    // optional bool client_verify = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataStoreServerConfig_SSLConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetadataStoreServerConfig_SSLConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataStoreServerConfig_SSLConfig::GetClassData() const { return &_class_data_; }


void MetadataStoreServerConfig_SSLConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetadataStoreServerConfig_SSLConfig*>(&to_msg);
  auto& from = static_cast<const MetadataStoreServerConfig_SSLConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MetadataStoreServerConfig.SSLConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_server_key(from._internal_server_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_server_cert(from._internal_server_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_custom_ca(from._internal_custom_ca());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_verify_ = from._impl_.client_verify_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataStoreServerConfig_SSLConfig::CopyFrom(const MetadataStoreServerConfig_SSLConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MetadataStoreServerConfig.SSLConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataStoreServerConfig_SSLConfig::IsInitialized() const {
  return true;
}

void MetadataStoreServerConfig_SSLConfig::InternalSwap(MetadataStoreServerConfig_SSLConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_key_, lhs_arena,
      &other->_impl_.server_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_cert_, lhs_arena,
      &other->_impl_.server_cert_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_ca_, lhs_arena,
      &other->_impl_.custom_ca_, rhs_arena
  );
  swap(_impl_.client_verify_, other->_impl_.client_verify_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataStoreServerConfig_SSLConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[45]);
}

// ===================================================================

class MetadataStoreServerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MetadataStoreServerConfig>()._impl_._has_bits_);
  static const ::ml_metadata::ConnectionConfig& connection_config(const MetadataStoreServerConfig* msg);
  static void set_has_connection_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ml_metadata::MigrationOptions& migration_options(const MetadataStoreServerConfig* msg);
  static void set_has_migration_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ml_metadata::MetadataStoreServerConfig_SSLConfig& ssl_config(const MetadataStoreServerConfig* msg);
  static void set_has_ssl_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ml_metadata::ConnectionConfig&
MetadataStoreServerConfig::_Internal::connection_config(const MetadataStoreServerConfig* msg) {
  return *msg->_impl_.connection_config_;
}
const ::ml_metadata::MigrationOptions&
MetadataStoreServerConfig::_Internal::migration_options(const MetadataStoreServerConfig* msg) {
  return *msg->_impl_.migration_options_;
}
const ::ml_metadata::MetadataStoreServerConfig_SSLConfig&
MetadataStoreServerConfig::_Internal::ssl_config(const MetadataStoreServerConfig* msg) {
  return *msg->_impl_.ssl_config_;
}
MetadataStoreServerConfig::MetadataStoreServerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MetadataStoreServerConfig)
}
MetadataStoreServerConfig::MetadataStoreServerConfig(const MetadataStoreServerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetadataStoreServerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_config_){nullptr}
    , decltype(_impl_.ssl_config_){nullptr}
    , decltype(_impl_.migration_options_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection_config()) {
    _this->_impl_.connection_config_ = new ::ml_metadata::ConnectionConfig(*from._impl_.connection_config_);
  }
  if (from._internal_has_ssl_config()) {
    _this->_impl_.ssl_config_ = new ::ml_metadata::MetadataStoreServerConfig_SSLConfig(*from._impl_.ssl_config_);
  }
  if (from._internal_has_migration_options()) {
    _this->_impl_.migration_options_ = new ::ml_metadata::MigrationOptions(*from._impl_.migration_options_);
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MetadataStoreServerConfig)
}

inline void MetadataStoreServerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_config_){nullptr}
    , decltype(_impl_.ssl_config_){nullptr}
    , decltype(_impl_.migration_options_){nullptr}
  };
}

MetadataStoreServerConfig::~MetadataStoreServerConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.MetadataStoreServerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataStoreServerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.connection_config_;
  if (this != internal_default_instance()) delete _impl_.ssl_config_;
  if (this != internal_default_instance()) delete _impl_.migration_options_;
}

void MetadataStoreServerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetadataStoreServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MetadataStoreServerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.connection_config_ != nullptr);
      _impl_.connection_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ssl_config_ != nullptr);
      _impl_.ssl_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.migration_options_ != nullptr);
      _impl_.migration_options_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataStoreServerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ml_metadata.ConnectionConfig connection_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.MetadataStoreServerConfig.SSLConfig ssl_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssl_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.MigrationOptions migration_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_migration_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataStoreServerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MetadataStoreServerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ml_metadata.ConnectionConfig connection_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connection_config(this),
        _Internal::connection_config(this).GetCachedSize(), target, stream);
  }

  // optional .ml_metadata.MetadataStoreServerConfig.SSLConfig ssl_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ssl_config(this),
        _Internal::ssl_config(this).GetCachedSize(), target, stream);
  }

  // optional .ml_metadata.MigrationOptions migration_options = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::migration_options(this),
        _Internal::migration_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MetadataStoreServerConfig)
  return target;
}

size_t MetadataStoreServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MetadataStoreServerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ml_metadata.ConnectionConfig connection_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.connection_config_);
    }

    // optional .ml_metadata.MetadataStoreServerConfig.SSLConfig ssl_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ssl_config_);
    }

    // optional .ml_metadata.MigrationOptions migration_options = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.migration_options_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataStoreServerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetadataStoreServerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataStoreServerConfig::GetClassData() const { return &_class_data_; }


void MetadataStoreServerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetadataStoreServerConfig*>(&to_msg);
  auto& from = static_cast<const MetadataStoreServerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MetadataStoreServerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_connection_config()->::ml_metadata::ConnectionConfig::MergeFrom(
          from._internal_connection_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ssl_config()->::ml_metadata::MetadataStoreServerConfig_SSLConfig::MergeFrom(
          from._internal_ssl_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_migration_options()->::ml_metadata::MigrationOptions::MergeFrom(
          from._internal_migration_options());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataStoreServerConfig::CopyFrom(const MetadataStoreServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MetadataStoreServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataStoreServerConfig::IsInitialized() const {
  return true;
}

void MetadataStoreServerConfig::InternalSwap(MetadataStoreServerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetadataStoreServerConfig, _impl_.migration_options_)
      + sizeof(MetadataStoreServerConfig::_impl_.migration_options_)
      - PROTOBUF_FIELD_OFFSET(MetadataStoreServerConfig, _impl_.connection_config_)>(
          reinterpret_cast<char*>(&_impl_.connection_config_),
          reinterpret_cast<char*>(&other->_impl_.connection_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataStoreServerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[46]);
}

// ===================================================================

class ListOperationOptions_OrderByField::_Internal {
 public:
  using HasBits = decltype(std::declval<ListOperationOptions_OrderByField>()._impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_asc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ListOperationOptions_OrderByField::ListOperationOptions_OrderByField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ListOperationOptions.OrderByField)
}
ListOperationOptions_OrderByField::ListOperationOptions_OrderByField(const ListOperationOptions_OrderByField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListOperationOptions_OrderByField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){}
    , decltype(_impl_.is_asc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.field_, &from._impl_.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_asc_) -
    reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.is_asc_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ListOperationOptions.OrderByField)
}

inline void ListOperationOptions_OrderByField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){3}
    , decltype(_impl_.is_asc_){true}
  };
}

ListOperationOptions_OrderByField::~ListOperationOptions_OrderByField() {
  // @@protoc_insertion_point(destructor:ml_metadata.ListOperationOptions.OrderByField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListOperationOptions_OrderByField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListOperationOptions_OrderByField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListOperationOptions_OrderByField::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ListOperationOptions.OrderByField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.field_ = 3;
    _impl_.is_asc_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListOperationOptions_OrderByField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ml_metadata.ListOperationOptions.OrderByField.Field field = 1 [default = ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ml_metadata::ListOperationOptions_OrderByField_Field_IsValid(val))) {
            _internal_set_field(static_cast<::ml_metadata::ListOperationOptions_OrderByField_Field>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_asc = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_asc(&has_bits);
          _impl_.is_asc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListOperationOptions_OrderByField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ListOperationOptions.OrderByField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ml_metadata.ListOperationOptions.OrderByField.Field field = 1 [default = ID];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_field(), target);
  }

  // optional bool is_asc = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_asc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ListOperationOptions.OrderByField)
  return target;
}

size_t ListOperationOptions_OrderByField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ListOperationOptions.OrderByField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ml_metadata.ListOperationOptions.OrderByField.Field field = 1 [default = ID];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_field());
    }

    // optional bool is_asc = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOperationOptions_OrderByField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListOperationOptions_OrderByField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOperationOptions_OrderByField::GetClassData() const { return &_class_data_; }


void ListOperationOptions_OrderByField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListOperationOptions_OrderByField*>(&to_msg);
  auto& from = static_cast<const ListOperationOptions_OrderByField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ListOperationOptions.OrderByField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_asc_ = from._impl_.is_asc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListOperationOptions_OrderByField::CopyFrom(const ListOperationOptions_OrderByField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ListOperationOptions.OrderByField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOperationOptions_OrderByField::IsInitialized() const {
  return true;
}

void ListOperationOptions_OrderByField::InternalSwap(ListOperationOptions_OrderByField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.field_, other->_impl_.field_);
  swap(_impl_.is_asc_, other->_impl_.is_asc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOperationOptions_OrderByField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[47]);
}

// ===================================================================

class ListOperationOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ListOperationOptions>()._impl_._has_bits_);
  static void set_has_max_result_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ml_metadata::ListOperationOptions_OrderByField& order_by_field(const ListOperationOptions* msg);
  static void set_has_order_by_field(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_next_page_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ml_metadata::ListOperationOptions_OrderByField&
ListOperationOptions::_Internal::order_by_field(const ListOperationOptions* msg) {
  return *msg->_impl_.order_by_field_;
}
ListOperationOptions::ListOperationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ListOperationOptions)
}
ListOperationOptions::ListOperationOptions(const ListOperationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListOperationOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_page_token_){}
    , decltype(_impl_.filter_query_){}
    , decltype(_impl_.order_by_field_){nullptr}
    , decltype(_impl_.max_result_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_next_page_token()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filter_query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filter_query()) {
    _this->_impl_.filter_query_.Set(from._internal_filter_query(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_order_by_field()) {
    _this->_impl_.order_by_field_ = new ::ml_metadata::ListOperationOptions_OrderByField(*from._impl_.order_by_field_);
  }
  _this->_impl_.max_result_size_ = from._impl_.max_result_size_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ListOperationOptions)
}

inline void ListOperationOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_page_token_){}
    , decltype(_impl_.filter_query_){}
    , decltype(_impl_.order_by_field_){nullptr}
    , decltype(_impl_.max_result_size_){20}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filter_query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListOperationOptions::~ListOperationOptions() {
  // @@protoc_insertion_point(destructor:ml_metadata.ListOperationOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListOperationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.next_page_token_.Destroy();
  _impl_.filter_query_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_by_field_;
}

void ListOperationOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListOperationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ListOperationOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.next_page_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.filter_query_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.order_by_field_ != nullptr);
      _impl_.order_by_field_->Clear();
    }
    _impl_.max_result_size_ = 20;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListOperationOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 max_result_size = 1 [default = 20];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_result_size(&has_bits);
          _impl_.max_result_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.ListOperationOptions.OrderByField order_by_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_by_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string next_page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ListOperationOptions.next_page_token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string filter_query = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filter_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.ListOperationOptions.filter_query");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListOperationOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ListOperationOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 max_result_size = 1 [default = 20];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_result_size(), target);
  }

  // optional .ml_metadata.ListOperationOptions.OrderByField order_by_field = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order_by_field(this),
        _Internal::order_by_field(this).GetCachedSize(), target, stream);
  }

  // optional string next_page_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ListOperationOptions.next_page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_page_token(), target);
  }

  // optional string filter_query = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter_query().data(), static_cast<int>(this->_internal_filter_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.ListOperationOptions.filter_query");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filter_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ListOperationOptions)
  return target;
}

size_t ListOperationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ListOperationOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string next_page_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_next_page_token());
    }

    // optional string filter_query = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter_query());
    }

    // optional .ml_metadata.ListOperationOptions.OrderByField order_by_field = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.order_by_field_);
    }

    // optional int32 max_result_size = 1 [default = 20];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_result_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOperationOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListOperationOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOperationOptions::GetClassData() const { return &_class_data_; }


void ListOperationOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListOperationOptions*>(&to_msg);
  auto& from = static_cast<const ListOperationOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ListOperationOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_next_page_token(from._internal_next_page_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_filter_query(from._internal_filter_query());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_order_by_field()->::ml_metadata::ListOperationOptions_OrderByField::MergeFrom(
          from._internal_order_by_field());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_result_size_ = from._impl_.max_result_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListOperationOptions::CopyFrom(const ListOperationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ListOperationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOperationOptions::IsInitialized() const {
  return true;
}

void ListOperationOptions::InternalSwap(ListOperationOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filter_query_, lhs_arena,
      &other->_impl_.filter_query_, rhs_arena
  );
  swap(_impl_.order_by_field_, other->_impl_.order_by_field_);
  swap(_impl_.max_result_size_, other->_impl_.max_result_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOperationOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[48]);
}

// ===================================================================

class ListOperationNextPageToken::_Internal {
 public:
  using HasBits = decltype(std::declval<ListOperationNextPageToken>()._impl_._has_bits_);
  static void set_has_id_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ml_metadata::ListOperationOptions& set_options(const ListOperationNextPageToken* msg);
  static void set_has_set_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ml_metadata::ListOperationOptions&
ListOperationNextPageToken::_Internal::set_options(const ListOperationNextPageToken* msg) {
  return *msg->_impl_.set_options_;
}
ListOperationNextPageToken::ListOperationNextPageToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ListOperationNextPageToken)
}
ListOperationNextPageToken::ListOperationNextPageToken(const ListOperationNextPageToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListOperationNextPageToken* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.listed_ids_){from._impl_.listed_ids_}
    , decltype(_impl_.set_options_){nullptr}
    , decltype(_impl_.id_offset_){}
    , decltype(_impl_.field_offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_set_options()) {
    _this->_impl_.set_options_ = new ::ml_metadata::ListOperationOptions(*from._impl_.set_options_);
  }
  ::memcpy(&_impl_.id_offset_, &from._impl_.id_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.field_offset_) -
    reinterpret_cast<char*>(&_impl_.id_offset_)) + sizeof(_impl_.field_offset_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ListOperationNextPageToken)
}

inline void ListOperationNextPageToken::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.listed_ids_){arena}
    , decltype(_impl_.set_options_){nullptr}
    , decltype(_impl_.id_offset_){int64_t{0}}
    , decltype(_impl_.field_offset_){int64_t{0}}
  };
}

ListOperationNextPageToken::~ListOperationNextPageToken() {
  // @@protoc_insertion_point(destructor:ml_metadata.ListOperationNextPageToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListOperationNextPageToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listed_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.set_options_;
}

void ListOperationNextPageToken::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListOperationNextPageToken::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ListOperationNextPageToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listed_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.set_options_ != nullptr);
    _impl_.set_options_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.id_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.field_offset_) -
        reinterpret_cast<char*>(&_impl_.id_offset_)) + sizeof(_impl_.field_offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListOperationNextPageToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id_offset(&has_bits);
          _impl_.id_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 field_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_field_offset(&has_bits);
          _impl_.field_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.ListOperationOptions set_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 listed_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_listed_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_listed_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListOperationNextPageToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ListOperationNextPageToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 id_offset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id_offset(), target);
  }

  // optional int64 field_offset = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_field_offset(), target);
  }

  // optional .ml_metadata.ListOperationOptions set_options = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::set_options(this),
        _Internal::set_options(this).GetCachedSize(), target, stream);
  }

  // repeated int64 listed_ids = 4;
  for (int i = 0, n = this->_internal_listed_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_listed_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ListOperationNextPageToken)
  return target;
}

size_t ListOperationNextPageToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ListOperationNextPageToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 listed_ids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.listed_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_listed_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ml_metadata.ListOperationOptions set_options = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.set_options_);
    }

    // optional int64 id_offset = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id_offset());
    }

    // optional int64 field_offset = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_field_offset());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOperationNextPageToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListOperationNextPageToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOperationNextPageToken::GetClassData() const { return &_class_data_; }


void ListOperationNextPageToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListOperationNextPageToken*>(&to_msg);
  auto& from = static_cast<const ListOperationNextPageToken&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ListOperationNextPageToken)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.listed_ids_.MergeFrom(from._impl_.listed_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_set_options()->::ml_metadata::ListOperationOptions::MergeFrom(
          from._internal_set_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_offset_ = from._impl_.id_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.field_offset_ = from._impl_.field_offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListOperationNextPageToken::CopyFrom(const ListOperationNextPageToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ListOperationNextPageToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOperationNextPageToken::IsInitialized() const {
  return true;
}

void ListOperationNextPageToken::InternalSwap(ListOperationNextPageToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.listed_ids_.InternalSwap(&other->_impl_.listed_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListOperationNextPageToken, _impl_.field_offset_)
      + sizeof(ListOperationNextPageToken::_impl_.field_offset_)
      - PROTOBUF_FIELD_OFFSET(ListOperationNextPageToken, _impl_.set_options_)>(
          reinterpret_cast<char*>(&_impl_.set_options_),
          reinterpret_cast<char*>(&other->_impl_.set_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOperationNextPageToken::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[49]);
}

// ===================================================================

class TransactionOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionOptions>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransactionOptions::TransactionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.TransactionOptions)
}
TransactionOptions::TransactionOptions(const TransactionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.TransactionOptions)
}

inline void TransactionOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionOptions::~TransactionOptions() {
  // @@protoc_insertion_point(destructor:ml_metadata.TransactionOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.tag_.Destroy();
}

void TransactionOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.TransactionOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.TransactionOptions.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.TransactionOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.TransactionOptions.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // Extension range [1000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.TransactionOptions)
  return target;
}

size_t TransactionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.TransactionOptions)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionOptions::GetClassData() const { return &_class_data_; }


void TransactionOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionOptions*>(&to_msg);
  auto& from = static_cast<const TransactionOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.TransactionOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tag()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOptions::CopyFrom(const TransactionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.TransactionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOptions::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TransactionOptions::InternalSwap(TransactionOptions* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[50]);
}

// ===================================================================

class LineageGraphQueryOptions_BoundaryConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<LineageGraphQueryOptions_BoundaryConstraint>()._impl_._has_bits_);
  static void set_has_max_num_hops(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boundary_artifacts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_boundary_executions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LineageGraphQueryOptions_BoundaryConstraint::LineageGraphQueryOptions_BoundaryConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.LineageGraphQueryOptions.BoundaryConstraint)
}
LineageGraphQueryOptions_BoundaryConstraint::LineageGraphQueryOptions_BoundaryConstraint(const LineageGraphQueryOptions_BoundaryConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineageGraphQueryOptions_BoundaryConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boundary_artifacts_){}
    , decltype(_impl_.boundary_executions_){}
    , decltype(_impl_.max_num_hops_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.boundary_artifacts_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boundary_artifacts_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_boundary_artifacts()) {
    _this->_impl_.boundary_artifacts_.Set(from._internal_boundary_artifacts(), 
      _this->GetArenaForAllocation());
  }
  _impl_.boundary_executions_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boundary_executions_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_boundary_executions()) {
    _this->_impl_.boundary_executions_.Set(from._internal_boundary_executions(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.max_num_hops_ = from._impl_.max_num_hops_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.LineageGraphQueryOptions.BoundaryConstraint)
}

inline void LineageGraphQueryOptions_BoundaryConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boundary_artifacts_){}
    , decltype(_impl_.boundary_executions_){}
    , decltype(_impl_.max_num_hops_){int64_t{0}}
  };
  _impl_.boundary_artifacts_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boundary_artifacts_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.boundary_executions_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boundary_executions_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LineageGraphQueryOptions_BoundaryConstraint::~LineageGraphQueryOptions_BoundaryConstraint() {
  // @@protoc_insertion_point(destructor:ml_metadata.LineageGraphQueryOptions.BoundaryConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineageGraphQueryOptions_BoundaryConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.boundary_artifacts_.Destroy();
  _impl_.boundary_executions_.Destroy();
}

void LineageGraphQueryOptions_BoundaryConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineageGraphQueryOptions_BoundaryConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.LineageGraphQueryOptions.BoundaryConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.boundary_artifacts_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.boundary_executions_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.max_num_hops_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineageGraphQueryOptions_BoundaryConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 max_num_hops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_num_hops(&has_bits);
          _impl_.max_num_hops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string boundary_artifacts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_boundary_artifacts();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.LineageGraphQueryOptions.BoundaryConstraint.boundary_artifacts");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string boundary_executions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_boundary_executions();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.LineageGraphQueryOptions.BoundaryConstraint.boundary_executions");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineageGraphQueryOptions_BoundaryConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.LineageGraphQueryOptions.BoundaryConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 max_num_hops = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_num_hops(), target);
  }

  // optional string boundary_artifacts = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_boundary_artifacts().data(), static_cast<int>(this->_internal_boundary_artifacts().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.LineageGraphQueryOptions.BoundaryConstraint.boundary_artifacts");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_boundary_artifacts(), target);
  }

  // optional string boundary_executions = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_boundary_executions().data(), static_cast<int>(this->_internal_boundary_executions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.LineageGraphQueryOptions.BoundaryConstraint.boundary_executions");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_boundary_executions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.LineageGraphQueryOptions.BoundaryConstraint)
  return target;
}

size_t LineageGraphQueryOptions_BoundaryConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.LineageGraphQueryOptions.BoundaryConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string boundary_artifacts = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_boundary_artifacts());
    }

    // optional string boundary_executions = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_boundary_executions());
    }

    // optional int64 max_num_hops = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_num_hops());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineageGraphQueryOptions_BoundaryConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineageGraphQueryOptions_BoundaryConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineageGraphQueryOptions_BoundaryConstraint::GetClassData() const { return &_class_data_; }


void LineageGraphQueryOptions_BoundaryConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineageGraphQueryOptions_BoundaryConstraint*>(&to_msg);
  auto& from = static_cast<const LineageGraphQueryOptions_BoundaryConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.LineageGraphQueryOptions.BoundaryConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_boundary_artifacts(from._internal_boundary_artifacts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_boundary_executions(from._internal_boundary_executions());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_num_hops_ = from._impl_.max_num_hops_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineageGraphQueryOptions_BoundaryConstraint::CopyFrom(const LineageGraphQueryOptions_BoundaryConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.LineageGraphQueryOptions.BoundaryConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineageGraphQueryOptions_BoundaryConstraint::IsInitialized() const {
  return true;
}

void LineageGraphQueryOptions_BoundaryConstraint::InternalSwap(LineageGraphQueryOptions_BoundaryConstraint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.boundary_artifacts_, lhs_arena,
      &other->_impl_.boundary_artifacts_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.boundary_executions_, lhs_arena,
      &other->_impl_.boundary_executions_, rhs_arena
  );
  swap(_impl_.max_num_hops_, other->_impl_.max_num_hops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineageGraphQueryOptions_BoundaryConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[51]);
}

// ===================================================================

class LineageGraphQueryOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<LineageGraphQueryOptions>()._impl_._has_bits_);
  static const ::ml_metadata::ListOperationOptions& artifacts_options(const LineageGraphQueryOptions* msg);
  static const ::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint& stop_conditions(const LineageGraphQueryOptions* msg);
  static void set_has_stop_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_node_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ml_metadata::ListOperationOptions&
LineageGraphQueryOptions::_Internal::artifacts_options(const LineageGraphQueryOptions* msg) {
  return *msg->_impl_.query_nodes_.artifacts_options_;
}
const ::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint&
LineageGraphQueryOptions::_Internal::stop_conditions(const LineageGraphQueryOptions* msg) {
  return *msg->_impl_.stop_conditions_;
}
void LineageGraphQueryOptions::set_allocated_artifacts_options(::ml_metadata::ListOperationOptions* artifacts_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query_nodes();
  if (artifacts_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(artifacts_options);
    if (message_arena != submessage_arena) {
      artifacts_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, artifacts_options, submessage_arena);
    }
    set_has_artifacts_options();
    _impl_.query_nodes_.artifacts_options_ = artifacts_options;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.LineageGraphQueryOptions.artifacts_options)
}
LineageGraphQueryOptions::LineageGraphQueryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.LineageGraphQueryOptions)
}
LineageGraphQueryOptions::LineageGraphQueryOptions(const LineageGraphQueryOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineageGraphQueryOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_conditions_){nullptr}
    , decltype(_impl_.max_node_size_){}
    , decltype(_impl_.query_nodes_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stop_conditions()) {
    _this->_impl_.stop_conditions_ = new ::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint(*from._impl_.stop_conditions_);
  }
  _this->_impl_.max_node_size_ = from._impl_.max_node_size_;
  clear_has_query_nodes();
  switch (from.query_nodes_case()) {
    case kArtifactsOptions: {
      _this->_internal_mutable_artifacts_options()->::ml_metadata::ListOperationOptions::MergeFrom(
          from._internal_artifacts_options());
      break;
    }
    case QUERY_NODES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.LineageGraphQueryOptions)
}

inline void LineageGraphQueryOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_conditions_){nullptr}
    , decltype(_impl_.max_node_size_){int64_t{20}}
    , decltype(_impl_.query_nodes_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_query_nodes();
}

LineageGraphQueryOptions::~LineageGraphQueryOptions() {
  // @@protoc_insertion_point(destructor:ml_metadata.LineageGraphQueryOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineageGraphQueryOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stop_conditions_;
  if (has_query_nodes()) {
    clear_query_nodes();
  }
}

void LineageGraphQueryOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineageGraphQueryOptions::clear_query_nodes() {
// @@protoc_insertion_point(one_of_clear_start:ml_metadata.LineageGraphQueryOptions)
  switch (query_nodes_case()) {
    case kArtifactsOptions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_nodes_.artifacts_options_;
      }
      break;
    }
    case QUERY_NODES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = QUERY_NODES_NOT_SET;
}


void LineageGraphQueryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.LineageGraphQueryOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.stop_conditions_ != nullptr);
      _impl_.stop_conditions_->Clear();
    }
    _impl_.max_node_size_ = int64_t{20};
  }
  clear_query_nodes();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineageGraphQueryOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ml_metadata.ListOperationOptions artifacts_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_artifacts_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.LineageGraphQueryOptions.BoundaryConstraint stop_conditions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_conditions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_node_size = 3 [default = 20];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_node_size(&has_bits);
          _impl_.max_node_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineageGraphQueryOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.LineageGraphQueryOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ml_metadata.ListOperationOptions artifacts_options = 1;
  if (_internal_has_artifacts_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::artifacts_options(this),
        _Internal::artifacts_options(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ml_metadata.LineageGraphQueryOptions.BoundaryConstraint stop_conditions = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stop_conditions(this),
        _Internal::stop_conditions(this).GetCachedSize(), target, stream);
  }

  // optional int64 max_node_size = 3 [default = 20];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_node_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.LineageGraphQueryOptions)
  return target;
}

size_t LineageGraphQueryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.LineageGraphQueryOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ml_metadata.LineageGraphQueryOptions.BoundaryConstraint stop_conditions = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_conditions_);
    }

    // optional int64 max_node_size = 3 [default = 20];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_node_size());
    }

  }
  switch (query_nodes_case()) {
    // .ml_metadata.ListOperationOptions artifacts_options = 1;
    case kArtifactsOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_nodes_.artifacts_options_);
      break;
    }
    case QUERY_NODES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineageGraphQueryOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineageGraphQueryOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineageGraphQueryOptions::GetClassData() const { return &_class_data_; }


void LineageGraphQueryOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineageGraphQueryOptions*>(&to_msg);
  auto& from = static_cast<const LineageGraphQueryOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.LineageGraphQueryOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stop_conditions()->::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint::MergeFrom(
          from._internal_stop_conditions());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_node_size_ = from._impl_.max_node_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.query_nodes_case()) {
    case kArtifactsOptions: {
      _this->_internal_mutable_artifacts_options()->::ml_metadata::ListOperationOptions::MergeFrom(
          from._internal_artifacts_options());
      break;
    }
    case QUERY_NODES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineageGraphQueryOptions::CopyFrom(const LineageGraphQueryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.LineageGraphQueryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineageGraphQueryOptions::IsInitialized() const {
  return true;
}

void LineageGraphQueryOptions::InternalSwap(LineageGraphQueryOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stop_conditions_, other->_impl_.stop_conditions_);
  swap(_impl_.max_node_size_, other->_impl_.max_node_size_);
  swap(_impl_.query_nodes_, other->_impl_.query_nodes_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineageGraphQueryOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[52]);
}

// ===================================================================

class LineageSubgraphQueryOptions_StartingNodes::_Internal {
 public:
  using HasBits = decltype(std::declval<LineageSubgraphQueryOptions_StartingNodes>()._impl_._has_bits_);
  static void set_has_filter_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LineageSubgraphQueryOptions_StartingNodes::LineageSubgraphQueryOptions_StartingNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.LineageSubgraphQueryOptions.StartingNodes)
}
LineageSubgraphQueryOptions_StartingNodes::LineageSubgraphQueryOptions_StartingNodes(const LineageSubgraphQueryOptions_StartingNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineageSubgraphQueryOptions_StartingNodes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_query_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filter_query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filter_query()) {
    _this->_impl_.filter_query_.Set(from._internal_filter_query(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.LineageSubgraphQueryOptions.StartingNodes)
}

inline void LineageSubgraphQueryOptions_StartingNodes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_query_){}
  };
  _impl_.filter_query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LineageSubgraphQueryOptions_StartingNodes::~LineageSubgraphQueryOptions_StartingNodes() {
  // @@protoc_insertion_point(destructor:ml_metadata.LineageSubgraphQueryOptions.StartingNodes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineageSubgraphQueryOptions_StartingNodes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filter_query_.Destroy();
}

void LineageSubgraphQueryOptions_StartingNodes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineageSubgraphQueryOptions_StartingNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.LineageSubgraphQueryOptions.StartingNodes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.filter_query_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineageSubgraphQueryOptions_StartingNodes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filter_query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filter_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.LineageSubgraphQueryOptions.StartingNodes.filter_query");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineageSubgraphQueryOptions_StartingNodes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.LineageSubgraphQueryOptions.StartingNodes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string filter_query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter_query().data(), static_cast<int>(this->_internal_filter_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.LineageSubgraphQueryOptions.StartingNodes.filter_query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.LineageSubgraphQueryOptions.StartingNodes)
  return target;
}

size_t LineageSubgraphQueryOptions_StartingNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.LineageSubgraphQueryOptions.StartingNodes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string filter_query = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_query());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineageSubgraphQueryOptions_StartingNodes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineageSubgraphQueryOptions_StartingNodes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineageSubgraphQueryOptions_StartingNodes::GetClassData() const { return &_class_data_; }


void LineageSubgraphQueryOptions_StartingNodes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineageSubgraphQueryOptions_StartingNodes*>(&to_msg);
  auto& from = static_cast<const LineageSubgraphQueryOptions_StartingNodes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.LineageSubgraphQueryOptions.StartingNodes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter_query()) {
    _this->_internal_set_filter_query(from._internal_filter_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineageSubgraphQueryOptions_StartingNodes::CopyFrom(const LineageSubgraphQueryOptions_StartingNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.LineageSubgraphQueryOptions.StartingNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineageSubgraphQueryOptions_StartingNodes::IsInitialized() const {
  return true;
}

void LineageSubgraphQueryOptions_StartingNodes::InternalSwap(LineageSubgraphQueryOptions_StartingNodes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filter_query_, lhs_arena,
      &other->_impl_.filter_query_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LineageSubgraphQueryOptions_StartingNodes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[53]);
}

// ===================================================================

class LineageSubgraphQueryOptions_EndingNodes::_Internal {
 public:
  using HasBits = decltype(std::declval<LineageSubgraphQueryOptions_EndingNodes>()._impl_._has_bits_);
  static void set_has_filter_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_ending_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LineageSubgraphQueryOptions_EndingNodes::LineageSubgraphQueryOptions_EndingNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.LineageSubgraphQueryOptions.EndingNodes)
}
LineageSubgraphQueryOptions_EndingNodes::LineageSubgraphQueryOptions_EndingNodes(const LineageSubgraphQueryOptions_EndingNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineageSubgraphQueryOptions_EndingNodes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_query_){}
    , decltype(_impl_.include_ending_nodes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filter_query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filter_query()) {
    _this->_impl_.filter_query_.Set(from._internal_filter_query(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.include_ending_nodes_ = from._impl_.include_ending_nodes_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.LineageSubgraphQueryOptions.EndingNodes)
}

inline void LineageSubgraphQueryOptions_EndingNodes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_query_){}
    , decltype(_impl_.include_ending_nodes_){false}
  };
  _impl_.filter_query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LineageSubgraphQueryOptions_EndingNodes::~LineageSubgraphQueryOptions_EndingNodes() {
  // @@protoc_insertion_point(destructor:ml_metadata.LineageSubgraphQueryOptions.EndingNodes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineageSubgraphQueryOptions_EndingNodes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filter_query_.Destroy();
}

void LineageSubgraphQueryOptions_EndingNodes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineageSubgraphQueryOptions_EndingNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.LineageSubgraphQueryOptions.EndingNodes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.filter_query_.ClearNonDefaultToEmpty();
  }
  _impl_.include_ending_nodes_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineageSubgraphQueryOptions_EndingNodes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filter_query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filter_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ml_metadata.LineageSubgraphQueryOptions.EndingNodes.filter_query");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool include_ending_nodes = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_include_ending_nodes(&has_bits);
          _impl_.include_ending_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineageSubgraphQueryOptions_EndingNodes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.LineageSubgraphQueryOptions.EndingNodes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string filter_query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter_query().data(), static_cast<int>(this->_internal_filter_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ml_metadata.LineageSubgraphQueryOptions.EndingNodes.filter_query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter_query(), target);
  }

  // optional bool include_ending_nodes = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_ending_nodes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.LineageSubgraphQueryOptions.EndingNodes)
  return target;
}

size_t LineageSubgraphQueryOptions_EndingNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.LineageSubgraphQueryOptions.EndingNodes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filter_query = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter_query());
    }

    // optional bool include_ending_nodes = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineageSubgraphQueryOptions_EndingNodes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineageSubgraphQueryOptions_EndingNodes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineageSubgraphQueryOptions_EndingNodes::GetClassData() const { return &_class_data_; }


void LineageSubgraphQueryOptions_EndingNodes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineageSubgraphQueryOptions_EndingNodes*>(&to_msg);
  auto& from = static_cast<const LineageSubgraphQueryOptions_EndingNodes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.LineageSubgraphQueryOptions.EndingNodes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filter_query(from._internal_filter_query());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.include_ending_nodes_ = from._impl_.include_ending_nodes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineageSubgraphQueryOptions_EndingNodes::CopyFrom(const LineageSubgraphQueryOptions_EndingNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.LineageSubgraphQueryOptions.EndingNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineageSubgraphQueryOptions_EndingNodes::IsInitialized() const {
  return true;
}

void LineageSubgraphQueryOptions_EndingNodes::InternalSwap(LineageSubgraphQueryOptions_EndingNodes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filter_query_, lhs_arena,
      &other->_impl_.filter_query_, rhs_arena
  );
  swap(_impl_.include_ending_nodes_, other->_impl_.include_ending_nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineageSubgraphQueryOptions_EndingNodes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[54]);
}

// ===================================================================

class LineageSubgraphQueryOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<LineageSubgraphQueryOptions>()._impl_._has_bits_);
  static const ::ml_metadata::LineageSubgraphQueryOptions_StartingNodes& starting_artifacts(const LineageSubgraphQueryOptions* msg);
  static const ::ml_metadata::LineageSubgraphQueryOptions_StartingNodes& starting_executions(const LineageSubgraphQueryOptions* msg);
  static void set_has_max_num_hops(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ml_metadata::LineageSubgraphQueryOptions_EndingNodes& ending_artifacts(const LineageSubgraphQueryOptions* msg);
  static void set_has_ending_artifacts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ml_metadata::LineageSubgraphQueryOptions_EndingNodes& ending_executions(const LineageSubgraphQueryOptions* msg);
  static void set_has_ending_executions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ml_metadata::LineageSubgraphQueryOptions_StartingNodes&
LineageSubgraphQueryOptions::_Internal::starting_artifacts(const LineageSubgraphQueryOptions* msg) {
  return *msg->_impl_.starting_nodes_.starting_artifacts_;
}
const ::ml_metadata::LineageSubgraphQueryOptions_StartingNodes&
LineageSubgraphQueryOptions::_Internal::starting_executions(const LineageSubgraphQueryOptions* msg) {
  return *msg->_impl_.starting_nodes_.starting_executions_;
}
const ::ml_metadata::LineageSubgraphQueryOptions_EndingNodes&
LineageSubgraphQueryOptions::_Internal::ending_artifacts(const LineageSubgraphQueryOptions* msg) {
  return *msg->_impl_.ending_artifacts_;
}
const ::ml_metadata::LineageSubgraphQueryOptions_EndingNodes&
LineageSubgraphQueryOptions::_Internal::ending_executions(const LineageSubgraphQueryOptions* msg) {
  return *msg->_impl_.ending_executions_;
}
void LineageSubgraphQueryOptions::set_allocated_starting_artifacts(::ml_metadata::LineageSubgraphQueryOptions_StartingNodes* starting_artifacts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_starting_nodes();
  if (starting_artifacts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(starting_artifacts);
    if (message_arena != submessage_arena) {
      starting_artifacts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starting_artifacts, submessage_arena);
    }
    set_has_starting_artifacts();
    _impl_.starting_nodes_.starting_artifacts_ = starting_artifacts;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.LineageSubgraphQueryOptions.starting_artifacts)
}
void LineageSubgraphQueryOptions::set_allocated_starting_executions(::ml_metadata::LineageSubgraphQueryOptions_StartingNodes* starting_executions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_starting_nodes();
  if (starting_executions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(starting_executions);
    if (message_arena != submessage_arena) {
      starting_executions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starting_executions, submessage_arena);
    }
    set_has_starting_executions();
    _impl_.starting_nodes_.starting_executions_ = starting_executions;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.LineageSubgraphQueryOptions.starting_executions)
}
LineageSubgraphQueryOptions::LineageSubgraphQueryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.LineageSubgraphQueryOptions)
}
LineageSubgraphQueryOptions::LineageSubgraphQueryOptions(const LineageSubgraphQueryOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineageSubgraphQueryOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ending_artifacts_){nullptr}
    , decltype(_impl_.ending_executions_){nullptr}
    , decltype(_impl_.max_num_hops_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.starting_nodes_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ending_artifacts()) {
    _this->_impl_.ending_artifacts_ = new ::ml_metadata::LineageSubgraphQueryOptions_EndingNodes(*from._impl_.ending_artifacts_);
  }
  if (from._internal_has_ending_executions()) {
    _this->_impl_.ending_executions_ = new ::ml_metadata::LineageSubgraphQueryOptions_EndingNodes(*from._impl_.ending_executions_);
  }
  ::memcpy(&_impl_.max_num_hops_, &from._impl_.max_num_hops_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.max_num_hops_)) + sizeof(_impl_.direction_));
  clear_has_starting_nodes();
  switch (from.starting_nodes_case()) {
    case kStartingArtifacts: {
      _this->_internal_mutable_starting_artifacts()->::ml_metadata::LineageSubgraphQueryOptions_StartingNodes::MergeFrom(
          from._internal_starting_artifacts());
      break;
    }
    case kStartingExecutions: {
      _this->_internal_mutable_starting_executions()->::ml_metadata::LineageSubgraphQueryOptions_StartingNodes::MergeFrom(
          from._internal_starting_executions());
      break;
    }
    case STARTING_NODES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.LineageSubgraphQueryOptions)
}

inline void LineageSubgraphQueryOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ending_artifacts_){nullptr}
    , decltype(_impl_.ending_executions_){nullptr}
    , decltype(_impl_.max_num_hops_){int64_t{0}}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.starting_nodes_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_starting_nodes();
}

LineageSubgraphQueryOptions::~LineageSubgraphQueryOptions() {
  // @@protoc_insertion_point(destructor:ml_metadata.LineageSubgraphQueryOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineageSubgraphQueryOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ending_artifacts_;
  if (this != internal_default_instance()) delete _impl_.ending_executions_;
  if (has_starting_nodes()) {
    clear_starting_nodes();
  }
}

void LineageSubgraphQueryOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineageSubgraphQueryOptions::clear_starting_nodes() {
// @@protoc_insertion_point(one_of_clear_start:ml_metadata.LineageSubgraphQueryOptions)
  switch (starting_nodes_case()) {
    case kStartingArtifacts: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.starting_nodes_.starting_artifacts_;
      }
      break;
    }
    case kStartingExecutions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.starting_nodes_.starting_executions_;
      }
      break;
    }
    case STARTING_NODES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STARTING_NODES_NOT_SET;
}


void LineageSubgraphQueryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.LineageSubgraphQueryOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.ending_artifacts_ != nullptr);
      _impl_.ending_artifacts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ending_executions_ != nullptr);
      _impl_.ending_executions_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.max_num_hops_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.direction_) -
        reinterpret_cast<char*>(&_impl_.max_num_hops_)) + sizeof(_impl_.direction_));
  }
  clear_starting_nodes();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineageSubgraphQueryOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ml_metadata.LineageSubgraphQueryOptions.StartingNodes starting_artifacts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_starting_artifacts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ml_metadata.LineageSubgraphQueryOptions.StartingNodes starting_executions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_starting_executions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_num_hops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_num_hops(&has_bits);
          _impl_.max_num_hops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.LineageSubgraphQueryOptions.Direction direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ml_metadata::LineageSubgraphQueryOptions_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::ml_metadata::LineageSubgraphQueryOptions_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.LineageSubgraphQueryOptions.EndingNodes ending_artifacts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ending_artifacts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ml_metadata.LineageSubgraphQueryOptions.EndingNodes ending_executions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ending_executions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineageSubgraphQueryOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.LineageSubgraphQueryOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (starting_nodes_case()) {
    case kStartingArtifacts: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::starting_artifacts(this),
          _Internal::starting_artifacts(this).GetCachedSize(), target, stream);
      break;
    }
    case kStartingExecutions: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::starting_executions(this),
          _Internal::starting_executions(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 max_num_hops = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_num_hops(), target);
  }

  // optional .ml_metadata.LineageSubgraphQueryOptions.Direction direction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction(), target);
  }

  // optional .ml_metadata.LineageSubgraphQueryOptions.EndingNodes ending_artifacts = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ending_artifacts(this),
        _Internal::ending_artifacts(this).GetCachedSize(), target, stream);
  }

  // optional .ml_metadata.LineageSubgraphQueryOptions.EndingNodes ending_executions = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::ending_executions(this),
        _Internal::ending_executions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.LineageSubgraphQueryOptions)
  return target;
}

size_t LineageSubgraphQueryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.LineageSubgraphQueryOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ml_metadata.LineageSubgraphQueryOptions.EndingNodes ending_artifacts = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ending_artifacts_);
    }

    // optional .ml_metadata.LineageSubgraphQueryOptions.EndingNodes ending_executions = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ending_executions_);
    }

    // optional int64 max_num_hops = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_num_hops());
    }

    // optional .ml_metadata.LineageSubgraphQueryOptions.Direction direction = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
    }

  }
  switch (starting_nodes_case()) {
    // .ml_metadata.LineageSubgraphQueryOptions.StartingNodes starting_artifacts = 1;
    case kStartingArtifacts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.starting_nodes_.starting_artifacts_);
      break;
    }
    // .ml_metadata.LineageSubgraphQueryOptions.StartingNodes starting_executions = 2;
    case kStartingExecutions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.starting_nodes_.starting_executions_);
      break;
    }
    case STARTING_NODES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineageSubgraphQueryOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineageSubgraphQueryOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineageSubgraphQueryOptions::GetClassData() const { return &_class_data_; }


void LineageSubgraphQueryOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineageSubgraphQueryOptions*>(&to_msg);
  auto& from = static_cast<const LineageSubgraphQueryOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.LineageSubgraphQueryOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ending_artifacts()->::ml_metadata::LineageSubgraphQueryOptions_EndingNodes::MergeFrom(
          from._internal_ending_artifacts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ending_executions()->::ml_metadata::LineageSubgraphQueryOptions_EndingNodes::MergeFrom(
          from._internal_ending_executions());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_num_hops_ = from._impl_.max_num_hops_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.starting_nodes_case()) {
    case kStartingArtifacts: {
      _this->_internal_mutable_starting_artifacts()->::ml_metadata::LineageSubgraphQueryOptions_StartingNodes::MergeFrom(
          from._internal_starting_artifacts());
      break;
    }
    case kStartingExecutions: {
      _this->_internal_mutable_starting_executions()->::ml_metadata::LineageSubgraphQueryOptions_StartingNodes::MergeFrom(
          from._internal_starting_executions());
      break;
    }
    case STARTING_NODES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineageSubgraphQueryOptions::CopyFrom(const LineageSubgraphQueryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.LineageSubgraphQueryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineageSubgraphQueryOptions::IsInitialized() const {
  return true;
}

void LineageSubgraphQueryOptions::InternalSwap(LineageSubgraphQueryOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineageSubgraphQueryOptions, _impl_.direction_)
      + sizeof(LineageSubgraphQueryOptions::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(LineageSubgraphQueryOptions, _impl_.ending_artifacts_)>(
          reinterpret_cast<char*>(&_impl_.ending_artifacts_),
          reinterpret_cast<char*>(&other->_impl_.ending_artifacts_));
  swap(_impl_.starting_nodes_, other->_impl_.starting_nodes_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineageSubgraphQueryOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_getter, &descriptor_table_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto_once,
      file_level_metadata_ml_5fmetadata_2fproto_2fmetadata_5fstore_2eproto[55]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::ml_metadata::SystemTypeExtension >, 11, false>
  system_type_extension(kSystemTypeExtensionFieldNumber, ::ml_metadata::SystemTypeExtension::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace ml_metadata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ml_metadata::SystemTypeExtension*
Arena::CreateMaybeMessage< ::ml_metadata::SystemTypeExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::SystemTypeExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Value*
Arena::CreateMaybeMessage< ::ml_metadata::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Artifact_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::Artifact_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Artifact_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Artifact_CustomPropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::Artifact_CustomPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Artifact_CustomPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Artifact*
Arena::CreateMaybeMessage< ::ml_metadata::Artifact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Artifact >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ArtifactType_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::ArtifactType_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ArtifactType_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ArtifactType*
Arena::CreateMaybeMessage< ::ml_metadata::ArtifactType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ArtifactType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Event_Path_Step*
Arena::CreateMaybeMessage< ::ml_metadata::Event_Path_Step >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Event_Path_Step >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Event_Path*
Arena::CreateMaybeMessage< ::ml_metadata::Event_Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Event_Path >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Event*
Arena::CreateMaybeMessage< ::ml_metadata::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Execution_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::Execution_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Execution_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Execution_CustomPropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::Execution_CustomPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Execution_CustomPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Execution*
Arena::CreateMaybeMessage< ::ml_metadata::Execution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Execution >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ExecutionType_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::ExecutionType_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ExecutionType_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ExecutionType*
Arena::CreateMaybeMessage< ::ml_metadata::ExecutionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ExecutionType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ContextType_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::ContextType_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ContextType_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ContextType*
Arena::CreateMaybeMessage< ::ml_metadata::ContextType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ContextType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Context_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::Context_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Context_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Context_CustomPropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::Context_CustomPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Context_CustomPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Context*
Arena::CreateMaybeMessage< ::ml_metadata::Context >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Context >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Attribution*
Arena::CreateMaybeMessage< ::ml_metadata::Attribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Attribution >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Association*
Arena::CreateMaybeMessage< ::ml_metadata::Association >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Association >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ParentContext*
Arena::CreateMaybeMessage< ::ml_metadata::ParentContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ParentContext >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::LineageGraph*
Arena::CreateMaybeMessage< ::ml_metadata::LineageGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::LineageGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ArtifactStructType*
Arena::CreateMaybeMessage< ::ml_metadata::ArtifactStructType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ArtifactStructType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::UnionArtifactStructType*
Arena::CreateMaybeMessage< ::ml_metadata::UnionArtifactStructType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::UnionArtifactStructType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::IntersectionArtifactStructType*
Arena::CreateMaybeMessage< ::ml_metadata::IntersectionArtifactStructType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::IntersectionArtifactStructType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ListArtifactStructType*
Arena::CreateMaybeMessage< ::ml_metadata::ListArtifactStructType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ListArtifactStructType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::NoneArtifactStructType*
Arena::CreateMaybeMessage< ::ml_metadata::NoneArtifactStructType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::NoneArtifactStructType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::AnyArtifactStructType*
Arena::CreateMaybeMessage< ::ml_metadata::AnyArtifactStructType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::AnyArtifactStructType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::TupleArtifactStructType*
Arena::CreateMaybeMessage< ::ml_metadata::TupleArtifactStructType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::TupleArtifactStructType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::DictArtifactStructType_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ml_metadata::DictArtifactStructType_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::DictArtifactStructType_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::DictArtifactStructType*
Arena::CreateMaybeMessage< ::ml_metadata::DictArtifactStructType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::DictArtifactStructType >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::FakeDatabaseConfig*
Arena::CreateMaybeMessage< ::ml_metadata::FakeDatabaseConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::FakeDatabaseConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MySQLDatabaseConfig_SSLOptions*
Arena::CreateMaybeMessage< ::ml_metadata::MySQLDatabaseConfig_SSLOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MySQLDatabaseConfig_SSLOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MySQLDatabaseConfig*
Arena::CreateMaybeMessage< ::ml_metadata::MySQLDatabaseConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MySQLDatabaseConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::SqliteMetadataSourceConfig*
Arena::CreateMaybeMessage< ::ml_metadata::SqliteMetadataSourceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::SqliteMetadataSourceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions*
Arena::CreateMaybeMessage< ::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::PostgreSQLDatabaseConfig_SSLOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::PostgreSQLDatabaseConfig*
Arena::CreateMaybeMessage< ::ml_metadata::PostgreSQLDatabaseConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::PostgreSQLDatabaseConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MigrationOptions*
Arena::CreateMaybeMessage< ::ml_metadata::MigrationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MigrationOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::RetryOptions*
Arena::CreateMaybeMessage< ::ml_metadata::RetryOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::RetryOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ConnectionConfig*
Arena::CreateMaybeMessage< ::ml_metadata::ConnectionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ConnectionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::GrpcChannelArguments*
Arena::CreateMaybeMessage< ::ml_metadata::GrpcChannelArguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::GrpcChannelArguments >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataStoreClientConfig_SSLConfig*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataStoreClientConfig_SSLConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataStoreClientConfig_SSLConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataStoreClientConfig*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataStoreClientConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataStoreClientConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataStoreServerConfig_SSLConfig*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataStoreServerConfig_SSLConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataStoreServerConfig_SSLConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MetadataStoreServerConfig*
Arena::CreateMaybeMessage< ::ml_metadata::MetadataStoreServerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MetadataStoreServerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ListOperationOptions_OrderByField*
Arena::CreateMaybeMessage< ::ml_metadata::ListOperationOptions_OrderByField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ListOperationOptions_OrderByField >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ListOperationOptions*
Arena::CreateMaybeMessage< ::ml_metadata::ListOperationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ListOperationOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ListOperationNextPageToken*
Arena::CreateMaybeMessage< ::ml_metadata::ListOperationNextPageToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ListOperationNextPageToken >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::TransactionOptions*
Arena::CreateMaybeMessage< ::ml_metadata::TransactionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::TransactionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint*
Arena::CreateMaybeMessage< ::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::LineageGraphQueryOptions_BoundaryConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::LineageGraphQueryOptions*
Arena::CreateMaybeMessage< ::ml_metadata::LineageGraphQueryOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::LineageGraphQueryOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::LineageSubgraphQueryOptions_StartingNodes*
Arena::CreateMaybeMessage< ::ml_metadata::LineageSubgraphQueryOptions_StartingNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::LineageSubgraphQueryOptions_StartingNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::LineageSubgraphQueryOptions_EndingNodes*
Arena::CreateMaybeMessage< ::ml_metadata::LineageSubgraphQueryOptions_EndingNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::LineageSubgraphQueryOptions_EndingNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::LineageSubgraphQueryOptions*
Arena::CreateMaybeMessage< ::ml_metadata::LineageSubgraphQueryOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::LineageSubgraphQueryOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
